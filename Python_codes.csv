question,code
Create an array of length 5 which contains all even numbers between 1 and 10.,"arr = [2, 4, 6, 8, 10]"
"Formulate an equation to calculate the height of a triangle given the angle, side lengths and opposite side length.",Height of triangle = opposite side length * sin (angle) / side length
"Write a replace method for a string class which replaces the given string with a given set of characters.string = ""Hello World!""
replace_with = ""Greetings!""","def replace(self, replace_with):
    new_string = """"
    for char in self:
        if char == "" "":
            new_string += replace_with
        else:
            new_string += char
    return new_string"
Create an array of length 15 containing numbers divisible by 3 up to 45.,"arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]"
"Write a function to find the number of distinct states in a given matrix.matrix = [[1, 0, 0],
          [1, 0, 1],
          [1, 1, 1]]","def find_num_distinct_states(matrix):
    states = set()
    for row in matrix:
        state = """".join([str(x) for x in row])
        states.add(state)
    return len(states)"
Create a nested loop to print every combination of numbers between 0-9,"for i in range(10):
    for j in range(10):
        print(i, j)"
"Write a function to find the maximum difference between two numbers in a given array.arr = [5, 3, 17, 11, 9]","def max_difference(arr):
    max_diff = 0
    for i in range(len(arr)-1):
        diff = arr[i+1] - arr[i]
        if diff > max_diff:
            max_diff = diff
    return max_diff"
Write a function to generate the nth Fibonacci number.< noinput >,"def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-2) + fib(n-1)"
Write a class to represent a 2D point with x and y coordinates.,"class Point:
    def __init__(self, x, y):
        self.x = x 
        self.y = y 
   
    def __str__(self): 
        return ""({0},{1})"".format(self.x, self.y)"
"Write code that removes spaces from a given string.string = "" A B C D ""","def remove_spaces(string): 
    return """".join(string.split())"
Write a function that checks if a give number is even or odd.,"def is_even(n):
    if n%2 == 0:
        return True  
    else:
        return False"
Write code to create a list of all prime numbers between 2 and 100.,"def find_primes(n): 
    prime_list = [2] 
    for number in range(2, n + 1): 
        is_prime = True
        for k in range(2, number): 
            if number % k == 0: 
                is_prime = False 
        if is_prime: 
            prime_list.append(number) 
    return prime_list"
"Edit the following code to print out all even numbers from 1 to 10.for i in range(1,11):
    print(i)","for i in range(1,11):
    if i % 2 == 0:
        print(i)"
Write code to find the sum of all numbers between 1 and 10.,"sum = 0
for i in range(1,11):
    sum += i
print(sum)"
Create a function to calculate the area of a given circle.,"def area_circle(radius):
    return 3.14 * (radius**2)"
Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.,"import pandas as pd
import numpy as np

# Define features
features = [""wing_shape"", ""size"", ""tails_length"", ""color_pattern""] 

# Load the data
data = pd.read_csv(""birds.csv"")

# Preprocess the data to generate feature vectors
X = np.array(data[features]) 

# Make a target vector 
y = np.array(data[""species""]) 

# Divide the data into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a classification model
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Generate evaluation metrics
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)

print(""Model accuracy: %.2f"" % accuracy)"
"Use the function to debug the given program and prevent the segmentation fault.#include <stdio.h>

int main() {
    int array[] = {1, 2, 3, 4, 5};
    int n = 5;
    int i;
    // TODO
    for (i = 0; i <= n; i++) {
        printf(""%d\n"", array[i]);
    }
    return 0;
}","#include <stdio.h>

int main() {
    int array[] = {1, 2, 3, 4, 5};
    int n = 5;
    int i;
    // Limit loop size to the length of the array
    for (i = 0; i < n; i++) {
        printf(""%d\n"", array[i]);
    }
    return 0;
}"
"Replace the placeholder with a for loop for iterating over the numbers from 1 to n and printing them.for i in range(n):
    # TODO","for i in range(1, n+1):
    print(i)"
"Use try-except statements to detect and handle exceptions in the code.for i in range(n):
    x = 1/i","try:
    for i in range(n):
        x = 1/i
except ZeroDivisionError:
    print(""Zero division error encountered!"")"
"Re-write the code segment as a list comprehension.numbers = []
for i in range(10):
    if i % 2 == 0:
        numbers.append(i)",numbers = [i for i in range(10) if i % 2 == 0]
"Remove the boilerplate code from the program for printing 10 random numbers.import random

# Generate 10 random numbers
for i in range(10):
    # TODO","import random

# Generate 10 random numbers
for i in range(10):
    print(random.randrange(1, 101))"
"Modify the code to perform the mathematical expression “x to the power of y”.# Calculate x to the power of y
# TODO","# Calculate x to the power of y
x_pow_y = x**y"
"Create a dictionary for counting the occurrence of each letter in the given string.string = ""hello world""
#TODO","string = ""hello world""
letter_counts = {}

for letter in string:
    if letter in letter_counts:
       letter_counts[letter] += 1
    else:
        letter_counts[letter] = 1

print(letter_counts)"
"Follow the comments to complete the code that finds the maximum value in an array.# Find the maximum value in an array
arr = [4, 5, 2, 8, 7]
# TODO","# Find the maximum value in an array
arr = [4, 5, 2, 8, 7]

max_value = arr[0]
for i in range(1, len(arr)):
    if arr[i] > max_value:
        max_value = arr[i]

print(max_value)"
"Write a Python function to convert a given string to lowercase.string = ""FOO""","def to_lowercase(string):
    return string.lower()

string = ""FOO""
print(to_lowercase(string))"
"Edit the Python code so that it prints out the total number of elements in the list.list = [1, 2, 3, 4, 5]","list = [1, 2, 3, 4, 5]
print(""Total number of elements in the list: "", len(list))"
"Edit the code to create a try-except block to handle the exception.a = 5
b = 0

ans = a/b","try:
    a = 5
    b = 0

    ans = a/b
except ZeroDivisionError:
    print(""Cannot divide by zero."")"
Change the variable `x` to the data type desired.x = 'Hello World!',"x = ""Hello World!"""
"Create a function that takes an array as an argument and returns the sum of all the elements in the array.arr = [1, 2, 3, 4, 5]","def arraySum(arr):
    total = 0
    for num in arr:
        total += num
    return total"
"Sort the array in ascending order.arr = [3, 2, 1, 5, 4]","arr.sort() # [1, 2, 3, 4, 5]"
Generate a random integer between 4 and 8 (inclusively).,"import random
x = random.randint(4, 8)"
"Write a list comprehension to square each number in the list.arr = [1, 2, 3, 4, 5]","arr = [x**2 for x in arr] # [1, 4, 9, 16, 25]"
"Write a function that takes a string and reverses the words.text = ""Hello World!""","def reverseWords(text):
    return ' '.join(text.split()[::-1])

reverseWords(text) # ""World! Hello"""
Create a function that takes in two numbers as arguments and returns the product of the two.,"def multiply(x, y):
    return x*y"
"Using the given function, create a loop that counts from 0 to 9.function printNum(num){
  console.log(num)
}","for (let i = 0; i < 10; i++){
    printNum(i);
}"
"Count the number of characters in the string.text = ""Hello World!""",len(text) # 12
Generate a random number between 0 and 1 (inclusively).,Math.random(); // a random number between 0 and 1 (inclusively)
Compose a function named average_list which takes a list of numbers as its argument and computes the average.,"def average_list(nums):
    return sum(nums)/len(nums)"
Generate a snippet of code to extract all the URLs from the given string.This string contains some urls such as https://www.google.com and https://www.facebook.com.,"import re

string = ""This string contains some urls such as https://www.google.com and https://www.facebook.com.""

urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) 

print(urls)"
Create a list comprehension to generate a list of multiples of 3 from 0 to 23.,list_of_multiples_of_3 = [x*3 for x in range(8)]
"Design a program to find the longest element in the given list.[10, 100, 200, 500, 400]","def longest_element(list):
  max_length = 0
  max_length_item = None

  for item in list:
    if len(item) > max_length:
      max_length = len(item)
      max_length_item = item

  return max_length_item

list = [10, 100, 200, 500, 400]
longest_element(list) # 500"
Write a function to print all prime numbers between two given numbers.,"def print_prime_numbers_in_range(start, end):
  # start = starting number
  # end = ending number

  for num in range(start, end+1):
    # Prime numbers are greater than 1
    if num > 1:
      for i in range(2, num):
        if (num % i) == 0:
          break
      else:
        print(num)
---

11. Instruction: Generate a snippet of code to reverse given string
11. Input:
<noinput>
11. Output:
def reverse_string(input_string):
  string_length = len(input_string)
  reversed_string = """"
  
  for i in range(string_length-1,-1,-1):
    reversed_string += input_string[i]
  
  return reversed_string"
Write an algorithm in Python to determine if a number is even or odd.,"def is_even(num): 
    if num % 2 == 0: 
        return True 
    else: 
        return False"
Generate a regular expression to match a valid email address.,"/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/"
Is it possible to set a breakpoint that is not associated with any source code line in a GDB program?,"Yes, it is possible to set a breakpoint that is not associated with any source code line in a GDB program. For example, you can set a breakpoint on a function or a memory address. You can do this by using the break command with '*' prefix followed by the address of the breakpoint."
How can we encrypt a string in Python?,We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.
How to print the elements of a two-dimensional array in C?,"We can use nested loops to print the elements of a two-dimensional array in C. The outer loop iterates over the rows, while the inner loop iterates over the columns. For example, the following code snippet prints the elements of a two-dimensional array: 
 
int array[3][3] = {{1,2,3},{4,5,6},{7,8,9}};
for (int i=0; i<3; i++)
{   
    for(int j=0; j<3; j++) 
    {
        printf(""%d "", array[i][j]); 
    }
    printf(""\n"");
}"
"Using the following code, clean up the bugs and make sure the output functions correctly.def example_func(lst):
   for element in lst:
      if (type(element) == int):
         lst.append(element + 5)
   return lst
 
example_func([1, 2, ""hello""])","def example_func(lst):
   output_lst = []
   for element in lst:
      if (type(element) == int):
         output_lst.append(element + 5)
   return output_lst
 
example_func([1, 2, ""hello""])"
"Parse the string and return the number of unique alphabets in the string.StringInput = ""apple""","int count = 0;
for (int i = 0; i < StringInput.length(); i++) {
  if ((StringInput.charAt(i) >= 'a' && StringInput.charAt(i) <= 'z') || (StringInput.charAt(i) >= 'A' && StringInput.charAt(i) <= 'Z')) {
   count++;
  }
}
System.out.println(""Number of unique alphabets: "" + count);"
"Implement a function that finds the maximum element in a given array.arr = [45, 7, 0, 82, 23]","def find_max_element(arr): 
    max_element = arr[0] 
    for index in range(1, len(arr)): 
        if arr[index] > max_element: 
            max_element = arr[index] 
    return max_element
  
arr = [45, 7, 0, 82, 23]
max_element = find_max_element(arr) 
print(max_element)"
"Validate whether the string contains only alphabets or not.myString = ""abc123""","def check_string_alphabets(myString):
    for character in myString:
        if (not character.isalpha()):
            return False
    return True

myString = ""abc123""
if (check_string_alphabets(myString)):
    print(""String contains only alphabets"")
else:
    print(""String contains numbers"")"
"Rewrite the following code using ternary operator.num1 = 5
num2 = 10

if num1 < num2:
    print(""num1 is smaller than num2"")
else:
    print(""num1 is greater than or equal to num2"")","num1 = 5
num2 = 10

print(""num1 is smaller than num2"") if (num1 < num2) else print(""num1 is greater than or equal to num2"")"
Write a script to check if a given number is a palindrome or not.inputNumber = 121,"# Function to check whether the inputNumber is palindrome or not
def is_palindrome(inputNumber):

   # negative numbers are not palindrome
   if inputNumber < 0:
       return False

   # find the number of digits in the inputNumber
   div = 1
   while (inputNumber / div >= 10):
       div *= 10

   # check if the most significant and least significant digits match
   while (inputNumber != 0):
       # compare first and last digits
       firstdigit = inputNumber // div
       lastdigit =  inputNumber % 10
       if firstdigit != lastdigit:
           return False

       # remove the most and least significant digit of inputNumber
       inputNumber = (inputNumber % div) // 10

       # reduce div by a factor of 2,  since 2 digits
       # were removed
       div = div // 100
   return True

# Driver code to test above
inputNumber = 121
if is_palindrome(inputNumber) :
  print(""Yes"")
else:
  print(""No"")"
"Edit the following code to remove the bugs.def reverse_string(user_string): 
  if len(user_string) == 0: 
    return """" 
  else: 
    return reverse_string(user_string[1:]) + user_string[0] 
    
print(reverse_string(“test”))","def reverse_string(user_string): 
  reversed_string = ''
  if len(user_string) == 0: 
    return """" 
  else: 
    reversed_string = reverse_string(user_string[1:]) + user_string[0] 
    return reversed_string

user_string = 'test'
print(reverse_string(user_string))"
"What is the output of the following code?list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]

for x, y in zip(list1, list2):
    print(x * y)","a
bb
ccc"
"Write a function to remove all whitespace characters from a given string.myString = ""Hello   World    ""","def remove_whitespaces(myString):
    return ''.join(myString.split())

myString = ""Hello   World    ""
print(remove_whitespaces(myString))"
"Edit the following code to add try catch block.x = ""5""
y = ""2""
sum = int(x) + int(y)
print(""Sum of x and y is"", sum)","x = ""5""
y = ""2""
try:
   sum = int(x) + int(y)
   print(""Sum of x and y is"", sum)
except:
   print(""Error: Invalid input"")"
"Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.list_one = [1, 2, 3, 4]
list_two = [""a"", ""b"", ""c"", ""d""]","def list_dict(list_one, list_two):
    """"""Create a dictionary of elements in the two lists which have the same index.""""""
    assert len(list_one) == len(list_two), ""lists must be same length""
    dict = {}
    for i in range(len(list_one)):
        dict[list_one[i]] = list_two[i]
    return dict"
Create a quick-sort algorithm in Python.,"def quick_sort(arr):
    """"""Sort a list of numbers in ascending order using the Quick-Sort algorithm""""""
    if len(arr) == 0:
        return []

    pivot = arr[0]
    left_arr = [x for x in arr if x < pivot]
    right_arr = [x for x in arr if x > pivot]
    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"
Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence.,"def nth_fibonacci_number(n):
    """"""Find the value of n where n is the index of the Fibonacci Sequence."""""" 
    if n < 2:
        return n 
    elif n == 2:
        return 1
    else:
        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)"
Create a program that finds all the prime numbers less than or equal to a given number.,"def find_primes(num):
    """"""Find all the prime numbers less than or equal to a given number.""""""
    primes = []
    for i in range(2, num + 1):
        is_prime = True
        for j in range(2, int(i ** 0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes"
"Write a function that takes in a list of numbers and prints out the greatest number.list = [8, 2, 14, 25]","def find_greatest(list):
    """"""Print out the greatest number from a list of numbers.""""""
    greatest = list[0]
    for num in list:
        if num > greatest:
            greatest = num
    print('The greatest number is: ', greatest)"
"Design an algorithm that takes a list of strings and returns the longest string.list = [""cat"", ""dog"", ""lion"", ""bird""]","def find_longest(list):
    """"""Return the longest string from a list of strings."""""" 
    longest = list[0]
    for item in list:
        if len(item) > len(longest):
            longest = item
    return longest"
"Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.matrix = [[1, 2, 3], 
          [4, 5, 6], 
          [7, 8, 9]
         ]","def reverse_matrix(matrix):
    """"""Reverse the order of the rows and columns in a matrix of numbers.""""""
    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            reversed_matrix[j][i] = matrix[i][j]
    return reversed_matrix"
Design an algorithm that creates a random password of 8 characters.,"def generate_password():
    """"""Generate a random password of 8 characters.""""""
    import random
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'
    password = ''
    for i in range(8):
        password += random.SystemRandom().choice(chars)
    return password"
"FOr a given list, create a program that prints out the standard deviation of the elements in the list.list = [1, 4, 9, 16]","def std_dev(list):
    """"""Print the standard deviation of elements in a given list.""""""
    numerator = 0
    mean = sum(list) / len(list)
    for num in list:
        numerator += (num - mean) ** 2
    sd = (numerator / (len(list) - 1)) ** 0.5
    return sd"
"Create a program that can filter out words of a string that contain a specific character.string = ""This is a sentence""
character = 's'","def filter_string(string, character):
    """"""Filter out words of a string that contain a specific character.""""""
    words = string.split(' ')
    filtered_words = []
    for word in words:
        if character not in word:
            filtered_words.append(word)
    return ' '.join(filtered_words)"
"Create a program that can calculate the distance between two points in three-dimensional space.point1 = (1, 5, 9)
point2 = (4, 2, 8)","def dist_points_3d(point1, point2):
    """"""Calculate the distance between two points in three-dimensional space.""""""
    distance = ((point1[0] - point2[0]) ** 2 + 
                (point1[1] - point2[1]) ** 2 + 
                (point1[2] - point2[2]) ** 2) ** 0.5
    return distance"
"Create a program that ciphers a given text using the caesar cipher.text = ""This is a secret message""
key = 3","def caesar_cipher(text, key):
    """"""Cipher a given text using the Caesar Cipher.""""""
    ciphertext = """"
    for char in text: 
        if not char.isalpha():
            ciphertext += char
            continue
        offset = ord('a') if char.islower() else ord('A')
        new_char = (ord(char) - offset + key) % 26
        ciphertext += chr(offset + new_char)
    return ciphertext"
"Find the second smallest element in an integer array of size n.array = [4, 5, 8, 2, 9, 13]","def second_smallest(array):

smallest = min(array)
second_smallest = float('inf')

for num in array:
    if num > smallest and num < second_smallest:
        second_smallest = num
        
return second_smallest"
Create a function to calculate the maximum of two numbers.,"def max_of_two(x, y):
    if x > y:
        return x
    else:
        return y"
"Write a Python program to split a string on a given character separator.mystring = ""Hello, World!""
separator = "",""","def split(mystring, separator):
    return mystring.split(separator)"
"Write a Python program to get the day of week from a given date and time.from datetime import datetime
date = datetime(2020, 4, 20, 19, 15, 0)","from datetime import datetime

def get_day_of_week(date):
    return date.strftime(""%A"")"
"Write a Python program to print out an ASCII art of a given word.word = ""happy""","def draw_word(word):
    art = """"""
                 __
           _   /  \\
           \\_/\_/\_/
           /    |
           \___/
          \\\\_//
           \/ \/
            \/
        """"""
    for letter in word:
        art += ""  "" + letter
    print(art)"
"Write a Python program to concatenate all elements in a list into a string separated by a given separator.input_list = [""Python"", ""is"", ""a"", ""programming"", ""language""]
separator = ""-""","def list_to_string(input_list, separator):
    return separator.join(input_list)"
"Rewrite the following Python code using a for-loop.i = 0
while i <= 10:
    print(i)
    i += 1","for i in range(11):
    print(i)"
Write a code to print the current date and time in ISO format.,"from datetime import datetime

date_time_obj = datetime.now()

print(date_time_obj.isoformat()) # prints ""2020-07-29T15:10:01.584131"""
Create a new folder called 'data' within the current working directory.,"import os

# create 'data' folder in the current working directory
current_directory = os.getcwd()
new_directory = os.path.join(current_directory, 'data')
os.mkdir(new_directory)"
"Write a code to sort the following array in increasing order.[10, 2, 7, 8, 32, 4]","# sorting array using insertion sort
arr = [10, 2, 7, 8, 32, 4] 

# traverse through all array elements 
for i in range(1, len(arr)):
    key = arr[i]

    # move elements of arr[0..i-1], that are greater than key,
    # to one position ahead of their current position
    j = i-1
    while j >= 0 and key < arr[j] : 
            arr[j + 1] = arr[j] 
            j -= 1
    arr[j + 1] = key
  
#print the sorted array
print(arr)"
Create a regular expression to validate a URL string.,"# Regular expression to validate a URL string
^(http:\/\/|https:\/\/|ftp:\/\/)?(www\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\.)+[\w]{2,5}(\/\S*)?$"
"Write a Python code to calculate the mean of a given array.[1,2,3,4]","# calculate the mean of given array
arr = [1,2,3,4]

def calc_mean(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum / len(arr)

print(calc_mean(arr)) # prints 2.5"
"Write a code to get the time difference between two date-time objects.date1: 2019-05-11 21:00:00
date2: 2019-05-13 10:00:00","from datetime import datetime

def time_difference(date1, date2):
    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')
    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')

    return (date2_obj - date1_obj).total_seconds() // 3600

print(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0"
Write a code to access the nth element of a linked list.,"# defining the Node class
class Node: 
	def __init__(self, data): 
		self.data = data 
		self.next = None

def getNthElement(head, n): 
	current = head 
	count = 0

	# looping through the linked list
	while(current is not None): 
		if (count == n): 
			return current.data 
		count += 1
		current = current.next
	return -1"
"Write a code to add two linked lists of different sizes.list1 = [2->4->3]
list2 = [5->6->4->1]","# adding two linked lists
class Node: 
	def __init__(self, data): 
		self.data = data 
		self.next = None

def addTwoLists(first, second):
    # defining current and prev variables
    prev = None
    carry = 0
    temp = None

    # looping until one list has all nodes added
    while(first is not None or second is not None): 
        Node = Node() 		# Node data

        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) 
		
        # update carry
        if Node.data >= 10: 
            Node.data = Node.data % 10
            carry = 1
        else: 
            carry = 0
 
        temp = Node
        # Move first, second pointers ahead
        if first is not None: 
            first = first.next
        if second is not None: 
            second = second.next

        # Attach the previous node to the current node
        if prev is not None: 
            prev.next = Node 
        prev = Node
		
    if carry > 0: 
        temp.next = Node 
        temp.data = carry 
    return result"
"Modify the code below to make it calculate the sum of all the numbers from 1 to n.num = 5
sum = 0
for i in range(num):
  sum += i","num = 5
sum = 0
for i in range(1, num+1):
  sum += i"
"Create a program to generate a histogram using data from a set of numbers.values = [3, 4, 2, 5, 8, 1, 2, 6]","import matplotlib.pyplot as plt

values = [3, 4, 2, 5, 8, 1, 2, 6]

plt.hist(values, bins= 10, edgecolor='black', color='b')

plt.xlabel('Values')
plt.ylabel('Frequency')

plt.title('Histogram')

plt.show()"
Create a function to convert Celsius to Fahrenheit.,"def celsius_to_fahrenheit(c):
    f = c * (9/5) + 32
    return f"
"Write a function to find the number of occurrences of an element in a list.arr = [10, 20, 10, 40, 40, 40, 50]","def count_occurrences(arr, element):
    count = 0
    for e in arr:
        if e == element:
            count += 1
    return count

print(count_occurrences(arr, 40)) # Outputs: 3"
"Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100.","import random

d = dict()

keys = [""one"", ""two"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"", ""nine"", ""ten""]

for key in keys:
    d[key] =  random.randint(1,100)

print(d)"
"Write a Python program to remove all instances of a given value from a given list.[1, 2, 3, 2, 3, 4], 2","def remove_value(nums, val):
    res = []
    for num in nums:
        if num != val:
            res.append(num)
    return res"
Write a Python program to generate the first n Fibonacci numbers.,"def generate_fibonacci_numbers(n):
   if n==1:
       return [0]
   elif n==2:
       return [0,1]
   else:
       fib_list = [0,1]
       for i in range(2,n):
           fib_list.append(fib_list[i-1]+fib_list[i-2])
       return fib_list"
Construct an if-else statement that returns ‘even’ if the given number is even and ‘odd’ if the given number is odd.,"if n % 2 == 0:
    return 'even'
else:
    return 'odd'"
"Multiply two vectors of size 5 and return the output.a = [1, 2, 3, 4, 5] 
b = [5, 4, 3, 2, 1]","[5, 8, 9, 8, 5]"
"Create a list comprehension that takes all the elements of list_one and creates a new list where all the elements are doubled.list_one = [1, 2, 3, 4, 5]",[x*2 for x in list_one]
"You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def transpose(matrix):
    m = len(matrix)
    n = len(matrix[0])

    transpose_matrix = [[0] * m for _ in range(n)]
    for i in range(m):
        for j in range(n):
            transpose_matrix[j][i] = matrix[i][j]

    return transpose_matrix"
"Given a list of numbers, print the difference between the largest and the smallest number.list_of_numbers = [10, 7, 5, 12, 4]","difference = max(list_of_numbers) - min(list_of_numbers)
print(difference)"
"Create a for loop that goes through every element of list_of_words and prints ‘success’ if an element is equal to “example” and prints ‘failure’ in any other case.list_of_words = [""hello"", ""example"", ""world""]","for word in list_of_words:
    if word == ""example"":
        print(""success"")
    else:
        print(""failure"")"
"Create a function that takes in a list of temperatures and returns the average temperaturelist_of_temperatures = [20, 24, 26, 18]","def average_temperature(temperatures):
    num_items = len(temperatures)
    sum_items = 0
    for temperature in temperatures:
        sum_items += temperature
    return sum_items / num_items"
"You are given a list of numbers. Create a function that returns a new list with duplicates removedlist_of_numbers = [3, 6, 5, 5, 7, 6, 3]","def remove_duplicates(numbers):
    new_list = []
    for num in numbers:
        if num not in new_list:
            new_list.append(num)
    return new_list"
"In a given string, create a function that returns the longest consecutive sequence of characters.my_string = “abccdeefghj""","def longest_consecutive(string):
    character_list = []
    max_length = 0
    max_sequence = ''
    for char in string:
        if char in character_list:
            continue
        else:
            character_list.append(char)
            current_length = 1
            for i in range(1, len(string)):
                if string[i-1] == char and string[i] == char:
                    current_length += 1
            if current_length>max_length:
                max_length = current_length
                max_sequence = char*max_length
    return max_sequence"
Create a function that takes in a string and counts the number of vowels in it,"def count_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count"
Write a function that takes in a string and returns a list of all the words that have more than 5 characters,"def long_words(string):
    words = string.split()
    long_words_list = []
    for word in words:
        if len(word) > 5:
            long_words_list.append(word)
    return long_words_list"
Create a function that takes in a string and replaces all punctuation with a space,"import string

def replace_punctuation(string):
    for char in string:
        if char in string.punctuation:
            string = string.replace(char, "" "")
    return string"
"Create a function that takes in a list of numbers and returns true if the list contains at least one positive numberlist_of_numbers = [-2, -5, 0, 3]","def is_positive_number(numbers):
    for num in numbers:
        if num > 0:
            return True
    return False"
"Write an algorithm to find the largest element in an array.[8, 11, 12, 5, 3]","// Algorithm to find the largest element in an array

// Step 1: Create a variable 'max' and initialize it with value of the first element in the array
int max = arr[0];

// Step 2: Iterate through the array and compare each element with 'max'
for (int i = 1; i < arr.length; i++) {
    if (arr[i] > max) {
        max = arr[i];
    }
}

// Step 3: Return the value of 'max'
return max;"
"Design a function in Python to delete duplicates from a list.The list is: [2, 3, 2, 4, 5, 5, 6]","def remove_duplicates(list): 
      
    unique_list = [] 
      
    for x in list: 
        if x not in unique_list: 
            unique_list.append(x) 
    return unique_list 
  
list = [2, 3, 2, 4, 5, 5, 6] 
print (""Original List: "", list) 
print (""Unique List: "", remove_duplicates(list)) 

Output: 
Original List: [2, 3, 2, 4, 5, 5, 6]
Unique List: [2, 3, 4, 5, 6]"
"Implement an algorithm to find the sum of all the elements in an array.The array is: [3, 5, 8, 10, 4]","// Algorithm to calculate the sum of all the elements in an array

// Step 1: Initialize a variable 'sum' and set it equal to 0
int sum = 0;

// Step 2: Iterate through the array and add each element to 'sum'
for (int i = 0; i < arr.length; i++) {
    sum += arr[i];
}

// Step 3: Return the value of sum
return sum;"
"Write a Python program to loop through all the items in a given list.List: [1, 2, 3, 4, 5, 6]","my_list = [1, 2, 3, 4, 5, 6]
for item in my_list:
    print(item)"
Convert the following binary number to a decimal number.Binary Number: 10011,19 (10011 = 2^4 + 2^3 + 2^1 = 16 + 8 + 1 = 25)
What is the largest prime factor of the number 885?,The largest prime factor of 885 is 5.
Create a function in Python which takes two parameters and returns their product.,"def product(a, b):
    return a*b"
Construct a for loop that prints out the numbers from 1 to 10,"for i in range(1, 11):
    print(i)"
Construct a while loop that increments a counter every time a number is divisible by 3.,"int count = 0; 
int i = 0; 
while(i < 100)
{
     if(i % 3 == 0)
          count++; 
     i++;
}"
"Create a Regular Expression pattern to find words that contain the letters ""a"", ""b"", and ""c"".",\b[abc]+\w*\b
Create a class in Python to represent a Person.,"class Person:
    # Constructor 
    def __init__(self, name, age): 
         
        # instance attributes 
        self.name = name 
        self.age = age 
  
    # instance method 
    def greeting(self): 
        print(""My name is"", self.name) 
  
# construct an object 
person1 = Person(""John"", 36) 
  
# call a method of the object 
person1.greeting()"
Write a code to check whether the input string is a palindrome or not.a man a plan a canal panama,"""""""
Write a code to check whether the input string is a palindrome or not
""""""

def check_palindrome(input_string):
    rev_str = input_string[::-1]
 
    # Checking if both string are equal or not
    if rev_str == input_string:
        return True
    return False
  
# main function
if __name__ == ""__main__"":
    str = ""a man a plan a canal panama""
    if check_palindrome(str):
        print(""String is Palindrome"")
    else:
        print(""String is not Palindrome"")"
"Write a code to remove the duplicates from a given list.mylist = [1,2,3,1,2]","""""""
Write a code to remove the duplicates from a given list
""""""

# List containing the elements
mylist = [1,2,3,1,2]

# Creating a new list with unique elements
unique_list = list(set(mylist))

# Printing the new list
print(""New list with unique elements is {}"".format(unique_list))"
"Create a dictionary containing the key-value pair of a given string.string = ""test string""","""""""
Create a dictionary containing the key-value pair of a given string
""""""

# Given string
string = ""test string""

# Initialising an empty dictionary
my_dict = {}

# Looping through the given string
for char in string:
    # If the character is not already in dictionary
    if char not in my_dict:
        # Adding the character to the dictionary
        my_dict[char] = 1
    # If the character already exists in dictionary
    else:
        # Incrementing the frequency
        my_dict[char] += 1
        
# Printing the dictionary
print(my_dict)"
Write a code to generate a random number between 1 to 10.,"""""""
Write a code to generate a random number between 1 to 10
""""""

import random

# Generate random number between 1 to 10 
random_number = random.randint(1,10)

# Printing the random number
print(random_number)"
Write a code to create a 3 x 3 matrix containing all 0s.,"""""""
Write a code to create a 3 x 3 matrix containing all 0s
""""""

# Creating an empty 3 x 3 matrix
matrix = [[0 for x in range(3)] for y in range(3)] 
  
# Printing the matrix
print(matrix)"
"Write a code to check whether two strings are anagrams or not.first = ""listen""
second = ""silent""","""""""
Write a code to check whether two strings are anagrams or not
""""""

# Strings to be checked
first = ""listen""
second = ""silent""

# Sorting the strings
first_sorted = """".join(sorted(first))
second_sorted = """".join(sorted(second))

# Checking if both sorted strings are equal or not
if first_sorted == second_sorted:
    print(""Strings are Anagrams"")
else:
    print(""Strings are not Anagrams"")"
"Write a code to delete all the vowels from a given string.string = ""hello world""","""""""
Write a code to delete all the vowels from a given string
""""""

# Given string
string = ""hello world""

# Removing all the vowels from the string
no_vowels = """".join([letter for letter in string if letter not in ""aeiouAEIOU""])

# Printing the new string
print(""String without vowels is"", no_vowels)"
"Write a code to convert a given list of strings to uppercase.mylist = [""hello"",""world""]","""""""
Write a code to convert a given list of strings to uppercase
""""""

# List containing the strings
mylist = [""hello"",""world""]

# Converting the list of strings to uppercase
upper_list = [string.upper() for string in mylist]
 
# Printing the new list
print(""List with strings in uppercase is"", upper_list)"
"Write a code to find the maximum in a given list of integers.mylist = [1,2,3,4,5]","""""""
Write a code to find the maximum in a given list of integers
""""""

# List containing the elements
mylist = [1,2,3,4,5]

# Finding the maximum element
max = mylist[0]

# Looping through each element to find if it is the maximum
for i in range(1,len(mylist)):
    # Comparing the element with the maximum
    if mylist[i] > max:
        max = mylist[i]

# Printing the maximum element
print(""Maximum element of the list is"", max)"
"Write a code to merge two given lists of equal size.list1 = [1,2,3]
list2 = [4,5,6]","""""""
Write a code to merge two given lists of equal size
""""""

# Given lists
list1 = [1,2,3]
list2 = [4,5,6]

# Initialising an empty list
merged_list = []

# Merging the lists
for i in range(len(list1)):
    merged_list.append(list1[i])
    merged_list.append(list2[i])

# Printing the merged list
print(""Merged list is"", merged_list)"
"Write a code to compute the mean of an input list of numbers.mylist = [1,2,3,4,5]","""""""
Write a code to compute the mean of an input list of numbers
""""""

# List containing the elements
mylist = [1,2,3,4,5]

# Computing the sum and number of elements
sum = 0
num_elements = len(mylist)

# Looping through each element
for i in mylist:
    sum += i

# Computing the mean
mean = sum/num_elements

# Printing the mean
print(""Mean of the list is"", mean)"
Create a program to convert the input sentence to Pig Latin.I am a computer programmer,"""""""
Create a program to convert the input sentence to Pig Latin.
""""""

def pig_latin(sentence):
    words = sentence.split()
    new_words = []
    for word in words:
        if word[0] in 'aeiou':
            new_words.append(word + 'ay')
        else:
            new_words.append(word[1:] + word[0] + 'ay')
    return ' '.join(new_words)

if __name__ == '__main__':
    print(pig_latin('I am a computer programmer'))"
"Create a program to write an overwriting if-else logic for the following switch statementswitch(a) {
  case 1: 
    func1();
    break;
  case 2: 
    func2();
    break;
}","""""""
Create a program to write an overwriting if-else logic for the following switch statement
""""""

def switch_to_if_else(a):
  if a == 1:
    func1()
  elif a == 2:
    func2()

if __name__ == '__main__':
    switch_to_if_else(a)"
"Write a function that sorts the given list of numbers in descending order[1, 2, 3, 5, 8, 10]","""""""
Write a function that sorts the given list of numbers in descending order
""""""

def sort_list_descending(numbers):
    numbers.sort(reverse = True)
    return numbers

if __name__ == '__main__':
    print(sort_list_descending([1, 2, 3, 5, 8, 10]))"
Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3,"""""""
Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3
""""""

def divisible_by_three():
    divisible_by_three_list = []
    for i in range(1, 11):
        if i % 3 == 0:
            divisible_by_three_list.append(i)
    return divisible_by_three_list

if __name__ == '__main__':
    print(divisible_by_three())"
"rewrite the following for-loop as a while-loopfor i in range(0, 5):
    print(i)","""""""
Rewrite the following for-loop as a while-loop
""""""

i = 0
while i < 5:
    print(i)
    i += 1"
"Create a program to compute the checksum of a given data packetdata_packet = [0xff, 0x0a, 0x1b, 0x3f]","""""""
Create a program to compute the checksum of a given data packet
""""""

def compute_checksum(data_packet):
    checksum = 0
    for x in data_packet:
        checksum += x
    return checksum

if __name__ == '__main__':
    data_packet = [0xff, 0x0a, 0x1b, 0x3f]
    print(compute_checksum(data_packet))"
"Create a program to parse a given string and return a dictionary with all the words and their frequency""this is a practice string to learn the parsing of strings""","""""""
Create a program to parse a given string and return a dictionary with all the words and their frequency
""""""

def parse_string(string):
    words = string.split()
    word_dict = {}
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else:
            word_dict[word] = 1
    return word_dict

if __name__ == '__main__':
    print(parse_string(""this is a practice string to learn the parsing of strings""))"
Create a program to classify whether the given number is even or odd5,"""""""
Create a program to classify whether the given number is even or odd
""""""

def even_or_odd(number: int) -> str:
    if number % 2 == 0:
        return 'even'
    else:
        return 'odd'

if __name__ == '__main__':
    print(even_or_odd(5))"
"Create a program to generate the sum of all the elements in a given list[1, 2, 3, 4, 5]","""""""
Create a program to generate the sum of all the elements in a given list
""""""

def sum_list(nums):
    total = 0
    for num in nums:
        total += num
    return total

if __name__ == '__main__':
    print(sum_list([1, 2, 3, 4, 5]))"
Create a program to find all the factors of a given number24,"""""""
Create a program to find all the factors of a given number 
""""""

def find_factors(num):
    factors = []
    for i in range(1, num+1):
        if num % i == 0:
            factors.append(i)
    return factors

if __name__ == '__main__':
    print(find_factors(24))"
"Create a program to check if a given string is a palindrome""racecar""","""""""
Create a program to check if a given string is a palindrome
""""""

def is_palindrome(string):
    n = len(string)
    for i in range(n // 2):
        if string[i] != string[n-i-1]:
            return False
    return True

if __name__ == '__main__':
    print(is_palindrome(""racecar""))"
"Create a program to generate all possible pairs of a given list of numbers[1, 2, 3]","""""""
Create a program to generate all possible pairs of a given list of numbers
""""""

def generate_pairs(nums):
    pairs = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            pairs.append((nums[i], nums[j]))
    return pairs

if __name__ == '__main__':
    print(generate_pairs([1, 2, 3]))"
"Create a program that extracts a given pattern from a given stringtext = ""Hello world!"", pattern = ""l""","""""""
Create a program that extracts a given pattern from a given string
""""""

def extract_pattern(text, pattern):
    result = []
    for i in range(len(text)):
        if text[i] == pattern:
            result.append(i)
    return result

if __name__ == '__main__':
    text = ""Hello world!""
    pattern = ""l""
    print(extract_pattern(text, pattern))"
"Write a Python program to split special characters with a given string.string = ""Hello@#World""","string = ""Hello @# World"""
"Create a regex to match the characters ""CDE"" in any order.","regex = r""(C|D|E){3}"""
"Convert the following string to a list of strings.words = ""How are you doing today""","words = [""How"", ""are"", ""you"", ""doing"", ""today""]"
Generate a 5x5 array with all its elements equal to 1.,"arr = [[1,1,1,1,1],
       [1,1,1,1,1],
       [1,1,1,1,1],
       [1,1,1,1,1],
       [1,1,1,1,1]]"
"Given a list of numbers, find the index of the greatest value.lst = [3, 5, 6, 8, 9]",index = 4
Classify the following sentence as positive or negative sentiment.This is the worst experience ever.,Negative sentiment.
"Find the total number of elements in the following array.my_array = [[1,2], 3, 4]",Total number of elements = 4
Classify the following sentence as a question or a statement.Have you ever tried eating a brussel sprout?,Question.
Write a Python program that tests if a given number is divisible by 3.num = 51,"if (num % 3 == 0):
    print(""The number is divisible by 3"")
else:
    print(""The number is not divisible by 3"")"
"Edit the following code so it outputs the odd numbers between 1 and 50.for i in range(1,51):
    print(i)","for i in range(1,51):
    if i % 2 != 0:
        print(i)"
"Write a function to compare two strings and return True if they are anagrams.str1 = 'silent'
str2 = 'listen'","def anagram(str1, str2): 

    # Get lenghts of both strings 
    n1 = len(str1) 
    n2 = len(str2) 
  
    # If lengths are not same, then strings   
    # are not anagrams 
    if n1 != n2:
        return False
    str1 = ''.join(sorted(str1))
    str2 = ''.join(sorted(str2))
    # Comparing sorted strings 
    for i in range(0, n1): 
        if str1[i] != str2[i]: 
            return False

    return True

print(anagram(str1, str2))"
"Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.lst = [2, 8, 9, 5, 3, 10]","def sum_square_even(lst):
    result = 0
    for num in lst:
        if (num % 2 == 0):
            result += num ** 2
    return result

print(sum_square_even(lst))"
"Using the input string, write a code to replace the ""!"" with a ""?"".string = ""Hello World!""","string = ""Hello World!""
string = string.replace(""!"", ""?"")
print(string)"
"Write a code to take two string inputs and generate the output string containing alternate characters from each string.str1 = 'abc'
str2 = '123'","def alternate_char(str1, str2):
    # get the length of string
    n = len(str1)

    # initialize the output string
    output_str = ''

    # generate the output string
    for i in range(n):
        output_str += str1[i] + str2[i]
    
    return output_str

print(alternate_char(str1, str2))"
"Given a list of strings, write a code to find the longest string.lst = ['one', 'two', 'three', 'four', 'five']","# initial max length
max_length = 0
# empty string to store the max length string
max_str = ''

# iterate through the list
for string in lst:
    # get the length
    length = len(string)
    # update the max length
    if length > max_length:
        # get the string
        max_str = string
        # update max length
        max_length = len(string)

print(max_str)"
"Write a function to get the mean of the given list of numbers.lst = [1, 4, 5, 9, 3]","def mean(lst):
    # calculate the sum
    total = 0
    for item in lst:
        total += item
    
    # calculate the mean
    mean = total / len(lst)
    return mean

print(mean(lst))"
Write a Django Model API to store status and published date for a blog post.,"from django.db import models

class BlogPost(models.Model):
    # post title
    title = models.CharField(max_length = 200)
    # post status (draft / published)
    status = models.CharField(max_length = 20)
    # post publish date
    published = models.DateTimeField(auto_now_add = True)"
"Write a code to compare two lists and find the common elements.list1 = [3, 6, 9, 12]
list2 = [2, 4, 5, 6, 8, 9]","def find_common(list1, list2):
    # initial list to store common elements
    result = []

    # iterate through the list
    for num in list1:
        # check if the number is in list2
        if num in list2:
            # append the element
            result.append(num)

    return result
    
print(find_common(list1, list2))"
"Write an algorithm to check if an array contains a given valuearr = [1, 7, 5, 8, 44]
value = 5","def check_value(arr, value):
    for item in arr:
        if item == value:
            return True
    return False"
Write a function to determine if two strings are anagrams of each other,"def are_anagrams(str1, str2):
    if len(str1) != len(str2):
        return False

    freq1 = {}
    freq2 = {}

    for char in str1:
        if char not in freq1:
            freq1[char] = 1
        else:
            freq1[char] += 1

    for char in str2:
        if char not in freq2:
            freq2[char] = 1
        else:
            freq2[char] += 1

    for key in freq1:
        if key not in freq2 or freq2[key] != freq1[key]:
            return False
    
    return True"
Write an algorithm to generate the Fibonacci series up to the nth term,"def fibonacci(n):  
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Write a function that checks if a string is a palindrome or not.string = ""ana""","def is_palindrome(string):
    rev = ''.join(reversed(string))
    if rev == string:
        return True
    else:
        return False"
"Change the following array so that it orders in ascending orderarray = [3, 7, 1, 8, 4]",array.sort()
"Read a code and identify the data type of the variables a and ba = 8
b = ""Hello""",A is an integer and B is a string.
Write a simple calculator program.,"def calculator():
    number1 = int(input(""Please enter first number: ""))
    number2 = int(input(""Please enter second number: ""))
    print(""Please choose operation -\n"" \
          ""1. Add\n"" \
          ""2. Subtract\n"" \
          ""3. Multiply\n"" \
          ""4. Divide\n"") 

    choice = int(input(""Enter your choice: ""))
    if choice == 1:
        ans = number1 + number2
        print(""Answer={}"".format(ans))
    elif choice == 2:
        ans = number1 - number2
        print(""Answer={}"".format(ans))
    elif choice == 3:
        ans = number1 * number2
        print(""Answer={}"".format(ans))
    elif choice == 4:
        ans = number1 / number2
        print(""Answer={}"".format(ans))
    else:
        print(""Invalid Choice"")"
"Parse the string ""Hello[1]World[4]123[3]"" into a list.string = ""Hello[1]World[4]123[3]""","my_list = string.split('[')
my_list = [item.replace(']', '') for item in my_list]
my_list = [int(item) for item in my_list[1::2]]"
"Write a code to return the first 3 elements in a list.mylist = [1,4,3,6,7,2,4]",mylist[:3]
"Change the following array so that it only contains numbers divisible by 3mylist = [2, 4, 5, 6, 7, 11, 12, 22]",mylist = [x for x in mylist if x % 3 == 0]
"Write a function to remove duplicate items in a list.mylist = [2, 3, 3, 4, 5, 6, 4, 7]","def remove_duplicates(mylist):
    return set(mylist)"
"Read a code and find all the function calls that are made.print('Hello world!')
my_function()
my_function2(2, 3)","The two function calls made are ""my_function()"" and ""my_function2(2, 3)""."
"Write a code to delete all items from a list with a value of 3.mylist = [2, 3, 3, 4, 5, 6, 4, 7]",mylist = [item for item in mylist if item != 3]
"Create a new array that contains only the even numbers from a given array.arr = [1, 2, 3, 4, 5, 6, 7, 8]",arr = [x for x in arr if x % 2 == 0]
"Find the number of times a letter appears in a string.string = ""Hello World""
letter = 'l'",count = string.count(letter)
Create a for loop to print the numbers from 1 to 100.,"for i in range(1, 101):
    print(i)"
"Estimate the time complexity of the following algorithm.for i in range(n):
    for j in range(n):
        print(i + j)",O(n^2)
"Write a code snippet to return the item with the highest value in a given dictionary.d = {'a':20, 'b':10, 'c':15}","key = max(d, key = d.get) 
val = d[key]
return (key, val)"
"For the following two arrays, create a code snippet to return the intersecting element.arr1 = [1, 9, 4, 10]
arr2 = [2, 4, 7, 8]","intersect_arr = [] 
for i in arr1:
    if i in arr2:
        intersect_arr.append(i)
return intersect_arr"
"Using the numpy library, create a 3x3 Identity Matrix.","iden_matrix = numpy.identity(3) 
print(iden_matrix)"
Generate a unique and random password for a user using python.,"import random 
characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'
password = random.choices(characters, k = 16) 
print("""".join(password))"
"Given a binary tree, write a code snippet to list all of its descendant leafs.","def listDescendantLeaves(root):
    if not root: 
        return
    elif not root.left and not root.right: 
        print(root.val) 
    listDescendantLeaves(root.left) 
    listDescendantLeaves(root.right)"
"Given a string, write a function to remove all the duplicate characters.string = ""apple""","def remove_duplicates(string): 
    new_string = """" 
    for char in string:
        if char not in new_string:
            new_string += char 
    return new_string"
classify the following sentence using a sentiment analysis model.The movie is awesome.,"""""""
Classify the following sentence using a sentiment analysis model.
Sentence: The movie is awesome.
""""""

from textblob import TextBlob

sentence = ""The movie is awesome.""

# convert the sentence to a TextBlob object
blob = TextBlob(sentence)

# get the sentiment
sentiment = blob.sentiment

if sentiment.polarity > 0:  # positive sentiment
    print(""This sentence is classified as Positive."")
elif sentiment.polarity == 0:  # neutral sentiment
    print(""This sentence is classified as Neutral."")
else:  # negative sentiment
    print(""This sentence is classified as Negative."")"
convert all words in a sentence to camelCaseThe quick brown fox jumps over the lazy dog,"""""""
Convert all words in a sentence to camelCase

Input: The quick brown fox jumps over the lazy dog

Output: theQuickBrownFoxJumpsOverTheLazyDog
""""""

def toCamelCase(sentence):
    words = sentence.split("" "")
    result = """"
    for index, word in enumerate(words):
        if index > 0:
            small_word = word.capitalize()
            result += small_word
        else:
            result += word
    return result

sentence = ""The quick brown fox jumps over the lazy dog""
print(toCamelCase(sentence))"
Write a function to calculate the average score of a list of numbers.,"def get_average(numbers):
    """"""
    Calculate and return the average of a list of numbers
    :param numbers: the list of numbers
    :return: the average of the numbers
    """"""
    total = 0
    for number in numbers:
        total += number
    return total / len(numbers)"
Write a function to find the longest string in a list of strings.,"def find_longest_string(strings):
    """"""
    Find and return the longest string in a list of strings.
    :param strings: the list of strings
    :return: the longest string
    """"""
    longest = """"
    for string in strings:
        if len(string) > len(longest):
            longest = string
    return longest"
Implement a function to extract the last two words from a string of words,"def get_last_two_words(string):
    """"""
    Extract and return the last two words from a string of words
    :param string: the input string
    :return: the last two words
    """"""
    words = string.split("" "")
    return words[-2:]"
"Write code to find the intersection of two sorted listslist1 = [1, 3, 4, 6]
list2 = [1, 2, 5, 6]","def find_intersection(list1, list2):
    """"""
    Find the intersection of two sorted lists
    :param list1: the first sorted list
    :param list2: the second sorted list
    :return: a list with elements found in both lists
    """"""
    intersection = []
    p1 = p2 = 0
    while p1 < len(list1) and p2 < len(list2):
        if list1[p1] == list2[p2]:
            intersection.append(list1[p1])
            p1 += 1
            p2 += 1
        elif list1[p1] < list2[p2]:
            p1 += 1
        else:
            p2 += 1
    return intersection

list1 = [1, 3, 4, 6]
list2 = [1, 2, 5, 6]
print(find_intersection(list1, list2))"
Write code to flatten a nested list,"def flatten_list(list):
    """"""
    Flatten a nested list
    :param list: the nested list to flatten
    :return: a flattened list
    """"""
    flattened_list = []
    for item in list:
        if isinstance(item, list):
            flattened_list.extend(flatten_list(item))
        else:
            flattened_list.append(item)
    return flattened_list"
Write code to remove all occurrences of a given element from a list,"def remove_element(list, element):
    """"""
    Remove all occurrences of a given element from a list
    :param list: the list
    :param element: the element to remove
    :return: the filtered list
    """"""
    filtered_list = [item for item in list if item != element]
    return filtered_list"
Generate pseudocode for a matrix multiplication algorithm.,"""""""
Generate pseudocode for a matrix multiplication algorithm.
""""""

# Create an NxN matrix result, initialized to 0
result = zeros(NxN)

# loop through matrix A and B
for i in range(N):
    for j in range(N):
        for k in range(N):
            # multiply the elements of A and B
            result[i][j] += A[i][k] * B[k][j]

# return the result matrix
return result"
Create a function to generate a random password of length n,"import random

def generate_password(n):
    """"""
    Create a function to generate a random password of length n
    :param n: the length of the password
    :return: a random password of length n
    """""" 
    # create a character list of symbols, alphabets, and numbers
    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='
    # create a list of length n with random characters
    password = [random.choice(characters) for _ in range(n)] 
    # convert the list to a string
    password = ''.join(password)  
    # return the password
    return password"
"Debug the following Python codedef f(x):
    if x > 0:
        return -1
    else:
        return 1","""""""
Debug the following Python code

def f(x):
    if x > 0:
        return -1
    else:
        return 1
""""""

# incorrect indentation of the else statement
def f(x):
    if x > 0:
        return -1
    else:
        return 1   # correct indentation"
Generate a data structure that can efficiently store an array of words,"""""""
Generate a data structure that can efficiently store an array of words
""""""

# create a trie (a node with 26 references to other nodes)
class TrieNode:
    def __init__(self):
        self.children = dict()
        self.end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]
        node.end = True

# create an empty array
word_array = []

# create a new trie
trie = Trie()

# iterate over the array and insert the words into the trie
for word in word_array:
    trie.insert(word)"
Create a function to find the position of a substring in a string,"def find_substring(string, substring):
    """"""
    Find the position of a substring in a string
    :param string: the string
    :param substring: the substring to find
    :return: the position of the substring in the string
    """"""
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            return i
    return -1  # substring not found"
Reorder a given array in specialized order,"def reorder_array(arr):
    """"""
    Reorder a given array in specialized order
    :param arr: the input array to reorder
    :return: the reordered array
    """"""
    # determine the size of the array
    n = len(arr)
    
    # create a new array to store the reordered results
    reordered = [0] * n
    
    # loop through the array 
    for i in range(n):
        # calculate the position of the current element
        pos = 2 * (arr[i] % (1 + n // 2))
        # find the first vacant position in the new array
        while reordered[pos] != 0:
            pos += 1
        # assign the current element to the vacant position
        reordered[pos] = arr[i]
    
    return reordered"
Design a function in Python that returns the median of an array of integers.,"def median(arr):
  sortedArr = sorted(arr)
  length = len(arr)
  if length % 2 == 0:
    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)
  else:
    return sortedArr[length//2]"
"Write a code to reverse the order of a data structure such as array, list, or stack.list1 = [1, 3, 5, 7, 9]","list1.reverse() # [9, 7, 5, 3, 1]"
"Redesign the following Python program with functions.my_list = [5, 10, 15, 20]
sum = 0
for number in my_list:
sum = sum + number","def sum_of_list(my_list):
  sum = 0
  for number in my_list:
    sum = sum + number
  return sum

my_list = [5, 10, 15, 20]
result = sum_of_list(my_list)"
Generate an random integer between 1 and 6.,Math.floor(Math.random() * 6) + 1;
Create a program that prints the first 10 Fibonacci numbers.,"""""""
Print the first ten Fibonacci numbers
""""""

def print_first_ten_fibonacci_numbers():
    """"""Print the first ten Fibonacci numbers.""""""

    n1, n2 = 0, 1
    num = 0
    while num < 10:
        print(n1)
        nth= n1 + n2
        n1 = n2
        n2 = nth
        num += 1
        
if __name__ == '__main__':
    print_first_ten_fibonacci_numbers()"
"Calculate the sum of an array of integers[3, 5, 7, 9]",24
"Find the smallest element in a given array.[6, 8, 1, 4, 5]",1
How would you determine if a given number is a prime number?,"A prime number is a number that is only divisible by 1 and itself. To check if a given number is a prime number, first use a loop to check all the numbers from 1 to the given number. If any of the numbers evenly divide the given number, then the number is not a prime. Otherwise, the number is a prime number."
"Compare two integers and print the larger one.a = 3, b = 5","if a > b:
    print(a)
else:
    print(b)"
"Edit the program to print the given date in the format ""dd/mm/yyyy"".year = 2020
month = 5
day = 3","# Print date in dd/mm/yyyy format
print(""{:02d}/{:02d}/{:04d}"".format(day, month, year))"
"Create a function to reverse a string.s = ""hello world""","""""""
Reverse string
""""""

def reverse_string(s):
    """"""Reverse a given string.
    
    Args:
        s (str): The string to reverse.
        
    Returns:
        str: The reversed string.
    """"""
    return s[::-1]
    
if __name__ == '__main__':
    s = ""hello world""
    print(reverse_string(s))"
"Normalize a given array such that it adds up to 1.[3, 0, 9, 5]","[0.15, 0.0, 0.45, 0.3]"
"Find the longest common substring between two strings.s1 = ""Tangible""
s2 = ""Non-Tangible""","""""""
Find the longest common substring between two strings
""""""

def longest_common_substring(s1, s2):
    """"""Find the longest common substring between two strings.
    
    Args:
        s1 (str): The first string.
        s2 (str): The second string.
        
    Returns:
        str: The longest common substring.
    """"""
    max_length = 0
    longest_substring = """"
    len1, len2 = len(s1), len(s2)
    for i in range(len1): 
        for j in range(len2):
            length = 0
            while i + length < len1 and j + length < len2:
                if s1[i + length] != s2[j + length]:
                    break 
                length += 1
            if length > max_length:
                max_length = length
                longest_substring = s1[i : i + length]
    return longest_substring
    
if __name__ == '__main__':
    s1 = ""Tangible""
    s2 = ""Non-Tangible""
    print(longest_common_substring(s1, s2))"
"Find the top 5 most common words in a given string.s = ""Hello world, this is a sample string for the task""","""""""
Find the top 5 most common words in a given string
""""""

from collections import Counter

def get_top_five_words(s):
    """"""Get the top five most common words in a given string.
    
    Args:
        s (str): The string to process.
        
    Returns:
        list: A list of (word, count) tuples sorted in descending order
            of the most common words.
    """"""
    words = s.split()
    counts = Counter(words).most_common(5)
    return counts
    
if __name__ == '__main__':
    s = ""Hello world, this is a sample string for the task""
    print(get_top_five_words(s))"
"Classify a given sentence based on the intention behind it.sentence = ""I want to buy a car""",The given sentence is a request intention.
"Use the list comprehension syntax to make a new list whose elements are the square of the first list.lst = [1, 2, 3, 4]",[x**2 for x in lst]
Write a Python function to calculate the factorial of a number (a non-negative integer).,"def factorial(num):
    """"""
    Calculates factorial of a given number.
    """"""
    # Base case
    if num == 0:
        return 1
    # Recursion
    else:
        return num * factorial(num-1)"
Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not.,"def is_palindrome(str):
    """"""
    Checks if the given input string is a palindrome or not.
    """"""
    return str == str[::-1]"
Write a code to check whether a given year is a leap year or not,"def is_leap_year(year):
    """"""
    Checks if the given year is a leap year or not.
    """"""
    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  
        return True  
    else:  
        return False"
Create a program which will take the user's name and output a custom message depending on the supplied namename = 'John',"def greet_user(name):
    """"""
    Greet the user with a custom message depending on the supplied name.
    """"""
    if name == 'John':
        print('Hey there John! Welcome back!')
    elif name == 'Mary':
        print('Good morning Mary! How are you doing today?')
    else:
        print('Hi there! Welcome to our service!')"
"Write code to find the smallest number in an array of numbers.arr = [5, 8, 2, 4, 7, 10]","def find_smallest_number(arr):
    """"""
    Finds the smallest number in an array of numbers.
    """"""
    min_num = arr[0]
    for num in arr[1:]:
        if num < min_num:
            min_num = num
    return min_num"
"Write a function to calculate the arithmetic mean of an array of numbersarr = [5, 8, 2, 4, 7, 10]","def calculate_mean(arr):
    """"""
    Calculate the arithmetic mean of an array of numbers.
    """"""
    if len(arr) == 0:
        return 0
    
    return sum(arr) / len(arr)"
"Write code to implement Bubble Sort.arr = [5, 8, 2, 4, 7, 10]","def bubble_sort(arr):
    """"""
    Implementation of the Bubble Sort algorithm.
    """"""
    for i in range(len(arr)-1):
        for j in range(len(arr)-1-i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr"
Write code to find the longest substring of unique characters in a given string.string = 'abcabcbb',"def find_longest_substring(string):
    """"""
    Finds the longest substring of unique characters in a given string.
    """"""
    longest_substring = ''
    current_substring = ''
    for ch in string:
        if ch not in current_substring:
            current_substring += ch
            if len(current_substring) > len(longest_substring):
                longest_substring = current_substring
        else:
            current_substring = ch
    return longest_substring"
"Find the index of a given item in an arrayarr = [1, 4, 6, 8, 9]
item = 8","def find_index(arr, item):
    """"""
    Finds the index of a given item in an array
    """"""
    for i, num in enumerate(arr):
        if num == item:
            return i
    return -1"
"Write code to find the most frequent item in an arrayarr = [1, 4, 6, 8, 9, 1, 4, 6]","def most_frequent_item(arr):
    """"""
    Finds the most frequent item in an array.
    """"""
    dictionary = {}
    for i in arr:
        if i in dictionary:
            dictionary[i] += 1
        else:
            dictionary[i] = 1

    max_count = 0
    max_item = 0

    for k, v in dictionary.items():
        if v > max_count:
            max_item = k
            max_count = v
    return max_item"
"Write code to concatenate two given strings.str1 = 'hello'
str2 = 'world'","def concatenate(str1, str2):
    """"""
    Concatenates two given strings.
    """"""
    return str1 + str2"
"Create a program to display all prime numbers between a given range.a, b = 2, 8","def prime_numbers_in_range(a, b):
    """"""
    Displays all prime numbers between a given range.
    """"""
    for num in range(a, b+1):
        if is_prime(num):
            print(num,' is prime.')

def is_prime(num):
    """"""
    Checks if a number is prime or not.
    """"""
    if num == 1:
        return False
    else:
        for i in range(2, num):
            if num % i == 0:
                return False 
    return True"
"Write a code to remove the oldest elements from a list until the list contains at most 10 elements.list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]","def remove_old_elements(lst):
  for i in range(len(lst) - 10):
    lst.pop(0)
  return lst

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
print(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
Write a Python function to check if a value exists in a list.,"def is_in_list(lst, val):
    return val in lst"
How do you declare a variable in Python?,"In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1."
Write a code to multiple two numbers without using the multiplication operator.,"def multiply(x,y):
  if(y == 0):
    return 0
  return x + multiply(x,y-1)

multiply(5,4) # 20"
"Given a string, create a function that takes out all the duplicated characters in the string.string = 'Keeep Learning'","def remove_duplicates(s):
  seen = []
  res = """"
  for char in s:
    if(char in seen):
      continue
    else:
      seen.append(char)
      res += char
  return res

string = 'Keeep Learning'
print(remove_duplicates(string)) # Keep Larning"
What is the purpose of treemaps in data visualization?,Treemaps are used to represent hierarchical data visually. They are used to visualize large datasets by dividing them into rectangles proportional to their values. This makes it easier to quickly compare values and identify patterns across datasets.
What is data transformation and how is it used?,"Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more."
Write an algorithm to perform binary search on a sorted array.,"def binarySearch(array, item):
  low = 0
  high = len(array) - 1

  while low <= high:
    mid = (low + high) // 2
    guess = array[mid]
    if guess == item:
      return mid
    if guess > item:
      high = mid - 1
    else:
      low = mid + 1
  return None"
"Given a string, write a Python program to find the first non-repeating character in it.input_str = ""aaaaabbbbccc""","def first_non_repeating_char(input_str): 
 
    char_count = {}
 
    for ch in input_str: 
 
        if ch in char_count: 
 
            char_count[ch] += 1
 
        else: 
 
            char_count[ch] = 1
 
    for ch in input_str: 
 
        if char_count[ch] == 1: 
            return ch 
 
    return None

print(first_non_repeating_char(input_str))"
"Construct a regular expression to extract all words from a given string that start with a specific letter.input_str = ""The quick brown fox jumped over the lazy dog""","var regex = /\b[qQ]\w+\b/g;
 
var result = input_str.match(regex);

console.log(result); //['quick']"
Construct a regular expression to check if a string begins with a given substring.,"//String begins with substring
var regex = /^substring/;

if (input_str.match(regex)) {
  console.log('The string begins with the substring.');
}"
Count the number of words in this sentence using Python.This sentence has a total of eight words.,8
"Classify the following transaction as valid or invalid using Python.Transaction ID: 101
Transaction Amount: -200","""invalid"""
"Write a query in MongoDB to find all the documents in the collection ""Books"".",db.Books.find({})
Generate a random string of 12 characters using Python.,"import string
import random

''.join(random.choices(string.ascii_letters + string.digits, k=12))"
"Given a string s, write a function to check if the string is a palindrome.s = ""A man, a plan, a canal: Panama!""","def is_palindrome(s):
    s = s.lower().replace(' ', '').replace(',', '').replace(':', '').replace('!', '')

    return s == ''.join(reversed(s))"
Generate a list of the first three even numbers,"[2, 4, 6]"
"You need to find the largest subset of an array that sums up to a given value.arr = [1, 2, 3, 4, 5], target = 8","def find_largest_subset(arr, target):
    curr_sums, max_sum_list = [], []
    for num in arr:
        for curr_sum in curr_sums[:]:
            new_sum = curr_sum + num
            if new_sum == target:
                if new_sum > sum(max_sum_list):
                    max_sum_list = curr_sum + [num]
            else:
                curr_sums.append(new_sum)
    return max_sum_list"
How do you count the number of specific characters in a given string?,"You can use the count() method in Python to count the number of specific characters in a given string. For example:

s = 'My name is John'

num_of_char = s.count('o')

print(num_of_char) #Output: 2"
Generate an array with the first 10 even numbers,"[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
"Write a codde fragment to print out the most frequent element in an array.arr = [1, 2, 2, 3, 4, 4, 5]","freq = {}

for el in arr:
    if el in freq:
        freq[el] += 1
    else:
        freq[el] = 1
        
max_el, max_freq = None, 0
for el, freq in freq.items():
    if freq > max_freq:
        max_el = el
        max_freq = freq
        
print(max_el, max_freq)  # Output: 2 2"
Write a JS program that takes a number n and prints out the first n even numbers.n = 10,"function getFirstNEvens(n) {
    let arr = [];
    for (let i = 0; i < n; i++) {
        arr.push(2 * i);
    }
    return arr;
}

let firstNEvens = getFirstNEvens(n);
console.log(firstNEvens); // Output: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]"
How do you merge two sorted arrays in O(n) time?,"Merging two sorted arrays in O(n) time can be done using a two-pointer technique. Starting from the beginning of both the arrays, we keep track of the pointers and compare the elements at these positions. The smaller element is added to the merged array, and the pointer is then incremented. This is repeated until both arrays have been iterated over, with the remaining elements of the larger array being added to the merged array."
Classify whether the following is an imperative or functional programming language.Java,Imperative Programming
Determine the type of the given variable.var age = 20,Number.
"Construct a for loop to iterate through an array of numbers.var nums = [1,2,3,4,5]","for(var i=0; i<nums.length; i++){
   console.log(nums[i]);
}"
"Modify the following for loop to loop backwards.for(var i=0; i<nums.length; i++){
   console.log(nums[i]);
}","for(var i=nums.length-1; i>=0; i--){
   console.log(nums[i]);
}"
"Describe the purpose of the given function.function avg(a,b){
   return (a+b)/2;
}",The purpose of this function is to calculate the average of two given numbers and return the result.
Compare and contrast  two sorting algorithms: Bubble sort and Quick sort.,"Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a ""pivot"" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient."
Convert the given binary string to its corresponding decimal number.10111101,189.
Generate a unique 6 character alphanumeric string.,j4xdu6.
"Construct an array of objects with the fields ""name"" and ""age"".","[
  {
    ""name"": """",
    ""age"": 
  },
  {
    ""name"": """",
    ""age"": 
  },
  ...
]"
"Find the index of the given word in the sentence.Word: music
Sentence: I love listening to music.",7.
Write a Python code snippet to print the pyramid structure with the given number of lines.4,"*   
   ***
  *****
 *******"
"Summarize the given paragraph in < 100 words.Ada Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations.","Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world’s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage’s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations."
"Construct a switch statement to log different grades messages based on the grade variable.var grade = ""A+"";","switch(grade){
   case ""A+"":
      console.log(""Excellent job!"");
      break;
   case ""A"":
      console.log(""Well done!"");
      break;
   case ""B"":
      console.log(""Good job!"");
      break;
   case ""C"":
      console.log(""Keep up the good work!"");
      break;
   default: 
      console.log(""Keep up the hard work!"");
      break;
}"
"Reverse a string using Python code.input_str = ""Hello world!""","def reverse_string(input_str): 
    new_string = """" 
    for char in input_str: 
        new_string = char + new_string
  
    return new_string 
  
input_str = ""Hello world!""

print(reverse_string(input_str))
##
5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.
5. Input:
<noinput>
5. Output:
for i in range(1, 11): 
    for j in range(1, 11): 
        product = i * j
        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') 
    print()"
Create a regex expression that captures a valid URL.,"^(https?:\/\/)([\da-zA-Z\.-]+)\.([a-zA-Z\.]{2,6})([\/\w \.-]*)*\/?$"
"Create a list of two-word phrases using each of the four words ('apple', 'bear', 'cat', 'dog').","[('apple', 'bear'), ('apple', 'cat'), ('apple', 'dog'), ('bear', 'cat'), ('bear', 'dog'), ('cat', 'dog')]"
"Given a list of numbers, find the minimum and maximum elements.[3, 4, 8, 1, 5, 0, 9]","min_el = 0
max_el = 9"
Assign the value 'Hello World' to the variable 'message'.,"message = ""Hello World"""
Calculate the square root of the given number.25,sqrt(25) = 5
"Find the largest number from the given list of numbers.[7, 9, 11, 5]",largest_number = 11
Write a Python program to print the following pattern.,"for i in range(1,6):
  for j in range(1,i+1):
    print(""*"", end="" "")
  print()"
Generate a random 5-character string using the letters a-z.,"import random

characters = ""abcdefghijklmnopqrstuvwxyz""

random_string = """"
for i in range(5):
    random_string += random.choice(characters)

print(random_string)"
"Write a Python function to check if a given string is an anagram of another or not.word1 = ""cat""
word2 = ""tac""","def is_anagram(word1, word2):
 return sorted(word1) == sorted(word2)"
Write a Python function to create a two-dimensional array of specified dimensions.,"def create_2D_array(rows, columns):
 arr = [[] * columns] * rows
 return arr"
"Write a Python function to replace all the occurrences of a given substring with another.string = ""Hello World""
substring = ""World""
replacement = ""Universe""","def replace_substring(string, substring, replacement):
 return string.replace(substring, replacement)"
"Write a Python function to compute the maximum value for each key in a given dictionary.d = {'a':10, 'b':20, 'c':30}","def max_values(d):
 return {key: max(d.values()) for key in d}"
"Write a Python script to count the number of occurances of each character in a given string.string = ""Mississippi""","def count_chars(string):
 char_occurrences = {}
 for char in string:
  if char not in char_occurrences:
   char_occurrences[char] = 1
  else:
   char_occurrences[char] += 1
 return char_occurrences"
"Write a Python function to generate the powerset of a given list.list = [2, 4, 6]","def generate_powerset(list):
 powerset = []
 for i in range(2**len(list)):
  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]
  powerset.append(subset)
 return powerset

def is_bit_set(num, bit):
 return (num & (1 << bit)) != 0"
"Create a MongoDB query for finding a record in the collection that contains a specific value for a given field.The collection is named 'books' and contains the fields 'title', 'author', and 'pub_date'. We would like to find a record where the title is ""Harry Potter and The Sorcerer's Stone"".","db.books.find({""title"" : ""Harry Potter and The Sorcerer's Stone""});"
Name a few Python libraries used for data analysis.,"Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn."
Write a query for filtering an array of objects in a MongoDB collection by their 'age' field.The collection is named 'users' and the filter should return objects with age greater than 21,"db.users.find({""age"": { $gt: 21 }});"
Name the components of a typical machine learning pipeline.,"A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points."
Describe the steps of creating an application using the Flask framework.,"Steps to creating a Flask application include importing the Flask module, creating an instance of Flask, creating an HTML template file, and creating a route for the app that renders the HTML template. The next step is to create a file containing the code to execute on each route; this could include performing a database query, calling a web API, running functions, etc. Once the application has been built, it can be run using a Flask client, such as the flask command line interface."
Describe how to create a 'dockerfile',"A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container."
"Purge all rows from the following dataframe that have a negative value in the Age column.import pandas as pd 

data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], 
'Age': [20, 22, -18, 24]} 

df = pd.DataFrame(data)","import pandas as pd 

data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], 
'Age': [20, 22, -18, 24]} 

df = pd.DataFrame(data)

df = df[df['Age'] >= 0]"
"Convert the following strings to lower case.s1 = ""Hello World!""
s2 = ""HELLO WORLD!""","s1 = ""Hello World!"".lower()
s2 = ""HELLO WORLD!"".lower()"
Change the following code snippet to generate a random integer from 0 to 10.,"import random

random_int = random.randint(0, 10)"
"Convert the following list to a set.my_list = [2, 3, 5, 7]",my_set = set(my_list)
"Print the first 5 elements of the following list.my_list = [2, 4, 6, 8, 10, 12, 14]","for elem in my_list[:5]:
    print(elem)"
Define a function to check if a number is odd.,"def is_odd(num):
    if num % 2 != 0:
        return True
    else:
        return False"
"Split the following string at the comma.my_str = ""Hello,World""","my_str_split = my_str.split("","")"
Create a new empty dictionary.,my_dict = dict()
"Create a pandas dataframe from the following dictionary.data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], 
'Age': [20, 22, 18, 24]}","import pandas as pd

df = pd.DataFrame(data)"
"Sort the following list in descending order.my_list = [1, 5, 3, 7]",my_list.sort(reverse=True)
"Multiply each element in the following list with 10.my_list = [2, 4, 6]",my_list = [x * 10 for x in my_list]
"Count the number of unique elements in the following list.my_list = [1, 2, 3, 1]",unique_count = len(set(my_list))
"Using Python, create a list containing the first 20 prime numbers.","primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]"
"Sort the given list of numbers in ascending order using Python.numbers = [3, 5, 7, 1, 2]","sorted_numbers = [1, 2, 3, 5, 7]"
Create a function to find the greatest common divisor of two numbers in Python.,"def gcd(a, b):
     while b != 0:
        a, b = b, a % b
     return a"
"Write a Python script to find the common elements in two given lists.list1 = [1, 2, 3, 5, 7]
list2 = [2, 3, 4, 5, 6]","def common_elements(list1, list2):
    common_ele = []   
    for i in list1:
        for j in list2:
            if i==j:
                common_ele.append(i)
    return common_ele"
Compute the result of the following mathematical expression in Python.(4 + 5 * 7 - 9) / 2,result = 17
"Using Python, create a function to check if a given string contains an uppercase letter.","def contains_uppercase(text):
  for char in text:
    if char.isupper():
      return True
  return False"
Convert the following number into binary representation using Python.12,"binary = ""0b1100"""
"Write a Python function to format a specified string to limit the number of characters to 6.string = ""Hello world""","def limit_char(string):
    if len(string) > 6 :
        return string[:6]
    else:
        return string"
"Find the longest palindrome in a given string using Python.string = ""My name is John""","def longest_palindrome(string):
    palindrome = ''
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            substring = string[i:j]
            if substring == substring[::-1] and len(substring) > len(palindrome):
                palindrome = substring
    return palindrome"
"Calculate the sum of all elements in a given list using Python.list1 = [1, 2 ,3, 4, 5]",sum_list = 15
"Write a Python function to remove the characters which have odd index values of a given string.string = ""Hello World""","def remove_odd_index(string):
    result = """" 
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result"
Create a function to convert a given number from decimal to binary representation using Python.,"def dec_to_binary(num):
    binary = """"
    while num > 0:
        binary+= str(num % 2)
        num = num // 2
    return binary[::-1]"
"Write a Python function to find the intersection between two lists.list1 = [1, 2, 3, 5, 7]
list2 = [3, 4, 5, 6]","def intersection(list1, list2):
    result = []
    for i in list1:
        for j in list2:
            if i==j:
                result.append(i)
    return result"
"Modify the following function to return the number of unique elements in a given array.int count_unique(int array[], int n) 
{ 
    int count = 0; 
    int i; 
    for (i = 0; i < n; i++) { 
        int j; 
        for (j = 0; j < i; j++) { 
            if (array[i] == array[j]) 
                break; 
        } 
        if (i == j) 
            count++; 
    } 
    return count; 
}","int count_unique(int array[], int n) 
{ 
    int count = 0; 
    int visited[n]; 
    for (int i = 0; i < n; i++) 
        visited[i] = 0; 

    for (int i = 0; i < n; i++) { 
        if (!visited[i]) { 
            visited[i] = 1; 
            count++; 
            for (int j = i + 1; j < n; j++) 
                if (array[i] == array[j]) 
                    visited[j] = 1; 
        } 
    } 
    return count; 
}"
"Improve the following code in order to create a balanced binary search tree.Node insert(int x, Node root) 
{ 
    if (root == NULL) { 
        root = new Node; 
        root->key = x; 
        root->left = root->right = NULL; 
    } 
    else    if (x < root->key) 
        root->left = insert(x, root->left); 
    else 
        root->right = insert(x, root->right); 
    return root; 
}","Node insert(int x, Node root) 
{ 
    if (root == NULL) { 
        root = new Node; 
        root->key = x; 
        root->left = root->right = NULL; 
    } 
    else    if (x < root->key) 
        root->left = insert(x, root->left); 
    else 
        root->right = insert(x, root->right); 
    root = balance(root); 
    return root; 
} 

Node balance(Node root) 
{ 
    int left_height = height(root->left); 
    int right_height = height(root->right); 
    if (abs(left_height - right_height) > 1) { 
        if (right_height > left_height) 
            root = leftRotate(root); 
        else
            root = rightRotate(root); 
    } 
    return root; 
}"
"Create a Python program to find the maximum value in the given array.[2, 4, 5, 7, 8]","def find_max(arr): 
    max_val = arr[0] 
    for i in range(len(arr)): 
        if max_val < arr[i]: 
            max_val = arr[i] 
    return max_val 

arr = [2, 4, 5, 7, 8] 
max_val = find_max(arr) 
print(max_val)"
Write a Python program to determine if a given number is an Armstrong number.,"def isArmstrongNumber(num):
 sum = 0
 temp = num
 while temp > 0:
  digit = temp % 10
  sum += digit ** 3
  temp //= 10
 if num == sum:
  return True
 else:
  return False"
"Create a function to find the total area of a triangle, given its base and height.","def findAreaOfTriangle(base, height):
 return 0.5 * base * height"
"Edit the following function so that it counts the even numbers in the given array.arr = [1, 2, 3, 4]","def countEvens(arr):
 count = 0
 for num in arr:
  if num % 2 == 0:
   count += 1
 return count"
"Create a function in Python that prints out a stringified version of a list.[1, 4, 6, 8]","def print_str_list(in_list):
    """"""This function takes a list and returns a stringified version of it""""""
    return "" "".join(str(x) for x in in_list)"
Create a function to check if an item is in a list,"def check_list_contains(item_list, item):
    """"""This function checks if an item is in a list""""""
    return item in item_list"
"What type of object is ""None"" in Python?",None is a special constant in Python and is of type NoneType.
"Create some code that iterates through a list and prints out each element.my_list = [1, 4, 6, 8]","for item in my_list:
    print(item)"
Implement a function that takes two integers and returns the smaller one.,"def min_integer(a, b):
    """"""This function returns the minimum of two integers""""""
    return min(a, b)"
"Write a function in Python to calculate the value of ""e"" to 4 decimal places.","from math import e

def calc_e():
    """"""This function calculates the value of e to 4 decimal places""""""
    return round(e, 4)"
How can you get the length of a list in Python?,You can use the built-in function len() to get the length of a list in Python.
"Given a list of integers, create code to remove the duplicates.my_list = [1, 4, 4, 6, 6, 8]",unique_list = list(set(my_list))
Create a function in Python to calculate the factorial of a number.,"def factorial(n):
    """"""This function returns the factorial of a given integer""""""
    if n == 0:
        return 1
    else: 
        return n * factorial(n-1)"
Describe the details of the try-except statement in Python.,"The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the ""try"" block and the code that is executed if an exception is raised is placed in the ""except"" block. The ""Except"" block is also used to catch a specific exception and handle it accordingly."
"Given a number, create a function that returns a list that contains its divisors.num = 20","def get_divisors(num):
    """"""This function returns a list that contains the divisors of a given number""""""
    return [x for x in range(1, num + 1) if num % x == 0]"
Create an if-else statement in Python that checks if an integer is even or odd.,"if num % 2 == 0:
    print(""The number is even"")
else:
    print(""The number is odd"")"
"Given an array of integers, write an algorithm to find the first repeating element.[2, 5, 1, 2, 3, 5]","int findFirstRepeating(int arr[], int n) 
{ 
    unordered_set<int> s; 
  
    for (int i = 0; i < n; i++) { 
        if (s.find(arr[i]) != s.end()) 
            return arr[i];         
        s.insert(arr[i]); 
    }  
  
    return -1; 
}"
Write a Python code to calculate the sum of natural numbers up to n.,"def n_sum(n):
    sum = 0
    for i in range(n+1):
        sum += i
    return sum"
"Determine the output of the given Python code.x = [1, 2, 3, 4, 5] 
y = x 
y[2] = 6","The output of the given Python code is [1, 2, 6, 4, 5]."
"Classify the given code as either functional programming or object-oriented programming.def double(x):
  return x * 2",The given code is an example of functional programming.
Write a MongoDB query that returns all the records that have a “name” field set to “John”,"db.collection. find({""name"": ""John""})"
"Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.""02/20/2020""","def mmddyyyy2ddmmyyyy(date_string):
    if len(date_string) != 10:
        raise ValueError('Invalid date format')
    mm, dd, yyyy = date_string.split('/')
    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)
    return new_date_string"
Write a code to find the maximum subarray sum in an array using dynamic programming.,"def maxSubArraySum(arr): 
    n = len(arr) 
  
    max_so_far = -float('inf') 
    max_ending_here = 0
  
    for i in range(0, n): 
        max_ending_here = max_ending_here + arr[i] 
        if (max_so_far < max_ending_here): 
            max_so_far = max_ending_here 
  
        if max_ending_here < 0: 
            max_ending_here = 0   
    return max_so_far"
Create a function in Python to evaluate if a given number is prime.,"def is_prime(num):
    if num <= 1: 
        return False
    for i in range(2, num//2 + 1): 
        if num % i == 0: 
            return False
    return True"
"Design a class Car with a constructor to initialize the variables _type, _year and _color","class Car:
    
    def __init__(self, type, year, color):
        self._type = type
        self._year = year
        self._color = color"
Write a Python program to print out the Fibonacci sequence up to 20 numbers,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b 

# Driver Program 
print(""Fibonacci sequence:"") 
for i in range(20): 
    print(fibonacci(i))"
"Calculate the sum of the numbers in the array [1, 5, 7, 10]","# Define the array
arr = [1, 5, 7, 10]

# Calculate the sum
sum = sum(arr)

# Print the result
print(""The sum of the numbers in the array is "" + str(sum) + ""."")"
"Update the following code to use a while loop instead of a for loop`# Define an array
arr = [1, 2, 3, 4]

# Iterate over the array and print each element
for i in arr:
    print(i)`","# Define an array
arr = [1, 2, 3, 4]

# Initialize the index
i = 0

# Iterate over the array and print each element
while i < len(arr):
    print(arr[i])
    i += 1"
Design a function to remove duplicates from an array,"def remove_duplicates(arr):
    # Stores the unique elements
    unique = []

    # Iterate through the array
    for elem in arr:
        # If the element is not already in the unique list
        if elem not in unique:
            # Add it to the unique list
            unique.append(elem)

    # Return the array without duplicates
    return unique"
"Given a list of numbers, write a function to find the largest value in the list.lst = [1, 5, 9, 12, 8]","def get_largest_value(lst):
    max_value = lst[0]
    for num in lst:
        if num > max_value:
            max_value = num
    return max_value

print(get_largest_value(lst))"
"Create an algorithm to sort a list of numbers in ascending order.lst = [2, 5, 1, 7, 4]","def sort_list_ascending(lst):
    # Traverse through all array elements 
    for i in range(len(lst)): 
  
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(lst)): 
            if lst[min_idx] > lst[j]: 
                min_idx = j 
          
        # Swap the found minimum element with  
        # the first element         
        lst[i], lst[min_idx] = lst[min_idx], lst[i] 
  
    return lst
  
# Driver code to test above 
lst = [2, 5, 1, 7, 4] 
print(sort_list_ascending(lst))"
"Given an array, write a program that checks if any two numbers sum to 0.arr = [-3, -2, 1, 2, 3]","def check_if_sum_zero(arr): 
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] + arr[j] == 0): 
                return True
    return False

print(check_if_sum_zero([-3, -2, 1, 2, 3]))"
Create a program to generate an XOR linked list.,"class Node: 
    def __init__(self, data): 
        self.data = data 
        self.npx = None
  
class XORLinkedList: 
    def __init__(self): 
        self.head = None
  
    def add(self, item): 
        new_node = Node(item) 
        new_node.npx = self.head 
        if self.head is not None: 
            self.head.npx = new_node.npx ^ self.head.npx 
        self.head = new_node 
  
    def printList(self): 
        temp = self.head 
        while(temp): 
            print(temp.data), 
            prev = temp 
            temp = self.XOR(temp.npx, prev) 
  
    def XOR(self, a, b): 
        return (a or b) and (not a or not b) 
  
a = XORLinkedList() 
a.add(2) 
a.add(3) 
a.add(4) 
a.add(5) 
a.printList()"
"Given a list of strings, write a program to sort the strings in alphabetical order.lst = [""apple"", ""orange"", ""grapes""]","def sort_in_alphabetical_order(lst): 
    lst.sort()
    return lst

print(sort_in_alphabetical_order([""apple"", ""orange"", ""grapes""]))"
Create a function to generate the nth term in the Fibonacci sequence.n = 3,"def get_fib_term(n): 
    if n <= 1: 
        return n 
    else: 
        return get_fib_term(n-1) + get_fib_term(n-2)
  
print(get_fib_term(3))"
"Calculate the mean of a list of numbers.lst = [1, 2, 3, 4, 5]","def calculate_mean(lst):
    return sum(lst) / len(lst)

print(calculate_mean([1, 2, 3, 4, 5]))"
"Sum all the prices in the list of dictionaries and output the result as an integer.list_of_dictionaries = [{""price"": 5}, {""price"": 7}, {""price"": 9}]",21
"Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.#!/usr/bin/python
print ""Hello, World!""","#!/usr/bin/python
print(""Hello, World!"")"
"Using the given list, create a function in Python that classifies each number as odd or even.lst = [1, 2, 6, 8, 4]","def classifyList(lst):
    result = []
    for num in lst: 
        if num % 2 == 0: 
            result.append('even')
        else:
            result.append('odd')
    return result"
"Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.arr_of_dictionaries = [
    {
        ""name"": ""John Doe"",
        ""country"": ""United States""
    },
    {
        ""name"": ""Jane Doe"",
        ""state"": ""New York""
    }
]","def longest_common_prefix(arr_of_dictionaries):
    prefix = ''
    if len(arr_of_dictionaries) == 0:
        return prefix
    first_dict_keys = arr_of_dictionaries[0].keys()
    for i in range(len(list(first_dict_keys)[0])):
        char = list(first_dict_keys)[0][i]
        for dict in arr_of_dictionaries:
            if list(dict.keys())[0][i] != char:
                return prefix
        prefix += char
    return prefix"
"Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.string = ""Hello, world!""
charset = [""o"", ""!""]","def removeChars(string, charset):
	result = """"
	for c in string:
		if c not in charset:
			result += c
	return result"
Create a program to count the total characters in a string.,"def count_string_characters(string):
    return len(string)"
Make a code to determine whether a given number is prime or not.,"def is_prime(x):
    for i in range(2,int(x**0.5)+1):
        if x % i == 0:
            return False
    return True"
Create a code that sorts element in an array.,"def sort_elements(arr):
    return sorted(arr)"
Develop a function to swap the position of two elements in an array.,"def swap_elements(arr, i, j):
    arr[i], arr[j] = arr[j], arr[i]
    return arr"
Create function to return the cube of a number.,"def cube_number(x):
    return x**3"
Create a function that takes a number and returns the sum of all its divisors.,"def get_divisor_sum(n):
    divisor_sum = 0
    for i in range(1, n//2 + 1):
        if n % i == 0:
            divisor_sum += i
    return divisor_sum"
Create a loop to print hello world 5 times.,"for (int i = 0; i < 5; i++){ 
  System.out.println(""Hello World!""); 
}"
Create a function to check whether a number entered is prime or not.,"def is_prime(number):
   # If given number is greater than 1
   if number > 1:
       # Iterate from 2 to n / 2
       for i in range(2, number//2):
           # If num is divisible by any number between 
           # 2 and n / 2, it is not prime
           if (number % i) == 0:
               return False
       else:
           return True
# If the number is less than or equal to 1
   else:
       return False"
"Sort a list of 5 numbers in descending order.[123, 45, 287, 398, 135]","[398, 287, 135, 123, 45]"
"Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference.","class Circle():
    def __init__(self, radius):
        self.radius = radius
    def area(self): 
        return self.radius ** 2 * 3.14 
    def circumference(self): 
        return 2 * self.radius * 3.14"
Concisely describe how a Linked List works.,"A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null."
"Find the index of the number 23 in the given array.[78, 82, 6, 23, 77, 57, 88]",3
Convert the given string to uppercase.Hello World,HELLO WORLD
"Create a program in Python that calculates the average of numbers in a list.[9, 5, 10, 12]","def average(numbers):
    return sum(numbers) / len(numbers)

print(average([9, 5, 10, 12]))   # Output: 9.5"
"Modify the above program to sort the array in descending order.[3,8,5,1,2,6,4]","public class SortDescending { 
    public static void main(String[] args) 
    {
        int[] numbers = {3,8,5,1,2,6,4};
        int temp = 0;
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i+1; j < numbers.length; j++) {
                if (numbers[i] < numbers[j]) {
                    //swap elements
                    temp = numbers[i]; // assign value of i to temp
                    numbers[i] = numbers[j];  // assign value of j to i
                    numbers[j] = temp;  // assign value of temp to j
                }
            }
        }
        System.out.println(""Array elements in descending order:"");
        for (int i = 0; i < numbers.length; i++) { 
            System.out.print(numbers[i]+"" ""); 
        } 
    }
}"
Create a Python function to parse a string and remove all special characters.,"import re

def remove_special_chars(s):
    return re.sub(r'[^\w\s]','', s)"
Modify the function to also remove all whitespace from the string.,"import re

def remove_special_chars_and_whitespace(s):
    return re.sub(r'\s','', re.sub(r'[^\w\s]','', s))"
"For the following list, print out the second element.list = [""apple"", ""banana"", ""cherry""]","second_element = list[1]
print(second_element) # prints banana"
"What is the next output when this code is executed?i = 0 
while (i < 5): 
    print(i, sep = "", "")
    i += 1","0, 1, 2, 3, 4"
Write a code to find the square of the first n numbers.,"def square_of_first_n_number(n):
    """"""Find the square of the first n numbers""""""
    
    # Initialize an empty list
    squares = []

    # Iterate to the first n numbers
    for i in range(n):
        # Compute the square and append to the list
        squares.append(i * i)

    return squares"
"Reverse the following String.String = ""Hello World!""","rev_string = String[::-1] 
print(rev_string) # prints ""!dlroW olleH"""
"Given a list, write code to convert the list into a dictionary.list1 = [""John"", ""Doe"", 23]","dict1 = dict(zip(['name', 'surname', 'age'], list1))
print(dict1) # prints {'name': 'John', 'surname': 'Doe', 'age': 23}"
"Given a two-dimensional array, write a code to sum the values in each row.A = [[1, 2, 3], 
     [4, 5, 6], 
     [7, 8, 9]]","row_sum = []
for row in A:
    row_sum.append(sum(row))
    
print(row_sum) # prints [6, 15, 24]"
"Construct a for loop that will loop over the string ""Hello World"".","for letter in ""Hello World"":
    print(letter)"
"Write a code to find the missing number in the given array.A = [1, 2, 3, 4, 6, 7, 8]","# Create a set from the array
A_set = set(A)

# Determine the max value
max_val = max(A_set)

# Find the missing number
missing_number = max_val - sum(A_set)

print(missing_number) # prints 5"
"What would be the resulting string after executing this code?a = ""Hello""
b = ""World""

c = a + "" "" + b

c = f""{c}!""","c = ""Hello World!"""
Write a code to print out all the prime numbers between 2 and 10.,"# initialize an empty list to store prime numbers
prime_numbers = []

# Iterate over the range from 2 to 10
for num in range(2, 11):
    cnt = 0
    # check if the number is divisible by any natural number from 2 to num-1
    for i in range(2, num):
        if num % i == 0:
            cnt += 1
    # if the number is not divisible by any of the numbers then add to the list
    if cnt == 0:
        prime_numbers.append(num)

print(prime_numbers) # prints [2, 3, 5, 7]"
"Write a function to remove all duplicate elements in an array.data = [1, 2, 3, 2, 4, 5]","def remove_duplicates(data):
    """"""Remove all duplicate elements in an array""""""
    
    # Initialize an empty list
    unique_data = []

    # Iterate over the data
    for i in data:
        # Check if element is not already in list
        if i not in unique_data:
            # If not, then add to list
            unique_data.append(i)
    
    return unique_data

print(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]"
"What will happen when the following code is executed?a_list = [1, 2, 3, 4, 5]

for i in a_list:
    a_list.append(i + 6)

print(a_list)","[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]"
"What data type should you use to store a list like [4, 7, 2] in a Python variable?","The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2]."
"Rearrange the following list of numbers in an ascending order.[9, 5, 8, 2, 4]","[2, 4, 5, 8, 9]"
"Improve the following code to handle an input which is an empty list.def check_even(arr):
    if arr == []:
        return ""The list is empty!""
    else:
        return all(x % 2 == 0 for x in arr)","def check_even(arr):
    if arr == []:
        return ""The list is empty!""
    elif not arr:
        return ""The list is empty!""
    else:
        return all(x % 2 == 0 for x in arr)"
How much would you substract 5 to 101?,96
Generate a list of odd numbers from 80 to 100.,"[81, 83, 85, 87, 89, 91, 93, 95, 97, 99]"
"Modify the following code to handle an input which is a negative number.def power_func(number):
    if number >= 0:
        return number**2","def power_func(number):
    if number < 0:
        return ""Invalid input!""
    else:
        return number**2"
"Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.def factorial(n):
  	if n == 0:
  	   return 1
	else:
  	   return n * factorial(n-1)","def factorial(n):
  if n < 0:
    return ""Invalid input!""
  elif n == 0:
    return 1
  else:
    return n * factorial(n-1)"
"Given the following list, extract the item at index 2.my_list = [""apple"", ""banana"", ""mango"", ""grapes""]",mango
"Write a Python program to find out the common items from two given arrays.arr1 = [1, 2, 3, 5, 7 ]
arr2 = [2, 3, 5, 6, 7]","common_items = []

for item in arr1:
  if item in arr2:
    common_items.append(item)

print(common_items)  # Output: [2, 3, 5, 7]"
Write a Python function to check whether a string has all unique characters.,"def all_unique(string): 
  # loops through each character in string 
  for char in string: 
  
    # if character appears more than once, 
    # return False 
    if string.count(char) > 1: 
      return False 
      
  # return True if no characters appear more than once
  return True"
"Given the following dictionary, change the value of the key ""a"" to ""apples"".my_dict = {""a"": ""bananas"", ""b"": ""pears""}","my_dict = {""a"": ""apples"", ""b"": ""pears""}"
"Rewrite the following code so it can take a list as input instead of an integer.def list_sum(num):
    total = 0
    for x in range(num):
        total += x
    return total","def list_sum(input_list):
    total = 0
    for item in input_list:
        total += item
    return total"
"Design a program to compare two sorted lists and returning list with the common elements.list_one=[5, 10, 15, 20, 25]
list_two=[15, 17, 20, 22, 25, 27]","def compare_list(list_one, list_two):
    common_list = []
    i, j = 0, 0
    while (i < len(list_one) and j < len(list_two)):
        if list_one[i] == list_two[j]:
            common_list.append(list_one[i])
            i += 1
            j += 1
        elif list_one[i] < list_two[j]:
            i += 1
        else:
            j += 1
    return common_list"
"Design a program to flatten a given list.[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def flatten_list(lst):
    res = []
    for l in lst:
        for i in l:
            res.append(i)
    return res"
"Write a script to determine whether an element is present in a given array.Given array: [1,2,5,7]
Number to find: 5","def element_in_array(lst, n): 
    for i in range(len(lst)): 
        if n == lst[i]: 
            return True 
    return False"
Write a script to generate the Fibonacci sequence up to a certain number.Number of elements to generate: 10,"def fibonacci_sequence(n):
    if n == 0:
        return []
    elif n == 1:
        return [1]
    else:
        lst = [1, 1]
        while len(lst) < n:
            lst.append(lst[-1] + lst[-2])
        return lst"
"Design a program to find the intersection of two given arrays.list_one=[5, 10, 15, 20, 25]
list_two=[15, 17, 20, 22, 25, 27]","def intersection(list_one, list_two):
    lst = []
    for i in list_one:
        if i in list_two:
            lst.append(i)
    return lst"
"Write a script to delete an element from an array given its index.Given array: [1, 2, 3, 4]
Index of element to delete: 1","def delete_element(lst, index):
    del lst[index]
    return lst"
Design a program to find the nth Fibonacci number.n: 10,"def nth_fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        n1, n2 = 1, 1
        for i in range(2, n):
            n1, n2 = n2, n1 + n2
        return n2"
"Design a program to find the occurrence of a given character in a given string.Given string: ""Hello World!""
Character to find: o","def occurance_count(str, char):
    count = 0
    for c in str:
        if c == char:
            count += 1
    
    return count"
Generate a function to multiply two integers.,"def multiply_ints(x, y): 
    return x * y"
"Create a loop to iterate over characters in a given string.Sample string s = ""Hello World""","for char in s:
    print(char)"
Create an if-else statement to classify a given number into an even or an odd.,"if (num % 2 == 0):
    print(""Even"")
else:
    print(""Odd"")"
Write a regular expression to validate a given string of IP addresses.,^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
"Create a project in random forest to learn the target variable given a set of predictor variables.predictor_vars = [""age"", ""occupation""]
target_var = ""income""","from sklearn.ensemble import RandomForestRegressor

# Initialize the model
model = RandomForestRegressor()

# Train the model using the predictor variables
model.fit(predictor_vars, target_var)"
Use the back-propagation algorithm to learn the weights of a given neural network.,"# Initialize weights with random values & weights
weights = np.random.uniform(-1,1, (num_nodes, num_inputs))
bias = np.random.uniform(-1,1, num_nodes)

#Forward pass
while True:
    
    # Compute a_L and estimated output y_hat
    a_L, y_hat = compute_forward_pass(x, weights, bias)
    
    # Compute the loss
    loss = compute_loss(y_hat, y)
    
    # Compute delta and derivatives
    delta = compute_delta(a_L, y)
    weights_derivatives, bias_derivatives = compute_derivatives(x, a_L, delta)

    # Update the weights
    weights -= learning_rate * weights_derivatives
    bias -= learning_rate * bias_derivatives"
Create a loop to traverse a given binary tree.,"def traverse_tree(root):

    # Initialize the stack
    stack = [root]

    # traversal loop
    while stack:
        node = stack.pop()

        # Do something with the node
        ...

        # Push the left and right nodes to the stack
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)"
Write an API to return the average transaction amount of a customer.,"@app.route('/get_average_transaction_amount', methods=['GET'])
def get_average_transaction_amount():
    customer_id = request.args.get('customer_id')
    query = ""SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s""
    result = db.query(query, customer_id)
    return jsonify(result)"
"Edit a python function to generate the fibonacci sequence.def fibonacci(n):
    a = 1
    b = 0
    for i in range(n):
        print(a)
        a, b = b, a+b","def fibonacci(n):
    a = 0
    b = 1
    for i in range(n):
        print(a)
        a, b = b, a+b"
"Use the Gaussian algorithm to learn the optimal parameters of a 2D linear regression model.Training dataset: {(x1,y1), (x2,y2), (x3,y3)}","def gaussian(x, y):
    n = len(x)
    l = np.linalg.inv(np.dot(x.T, x))
    k = np.dot(x.T, y)
    return np.dot(l, k).T"
"Add the code for a sleep() function to the following script.#This script will be used to write a status update in Slack.
import os

def update_status(message):
    os.system('curl -X POST --data '{ ""text"": ""' + message + '""}'' .....)","#This script will be used to write a status update in Slack.
import os
import time

def update_status(message):
    os.system('curl -X POST --data '{ ""text"": ""' + message + '""}'' .....)
    time.sleep(1)"
Suggest a better algorithm to find the minimum element in a given array.,"The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum."
"Complete the following code to shuffle an array of elements.#Declaring an array
arr = [1, 2, 3, 4, 5]

# Your code
def shuffle(arr):","#Declaring an array
arr = [1, 2, 3, 4, 5]

# Your code
def shuffle(arr):  
    for i in range(len(arr)-1, 0, -1): 
        j = random.randint(0, i+1)
        arr[i], arr[j] = arr[j], arr[i] 
    return arr"
Suggest an efficient data structure to store a list of words.,"A Trie (Prefix Tree) data structure is an efficient data structure for storing a list of words. It allows efficient insertion, deletion and search operations. It stores the words in a hierarchical structure by prefixing the words. This makes search operations very efficient since it involves only a single traversal of the Trie structure."
Write a Python program to print out the list of even numbers from 0 to given limit.limit = 10,"# declare list of numbers
numbers = [x for x in range(0, limit+1)]

# declare empty list of even numbers
even_numbers = []

# loop through list of numbers
for num in numbers:
    # if number is even, append to even_numbers list
    if num % 2 == 0:
        even_numbers.append(num)

# print even numbers
print(even_numbers) # Output: [0, 2, 4, 6, 8, 10]"
"Write a for-loop to print out the values from a list named 'mylist'mylist = [1,2,3,4,5,6,7]","for i in mylist:
print(i)"
"Create a class in Python called 'Car' and add instance variables for the car's make, model and year.","class Car:
    
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year"
"Write a regular expression to extract all email addresses from a string.string = ""My email address is john@doe.com and your email address is jane@doe.com""","import re

emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", string)
print(emails)"
Initialize an empty list in Python and then add three items to it.,"my_list = []
my_list.append(""item1"")
my_list.append(""item2"")
my_list.append(""item3"")"
"Calculate the sum of all the numbers in a list named 'mylist'.mylist = [1,2,3,4,5]","total_sum = 0
for num in mylist:
 total_sum += num
print(total_sum)"
"Convert a string to all lowercase using the built-in string method.string = ""This Is A String""","lowercase_string = string.lower()
print(lowercase_string)"
"Group a list of dictionaries by a shared key.mylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}]","from collections import defaultdict

grouped_dicts = defaultdict(list)

for x in mylist:
 grouped_dicts[x['name']].append(x)"
"Create a dictionary from two lists with the same length.mylist1 = [""a"", ""b"", ""c"", ""d""]
mylist2 = [""1"", ""2"", ""3"", ""4""]","mydict = dict(zip(mylist1, mylist2))
print(mydict)"
"Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.mylist = [1, 2, 3, 4, 5, 6, 7]
target = 4","def linear_search(mylist, target):
 for i in range(len(mylist)):
 if mylist[i] == target:
 return i
 return -1"
"Generate a random number between 1 and 10, inclusive.","import random

random_num = random.randint(1, 10)
print(random_num)"
"Use the built-in sort method to sort a list of strings by their length.mylist = ['this', 'is', 'a', 'long', 'list', 'of', 'strings']","mylist.sort(key=len)
print(mylist)"
Create a method to print all the prime numbers up to n.,"def print_prime_numbers(n):
    primes = [] 
    for num in range(2, n + 1): 
        is_prime = True
        for i in range(2, num): 
            if (num % i == 0): 
                is_prime = False
                break
        if is_prime: 
            primes.append(num) 
    print(primes)"
"Implement a reverse method to reverse the content of an array.[1, 2, 3, 4, 5]","def reverse(arr): 
    n =len(arr) 
    for i in range(n // 2): 
        temp = arr[i] 
        arr[i] = arr[n - i - 1] 
        arr[n - i - 1] = temp
  
    return arr"
"Retrieve the number of letters in the following phrase .""May the force be with you!""",22
Create a method to checkout the content of dictionary.,"def check_dict(dictionary):
    for key in dictionary:
        print(key + "": "" + str(dictionary[key]))"
"You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.['international', 'imagination', 'skyscraper']","def split_words(string_list):
    new_list = []
    for string in string_list:
        mid = int(len(string)/2) 
        new_list.append( (string[:mid], string[mid:]) )
    return new_list"
Create a program to find the sum of all the even numbers from 1 to n.,"def find_sum(n):  
    sum = 0
    for i in range (1, n): 
        if (i % 2 == 0): 
            sum = sum + i 
    return sum"
Create a function to find if a given input is a prime number or not.,"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False        
    return True"
Calculate the result of raising 2 to the power of 6.,64
Create a method to reverse a linked list.,"def reverse_list(head): 
  
    prev = None
    current = head 
    while(current is not None): 
        next = current.next
        current.next = prev 
        prev = current 
        current = next
    head = prev 
    return head"
"Print out the content of a two-dimensional array.[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def print_2d_array(arr):
    for row in arr:
        for el in row:
            print(el, end=' ')
        print("""")"
Build a deep learning model in Python to predict the stock price of a given company.,"# import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# import data
data = pd.read_csv('stock_data.csv')

# preprocess data
X = data.iloc[:,:-1].values
y = data.iloc[:,-1].values

# split into training set and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# build the model
import keras
from keras.layers import Dense
from keras.models import Sequential

model = Sequential()
model.add(Dense(units=6, activation='relu', input_dim=4))
model.add(Dense(units=4, activation='sigmoid'))
model.add(Dense(units=1, activation='linear'))
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])
model.fit(X_train, y_train, epochs=20, batch_size=10)

# test the model
y_pred = model.predict(X_test)

# evaluate the model
from sklearn.metrics import r2_score
r2_score(y_test, y_pred)"
Write an R script to find the correlation between two variables.,"# read the data
dat <- read.csv(""data.csv"")

# calculate the correlation
cor(dat$var1, dat$var2)"
"Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.test_list = [4, 6, 8, 10, 3, 1, 9]","def greatest_difference(numbers_list):
    max_difference = 0
    for num1 in numbers_list:
        for num2 in numbers_list:
            if num1 != num2:
                difference = abs(num1 - num2)
                if difference > max_difference:
                    max_difference = difference
    
    return max_difference

greatest_difference(test_list)"
Calculate the factorial of a given number.The number is 7,5040
Output the even numbers between 0 and 10.,"2, 4, 6, 8, 10"
Write a query to display the average age of the students.Table Name: Students,SELECT AVG(Age) FROM Students;
"Compare two strings to determine if they are equal or not.String1: ""Hello World""
String2: ""Hello World""",true
"Create a function to collect all the alphabets from a given string.The string is ""My name is John!""","//Function to collect all the alphabets
function getAlphabets(str) {
  const result = [];
  for(let i=0; i < str.length; i++) {
    if(str[i].match(/[a-z]/i)) {
      result.push(str[i]);
    }
  }
  return result;
}

//Call function and pass the string as parameter
let alphabets = getAlphabets(""My name is John!""); 
console.log(alphabets); // Output: [""M"", ""y"", ""n"", ""a"", ""m"", ""e"", ""i"", ""s"", ""J"", ""o"", ""h""]"
Obtain the type of the data in the given code.let number = 10;,number is of type number.
Create an array of the numbers from 1 to 10.,"let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"
Calculate the circumference of a circle.Radius: 3,18.85
Create a Python program to generate the Fibonacci series between 0 and 10.,"def FibonacciSequence():
  a, b = 0, 1
  for _ in range(10):
    yield a
    a, b = b, a + b

for num in FibonacciSequence():
  print(num)"
"Generate a set of five English words starting with the letter ""P"".","panther, plane, purple, parking, planet"
"Given a list of numbers, extend the list such that it contains the square of the elements present in the list.numbers = [1,2,3]","numbers = [1,2,3,1,4,9]"
"Append a string ""Welcome to the party"" at the end of the provided array.words = [""Hello"", ""there""]","words = [""Hello"", ""there"", ""Welcome to the party""]"
"Filter the provided array by returning only even numbers.numbers = [1, 2, 3, 4, 5]","numbers = [2, 4]"
"Make sure the following code runs without errors.def calculate_sum(numbers):
      total = 0
      for number in numbers
          total += number
      return total","def calculate_sum(numbers):
      total = 0
      for number in numbers:
          total += number
      return total"
"Incorporate the following change in the given code.def calculate_area(base, height):
    area = base*height
    area = float(area)
Change: Calculate area of the triangle in square meters.","def calculate_area(base, height):
    area = 0.5*base*height
    area = float(area)*(10**-6)
    return area"
"Create a Python function which takes an array and returns true if the array contains all unique values.array = [1, 2, 3, 2]","""""""
Create a Python function which takes an array and returns 
true if the array contains all unique values
""""""

def is_unique(arr):
    seen = set()
    for x in arr: 
        if x in seen: 
            return False
        seen.add(x)
    return True
    
if __name__ == '__main__':
    arr = [1,2,3,2]
    result = is_unique(arr)
    print(result)
    
# Output
# False"
Write a code to get the value of pi (to 6 decimal places) using mathematical methods.,"""""""
Calculate the value of pi using mathematical methods
""""""

def calculate_pi():
    pi = 0  
    n = 1000
    for n in range(n):
        pi += ((-1)**n)/(2*n+1)
    pi = pi*4
    return round(pi, 6)

if __name__ == '__main__':
    print(calculate_pi())

# Output
# 3.141593"
"Visualize the following on a line chart.Data points = [12, 13, 19, 20, 25]","import matplotlib.pyplot as plt

data_points = [12, 13, 19, 20, 25]

plt.plot(data_points)
plt.ylabel(""data points"")
plt.xlabel(""index"")
plt.title(""Line chart of data points"")

plt.show()"
"Implement a binary search on the given array.Array = [1, 4, 5, 6, 7, 9]","""""""
Implement a binary search on a given array
""""""

def binary_search(arr, element):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end)//2
        if arr[mid] == element:
            return True
        elif arr[mid] < element:
            start = mid + 1
        else:
            end = mid - 1
    return False

if __name__ == '__main__':
    arr = [1, 4, 5, 6, 7, 9]
    element = 7
    result = binary_search(arr, element)
    print(result)

# Output
# True"
"Change the following code so that it prints the list elements in reverse order.arr = [1, 2, 3, 4, 5]

for x in arr:
    print(x)","arr = [1, 2, 3, 4, 5]

for x in arr[::-1]:
    print(x)"
"Consider the following program. Find out the output without running it.my_list = [1, 1, 2, 3, 5, 8]

for x in my_list:
    if x%2 == 0:
        print(x)","2
8"
"Create a function that takes a string and returns a new string with each character capitalized.String = ""hello!""","""""""
Create a function that takes a string and returns a new string with each character capitalized
""""""

def capitalize(string):
    new_string = """"
    for c in string:
        new_string += c.upper()
    return new_string
    
if __name__ == '__main__':
    string = ""hello!""
    result = capitalize(string)
    print(result)

# Output
# HELLO!"
"Show how this array could be sorted using the insertion sort algorithm.[3, 4, 8, 1, 5]","// Initial Array
[3, 4, 8, 1, 5]

// 1st Pass
[3, 4, 8, 1, 5] // Move 8 to the left
[3, 4, 1, 8, 5]

// 2nd Pass
[3, 4, 1, 8, 5] // Move 4 to the left
[3, 1, 4, 8, 5]

// 3rd Pass
[3, 1, 4, 8, 5] // Move 3 to the left
[1, 3, 4, 8, 5]

// 4th Pass
[1, 3, 4, 8, 5] // Move 8 to the right
[1, 3, 4, 5, 8]

// Final Array
[1, 3, 4, 5, 8]"
"Describe how to use the following code to sort an array in ascending order.function bubbleSort(arr) {
    let len = arr.length;
    for (let i = 0; i < len; i++) {
        for (let j = 0; j < len; j++) {
            if (arr[j] > arr[j+1]) {
               let temp = arr[j];
               arr[j] = arr[j+1];
               arr[j+1] = temp;
            }
        }
    }
    return arr;
}","// To sort an array in ascending order using the bubble sort algorithm:
// 1. Initialize the array to be sorted
// 2. Iterate over the array and compare adjacent elements
// 3. If the element on the left is greater than the element on the right, swap them
// 4. Repeat steps 2 and 3 until the array is sorted
// 5. Return the sorted array"
Describe how to add an element in a linked list in Python.,"// To add an element in a linked list in Python:
// 1. Create a new node containing the value to be added
// 2. Set the ""next"" attribute of the new node to point to the current head node
// 3. Set the head node to be the newly created node
// 4. Increase the size of the linked list by 1"
Suggest a Python code to parse an XML document.,"# Parse an XML document using Python
import xml.etree.ElementTree as ET

# load the XML document
tree = ET.parse('document.xml')
# get the root element
root = tree.getroot()
# loop through all the elements
for element in root.findall('element'):
    # print the attributes of all elements
    print(element.attrib)"
"Describe how to use the following code to generate random numbers.import random

def random_with_N_digits(n):
    range_start = 10**(n-1)
    range_end = (10**n)-1
    return random.randint(range_start, range_end)","// To generate random numbers using the code provided:
// 1. Specify number of digits to generate
// 2. Use the random_with_N_digits function to generate the random number
// 3. Pass the desired number of digits as the argument in the function
// 4. The function will return a random number between 10^(n-1) and 10^n-1
// 5. Use the returned random number for the desired purpose"
"In Python, write code to identify whether a given string contains only numeric values.","# To identify whether a given string contains only numeric values in Python:
# 1. Use the isdigit method of the str object
# 2. Pass the given string as an argument to the isdigit method
# 3. The method will return True if the given string contains only numeric values,
#    and False otherwise

# Example
given_string = ""1234""

if given_string.isdigit():
    print(""The given string contains only numeric values"")  
else:
    print(""The given string does not contain only numeric values"")"
"Sort the given words in lexicographical order.apple, cat, flower, dog","apple, cat, dog, flower"
Generate the Fibonacci sequence up to the 10th number.,"0, 1, 1, 2, 3, 5, 8, 13, 21, 34"
Convert this number from decimal to binary.128,10000000
Classify the following statement.I must finish the project by tomorrow.,Imperative sentence.
Create a class in Python that implements a stack.,"class Stack: 
    def __init__(self): 
        self.stack = []

    def push(self,element): 
        self.stack.append(element)  

    def pop(self): 
        return self.stack.pop()

    def peek(self):
        return self.stack[-1]"
Write an R function to calculate the mean of a numerical vector.,"calc_mean <- function(x) {
    mean(x)
}"
Transform the following sentence into a declarative sentence.Do your homework every day.,You should do your homework every day.
Create a Python program to extract all unique words from a given sentence.This sentence contains multiple words.,"sentence_words = set(sentence.split())
unique_words = set(word for word in sentence_words if word not in visited_words)
print(unique_words)
# Output: {'contains', 'words', 'multiple', 'This'}"
Suggest a data structure to store the following data.Names of fruits and vegetables in an online grocery store,"A HashMap could be a suitable data structure to store the names of fruits and vegetables in an online store. The keys should be the names of the fruits and vegetables, and the values should store a description or additional information about them. For example, the key could be ""Banana"" and the value could be ""A yellow-skinned fruit with a sweet taste""."
Write a function in Python that takes in two strings and concatenates them together with a space in between.,"def my_concat(string1, string2)
    return string1 + ' ' + string2"
"Find the minimum element in an unordered array given in Python.arr = [17, 21, 4, 7, 29, 34, 11]","min_ele = arr[0]
for i in range (1, len(arr)):
    if (min_ele > arr[i]):
       min_ele = arr[i] 
    
print(""Minimum element in array is"", min_ele)"
Write a function that takes a string and returns a dictionary counting each character in the string.,"def character_count(str): 
    res = {} 
  
    for keys in str: 
        res[keys] = res.get(keys, 0)+1
        
    return res"
"Suggest a sorting algorithm to sort the following array in descending order.arr = [17, 21, 4, 7, 29, 34, 11]",A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.
Generate a list of 10 random capital letters.,"['X', 'Z', 'J', 'G', 'M', 'B', 'Y', 'Q', 'C', 'T']"
Convert the following string to camelCase.this_string_should_be_converted_to_camelCase,thisStringShouldBeConvertedToCamelCase
"Merge the two lists below together.list_a = [1,2,3] 
list_b = [4,5,6]","[1, 2, 3, 4, 5, 6]"
Read the input text and reverse it character by character.This is a sample text,txet elpmas a si sihT
"Create an empty set in Python and add the following items into it: ""A"", ""B"", ""C""","mySet = {""A"", ""B"", ""C""}"
"Print the following 2D matrix in row-major order.[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]",1 4 7 2 5 8 3 6 9
"Create a Python dictionary with keys ""A"", ""B"", ""C"" and each key value should be the length of corresponding key.","{""A"": 1, ""B"": 1, ""C"": 1}"
Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0.,"import numpy as np
np.random.RandomState(0).rand(3, 3)"
"Concatenate the two strings below, with a space inserted between them.A = ""Hello""
B = ""World!""",A + ' ' + B
"Calculate the average from a given list of integers.[1, 2, 3, 4, 5]",sum(list_of_numbers) / len(list_of_numbers)
"Find the sum of the elements in a given list of numbers.[1, 2, 3, 4, 5]",sum(list_of_numbers)
"Rewrite the following code into a generator.def some_function(nums):
  output = []
  for x in nums:
    y = x ** 2
    output.append(y)
  return output","def some_function(nums):
  for x in nums:
    yield x ** 2"
Generate an array of odd numbers up to and including the number 10.,"let numbers = [1, 3, 5, 7, 9];"
"Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.sentence = ""Hello World!""","def letter_counts(sentence):
  count_dict = {}
  for char in sentence:
    if char.isalpha():
      if char in count_dict:
        count_dict[char] += 1
      else:
        count_dict[char] = 1
  return count_dict"
Generate a 5-element tuple of random numbers between 5 and 15 using Python.,"import random

random_tuple = tuple(random.randint(5, 15) for _ in range(5))"
Write a function in Python to check if two strings are an anagram or not.,"def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
  
    s1 = sorted(str1) 
    s2 = sorted(str2) 
  
    if s1 == s2: 
        return True
  
    return False"
Create a Python program to generate a random string of 5 characters.,"import random

def generate_random_string():
  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  random_string = ''
  for x in range(5):
    random_string += random.choice(characters)
  
  return random_string

print(generate_random_string())"
"Manipulate the given list in Python to include the new element at the beginning.list = [1, 2, 3]
new_element = 0","list = [0] + list 
list.insert(0, new_element)"
Identify the most efficient data structure to store a list of strings.,"A linked list is the most efficient data structure for storing a list of strings, as it offers constant-time insertions and deletions."
"Using the code below, update the function to find the average of two numbers.def find_average(num1, num2): 
  total = num1 + num2","def find_average(num1, num2): 
  total = num1 + num2 
  average = total / 2
  return average"
Generate a random string with 10 characters.,"let randomString = Math.random().toString(36).substring(2, 12);"
"Write a Python code to print ""Hello World!"" on the console.","print(""Hello World!"")"
"Create a list of car models that includes ""Honda Accord"", ""Toyota Corolla"", and ""Ford F150"".","car_models = [""Honda Accord"", ""Toyota Corolla"", ""Ford F150""]"
Create a dictionary of fruits and their respective colors.,"fruits = {
 ""apple"": ""red"",
 ""banana"": ""yellow"",
 ""grape"": ""purple""
}"
Create a class to represent a two-dimensional vector.,"class Vector2D(object):
  '''Class to represent a two-dimensional vector'''
  def __init__(self, x, y):
    self.x = x
    self.y = y
  
  def __add__(self, other):
    return Vector2D(self.x + other.x, self.y + other.y)
  
  def __sub__(self, other):
    return Vector2D(self.x - other.x, self.y - other.y)
  
  def __mul__(self, scalar):
    return Vector2D(self.x * scalar, self.y * scalar)"
Compare the performance of Grover's algorithm and classical search algorithms.,"Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms."
Implement a linked list in Python.,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_head(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        curr_node = self.head
        while curr_node.next is not None: 
            curr_node = curr_node.next
        curr_node.next = new_node

    def delete_by_value(self, data):
        if self.head is None:
            return
        curr_node = self.head
        if curr_node.data == data:
            self.head = curr_node.next
            return
        prev_node = curr_node
        while curr_node is not None:
            if curr_node.data == data:
                break
            prev_node = curr_node
            curr_node = curr_node.next
        if curr_node is None:
            return
        prev_node.next = curr_node.next"
"Identify a potential bug in the following code.def add(a, b):
    c = a + b
    return c","A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition."
What is the purpose of an abstract data type in software engineering?,"The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development."
What is the primary purpose of object-oriented programming?,"The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely."
"Change the variable names in the following Python code.x1 = 10
y1 = 20","a = 10
b = 20"
"Fix the Python code below to make the script work.import json

data = {
  ""name"": ""John Doe"",
  ""age"": 20
}

with open(""data.txt"", ""w"") as outfile:
    json.dump(data, outfile)","import json

data = {
  ""name"": ""John Doe"",
  ""age"": 20
}

with open(""data.txt"", ""w"") as outfile:
    json.dump(data, outfile, indent=4)"
"Build a linear regression model using Python's scikit learn library.import pandas as pd
import numpy as np

data = pd.DataFrame({
    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],
    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]
    })

X = data['x'].values.reshape(-1, 1)
y = data['y'].values.reshape(-1, 1)","from sklearn.linear_model import LinearRegression

# Create linear regression model
model = LinearRegression()

# Train the model using the training set
model.fit(X, y)

# Make predictions using the testing set
y_pred = model.predict(X)"
Write a function returning the factorial of a given number in Python.,"def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1)"
"Create a script for sorting the given array in decreasing order.const array = [5, 10, 8, 6, 4, 9, 2]","const sortedArray = array.sort((a, b) => b - a);"
"Write a script for finding the largest number in the given array.const array = [4, 8, 2, 6, 9, 3]","let largestNum = array[0];

for (let num of array) {
    if (num > largestNum) {
        largestNum = num;
    }
}

console.log(largestNum);"
"Clean the given data in Python by replacing NaN and None with 0.import pandas as pd

data = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]
df = pd.DataFrame(data, columns = ['id', 'name', 'age'])","import pandas as pd

data = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]
df = pd.DataFrame(data, columns = ['id', 'name', 'age'])

df.fillna(0, inplace = True)"
"Classify the given article as spam or ham.Hello everyone, this is a spam message.",Spam
Write a method that prints out a square of size n.n=5,"public static void printSquare(int n) { 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < n; j++) { 
            System.out.print(""* ""); 
        }  
        System.out.println(); 
    } 
} 
   
// Output: 
/*       
  * * * * * 
  * * * * * 
  * * * * * 
  * * * * * 
  * * * * * 
*/"
Write a method that prints out all the prime numbers between 1 and 100.,"public static void printPrimeNumbers(){ 
    System.out.println(""Prime numbers between 1 to 100 are : ""); 
    for (int i = 1; i <= 100; i++) { 
        boolean isPrime = true;
        for (int j = 2; j < i; j++) { 
            if (i % j == 0) { 
                isPrime = false;
                break; 
            } 
        } 
        if (isPrime) 
            System.out.print(i + "" ""); 
    } 
} 

// Output:
// Prime numbers between 1 to 100 are : 
// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"
Write Python code to generate a random password of 8 alphanumeric characters.,"import string
import random

def generate_password():
    chars = string.ascii_letters + string.digits
    size = 8
    return ''.join(random.choice(chars) for _ in range(size))

print(generate_password())

// Output:
// h5Kp0FHc"
Generate an array of 10 random numbers between 1 and 100 using Python,"import random

def generate_random_array(n):
    array= []
    for _ in range(n):
        array.append(random.randint(1, 100))
    return array

print(generate_random_array(10))

// Output
// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]"
"Create a feature for predicting a customer's subscription plan based off their purchase history.The customer has purchased 2 shirts, 1 hat, and 3 pairs of jeans in the past month.","The prediction feature should calculate the customer's current subscription plan by taking into account the items they have purchased. It could use factors such as item types, quantity of items purchased, time since purchase, cost of items, sale promotions, combinations of items, and so forth. The feature should use a combination of analyzed data and established weights for each factor to accurately predict the customer's most likely subscription plan."
"Using list comprehension, create a list of even numbers between 1 and 20 in Python.","even_nums_list = [num for num in range(1, 21) if num % 2 == 0]"
"Debug the code to encounter the issue mentioned in the comment.def validate_password(password):
    if len(password) < 8:
        # bug: print message
        return False
    else:
        return True","def validate_password(password):
    if len(password) < 8:
        # bug: print message
        print('Password must be at least 8 characters.')
        return False
    else:
        return True"
"Suggest an algorithm for sorting a list of integers.[7, 4, 5, 10, 3]","// Bubble Sort Algorithm
// Set a flag to indicate whether there are any swaps during the current iteration
// Initialize the flag to false and iterate until the flag turns true
// During the iteration, compare each pair of adjacent elements and swap them if necessary
// After each iteration, set the flag to false
// If it is still false after iteration, break the loop since the list must be sorted

var list = [7, 4, 5, 10, 3];
var flag = false;
while (flag === false) {
    flag = true;
    for (var i=0; i<list.length -1; i++) {
        if (list[i] > list[i+1]) {
            var temp = list[i];
            list[i] = list[i+1];
            list[i+1] = temp;
            flag = false;
        }
    }
}
console.log(list); // prints [3, 4, 5, 7, 10]"
"Count the number of vowels in a sentence.""Hi there, how are you doing?""","int countVowels = 0;
String sentence = ""Hi there, how are you doing?"";
for (int i = 0; i < sentence.length(); i++) {
    if (sentence.charAt(i) == 'a' || sentence.charAt(i) == 'e' || sentence.charAt(i) == 'i' 
    || sentence.charAt(i) == 'o' || sentence.charAt(i) == 'u') {
        countVowels++;
    }
}
System.out.println(""Number of vowels in the string: "" + countVowels);"
Create an array of ten unique numbers within the range 10 to 50.,"int[] numbers = {10, 13, 16, 23, 25, 37, 41, 45, 48, 50};"
Generate a random string of length 8 that only contains alphabets.,"// Initialize an array containing all the letters of the alphabet
String[] alphabet = {""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", 
                     ""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z""};
 
String randomString = """";
Random random = new Random();
 
for (int i=0; i<8; i++) {
    int index = random.nextInt(alphabet.length);
    randomString += alphabet[index];
}
System.out.println(randomString); // Prints a random 8-character string consisting of alphabets"
"Edit the code so that it calculates the exponential of a given number.public double calculatePower(double base, double power) {
    return base * power;
}","public double calculatePower(double base, double power) {
    return Math.pow(base, power);
}"
"Reverse a given string.""Hello World!""","# Initialize the input string
string = ""Hello World!""
 
# Get the string length
stringLength = len(string)
 
# Create an empty string for storing the reversed string
reversedString = """"
 
# Iterate over the input string in reverse order
for i in range(stringLength -1, -1, -1):
    reversedString += string[i]
 
# Print the reversed string
print(reversedString) # Prints !dlroW olleH"
How to check if a given number is even or odd using Python?,"def is_even_or_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd"""
Write a loop in Python to print all the numbers from 0 to 10,"for i in range(0, 11):
  print(i)"
Write a function to check if a given binary tree is a valid binary search tree,"def isValidBST(root): 
      
    # Check empty tree  
    if root is None: 
        return True
          
    # Check left subtree recursively  
    if not isValidBST(root.left): 
        return False
  
    # if left is not None then check it has 
    # correct data or not i.e. left node's data 
    # should be less than root's data 
    if (root.left is not None and
        root.data < root.left.data): 
        return False
      
    # Check right subtree recursively  
    if not isValidBST(root.right): 
        return False
      
    # if right is not None then check it has 
    # correct data or not i.e. right node's data 
    # should be greater than root's data 
    if (root.right is not None and
        root.data > root.right.data): 
        return False
      
    # If all conditions satisfied  
    # then return True  
    return True"
"Given a list of numbers, print the numbers and their corresponding squareslist = [4, 5, 7, 8]","for num in list:
    print(f""{num} --> {num*num}"")"
"Sort this list in ascending orderlst = [7, 11, 4, 9, 2, 10]","lst.sort()
print(lst)"
"Given the following two lists, create a new list containing the elements of both listslist1 = [1, 2, 3]
list2 = [4, 5]","list3 = list1 + list2
print(list3)"
How do you remove the last item from a list in Python?,list.pop()
"Write an expression to calculate the average of the values in the following listlst = [3, 8, 13, 5, 9]",average = sum(lst) / len(lst)
Create a function to find the index of the first occurrence of a given number in a list,"def find_index(lst, num):
  for index, val in enumerate(lst):
    if val == num:
      return index"
"Build a Python program to transform a string in a dictionary.String: "" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener""","people_dict = {
    'John': {'age': 26, 'hobby': 'Movie Watch'},
    'Jane': {'age': 31, 'hobby': 'Book Reader'}, 
    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}
}"
"Change the data type of the following list to a dictionary.list = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener']","people_dict = {
    'John': {'age': 26, 'hobby': 'Movie Watch'},
    'Jane': {'age': 31, 'hobby': 'Book Reader'}, 
    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}
}"
Write pseudocode to find the average of two numbers.,"set total to 0
set count to 0

while numbers left to process
    add next number to total
    increment count
end while

calculate average by dividing total by count

print average"
"Return a subset of a given array of size Karr = [3, 6, 2, 5, 7, 4], K = 3","def subset(arr, K): 
    n = len(arr) 
    subset_arr = [0]; 
      
    for i in range (0, n): 
        x = len(subset_arr) 
        for j in range(0, x): 
              
            # Generate subset by adding 
            # elements of A
            temp = [] 
            temp = subset_arr[j] 
            temp.append(arr[i]) 
              
            # Append in the list 
            subset_arr.append(temp) 
              
    # Return K size subset 
    length = len(subset_arr) 
    if (length >= K): 
        return subset_arr[length - K:] 
    else: 
        return -1
    
print(subset(arr, K))"
Write an algorithm to remove vowels from a string.,"def remove_vowels(string): 
      
    # vowels list
    vowels = ['a', 'e', 'i', 'o', 'u']  
    stringWithoutVowels = """" 
      
    for x in string: 
        if x not in vowels: 
            stringWithoutVowels += x 
              
    return stringWithoutVowels"
How would you write a program to find the number of prime numbers between 0 and 100?,"def count_prime_num(x, y): 
  
    prime_count = 0
  
    for num in range(x, y + 1): 
       
       if num > 1: 
           for i in range(2, num): 
               if (num % i) == 0: 
                   break
           else: 
               prime_count += 1
  
    return prime_count 

print(count_prime_num(0, 100))"
"Build a model using scikit-learn that classifies the given text data into ‘Positive’ or ‘Negative’.The customer service was great, and I will definitely recommend this product to others.","from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression

# Create arrays for the features and the label
X = ['The customer service was great, and I will definitely recommend this product to others.'] 
y = ['Positive']

# Create a CountVectorizer for parsing/counting words
cv = CountVectorizer()
 
# Parse the data with the vectorizer
X = cv.fit_transform(X)
 
# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
 
# Create the model, train it, then test it
model = LogisticRegression() 
model.fit(X_train, y_train) 
model.score(X_test, y_test)"
How can you count the frequency of each word in a given string?This is a string,"str = ""This is a string"" 
words = str.split()
count = {} 
  
for word in words: 
    if word in count: 
        count[word] += 1
    else: 
        count[word] = 1
        
print(count)

# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}"
"Create a tree data structure for the following information:a) Naruto
b) Sasuke
c) Boruto
d) Sarada","Naruto
    /    \
  Sasuke  Boruto
            \
             Sarada"
Create a switch statement for the following string:input = “cat”,"switch(input) {
    case 'cat':
        console.log('meow'); 
        break;
    default:
        console.log('unknown input') 
        break;
}"
"Construct a for-loop to iterate over a list.list = [1, 2, 3, 4]","for i in list:
    print(i)"
"Write a function that takes a string as an argument, reverses the characters, and returns the reversed string.","def reverse_string(string):
    reversed_string = """"
    for i in range(len(string)-1, -1, -1):
        reversed_string += string[i]
    return reversed_string"
Write a Python function to compute the factorial of an integer.,"def factorial(n):
  if n == 0:
    return 1
  else:
    return n * factorial(n-1)"
"Create a function that outputs the minimum and maximum ofa list of numbers.list = [1, 3, 7, -2, 4]","def minmax(list)
    min = list[0]
    max = list[0]
    for num in list[1:]:
        if num < min:
            min = num
        if num > max:
            max = num

    return min, max"
"You should edit this code and make it into a working code that prints ""Hello, world!""cout << ""Hello, World!""","#include <iostream>

int main() {
    std::cout << ""Hello, World!"" << std::endl;
    return 0;
}"
"Generate a code snippet to sort the given array in ascending order.let arr = [3, 5, 7, 2, 1]","let arr = [3, 5, 7, 2, 1]
arr.sort(function(a,b){return a-b});
console.log(arr);"
"Identify the bug in the given code snippet.function double_sum(nums) {
 for (let i = 0; i <= nums.length; i++) {
  sum += nums[i] * 2;
 }
}",The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.
"Rewrite the given code block to make the loops more efficientlet x = 0;
let y = 0;
for (let i = 0; i < 10; i++) {
 y = y + i;
 for (let j = 0; j < 10; j++) {
  x = x + j;
 }
}","let x = 0;
let y = 0;
for (let i = 0; i < 10; i++) {
 y += i;
 x += (10 * i);
}"
Generate a code snippet to find the highest common factor of two given numbers,"function highestCommonFactor(m, n) {
  if (m === 0 || n === 0) {
      return 0;
  }

  let a = Math.max(m, n);
  let b = Math.min(m, n);

  while (b !== 0) {
      let c = b;
      b = a % b;
      a = c;
  }

  return a;
}"
"Output the top 3 strings from the given array that have the greatest lengthlet arr = [""Pineapple"", ""Apple"",""Banana"", ""Strawberry"", ""Grape""]","let top3 = arr.sort((a, b) => b.length - a.length).slice(0, 3);
console.log(top3); // Output: [""Pineapple"", ""Strawberry"", ""Banana""]"
How do you display the contents of an array in reverse order?,"The contents of an array can be displayed in reverse order by using the reverse() method or by using a for loop. 

For example, to display the content of the array [1, 2, 3, 4], the following code can be used:

// Using reverse()
let arr = [1, 2, 3, 4];
arr.reverse();
console.log(arr); // Output: [4, 3, 2, 1]

// Using a for loop
let arr = [1, 2, 3, 4];
for (let i = arr.length - 1; i >= 0; i--) {
    console.log(arr[i]); // Output: 4 3 2 1
}"
"Edit the given code to make it more readablewhile(i <= num) {
  output += i;
  i++
}","let i = 0;
while(i <= num) {
  output += i;
  i++;
}"
Generate a code snippet to convert a given string to uppercase,"function toUpperCase(str) {
  return str.toUpperCase();
}"
Print out the 5th number of the Fibonacci sequence.,5
"Identify the type of the following variable:
$$
a = 5
$$",The type of 'a' is an integer.
"Create a dictionary to store the key-value pairs and print out the values of the dictionary keys.myDict = {
    ""cat"" : ""meow"",
    ""dog"" : ""bark"",
    ""horse"" : ""neigh""
}","for key, value in myDict.items(): 
    print(value) 

# Output
meow
bark
neigh"
What is the purpose of a try-catch block in Python?,"The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not."
Write a JUnit test case to test if the sum of two numbers is correct.,"@Test
public void testSum(){
    int x = 1;
    int y = 2;
    int expectedSum = 3;
    int actualSum = x+y;
 
    assertEquals(expectedSum, actualSum);
}"
When should the `break` keyword be used in a loop?,"The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop."
"Given a person's name and the current time, print the difference in time from the person's birthday.name = ""John""
time = datetime.datetime(2021, 3, 25, 10, 0, 0)","birthday = datetime.datetime.strptime(name + "" birthdate"", ""%Y-%m-%d"")
time_diff = time - birthday
print(""The difference in time from "" + name + ""'s birthday is "" + str(time_diff))"
"You are given an array of integers. Write a program to find the maximum number in this array.[10, 5, 11, 23, 9]","def max_int(arr):
  max_val = arr[0]
  for i in range(1, len(arr)):
    if arr[i] > max_val:
      max_val = arr[i]
  return max_val

print(max_int([10, 5, 11, 23, 9]))"
"You are given two strings. Write a function that checks whether the two strings are an anagram or not.""listen"", ""silent""","def is_anagram(str1, str2):
  str1 = str1.lower()
  str2 = str2.lower()
  if sorted(str1) == sorted(str2):
    return True
  else:
    return False

print(is_anagram('listen', 'silent'))"
"You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.""This , is an example string %""","def remove_symbols(string):
  text_string = ''
  for c in string:
    if c.isalpha() or c.isdigit():
      text_string += c
  
  return text_string

print(remove_symbols(""This , is an example string %""))"
"Compute the maximum product of two integers in an array.[-4, 2, -3, 6]","def max_product(arr):
    max1 = max(arr)
    arr.remove(max1)
    max2 = max(arr)
    return max1 * max2

print(max_product([-4, 2, -3, 6]))"
"Manipulate a given list to get a single string.[""Hello"", ""World"", ""!""]","def create_string(arr):
  string = ''
  for elem in arr:
    string += elem
  return string

print(create_string(['Hello', 'World', '!']))"
"Rewrite the following for loop code using a list comprehension.arr = [1,2,3,4,5]
for i in arr:
  arr[i] = arr[i] + 1","arr = [x+1 for x in [1,2,3,4,5] ]

print(arr)"
"You are given a list of numbers. Write a program to check if the given list is a palindrome or not.[1, 2, 3, 2, 1]","def is_palindrome(arr):
  rev_arr = arr[::-1]
  if arr == rev_arr:
    return True
  else:
    return False

print(is_palindrome([1, 2, 3, 2, 1]))"
"Write a function in Python for printing a given 2D array.arr = [[1,2,3], [4,5,6], [7,8,9]]","def print_2D_array(arr):
  for row in arr:
    for element in row:
      print(element,end="" "")
    print()

print_2D_array(arr)"
Identify the advantages of using deep learning models.,The advantages of using deep learning models include: the ability to handle large and complex datasets; the ability to achieve better generalization performance; greater accuracy than traditional machine learning algorithms; the ability to capture non-linear relationships; and improved efficiency.
"Create a function in Python for reversing a list.my_list = [1,2,3,4,5]","def reverse_list (my_list):
  return my_list[::-1]
  
reverse_list(my_list)"
Describe the steps for implementing a convolutional neural network.,"The steps for implementing a convolutional neural network involve selecting the network architecture, preparing the dataset, defining the features, creating the layers and connections, training the network using an optimizer, and evaluating the model’s performance."
"Develop an algorithm for sorting a given list in ascending order.my_list = [5,1,4,2,8]","def sort_list(my_list): 
  for i in range(len(my_list)):
    for j in range(i+1, len(my_list)):
      if my_list[i] > my_list[j]: 
        my_list[i], my_list[j] = my_list[j], my_list[i]
  return my_list

sort_list(my_list)"
Generate an array of 20 random numbers between 0 and 10 (inclusive).,"import random 
  
arr = [] 
for i in range(20): 
    arr.append(random.randint(0, 10))
    
arr"
Write a code snippet for generating a unique identifier for a particular object.,"import uuid

def generate_id(object): 
  return uuid.uuid4()"
Write a function in Python for calculating the area of a circle.,"def area_circle(r):
  return 3.14 * r**2"
Write an API endpoint to get the average annual temperature of a given city.,"@app.route(""/get_average_annual_temp/<city>"", methods=['GET'])
def get_average_annual_temp(city):
    # Get the average annual temperature of the given city
    temp = get_average_annual_temperature(city)
    # Return the average temperature in json format
    return jsonify({'temp': temp})"
Generate a string of 5 random characters from the characters A through Z.,"import random

def random_string():
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    random_string = ''.join(random.choice(chars) for i in range(5))
    return random_string

print(random_string())"
Build a flask server to handle a GET request to the route '/test'.,"from flask import Flask, request

app = Flask(__name__)

@app.route('/test', methods=['GET'])
def test():
    return ""This is a test""

if __name__ == '__main__':
    app.run()"
"Train a sentiment classification model on the given data.Training Data:

I love this new phone!  Positive
This phone is terrible!  Negative","import nltk 
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Preprocess data
training_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]
all_words = []
documents = []
for (sent, category) in training_data:
    words = word_tokenize(sent)
    words = [word.lower() for word in words if word not in stopwords.words()]
    documents.append((words, category))
    all_words.extend(words)

# Create feature set
distinct_words = set(all_words)
feature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]

# Train model
classifier = nltk.NaiveBayesClassifier.train(feature_set)"
"Given a Python list, write the code to flatten itl1=[1,2,3,[4,[5,6]]]","def flatten(nums):
    flattened_list = []
    for elem in nums:
        if type(elem) == list:
            flattened_list.extend(flatten(elem))
        else:
            flattened_list.append(elem)
    return flattened_list

flatten(l1)"
Write a function in Python that takes two parameters and returns a list containing those two numbers,"def make_list(a, b):
  return [a, b]"
"Add a new element to the end of a list.mylist=[2,5,7]",mylist.append(9)
Write a function that prints a message saying 'Hello world!',"def say_hello():
	print(""Hello world!"")"
"Write a sorting algorithm that sorts an array using a bubble sort.nums=[3,4,1,2,9,6]","def bubble_sort(nums):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums"
Create a list containing a given number of random numbers.,"import random

def random_list(length):
	rand_list = []
	for i in range(length):
		rand_list.append(random.randint(0,100))
	return rand_list"
"Using the existing code as guidance, add a 2nd player and 2nd input field to the game.playername1=input(""What is your name? "")
player_score1=0

if turn==1:
	player_score1+=1

print(""It is now "" + playername1 + "" turn. You have "" + str(player_score1) + "" points"")","playername1=input(""What is your name? "")
playername2=input(""What is your opponent's name? "")
player_score1=0
player_score2=0

if turn==1:
	player_score1+=1

if turn==2:
	player_score2+=1

print(""It is now "" + playername1 + ""'s turn. You have "" + str(player_score1) + "" points"")
print(""It is now "" + playername2 + ""'s turn. You have "" + str(player_score2) + "" points"")"
"Using the existing code as a guide, construct a function to validate user input.username=input(""Enter your username: "")
password=input(""Enter your password: "")","def validate_input(username, password):
	if len(username) < 5 or len(username) > 80:
		return False
	if len(password) < 8 or len(password) > 16:
		return False
	return True"
Create a function to generate a random integer between two given numbers.,"import random
def rand_int(low, high):
	return random.randint(low,high)"
Analyze the following text and produce the sentiment score.Text: I am extremely disappointed with the customer service I received.,Sentiment score: -2.
Create a function in Python that returns all permutations of a string.,"def get_all_permutations(string):
 
  if len(string) == 1:
    return [string]
 
  permutations = []
  for index, char in enumerate(string):
    slice_string  = string[:index] + string[index+1:]
    for permutation in get_all_permutations(slice_string):
      permutations.append(char + permutation)

  return permutations"
"Given a character sequence, find the longest palindromic substring.sequence: madam",madam
"Debug the following code to make it compile properly.def addNumbers(num1, num2)
  return num1 + num2","def addNumbers(num1, num2):
  return num1 + num2"
Find the greatest common divisor of these two numbers.9 and 15,3
"Create an array of strings, of size 5, by taking the string input from the user.""hello"", ""world"", ""this"", ""is"", ""a""","arr = [""hello"", ""world"", ""this"", ""is"", ""a""]"
Write code for displaying the Fibinacci sequence up to the nth term.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Create an array of size n filled with the string ""hello"".","def fillWithHello(n):
    arr = [] 
    for i in range(0, n): 
        arr.append(""hello"") 
    return arr"
"Re-write the following function to use list comprehension.def negative_list(numbers):
    negative = []
    for num in numbers:
        if num < 0:
            negative.append(num)
    return negative","def negative_list(numbers):
    return [num for num in numbers if num < 0]"
"Convert the following function to a lambda expressiondef power_of_two(x):
    return x ** 2",power_of_two = lambda x : x ** 2
"Convert the following nested for loop into a single line list comprehension.a = [1, 2, 3, 4]
b = [5, 6, 7, 8]

result = []
for i in a:
    for j in b:
        result.append((i, j))","result = [(i,j) for i in a for j in b]"
"Pre-process the following dataset and convert it into a tabular format using Pandas.data = [{""name"": ""john"", ""age"": 20, ""location"": ""New York""},
        {""name"": ""sarah"", ""age"": 30, ""location"": ""Los Angeles""}]","import pandas as pd

df = pd.DataFrame(data)

# Create tabular format 
 df = df[[""name"", ""age"", ""location""]]"
Find all substrings from a given string.,"def find_substring(str):
    substrings = []
    for length in range(1, len(str)+1):
        for start in range(len(str)- length + 1):
            substrings.append(str[start:start+length])
    return substrings"
"Softmax a list of numbers and then sum the output.[1, 2, 3]","def softmax(arr): 
    a = np.exp(arr)
    return a / np.sum(a) 
def sum_softmax(arr): 
    return np.sum(softmax(arr))"
"Toast a Python function to swap the values of two given variables.a = 10, b= 20","def swap(a, b): 
    a, b = b, a 
    return (a,b)"
"Create a function to calculate the Levenshtein distance between two stringsstr1 = ""geeks"", str2 = ""geek""","def lev_dist(str1, str2):
    if len(str1) < len(str2):
        return lev_dist(str2, str1)
    
    if len(str2) == 0:
        return len(str1)
 
    previous_row = range(len(str2) + 1)
    for i, c1 in enumerate(str1):
        current_row = [i + 1]
        for j, c2 in enumerate(str2):
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
    
    return previous_row[-1]"
Create an algorithm to sort a given array in ascending order using Bubble sort.,"def bubble_sort(arr): 
    # length of the array 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n-1): 
   
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
"Create a program to check if two given strings are a rotation of each other.string1 = ""abcd"", string2= ""cdab""","def isRotation(s1, s2):   
    if len(s1) != len(s2): 
        return False
  
    temp = s1 + s1 
    return (temp.count(s2) > 0)"
Deploy a Docker container to Heroku.Heroku account details,"Log in to Heroku using the account details provided.
Use the command ""heroku container:push web -a [app-name]"" to deploy the container to Heroku. This command will build and push the Docker container to your Heroku app. You can monitor the progress of the deployment in the ‘Activity’ tab."
Predict the sentiment of a given sentence.This movie was fairly dull.,The sentiment of the statement is negative.
Create a neural network in Python to recognize handwriting.MNIST hand-written digit dataset,"The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters."
"Determine the average of 3 numbers.30, 20, 60",The average of the 3 numbers is 36.
Develop a machine learning algorithm to predict stock prices.Historical stock prices,"The algorithm should include parts like data preprocessing, feature extraction, selecting the right model, hyperparameter optimization and evaluation."
Identify the most frequent word in a given sentence.This is a beautiful summer day,"The most frequent word in the sentence is ""a""."
Write pseudo code for finding the maximum element in an array.,"START
SET max_element to 0
LOOP through array
 IF current element is greater than max_element
 SET max_element to current element
END LOOP
PRINT maximum element
END"
"How would you modify the following code to print the square of each number in the given list?nums = [1, 2, 3, 4]","nums = [1, 2, 3, 4]

for i in range(len(nums)):
    nums[i] = nums[i] * nums[i]

print(nums) # [1, 4, 9, 16]"
"What does the following code do?def division(num1, num2):
    return num1 / num2",The code defines a function called division which takes two numbers as arguments and returns the result of dividing the first number by the second number.
"Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.""1,2,3,4""","def sum_numbers(nums): 
    nums = nums.split(',')
    total = 0
  
    # Traverse the string and add all elements 
    # of it to the total. 
    for i in range(len(nums)): 
        total += int(nums[i]) 
  
    # return total 
    return total 

print(sum_numbers(""1,2,3,4"")) # 10"
"Create a function that takes the string of the current time and returns the time in minutes.""12:30PM""","def convert_to_minutes(time): 
    # Split the time into hours and minutes 
    h, m = map(int, time.split(':'))

    # Add 12 to the hours if the time is PM 
    if time.endswith('PM'): 
        h += 12
    return h * 60 + m

print(convert_to_minutes(""12:30PM"")) # 750"
"Create a function that takes two strings and returns a new string containing the first three characters of each string combined.""Hello""
""World""","def combine_first_three(string1, string2): 
    # Get the first three characters of each string 
    string1 = string1[:3]
    string2 = string2[:3]

    # Combine the first three characters of each string 
    combined_string = string1 + string2

    # Return the new string 
    return combined_string

print(combine_first_three(""Hello"", ""World"")) # HelWor"
"How would you modify the following code to make it more efficient?def find_word(word, text):
    if word in text:
        return ""Word found""
    else:
        return ""Word not found""","def find_word(word, text):
    # Use the 'in' operator to check if the word is in the text
    if word in text:
        return ""Word found""
    else:
        return ""Word not found""

# Use the 'count' method to check if the word is in the text more efficiently
if text.count(word) > 0:
    return ""Word found""
else:
    return ""Word not found"""
"Create a function that takes a list of numbers and returns the index of the largest number.[2, 5, 12, 3, 4]","def find_largest_number(nums): 
    # Initialize the index of the largest number.
    largest_index = 0

    # Loop through the list of numbers and
    # compare each number to the other. 
    # Update the index of the largest number. 
    for i in range(len(nums)):
        if nums[i] > nums[largest_index]:
            largest_index = i
    
    # Return the index of the largest number.
    return largest_index

print(find_largest_number([2, 5, 12, 3, 4])) # 2"
"Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.""This is a very long sentence""","def remove_longest_word(sentence): 
    # Split the sentence into words 
    words = sentence.split(' ')

    # Find the longest word 
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word): 
            longest_word = word 

    # Remove all occurrences of the longest word
    new_sentence = [] 
    for word in words:
        if word != longest_word: 
            new_sentence.append(word) 
    
    # Join the list back into a string and return it 
    return "" "".join(new_sentence)

print(remove_longest_word(""This is a very long sentence"")) # This is a sentence"
Build a regular expression to check if a string only contains numbers.,^[0-9]+$
"You are given a list of items. Output a list of items and their respective frequencies.[1,2,2,4,5,2,3,4,5,6]","1: 1
2: 3
3: 1
4: 2
5: 2
6: 1"
Create a basic neural network model to distinguish between cats and dogs.,"Model Building Code:
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
"Read the given code block and debug it.def main():
 print(""Hey I'm here"")
 if n == 0: 
  print(""Hey I'm there"")
main()","Error: n is not defined.

The given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:

def main():
 print(""Hey I'm here"")
 n = 0
 if n == 0: 
  print(""Hey I'm there"")
main()"
Find the closest decimal approximation of 0.875.,0.88
"Construct a loop to output all the elements from a list.['a', 'b', 'c', 'd']","for i in range(len(arr)):
    print(arr[i])"
Create an algorithm to detect if a string is a palindrome or not.,"def isPalindrome(s): 
    reversedString = s[::-1] 
  
    if (s == reversedString): 
        return True
    return False"
Provide a function to find the length of a string.,"def length(s):
    i = 0
    for ch in s:
        i += 1
    return i"
"Modify the following code to get the desired output.for i in range(1, 7):
    for j in range(1, i):
        print(j)","for i in range(1, 7):
    for j in range(1, i+1):
        print(j, end=' ')
    print()"
"Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.s1 = “silent”
s2 = “listen”","def anagrams(s1, s2):
    if len(s1) != len(s2):
        return False
    s1_arr = list(s1)
    s2_arr = list(s2)
    s1_arr.sort()
    s2_arr.sort()
    for i in range(len(s1_arr)):
        if s1_arr[i] != s2_arr[i]:
            return False
    return True"
"Generate a sentence using the given array of words:arr = ['This', 'is', 'a', 'sentence']",This is a sentence.
"Swap the contents of two variables.a = 10
b = 15","a, b = b, a"
Generate a function which will validate a phone number using regular expression.,"def validate_phone(phone_number):
    regex = '^\+?(\d[\d-. ]+)?(\([\d-. ]+\))?[\d-. ]+\d$'
    if re.match(regex, phone_number):
        return True
    return False"
"Modify the given code to multiply two n x n matrices.def multiply(m1, m2, n):
    result = [[0 for x in range(n)] for y in range(n)]
    for i in range(n):
        for j in range(n): 
            result[i][j] = 0","def multiply(m1, m2, n):
    result = [[0 for x in range(n)] for y in range(n)]
    for i in range(n):
        for j in range(n):
            for k in range(n):
                result[i][j] += m1[i][k] * m2[k][j]
    return result"
"Write a function to return the index of an item in an array.arr = [1, 2, 3, 4, 5]
x = 4","def index(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1"
"Generate a list that has the all even numbers between 1 and 50, inclusive.","even_nums_list = [x for x in range(1,51) if x % 2 == 0]"
Reverse the string given in the inputHello world,"s = ""Hello world"" 
s = s[::-1] 
print(s)"
Create a class that creates a stack object and implements push and pop functions,"class Stack: 
	def __init__(self): 
		self.stack = [] 

	# This method adds an element at the top of the stack 
	def push(self, item): 
		self.stack.append(item) 
 
	# This method removes the topmost element and returns it 
	def pop(self): 
		if self.is_empty(): 
			return None
		return self.stack.pop() 
  
	# This method returns the topmost element without removing it 
	def peek(self): 
		if self.is_empty(): 
			return None
		return self.stack[-1] 
  
	# This method returns true or false depending on whether the stack is empty or not 
	def is_empty(self): 
		return len(self.stack) == 0"
"Implement the code in the input to the outputdef do_something(data):
    # TODO: Your code here
    pass","def do_something(data):
    # Your code here
    result = 1
    for num in data:
        result *= num
    return result"
"Find the minimum of two given numbers.4, 6","def min_two(a, b):
  if a < b:
    return a
  else:
    return b

min_val = min_two(4, 6)
print(min_val)"
"Sort the given array using insertion sort[5, 1, 4, 2, 8]","def insertion_sort(arr):
    """"""
    Sort given array using insertion sort
    """"""
    # Traverse through the array 
    for i in range(1, len(arr)): 
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i - 1
        while j >= 0 and key < arr[j] : 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = key 
  
    return arr

arr = [5, 1, 4, 2, 8]
sorted_arr = insertion_sort(arr)
print(sorted_arr)"
Generate a list comprehension that has the multiples of 3 between 0 and 30,"multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]"
"Return the index of a given value in a list.[1,2,3], 3","def find_index(lst, value):
    """"""
    Return the index of a given value in a list.
    """"""
    for i, v in enumerate(lst):
        if v == value:
            return i
    return -1

lst = [1,2,3]
val = 3
find_index(lst, val)"
"Return a new array after removing duplicates from a given array.[1, 2, 3, 2, 3, 4]","def remove_duplicates(arr):
    """"""
    Return a new array after removing duplicates from a given array.
    """"""
    new_arr = []
    for num in arr:
        if num not in new_arr:
            new_arr.append(num)
    return new_arr

arr = [1, 2, 3, 2, 3, 4]
new_arr = remove_duplicates(arr)
print(new_arr)"
Implement a non-recursive algorithm to compute the factorial of a given number7,"def factorial(n): 
    res = 1 
    # Calculate value of 
    # factorial in for loop 
    for i in range(2,n+1): 
        res = res * i 
    return res 

n = 7
print(""Factorial of"",n,""is"",factorial(n))"
"Compute the sum of two given lists[2,3,4], [1,2,3]","def sum_lists(lst1, lst2):
    """"""
    Compute the sum of two given lists.
    """"""
    new_list = []
    for i in range(len(lst1)):
        new_list.append(lst1[i] + lst2[i])
    return new_list

lst1 = [2,3,4]
lst2 = [1,2,3]
sum_lst = sum_lists(lst1, lst2)
print(sum_lst)"
Construct a class to represent a student,"class Student():
  def __init__(self, first_name, last_name, email, street, city, state, zip_code):
    self.first_name = first_name
    self.last_name = last_name
    self.email = email
    self.street = street
    self.city = city
    self.state = state
    self.zip_code = zip_code
  
  def change_email(self, new_email):
    self.email = new_email"
Create a function to compute the square root of a given number9,"def sqrt(n):
    """"""
    Compute the square root of a given number
    """"""
    r = n
    while r*r > n:
        r = (r + n/r) // 2
    return r

n = 9
val = sqrt(n)
print(val)"
"Create a method that prints all elements of an array[1,2,3]","def print_elements(arr):
    """"""
    Print all elements of an array.
    """"""
    for num in arr:
        print(num)

arr = [1,2,3]
print_elements(arr)"
"Given a string ``word``, write code to return the third character in the string.word = ""hello""",third_character = word[2] # the third character is 'l'
"Replace the ""TODO"" placeholder in the following python code.def add_two_numbers(a, b):
    '''This function takes two numbers and returns their sum.'''
    # TODO","def add_two_numbers(a, b):
    '''This function takes two numbers and returns their sum.'''
    return a + b"
Create a function to find the value of Pi rounded to the 3rd decimal point.,"def find_pi():
    pi = 3.141
    return round(pi, 3) # rounded to the 3rd decimal point"
"Rearrange the following code to print out the list elements in reverse order.colors = [""red"", ""green"", ""blue""]","colors = [""red"", ""green"", ""blue""]
colors.reverse()
for color in colors:
    print(color)"
"Find the difference between the two datesimport datetime
date1 = datetime.date(2020, 5, 15)
date2 = datetime.date(2020, 4, 15)","diff = date1 - date2
difference = diff.days # difference = 30 days"
"How would you find the maximum number in a list of length 5?list_nums = [1, 4, 7, 2, 9]",maximum_num = max(list_nums) # maximum_num = 9
"Write a function to multiply two given numbers and return the product.num1 = 5
num2 = 8","def multiply(num1, num2):
    '''This function multiplies two given numbers and returns the product.'''
    return num1 * num2 # returns 40"
"Retrieve the elements at indexes 2 and 5 in the list.list_nums = [1, 4, 7, 2, 9]","elements = [list_nums[2], list_nums[5]] # elements = [7, 9]"
"Using the comment as a guide, convert the following code from a for loop to a while loop.data_list = [1, 3, 5, 7, 9]

# Loops through the data_list and prints out all elements
for element in data_list:
    print(element)","data_list = [1, 3, 5, 7, 9]

# Loops through the data_list and prints out all elements
i = 0
while i < len(data_list):
    print(data_list[i])
    i += 1"
"Implement find_difference() to calculate the absolute difference between two integers.input_int1 = 5
input_int2 = 9","def find_difference(input_int1, input_int2):
    '''This function calculates the absolute difference between two integers.'''
    return abs(input_int1 - input_int2) # returns 4"
"How would you find the number of occurrences of a particular character in a given string?string = ""hellohowareyou""
char = 'o'",count_char = string.count(char) # count_char = 2
"Create a new list from an existing list with no duplication.list_int = [4, 7, 4, 8, 6, 7]","new_list_ints = list(set(list_int)) # new_list_ints = [4, 7, 8, 6]"
"How would you output the average value of a given list of numbers?list_int = [2, 7, 15, 25]",avg = sum(list_int) / len(list_int) # avg = 11.5
"Given a list of strings, write a program to return all strings with first character as 'c'.list_strings = [""cat"", ""dog"", ""cow"", ""duck""]","required_strings = []

for string in list_strings:
    if string[0] == 'c':
        required_strings.append(string)
    
# required_strings = [""cat"", ""cow""]"
"Merge two sorted lists into a single sorted listlist1 = [1,3,5,7] 
list2 = [2,4,6,8]","def merge_sorted_lists(list1, list2):
    merged_list = []
    i = 0
    j = 0

    # Iterate through the lists until all elements have been merged
    while (i < len(list1) and j < len(list2)):
        # If the element from the first list is smaller, add it 
        # to the merged list
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i+=1
        # Otherwise add the element from the second list
        else:
            merged_list.append(list2[j])
            j+=1
 
    # Append any remaining elements from the first list
    while i < len(list1):
        merged_list.append(list1[i])
        i+=1
 
    # Append any remaining elements from the second list
    while j < len(list2):
        merged_list.append(list2[j])
        j+=1
 
    return merged_list"
Create a list of all the prime numbers between 3 and 20,"[3, 5, 7, 11, 13, 17, 19]"
"Find the length of the longest substring of a stringtext = ""Hello, world!""","length = 6 # The longest substring is ""Hello,"" which has 6 characters."
"Create a dictionary mapping each character in a string to its frequencytext = ""Hello, world!""","char_freq = {
    'H': 1,
    'e': 1,
    'l': 2,
    'o': 2,
    ',': 1,
    ' ': 1,
    'w': 1,
    'r': 1,
    'd': 1,
    '!': 1
}"
"Write a code to create a 2-D array with size (4,4) and fill it with 1's.",arr = [[1 for _ in range(4)] for _ in range(4)]
"Write a code to compute the sum of the elements in a given array of integers.arr = [2, 4, 6, 8]","int sum = 0;
for (int i = 0; i < arr.length; i++) {
    sum += arr[i];
}"
What is the cut-off frequency of a high-pass filter?,The cut-off frequency of a high-pass filter is the frequency at which the output signal is significantly reduced in magnitude compared with the input signal. It is used to remove low frequency components from a signal. It is commonly measured in hertz (Hz).
Describe the concept of OOP in programming.,"Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to organize data and define methods of operation on that data. It is based on the concepts of abstraction, encapsulation, inheritance, and polymorphism. OOP simplifies the development and maintenance of software by providing a model for how to structure, design, and use code. OOP also makes it easier to build applications for large and small teams."
What are the two main types of bug tracking tool?,"The two main types of bug tracking tools are issue tracking systems and bug tracking systems. Issue tracking systems are used for managing customer service or support requests. Bug tracking systems are used for managing and tracking software bugs. Both tools are designed to help developers keep track of software issues, prioritize work, assign tasks, and report on progress."
Write a function to sort a list of strings by length.,"def sort_by_length(lst):
    lst.sort(key=len)
    return lst"
What is the purpose of using global variables in programming?,"The purpose of using global variables in programming is to allow variables to be shared among multiple functions. Global variables are accessible by all the functions within a program and provide an easy way to share data between different functions. By declaring a variable as global, its value can be changed by any other part of the program. This helps reduce the amount of code repetition and makes it easier to maintain the code."
"Complete the following code to implement a binary search.def binary_search(arr, x):","def binary_search(arr, x):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            left = mid + 1
        else:
            right = mid - 1
    return -1"
What is the importance of writing unit tests?,"The importance of writing unit tests is to ensure that the code works correctly and produce the expected results. By writing automated unit tests, developers can quickly and easily detect bugs and errors in their code. Unit tests also help with the building of reliable system architectures since the code is thoroughly tested even before the application is released. Unit tests also help in the code maintenance process since programmers can quickly identify changes made in the code that introduces bugs."
Complete the following regular expression for email address validation.^[\w\.+-]+@,"^[\w\.+-]+@[\w\.-]+\.[a-zA-Z]{2,4}$"
What is the difference between a sequential and a parallel collection?,"The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing."
"Write a Python program to find the unique elements in a list.2, 3, 9, 5, 2, 4, 9","def unique_elements(input_list): 
    result_list = []
    for item in input_list: 
        if item not in result_list: 
            result_list.append(item)
    return result_list

input_list = [2, 3, 9, 5, 2, 4, 9]
print(unique_elements(input_list))
# Output: [2, 3, 9, 5, 4]"
What is Big O notation?,Big O notation is a measure of the complexity of an algorithm. It describes the worst-case complexity of a given algorithm in terms of time and/or space as the problem size increases.  It can indicate whether an algorithm's performance increases linearly or exponentially as the problem size increases.
What is an object in object-oriented programming?,"In object-oriented programming, an object is a self-contained entity that contains both data and code, which together define and control its behavior. Objects can communicate with one another by sending messages and receiving data in response. Objects are used to represent real-world concepts, such as people, places, and things."
"Create a for loop for iterating over list y and adding its elements to a new listy = [1,2,3,4,5]","new_list = []
for el in y:
    new_list.append(el)"
"Create a function that takes a number ""n"" as an argument and returns the nth Fibonacci numbern = 15","def fibonacci(n): 
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return 0
    elif n == 1: 
        return 1
    else: 
        return fibonacci(n-1) + fibonacci(n-2) 
  
fibonacci(15)"
Create an if statement to determine if an input number is even.num = 5,"if num % 2 == 0:
    print(""The number is even"")
else:
    print(""The number is odd"")"
"Construct a for loop to print out each element in a given list.my_list = [2, 3, 5, 8]","for i in my_list:
    print(i)"
"Construct code to compute the average height from a list of heights.heights = [170, 140, 160, 180, 160]","sum_heights = 0
for height in heights:
    sum_heights += height
avg_height = sum_heights/len(heights)"
"Create a dictionary where the keys are names and the values are their associated ages.name_list = [""Kai"", ""Jane"", ""Andy"", ""Emily""]
age_list = [23, 32, 16, 55]","name_age_dict = dict(zip(name_list, age_list))"
"Construct a code to check if an input string is a palindrome.s = ""racecar""","def check_palindrome(s): 
    return s == s[::-1] 
  
check_palindrome(s)"
"Create a for loop for printing out the elements in a given list in reverse order.my_list = [1,2,3,4]","for i in range(len(my_list)-1, -1, -1):
    print(my_list[i])"
"Edit the following code such that output is an array of objects of key value pairs.let fruit = [""apple"", ""banana"", ""orange""];
let colors = [""red"", ""yellow"", ""orange""];","let fruits = [""apple"", ""banana"", ""orange""];
let colors = [""red"", ""yellow"", ""orange""];

let fruitObj = [];

for (let i = 0; i < fruits.length; i++) {
    let obj = {};
    obj.name = fruits[i];
    obj.color = colors[i];
    fruitObj.push(obj);
}"
"Write a function that takes a string, a key and a value as parameters and replaces all occurrences of the key with the value in the string.s = ""This is a sample sentence with some keys to replace.""
key = ""keys""
value = ""words""","def replace_key_value(s, key, value):
  replacedStr = s.replace(key, value) 
  return replacedStr"
"Write a function that prints an array elements in a reverse order.arr = [0, 1, 2, 3, 4, 5]","def reverse_print_array(arr):
  for i in range(len(arr)-1, -1, -1):
    print(arr[i])"
"Create a program to compare the elements of three arrays and print the elements that are present in all the arrays.arr1 = [2, 3, 4]
arr2 = [1, 2, 5]
arr3 = [2, 4, 6]","def compare_arrays(arr1, arr2, arr3):
  common_elements = []
  for elem in arr1:
    if elem in arr2 and elem in arr3:
      common_elements.append(elem)
  print(common_elements)"
"Write a function that takes an array of integers and returns the minimum difference between two consecutive elements.arr = [4, 2, 7, 5, 1]","def min_difference(arr):
  min_diff = abs(arr[1] - arr[0])
  for i in range(1, len(arr)-1):
    diff = abs(arr[i+1] - arr[i])
    if diff < min_diff:
      min_diff = diff
  return min_diff"
"Create an algorithm to find the smallest positive integer not present in an array.arr = [2, 3, 7, 6, 8, -1, -10, 15]","def find_missing(arr):
  # sort the array
  arr.sort()
  
  # iterate through the array 
  # to find the smallest positive integer not present 
  for i in range(len(arr)):
    if arr[i] > 0:
      if arr[i+1] != arr[i] + 1:
        return arr[i] + 1
  return arr[-1] + 1"
"Sort the following array using the merge sort algorithm.arr = [4, 10, 5, 1, 8, 9]","def merge_sort(arr):
    if len(arr) > 1: 
      mid = len(arr)//2
      left_arr = arr[:mid]
      right_arr = arr[mid:]

      merge_sort(left_arr)
      merge_sort(right_arr)

      i = j = k = 0

      while i < len(left_arr) and j < len(right_arr): 
        if left_arr[i] < right_arr[j]: 
            arr[k] = left_arr[i] 
            i+=1
        else: 
            arr[k] = right_arr[j] 
            j+=1
        k+=1
      while i < len(left_arr): 
        arr[k] = left_arr[i] 
        i+=1
        k+=1
      
      while j < len(right_arr): 
        arr[k] = right_arr[j] 
        j+=1
        k+=1"
"Create an algorithm for searching for an element in a sorted array.arr = [2, 4, 6, 8, 10]
target = 6","def binary_search(arr, target):
  low = 0
  high = len(arr) - 1

  while low <= high: 
    mid = (low + high) // 2
    if arr[mid] == target: 
      return mid 
    elif arr[mid] < target: 
      low = mid + 1
    else: 
      high = mid - 1
  return -1"
"Assign ""D"" as the grade for a student whose score is higher than 80 and lower than 90.score = 85","if score > 80 and score < 90:
    grade = ""D"""
"List the people who have bought ""Apple iPod"" from the ""Electronics"" category.","SELECT people 
FROM orders 
WHERE item = 'Apple iPod' AND category = 'Electronics'"
Summarize this text in one sentence.Machine Learning is the study of algorithms that improve automatically through the experience gained from available data.,Machine Learning is the process of using algorithms to gain insights from data and to improve automation.
"Calculate the total cost of items purchased by a customer.price1 = 10
quantity1 = 5
price2 = 15
quantity2 = 3","total_cost = (price1*quantity1) + (price2*quantity2)
print(total_cost)  # Output: 95"
"Find the sum of the squares of the following numbers.[2, 3, 4]","sum = 0
for number in [2, 3, 4]:
    sum += number ** 2

print(sum) # Output: 29"
"Edit the following code to make it run without errors.def squared(num):
    return num * num
 
num = 5
print(squared(5)","def squared(num):
    return num * num
 
num = 5
print(squared(5))"
Design a function with the following output.,"def sayHi(name):
    print(""Hi ""+name+""! How are you today?"")"
"Edit the following code to check for even numbers in the array.arr = [1, 2, 3, 4, 5]","arr = [1, 2, 3, 4, 5]

for i in arr: 
 if i % 2 == 0 : 
 print(i)"
Develop an algorithm in Python to calculate the factorial of a given number n.,"def factorial(n): 
   if n == 0: 
       return 1
   elif n > 0: 
       return n * factorial(n-1) 
   else: 
       return ""Enter a positive integer"""
"Create a coding program that sorts a given list of numbers into ascending order.[4, 3, 2, 5, 9, 1, 8]","def ascending_order(arr): 

# Bubble sort algorithm. 
    n = len(arr) 
   
    # Traverse through all array elements 
    for i in range(n): 
   
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
   
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
                
    return arr

# Test 
arr = [4, 3, 2, 5, 9, 1, 8]

ascending_order(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
"Write a function that collects elements from two given arrays and creates a new array.array1 = [1, 2, 3] 
array2 = [4, 5, 6]","def collect(array1, array2):
    result = array1 + array2 
    return result"
"Develop a program that takes a number and prints ""true"" if it is a prime number, and ""false"" otherwise.","def is_prime(number):
  if number<1:
    return False
  for check in range(2,number):
    if number%check==0:
      return False
  return True"
"Develop a function to find all elements in a given array which appear more than once.nums = [4, 3, 6, 7, 3, 8, 4, 9]","def find_duplicates(nums):
    duplicates = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] == nums[j]:
                duplicates.append(nums[i])
    return duplicates"
"Design a function to find the average of a given array.array = [1, 2, 3]","def array_mean(array):
    total = 0
    for num in array:
        total += num
    mean = total / len(array)
    return mean"
Develop an algorithm to print out the following pattern.,"def print_pattern():
    for i in range(1, 5):
        for j in range(1,i+1):
            print(j, end="" "")
        print()"
"Create a program to calculate the standard deviation of an array of numbers.arr = [10, 8, 12, 5, 9]","def stdev(arr):
    n = len(arr)
    mean = sum(arr) / n
    variance = sum((x - mean) ** 2 for x in arr) / n
    return (variance ** 0.5)"
"Create a function that calculates the average of given list of numbers.[10, 15, 20, 25, 30]","def mean(nums):
    sum = 0
    for i in nums:
      sum += i
    return sum / len(nums)"
You need to code a program that prints the absolute difference between two numbers.15 and 10,"def difference(num1, num2):
    return abs(num1 - num2)"
Calculate the sum of all the prime numbers between a given range.15 and 20,"def sum_of_primes(start, end): 
    sum = 0
    for i in range(start, end + 1):
        if isPrime(i): 
            sum = sum + i 
    return sum
    
def isPrime(num): 
    if num > 1: 
        for i in range(2, num): 
            if (num % i) == 0: 
                return False
        return True
    else: 
        return False"
Formulate a query to select the rows based on multiple conditionsSELECT * FROM fruit WHERE color='red' AND quantity > 5,No output required
"Implement a recursive binary search on a given sorted list.[-4, -2, 0, 6, 7, 8]","def binary_search(arr, num, start, end): 
    if start >= end: 
        return None
  
    mid = start + (end - start)//2
    if arr[mid] == num: 
        return mid 
  
    if arr[mid] < num: 
        return binary_search(arr, num, mid+1, end) 
    else: 
        return binary_search(arr, num, start, mid-1)"
"You need to code a program that converts a given number of days to years, month and days.450 days","def convertToYMD(num_days):

    years = int(num_days/365)
    rem_days = num_days % 365
    months = int(rem_days / 30)
    days = rem_days % 30
    return [years, months, days]"
"Write a function to flatten a given array of lists.[[1,2], [3,4], [5,6]]","def flatten(arr):
    output_list = []
    for sublist in arr:
        for item in sublist:
            output_list.append(item)
    return output_list"
Create a function to sort a given set of strings in dictionary order.,"def sort_dict(arr):
	arr.sort(key=lambda s: [s.lower(), s])
	return arr"
"Construct a python class to store a person's data like name, age, and hobbies.","class Person:
     def __init__(self, firstname, lastname, age, hobbies):
           self.firstname = firstname
           self.lastname = lastname
           self.age = age
           self.hobbies = hobbies"
"Format a given string according to a given pattern.string = 'John Doe, 25'
pattern = '{lastname}, {firstname} {age}'","formatted_string = pattern.format(firstname = string.split()[0], lastname = string.split()[1], age = string.split()[2])"
Construct a python method to get the nth Fibonacci number.,"def get_nth_fibonacci(n):
 if n == 0 or n == 1:
 return n
 else:
 return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)"
"Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.def get_max(num1):
 return num1","def get_max(num1, num2):
 return max(num1, num2)"
Implement a method to check if a given string has all unique characters.,"def has_unique_chars(string): 
  chars = set() 
  for char in string: 
    if char in chars: 
      return False 
    else: 
      chars.add(char) 
  return True"
Suggest a method to remove a given item from a given list.,"def remove_item(lst, item):
 if item in lst:
    lst.remove(item)"
"Create a Pandas DataFrame from a given dictionary of lists.data = {'Year': [2020, 2021, 2022],
 'Sales': [50000, 70000, 60000]}","import pandas as pd

df = pd.DataFrame(data)"
Write an expression to verify the validity of a given password in Python.,"import re 
  
def check(password): 
  
    #Define pattern rules
    pattern = r""^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}""
      
    if (re.search(pattern,password)): 
        return True
    else: 
        return False 
  
# Driver code     
password = ""Geronimo1""
if (check(password)): 
    print(""Valid Password"") 
else: 
    print(""Invalid Password"")"
"Organize the following array of objects in ascending order by the 'name' field.[ 
  { name: 'Jill', lastname: 'Smith' }, 
  { name: 'Bob', lastname: 'Jones' },
  { name: 'Jack', lastname: 'Bauer' }
]","let arr = [ 
  { name: 'Jill', lastname: 'Smith' }, 
  { name: 'Bob', lastname: 'Jones' },
  { name: 'Jack', lastname: 'Bauer' }
];

arr.sort((a, b) => (a.name > b.name) ? 1 : -1);
  
console.log(arr);"
"Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN.my_list = [5, 2, 3, None, '', 8]","def assign_values(list): 
    for i, val in enumerate(list): 
        if not val or val != val: 
            list[i] = 0
            
    return list

my_list = [5, 2, 3, None, '', 8] 
result = assign_values(my_list) 
print(result) 
# Output: [5, 2, 3, 0, 0, 8]"
"Calculate the sum of the numbers given in the following list using Python.my_list = [1, 2, 3, 4, 5]","my_list = [1, 2, 3, 4, 5]

# Calculate the sum 
sum_nums = sum(my_list)

print(sum_nums) 
# Output: 15"
Design a GUI in Python to accept user input and display a welcome message.Message: Welcome to our website!,"import tkinter as tk

window = tk.Tk()

label = tk.Label(text='Please enter your name:')
label.pack()

name = tk.Entry(window, width=25)
name.pack()

def greet_user():
	welcome = ""Welcome to our website, "" + name.get()
	
	greeting = tk.Label(text=welcome)
	greeting.pack()

btn = tk.Button(window, text='Submit', command=greet_user)
btn.pack()

window.mainloop()"
Describe how a bubble sort algorithm works.,"Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted."
"Given a string, write a program to remove the leading and trailing white spaces from the string and output the modified string.String: ""Hello world   ""","# Python program to remove leading and trailing white spaces from a string 
  
# Function to remove leading and trailing white spaces 
def removeWhitespaces(string): 
    # Remove leading and trailing whitespaces 
    newString = string.strip() 
  
    # Returns the new string with leading and trailing 
    # whitespaces removed 
    return newString 
  
# Driver program 
inputString = ""Hello world   ""
  
# Printing the modified string 
print(removeWhitespaces(inputString))"
What is the difference between sort() and sorted()?,"The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons."
"Define a function to collect unique values from a list of dictionaries based on the ""key"" field.list = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}]","def collect_unique(dic_list, key):
    unique_values = set()
    for item in dic_list:
        val = item.get(key)
        if val is not None:
            unique_values.add(val)
    return list(unique_values)"
"Output the concatenation of two strings.String1: ""Hello""
String2: ""world""",print(string1 + string2)
Find the longest word in the given sentence.Sentence: “The cow jumped over the moon.”,"longest_word = max(sentence.split(), key=len)"
"Identify which of the two strings is a valid URL.str1 = ""http://example.com/blog""
str2 = 'example.com/blog'","str1 is a valid URL, whereas str2 is not."
"Modify the following function to print out the 'type' of each argument.def print_args(arg1, arg2):
    print(""Arg 1:  %s"" % arg1)
    print(""Arg 2:  %s"" % arg2)","def print_args(arg1, arg2):
    print(""Arg 1: %s"" % str(type(arg1))) 
    print(""Arg 2: %s"" % str(type(arg2))) 
    print(""Arg 1:  %s"" % arg1)
    print(""Arg 2:  %s"" % arg2)"
"Write a Python program to add two matrices.matrix1 = [[3, 5],
           [6, 2]]

matrix2 = [[1, 2],
           [3, 4]]","def add_matrices(mat1, mat2):
    """"""
    This function takes two 2D matrices and adds them,
    returning a new 2D matrix.
    """"""
    output = []
    
    for i in range(len(mat1)):
        row_m1 = mat1[i]
        row_m2 = mat2[i]
        row_sum = []
        for j in range(len(row_m1)):
            row_sum.append(row_m1[j] + row_m2[j])
        output.append(row_sum)
        
    return output
    
result = add_matrices(matrix1, matrix2)"
"Edit the following code to make it print out the sum of two numbers.num1 = 10
num2 = 5

print(num1 * num2)","num1 = 10
num2 = 5

print(num1 + num2)"
Format the following date according to ISO 8601 standard.date = 'January 5 2021',"from datetime import datetime

date = 'January 5 2021'
formatted_date = datetime.strptime(date, '%B %d %Y').isoformat()
print(formatted_date)"
Identify two coding languages used by Python developers.,Two coding languages used by Python developers are Python and C++.
"Combine the two lists below using Python to produce a single list containing all elements from both.list_one = [1, 2, 3]
list_two = [4, 5, 6]","list_one = [1, 2, 3]
list_two = [4, 5, 6]
combined_list = list_one + list_two
print(combined_list) # Output: [1, 2, 3, 4, 5, 6]"
Construct a GraphQL query for retrieving posts for the selected user.,"query {
  selectedUser {
    posts {
      title
      body
      createdAt
      comments {
        body
        author {
          name
        }
      }
    }
  }
}"
Provide an example of a recursive Python function to calculate the factorial of a number.,"def calculateFactorial(n):
  if n == 0:
    return 1

  return n * calculateFactorial(n - 1)"
What is the syntax for creating a class in Python?,"class MyClass:
    <statement(s)>"
"Write a function in Python to extract the first 5 characters of a string.string = ""This is a sample string.""","def get_first_five_characters(string):
  return string[:5]

print(get_first_five_characters(string)) # Output: 'This '"
How can we generate a random number within a given range in Python?,"import random

randomNumber = random.randint(minNum, maxNum)"
Write a Python function to find the most common element in a given list.,"def most_common(myList):
  return max(set(myList), key=myList.count)"
"Suggest a for loop for printing all elements in an array.int a[] = {11, 22, 33, 44, 55};","for (int i=0; i<sizeof(a)/sizeof(a[0]); i++) {
    cout << a[i] << "" "";
}"
Suggest a way to convert a decimal number to binary.int number = 15,"string decimalToBinary(int number) {
    string binaryNum = """";
    while(number > 0) {
        binaryNum = (number % 2 == 0 ? ""0"" : ""1"") + binaryNum;
        number = Math.trunc(number / 2);
    }
    return binaryNum;
}"
"Write a Haskell program to convert a given string to an Integer.string text = ""12345""","stringToInt :: String -> Int
stringToInt x = read x :: Int"
"Suggest a way to sort a given array using insertion sort algorithm.int arr[] = {82, 2, 25, 14, 5, 9}","void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) { 
        key = arr[i]; 
        j = i - 1; 
        while (j >= 0 && arr[j] > key) { 
            arr[j + 1] = arr[j]; 
            j = j - 1; 
        } 
        arr[j + 1] = key; 
    }
}"
Write a code snippet to delete all elements from a linked list.,"# Function to delete all the elements 
# of the linked list 
def deleteList(head_node): 
    # Store head node 
    curr = head_node 
    prev = None

    # Traverse the list and delete 
    # each node one by one 
    while(curr): 
        # Next node  
        next = curr.next
        # Free the current node 
        curr = None
        # Update prev and curr node 
        prev = curr 
        curr = next"
"Given a list of strings, write a program to combine them into one string with a space between each element.lst = ['This', 'is', 'a', 'list', 'of', 'strings']","result = "" "".join(lst)
print(result) # This is a list of strings"
Write a function to compute a hash code for a string.,"def hash(string):
    result = 0
    for char in string:
        result += ord(char)
    return result"
Write an algorithm in Python which reads a string and reorders it alphabetically.string s = 'dcba',"def reorder_string(s):
    s = sorted(s)
    return ''.join(s)

print(reorder_string('dcba'))"
"Parse a given XML document using the ElementTree module.<note>
  <to>John</to>
  <from>Alice</from>
  <heading>Greeting</heading>
  <body>Hi John, how are you?</body>
</note>","import xml.etree.ElementTree as ET

tree = ET.parse('data.xml')
root = tree.getroot()

for child in root:
 print(child.tag, child.attrib, child.text)"
Create a function to format a given number to two decimal places.,"def format_number(num):
 return '{0:.2f}'.format(num)"
Write pseudocode to sort a given list of integers using bubble sort.,"# Set a swap flag to true
swap = true 
# While the flag is true
while swap 
  # Set the swap flag to false
  swap = false
  # Iterate through the list
  for i in range(len(list) - 1):
    # Swap adjacent element if they are out of order
    if list[i] > list[i + 1]:
      temp = list[i]
      list[i] = list[i + 1]
      list[i + 1] = temp
      # Set the flag back to true
      swap = true"
Create a Perl regular expression to verify if a given string is a valid email address.,"if ($string =~ m/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/) {
 print ""Valid email address\n"";
}"
"Find and remove the bug from this Python code.def function(a):
    b = a / 0.5
    c = a / 2.0
    if b == c:
        return ""equal""
    else:
        return ""not equal""","def function(a):
    b = a * 2
    c = a * 0.5
    if b == c:
        return ""equal""
    else:
        return ""not equal"""
"Write a regular expression to find all occurrences of a pattern in a string.String: ""The quick brown fox jumps over the lazy dog""
Pattern: ""fox""",/fox/g
"Compress a string using Huffman coding in Python.String: ""aaabbcc""","def get_freq_list(s): 
      
    # dictionaries are efficient for such a task 
    freq_list = {} 
  
    for char in s: 
        if char in freq_list.keys(): 
            freq_list[char] += 1
        else: 
            freq_list[char] = 1
  
    return freq_list 
  
def create_huffman_tree(freq_list): 
  
    # create a priority queue 
    # to pop two minimum element each time 
    priority_queue = [] 
    for key in freq_list.keys(): 
        node = Node(key, freq_list[key]) 
        heapq.heappush(priority_queue, node) 
  
    while len(priority_queue) > 1: 
        left_node = heapq.heappop(priority_queue) 
        right_node = heapq.heappop(priority_queue) 
  
        new_node = Node(None, 
              left_node.freq + right_node.freq, 
              left_node, 
              right_node) 
        heapq.heappush(priority_queue, new_node) 
  
    huffman_tree = heapq.heappop(priority_queue) 
    return huffman_tree 
    
def compress_string(huffman_tree, symbols): 
  
    # create a character-code dict
    code_dict = {} 
    _generate_codes(huffman_tree, '', code_dict) 
  
    # encode the string 
    encoded_str = '' 
    for char in symbols: 
        encoded_str += code_dict[char] 
  
    return encoded_str"
"Can you retrieve the item at index 3 from the following array?int[] arr = {11, 30, 45, 19, 20, 60};","int itemAtIndex3 = arr[3];
// itemAtIndex3 is equal to 19"
Suggest an algorithm to calculate the multiplication of two integers without using the operator '*'.,"One approach is to use a loop to iterate over and add the second number (multiplicand) to the first number (multiplier) the number of times specified by the multiplicand. This would result in the product of the two integers. For example, to calculate 3 × 4, we would start with 0, add 4 three times (resulting in 12), and the final result is 12.

// pseudocode
function multiply(int a, int b) 
{
  if (b == 0) {
    return 0;
  }
  int result = 0;
  for (int i = 0; i < b; i++) {
    result += a;
  }
  return result;
}"
"Develop a Python program to find the most frequent element in an array.[3, 5, 1, 2, 4, 5, 5, 4, 2]","def most_frequent_element(arr):
    count = 0
    for i in arr:
        current_count = arr.count(i)
        if current_count > count:
            count = current_count
            most_frequent_element = i
    return most_frequent_element

arr = [3, 5, 1, 2, 4, 5, 5, 4, 2]
print(most_frequent_element(arr)) # 5"
Suggest a way to delete an item from a python list.,"You can use the built-in method ""remove"" to delete an item from a python list. 

For example:

my_list = [1, 2, 3, 4, 5]
my_list.remove(4) # Remove item 4 from the list

The list will now be: [1, 2, 3, 5]"
Develop a Python program to generate a list with numbers in range 3 to 12.,"# Generate a list with numbers in range 3 to 12 
my_list = list(range(3, 13)) 
print(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
Code a recursive solution for counting the number of characters in a given string.example,"def count_chars(string):
    if len(string) == 0:
        return 0
    return 1 + count_chars(string[1:])"
"Write a function to filter a given list such that all any string starting with an 'S' is removed from the list.['Swallow', 'Duck', 'Finch', 'Parrot']","def filter_list(lst):
    return [elem for elem in lst if not elem.startswith('S')]

if __name__ == ""__main__"":
        print(filter_list(['Swallow', 'Duck', 'Finch', 'Parrot']))"
Compute the sum of all even numbers between 1 and 50.,"def sum_even(num):
    total = 0 
    for i in range(1, num+1):
        if i % 2 == 0:
            total += i
    return total

if __name__ == ""__main__"":
    print(sum_even(50))"
"Write an algorithm that takes in an array and determines if it is a valid BST.[9, 7, 3, 15, 20]","def is_valid_bst(arr):
    if len(arr) == 0:
        return True
    if len(arr) == 1:
        return True

    root_val = arr[0]
    left_subtree = [i for i in arr if i < root_val]
    right_subtree = [i for i in arr if i > root_val]

    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:
        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))
    else:
        return False

if __name__ == ""__main__"":
    print(is_valid_bst([9, 7, 3, 15, 20]))"
"Write a code to generate a list of all possible permutations of a given string.""ABC""","def get_permutations(string):
    if len(string) == 0:
        return []
    if len(string) == 1:
        return [string]
 
    permutations = []
    for i, char in enumerate(string):
        for permutation in get_permutations(string[:i] + string[i+1:]):
            permutations.append(char + permutation)
 
    return permutations

if __name__ == ""__main__"":
    print(get_permutations(""ABC""))"
"Code an algorithm to reverse an array of integers.[1, 3, 4, 6, 8]","def reverse_array(arr):
    left_index = 0
    right_index = len(arr) - 1

    while left_index < right_index:
        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]
        left_index += 1
        right_index -= 1
    return arr

if __name__ == ""__main__"":
    print(reverse_array([1, 3, 4, 6, 8]))"
"Describe the function of the following codewhile i < n:
    print('Hello World!')","The code snippet is a basic example of a while loop in python. The code will loop through the code that is enclosed in the block and execute it for i (initialized to 0) values between 0 and n-1. In this case, the code will print ""Hello World!"" n times."
Write a function that takes as input a string and returns a new string with all the vowels removed.,"def remove_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    new_string = """"
    for letter in string:
        if letter.lower() not in vowels:
            new_string += letter
    return new_string"
Write a function to find the area of a triangle using the formula `A = 0.5 * base * height`.,"def findArea(base, height):
    return 0.5 * base * height;"
Write a function to calculate the surface area of a sphere using the formula `4 * pi * r^2`.,"def calcSurfAreaSphere(radius):
    pi = 3.14159
    return 4 * pi * radius * radius;"
"Clean the input data using Python, so it is valid for a machine learning model.data = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}]","data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]"
"Convert a string to lowercase, using Python.my_string = ""Hello World""","my_string.lower() # Output: ""hello world"""
"Check if a string contains a substring, using Python.haystack = ""The quick brown fox""
needle = ""brown""",needle in haystack # Output: True
Write a pseudo-code to implement a simple sorting algorithm.,"// Pseudo code for simple sorting

// Define a sorting function 
function Sort(inputList):  
 
// Loop through the list 
  for i from 0 to length(inputList) - 1 do:
  
    currentMinIndex = i 
   
    // Search the lowest element 
    for j from i + 1 to length(inputList) do:
      
      // Update the smallest element 
      if inputList[j]<inputList[currentMinIndex] then 
        currentMinIndex = j
    
    // Swap the smallest element 
    if currentMinIndex != i do: 
      Swap(inputList[currentMinIndex],inputList[i]) 
 
// Return the sorted list 
  return inputList"
Classify this text as either positive or negativeI'm not sure if I'll ever be able to turn this situation around.,Negative
"Read this piece of code and describe it in brief.def add(x, y):
  return x + y","This is a simple Python function that takes two parameters, x and y, and returns the sum of them. The function can be called by passing the two inputs, and it will add them both, then return the result to the caller."
"Can you write a code to delete all the items whose key starts with ""item""?{
    ""item1"": ""apple"",
    ""item2"": ""banana"",
    ""item3"": ""cherry"",
    ""item4"": ""durian"",
    ""food1"": ""bacon""
}","let data = {
    ""item1"": ""apple"",
    ""item2"": ""banana"",
    ""item3"": ""cherry"",
    ""item4"": ""durian"",
    ""food1"": ""bacon""
};

// check each key for the preffix ""item""
for (let key in data) {
  if (key.startsWith('item')) {
    // if key starts with ""item"", delete that item from the object
    delete data[key];
  } 
}

// output object
console.log(data);"
Write a code to output whether a given number is even or odd24,"let num = 24;

if (num % 2 == 0) {
  console.log(num + "" is an even number"");
} else {
  console.log(num + "" is an odd number"");
}"
"Write a code to delete all the items whose value is lower than 5{
    ""item1"": 10,
    ""item2"": 7,
    ""item3"": 3,
    ""item4"": 4,
    ""food1"": 2
}","let data = {
    ""item1"": 10,
    ""item2"": 7,
    ""item3"": 3,
    ""item4"": 4,
    ""food1"": 2
};

// check each value
for (let key in data) {
  if (data[key] < 5) {
    // if value is lower than 5, delete that item from the object
    delete data[key];
  } 
}

// output object
console.log(data);"
"Write a method that takes 2 strings and determines if the first string contains the second string as a substring.String 1: bus ride
String 2: ride","public static boolean isSubstring(String str1, String str2) 
{
    if (str1.indexOf(str2) >= 0)
        return true;
    else
        return false;
}"
"Given a number N, write a function to check if N is prime.Number: 11","function isPrime(n)
{
    // alleven numbers are not prime
    if (n % 2 == 0) return false;

    // check odd divisors b/w 3 and sqrt(n)
    let limit = Math.sqrt(n);
    for (let i = 3; i <= limit; i=i+2)
    {
        // if evenly divisible then not prime
        if (n % i == 0) return false;
    }
	
    return true;
}"
Design a class with 3 data members in Python.,"class MyClass: 
  def __init__(self, member1, member2, member3): 
    self.member1 = member1
    self.member2 = member2
    self.member3 = member3"
Implement a function that takes a character and returns true if the character is an uppercase letter.,"function isUpperCase(ch) {
  if (ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90) {
    return true;
  }
  return false;
}"
Resolve the given linked list into a cycle using the Floyd's Cycle algorithm.,"// initialise slow and fast pointers 
let slow = head;
let fast = head;

while (fast !== null && fast.next !== null) {  
  fast = fast.next.next;  
  if(slow === fast) { 
    break;
  }  
  slow = slow.next;  
} 

// check if there is a cycle  
if (slow === null || fast === null || fast.next === null) { 
  return;
}  
// initialize slow pointer to head  
slow = head;  
while (slow !== fast) {  
  slow = slow.next;  
  fast = fast.next;  
} 

// assign the cycle end  
fast.next = slow;"
What is the highest peak in the world?,"The highest peak in the world is Mount Everest, which has a summit elevation of 8,848 meters (29,029 feet)."
Create a Python list of 10 numbers from 0 to 9.,"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
Reverse a string without using the reverse() function.,"def reverse_string(s): 
    str = """" 
    for i in s: 
        str = i + str
    return str"
What is the maximum number of threads simultaneously running in a single process?,"The maximum number of threads that can simultaneously run in a single process is limited by the resources of the system, such as the amount of available memory and the scheduling algorithm employed. Generally, a typical modern system will allow up to hundreds or even thousands of threads to run concurrently."
Create a regular expression to validate an e-mail address.,^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$
Code a method in Python that determines the number of words in a given string.,"def word_count(s):
  return len(s.split())"
"Sort a list of integers in ascending order using selection sort.[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3]","def selection_sort(list): 

    for i in range(len(list)): 
  
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j
        list[i], list[min_idx] = list[min_idx], list[i]

list = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]
selection_sort(list) 
print (""Sorted array:"", list)"
Generate a list containing the squares of numbers from 0 to 10.,"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
Write a Python script to generate a randomized list of 10 integers.,"import random

random_numbers = random.sample(range(0, 101), 10)
print(random_numbers)"
What is an API?,"API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database."
What is Machine Learning?,"Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics."
How does a for loop work?,"A for loop is a type of loop used in programming languages to execute a set of instruction multiple times. It consists of an initialization statement, condition expression, and a loop body. The code block of the loop is executed until the condition expression evaluates to false. The initialization statement is processed once, while the condition expression is evaluated each time before the loop body is executed. If the condition expression is true, the loop is executed; otherwise, the loop is terminated."
Create a variable in Python with the name “studentName” and assign it your name as a string.,"studentName = ""John"""
"Extract the type of the following object in Python.a = [1, 2, 3]",list
Identify the datatype of the following object.124,integer
"Write a function to count the occurence of an item in a given list.[1, 2, 3, 2, 4]","def count_occurrence(arr, x): 
  
    count = 0
  
    # traverse in the list 
    for ele in arr: 
  
        # compare with each element of the list 
        if (ele == x): 
            count = count + 1
  
    return count 
  
# Driver Code 
arr = [1, 2, 3, 2, 4]  
x = 2
print(""Occurrence of the number is: "", count_occurrence(arr, x))"
Describe the difference between a class and object in object oriented programming.,"A class is a blueprint for an object. It defines the data type of a particular object including the kinds of data it can store and the operations it can perform. An object is an instance of a class with actual values for the data elements it contains. It also has behavior, which is associated with the class functions that operates on the data elements of the object. Therefore, a class is a template used to create objects that share the same characteristics."
Write a Python program to print all integer numbers from a given range.from 1 to 10,"for i in range(1, 11):
    print(i)"
"Convert the following statement into valid Python syntax.x = ""string""",x = 'string'
"Write a Python script to sort a given list of numbers in ascending order.[3, 7, 1, 5, 4]","def sort_numbers_ascending(numbers): 
    # Sort the list 
    numbers.sort() 
    return numbers
  
# Driver code 
nums = [3, 7, 1, 5, 4] 

print(sort_numbers_ascending(nums))"
"Modify the following code so that it can accept two parameters.def print_message():
    print(""Hello there!"")","def print_message(message, name):
    print(f""{message}, {name}!"")"
"Create a Python dictionary with the following elementsName: John
Age: 25
City: New York","data = {
    ""Name"": ""John"",
    ""Age"": 25,
    ""City"": ""New York""
}"
"Count the occurrences of the word ""love"" in the given text.I love you so much, my love!",2
"Calculate the dot product of two vectors.[1, 2, 3], [2, 4, 6]",28
"Generate the output for the following code.var array = [2,4,6,8];
for(i=0;i<array.length;i++){
console.log(array[i] + 2);
}","4
6
8
10"
"Write a Python function that takes a list of floats as an argument and returns the sum of all elements.some_list = [1.5, 5.9, 3.7, 5.2]","def sum_list(some_list):
    result = 0
    for num in some_list:
        result += num
    return result

print(sum_list(some_list)) # Prints 15.3"
"Using R, calculate the average of a list of numbers given as an argument.list_num = c(4, 5, 9, 10, 2)","average_num <- function(list_num){
  mean(list_num)
}

# call the function 
average_num(list_num) # Prints 6"
"Write a code snippet using Python to pop an element from a list.some_list = [1, 2, 3]",some_list.pop() # pops 3
"Given an array of numbers, write a function to find the maximum, minimum and average values.numbers = [1, 15, 4, 5, 28, 35, 25]","def find_max_min_avg(numbers):
    max_val = max(numbers)
    min_val = min(numbers)
    avg_val = sum(numbers) / len(numbers)

    return max_val, min_val, avg_val"
What is the best data structure to store a dictionary?,"The best data structure to store a dictionary is a hash table. A hash table is an efficient data structure that uses key-value pairs to store data. It provides fast insertion, deletion and search operations, allowing it to be used to search for a specific key in a dictionary quickly and easily."
"Implement a function that takes two strings and checks whether they are anagrams.str1 = ""cinema""
str2 = ""iceman""","def anagram_checker(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        char_list1 = [0] * 26
        for char in str1:
            char_list1[ord(char)-97] += 1
        for char in str2:
            if char_list1[ord(char)-97] == 0:
                return False
            char_list1[ord(char)-97] -= 1
        return True"
"Given a list of student class enrollments, group students into classes that correspond with their major.student_list = [{""name"":""John"", ""major"":""Computer Science""}, {""name"":""Alice"", ""major"":""Business Administration""},
 {""name"":""Bob"", ""major"":""Computer Science""}, {""name"":""Claire"", ""major"":""Business Administration""}]","def group_students_by_major(student_list):
    # create a dictionary with two empty lists 
    student_groups = {""Computer Science"": [], ""Business Administration"": []}
    # iterate through the student list
    for student in student_list:
        # for each student in the list, add their name to the respective list
        student_groups[student[""major""]].append(student[""name""])
    # return the dictionary of groups
    return student_groups"
"Implement a function that calculates the greatest common divisor of two integers.n1 = 15
n2 = 10","def cal_gcd(n1, n2): 
   if n2 == 0: 
       return n1 
   else: 
       return cal_gcd(n2, n1 % n2) 
 
gcd = cal_gcd(n1, n2) 
print (""GCD of "" + str(n1) + "" and "" + str(n2) + "" is "" + str(gcd))"
"Implement a function that finds the index of an item in a list.lst = [1,2,3,4]
item = 3","def search(lst, item):
    for index, element in enumerate(lst):
        if element == item:
            return index
    return -1

search(lst, item)"
"Implement a function that takes a list and reverses its orderlst = [1,2,3,4]","def reverse(lst):
    return lst[::-1]

reverse(lst)"
Print the decimal equivalent of a given binary number.11100011,"def binToDecimal(num): 
    # Initializing base  
    # value to 1, i.e 2^0 
    base = 1; 
      
    dec_val = 0; 
      
    # Extracting digits of  
    # binary number from   
    # the right most side 
    # and keeping  
    # incrementing the base 
    # by multiply of 2 
    temp = num 
    while(temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
          
        dec_val += last_digit * base; 
        base = base * 2; 
      
    return dec_val
num = 11100011
print('Decimal Equivalent of',num,'is',binToDecimal(num))"
"Program a function that takes a list of numbers as an argument, then returns a dictionary which contains the number in the list as a key and its square root as the value.[4, 9, 16, 25]","{4: 2, 9: 3, 16: 4, 25: 5}"
Write a script for displaying the current datetime in RFC2822 format.,"var date = new Date();
var RFC2822currentDateTime = date.toUTCString();
console.log(RFC2822currentDateTime);"
"Write a function that takes a string as an argument and removes all vowels (a, e, i, o, u) from it.hello world",hll wrld
Classify the given sentence according to the Syntactic parse tree and label each part of the sentence.I bought a car yesterday.,[ NP: I] [ VP: bought] [ NP: a car] [ AdvP: yesterday]
"Debug the given code to output the correct result.def temperature_converter(temperature):
    kelvin = temperature + 273.15
    return celsius","def temperature_converter(temperature):
    celsius = temperature
    kelvin = temperature + 273.15
    return kelvin"
"Using an OOP approach, create an Animal class with properties of name and a virtual property age that gets calculated based on the creation date.","class Animal {
  constructor(name) {
    this.name = name;
    this.age = Date.now() - this.creationDate;
  }
}"
Program a function to convert a given string with no spaces to a string with underscores (_) in all spaces between words.HelloWorld,Hello_World
"Implement a sorting algorithm for a given array in Python.[3, 2, 1, 4]","sorted_array = [1, 2, 3, 4]

def SortArray(array):
    for i in range(len(array)):
        for j in range(len(array) - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
    return array

sorted_array = SortArray(array)"
"Program a function to add three integers and return the sum.2, 3 and 6","def addThree(a, b, c):
    return a + b + c

sum = addThree(2, 3, 6)"
What is the complexity of the algorithm to reverse a given string?,The complexity of the algorithm to reverse a given string is O(n).
"Create a program for calculating the hypotenuse of a right-angle triangle using its two sides.a = 5, b = 6","def calculateHypotenuse(a, b):
    return (a**2 + b**2)**0.5

hypotenuse = calculateHypotenuse(5, 6)"
Name the main features of a class-based programming language.,"The main features of a class-based programming language are encapsulation, inheritance, polymorphism and abstract classes. Encapsulation refers to the way code is organized and data is organized into objects and the methods used to access and manipulate the data. Inheritance is the ability for classes to inherit some of the properties of other classes. Polymorphism allows for objects of different types to act the same way in certain scenarios. Abstract classes provide an outline for other classes to follow, without having to directly use or implement all of the same functions as the parent class."
"Generate a Python code to remove the given substring from the string.String: ""The quick brown fox jumped over the lazy dog""
Substring: ""brown""","string = ""The quick brown fox jumped over the lazy dog""
substring = ""brown""
new_string = string.replace(substring, """")
print(new_string)
# Output: The quick  fox jumped over the lazy dog"
Detect the sentiment of the given text.The movie was a total disaster.,The sentiment of the text is negative.
"Construct a dictionary from the given list.[(1, 'a'), (2, 'b'), (3, 'c')]","my_dictionary = {1: 'a', 2: 'b', 3: 'c'}"
"Access the data present in the given dictionary.dictionary = {
  'name': 'John',
  'age': 25
}","name = dictionary['name'] 
age = dictionary['age']"
"Create a function to calculate the sum of all the values in the given array.[2, 4, 6, 8]","def sum_of_array(arr):
  total = 0
  for num in arr:
    total += num
  return total

# Output:"
"Calculate the LCM (Least Common Multiple) of two integers.int x = 15;
int y = 10;","def lcm(x, y): 
    if x > y:
        greater = x 
    else:
        greater = y 
    while(True): 
        if((greater % x == 0) and (greater % y == 0)): 
            lcm = greater 
            break
        greater += 1 
    return lcm 
  
x = 15
y = 10
print(""The L.C.M. is"", lcm(x, y))"
Generate a Python dictionary containing the squares of the numbers from 1 to n.int n = 10;,"def generateDict(n):
    dict = {}
    for i in range(1, n+1):
        dict[i] = i**2
    return dict

n = 10
print(generateDict(n))"
Create a regular expression for matching email addresses.,"""^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"""
Generate the code to find the number of days between two dates.,"def daysBetween(date1, date2): 
    startDate = pd.to_datetime(date1) 
    endDate = pd.to_datetime(date2)
    delta = endDate - startDate
    return delta.days"
"Develop a script to remove duplicate elements from an array.arr = [1, 2, 3, 4, 4, 1, 5]","def remove_duplicate(arr):
    newArr = []
    for i in arr:
        if i not in newArr:
            newArr.append(i)
    return newArr"
"Develop a code in Python to update all the elements of an array by a numbera = [1, 4, 5, 7, 9]","def update(a):
    n = 2
    a[:] = [x + n for x in a]
    return a"
Create a formula to calculate the surface area of a triangular prism,"Surface Area = a*h + b*h + c*h + d*h, 
where a,b and c are three sides of the triangular face and h is the height of the prism"
Complete the following line of code to successfully initiate a pandas dataframe without specifying column names or data.,"df = pd.DataFrame(data=None, columns=None)"
"Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.list_of_strings = [""Foo"", ""Bar"", ""Baz""]
indexes = [0,2]
alphabet_string = ""abc123""","def select_list_items(list_of_strings, indexes, alphabet_string):
    new_list = []
    for index in indexes: 
        new_list.append(list_of_strings[alphabet_string.index(str(index))])
    return new_list

print(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: [""Foo"", ""Baz""]"
"Calculate the mean of the following list of numbers using a for loop.numbers = [3, 5, 8, 11, 15]","total = 0
for number in numbers:
    total += number
mean = total / len(numbers)
print(mean) # Output: 8.4"
Create an array of 5 integers.,"array = [1, 2, 3, 4, 5]"
Write a function to check if all the items in a list are of the same data type.,"def check_type(items):
  # get the type of first item
  item_type = type(items[0])
  
  # check if all items are of the same type
  for item in items[1:]:
    if item_type != type(item):
      return False
  return True

# Test
print(check_type([1, 2, 3, 4])) # Output: True"
Find the sum of all the numbers from 55 to 79.,"total = 0
for i in range(55, 80):
    total += i
print(total) # Output: 2370"
"Print the following dictionary in a readable format.person = {
  ""name"": ""John"",
  ""age"": 30,
  ""hobbies"": [""reading"", ""biking"", ""yoga""]
}","print(""Name:"", person[""name""])
print(""Age:"", person[""age""])
print(""Hobbies:"")
for hobby in person[""hobbies""]:
  print(""-"", hobby)"
Give an example of a valid URL.,https://www.example.com
Create a function to calculate the Pythagorean theorem given two legs,"def calculate_pythagorean_theorem(a, b):
    c = math.sqrt(a**2 + b**2)
    return c"
Categorize the following sentence into either positive or negativeThis game is way too difficult,negative
"Create a program that reads a string input and replaces all instances of a word with a given replacementOriginal string = ""Merry Christmas everyone, what a lovely day!"" Replacement word = ""Happy""","def replace_word(originalString, replacementWord): 
    return originalString.replace('Christmas', replacementWord)
# Output: ""Merry Happy everyone, what a lovely day!"""
Generate a program in Python that takes two parameters and prints the result of their addition.,"def add_two_numbers(a, b):
    return a + b"
Create a program to detect if an array contains duplicate values,"def is_duplicate_array(arr): 
    return len(arr) != len(set(arr))"
Create a program to validate a string for a specific length,"def is_valid_string(string, length):
    return len(string) == length"
"Generate a program that merges two sorted lists into one sorted listlist1 = [1, 6, 10] list2 = [3, 5, 7]","def merge_two_lists(list1, list2): 
    list3 = list1 + list2 
    list3.sort() 
    return list3"
"Create a program that takes a string and prints the number of words the string containsstring = ""This is a sentence.""","def count_words(string):
    string = string.split("" "")
    return len(string)"
Create a program to print all prime numbers from 1 to a given number.,"def print_prime_numbers(n): 
    for num in range(2,n+1): 
        if is_prime(num): 
            print(num)"
Write a Haskell function that takes a list and returns its first element.,"head :: [a] -> a
head (x:_) = x"
Suggest a way to finish the following instruction.Create a Java program to,Create a Java program to calculate the sum of all the elements in an array.
"Combine the two functions into a single function.def add(x, y):
    return x + y 

def subtract(x, y):
    return x - y","def calculate(x, y, op):
    if op=='+':
        return x + y 
    if op =='-':
        return x - y"
"Write a function to find the length of the longest word in a sentence.sentence = ""Today is a beautiful day""","def find_longest_word(sentence):
    words = sentence.split()
    max_len = 0
    longest_word = """"

    for word in words:
        if (len(word) > max_len):
            max_len = len(word)
            longest_word = word
    
    return max_len, longest_word

if __name__ =='__main__':
    sentence = ""Today is a beautiful day""
    max_len, longest_word = find_longest_word(sentence)
    print(""The longest word is '{}' with a length of {}"".format(longest_word, max_len))"
Create a function which will take two strings as parameters and will return a concatenated string.,"def concat_strings(str1, str2):
    """"""Function to concatenate two strings""""""
    return str1 + str2

if __name__ == '__main__':
    result = concat_strings('Hello ', 'World!')
    print(result) #Hello World!"
"Write a code in which the values in the dictionaries will be swapped.dic = {'x': 10, 'y': 20}","def swap_dictionary_values(dic):
    """"""Function to swap the values in the dictionaries""""""
    dic['x'], dic['y'] = dic['y'], dic['x']
    return dic

if __name__ == '__main__':
    dic = {'x': 10, 'y': 20}
    swapped_dic = swap_dictionary_values(dic)
    print(swapped_dic) # {'x': 20, 'y': 10}"
"Edit the code to allow users to enter their name and age and print a greeting with their name and age.name = ''
age = 0","name = input(""Enter your name: "")
age = int(input(""Enter your age: ""))

print(""Hello "" + name + ""! You are "" + str(age) + "" years old."")"
"Create a for loop to print all the elements of the list.my_list = [1,2,3,4,5]","my_list = [1,2,3,4,5]
for elem in my_list:
    print(elem)"
"Create a class which will take 3 parameters, name, size, and price.","class Item:
    """"""Class which will take three parameters, name, size and price""""""
    def __init__(self, name, size, price):
        self.name = name
        self.size = size
        self.price = price"
"Sort a given list in increasing order.my_list = [3, 4, 2, 6]","def sort_list(my_list):
    """"""Function to sort the list in increasing order""""""
    for i in range(len(my_list)):
        min_idx = i
        for j in range(i+1, len(my_list)):
            if my_list[min_idx] > my_list[j]:
                min_idx = j
        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]
    return my_list
    
if __name__ == '__main__':
    my_list = [3, 4, 2, 6]
    sorted_list = sort_list(my_list)
    print(sorted_list)  # [2, 3, 4, 6]"
Calculate the area of a circle whose radius is 3.,28.274333882308138
"Write a code snippet to print out each item in a given array.[7, 4, 10, 3]","for(let item of arr) {
  console.log(item);
}"
"Write a function in Python to remove a given element from a list.list = ['A', 'B', 'C', 'D']
element = 'B'","def remove_element(list, element): 
  if element in list: 
    list.remove(element)
  return list

print(remove_element(list, element))"
Convert the given temperature in Celsius to Fahrenheit.Temperature in Celsius: 28,82.4
Write a regular expression that finds all the words in a given sentence that start with a lowercase letter.Sentence: Hello World.,\b[a-z]\w+\b
Create a class called 'Student' with attributes name and grade.,"class Student:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade"
"Change the following code snippet to convert a given string in lower case.string = ""HELLO WORLD""",string = string.lower()
Create a conditional statement to print 'hello world' if the variable 'x' equals 5.,"if x == 5: 
    print(""Hello World"")"
Create a dictionary with keys 'a' and 'b' and values 1 and 2 respectively.,"dict = {'a': 1, 'b': 2}"
"Check if each item in the following list is a string.[3, ""apple"", 5]","for item in [3, ""apple"", 5]:
    if isinstance(item,str):
        print(item, ""is a string"")
    else:
        print(item, ""is not a string"")"
"Find the index of the element 'c' in the following list.[""a"", ""b"", ""c""]","lst = [""a"", ""b"", ""c""]
index = lst.index(""c"")"
Print a list of numbers from 1 to 10 except for 5 and 6.,"for num in range(1, 11):
    if num != 5 and num != 6:
        print(num)"
Create a dictionary of the declared states of India.,"states_dict = { 
    'Maharashtra': 'Maharashtra', 
    'Tamil Nadu': 'Tamil Nadu', 
    'Karnataka': 'Karnataka', 
    'Uttar Pradesh': 'Uttar Pradesh', 
    'Rajasthan': 'Rajasthan', 
    'Gujarat': 'Gujarat', 
    'Madhya Pradesh': 'Madhya Pradesh', 
    'Bihar': 'Bihar', 
    'West Bengal': 'West Bengal', 
    'Andhra Pradesh': 'Andhra Pradesh', 
    'Haryana': 'Haryana', 
    'Assam': 'Assam', 
    'Jammu and Kashmir': 'Jammu and Kashmir', 
    'Kerala': 'Kerala', 
    'Odisha': 'Odisha', 
    'Telangana': 'Telangana', 
    'Punjab': 'Punjab', 
    'Goa': 'Goa', 
    'Tripura': 'Tripura', 
    'Jharkhand': 'Jharkhand', 
    'Chandigarh': 'Chandigarh', 
    'Himachal Pradesh': 'Himachal Pradesh', 
    'Uttarakhand': 'Uttarakhand', 
    'Ladakh': 'Ladakh'
}"
Describe what a quicksort algorithm does?,"Quicksort is a widely used sorting algorithm that employs the divide-and-conquer approach. It works by partitioning a given array into two subarrays, the left consisting of smaller elements and the right consisting of larger elements. The sorting algorithm then recursively sorts each subarray until the array is completely sorted. Quicksort has a time complexity of O(n log n) in the best case, making it one of the most efficient sorting algorithms."
What is the time complexity of a binary search tree?,"The time complexity of a binary search tree is O(log n), where n is the number of elements in the tree. This is because in a binary search tree, each node can have up to two children, so the depth of the tree is bounded by the logarithm of n. This means that the time required to search the tree is bounded by the logarithm of n."
Write a code to convert a string to a list of characters.,"def str_to_list(s):
    return list(s)"
Create a function to calculate the Fibonacci series from 0 to n.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
What are type hints in Python?,"Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better."
Create a method in Python to round a number to 4 decimal points.,"def round_to_4_dp(num):
    return round(num, 4)"
Create a Python class that has an initialization method which takes in two parameters and sets them as class variables.,"class ExampleClass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2"
Encode the following string in Base64.This is an example string.,VGhpcyBpcyBhbiBleGFtcGxlIHN0cmluZy4=
"Create a Python function to check if a given array is sorted in ascending order.arr = [1, 3, 5, 7, 6]","def is_sorted_ascending(arr):
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            return False
    return True"
"Given 2 string variables, write a function to find out if the 2 strings are anagrams.str1 = 'schoolmaster', str2 = 'the classroom'","def are_anagrams(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        counts = dict()
        for char in str1:
            counts[char] = counts.get(char, 0) + 1
        for char in str2:
            if char not in counts or counts[char] == 0:
                return False
            counts[char] -= 1
    return True"
"Write a function to generate the Cartesian product of 2 sets in Python.A = {1, 2}; B = {'a', 'b'}","from itertools import product
 
def get_cartesian_product(A, B):
  return set(product(A, B))
 
A = {1, 2}; B = {'a', 'b'}
print(get_cartesian_product(A,B))"
"Given a number n, write a function that finds the sum of the first n odd numbers.","def odd_sum(n):
    return sum(list(range(1, 2*n, 2)))"
"Given a string, edit it so that every first letter of each word is capitalized.string = ""this is a test string""","def capitalize_string(string):
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

string = ""this is a test string"" 
capitalize_string(string)"
"Using Python, classify the following sentence ""The cat is a mammal"" into either Animal or Plant.","def classify_sentence(sentence):
  if ""animal"" in sentence.lower():
    return ""Animal""
  elif ""plant"" in sentence.lower():
    return ""Plant""

sentence = ""The cat is a mammal""
print(classify_sentence(sentence))"
Create a looping structure to display numbers from 1-10.,"""""""
Create a looping structure to display numbers from 1-10
""""""

# loop from 1 to 10
for num in range(1, 11):
    print(num)"
"Write a code to search a word in a given string and get the index position.word = 'Hello'

string = 'Hello World'","""""""
Write a code to search a word in a given string and get the index position
""""""

def search_word(word, string):
    return string.find(word)

word = 'Hello'
string = 'Hello World'

print(search_word(word, string)) # print 0"
"Given a string, remove all spaces from it.string = 'This is a sample string'","""""""
Given a string, remove all spaces from it
""""""

def remove_spaces(string):
    result = ''
    for c in string:
        if c != ' ':
            result += c
    return result

string = 'This is a sample string'
print(remove_spaces(string)) # print Thisisasamplestring"
Rearrange the given string in alphabetical order.string = 'zxcvbnmlkjhgfdsaqwertyuiop',"""""""
Rearrange the given string in alphabetical order
""""""

def alphabetical_order(string):
    result = ''.join(sorted(string))
    return result

string = 'zxcvbnmlkjhgfdsaqwertyuiop'
print(alphabetical_order(string)) # print abcdefghijklmnopqrstuvwxyz"
"Create a function to compute the area of a triangle when the length of its three sides are known.a = 6, b = 8, c = 10","""""""
Create a function to compute the area of a triangle when the length of its three sides are known
""""""

def TriangleArea(a, b, c):
    s = (a + b + c) / 2
    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
    return area

a, b, c = 6, 8, 10

print(TriangleArea(a, b, c)) # print 24.0"
"Write a function to convert a list of characters into a string.characters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']","""""""
Write a function to convert a list of characters into a string
""""""

def list_to_string(characters):
    result = ''.join(characters)
    return result

characters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']

print(list_to_string(characters)) # print Hello World"
"Print the third item of the list.my_list = [""apple"",""banana"",""cherry""]",print(my_list[2]) # cherry
"Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.strings = [""abc"",""bcd"",""cde"",""def"",""efg""]
pattern = ""?ef""","matched_strings = []
for string in strings:
    if string[1:3] == pattern[1:3]:
        matched_strings.append(string)
print(matched_strings) # [""bcd"", ""def""]"
"Outpus true if the given number is a power of two, False otherwise.n = 16",print(n > 0 and (n & (n - 1)) == 0) # True
"Design an algorithm to find the largest number in a given array.arr = [2,4,6,9,3,7]","def max_in_array(arr):
    max = 0
    for i in range(len(arr)):
        if arr[i] > max :
            max = arr[i]
    return max

maxValue = max_in_array(arr)
print(maxValue) # 9"
"Change the following directory path to absolute path.path = ""../images/example.png""","import os

path = os.path.abspath(""../images/example.png"")
print(path) # \user\path\to\images\example.png"
"Fix the following syntax error.myList = [1, 2, 3","myList = [1, 2, 3]"
"Using Python, write a function to multiply two matrices.","def multiply_matrices(matrixA, matrixB): 
    """"""
    Matrix multiplication
    :param matrixA: 2D array
    :param matrixB: 2D array
    :return: product of matrixA and matrixB
    """"""
    
    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB
    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]

    for i in range(len(matrixA)): 
        for j in range(len(matrixB[0])): 
            for k in range(len(matrixB)): 
                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] 
  
    return result_matrix"
"Create a method to sort the data by the public_id in descending order?data = [{""name"": ""John Smith"", ""public_id"": 4}, 
        {""name"": ""Michael Jordan"", ""public_id"": 3}, 
        {""name"": ""LeBron James"", ""public_id"": 5}]","def sort_by_public_id(data):
    return sorted(data, key=lambda x: x['public_id'], reverse=True)"
"Given an array of strings and an integer n, implement a function to return the values with length greater than n as a new array.data = [""abc"", ""abcde"", ""abcdef"", ""abcdefgh""]
n = 3","def get_values_greater_than_n(data, n):
  return [val for val in data if len(val) > n]"
"Change the following loop so that it prints out the numbers from 10 to 1 in descending order.for i in range(1, 11):
    print(i)","for i in range(10, 0, -1):
    print(i)"
"Write an algorithm to count the number of times the letter 'e' appears in a given string.my_string = ""Hello World""","def count_letter_e(my_string):
    count = 0
    for char in my_string:
        if char == 'e':
            count += 1
    return count"
Describe what is recursion in programming and provide a simple example.,"Recursion is a programming concept in which a function calls itself until a certain condition is met. It can be used to solve problems that lend themselves to divide and conquer, such as computing the Nth element of a Fibonacci sequence. For example, the code to compute the 5th element of the Fibonacci sequence can be written using recursion in Python as follows:

def fibonacci(n): 
    if n <= 1: 
        return n 
    else: 
        return(fibonacci(n-1) + fibonacci(n-2)) 
  
print(fibonacci(5))  

The output of this code is 5."
"Rewrite the following code to use for-else statement.arr = [1, 2, 3, 4]

i = 0
while True:
    if i >= len(arr):
        break
    print(arr[i])
    i += 1","arr = [1, 2, 3, 4]

for i in arr:
    print(i)
else:
    break"
"Given a string, rearrange the characters in the string such that no two consecutive characters are the same.my_str = ""ababab""","def rearrange_string(my_str):
    arr = list(my_str)
    i, j = 0, 1
    while i < len(arr):
        if i+1 < len(arr) and arr[i] == arr[i+1]:
            while j < len(arr):
                if arr[j] != arr[i]:
                    arr[i+1], arr[j] = arr[j], arr[i+1]
                    break
                j += 1
        i += 1
    return """".join(arr)"
Create a program that can output the current date and time in a user-friendly format.,"from datetime import datetime

def get_date_and_time():
    current_date_and_time = datetime.now()
    friendly_format = current_date_and_time.strftime('%c')
    return friendly_format

if __name__ == ""__main__"":
    print(get_date_and_time())"
"Design a function to sum up an array of numbers.Sum up [2, 3, 5, 10, 16].","def calculate_sum(arr):
    total = 0
    for num in arr:
        total += num
    return total

if __name__ == ""__main__"":
    arr = [2, 3, 5, 10, 16]
    print(calculate_sum(arr))"
Generate a character frequency histogram of a sentence.Distribution of characters in “The quick brown fox jumps over the lazy dog.”,"def get_char_freq_histogram(string):
    char_freq_dict = {}
    for char in string:
        if char in char_freq_dict:
            char_freq_dict[char] += 1
        else:
            char_freq_dict[char] = 1
    return char_freq_dict

if __name__ == ""__main__"":
    sentence = ""The quick brown fox jumps over the lazy dog.""
    char_freq_histogram = get_char_freq_histogram(sentence)
    print(char_freq_histogram)"
Create a program that can convert a given number (integer) to binary.Convert 33 to binary numerals.,"def convert_to_binary(n):
    binary_num = ''
    while n > 0:
        binary_num = str(n%2) + binary_num
        n = n//2
    return binary_num
    
if __name__ == ""__main__"":
    print(convert_to_binary(33))"
"Rewrite existing code to make it more efficient.Improve the following code.
```
for i in range(10):
    print(i)
```","def print_nums(n):
    for i in range(n):
        print(i)

if __name__ == ""__main__"":
    print_nums(10)"
Output a string that is the reversed version of a given sentence.Reverse “Where the wild things are”,"def reverse_string(sentence):
    return ' '.join(sentence.split(' ')[::-1])

if __name__ == ""__main__"":
    sentence = ""Where the wild things are""
    print(reverse_string(sentence))"
Design a program to find out how many times a pattern occurs in a given string.Find the number of times “quick” occurs in “The quick brown fox jumps over the lazy dog.”,"def count_pattern(sentence, pattern):
    count = 0
    words = sentence.split(' ')
    for word in words:
        if word == pattern:
            count += 1
    return count

if __name__ == ""__main__"":
    sentence = ""The quick brown fox jumps over the lazy dog.""
    pattern = ""quick""
    print(count_pattern(sentence, pattern))"
"Create a program that can identify the next number in a sequence.Find the next number in 3, 7, 11, 15.","def get_next_number(arr):
    return arr[-1] + (arr[-1] - arr[-2])

if __name__ == ""__main__"":
    arr = [3, 7, 11, 15]
    print(get_next_number(arr))"
Create a program that can output the permutation of a given string.Find the permutation of “ABC”,"def permutation(str):
    if len(str) == 0:
        return []
    if len(str) == 1:
        return [str]
    lst = [] 
    for i in range(len(str)):
       m = str[i] 
       remLst = permutation(str[:i] + str[i+1:])
       for p in remLst:
           lst.append([m] + p)
    return lst

if __name__ == ""__main__"":
    str = ""ABC""
    print(permutation(str))"
Write a machine learning model to classify whether a given email is spam or not using logistic regression.,"from sklearn.linear_model import LogisticRegression
model = LogisticRegression(solver='liblinear')
model.fit(X_train, y_train)
y_pred = model.predict(X_test)"
"Create an array of 10 numbers between 0 and 20, both included.","[5, 10, 15, 20, 0, 3, 8, 1, 9, 11]"
"Build a decision tree model using Scikit-Learn to predict the type of iris plant based on petal length, petal width, sepal length and sepal width.","from sklearn import tree
model = tree.DecisionTreeClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)"
"Find all top-level domains for the TLD "".org"".","aero.org, asia.org, biz.org, com.org, coop.org, info.org, jobs.org, mobi.org, museum.org, name.org, net.org, pro.org, tel.org, travel.org and org.org."
Generate five random numbers between 0 and 10 in Python.,"import random
random.sample(range(0, 10), 5)"
How can you convert a given list of integers into a comma-separated string in Python?,"We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:

listOfIntegers = [1, 2, 3, 4] 
s = ','.join(str(e) for e in listOfIntegers)
print(s)"
Design a function to convert a ternary tree to a doubly linked list.,"def convertTernaryTreeToDoublyLinkedList(root):
    # Edge case
    if (root == None):
        return 
    
    # Create two empty lists to hold left and right list of root
    left = []
    right = []
    # Add root to left list that will hold left subtree
    left.append(root.val)
    # Store the value of the root for later use
    val = root.val
    # Recur to get the left and right lists of the left
    # and right subtree
    getLeft(root.left, left)
    getRight(root.right, right)

    # To see the linked list join the left and right lists
    left.extend(right)

    # Get the length of the list
    length = len(left)

    # Join the left and right list with the middle element
    # of the root.
    for i in range(length):
        if i<length-1:
            left[i].next = left[i+1]
        else:
            left[i].next = None
        if i>0:
            left[i].prev = left[i-1]
        else:
            left[i].prev = None
    
    # Return the list
    return left

def getLeft(root, left):
    # Iterative way to traverse and get all left subtree elements
    if root:
        left.append(root) 
        root = root.left
        getLeft(root, left)

def getRight(root, right):
    # Iterative way to traverse and get all right subtree elements
    if root:
        right.append(root)
        root = root.right
        getRight(root, right)"
How can one improve the performance of a machine learning algorithm?,"There are several ways to improve the performance of a machine learning algorithm, such as:

1. Increasing the quality/quantity of training data: Using more data can increase the accuracy of the model and better handle outliers and edge cases. 

2. Tuning the model hyperparameters: Adjusting parameters like learning rate, regularization strength can often improve the performance of the algorithm.

3. Feature engineering: You can add or modify features which can not only improve the performance of the model but also allow it to capture different types of relationships among data points.

4. Using better algorithms: Experimenting with different algorithms and techniques can often improve the performance of the model."
Implement a function to traverse a binary tree in pre-order.,"def traverse_preorder(root):
    if (root == None):
        return
    else:
        print(root.val)
        traverse_preorder(root.left)
        traverse_preorder(root.right)"
Describe how reinforcement learning works.,"Reinforcement learning is a type of machine learning algorithm that allows an agent to learn from its environment through trial and error. The agent takes an action within a given environment and receives a reward or punishment based on its performance. The agent uses this feedback to adjust its actions over time in order to maximize its future reward. Reinforcement learning works by interacting with the environment in a loop, taking actions, observing the results, updating the agent's estimates of its values and adjusting its behavior."
"Implement a function to sort an array in ascending order.Array: [7, 19, 5, 4, 16]","def sortArray(arr):
    for i in range(len(arr)):
        for j in range(1, len(arr)):
            if arr[j] < arr[j-1]:
                arr[j], arr[j-1] = arr[j-1], arr[j]
    return arr

sortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]"
Name the parameter of a Python function?,The parameter of a Python function is the variable name listed after the function name in the function definition.
What is data serialization?,"Data serialization is the process of transforming data structures into a format that can be stored, transmitted, or parsed. It is commonly used to send and receive data between different types of systems. The application programming interface of a system can determine which data is serialized and deserialized."
"Create a class in Python with two methods, one of which accepts an argument.","class MyClass:
    def __init__(self):
        pass

    def my_method(self, arg):
        # method code
        pass"
What is the purpose of a loop in a programming language?,"The purpose of a loop in a programming language is to repeatedly execute a set of instructions until a predetermined condition is met. Loops are used to iterate over a set of elements or a certain number of steps, and are often used to traverse data structures such as arrays and linked lists."
How do you convert a string to an integer in Python?,"In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary)."
Generate a program to get the min and max values from a list in one line.,"def get_min_max(lst):
    return min(lst), max(lst)"
What is the difference between a list and a tuple in Python?,"The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements."
What is the advantage of using dictionary comprehension in Python?,"The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries."
"Create a for loop to iterate over the following list and print each element.list = [1, 2, 3, 4, 5]","for x in list:
    print(x)"
Construct a Tensorflow model to classify the following inputs.Images with labels “cat” and “dog”.,"model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])"
"Create a loop to print the following array values.arr = [3, 6, 9, 12]","for x in arr:
    print(x)"
Write a Python script that prints the current date and time.,"from datetime import datetime

now = datetime.now()
print(now.strftime(""%d-%m-%Y %H:%M:%S""))"
Write a code snippet to implement a binary search algorithm.,"def binary_search(arr, target): 
	start = 0
	end = len(arr) - 1

	while start <= end: 
		mid = start + (end-start)//2
		if arr[mid] == target: 
			return mid 
		elif arr[mid] < target: 
			start = mid + 1
		else: 
			end = mid - 1
          
	return -1"
Translate the following polar equation into a Cartesian equation.r = 2 sin(θ),"Given the equation r=2sin(θ), 
the Cartesian equation can be determined to be

x=2sin(θ)cos(θ) and y= 2sin²(θ)."
"Create an algorithm that finds the greatest common divisor of two integers.x = 20 
y = 12","def find_gcd(x,y):
   
    # If x is greater than y
    # Swapping the x and y
    if x > y:
        tmp = x
        x = y
        y = tmp

    while y > 0:
        tmp = y
        y = x % y
        x = tmp
    return x

gcd = find_gcd(20,12)
print(""The greatest common divisor of 20 and 12 is: "", gcd)"
"Create an algorithm to find all pairs of elements in a given array that sum up to a given target.array = [1, 6, 4, 5, 3, 2]
target = 5","def findSumPairs(arr, target): 

    # X stores elements and its 
    # frequencies in a dictionary 
    X = dict() 
    n = len(arr) 
    output = [] 
  
    # Store counts of all elements 
    # of array in a hash 
    for i in range(0, n): 
        if arr[i] in X.keys(): 
            X[arr[i]] += 1
        else: 
            X[arr[i]] = 1

    # Loop over each element 
    for i in range(0, n): 
        # finding the compliment 
        k = target - arr[i] 

        # If compliment exists in X 
        # and it is not the same element 
        if (k in X.keys() and X[k] != 0
            and k != arr[i]): 
            output.append([arr[i], k]) 
            X[k] = X[k] - 1
  
    # return content of output 
    return output 

# calling the findSumPairs function 
print(findSumPairs(array, target)) 

# Output: [[1, 4], [2, 3]]"
Create a HTTP GET request using Python.,"import requests

url = 'https://www.example.com'
response = requests.get(url)

print(response.text)"
Write a script that prints out the first 100 prime numbers.,"# Python program to print first n prime numbers
  
num = 100
# prime numbers are greater than 1
if num > 1:
   # check for factors
   for i in range(2,num):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           break
   else:
       print(num,""is a prime number"")
  
else:
   print(num,""is not a prime number"")

# Program to print the first N prime numbers

# Taking input from the user
N = 100

# Initializing a list to store prime numbers
prime_list = []

# Initializing a variable to store each prime number
num = 2

# Iterating over the range of numbers
while len(prime_list) < N:
    # Initializing a flag to determine if the number is prime or not
    flag = True
    # Iterating over the already identified prime numbers and dividing the number by each
    for prime_num in prime_list:
        # Checking the remainder
        if num % prime_num == 0:
            flag = False
            break
    # Checking if the number is prime
    if flag:
        prime_list.append(num)
    # Incrementing the number
    num += 1

# Printing the first N prime numbers
print(""First"", N , ""prime numbers are:"")
for prime_num in prime_list:
    print(prime_num, end="" "")"
"Create a Python dictionary that contains the following key-value pairs: ""a"":1, ""b"":2, ""c"": 3.","d = {
  ""a"": 1,
  ""b"": 2,
  ""c"": 3
}"
"Using the array, sort it using insertion sort.arr = [4, 2, 6, 7, 1]","def insertionSort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >= 0 and key < arr[j] : 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = key 
  
arr = [4, 2, 6, 7, 1] 
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Develop an algorithm for shuffling an array of numbers.,"def shuffleArray(arr):
    for i in range(len(arr) - 1, 0, -1): 
        j = random.randint(0, i + 1)  
        arr[i], arr[j] = arr[j], arr[i]
    return arr"
"Remove the element ""red"" from the following array.arr = ['blue', 'green', 'red', 'yellow']","arr = ['blue', 'green', 'yellow']"
Create an algorithm to solve the Tower of Hanoi problem.,"def TowerOfHanoi(n , from_rod, to_rod, aux_rod): 
    if n == 1: 
        print (""Move disk 1 from rod"",from_rod,""to rod"",to_rod) 
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) 
    print (""Move disk"",n,""from rod"",from_rod,""to rod"",to_rod) 
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)"
"Modify the following code so that the output is 4, 4.import math 
def f(x): 
    return math.sqrt(x) * math.sqrt(x+1)
  
print(f(3))","import math 
def f(x): 
    return math.pow(x, 2)
  
print(f(4))"
"Create a function to sum all the numbers in an array.arr = [1, 2, 3, 4]","def sumList(arr):
    total = 0
    for num in arr:
        total += num
    return total

print(sumList(arr))"
"Modify the code to return the most repeated character.def max_repeated_char(input_string):
    char_count = dict()
    max_count = 0
    max_char = None
    for char in input_string:
        if char not in char_count:
            char_count[char] = 1
        else:
            char_count[char] += 1
            
    print(char_count)","def max_repeated_char(input_string):
    char_count = dict()
    max_count = 0
    max_char = None
    for char in input_string:
        if char not in char_count:
            char_count[char] = 1
        else:
            char_count[char] += 1
            
    for char in char_count:
        if char_count[char] > max_count:
            max_count = char_count[char]
            max_char = char
    return max_char"
"Apply a filter to the following array of objects so that the output contains only the elements that have a value greater than 5 and a type string.[{type: 'string', value: 3}, {type: 'number', value: 4}, {type: 'number', value: 6}, {type: 'string', value: 8}]","[{type: 'string', value: 8}]"
"Calculate the minimum value of the following set of numbers: 4, -2, 6, 9.",-2
"Rearrange the following array of objects so that the output sorted in ascending order by the ""age"" property.[{name: 'John Doe', age: 25}, {name: 'Sarah Smith', age: 61}, {name: 'Jane Doe', age: 41}];","[{name: 'John Doe', age: 25}, {name: 'Jane Doe', age: 41}, {name: 'Sarah Smith', age: 61}];"
"Construct a query in MongoDB to select documents with a value greater than 3 for the property ""value"".",db.collection.find( { value: { $gt: 3 } } )
"Convert the following list of numbers into a comma-separated string.[25, 32, 63, 18, 22]","'25,32,63,18,22'"
"Create a Python program that takes a given list of strings and prints out the string with the maximum length.['code', 'programming', 'computer science', 'javascript', 'HTML']","max_len = 0
max_string = ''
for elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:
    if len(elem) > max_len:
        max_len = len(elem)
        max_string = elem

print(max_string)"
"Select the code segment that outputs ""pass"".","let num = 4;

if (num < 5) {
    console.log('pass');
} else {
    console.log('fail');
}"
"Rewrite the following code snippet to remove the use of ""while"" loop.let sum = 0;
let i = 0;
while (i <= 10) {
   sum += i;
   i += 1;
}","let sum = 0; 
for (let i = 0; i <= 10; i++) {
   sum += i;
}"
Design a class to represent a point in 2D space.It should store two variables—x and y.,"class Point:
    x = 0
    y = 0
    def Point(x, y):
        self.x = x
        self.y = y"
"Compute the distance between two points p1 and p2.p1 = (3, 4), p2 = (6, 8).","import math
def distance(p1, p2):
    xDiff = p2[0] - p1[0]
    yDiff = p2[1] - p1[1]
    return math.sqrt(xDiff**2 + yDiff**2)

distance((3,4), (6,8)) # Returns 5.0"
Implement a stack using a linked list.,"class Stack:

    class Node:
        def __init__(self, value):#, next=None):
            self.value = value
            self.next = None

    def __init__(self):
        self.head = None
        self.count = 0

    def isEmpty(self):
        if self.count == 0:
            return True
        return False

    def push(self, value):
        node = self.Node(value)
        node.next = self.head
        self.head = node
        self.count += 1

    def pop(self):
        if self.head == None:
            return None
        result = self.head.value
        self.head = self.head.next
        self.count -= 1
        return result"
Write a function that converts Fahrenheit to Celsius.,"def FtoC(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius"
Generate a random number from 1 to 1000.,"import random

random_number = random.randint(1, 1000)"
Write a code that finds all the prime numbers from 1 to n.,"def is_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

def find_primes(n):
    primes = []
    for i in range(2, n+1):
        if is_prime(i):
            primes.append(i)
    return primes

find_primes(10) # Returns [2, 3, 5, 7]"
"Calculate the running average of a given array of data.[1,6,3,5,2,7,8]","def calculate_running_average(arr):
    running_sum = 0
    for i in range(len(arr)):
        running_sum += arr[i]
        arr[i] = running_sum / (i+1)
    return arr

arr = [1, 6, 3, 5, 2, 7, 8]
calculate_running_average(arr) # Returns [1.0, 3.5, 3.0, 3.75, 3.2, 4.16, 4.43]"
"Find the longest increasing subsequence of a given array of numbers.[10,22,9,33,21,50,41,60]","def longest_increasing_subsequence(arr):

    n = len(arr)
    lis = [1] * n 

    for i in range (1 , n): 
        for j in range(0 , i): 
            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : 
                lis[i] = lis[j]+1
    return max(lis)

arr = [10,22,9,33,21,50,41,60]
longest_increasing_subsequence(arr) # Returns 5"
"Convert the following pseudocode into Python codefor i = 0 to 9
    print i","for i in range(10):
    print(i)"
"Create a program in python to find the longest common contiguous subarray between two integers.int arr1[7] = {1,2,4,4,4,4,7}
int arr2[5] = {1,4,4,5,5}","def long_com_subarr(arr1, arr2):
    len1 = len(arr1)
    len2 = len(arr2)
    res = 0
    count = 0 
    
    for i in range(len1):
        for j in range(len2):
            if arr1[i] == arr2[j]:
                count += 1
            else: 
                if result < count:
                    res = count
                count = 0
    
    return res"
"Write an algorithm in python to find the second largest number of an unsorted listarr = [1, 3, 4, 5, 9, 10, 11]","def find_sec_largest(arr):
  max1 = max(arr[0], arr[1])
  max2 = min(arr[0], arr[1])

#Iterate over the array to find max2 and max1
for i in range(2, len(arr)):
  if arr[i] > max1:
    max2 = max1
    max1 = arr[i]
  elif arr[i] > max2 and arr[i]!=max1:
    max2 = arr[i]
  else:
    continue

# else return the second max
return max2"
"Edit the following code snippet so that it prints ""Hello World"" three times#include <iostream>

int main(){
    std::cout << ""Hello world"" << std::endl;
    return 0;
}","#include <iostream>

int main(){
    for(int i=0; i < 3; i++)
        std::cout << ""Hello world"" << std::endl;
    return 0;
}"
"Change the following code so that it accepts a list as an argument and prints each element of the list.def print_list(arr):
	i = 0
	while (i < len(arr)):
		print arr[i]
		i +=1","def print_list(arr):
	for ele in arr:
		print(ele)"
"Construct an algorithm in python to find the length of the longest common substring between two stringsstr1 = ""'abbcdefg""
str2 = ""zabxdefujh""","def longest_common_substring(str1, str2):
    len1 = len(str1)
    len2 = len(str2)
    result = 0
    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]
    for i in range(len1+1):
        for j in range(len2+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
                result = max(result, dp[i][j])
            else:
                dp[i][j] = 0
    return result"
"Create a search algorithm in Python to find an element in a sorted array in less than log(n) time.arr = [1, 2, 3, 4, 5, 6, 7, 8]","def binarySearch(arr, element):
    start = 0;
    end = len(arr) - 1
    
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == element:
            return mid
        elif arr[mid] < element:
            start = mid + 1
        else:
            end = mid - 1 
    return -1"
"Create a function in R to calculate the mean from a given list of numbers.numlist = c(2, 5, 10, 17, 21)","mean <- function(numlist) {
  mean_val <- sum(numlist)/length(numlist)
  return (mean_val)
}"
"Write a Python program to compute the gravitational force between two masses.m1 = 5 kg, m2 = 10 kg","def calc_grav_force(m1, m2):
    G = 6.67 * 10 ** -11 # gravitational constant
    force = G * m1 * m2 / (4 * 3.14 ** 2)
    return force"
"You need to fix the following code to make it work correctly.def mean(numbers):
 nums = numbers
 avg = sum(nums) / len(nums)
 return int(avg)","def mean(numbers):
 nums = numbers
 avg = sum(nums) / len(nums)
 return round(avg, 2)"
You need to generate a list of all the even numbers between two given numbers.,"def even_numbers(start, end):
 even_nums = []
 for num in range(start, end):
 if num % 2 ==0:
 even_nums.append(num)
 return even_nums"
Generate a sentence that consists of repeated words with different properties.,The icy blue ocean glistened with sparkling diamond stars.
You need to implement a class for a numerical calculator.,"class Calculator:
 def __init__(self):
  self.result = 0

 def add(self, a, b):
  self.result = a + b
  return self.result

 def subtract(self, a, b):
  self.result = a - b
  return self.result

 def multiply(self, a, b):
  self.result = a * b
  return self.result

 def divide(self, a, b):
  self.result = a / b
  return self.result"
"Write a Python program to generate a list that contains only the non-unique elements from a given list.[1,2,3,4,5,1,2,2,3,4]","def generate_non_unique_list(lst):
 new_list = []
 for i in lst:
  if lst.count(i) > 1 and i not in new_list:
   new_list.append(i)
 return new_list"
Implement a function to convert a given string into a list of words.My name is Anna.,"def string_to_list(string):
 words = string.split(' ')
 return words"
"Categorize a given list of integers into odd and even numbers.[1,2,3,4,5,6,7,8,9]","def categorize_numbers(lst):
 odd = []
 even = []
 for num in lst:
  if num % 2 == 0:
   even.append(num)
  else:
   odd.append(num)
 return odd, even"
"You need to compute the sum of all odd elements in a given matrix.[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9],]","def sum_odd_matrix(matrix):
 sum = 0
 for row in matrix:
  for value in row:
   if value % 2 != 0:
    sum += value
 return sum"
"Write a function to compute the product of all elements in a matrix.[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9],]","def product_matrix(matrix):
 product = 1
 for row in matrix:
  for value in row:
   product *= value
 return product"
"Correct the following Python code so it prints out the current hour in 24-hour format.import datetime

current_hour = datetime.now()
print(""Current hour is"")
print(current_hour.hour)","import datetime

current_time = datetime.datetime.now()
print(""Current hour is"")
print(current_time.strftime(""%H""))"
"Find the sum of the following array elements in MATLAB.A = [100,200,300]","A = [100,200,300];
sumA = sum(A);
fprintf('Sum of elements: %d\n', sumA);"
"Design a data structure to hold a user's name, age, and city.","struct User {
    string name;
    int age;
    string city;
};"
Create a virtual environment with Python version 2.7.,"pip install virtualenv
virtualenv -p python2.7 venv
source venv/bin/activate"
"Write a for loop in Perl for printing all the elements of a list.my @myList = (4, 7, 12);","foreach my $element (@myList){
  print $element;
}"
Calculate the Fibonacci sequence till 10 using Python.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

for i in range(1,11): 
    print(Fibonacci(i))"
Create a dictionary with two key-value pairs in Python.,"my_dict = {
    ""key1"": ""value1"",
    ""key2"": ""value2""
}"
Use python to call a API to get the current temperature in New York City?,"import requests

# API call to get current temperatures in New York City
url = 'http://api.openweathermap.org/data/2.5/weather?q=New York City,NY&units=imperial'
response = requests.get(url)
data = response.json()
current_temperature = data['main']['temp']
print(current_temperature)"
Design an algorithm to check if a number is a palindrome.7337,"def is_palindrome(num):
    num_str = str(num)
    # compare the first and last characters
    if num_str[0] != num_str[-1]:
        return False
    # go to the next pair of characters
    if len(num_str) >= 3:
        return is_palindrome(num_str[1:-1])
    # all characters have been compared, number is a palindrome
    return True"
Create an object-oriented design in Python to represent a customer.,"class Customer:
    def __init__(self, name, address, email):
        self.name = name
        self.address = address
        self.email = email

    def get_name(self):
        return self.name

    def set_name(self, name):
        self.name = name

    def get_address(self):
        return self.address

    def set_address(self, address):
        self.address = address

    def get_email(self):
        return self.email

    def set_email(self, email):
        self.email = email"
"Write a function in Python to shuffle an array.[1, 2, 3, 4, 5, 6]","import random

def shuffleArray(arr):
    # Create a copy of the array
    temp_arr = arr.copy()

    # Iterate through the array and randomly
    # swap elements
    for i in range(len(temp_arr)):
        j = random.randint(0, len(temp_arr)-1)
        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]

    return temp_arr"
"What is the average of the numbers in list l?l = [1,2,3,4,5]",Average = sum(l) / len(l) = 15 / 5 = 3.0
"Create a function that takes a string and returns the first letter of each word in the string.string = ""This is an example""","def first_letters(string):
    words = string.split()
    first_letters = [word[0] for word in words]
    return """".join(first_letters)

first_letters(string) # Returns ""Tiiae"""
"Find the duplicate in the array.arr = [1,2,3,4,2]","def find_duplicate(arr):
    seen = set()
    for item in arr:
        if item in seen:
            return item
        else:
            seen.add(item)
    return None # if no duplicate

find_duplicate(arr) # Returns 2"
"Given a list of numbers, return the first number that appears an odd number of times.arr = [2,4,4,4,2,2,8,4]","def find_odd_occurrence_num(arr):
    seen = {}
    for item in arr:
        if item not in seen:
            seen[item] = 1
        else:
            seen[item] += 1
    for item, count in seen.items():
        if count % 2 != 0:
            return item
    return None

find_odd_occurrence_num(arr) # Returns 8"
"Is a valid ISBN-10 number?isbn = ""0478156686""","import re 

def is_valid_isbn(isbn):
    pattern = r""^\d{9}[\d|X]$"" # ISBN is a string with 10 digits
    return True if re.match(pattern, isbn) else False

is_valid_isbn(isbn) # Returns True"
"Create a function to retrieve the first value from a dictionary that starts with a given letter.dictionary = { ""a"": 1, ""b"": 2, ""c"": 3 }
starting_letter = “b”","def get_first_value(dictionary, starting_letter):
    for key, value in dictionary.items():
        if key.startswith(starting_letter):
            return value
    return None # if no value found

get_first_value(dictionary, starting_letter) # Returns 2"
Find the maximum element in a Binary Search Tree.,"def findMax(root): 
    if root == None: # if tree is empty
        return -1
    while root.right: # Move right in  BST till the last node
        root = root.right
    return root.key"
"Create a function that takes two parameters, an array and an object key, and returns an object containing all the elements in the array whose value is the same as the given object key.array = [""a"", ""b"", ""c"", ""a"", ""b"", ""d""]
key = ""b""","def group_by_key(array, key):
    returned_object = {}
    for item in array:
        if item == key:
            returned_object[item] = key
    return returned_object

group_by_key(array, key) # Returns {""b"": ""b""}"
Create a dictionary comprehension to capture all the words in a sentence.The quick brown fox jumps over the lazy dog,{word: word for word in sentence.split()}
Implement a quick-sort algorithm in Python to sort a given array in ascending order.,"def quick_sort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)"
Create a class named Dog in Python.,"class Dog:
    def __init__(self):
        pass
    
    def bark(self):
        print(""Bark!"")"
Create a distributed system using Python,"import multiprocessing

def send_task(task):
    # Send the task to a worker process 
    pass

def process(task):
    # Process the task 
    pass

if __name__ == '__main__': 
    processes = []
    # Create two processes
    process1 = multiprocessing.Process(target=send_task, args=(task,))
    process2 = multiprocessing.Process(target=process, args=(task,))
    processes.append(process1) # Put processes in a list 
    processes.append(process2)

    # Run processes
    for process in processes:
        process.start()

    # Exit the completed processes
    for process in processes:
        process.join()"
Create a neural network using TensorFlow.,"import tensorflow as tf

model = tf.keras.Sequential([
    tf.keras.layers.Dense(units=128, activation='relu', input_shape=(10,)),
    tf.keras.layers.Dense(units=128, activation='relu'),
    tf.keras.layers.Dense(units=128, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])"
Write a Python program to implement a text-based game,"import random

def intro():
    print(""Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions."")

def help_command():
  print(""Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit."")

def move(direction):
  if direction == 'north':
    print(""You moved north."")
  elif direction == 'south':
    print(""You moved south."")
  elif direction == 'west':
    print(""You moved west."")
  elif direction == 'east':
    print(""You moved east."")

def check_inventory():
  print(""You have nothing in your inventory."")

def quit_game():
  print(""Thanks for playing!"")
  return False

intro()
playing = True
while playing:
  command = input(""What would you like to do? > "").lower()
  if command == 'help':
    help_command()
  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':
    move(command)
  elif command == 'check inventory':
    check_inventory()
  elif command == 'quit':
    playing = quit_game()"
"Rewrite the code below to use a for loop.num = 0
while num < 5: 
    print(num) 
    num+=1","for num in range(5):
  print(num)"
Write a Python function to calculate the least common multiple of two numbers.,"def lcm(a, b): 
    lcm = (a*b)//gcd(a,b) 
    return lcm

def gcd(a,b): 
    if a == 0 : 
        return b 
          
    return gcd(b%a, a)"
Write a Python class to represent a 2-dimensional point.,"class Point: 
    def __init__(self, x, y): 
        self.x = x 
        self.y = y 
        
    def distance(self, other_point):
        x1, y1 = self.x, self.y
        x2, y2 = other_point.x, other_point.y
        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5"
Generate a random set of 7 unique numbers between 0 and 10.,"import random

def generate_random_set():
  generated_set = set()
  while len(generated_set) < 7:
    generated_set.add(random.randint(0, 10))
  return generated_set"
Analyze the sentiment of this statement using Python.I am truly happy with the amazing results,"import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentence = ""I am truly happy with the amazing results""
analyzer = SentimentIntensityAnalyzer()
sentiment = analyzer.polarity_scores(sentence)

print(""The sentiment of the statement is:"", sentiment['compound'])"
"Implement a binary search algorithm using Python.nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]","def binary_search(nums, target): 
    start = 0
    end = len(nums) - 1

    while start <= end:
        mid = start + (end - start)//2

        if nums[mid] == target:
            return mid

        if nums[mid] > target:
            end = mid - 1

        else: 
            start = mid + 1

    return -1"
"Sort this list of strings alphabetically.strings = ['hello', 'world', 'this', 'is', 'a', 'list', 'of', 'strings']",strings.sort(key=lambda x: x.lower())
Create a stack data structure using Python.,"class Stack: 
  
    def __init__(self): 
        self.stack = []
    
    def push(self, item):
        self.stack.append(item)
    
    def is_empty(self):
        return self.stack == []
  
    def pop(self): 
        if self.is_empty():
            return None
          
        return self.stack.pop()"
Create a function that takes a string and displays it twice in the output.Hello World,"def double_string(string):
    return string * 2

print(double_string(""Hello World""))"
"Modify the following code so that it returns the lowest common multiple of two given numbers?def lowest_common_multiple(x, y):
    pass","def lowest_common_multiple(x, y): 
    if x > y:
        greater = x
    else:
        greater = y
    while(True): 
        if((greater % x == 0) and (greater % y == 0)): 
            lcm = greater 
            break
        greater += 1
    return lcm"
"Modify the following code to turn it into an Insertion Sort algorithm.def sort_numbers(arr):
    pass","def insertion_sort(arr): 
    for i in range(1, len(arr)):
        x = arr[i]
        j = i-1
        while j >= 0 and arr[j] > x:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = x
    return arr"
Write a Python program to check if a given number is divisible by 5 and 11 or not?,"def checkDivisibility(n):
    if n % 5 == 0 and n % 11 == 0: 
        print(""It is divisible by 5 and 11."")
    else: 
        print(""It is not divisible by 5 and 11."")
     
# Driver code 
n = 55
checkDivisibility(n)"
Create an assembler program to count the number of vowels in a given string.,"section .data

str: db ""Hello World"", 0
len: equ $-str

vowels db 0

section .text

global main

main:
    mov edx, len
    mov esi, str
    
    xor eax, eax
    xor ebx, ebx

while_check:
   cmp ebx, edx 
    je result_print
    
    mov al, [esi + ebx]
    inc ebx
    cmp al, 'a'
    je increment_vowel
    cmp al, 'e'
    je increment_vowel
    cmp al, 'i'
    je increment_vowel
    cmp al, 'o'
    je increment_vowel
    cmp al, 'u'
    je increment_vowel
    jmp while_check

increment_vowel:
    inc [vowels]
    jmp while_check

result_print:
    mov edx, [vowels]
    mov eax, 4
    mov ebx, 1
    int 80h

mov eax, 1
mov ebx, 0
int 80h"
"Replace the following code with its equivalent Ternary Expressionsif (x > 0):
    result = ""positive""
else:
    result = ""negative""","result = ""positive"" if (x > 0) else ""negative"""
"Find the time complexity for the folllowing function.def myFunc(n):
    product = 1
    for i in range(2, n+1):
        product *= i
    return product",O(n)
"Rewrite the following code in the form of list comprehension.names = [""Max"",""John"",""Monica"",""Harry"",""Steve""]
upper_names = []
for name in names:
    upper_names.append(name.upper())",upper_names = [name.upper() for name in names]
"Rewrite the following code to use a dictionary comprehension.names = [""Max"",""John"",""Monica"",""Harry"",""Steve""]
name_lengths = {}
for name in names:
    name_lengths[name] = len(name)",name_lengths = {name: len(name) for name in names}
"Translate the following word problem into Python code.Gary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally.","gary_share = 45 // 3
john_share = 11 // 3
sam_share = 3 // 3
total_share = gary_share + john_share + sam_share

print('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))"
"Update the following code, to use Python's modern type hint annotation.def my_func(list):
    '''Some docstring'''
    result = 0
    for l in list:
        result += l
    return result","def my_func(list: list) -> int:
    '''Some docstring'''
    result = 0
    for l in list:
        result += l
    return result"
Write a function to search for an element within a linked list.,"def search(head, target): 
    curr = head
    while (curr!= None): 
        if (curr.data == target): 
            return curr.data 
        curr = curr.next
    return -1"
Create a Chrome extension that highlights hyperlinks in green.,"// Create a new class to extend Google's Chrome Extension
class LinkHighlighter extends Chrome Extension {

// Initialize Manifest.json
	manifest: {
	""name"": ""Link Highlighter"",
	""author"": ""Your Name Here"",
	""version"" : ""1.0"",
    ""description"" : ""Highlights all hyperlinks in green."",
	""browser_action"": {
		""default_title"": ""Link Highlighter""
	}
}

// Use 'onStartup()' to set rules for all hyperlinks
onStartup() {
	browser.webNavigation.onCommitted.addRules([
	  {
		conditions: [
		  new browser.webNavigation.PageStateMatcher({
			pageUrl: {urlContains: 'http://'},
		  })
		],
		actions: [ new browser.declarativeContent.ShowPageAction() ]
	  }
	]);
}

// Create the engine to inject a CSS into the page
  injectCSS() {
	var headElmts = document.getElementsByTagName(""head"");
	var styleElmt;
	if (headElmts.length) {
	  styleElmt = document.createElement(""style"");
	  headElmts[0].appendChild(styleElmt);
	}
	
	// Include the CSS to style the link.
	styleElmt.innerHTML  = 'a { color : green !important; }';
  }
  
  // Execute the engine to inject the CSS
  injectCSS();

}"
"Replace 'x' with the correct input from an API request.Url: https://exampleAPI.com/user?id=2
Response: {
    ""name"": ""John Doe"",
    ""age"": 50
}","name = response['name']
age = response['age']
print(""Name: ""+name+"", Age: ""+str(x))

# Name: John Doe, Age: 50"
"Merge the two given arrays and remove duplicates.[1,3,4,2,9,4]
[2,10,7,9,8]","merged_arr = list(set(arr1+arr2))
print(merged_arr)

# [1, 2, 3, 4, 7, 8, 9, 10]"
Generate a random string of 5 characters containing a-z and 0-9.,"import string 
import random
  
# Get all ASCII uppercase letters
string_all = string.ascii_letters + string.digits
  
# Get random 5 upper case letters
random_string = ''.join(random.choice(string_all) for i in range(5))
print(random_string)

# Ex: ZV7b1"
"Create a new array after doubling the value of all numbers in the given array.[1,3,5,2,7,9]","double_arr = [a*2 for a in arr] 
print(double_arr)

# [2, 6, 10, 4, 14, 18]"
"Create a MongoDB query to find all documents where ""sale_price"" is greater than 10.","db.collection.find({ ""sale_price"": { ""$gt"": 10 } })"
Write a function to perform regex match in Python.,"def regex_match(string, pattern):
  return re.match(pattern, string)"
"Convert the following if-else scenerio into switch statements.if (x == 1) {
    y = 10;
} else if (x == 2) {
    y = 20;
} else if (x == 3) {
    y = 30;
}","switch (x) {
  case 1:
    y = 10;
    break;
  case 2:
    y = 20;
    break;
  case 3: 
    y = 30;
    break;
  default:
    // no default required
}"
"Generate a unique key for each item in the given array.[“cat”, “dog”, “bird”]","foreach ($array as $item) {
    $key = md5($item);
}"
Write a query to select all artworks whose titles starting with a 'C'.,"SELECT * 
FROM artworks
WHERE title LIKE 'C%';"
Create a function in Python to find the highest common factor (HCF) of two numbers.a = 30 / b = 12,"def hcf(a, b):
    j = min(a,b)
    hcf = 1
    for i in range(2, j+1):
        if(a%i == 0 and b%i == 0):
            hcf = i
    
    return hcf"
"Generate Delphi code to count the number of times a specific character occurs in a given sentence.sentence = ""coding is fun"" / character = 'o'","function CountCharacter(sentence: string, character : char) : integer;
var
    i : integer;
    count : integer;
begin
    count := 0;
    for i := 1 to Length(sentence) do
	begin
		if sentence[i] = character then
		begin
			count := count + 1;
		end;
	end;
	result := count;
end;"
"Modify the given python program to accept an input string and output the length of that string.def func():
    print(""Hello World!"")","def func(s):
    print(""Length of the string is: "" + str(len(s)))"
Generate a R code to create a vector containing unique elements from another vector.,unique_vec <- unique(vec)
Make a Perl program to detect whether a given string is numerical.,"sub is_numerical {  
    $input = $_[0];
    
    if ($input =~ /^[0-9]+$/) {  
        return 1;
    } else {
        return 0;     
    }
}"
Generate an array of numbers from 0-10 in Python.,"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Generate a random number between 0-100 in Python.,"import random 
  
#Generate a random number between 0-100
randomNum =  random.randint(0, 100) 
print (""Random number:"", randomNum)"
"Create a function in Python to multiply two matrices.matrixA = [[1, 2], [3, 4]], matrixB = [[5, 6], [7, 8]]","def multiplyMatrix(A, B):
    rowsA = len(A)
    columnsA = len(A[0])
    rowsB = len(B)
    columnsB = len(B[0])
    
    if columnsA != rowsB:
        print(""Cannot multiply"")
        return
    
    result = [[0 for row in range(columnsB)] for col in range(rowsA)]
    
    # Compute matrix multiplication
    for i in range(rowsA):
        for j in range(columnsB):
            for k in range(columnsA):
                result[i][j] += A[i][k] * B[k][j]
    
    return result

A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]

 print(""Result:"")
 result = multiplyMatrix(A, B) 
  
for i in result: 
    print(i)"
"Debug the following program so that it prints the correct outputx = [5, 4, 3, 2, 1]
for i in x
    print(i)","x=[5,4,3,2,1]
for i in x:
    print(i)"
Output the ASCII character corresponding to the decimal value 65.,"print(""The ASCII character for decimal 65 is"",chr(65))"
"You need to make a function which takes two integers, a and b and prints out their sum.","def add_numbers(a, b):
    print(a + b)"
Output the ASCII value of a given character.A,"print(""The ASCII value of A is"", ord('A'))"
"Create a function which takes two lists and outputs all the common elements.list1=[2,4,6,8]
list2=[1,2,3,4]","def common_elements(list1, list2):
    list3 = []
    for i in list1:
        for j in list2:
            if i == j:
                list3.append(i)
    return list3"
"How would you make the following function more efficient?def find_longest_word(words):
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word","def find_longest_word(words):
    longest_word = words[0]
    for word in words[1:]:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
"According to the following code, how is an object of type “Point” instantiated?class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y","An object of type ""Point"" is instantiated by calling the __init__() method, with arguments for the x and y coordinates, e.g. Point(1,2) to create an instance with x=1 and y=2."
"Delete redundant if-else statements from the following code.if x < 0:
    result = 0
elif x == 0:
    result = 0
elif x == 1:
    result = 1
else:
    result = 2","if x < 0:
    result = 0
elif x in [0, 1]:
    result = x
else:
    result = 2"
"Convert the following list of strings to a dictionary whose keys are numbers and whose values are strings.list1 = [""One"", ""Two"", ""Three""]","dict1 = {} 
for i, s in enumerate(list1): 
    dict1[i+1] = s 

Input:
list1 = [""One"", ""Two"", ""Three""]

Output:
dict1 = {1: ""One"", 2: ""Two"", 3: ""Three""}"
"Clean up the following code so it follows PEP-8 guidelines.def sumofSeven(x,y): return x+y+7","def sumofSeven(x, y): 
    return x + y + 7"
"Classify the following statement as either a string or a number.""42""",String
Calculate the sum of all odd numbers from 1 to 10.,25
"How would you sort the following list of strings in alphabetical order?list1 = [""Ruby"", ""Python"", ""JavaScript""]","def sort_list(list1): 
    return sorted(list1) 

Input:
list1 = [""Ruby"", ""Python"", ""JavaScript""]

Output:
[""JavaScript"", ""Python"", ""Ruby""]"
"Write a for loop to print each letter of a string.string_example = ""GPT""","for letter in string_example:
    print(letter)"
Create an object of class 'Car' that has a color property of 'red'.,car = Car(color='red')
"Create a function called ' say_hello' that prints ""Hello World!"" when invoked.","def say_hello():
    print(""Hello World!"")"
"Calculate the maximum product of two numbers in a list.[4, -2, 3, -1]",max_product = 4 * -2 = -8
"Implement a function to replace every occurrence of an old string in a given string with a new string.text = “The quick brown fox jumps over the lazy dog”
old = “dog”
new = “cat”","def replace_string(text, old, new):
    return text.replace(old, new)

# Output
The quick brown fox jumps over the lazy cat"
"Create a program to create a dictionary with words and their frequencies from a given sentence.sentence = ""Python is an easy, powerful language with a simple syntax and high readability""","def create_dict(sentence):
    words = sentence.split()
    res = {}
    for word in words:
        res[word] = words.count(word)
    return res

# Output
{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}"
"Write a function to print the maximum and minimum number in a given list.my_list = [5, 4, 7, 1, 2]","def print_extremes(my_list):
    print(""Maximum:"", max(my_list))
    print(""Minimum:"", min(my_list))

# Output
Maximum: 7
Minimum: 1"
"Create a function to print all permutations of a string without duplicates.string = ""abc""","def permutations(string):
    res = set()
    if len(string) == 1:
        res.add(string)
    else:
        for i, char in enumerate(string):
            for perm in permutations(string[:i], string[i+1:]):
                res.add(char + perm)
    return res

# Output
{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}"
Create a function to calculate the sum of the Triangle Series up to the given number n.,"def sum_triangle(n): 
    if n<=0: 
        return 0
    res = (n * (n + 1)) // 2
    return res"
Create a list comprehension to generate the first 10 Fibonacci numbers.,"fibonacci_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
first_10_fibonacci = [fibonacci_numbers[i] for i in range(10)]"
Create a class in Python for representing a 2-dimensional point.,"class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y"
Create a NumPy array with all the elements set to 0.,"import numpy as np
arr = np.zeros(shape=(10, 10))"
"Write a function to group a list of strings based on the first two characters of each string.list = [""aa12"", ""bd32"", ""ca53"", ""db34""]","def group_list(list):
    grouped = {}
    for item in list:
        key = item[:2]
        if key not in grouped:
            grouped[ key ] = [item]
        else:
            grouped[ key ].append(item)
    return grouped"
"Create a function to find the longest common prefix of two strings.str1 = ""hello"", str2 = ""helmet""","def longest_common_prefix(str1, str2):
    lcp = """"
    i = 0
    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:
        lcp += str1[i]
        i += 1
    return lcp"
Create an array in Python containing the cube of all the integers from 1 to 10.,"import array
int_array = array.array(""i"", [i*i*i for i in range(1, 11)])"
Create an array which contains the squares of the numbers 0 to 10.,squares = [i*i for i in range(11)]
Create a for loop that prints the numbers 0 to 10 and prints if the number is even or odd.,"for i in range(11):
 if i % 2 == 0:
 print(f'{i} is even')
 else:
 print(f'{i} is odd')"
"Find any two numbers in an array such that their sum is equal to a given value.array = [3, 4, 5, 6, 7, 8]
value = 11","for i in range(len(array)):
 for j in range(i+1, len(array)):
  if array[i] + array[j] == value:
   print(array[i], array[j])"
Write a function that sums the elements of an array,"def array_sum(array):
 res = 0
 for el in array:
  res += el
 return res"
Create a function that reverses the elements of a given array,"def reverse_array(array):
 return array[::-1]"
"Edit the following code to print out the nth Fibonacci number.def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)","def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

print(Fibonacci(n))"
"Create a function that checks whether two strings are anagrams of each other.str1 = ""cinema""
str2 = ""iceman""","function isAnagram(str1, str2) { 
  
   let arr1 = [...str1].sort(); 
   let arr2 = [...str2].sort(); 
  
   return (arr1.length == arr2.length && 
           arr1.every((v,i)=> v === arr2[i])) ? true : false; 
 }"
"Determine whether the given string is a valid IPv4 addressip_address = ""192. 426.4.4""","No, the string is not a valid IPv4 address."
Implement a class that stores values of all data types.,"class DataStorage {
  constructor() {
    this.storage = {};
  }

  setData(key, value) {
    this.storage[key] = value;
  }

  getData(key) {
    return this.storage[key];
  }
}"
"Write a code snippet for sorting an array of integers.arr = [12,9,7,8,6]","arr = [12,9,7,8,6];
arr.sort(function(a, b){return a - b});
console.log(arr);"
Write a nod.js code to return the current system time.,"let currentTime = new Date().toLocaleTimeString();
console.log(currentTime);"
Write a code to detect the data type of a given variable.var = 10,"let var = 10;
console.log(typeof var);"
"Implement a method to find the shortest path between two points in a two-dimensional array using Dijkstra's
algorithm.The two-dimensional array:
[[1, 8, 3],
 [4, 5, 6],
 [9, 5, 0]]
Start point: [0, 0]
End point: [2, 2]","# the weights array will be used to store the distances
# from the start cell to any other cell in the array
weights = [[float('inf')] * 3 for _ in range(3)]
weights[0][0] = 0
# Directions are up, down, left and right
directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

# The queue for Dijkstra's algorithm
q = [(0, 0)]
while q:
 # curr is the current cell in consideration
 curr = q.pop(0)
 # curr_dist is the distance of the current cell
 # from the start cell
 curr_dist = weights[curr[0]][curr[1]]
 # check all the adjacent cells
 for direction in directions:
  row = curr[0] + direction[0]
  col = curr[1] + direction[1]
  # if the adjacent cell is within the array
  if 0 <= row < 3 and 0 <= col < 3:
   # if the distance of the adjacent cell is bigger
   # than current cell distance + 1, update it
   if weights[row][col] > curr_dist + 1:
    weights[row][col] = curr_dist + 1
    q.append((row, col))

# the distance from the start to the end point will
# be stored in the weights array at the given location
distance = weights[2][2]
print(f""The shortest path from start to end is {distance}"")"
"Find the calculations of the time complexity of the following coded snippet.for (i = 0; i < n; i++) {
 for (j = 0; j < n; j++) {
  console.log(i, j);
 }
}",The time complexity calculation of the following snippet is O(n²).
"Construct an algorithm to search for the Given Normalised Word in a Normalised Trie.Normalised Trie:
root 
|
s -- a - l -- u -- t
|
s -- e - l -- e -- c
Given Normalised Word: sault","def searchWord(node, word):
 if len(word) == 0:
  return True
  
 # Check if the character at first position is in the children of the current node
 if word[0] in node.children:
  # Get the node of the character at first position
  nextNode = node.children[word[0]]
  
  # Check if the rest of the string is present in the 
  # remaining children of the current node
  return searchWord(nextNode, word[1:])
 # If the character is not found
 else:
  return False
  
# Function to normalize the word
def normalize(word):
 # If the word contains only lower case letters
 if word.islower():
  return word
 
 word = word.lower()
 return word
 
# Main program
trie = Trie() 
trie.add(""sault"")

# The word to be searched
word = ""sault""

# Normalize the word
word = normalize(word)

# Search the normalized word in the trie
if searchWord(trie.root, word):
 print(""Found!"")
else:
 print(""Not Found!"")

Output: Found!"
"Design a program to find the longest palindrome inside a given string.String: ""abcaaacbcb""","def longestPalindrome(string):
 # set up the N^2 matrix to store the boolean
 # values of the characters that are palindromes
 n = len(string)
 matrix = [[False for i in range(n)] for j in range(n)]

 max_length = 1
 start = 0

 # Every single character is a palindrome of length 1
 for i in range(n):
  matrix[i][i] = True

 # Check for substrings of length 2
 for i in range(n - 1):
  if string[i] == string[i + 1]:
   matrix[i][i + 1] = True
   start = i
   max_length = 2

 # Check for substrings of length 3 and more
 for substring_length in range(3, n + 1):
  for i in range(n - substring_length + 1):
   end = i + substring_length - 1
   if matrix[i + 1][end - 1] and string[i] == string[end]:
    matrix[i][end] = True
 
    if substring_length > max_length:
     start = i
     max_length = substring_length
 
 print(""Longest palindrome substring is:"", 
	string[start:start + max_length])

longestPalindrome(""abcaaacbcb"")

Output: Longest palindrome substring is: aaacbcaaa"
"Design an algorithm to sort an array using Quick Sort.Array: [5, 3, 6, 2, 1, 4]","def quickSort(arr, low, high):
    # Base case
    if low >= high:
        return

    # Pivot is the middle element
    pivot = arr[(low + high) // 2]
    i = low # Left pointer
    j = high # Right pointer

    while i <= j:
        # If the current value is smaller or equal than the pivot
        while arr[i] < pivot:
            i += 1
        # If the current value is larger than the pivot
        while arr[j] > pivot:
            j -= 1

        # If values are not in the correct order
        if i <= j:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
            j -= 1

    # Recursively sort the left and right halves
    quickSort(arr, low, j)
    quickSort(arr, i, high)

arr = [5, 3, 6, 2, 1, 4]
quickSort(arr, 0, len(arr)-1)
print(arr)

Output: [1, 2, 3, 4, 5, 6]"
"Compute the maximum sum of elements of a given subarray of length k in an array of integers.arr = [22, 4, 65, -12, 8, 99, 103], k = 2","def find_max_sum(arr, k):
    max_sum = 0
    window_sum = 0
    
    # Compute the sum of first k elements 
    for i in range(k):
        window_sum += arr[i]
        
    max_sum = window_sum
    
    # Add new element while removing the first
    for i in range(k, len(arr)):
        window_sum += arr[i] - arr[i - k]
        max_sum = max(max_sum, window_sum)
        
    return max_sum"
Add functionality to a given Python class to retrieve a book ISBN by its title.,"class Book:
    def __init__(self, title, isbn):
        self.title = title
        self.isbn = isbn
        
    def get_ISBN_by_title(self, title):
        if self.title == title:
            return self.isbn
        else:
            return None"
Write a function in Python to convert a given decimal number into its binary form.,"def decimal_to_binary(num):
    binary = []

    while num > 0:
        binary.append(num%2)
        num //= 2
    binary.reverse()
    return binary"
"Implement a function in Python that takes an array of numbers and returns the index of the maximum element.[4,7,9,2,10]","def find_index_max(arr):
    max_index = 0
    for i in range(1, len(arr)):
        if arr[max_index] < arr[i]:
            max_index = i
    return max_index"
Generate an HTTP request to delete a customer account.customer_id = 3,"DELETE /customers/3 HTTP/1.1
Host: example.com
Content-Type: application/json
Authorization: Bearer <Access Token>"
"Translate this code snippet into a pseudocode.for x in range(3, 10):
    print(x)","for x from 3 to 10
    print x"
Write a regex expression to extract any URL from a string.,"(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})"
Create an API call in Python to search for a movie by title.,"import requests

def search_movie_by_title(title):
    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title
    response = requests.get(url).json()
    return response"
Write a code to convert an integer to a float in Python.,"# Convert an integer to a float in Python
def int_to_float(num):
    return float(num)

if __name__ == '__main__':
    integer = 5 # Sample integer
    print(int_to_float(integer))"
"Write a code to count repeated words in a given sentence.""This is a sentence. This is a test sentence.""","def count_words(sentence):
    words = sentence.split()
    counts = dict()
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    return counts

if __name__ == '__main__':
    sentence = ""This is a sentence. This is a test sentence.""
    word_counts = count_words(sentence)
    print(word_counts)"
Write a function to measure the similarity between two strings.,"def similarity(string1, string2):
    common_chars = set(string1).intersection(string2)
    return len(common_chars) / (len(string1) + len(string2) - len(common_chars))

if __name__ == ""__main__"":
    string1 = ""test""
    string2 = ""testimony""
    sim = similarity(string1, string2)
    print(sim)"
"Create a function to extract the top 10 keywords from a given text.text = ""This is some text that I am using to test the extractKeywords function.""","import nltk

def extractKeywords(text):
    tokens = nltk.word_tokenize(text)
    tags = nltk.pos_tag(tokens)
    keywords = [word for word,pos in tags 
            if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]
    freqs = nltk.FreqDist(keywords)
    top_ten = freqs.most_common(10)
    return top_ten
 
if __name__ == ""__main__"": 
    text = ""This is some text that I am using to test the extractKeywords function.""
    top_ten = extractKeywords(text)
    print(top_ten)"
"Find the maximum value from a Python dictionary.sample_dict = {'a': 10, 'b': 20, 'c': 40, 'd': 30}","def find_max(sample_dict):
  max_val = 0
  for key, val in sample_dict.items():
    if val > max_val:
      max_val = val
  return max_val"
"Find the number of words in a given sentence using a Python function.sentence = ""This is a test sentence""","def word_count(sentence):
  return len(sentence.split())"
Write a code snippet to declare two string variables.,"string1 = ""a""
string2 = ""b"""
"In the following snippet, make the necessary changes to store the result as a float valuea = 5
b = 20
result = a / b;","a = 5
b = 20
result = float(a / b);"
"Compare the following two strings and list the differences.string1 = ""Hello World""
string2 = ""Hello World!""",The strings are different as the second string has an exclamation mark at the end.
"Extract the first 4 characters from the string ""Hello World"".string = ""Hello World""","Substring = ""Hell""."
Output the 3 world most populous cities,"The world's three most populous cities are Tokyo (37.4 million), Delhi (29.8 million) and Shanghai (26.3 million)."
"Write a code line to loop over an array of strings.arr = [""a"", ""b"", ""c"", ""d""]","arr.forEach(string => {
   // code
});"
"Edit the code to check whether the given number is a triangle number.def is_triangle_number(num):
    return num == num","def is_triangle_number(num):
    number = 0
    for i in range(num+1):
        number += i
        if number == num:
            return True
    return False"
"Find the most frequent character in an inputted string.input_string = ""Hello, world""","def find_most_frequent_character(input_string):
    char_count_dict = {}
    for char in input_string:
        if char in char_count_dict.keys():
            char_count_dict[char] += 1
        else:
            char_count_dict[char] = 1
    max_count = 0
    max_char = ''
    for char in char_count_dict.keys():
        if char_count_dict[char] > max_count:
            max_count = char_count_dict[char]
            max_char = char
    return max_char"
Write a code to calculate the average of three given integers,"def calculate_average(a,b,c):
    return (a+b+c)/3"
"Given a string, find the word with the longest length.input_string = ""Hello World""","def find_longest_word(input_string):
    longest_word = ''
    for word in input_string.split():
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
"Given a list of lists, find the longest sublist.list = [[1,2,3], [2,3,4,5], [4,5,6]]","def find_longest_sublist(list):
    longestList = []
    for subList in list:
        if len(subList) > len(longestList):
            longestList = subList
    return longestList"
"Find all occurrences of a substring in a given string.string = ""the cat in the hat""
substring = ""cat""","def find_substring_occurrences(string, substring):
    occurrence_list = []
    index = 0
    while string.find(substring, index) != -1:
        index = string.find(substring, index)
        occurrence_list.append(index)
        index += 1
    return occurrence_list"
"Edit the code to add each item to a dictionary.def add_to_dict(input_dict, key, value):
    return","def add_to_dict(input_dict, key, value):
    if key in input_dict:
        input_dict[key].append(value)
    else:
        input_dict[key] = [value]
    return input_dict"
"Generate a function that takes a list of strings and returns a list that includes capitalized version of all strings['hello', 'world', 'my', 'name', 'is']","def capitalize_list(words):
    """"""This function takes a list of strings and returns a list that 
    includes capitalized version of all strings
    """"""

    capitalized_list = []

    for word in words:
        capitalized_word = word.capitalize()
        capitalized_list.append(capitalized_word)
    
    return capitalized_list"
"Suggest two input values for the following code snippet such that it generates the output '2, 4'.x = int(input())
y = int(input())
print(x*2, y*2)","The two input values that generate the output '2, 4' are x = 1, y = 2."
"Create a function that takes in a list of strings and returns a new list of only the strings longer than 4 characters.['Python', 'JavaScript', 'C++', 'Scala', 'Haskell']","def filter_long_words(str_list):
    """"""This function takes a list of strings and returns a new list of only the strings longer than 4 characters""""""
    result = []
    for word in str_list:
        if len(word) > 4:
            result.append(word)
    return result"
"Create an algorithm that finds the maximum element of an array.[2, 3, 5, 1, 4]","def find_max_element(arr):
    """"""This function takes an array and returns the maximum element""""""
    max_el = arr[0]
    for el in arr:
        if el > max_el:
            max_el = el
    return max_el"
Write code to assign a variable the value of the cube of 5.,cube_of_5 = 5**3 # assign a variable the value of the cube of 5.
Write code for sorting an array in-place.,"def quicksort(arr):
    """"""This function takes an array as parameter and sorts it in-place""""""
    if len(arr) <= 1:
        return
    pivot = arr[0]
    left, right = [], []
    for i in range(1, len(arr)):
        if arr[i] < pivot:
            left.append(arr[i])
        else:
            right.append(arr[i])
    quicksort(left)
    quicksort(right)
    arr[:] = left + [pivot] + right"
"Generate code to generate a random number between 0 and 5, both inclusive.","import random

def random_num0_to_5():
    """"""This function generates a random number between 0 and 5, both inclusive""""""
    return random.randint(0, 5)"
Create a code to find all prime numbers between 2 and a given integer.,"def find_primes_below(n):
    """"""This function finds all prime numbers between 2 and a given integer""""""
    primes = [True] * n
    primes[0], primes[1] = False, False

    # Find prime numbers
    for i, is_prime in enumerate(primes):
      if is_prime:
        for num in range(i*i, n, i):
            primes[num] = False

    # Filter out primes
    return [i for i, prime in enumerate(primes) if prime]"
Write a python program to determine whether a given number is a perfect square or not.,"def is_perfect_square(n):
    """"""This function takes a number as input and determines whether it is a perfect square or not""""""
    i = 1
    while i*i < n:
        i += 1
    if i*i == n:
        return True
    return False"
Generate a code that concatenates a reversed copy of a given string to itself.Python,"def concatenate_reversed(s):
    """"""This function takes a string as input and concatenates a reversed copy of it to itself""""""
    return s + s[::-1]"
Use the given function to convert an integer to a string.int num = 5,"def int_to_string(num):
    return str(num)"
"Replace the ""TODO"" with the appropriate code for implementing a binary search algorithm in Python.# TODO","def binarySearch(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid

        elif arr[mid] < target:
            low = mid + 1

        else:
            high = mid - 1

    return -1"
Use the given function to generate a random password of the specified length.,"import random

def generate_password(length):
    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
    password = ''
    for i in range(length):
        password += random.choice(alphabet)
    return password"
Use the given function to detect if a given string is a palindrome.,"def is_palindrome(str):
    reversedStr = str[::-1]
    if reversedStr == str:
        return True
    else:
        return False"
Generate a program to convert a date in the format 'dd/mm/yyyy' to a date in the format 'yyyy/mm/dd'.02/12/2020,"def convert_date(date):
  date_list = date.split('/')
  return '{}/{}/{}'.format(date_list[2],date_list[1],date_list[0])"
Create a function to generate a list of all prime numbers in a given range.,"def prime_nums(n): 
    prime_list = [] 
    for i in range(2, n + 1): 
        for j in range(2,i): 
            if (i % j) == 0: 
                break
        else: 
            prime_list.append(i)
    return prime_list"
Create a function to merge two dictionaries in Python.,"def merge_dicts(dict1, dict2):
    merged_dict = {**dict1, **dict2}
    return merged_dict"
"What is the output of the following code?

list1 = [1, 2, 3]
list2 = list1
list1[0] = 'a'","The output of the code is ['a', 2, 3] because list2 is just a reference to the same object as list1, so when list1 is changed the changes are reflected in the list2 as well."
"Create a function to return the largest element from a list.[3, 9, 6, 2, 5]","def largest_element(lst):
    largest = lst[0]
    for num in lst:
        if num > largest:
            largest = num
    return largest"
Construct a program to remove leading zeros from a string.'00abc',"def remove_leading_zeros(str):
    return str.lstrip('0')"
What are the differences between a class and an object?,"A class is a blueprint or template for objects. It is a definition of the object’s properties, methods and behaviors. An object is an instance of a class, meaning it takes on the properties, methods and behaviors defined by the class. A class can have multiple objects, and each object can have different values for its properties. Objects allow us to model real-world objects in software."
"Create a Python class called ""Person"" with name and age as attributes.","class Person:
 def __init__(self, name, age):
     self.name = name
     self.age = age"
"Create an XML structure with the root element ""recipes"".","<?xml version=""1.0"" encoding=""UTF-8""?>
<recipes>

</recipes>"
"Given a Python dictionary with integer keys, write a function to convert the dictionary into a list of tuples.d = {1: 'a', 2: 'b'}","def dict_to_tuple(d):
  return list(d.items())"
Edit the following string by replacing the spaces with an underscore.This is a sample string,This_is_a_sample_string
Write an R program to find the square of a number,"x <- 5
square_x <- x * x;
print(paste0('The square of ',x,' is ',square_x))"
"Determine the sum of the squares of all even numbers in a given array.[1, 2, 3, 4, 5, 6]","int sum = 0;
for (int i = 0; i < array.length; i++){
    if (array[i] % 2 == 0){
        sum += Math.pow(array[i], 2);
    }
}
return sum;"
Convert a LinkedList to an array of objects,Object[] array = linkedList.toArray();
"Compute the average of a group of numbers[10, 13, 45, 36, 27]","double average = 0;
for (int i = 0; i < numbers.length; i++) {
    average += numbers[i];
} 
average /= numbers.length;"
Create a .Net console application to print a greeting according to the user’s input,"Console.WriteLine(""What is your name?"");
string name = Console.ReadLine();

if (name == ""John"")
    Console.WriteLine(""Hello John!"");
else if (name == ""Sarah"")
    Console.WriteLine(""Good morning Sarah!""); 
else
    Console.WriteLine(""Hi there!"");"
"Write a Python code snippet to calculate the area of a triangle with side lengths 3, 4, and 5.","def area(a, b, c):
    s = (a + b + c) / 2
    return (s*(s-a)*(s-b)*(s-c)) ** 0.5

print(area(3, 4, 5)) # 6.0"
"Write a code snippet using Python to print the following sentence ""Programming is fun!"".","print(""Programming is fun!"")"
What is the time complexity of insertion sort algorithm in big O notation?,O(n^2).
"Rearrange the given array in an ascending order using selection sort algorithm.Array: [2, 8, 5, 3, 9]","function SelectionSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    let min = i;
    for (let j = i+1; j < arr.length; j++) {
      if (arr[j] < arr[min])
        min = j;
    }
    let temp = arr[i];
    arr[i] = arr[min];
    arr[min] = temp;
  } 
  return arr;
}

SelectionSort([2, 8, 5, 3, 9]); // Output: [2, 3, 5, 8, 9]"
"Create a Python program to remove the characters from specific index within a string.mystring = ""Hello, World!""
index = 5","mystring = ""Hello, World!""
index = 5

result = mystring[:index] + mystring[index+1:]

print(""Result after removing characters from index {}: {}"".format(index, result))"
"Edit the given Python code to make the algorithm run faster.def slow_algo(n):
    result = 0
    for i in range(n):
        result += i
    return result","def fast_algo(n):
    result = (n * (n + 1))// 2
    return result"
"Construct a boolean expression using 'or', 'and' and 'not' operators to check if a given number is even.",(num % 2 == 0) or ((not num % 2 == 0) and (not num % 2 == 1))
"Create a Python function to insert a new element in a list at the given index.list1 = [1, 2, 3, 4, 5]
index = 3
element = 6","def insert_element(lst, idx, element):
 lst.insert(idx, element)
 return lst

list1 = insert_element(list1, index, element)
print(list1)"
"Write a function in Python to calculate the Euclidean Distance between two points.point1 = [-1, 0]
point2 = [4, 7]","def euclidean_distance(point1, point2):
 from math import sqrt
 return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))

distance = euclidean_distance(point1, point2)
print(distance)"
"Write the output of this Python code.a = 10
b = 5
c = 6

print(a + b * c)",56
"Run the same transormation to the text using the provided code.Text: ""He was very happy!""
Code: 
text = text.lower()
text = text.replace('!', '.')","""he was very happy."""
"Identify the language used in this code snippet.string a = ""Hello"";
string b = "" World"";

cout << a + b << endl;",C++
"Read through the code and write the expected output.#include <iostream>

int main() 
{
    int x[] = {3, 5, 7, 8};
    for (int i = 0; i < 4; i++) 
    {
        std::cout << x[i] << '\n';
    }
    return 0;
}","3
5
7
8"
"Complete this function to add two matrices.def add_matrices(a, b):
    # TODO: write code to add two matrices
    # matrix a and b have the same dimensions","def add_matrices(a, b):
    # create a new empty matrix, use the same dimensions as a and b
    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]

    # iterate over a and b to complete the matrix addition 
    for i in range(len(a)):
        for j in range(len(a[0])):
            result[i][j] = a[i][j] + b[i][j]

    return result"
Identify the standard algorithm used to solve the following problem.Problem: DNA sequencing,Dynamic Programming (DP).
"Complete the function so that it returns the minimum element in the provided list.def min_element(lis):
    # TODO: write code to find and return the minimum element in the list","def min_element(lis):
    # set min to first element in the list
    min = lis[0]
  
    # iterate over the list and compare each element to 
    # the current minimum. If a smaller element is found, 
    # update min. 
    for x in lis:
        if x < min: 
            min = x
  
    # return min
    return min"
"What is the class of the word ""training"" in the following sentence?She was going for a training session.","Noun, NN."
Identify the correct regular expression for a string that starts with a letter and is followed by any number of letters and numbers.-,^[a-zA-Z][a-zA-Z0-9]*$
"Generate a list of all possible combinations of the given set of numbers.Set of numbers: [1,2,3]","[[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]"
"Assign a correct data type for the given variables.Variable 1: numberOfApples
Variable 2: userName","Variable 1: int
Variable 2: String"
Create a Recursive Function to print out the Fibonacci numbers.Number: 10,"public static int fibonacci(int n) 
{ 
    if (n <= 1) 
       return n; 
    return fibonacci(n-1) + fibonacci(n-2); 
} 
  
// Print first 10 numbers of the fibonacci sequence
for (int i = 0; i < 10; i++) 
    System.out.println(fibonacci(i));"
Create an API endpoint for handling user authentication.Endpoint URL: www.example.com/auth,"@app.route(""/auth"", methods=['POST'])
def auth():
    data = request.get_json()
    username = data.get(""username"")
    password = data.get(""password"")

    user = User.check_user_auth(username, password)
    if user:
        session['username'] = username
        return jsonify(success=True)
    else:
        return jsonify(success=False)"
Create a Sinatra App to send the form data to the server.Form Name: user_form,"require 'sinatra'

post '/user_form' do
  # Process the submission
  ""Form successfully submitted!""
end"
"Construct a lambda function to find all odd numbers in a given list.List of numbers: [2, 3, 7, 8, 10]","list_of_nums = [2, 3, 7, 8, 10]
odd_nums = list(filter(lambda num: num % 2 != 0, list_of_nums))"
"Describe an algorithm to sort an array of integers in increasing order.[4, 3, 1, 9, 11]","A simple bubble sort algorithm can be used to sort an array of integers in increasing order. We start at the beginning of the array and compare each pair of adjacent items and swap them if they are in the wrong order. We repeat this process until the array is sorted. For the input array [4, 3, 1, 9, 11], a single pass of bubble sorting the array would go as follows:
[4, 3, 1, 9, 11] -> [3, 4, 1, 9, 11] -> [3, 1, 4, 9, 11] -> [3, 1, 4, 9, 11] -> [1, 3, 4, 9, 11]. The algorithm is then done since no swaps have been made in the last pass. The final sorted array is [1, 3, 4, 9, 11]."
"Given two string parameters,  s1 and s2, construct a function that returns the longest common subsequence between the two strings.s1 = ""Hello there!""
s2 = ""Hi there!""","def longest_common_subsequence(s1, s2):
    # Init matrix 
    num_rows = len(s1) + 1
    num_cols = len(s2) + 1
    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]
    # Populate matrix
    for r in range(1, num_rows):
        for c in range(1, num_cols):
            if s1[r-1] == s2[c-1]:
                matrix[r][c] = matrix[r-1][c-1] + 1
            else:
                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])
    # Create result
    result = """"
    r = num_rows - 1
    c = num_cols - 1
    while r > 0 and c > 0:
        if s1[r-1] == s2[c-1]:
            result = s1[r-1] + result
            r -= 1
            c -= 1
        elif matrix[r-1][c] > matrix[r][c-1]:
            r -= 1
        else:
            c -= 1
    return result"
Create an algorithm to generate all possible subsets of a given set of elements.,"The following algorithm can be used to generate all possible subsets of a given set of elements:
1. Create an empty list to store the subsets.
2. Iterate over each element in the given set and for each element:
     a. Add the element to the list of subsets.
     b. For each subset in the list:
        i. Create a new subset with the element added to the existing subset.
        ii. Add the new subset to the list of subsets.
3. Return the list of subsets."
"Suggest a possible solution to the following problem: Given an array of integers, find the maximum continuous sum that can be achieved by adding the numbers in the array.","A possible solution to the given problem is to use the Kadane's algorithm. This algorithm iterates through the array and at each iteration, it keeps track of the maximum continuous sum seen so far, and updates it accordingly. At the end of the iteration, the algorithm returns the maximum continuous sum."
"Identify the names of different classes in the following code snippet.class Student: 
    
    def __init__(self, name, roll_number): 
        self.name = name 
        self.roll_number = roll_number 
        
    def print_details(self): 
        print(""Name:"", self.name) 
        print(""Roll number:"", self.roll_number)",Student
"In the following code, identify the list of variables present.def f(x):
    y = 2 * x  
    z = x ** y 
    w = [x, y, z]
    return w","x, y, z, and w"
"Write a Python program to combine the elements of two lists of equal length into a dictionary.list1 = ['a', 'b', 'c'] 
list2 = [1, 2, 3]","dict = {}
for i in range(len(list1)): 
    dict[list1[i]] = list2[i] 
  
print(dict)"
"Create a function which takes a list and a value and returns true if the value is present in the list, otherwise falselist = [1, 2, 3, 4, 5]
val = 3","def check_val(lst, val): 
    return val in lst"
"Generate a function which takes three numbers and returns the smallest.n1 = 5
n2 = 10
n3 = 3","def get_min(n1, n2, n3):
    mins = [n1, n2, n3]
    return min(mins)"
"Identify the data types of the following values:name = ""John""
age = 25","name = str
age = int"
"Create a function to determine the output ofdef my_func(x):
    if x == 0:
        return 1
    else:
        return x * my_func(x-1)

x = 5","def my_func(x):
    if x == 0:
        return 1
    else: 
        return x * my_func (x-1) 

def solve(x): 
    return my_func(x)

x = 5
result = solve(x)
print(result)"
Our program should accept an arbitrary number of integers and output a list of the largest number from each.1 2 3 4 5,"def largest_number(nums):
    largest = []
    for num in nums:
        if len(largest) == 0 or num > largest[-1]:
            largest.append(num)
    return largest

nums = [1,2,3,4,5]
result = largest_number(nums)
print(result)"
"Create a function which takes a string and returns a reversed version of it.string = ""Hello World!""","def reverse_string(string):
    return string[::-1]

string = ""Hello World!""
result = reverse_string(string)
print(result)"
"Create a function which takes a string as an input and checks if it is a palindrome.string = ""level""","def is_palindrome(string): 
    if string == string[::-1]: 
        return True
    return False
  
string = ""level""
result = is_palindrome(string)
print(result)"
"Create a Python function to calculate the area of a triangle using Heron’s formula.a = 4
b = 5
c = 7","def triangle_area(a, b, c):
    """"""Calculate the area of a triangle using Heron's formula""""""
    s = (a+b+c)/2
    return (s*(s-a)*(s-b)*(s-c))**0.5

print(triangle_area(a, b, c))"
"Given a list of integers, find the largest number.test_list = [2, 5, 10, 15]","def largest_number(test_list): 
    max_number = test_list[0] 
    for i in test_list: 
        if i > max_number: 
            max_number = i 
    return max_number"
Write a function to print the first n perfect square numbers.,"def print_perfect_squares(n):
    for i in range(1,n+1):
        square = i*i
        print(square)"
"Create a function that prints a list of all the even numbers from a given list of integers.test_list = [1, 2, 3, 4, 5, 6]","def print_even(test_list):
    even_list = []
    for num in test_list:
        if num % 2 == 0:
            even_list.append(num)
    print(even_list)"
Create a function to print the Fibonacci numbers up to a given number n.,"def print_fibonacci(n):
    a = 0
    b = 1
    while a < n:
        print(a) 
        c = a + b
        a = b
        b = c"
"Given a 2D array, write a program to find the maximum path sum.test_array = [[5, 6, 1],
              [4, 2, 3],
              [7, 8, 9]]","def max_path_sum(test_array): 
    row = max_row = len(test_array) 
    col = max_col = len(test_array[0]) 

    for row in range(max_row - 1, -1, -1): 
        for col in range(max_col): 
            if (row == max_row - 1): 
                test_array[row][col] 
            else: 
           # Choose the route with maximum sum 
                test_array[row][col] += max(test_array[row + 1][col], test_array[row + 1][col + 1]); 
    # Displays the maximum sum 
    print(test_array[0][0]);"
"Create a function to insert an element at a given index into a given list.test_list = [1, 2, 4, 5]
inserted_element = 3
index = 2","def insert_element(test_list, inserted_element, index):
    test_list.insert(index, inserted_element)
    return test_list"
"What is the first index of the substring ""mod"" in the string?string = ""GPT MODEL""",int index = 4
"Write a function to delete a given character from a string.string = ""GPT MODEL""
character = 'M'","def delete_char(string, character):
    new_string = """"
    for char in string:
        if char != character:
            new_string += char
    return new_string"
"Create an array of strings, containing exactly three elements.","string_array = [""element1"", ""element2"", ""element3""]"
Train a linear regression model on a given dataset.dataset = pd.read_csv('dataset.csv'),"X = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X, y)"
"Sort a given array in ascending order using the Gnome sort algorithm.array = [8, 3, 6, 1, 5]","def gnome_sort(array):
    i = 1
    while i < len(array): 
        if array[i-1] <= array[i]: 
            i += 1
        else: 
            array[i-1], array[i] = array[i], array[i-1] 
            i -= 1
            if (i == 0): 
                i = 1
    return array"
Describe the method to find the factorial of a given number.,"The factorial of a given number n is the product of all positive integers less than or equal to n. The factorial of a number can be calculated using a loop to multiple all of the integers up to the given number, or it can be calculated using a recursive method where the factorial(n) = n*factorial(n-1)."
"Create a function called ""sum"" which returns the sum of the two given numbers","def sum(x, y):
    return x+y"
"Write a JS code that returns the items in an alphabetical order.let items = [""Cat"", ""Dog"", ""Elephant"", ""Rabbit"", ""Fox""]","let items = [""Cat"", ""Dog"", ""Elephant"", ""Rabbit"", ""Fox""]

function sortAlphabetically(items) {
  return items.sort();
}

let result = sortAlphabetically(items);
console.log(result);"
Design a class to represent a string with length 20 characters,"public class String20 { 
   private String str;
   private int length;

   public String20(String str)  
   {  
      this.length = 20;
      this.str = str.length()<=length ? str : str.substring(0, length);  
   }  
}"
"Generate an XML format to store the contact information of a customerName: John Smith
Phone: 123456789
Email: john@example.com","<contact>
 <name>John Smith</name>
 <phone>123456789</phone>
 <email>john@example.com</email>
</contact>"
"Write code to increment the value in the variable ""x"" by 3.",x = x + 3;
"Create a class, ""Person"", which represents a person and has two properties, ""name"" and ""age""","public class Person {
     private String name;
     private int age;
     
     public Person(String name, int age){
         this.name = name;
         this.age = age;
     }
     
     public String getName(){
         return this.name;
     }
     
     public int getAge(){
         return this.age;
     }
}"
Write a method which takes 2 parameters and returns the greater one,"def max_num(x, y):
    if x>y:
        return x
    else:
        return y"
Generate a loop in which all the numbers from 1 to 10 will be printed,"for x in range(1,11):
    print(x)"
"Create a new class called ""Rectangle"" with two properties: width and height","class Rectangle {
    int width;
    int height;
    
    public Rectangle (int width, int height){
        this.width = width;
        this.height = height;
    }
}"
Create a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence,"def count_vowels(sentence):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    count = 0
    for char in sentence:
        if char in vowels:
            count += 1
    return count"
Create an algorithm to reverse a linked list in place.,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None 

def reverse_list(head):
    prev = None
    current = head
    while current:
        next = current.next
        current.next = prev
        prev = current
        current = next
    head = prev
    return head"
"Subtract two numbers and return the result.97, 42",55
"Call a user-defined function in Python.def add_two_numbers(x, y):
return x + y","result = add_two_numbers(3, 5)
print(result)  # Outputs 8"
"Calculate the sum of a given list containing any type of elements.[1, 2, 3, 'a', 'b', 4]",sum = 10
Write a regex pattern to match the strings that contain only alphabetic characters.,pattern = /^[a-zA-Z]+$/
Write a code snippet for generating a random number between 1 and 100.,"import random
randomNumber = random.randint(1, 100)"
"If a button is clicked, what code can you write to show an alert?","document.getElementById('button').addEventListener('click', (e)=>{
    alert('Button is clicked!');
});"
"Find the median of three numbers4, 8, 10",8
"Create your own sorting algorithm[3, 6, 4, 7, 1, 2]","def my_sort(arr):
    length = len(arr) 
	for i in range(length): 
		min_ind = i 
		for j in range(i+1, length): 
			if arr[ min_ind ] > arr[j]: 
				min_ind = j 
		arr[i], arr[min_ind] = arr[min_ind], arr[i]
	return arr"
Calculate the reverse of a stringHello World,dlroW olleH
Write a code to read each character of a stringHello World,"for i in range(len(string)): 
   print(string[i], end = """")"
Define the difference between call by value and call by reference,"Call by value: In this method, a copy of the actual argument is passed to the formal argument. Any change made to the formal argument does not affect the actual argument. 

Call by reference: In this method, a reference to the actual argument is passed to the formal argument. Any change made to the formal argument changes the value of actual argument."
"Write a code to check if the content of two strings is the sameHello, World!
Hello World!","if string1.replace(' ', '') == string2.replace(' ', ''):
    print(""The strings have the same content"")
else: 
    print(""The strings do not have the same content"")"
"Calculate the area of the triangle.Base: 8cm
Height: 5cm",The area of the triangle is 20 square centimeters.
Change the variable name of the given example to a lowercase variable.let MyFavoriteMovie = 'The Matrix';,let myFavoriteMovie = 'The Matrix';
Create a for loop for printing out the numbers from 0 to 10.,"for(let i = 0; i < 11; i++){ 
    console.log(i); 
}"
Create an array with 10 integers and sort them in ascending order.,"let array = [9,4,5,6,1,8,2,0,3,7]; 
  
array.sort((a,b) => a-b); 
console.log(array);"
"Print the elements in the array backwards.arr=[1,2,3,4,5]","let arr = [1,2,3,4,5]; 

arr.reverse(); 
console.log(arr);"
Compute the total number of days in a given year.,"def get_total_days_in_year(year):
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        # leap year
        return 366
    else:
        # non leap year
        return 365"
"Fill the gaps in the following code to send an email with an attachment.import smtplib

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from_address = ''
to_address = ''

# create message object instance
message = MIMEMultipart()

# setup the parameters of the message
message['From'] = from_address
message['To'] = to_address
message['Subject'] = ""Testing""

# add in the message body
message.attach(MIMEText('Hello world','plain'))

# TODO: attach a pdf file

# create server
server = smtplib.SMTP('smtp.gmail.com', 587)

# TODO: start server

# TODO: send mail

# TODO: close the connection","import smtplib

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

from_address = ''
to_address = ''

# create message object instance
message = MIMEMultipart()

# setup the parameters of the message
message['From'] = from_address
message['To'] = to_address
message['Subject'] = ""Testing""

# add in the message body
message.attach(MIMEText('Hello world','plain'))

# attach a pdf file
filename = ""example_file.pdf"" 
attachment = open(filename, ""rb"") 

part = MIMEBase('application', 'octet-stream')
part.set_payload((attachment).read())
encoders.encode_base64(part)
part.add_header('Content-Disposition', ""attachment; filename= %s"" % filename)

message.attach(part)

# create server
server = smtplib.SMTP('smtp.gmail.com', 587)

# start server
server.starttls() 
  
# Login 
server.login(from_address, ""password"") 
  
# send mail
server.sendmail(from_address, to_address, message.as_string()) 

# close the connection
server.quit()"
"Create a method to calculate the area of a circle, given its radius as argument.","def calculate_area_of_circle(r):
    return 3.14 * (r**2)"
"Given an array and a target, write a program to search the target in the array and return the index.arr = [5, 10, 20, 25, 30]
target = 20","def search_target_in_array(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1  # element not found"
Suggest an algorithm to remove duplicates from an array.,"def remove_duplicates(arr):
    # Create a seen set
    seen = set()
    # Iterate through the array
    for i in range(len(arr)):
        # If element is already seen, remove it
        if arr[i] in seen:
            del arr[i]
        # Else add element to seen set
        else:
            seen.add(arr[i])
    return arr"
Suggest a way to find the maximum number in an array without using the built-in max() function.,"def find_max(arr):
    max = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max:
            max = arr[i]
    return max"
Write a function to rotate a matrix by 90 degrees.,"def rotate_matrix(matrix):
    m = len(matrix)
    # Create a new matrix
    new_matrix = [[0 for _ in range(m)] for _ in range(m)]
    # Rotate the matrix
    for i in range(m):
        for j in range(m): 
            new_matrix[j][m - i - 1] = matrix[i][j]
    # Return the rotated matrix
    return new_matrix"
"What is the Big O notation for the following algorithm?function add(x, y):
  result = x + y
  return result",O(1)
How do you import the math module in a Python program?,import math
Create a regular expression to match a string that contains only a-z and 0-9 characters.,^[a-z0-9]+$
Search in the API documentation to find all possible parameters that can be used with the API call.,"The API contains the following parameters that can be used with the API call: 
- search queries
- sorting criteria
- filters
- categories
- limit
- offset
- user information
- timestamp"
"Add error handling to the code snippet.def calculate_average(numbers):
    sum = 0
    for number in numbers:
        sum += number
    return sum/len(numbers)","def calculate_average(numbers):
    sum = 0
    if len(numbers) == 0:
        raise ValueError(""list of numbers should not be empty"")
    for number in numbers:
        sum += number
    try:
        return sum/len(numbers)
    except ZeroDivisionError:
        print(""division by 0 attempted"")"
"Use the given test data to debug the following code.def check_odd_even(number):
    if number % 2 == 0:
        print(""even"")
    else:
        print(""odd"")

Test data: 
1. number: 4 
2. number: -7","Test 1:
check_odd_even(4)

Output:
'even'

Test 2:
check_odd_even(-7)

Output:
'odd'"
"Return a valid URL with the given parameters.Domain: example.com 

Endpoint: /api/v1/users

Parameters:

id: 4

name: Alex","The URL is:
https://example.com/api/v1/users?id=4&name=Alex"
Create a loop to print a sequence of numbers from 3 to 10,"for i in range(3, 11):
    print(i)"
"Find the Big O notation of the following codedef factorial(n):
    answer = 1
    for i in range(1, n+1):
        answer *= i
    return answer",The Big O notation of the given code is O(n).
"Rewrite the following code in to a recursive function.def calculate_fibonacci(n):
    a, b = 0, 1
    for i in range(1, n+1):
        a, b = b, a + b
    return a","def calculate_fibonacci(n):
    if n < 0:
        print(""Incorrect input"")

    elif n == 0:
        return 0

    elif n == 1:
        return 1

    else:
        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)"
"Find the bug in the following code.def multiply(x, y):
    z = 0
    while y > 0:
        y = y - 1
        z = z + x
    return z",The bug in the code is that the loop completion condition should be 'while y > 0' and should be changed to 'while y != 0' otherwise the code will enter into an infinite loop when y is negative.
Write an if statement to check whether an entered string is in lowercase,"if string == string.lower():
    print(""The string is in lower case"")
else:
    print(""The string is not in lower case"")"
"Find the minimum element of an array.arr = [5, 2, 7, 4, 9, 1]","min_elem = arr[0]
for elem in arr[1:]:
    if elem < min_elem:
        min_elem = elem
print(min_elem)"
"Create a function to add the corresponding values of two lists.list1 = [3, 5, 2, 4]
list2 = [5, 4, 8, 7]","def add_values(list1, list2):
    result_list = []
    for i in range(len(list1)):
        result_list.append(list1[i] + list2[i])
    return result_list

add_values(list1, list2)"
"Using the given function, find the transpose of the given matrix.matrix = [[2, 3, 4], [1, 5, 3]]

def transpose(arr):","def transpose(arr): 
    transposed_matrix = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))] 
    return transposed_matrix

transpose(matrix)"
"Create a function to sort a given array using selection sort.arr = [5, 8, 1, 7, 2, 10, 3]","def selection_sort(arr): 
    for i in range(len(arr) - 1): 
        min = i 
        for j in range(i+1, len(arr)): 
            if arr[j] < arr[min]: 
                min = j 
        arr[i], arr[min] = arr[min], arr[i]
    return arr"
Manipulate the spreadsheet with Python to identify duplicates in column A.,"def find_duplicates(spreadsheet):
    df = pd.read_excel(spreadsheet)
    return df['A'][df['A'].duplicated(keep=False)]"
Write a parser to convert an XML document to a dictionary.,"from xml.etree.ElementTree import fromstring

def xml_to_dict(xml_string):
    xml_dict = {}
    root = fromstring(xml_string)
    for element in root:
        xml_dict[element.tag] = element.text
    return xml_dict"
Generate code to create a 3 x 3 matrix with values 1 to 9.,"matrix = [[1,2,3], [4,5,6], [7,8,9]]"
Design a program to compute the median of 3 integers.,"def median(a,b,c):
    if a >= b:
        if c >= a:
            return a
        elif b >= c:
            return b
        else:
            return c
    else:
        if c >= b:
            return b
        elif a >= c:
            return a
        else:
            return c"
Write code to print the prime numbers in a given range.,"def is_prime(n):
    for i in range(2,n):
        if n % i == 0:
            return False
    return True

def print_primes(start, end):
    for i in range(start, end + 1):
        if is_prime(i):
            print(i)"
"Generate a sorted list of numbers in an array using insertion sort?arr = [5, 8, 1, 7, 2, 10, 3]","def insertion_sort(arr):
    for i in range(len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and arr[j] > key:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr"
"Create a function to find the length of the longest substring that does not contain duplicate characters.string = ""abcabcefghijklmnop""","def longest_substring(string):
    seen = set()
    start = 0
    max_length = 0
    for end in range(len(string)):
        if string[end] in seen:
            start = max(start, seen[string[end]] + 1)
        seen.add(string[end])
        max_length = max(max_length, end-start+1)
    return max_length"
"Develop a Python code to replace all occurrences of a specified phrase in a string.string = ""This is a sample string. This has to be replaced.""
phrase = ""This""
newString = ""That""","string = string.replace(phrase, newString) 
print(string) 

# Output: 
That is a sample string. That has to be replaced."
"Implement a python function to return ""true"" if the string is a palindrome and ""false"" if it is not","def is_palindrome(s): 
    # Reversing string 
    rev = s[::-1] 
  
    # Checking if reversed string is equal to  
    # original string 
    if (s == rev): 
        return ""true""
    else: 
        return ""false"""
Generate a valid code to sum two given numbers,"def sum_two_numbers(num1, num2):
    return num1 + num2"
Create a code to print each word of a sentence on a new lineThis is a sentence.,"def print_sentence(s):
    words = s.split(' ')
    for word in words:
        print(word)
        
s = ""This is a sentence.""
print_sentence(s)

# Output:
# This
# is
# a
# sentence."
Create a Python program to remove an item from a given list,"def remove_item_from_list(my_list, item):
    if item in my_list:
        my_list.remove(item)
    return my_list"
Create a program to print the sum of all first 10 natural numbers.,"def sum_first_ten_natural_numbers():
    sum = 0
    for i in range(1, 11):
        sum = sum + i
    return sum

print(sum_first_ten_natural_numbers()) 
# Output: 55"
Create a code to check if a number is an Armstrong number or not,"def isArmstrongNumber(num):  
    # initialize
    sum_times_powers = 0
    temp = num  
  
    while (temp != 0):  
        # find remainder and get it
        remainder = temp % 10 
        sum_times_powers += remainder ** 3 
        temp //= 10
  
    if (sum_times_powers == num):  
        return True
    else: 
        return False"
"Using the MapReduce programming model, calculate the total number of purchases in a given dataset.","def purchaseMapper(purchase):
  return (purchase.entity_id, 1)

def purchaseReducer(entity, purchases):
  return (entity, sum(purchases))"
"Create a Python script that takes a list of numbers as an argument and returns the maximum number in the list.numbers = [8, 1, 2, 3, 4, 5, 6, 7]","def maximum_number(numbers):
    max_number = numbers[0]

    for i in range(1, len(numbers)):
        if numbers[i] > max_num:
            max_number = numbers[i]
    
    return max_number

max_number = maximum_number(numbers)
print(max_number) # 8"
Generate a random 8 character password using the following conditions:,"import random
import string

def generatePassword():
    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'
    size = 8
    random_string = """".join(random.choice(chars) for _ in range(size))
    return random_string

random_password = generatePassword()
print(random_password) # qr6.h^37"
Create a while loop in Python to print all odd numbers between two numbers A and B (both inclusive).,"a = int(input(""Enter lower range: ""))
b = int(input(""Enter upper range: ""))

while a <= b: 
    if a % 2 != 0: 
        print(a) 
    a += 1"
Generate a list of prime numbers between two numbers A and B (both inclusive).,"def generate_primes(lower, upper): 
    prime_numbers = [] 
    for num in range(lower, upper + 1): 
        if num > 1: 
            for i in range(2, num): 
                if (num % i) == 0: 
                    break
            else: 
                prime_numbers.append(num) 
    return prime_numbers"
Develop a classifier in Python to predict the language of a given text.,"import nltk

class LanguageClassifier(object):
	
    def __init__(self):
        self.languages = []
	
    def train(self, data):
        train_sents = []
        train_tags = []

        # extract sentences and tags from data
        for lang, sentences in data.items():
            self.languages.append(lang)
            train_sents.extend(sentences)
            train_tags.extend([lang] * len(sentences))

        # build featureset
        feature_set = []
        for (words, lang) in zip(train_sents, train_tags):
            words_dict = dict([(word, True) for word in words])
            feature_set.append((words_dict, lang))
	
        # train classifier
        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)

    def predict(self, sentence):
        words_dict = dict([(word, True) for word in sentence])
        return self.classifier.classify(words_dict)"
Generate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist.,"def sort_by_second_element(lst): 
    lst.sort(key = lambda x: x[1]) 
    return lst"
Take the following algorithm and turn it into a Python program.,"# Function to calculate 
# maximum number of edges 
# that can be added 
# to a graph without cycles 
def max_edges(total_nodes): 
	# initialize result to 0 
	result = 0 
	
	# consider every pair of nodes 
	for i in range(total_nodes): 
		for j in range(i + 1, total_nodes): 
			result += 1  
		
	# return the result 
	return result"
Find the kth smallest element in an array. The array consists of integers only and the size of the array is given.,"def kthSmallest(arr, k): 
	# Sort the given array 
	arr.sort() 

	# Return k'th element in  
	# the sorted array 
	return arr[k-1]"
Develop an algorithm to find the greatest common factor (GCF) of two numbers in Python.,"def gcf(a,b):
    if a == 0 :
        return b 
    return gcf(b % a, a)"
"Rewrite the following python program to convert UTC time to local time.from datetime import datetime, timedelta

utc_time = datetime.utcnow()","from datetime import datetime, timedelta 
import time 

utc_time = datetime.utcnow()
local_time = time.localtime(time.mktime(utc_time.timetuple())) 

print(""Local time: "", local_time)"
Suggest a condition for including an element in an array.,"array.push(element) if element satisfies a certain condition, such as element.value === 5;"
Suggest a code for removing the first element from an array.,"arr.splice(0, 1);"
Suggest code for finding the maximum element in a Python dictionary.,"key_max = max(map_dictionary.keys(), key=(lambda k: map_dictionary[k])) 
val_max = map_dictionary[key_max]"
Suggest a statement for deleting an element from an array at a given index.,"array.splice(index, 1);"
Write a script for reversing the order of alphabets in a string in Python.,"def reverseAlphabets(string): 
    string = ''.join(reversed(string)) 
    return string 
 
string = ""string""
print(reverseAlphabets(string)) # Output: gnirts"
Write a Python script for checking if a given number is an even or odd number.,"""""""
Check a given number is even or odd
""""""
def check_even_or_odd(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""

if __name__ == '__main__':
    num = int(input(""Enter a number to check : ""))
    print(""The given number is"",check_even_or_odd(num))"
Write a code to get the user input for two numbers and print the sum of the two numbers.,"# Get user input for two numbers
num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

# Print the sum of the two numbers
print(""The sum of the two numbers is:"", num1 + num2)"
"Output the number of items in a hashmap with key-value pairs [""Mon"", ""Monday""], [""Tue"", ""Tuesday""], and [""Wed"", ""Wednesday""].","//Create a hashmap
HashMap<String, String> map = new HashMap<String, String>();
map.put(""Mon"", ""Monday"");
map.put(""Tue"", ""Tuesday"");
map.put(""Wed"", ""Wednesday"");

// Output the number of items in the hashmap
System.out.println(""Number of items in the hashmap: "" + map.size());  // Outputs 3"
"Develop a function to remove the given string from another string.String to remove: ""cat""
String to modify: ""The crazy cat jumped to the roof""","def remove_string(remove, string):
    return string.replace(remove, """")

remove_string(""cat"", ""The crazy cat jumped to the roof"")
# Output: ""The crazy  jumped to the roof"""
"Write a block of code to convert a given string to upper case.String to convert: ""The Quick Brown Fox Jumped""","string = ""The Quick Brown Fox Jumped""

converted_string = string.upper()

print(converted_string)  # Output: THE QUICK BROWN FOX JUMPED"
Develop a program to generate the Fibonacci sequence up to n.,"def fibonacci(n):
    fib_sequence = [1, 1]

    for i in range(2, n):
        new_num = fib_sequence[i-2] + fib_sequence[i-1]
        fib_sequence.append(new_num)

    return fib_sequence

fibonacci(10) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"
What is the purpose behind using comments while writing code?,"Comments are used while writing code to explain the logic and purpose behind the code. This is important for multiple reasons, such as helping other developers better understand the code and providing helpful reminders for developers returning to the code at a later time. Additionally, good comments make it easier to debug and maintain the code."
Implement an iterator in Python for the following string.string = 'Hello World!',"class Iterator:
    def __init__(self, data):
        self.data = data
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= len(self.data):
            raise StopIteration
        char = self.data[self.index]
        self.index += 1
        return char

iterator = Iterator(string)
for char in iterator:
    print(char)"
Implement bubble sort in Python.,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]"
"Edit the following line of code to turn the sentence into plural form.sentence = ""I have one friend""","sentence = ""I have two friends"""
Create a Python program to edit the following line of code to change the text color of the button.<button>Press Me</button>,"<button style=""color: red;"">Press Me</button>"
Write a Python method to generate a random string of length 10,"import random
import string

def random_string(length):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))"
Convert the following string to uppercase without using a built-in string method.this is a string,"newString = '';

for (let char of thisString) {
  newString += char.toUpperCase();
}"
Write a Python code to create two empty lists.,"list_one = []
list_two = []"
Suggest an algorithm to solve a N queens problem.,"One possible algorithm to solve a N queens problem is to use backtracking. The basic idea is to place a queen in a column and try to place the other queen in the next column, and then repeating this in the subsequent columns until all of the queens are placed in the board."
"Write a Python code to extract the first 3 elements of the following list.list = [1, 2, 3, 4, 5]",first_three_elements = list[:3]
"You need to classify an email as spam or not spam. Output ""spam"" or ""not spam"".This is an email offering a chance to win a prize.",not spam
What is the significance of the ‘except’ statement in Python?,"The ‘except’ statement in python is used to handle exceptions that may arise while executing a program. Exceptions can be either syntactic or logical errors. The ‘except’ statement can be used to catch the specific type of exception and handle them appropriately. For example, it can be used to catch a ValueError, TypeError or IndexError, or any other type of exception, and appropriately handle it."
Design an algorithm to calculate the Fibonacci sequence up to a given number n.,"We can design an algorithm to calculate the Fibonacci sequence up to a given number n. The algorithm would include two variables, a1 and a2, initially set to 0 and 1. These values would then be updated at each iteration to hold the latest two Fibonacci sequence numbers. A loop would be used to calculate the Fibonacci numbers from 0 up to the given number n. For each iteration, the latest two variables a1 and a2 would be added and stored in the new variable a3. a2 will then be assigned the value stored in a1 and a3 will be assigned to a2. This cycle would continue until the sum of a1 and a2 exceeds the input number n. At that point, the loop would terminate and the Fibonacci sequence will be calculated up to n."
How do we define the scope of a variable in Python?,"In Python, the scope of a variable is determined by the location of its definition. Variables defined within a function have a local scope, while variables defined outside a function have a global scope. Local variables are accessible only within the same function in which they are declared, while global variables are accessible within all functions."
Generate Python code to reverse a stringInput string: Hello,"def reverseString(str): 
    reversed_str = """" 
    for i in str: 
        reversed_str = i + reversed_str 
    return reversed_str   

reverseString(""Hello"")"
Create a for-loop in Python for printing all numbers from 1 to 9 (inclusive).,"for x in range(1, 10): 
  print(x)"
Create a dictionary in Python with two keys and it corresponds to two values.,"my_dict = {""key1"" : ""value1"", ""key2"" : ""value2""}"
Create a regular expression to validate that a string contains only letters between a and z.,/^[a-z]+$/
Modify the given Python code to redirect to a different page when the button is clicked.<button>Visit example.com</button>,"<button onclick=""window.location.href='https://example.com/';"">Visit example.com</button>"
Generate a random string using 8 characters in Python.,"import random 
import string

def generate_random_string(size):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k = size))
    
print(generate_random_string(8))"
How to make an http request in Python,"import requests

r = requests.get('http://www.example.com/')
print(r.text)"
Write a code to check if the string has all unique characters in Python,"def isUnique(string): 
 
    # Assuming character set is ASCII (128 characters) 
    if len(string) > 128: 
        return False
 
    char_set = [False for _ in range(128)] 
    for char in string: 
        char_value = ord(char) 
 
        if char_set[char_value]: 
            return False
 
        char_set[char_value] = True
 
    return True"
Write a code to get the current time in Python,"import time

# return UTC time as a float
current_time = time.time()

# return current time as a string in this format:
# 'Thu Feb 28 15: 16: 14 2019'
current_time_str = time.ctime()"
"Write a script for filtering out records who are older than 18 years old.[
    {
        ""name"": ""John Doe"",
        ""age"": 20
    },
    {
        ""name"": ""Jane Smith"",
        ""age"": 16
    },
    {
        ""name"": ""Dan Roberts"",
        ""age"": 25
    }
]","const data = [
    {
        ""name"": ""John Doe"",
        ""age"": 20
    },
    {
        ""name"": ""Jane Smith"",
        ""age"": 16
    },
    {
        ""name"": ""Dan Roberts"",
        ""age"": 25
    }
];

let filteredRecords = data.filter(record => {
    return record.age > 18;
});

console.log(filteredRecords);"
Write a function in R to calculate the sum of a vector elements.,"my_sum <- function(x) {
  summation <- 0
  for (i in 1:length(x)) {
    summation <- summation + x[i]
  }
  return(summation)
}"
Create an iOS app that calculates and shows the currency conversion rate between two different countries.,"import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        let fromCurrency = ""USD""
        let toCurrency = ""AUD""
        
        CurrencyService.shared.getCurrencyExchangeRate(fromCurrency: fromCurrency, toCurrency: toCurrency) { exchangeRate in
            print(""The exchange rate from \(fromCurrency) to \(toCurrency) is "" + exchangeRate)
        }
    }

}

class CurrencyService {
    
    static let shared = CurrencyService()
    
    func getCurrencyExchangeRate(fromCurrency: String, toCurrency: String, completion: @escaping (String) -> Void) {
        guard let url = URL(string: ""https://api.exchangeratesapi.io/latest?base=\(fromCurrency)&symbols=\(toCurrency)"") else {
            return
        }
        
        URLSession.shared.dataTask(with: url) { (data: Data?, response: URLResponse?, error: Error?) in
            if let error = error {
                print(""Error: Could not request exchange rate from server. \(error.localizedDescription)"")
            }
            
            guard let data = data else {
                print(""Error: Did not receive data"")
                return
            }
            
            do {
                let json = try JSONSerialization.jsonObject(with: data, options: [])
                guard let jsonDict = json as? Dictionary<String, Any>,
                    let rates = jsonDict[""rates""] as? Dictionary<String, Double>,
                    let exchangeRate = rates[toCurrency] else {
                        print(""Error: Could not get exchange rate from JSON"")
                        return
                }
                completion(String(exchangeRate))
            } catch {
                print(""Error: Could not parse JSON: \(error.localizedDescription)"")
            }
        }.resume()
    }
    
}"
"Change the following function to make it into a function that can be called with multiple arguments.def enclose_data(x):
    return 'data:' + x","def enclose_data(*data):
    return 'data:' + ""|"".join(data)"
"Change the following code so that it will only return the words that contain more than 5 characters.def get_words(text):
     return text.split("" "")","def get_words(text):
    return [word for word in text.split("" "") if len(word) > 5]"
"Sort the given array of integers in increasing order.[8, 5, 4, 7, 2, 1]","def sort_int_list(arr):
    sorted_list = sorted(arr)  # use sorted()
    return sorted_list"
"How would you solve the following problem: Given a list of numbers, find the two numbers that add up to a given sum?[3, 6, 2, 8, 4], sum = 10","def find_sum(arr, num):
    found = False
    arr_set = set(arr)
    for i in arr_set:
        x = num - i
        if x in arr_set and x != i:  # make sure the numbers aren't the same
            found = True
            return i, x

    if not found:
        return False"
Change the following code to create a ``Product`` class with a ``price`` attribute.,"class Product:
    def __init__(self, price):
        self.price = price"
"Replace all the ``None`` in the following code to create a valid python statement.def find_min(numbers):
    min = None
    for number in numbers:
        if min is None:
            min = number
        elif number < min:
            min = number","def find_min(numbers):
    min = float('inf')  # use a high value
    for number in numbers:
        if number < min:
            min = number
    return min"
"Identify the issue in the following function and suggest a fixdef print_multiply(x, y):
    for i in range(10):
        print(x*i)","def print_multiply(x, y):
    for i in range(10):
        print(x*y)  # change i to y"
"Convert the following string [""12.1 10.2 6.3 5.4""] into a list of floats.""12.1 10.2 6.3 5.4""","list_floats = [float(x) for x in the_string.split()]
print(list_floats)"
"Write a Python program to convert a given list of lists into a single list.input_list = [[1, 2], [3, 4], [5, 6]]","def flatten_list(list):
 new_list = []
 for sublist in list:
 for item in sublist:
 new_list.append(item)
 return new_list

print(flatten_list(input_list))"
"Write a Python program to swap the first and last element of a given list of integers.numbers = [2, 3, 4, 5, 6]","def swap_first_last(list):
 list[0], list[-1] = list[-1], list[0]
 return list

print(swap_first_last(numbers))"
"Write a Python program to retrieve a specific element from a given list.list = [1, 4, 7, 9, 10]
index = 2","def get_element_by_index(list, index):
 return list[index]

print(get_element_by_index(list, index))"
"Write a Python program to filter out even numbers from a given list.numbers = [2, 4, 6, 8, 10]","def filter_even_numbers(list):
 return [number for number in list if number % 2 == 1]

print(filter_even_numbers(numbers))"
"Write a Python script to combine two given list of strings.list1 = [""Python"", ""Ruby"", ""JavaScript""]
list2 = [""C++"", ""C#"", ""GO""]","def combine_lists(list1, list2):
 combined_list = list1 + list2
 return combined_list

print(combine_lists(list1, list2))"
"Write a Python code to sort the given list of strings alphabetically.lst = [""Java"", ""C++"", ""Go"", ""Python""]","def alphabetical_sort(lst):
 lst.sort()
 return lst

print(alphabetical_sort(lst))"
"Write a Python Evaluator to evaluate Python expression.expression = ""5+3""","def eval_expression(expression): 
 return eval(expression) 
  
# Call the function 
print(eval_expression(expression))"
Create an array with 5 numbers 0-9 randomly.,"[3, 9, 4, 5, 0]"
Create a Python loop that prints numbers from 1 to 20,"for i in range(1, 21):
    print(i)"
Create a Python script that asks the user to input an integer number and display the sum of all the preceding numbers.,"num = int(input(""Please enter an integer number: ""))

sum = 0

for i in range(1, num + 1):
    sum += i
    
print(""The sum of all the preceding numbers is:"", sum)"
Create a function in Python that takes a string as an input and returns TRUE if it is a palindrome or FALSE if it is not.,"def is_palindrome(string): 
    left_pos = 0
    right_pos = len(string) - 1
    
    while right_pos >= left_pos: 
        if not string[left_pos] == string[right_pos]: 
            return False
        left_pos += 1
        right_pos -= 1
    return True"
What is an abstract class?,An abstract class is a special type of class which is only partially implemented. It contains one or more abstract methods which are methods that do not have any concrete implementation. Abstract classes cannot be instantiated and can only be used as base classes for other classes.
"Create a variable in Python that stores the value ""Hello World!""","message = ""Hello World!"""
"Create an algorithm to detect if a given sentence contains any words that are offensive.The following sentence contains a few offensive words: ""This stupid jerk is a complete moron!""","def detect_offensive_words(sentence):
offensive_words = [""stupid"", ""jerk"", ""moron""]
words = sentence.split("" "")

for word in words:
 if word in offensive_words:
 return True
 
return False"
Write a Python function that validates a given credit card number.,"def validate(number):
"""""" Validate credit card number using Luhn algorithm """"""
 
  num = [int(x) for x in str(number)]
  return (sum(num[::-2] + [sum(divmod(d*2,10)) for d in num[-2::-2]]) % 10 == 0"
"Write a Python script to extract text from a given PDF page.A PDF page with this content:

This is an example PDF page.

It contains text of varying lengths, from short one-word sentences to long multi-sentence paragraphs.","import PyPDF2
 
#open the pdf
pdfFileObj = open('example.pdf', 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
 
#get the text from the specified page
pageObj = pdfReader.getPage(0)
 
#print the text from the page
print(pageObj.extractText())"
"Create a function that converts a given number of days into a more readable format of years, months and days.","def years_months_days(days):
    years = int(days // 365)
    months = int((days % 365) // 30)
    days = int((days % 365) % 30)
 
    return (years, months, days)"
"Write a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array.[[1, 2, 3],
[4, 5, 6],
[7, 8, 9]]","def adjacent_numbers(array):
    # Create a set of all possible adjacent numbers
    # and add each array element to the set
    adjacent_set = set()
    for sublist in array:
        for element in sublist:
            adjacent_set.add(element)
 
    # Iterate over each array element and its neighbours
    for i in range(len(array)):
        for j in range(len(array[0])):
            # Check if the neighbour (left, right, top, bottom) exists
            if i+1 < len(array):
                adjacent_set.add(array[i+1][j])
            if i-1 >= 0:
                adjacent_set.add(array[i-1][j])
            if j+1 < len(array[0]):
                adjacent_set.add(array[i][j+1])
            if j-1 >= 0:
                adjacent_set.add(array[i][j-1])
 
    # Remove the original elements from the set
    for elem in array:
        for a in elem:
            adjacent_set.remove(a)
 
    return list(adjacent_set)"
Write a TensorFlow script to build a 3-layer neural network classifier.,"import tensorflow as tf
 
#Create placeholders
X = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])

#Create first layer
W1 = tf.Variable(tf.truncated_normal([784, 300], stddev=0.1))
b1 = tf.Variable(tf.zeros([300]))
A1 = tf.nn.relu(tf.add(tf.matmul(X, W1), b1))

#Create second layer
W2 = tf.Variable(tf.truncated_normal([300, 100], stddev=0.1))
b2 = tf.Variable(tf.zeros([100]))
A2 = tf.nn.relu(tf.add(tf.matmul(A1, W2), b2))

#Create third layer
W3 = tf.Variable(tf.truncated_normal([100, 10], stddev=0.1))
b3 = tf.Variable(tf.zeros([10]))
A3 = tf.nn.sigmoid(tf.add(tf.matmul(A2, W3), b3))

#Define cross-entropy loss
loss = tf.reduce_mean(-tf.reduce_sum(y*tf.log(A3), reduction_indices=[1]))

#Define the accuracy
correct_prediction = tf.equal(tf.argmax(A3,1), tf.argmax(y,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

#Train the model
train_op = tf.train.AdamOptimizer(1e-4).minimize(loss)"
"Create a for loop to iterate through a list of numbers and print out the sum of all the numbers in the list.my_list = [1,2,3,4,5]","total = 0
for num in my_list:
    total += num
print(total)"
Generate a list of 10 random integers between 50 and 100.,"import random
rand_num_list = [random.randint(50, 100) for i in range(10)]
print(rand_num_list)"
Write a function to construct a new string by appending the provided string to itself.my_string = 'Hello',"def append_string(my_string):
    return my_string + my_string

final_string = append_string(my_string)
print(""Final string:"", final_string)"
"Given a comma separated string, write a Python program to convert the string into a list.my_string = ""Hello,World,Hi""","my_list = my_string.split(',')
print(""List:"", my_list)"
"Create a function to output a nested dictionary from a given list of keys and values.list_keys = [""a"", ""b"", ""c""]
list_vals = [1, 2, 3]","def dictionary(list_keys, list_vals):
    dict1 = dict(zip(list_keys, list_vals))
    return dict1

final_dict = dictionary(list_keys, list_vals)
print(""Final dictionary:"", final_dict)"
"Create a function to detect if two given strings are anagrams or not.str1 = 'abc'
str2 = 'bac'","def is_anagram(str1, str2):
    word1 = ''.join(sorted(str1))
    word2 = ''.join(sorted(str2))
    if word1 == word2:
        return True
    return False

result = is_anagram(str1, str2)
print(""Is anagram:"", result)"
Write a function to parse a given string and construct a dictionary which contains each word and the corresponding frequency.my_string = 'Hello World',"def word_count(my_string): 
    words = my_string.split()  
    frequency = {} 
    for word in words: 
        if word in frequency: 
            frequency[word] += 1
        else: 
            frequency[word] = 1
    return frequency

frequency_dict = word_count(my_string)
print(""Frequency dictionary: "", frequency_dict)"
"Create a function that takes in a list of numbers and returns a list of the same numbers, but sorted in a descending order.nums = [6, 5, 8, 2, 7, 5]","def sort_desc(nums):
    return sorted(nums, reverse=True)"
"Make a class called 'Car' that stores information about a car and contains a function called 'start' which when called, prints out ""Car has started"".","class Car:
    def __init__(self):
        self.model = """"
        self.year = 0
    
    def start(self):
        print(""Car has started"")"
"Create a function to count the number of characters in a string, without using the len() function.","def count_characters(string):
    count = 0
    for char in string:
        count +=1
    return count"
Create a function that returns the `n`th number in the Fibonacci sequence.,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)"
Write a function to find the highest prime number that can be divided by a given number.,"def highest_prime(num):
    highest_factor = 0
    for i in range(1, int(num**0.5)+1):
        if num % i == 0 and is_prime(i):
            highest_factor = i
    return highest_factor

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5)+1):
        if num % i == 0:
            return False
    return True"
Convert a given string to camel case.,"def to_camel_case(string):
    result = """" 
    for word in string.split(' '): 
        result += word.title() 
    return result"
Create a function that takes two integers a and b and returns the sum of the two values.,"def sum(a, b): 
    return a + b"
Generate a valid regex pattern that finds instances of the word “unicorn” appearing at the end of a sentence.,\bunicorn\b\.$
"Create a function that takes two strings and removes all the white spaces from them.string_1 = ""Hello World !""
string_2 = ""  Goodbye!  ""","def remove_whitespace(string_1, string_2):
    return string_1.replace("" "", """") + string_2.replace("" "", """")"
"Create a function that takes two arguments: the number of apples and oranges and returns the total number of fruits.apples = 3
oranges = 5","def count_fruits(apples, oranges):
    return apples + oranges"
"Suggest a solution to the following problem: given an array of numbers, find all pairs of numbers whose product is equal to the given target number.arr = [1,5,3,2], target = 10","def find_pairs(arr, target):
	pairs = []
	for i in range(len(arr)):
		for j in range(i+1, len(arr)):
			if arr[i]*arr[j] == target:
				pairs.append((arr[i], arr[j]))
	return pairs"
Generate a program to reverse a user inputted string.,"def reverse_string():
    string = input(""Enter a string: "")
    reversed_string = string[::-1]
    return reversed_string"
"How can we make the following model more efficient?import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten

model = Sequential()
model.add(Dense(32, activation='relu', input_dim=128))
model.add(Dense(32, activation='relu'))
model.add(Flatten())
model.add(Dense(1, activation='sigmoid'))","We can make this model more efficient by increasing the number of neurons in each layer to 64 and by reducing the number of layers to 3. Furthermore, we can use Conv2D layers instead of Dense layers to increase efficiency and reduce the model size. Additionally, we can use ""dropout"" layers to regularize and reduce overfitting. Finally, we can use the ""Adam"" optimizer to improve the accuracy of the model."
"Implement a function that will sort the array using insertion sort.nums=[5,2,4,6,1,3]","def insertion_sort(nums):
    for i in range(1,len(nums)):
        item_to_insert = nums[i]
        j = i - 1
        while j >= 0 and nums[j] > item_to_insert:
            nums[j+1] = nums[j]
            j -= 1
        nums[j+1] = item_to_insert

    return nums


if __name__ == '__main__':
    nums = [5,2,4,6,1,3]
    print(insertion_sort(nums)) # Output: [1, 2, 3, 4, 5, 6]"
"Create a function that takes two strings as arguments, and decides if either of them is a palindrome.str_1 = ""racecar""
str_2 = ""noon""","def is_palindrome(str_1, str_2):
    str_1_reverse = str_1 [::-1]
    if str_1 == str_1_reverse or str_2 == str_2[::-1]:
        return True
    else:
        return False

if __name__ == '__main__':
    str_1 = ""racecar""
    str_2 = ""noon""
    print(is_palindrome(str_1, str_2)) # Output: True"
"Create a function that takes two strings as arguments and checks if the two strings are anagrams (same letters arranged differently).str_1 = ""rat""
str_2 = ""tar""","def is_anagram(str_1, str_2):
    str_1 = sorted(str_1)
    str_2 = sorted(str_2)

    if str_1 == str_2:
        return True
    else:
        return False

if __name__ == '__main__':
    str_1 = ""rat""
    str_2 = ""tar""
    print(is_anagram(str_1, str_2)) # Output: True"
"Implement a function that will return the intersection of two given arrays.arr_1 = [2,3,4,7]
arr_2 = [1,3, 5, 6, 7]","def intersection(arr_1, arr_2):
    intersect = []

    for i in arr_1:
        if i in arr_2:
            intersect.append(i)

    return intersect

if __name__ == '__main__':
    arr_1 = [2,3,4,7]
    arr_2 = [1,3, 5, 6, 7]
    print(intersection(arr_1, arr_2)) # Output: [3, 7]"
"Fill in the missing code so that it prints the second element of each list.my_list = [[1,2,3],[4,5,6],[7,8,9]]","for lst in my_list:
    print(lst[1])"
"Write a code that performs binary search on a given list.my_array = [1,3,5,7,9]","def binary_search(my_array, x): 
    start = 0
    end = len(my_array) - 1
  
    while start <= end: 
  
        mid = (start + end) // 2 # calculate mid
  
        # Check if x is present at mid 
        if my_array[mid] < x: 
            start = mid + 1
  
        # If x is greater, ignore left half 
        elif my_array[mid] > x: 
            end = mid - 1
  
        # If x is smaller, ignore right half 
        else: 
            return mid 
    # If we reach here, then the element 
    # was not present 
    return -1"
"Implement a code that will group a series of numbers into groups of three.nums = [1, 2, 3, 4, 5, 6]","def group_three(nums): 
    result = []
    nums_length = len(nums)

    for index in range(0, nums_length, 3):
        result.append(nums[index:index + 3])

    return result

if __name__ == '__main__':
    nums = [1, 2, 3, 4, 5, 6]
    print(group_three(nums)) # Output: [[1, 2, 3], [4, 5, 6]]"
"Write a code that will produce a list containing the first and last element of each inner list inside a list of lists.my_list = [[1,2,3], [4,5,6], [7,8,9]]","def get_first_and_last(my_list):
    result = [] 
    for lst in my_list:
        result.append([lst[0], lst[-1]]) 
    return result

if __name__ == '__main__':
    my_list = [[1,2,3], [4,5,6], [7,8,9]]
    print(get_first_and_last(my_list)) # Output: [[1, 3], [4, 6], [7, 9]]"
How can we check whether a given number is prime or not using a loop?num = 17,"def is_prime(num):
    if num < 2: 
        return False

    for i in range(2, num):
        if num % i == 0:
            return False
    return True

if __name__ == '__main__':
    num = 17
    print(is_prime(num)) # Output: True"
Write a Python script to generate Fibonacci sequence upto n,"def generate_fibonacci(n): 
    FibArray = [0, 1] 
    while len(FibArray) < n: 
        FibArray.append(FibArray[-1]+FibArray[-2]) 
  
    return FibArray"
"Write a function to shift the elements of a list by one position to the left.[2, 4, 6, 8]","def shift_left(arr): 
    # Shifting the array elements from position 1 to n-1 
    for i in range(1, len(arr)): 
        arr[i - 1] = arr[i] 
  
    # Replacing the last element with 0 
    arr[len(arr) - 1] = 0
    return arr"
"Write a Python script to print out the max and min values from the given list.[2,10,18,24,36,95]","list = [2,10,18,24,36,95]
max_value = max(list)
min_value = min(list)
print(""Max value: "", max_value)
print(""Min value: "", min_value)"
"Write a code to sort a list of integers from smallest to largest[19, 5, 96, 36]","def sort_list(lst):
    lst.sort()
    return lst"
How can we increment the counter by 20 without manually specifying the value 20?counter = 0,counter += 20; // Increment counter by 20 without using the number 20 directly.
Write a function in Python to print out the sum of the squares of its input.,"def sum_of_squares(nums):
    """"""This function calculates the sum of the squares of a given list of numbers""""""
    return sum(x**2 for x in nums)"
How can we join two lists in Python?,"list1 = [1, 2, 3]
list2 = [4, 5, 6]

# Join two lists
list3 = list1 + list2"
"resolve the following compile-time error in the program#include <stdio.h>

int main()
{
    int a = 1, 3;
    printf(""%d"", a);
    return 0;
}","#include <stdio.h>

int main()
{
    int a = 1; // Removed `3` which caused a compile time error 
    printf(""%d"", a);
    return 0;
}"
"Create a loop that prints the values from a and b in the ascending order.a = 5
b = 10","# Initialize variable
a = 5
b = 10

# Loop for print in ascending order
for i in range(a,b+1):
    print(i)"
How can we evaluate a given Python expression dynamically?,"We can use the eval() function to evaluate a Python expression dynamically. 

Example:

expr = '2 + 3'
result = eval(expr) # result will be 5"
"Write a python code to multiply two given numbers.x = 10
y = 5","# Multiply two given numbers
x = 10
y = 5

# Calculate the multiplication
result = x * y
print(result) # Output: 50"
Find the most frequently occurring element in an array.,"def most_frequent_element(arr): 
    # Create a dictionary to store the frequency of each element
    freq = {} 
    max_freq = 0
    max_freq_elem = -1
    
    # Iterate through an array 
    for elem in arr: 
        if elem in freq.keys(): 
            freq[elem] += 1
        else: 
            freq[elem] = 1
  
    # Find the most frequent element
    for key,val in freq.items(): 
        # Update the maximum frequency and the corresponding element
        if (max_freq < val): 
            max_freq_elem = key 
            max_freq = val 
    return max_freq_elem"
How can we remove duplicate elements from a given array?,"We can use a set data structure to remove duplicate elements from a given array. Sets are collections of unique elements, so when the elements are added to the set, the duplicate elements are automatically removed.

Example:

arr = [1,2,3,3,4,5,5]
arr = list(set(arr)) # arr will be [1,2,3,4,5]"
Output all the prime numbers between 1 and 50.,"# Output all the prime numbers between 1 and 50

for num in range(1,51):
   # prime numbers are greater than 1
   if num > 1:
       for i in range(2,num):
           if (num % i) == 0:
               break
       else:
           print(num)
           
# Output: 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47"
Write a TensorFlow code to classify MNIST.,"# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Reshape and normalize the input data
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# Build the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train and evaluate the model
model.fit(x_train, y_train, epochs=10)
model.evaluate(x_test, y_test)"
"Take input of a Python list and return its reversed versionlist_in = [3,5,7,9]","list_in.reverse() 
list_out = list_in 
print(list_out) 

# Output 
# [9,7,5,3]"
Write a regular expression to match all valid UK postcodes.,"^([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))[0-9][A-Za-z]{2})$"
"Create an R function to find the mode of a given data setdata.set = c(1,2,3,3,3,4,5)","mode <- function(x) {
  freq <- table(x)
  maxfreq <- max(freq)
  vars <- names(freq)[freq == maxfreq]
  return(vars)
}

mode(data.set) 

# Output
# [1] 3"
Create a Python program to convert a given number of inches to centimetersinches = 5,"def convert(inches): 
    cm = inches * 2.54
    return cm 
  
# Convert inches to cm 
result = convert(5) 
  
# Output 
print(""5 inches ="",result,""cm"") 

# Output
# 5 inches = 12.7 cm"
"Write a Python program to sort the list of dictionaries by values in ascending order.data = [{'name': 'John', 'age': 23}, 
        {'name': 'Joe', 'age': 28}, 
        {'name': 'Jack', 'age': 25}]","def sort_by_age(data):
  return sorted(data, key=lambda k: k['age'], reverse=False)

sorted_list = sort_by_age(data)
print(sorted_list)"
List all the days of the week in a comma-separated string.,"""Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday"""
Print out all the numbers between 1 and 100 that are divisible by 3.,"for i in range (1, 101):
  if i % 3 == 0:
    print(i)"
Create a function in Scala that takes a parameter x and returns the square of x.,"def square (x: Int) : Int = 
  x * x"
"Encrypt a given string using AES encryption algorithm.String: 'Hello, world!'
Key: '1234'","final String encryptionKey = ""1234"";
final String plainText = ""Hello, world!"";
try {
    Cipher cipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
    SecretKeySpec secretKey = new SecretKeySpec(encryptionKey.getBytes(), ""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, secretKey);
    String encryptedString = Base64.getEncoder().encodeToString(cipher.doFinal(plainText.getBytes(""utf-8"")));
} catch (Exception ex) 
{ 
    System.err.println(""AES encryption error: "" + ex.getMessage()); 
}"
Write a Python method to determine if a string contains all unique characters.string variable: str =“Im so excited to learn GPT”,"def isUnique(str): 
	str_set = set() 
	for ch in str: 
		if ch in str_set: 
			return False
		else:
			str_set.add(ch)
			
	return True"
Generate code to create an array of 5 random integers between 0 and 10.,"arr = [];
for(let i=0; i<5; i++){
    arr.push(Math.floor(Math.random() * 11));
}

// Result: arr = [4, 6, 8, 2, 9]"
What is the algorithm complexity of Insertion Sort?,"The algorithm complexity of Insertion Sort with n elements is O(n^2). It is an in-place comparison-based sorting algorithm. It has a time complexity of O(n^2) in the worst case, and it has a space complexity of O(1)."
What is the difference between preemptive multitasking and non-preemptive multitasking?,"Preemptive multitasking is a form of multitasking in which the operating system slices the CPU time and dedicates a slot to each of the programs. The operating system may terminate the process at any given point of time and switch to another process. It depends on the priority of the process. 

Non-preemptive multitasking is a form of multitasking in which the operating system does not slice the CPU time in between processes and processes are given CPU time to complete their execution. It does not depend on the priority of the process."
"Given a string and an integer, write a program to compare the string with the integer and return the longer string.my_string = ""Hello""
my_int = 1","def compare_str_int(str, num):
    if len(str) > num:
        return str
    else:
        return ""{i} is greater than {s}"".format(i=num, s=str)

my_string = ""Hello""
my_int = 1
print(compare_str_int(my_string, my_int))"
"Using the list as an example, remove all elements from the list that have a value of 0.my_list = [0, 5, 7, 0, 9]","my_list = [5, 7, 9]
 
my_list = [0, 5, 7, 0, 9]
my_list = [x for x in my_list if x != 0]
print(my_list)"
"Using the dict as an example, add a key-value pair to the dict.my_dict = {1: 'a', 2: 'b'}","my_dict = {1: 'a', 2: 'b', 3: 'c'}

my_dict = {1: 'a', 2: 'b'}
my_dict[3] = 'c'
print(my_dict)"
"Given a string and an integer, write a code to find the index of first occurrence of the integer in the string.my_string = ""abcdef""
my_int = 2","def find_index(str, num):
    for i in range(len(str)):
        if str[i] == num:
            return i
    return -1
 
my_string = ""abcdef""
my_int = 2
print(find_index(my_string,my_int))"
Create a function in Python to generate a Fibonacci sequence.,"def fibonacci_sequence(n):  
    a = 0 
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else:  
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Create a scatterplot of some toy dataset using a python library.import numpy as np
X_train = np.array([[1,2], [3,4], [5,6]])
Y_train = np.array([1,2,3])","import matplotlib.pyplot as plt
plt.scatter(X_train[:, 0], X_train[:, 1], c=Y_train)"
"Construct a simple linear regression model using a training dataset.import numpy as np
X_train = np.array([[1,2], [3,4], [5,6]])
y_train = np.array([2, 4, 6])","from sklearn.linear_model import LinearRegression 

# create LinearRegression model 
model = LinearRegression() 
  
# train the model using the training sets 
model.fit(X_train, y_train)"
"Train a machine learning model for text categorization with an input text and labels.Text = ""This is an example of text""
Labels = [""example"", ""text""]","from sklearn.svm import SVC

# Create a support vector machine for text categorization
clf = SVC()

# Train the model
clf.fit(Text, Labels)"
"Implement a binary search algorithm with a given input array.arr = [2, 3, 4, 8, 10, 42, 56, 78, 89]","// Binary Search Algorithm 

function binarySearch(arr, x) { 
  
    let start=0, end=arr.length-1; 
          
    // Iterate while start not meets end 
    while (start<=end) { 
  
        // Find the mid index 
        let mid=Math.floor((start + end)/2); 
  
        // If element is present at mid, return True 
        if (arr[mid]===x) return true; 
  
        // Else look in left or right half accordingly 
        else if (arr[mid] < x)  
             start = mid + 1; 
        else
             end = mid - 1; 
    } 
  
    return false; 
}"
"Determine the number of unique numbers from the given array of numbers.arr = [14, 12, 13, 11, 15]","// Function to find the number of unique numbers

const findUnique = (arr) => {
    let unique = arr.filter((num, i)=> arr.indexOf(num) === i);
    return unique.length;
}

console.log(findUnique(arr)); 
// Output: 5"
"Create a program to accept two strings and find if one string is a substring of the other or not.'abc', 'ccc'","def is_substring(s1, s2):
  return s1 in s2"
Create an algorithm to calculate the Fibonacci series up to n numbers where n is a given number.,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
Write a code snippet in Python for converting Unix timestamp to date and time.1594102055,"import datetime
 
# Unix timestamp
unix = 1594102055
 
# Convert Unix timestamp to Date
date_time = datetime.datetime.fromtimestamp(unix).strftime('%Y-%m-%d %H:%M:%S')
 
print(""Date & Time (UTC):"", date_time)"
What is the best data structure for searching a value in a large set of data?,"The best data structure for searching a value in a large set of data is a data structure that supports fast search and retrieval of data such as a hash table or a binary search tree. Hash tables are particularly efficient because they allow for constant time search and retrieval, while binary search trees have a time complexity of O(log n). Additionally, hash tables are typically more space efficient than binary search trees. However, binary search trees also have their uses, as they allow for data to be sorted and can easily handle dynamic changes in the size of the data set."
"Estimate the memory usage of the following array of integers.nums = [1, 4, 5, 8, 12, 15]",The memory usage of the given array of integers is approximately 48 bytes. This is because each integer takes up 4 bytes of memory and there are 6 integers in the given array.
"Split a string by a number greater than the length of the string in Python.string = ""Hello World""","split_string = string[:11]
print(split_string) # Output = ""Hello World"""
How would you remove all punctuation marks in a given string?,"We can remove all punctuation marks in a given string by using the regular expression library in Python. We can create a pattern and use the re.sub() function to replace a matched pattern and remove the punctuation marks from the given string. This can be done with the following code:

import re 

string = ""This is a test string! With [special] ^characters.""

remove_punct = re.sub(r'[^\w\s]','',string) 

print(remove_punct) # Output = This is a test string With special characters"
"Pack a dictionary with the key-value pairs {'a':1, 'b':2, 'c':3, 'd':4} into a list.","dictionary = {'a':1, 'b':2, 'c':3, 'd':4}

packed_list = [list(dictionary.keys()), list(dictionary.values())]

print(packed_list) # Output = [['a', 'b', 'c', 'd'], [1, 2, 3, 4]]"
What type of sorting algorithm can be used to sort a list of integers without using comparisons?,"Counting sort is an sorting algorithm that can be used to sort a list of integers without using comparisons. Counting sort works by counting the number of elements with each value, then constructing the sorted output from the counts. It is an efficient algorithm, with a time complexity of O(n+k) where n is the number of elements in the list and k is the range of integers."
Suggest a way to explore a large dataset efficiently in Python.,"We can explore a large dataset efficiently in Python by using the built-in Pandas library. The features of the Pandas library, such as its ability to read CSV files, make it a great tool for exploring large datasets. Additionally, Pandas provides convenient methods such as head() and tail() to quickly explore the first and last elements of a dataset, as well as info() and describe() methods to provide a better understanding of the entire dataset."
"Use a for loop to iterate over the elements of a list and print the total number of elements.mylist = [1, 2, 3, 4]","total = 0
for i in mylist:
    total += 1
print(""The total number of elements is:"", total)"
"Rewrite the given python program to generate the same output but using a while loop instead of a for loop.mylist = [1, 2, 3, 4, 5]
for i in mylist:
    print(i)","i = 0
mylist = [1, 2, 3, 4, 5]
while i < len(mylist):
    print(mylist[i])
    i += 1"
"Write a piece of code to create a new dictionary with the same keys as an existing dictionary, but with the values multiplied by 2.mydict = {'a': 1, 'b':2, 'c':3}","mydict_doubled = {}
for key, value in mydict.items():
    mydict_doubled[key] = value * 2"
"Write a piece of code to merge two arrays into one.array1 = [ 1, 2, 3]
array2 = [ 4, 5, 6]",merged_arrays = array1 + array2
Perform string manipulation to generate the word 'happy' by starting with the word 'sad',"word = 'sad'
word = word[0] + word[2:] + 'py'"
"Create a code snippet to print the words ""hello world"" three times.","for i in range(3):
    print(""hello world"")"
"Change the given Python code to an equivalent expression using list comprehension.mylist = []
for x in range(1, 10):
    mylist.append(x*x)","mylist = [x*x for x in range(1, 10)]"
"Update the function such that it returns the sum of two numbers.def add(a, b):
 return a","def add(a, b):
 return a + b"
"Create an array of strings sorted by length.array = [""dog"", ""cat"", ""horse"", ""elephant""]","sorted_array = [""dog"", ""cat"", ""horse"", ""elephant""]
sorted_array.sort(key=len)"
"Print the textual representation of a given BST.4
   /   \
  2     7
 / \   / \
1   3 6   9","def print_tree(root):
 if root is not None:
 print(root.val)
 print_tree(root.left)
 print_tree(root.right)"
Insert the English equivalent of the following regular expression:^.*[1-9].*$,This regular expression matches any string that contains at least one number.
"Write a Python loop to find the number of elements in a given list that are between 0 and 10 (inclusive).array = [3, 7, 11, 15]","def count_elements(array):
 count = 0 
 for item in array:
 if 0 <= item <= 10:
 count += 1
 return count"
"Rewrite the following code so that it is more efficient.odds = []
for num in range(10):
 if num % 2 != 0:
 odds.append(num)",odds = [num for num in range(10) if num % 2 != 0]
"Update the program to print the sum of two numbers given as input.def add(a, b):
 print(a)","def add(a, b):
 print(a + b)"
Generate a random series of 5 numbers.,"[7, 9, 12, 4, 8]"
"Generate a unique number from given two numbers.Number 1: 12
Number 2: 24","num = str(12) + str(24)
unique_num = int(num)"
Write a Python script to fetch the top 10 latest YouTube videos.,"import requests
import json

#Generating Youtube API URL
url = 'https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=10&regionCode=US&key={YOUR_API_KEY}'

#Sending a GET request to API for obtaining data
response = requests.get(url)

#Data parsing and extracting top 10 latest YouTube Videos
data = json.loads(response.text)
latest_videos = []
for items in data['items']:
    latest_videos.append(items['snippet']['title'])

print(""Top 10 latest videos : "")
for item in latest_videos:
    print(item)"
Generate the Fibonacci series for the given number.Number: 10,"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
"Sort the given list of integer numbers from lowest to highest.[6, 3, 4, 5, 9, 1]","[1, 3, 4, 5, 6, 9]"
Write a python snippet to reverse the words in a sentence.This sentence should be reversed.,''.join(reversed(sentence.split()))
Describe how to use a while loop in python.,"A while loop in Python is a loop that runs until a certain condition is met. The syntax is similar to an if statement, but the condition is evaluated after each iteration of the loop. The code within the loop is executed until the condition evaluates to False.

Example:

i = 0
while i < 10:
    print(i)
    i += 1

This will print out the numbers from 0 to 9 as the condition is evaluated after each iteration."
"Calculate the sum of the squares of the given number array.[2, 3, 4]",29 (2^2 + 3^2 + 4^2 = 4 + 9 + 16 = 29)
How can we select unique elements from a list in Python?,"We can select unique elements from a list in Python using the set() and list() functions. The set() function takes an iterable object, such as a list, and returns the unique elements of that object in the form of a set. The list() function takes the set and returns its elements as a list.

Example:

original_list = [1, 2, 3, 1, 4, 2]
unique_list = list(set(original_list))

print(unique_list)

Output: [1, 2, 3, 4]"
"Find the second highest value in the given array.[9, 2, 7, 4, 11, 6]",7 (second highest value is 7)
"Write a for loop in Python to sum up the elements of an array.[5, 9, 2]","arr = [5, 9, 2]
total = 0

for num in arr:
    total+=num

print(total)

Output: 16"
Write a while loop in Python which prints numbers from 1 to 10.,"i = 1
while i <= 10:
  print(i)
  i += 1"
Identify how the given number can be represented as a binary number.Number: 190,10111110
"Given a numeric array and a length, find the longest increasing subsequence in the array.Array: [3, 4, 1, 5, 10, 9, 8, 11]
Length: 8","[3, 4, 5, 10, 11]"
Split the following sentence into tokens.Sentence: I cannot wait to go to the movies.,"['I', 'can', 'not', 'wait', 'to', 'go', 'to', 'the', 'movies', '.']"
"Use an `if` statement to check if the variable `x` is equal to 10.Variable: x
Value: 10","if (x == 10) {
  // code to execute
}"
Create a python function to return the highest value in a given list of numbers.,"def get_max(list):
    max_value = list[0]
    for value in list:
        if value > max_value:
            max_value = value
    return max_value"
How would you write a code to calculate the area of a circle given a radius r?,"double area_circle(double r) {
  double area = 3.14*r*r;
  return area;
}"
Create an recursive algorithm in Python to find the nth number in Fibonacci sequence.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)"
What is an example of a bubble sort algorithm?,"Example of a bubble sort algorithm:

void bubble_sort(int arr[], int n) 
{ 
   int i, j; 
   for (i = 0; i < n-1; i++)           
       for (j = 0; j < n-i-1; j++)  
           if (arr[j] > arr[j+1]) 
              swap(&arr[j], &arr[j+1]); 
}"
Design a Python function that computes the sum of two numbers.,"def sum_two_numbers(num1, num2):
    """"""
    This function will take two numbers as inputs and return their sum.
    """"""
    return num1 + num2"
Write a code in Go that checks if a number is prime or not.,"func isPrime(n int) bool {
    for i := 2; i <= n/2; i++ {
        if n%i == 0 {
            return false
        }
    }
    return n > 1
}"
"Implement a function in Python 3 to get the largest element from a sequence.numbers = [2, 4, 7, 8, 10]","def get_largest_element(seq):
  return max(seq)

#Usage 
largest_element = get_largest_element(numbers)
#largest_element is 10"
"Compare and contrast the following two functions.Function 1:
int add(int a, int b) {
    return a + b;
}
Function 2:
int sub(int a, int b) {
    return a - b;
}","Function 1 adds two integers and returns the result.
Function 2 subtracts one integer from another and returns the result. Both functions have the same parameter types, but the operation that each one performs is different. The return type of both functions is an integer."
"Generate a class that manages the customer dataThe class should have attributes of customer name, address, phone number, and email address.","class CustomerData:
    def __init__(self, name, address, phone_number, email_address):
        self.name = name
        self.address = address
        self.phone_number = phone_number
        self.email_address = email_address

    def get_name(self):
        return self.name
    
    def get_address(self):
        return self.address
    
    def get_phone_number(self):
        return self.phone_number
    
    def get_email_address(self):
        return self.email_address"
Generate an algorithm to create a Palindrome,"1. Take the input string
2. Reverse the string
3. Check if the reversed string is equal to the original string
4. If yes, then the input string is a palindrome
5. If not, create a palindrome by adding the reverse of the input string to the original string."
"Rewrite this code using list comprehensionmy_list = []
for i in range(5):
   my_list.append(i)",my_list = [i for i in range(5)]
Develop a Python programCreate a program to validate an ISBN number.,"def is_valid_isbn(isbn):
    isbn_length = len(isbn)
    if isbn_length != 10:
        return False
   
    # Calculate the check digit
    sum = 0
    for i in range(9):
        sum += (i+1) * int(isbn[i])
    check_digit = sum % 11
   
    # Check if the check digit matches the last character of the ISBN.
    if check_digit == 10 and isbn[-1].upper() != 'X':
        return False
    elif check_digit < 10 and int(isbn[-1]) != check_digit:
        return False
    else:
        return True"
Print the following results of an arithmetic operation.15 - 7,8
"Create an array of strings from an array of integers.[1, 4, 8]","[""1"", ""4"", ""8""]"
"Compute the sum of a list of integers.[1, 6, 8, 9, 4]",28
Print the nth Fibonacci number.10,55
"Optimize the following code.for i in range(10):
    print(i)","for i in range(10):
    print(i, end="" "")"
Write a regex expression that checks if the input string contains only numerical values.,^[0-9]+$
Create a class for doubly linked list in Python.,"class DoublyLinkedList:
    def __init__(self, val):
        self.val = val
        self.next = None
        self.previous = None

    def append(self, val): 
        current = self 
        while current.next is not None: 
            current = current.next
        current.next = DoublyLinkedList(val) 
        current.next.previous = current"
"Replace the word ""apple"" with ""fruit"" in the following sentence.I want to buy an apple.",I want to buy a fruit.
"define a function ""gcd"" which finds the greatest common divisor of two numbers.","""""""
Define a function ""gcd"" which finds the greatest common divisor of two numbers.
""""""
def gcd(x, y): 
  
   while(y): 
       x, y = y, x % y 
  
   return x 

""""""
Test the function gcd 
""""""

a = 98
b = 56
print(""The gcd of"", a, ""and"", b, ""is"", gcd(a, b))"
"Given an array of integers, find the sum of the numbers that are divisible by 3.nums = [1, 5, 6, 9, 10, 12, 15]","""""""
Given an array of integers, find the sum of the numbers that are divisible by 3.
""""""
def find_sum_divisible_by_3(nums):
    total = 0
    for num in nums:
        if num % 3 == 0:
            total += num
    return total

print(find_sum_divisible_by_3(nums)) # 18"
"How can you optimize this code to improve its efficiency?def multiply_lists(first_list, second_list): 
    result = 0
    for element in first_list: 
        for value in second_list: 
	        result += element * value 
    return result","""""""
How can you optimize this code to improve its efficiency?
""""""
def multiply_lists(first_list, second_list): 
    result = 0
    for element in first_list:
        result += element * sum(second_list)
    return result"
"How would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?","""""""
How would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?
""""""
def is_palindrome(string):
    n = len(string)
    for i in range(n // 2):
        if string[i] != string[n - i - 1]:
            return False
    return True"
"Using the comment as a guide, implement a while loopstart = 0 
#TODO: Implement a while loop that counts up to 10","start = 0 

while start <= 10:
    print (start)
    start += 1"
"Rearrange the following code so that it will execute in order.print(4) 
print(2)
print(1)","print(1)
print(2)
print(4)"
"Create a function ""calculate_area"" which calculates the area of a polygon with three sides.","""""""
Create a function ""calculate_area"" which calculates the area of a polygon with three sides.
""""""
def calculate_area(s1, s2, s3):
    s = (s1 + s2 + s3) / 2
    return (s*(s-s1)*(s-s2)*(s-s3)) ** 0.5"
"Given a matrix of size m x n, transpose it.matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]","""""""
Given a matrix of size m x n, transpose it.
""""""
def transpose_matrix(matrix):
    t_matrix = []
    for i in range(len(matrix[0])):
        temp = []
        for j in range(len(matrix)):
            temp.append(matrix[j][i])
        t_matrix.append(temp)
    return t_matrix
    
print(transpose_matrix(matrix)) # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
"Given an array of strings, find the longest common prefix string.arr = [""Code"", ""Coder"", ""Codecademy"", ""Codesigner""]","""""""
Given an array of strings, find the longest common prefix string.
""""""
def longest_common_prefix(arr): 
    if len(arr) == 0: 
        return """" 
 
    min_length = len(min(arr, key = len)) 
  
    result = """" 
    i = 0
    while i < min_length: 
        char = arr[0][i] 
        for j in range(1, len(arr)): 
            if arr[j][i] != char: 
                return result 
        result += char 
        i += 1
    return result

print(longest_common_prefix(arr)) # Code"
What is a text editor?,"A text editor is a computer program used for entering, editing, formatting and displaying text. Some text editors support syntax coloring, code completion and autopairing for programming languages. Text editors are used for programming, writing, composition, web design and many other forms of text-related work."
Create a code that summation of all numbers between 1 to n.n = 5,"""""""
Create a code that summation of all numbers between 1 to n.
""""""
def sum_all_nums(n):
    res = 0
    
    for i in range(1, n+1):
        res += i
    
    return res

print(sum_all_nums(n)) # 15"
"Create a program that sorts an array of integers in ascending order.arr = [5, 9, 1, 4, 3]","""""""
Create a program that sorts an array of integers in ascending order.
""""""
def sort(arr): 
    for i in range(len(arr)-1): 
        min_index = i 
        for j in range(i+1, len(arr)): 
            if arr[min_index] > arr[j]: 
                min_index = j       
        arr[i], arr[min_index] = arr[min_index], arr[i]

sort(arr)
print(arr) # [1, 3, 4, 5, 9]"
Please write a program that prints out the Fibonacci sequence from 1 to n.n = 10,"""""""
Please write a program that prints out the Fibonacci sequence from 1 to n.
""""""
def fibonacci(n):
    fib = [1, 1]
    for i in range(2, n):
        a = fib[i-2]
        b = fib[i-1]
        fib.append(a+b)
    return fib[:n]

print(fibonacci(n)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"
"Given a string, convert it to a list of words.The quick brown fox jumped over the lazy dog","string = ""The quick brown fox jumped over the lazy dog""

words_list = string.split()"
Develop a Python class for handling the API calls.,"class APIHandler:
    def __init__(self, base_url, api_key):
        self.base_url = base_url
        self.api_key = api_key
    
    def get(self, endpoint):
        response = requests.get(self.base_url + endpoint)
        return response
    
    def post(self, endpoint, data):
        headers = {'Authorization': 'Bearer ' + self.api_key}
        response = requests.post(self.base_url + endpoint, headers=headers, data=data)
        return response"
"Edit the provided code to yield the correct output.def hello_world():
    string = ""Hello World""
    print(string.lower())","def hello_world():
    string = ""Hello World""
    print(string.upper())"
Develop an algorithm to process a given matrix.,"def processMatrix(matrix):
  result_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))] 
  for row in range(len(matrix)):
    for col in range(len(matrix[0])):
      element = matrix[row][col]
      # perform processing on element here
      result_matrix[row][col] = element
  return result_matrix"
"Write a function to fetch the first N elements from a given array.array = [1,2,3,4,5,6,7,8,9,10]","def fetchFirstNElements(array, n):
  firstNElements = []
  for i in range(n):
    firstNElements.append(array[i])
  return firstNElements"
"Write code that transforms input data into a given format.data = {
  'name': 'John',
  'age': 30,
  'email': 'john@example.com'
}","def transformData(data):
  result_data = {}
  for key, value in data.items():
    result_data[key+'_uppercase'] = str(value).upper()
  return result_data"
"Create a function that counts the number of an specific letter in a given string.string = ""hello, world""
letter = ""l""","def countLetter(string, letter):
  count = 0
  for char in string:
    if char == letter:
      count += 1
  return count"
"Generate a list containing all the names of the students in a given class.class_list = ['John', 'Jane', 'Daniel', 'Nina']","def generateStudentNamesList(class_list):
  student_names_list = []
  for student in class_list:
    student_names_list.append(student)
  return student_names_list"
"Write a function that removes all occurrences of a character from a given string.string = ""happiness""
char = ""p""","def removeCharFromString(string, char):
  result_string = []
  for c in string:
    if c != char:
      result_string.append(c)
  return ''.join(result_string)"
"Develop a program to identify the longest common prefix between two strings.String1 = ""Hellocat""
String2 = ""Hellokong""","def longestCommonPrefix(str1, str2): 
    n1 = len(str1) 
    n2 = len(str2) 
  
    result = """" 
    j = 0
    i = 0
    while(i <= n1 - 1 and j <= n2 - 1): 
        if (str1[i] != str2[j]): 
            break
        result += str1[i] 
        i += 1
        j += 1
  
    return result"
Compose a program to sort an array of integers using bubble sort.,"def bubbleSort(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Write a Python script to generate a random number between two numbers.,"import random

def rand_num(min_num,max_num):
    return random.randrange(min_num,max_num)"
"Design a program that returns the length of a given string.String = ""Hello World""","def stringLength(mystring): 
    counter = 0
    for char in mystring: 
        counter += 1
    return counter"
Write a Python code snippet that creates a dictionary containing the numbers 1 to 10 as the keys and their squares as the values.,"squares_dict = { i:i*i for i in range(1, 11) }"
"Construct a for loop in the code for printing all items in the following list.numbers = [1, 2, 3, 4]","numbers = [1, 2, 3, 4]
for number in numbers:
    print(number)"
Construct an if-else statement in the code to print “The number is even” when the number is even and “The number is odd” when the number is odd.num = 3,"num = 3
if num % 2 == 0:
    print(""The number is even"")
else:
    print(""The number is odd"")"
"Use the following model to create a prediction for the values in the list classifying it as either 0 or 1.[1.0, 2.0, 0.5]","model.predict([[1.0], [2.0], [0.5]])"
"Using the Python library `pygame`, create a simple game where the player is able to move a character on screen using the arrow keys.","import pygame 
pygame.init()  
  
# setting up the display window 
win = pygame.display.set_mode((500, 500)) 

# creating a character that is used to move in the window 
x = 50 
y = 50 
vel = 5

# The main game loop 
run = True
while run: 
  
    # reacts to the event from keyboard 
    for event in pygame.event.get(): 
        if event.type == pygame.QUIT: 
            run = False
          
    # checks if the key pressed is left or right
    # and moves the character accordingly 
    keys = pygame.key.get_pressed() 

    if keys[pygame.K_LEFT]: 
        x -= vel

    if keys[pygame.K_RIGHT]: 
        x += vel

    # draws the character at its x and y position 
    pygame.draw.rect(win, (255, 0, 0), (x, y, 40, 40))

pygame.quit()"
Use the following code to create a dictionary of the words in the text and the frequency of their occurrence.text = “a happy day makes a happy life”,"text = “a happy day makes a happy life”
words_dict = {}

for word in text.split():
    if word not in words_dict:
        words_dict[word] = 1
    else:
        words_dict[word] += 1"
Use the following list to create an array in Python.,"list = [1, 2, 3, 4, 5]
array = np.array(list)"
Construct a while loop in the code to print the integers from 0 to 9.,"i = 0
while i < 10:
    print(i)
    i += 1"
Create a class ‘Student’ and a constructor that allows the user to initialize the student name and age.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Convert the following while loop into a for loop.i = 0
while i < 10:
  print(i)
  i += 1","for i in range(10):
  print(i)"
Write a code for an object-oriented Bubble Sort algorithm.,"class Bubble:
    def sort(self, list):
        # iterate over the list
        for i in range(len(list) - 1):
            for j in range(len(list) - 1 - i): # loop from the first until the last
                if list[j] > list[j+1]:  # if order is broken
                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements

# Driver Code 
if __name__ == '__main__': 
    list = [ 64, 34, 25, 12, 22, 11, 90 ]
    bubble = Bubble() 
    bubble.sort(list) 
   
    print (""Sorted array :"") 
    for i in range(len(list)): 
        print (""%d"" %list[i])"
Generate a secure password using the following algorithm.,"import string 
import random

def generate_password():
	# Create a string of lowercase and uppercase letters and numbers
    chars = string.ascii_letters + string.digits
	#randomly select 8 characters
    return ''.join(random.choice(chars) for _ in range(8))

password = generate_password()
print(password)"
Create a Python script that adds two numbers together and returns the result.,"def add_numbers(a, b):
 return a + b"
Write a python program to find all anagrams in a given stringstr = “abc”,"def find_anagrams(str):
    # list to store anagrams
    anagrams = [] 
      
    # create a frequency array of alphabets present in string 
    freq = [0] * 26
    for char in str: 
        freq[ord(char) - ord('a')] += 1
          
    # Loop through all the elements from 0 to ( 2^length of string – 1 ) 
    for i in range(1<<len(str)): 
          
        # Convert the number to binary string 
        # and calculate its frequency array 
        temp_freq = list(freq)
        str_bin = bin(i)[2:] 
        n = len(str_bin) 
        for j in range(n): 
            if str_bin[j] == '1': 
                temp_freq[j] -= 1
              
        # temp_freq is anagram if all element are 0 
        if all(x == 0 for x in temp_freq): 
            anagram = """" 
            for j in range(n):
                if str_bin[j] == '1': 
                    anagram += str[j]
            anagrams.append(anagram)
                  
    print(""All anagrams for '""+str +""' are :"" + str(anagrams))"
Construct a function to print out the odd numbers in a given array,"def odd_numbers(arr):
    for i in range(len(arr) ):
        if arr[i] % 2 != 0:
            print(arr[i])"
Use the re module in Python to extract the numbers from a given string.Input string: “There are 9 dogs and 8 cats here”,"import re

input_string = ""There are 9 dogs and 8 cats here""

# Get the numbers from the string
numbers = re.findall('\d+', input_string) 

print(numbers)
# Output ['9', '8']"
"Determine the biggest value in the list.[7, 12, -5, 3, 9]",12
"Using Python, find the number of unique characters in the string ""hello world"".","len(set(""hello world"")) # 10 unique characters"
"Find the most occurring item from a given list.input_list = [1,2,2,3,3,3,4,4,4,4]","from collections import Counter

input_list = [1,2,2,3,3,3,4,4,4,4] 
most_occurring_item = Counter(input_list).most_common(1)
print(most_occurring_item)"
"Design a program in Python for searching for a given item in a list.list_items = ['apple', 'banana', 'cake', 'orange']
item_to_search = 'cake'","def search_item(list_items, item_to_search): 
    for item in list_items: 
        if item == item_to_search: 
            return True 
    return False 

list_items = ['apple', 'banana', 'cake', 'orange']
item_to_search = 'cake'

print(search_item(list_items, item_to_search))"
"Create a MATLAB code snippet for calculating the mean of a given list of numbers.list_nums = [2, 7, 3, 19, 4, 7]","function mean_val = calc_mean(list_nums)
  mean_val = mean(list_nums);
end

list_nums = [2, 7, 3, 19, 4, 7];
mean_val = calc_mean(list_nums);"
Create an array of Unicode objects from the given string.String: Hello World,"import unicodedata

def string_to_unicode_array(string):
    return [unicodedata.lookup(ord(char)) for char in string]

if __name__ == '__main__':
    print(string_to_unicode_array('Hello World'))"
Convert a given number from base 10 to base 16.Number: 245,"def base10_to_base16(num):
    return hex(num).upper()[2:]

if __name__ == '__main__':
    print(base10_to_base16(245))"
What is the data type of the result of division of two integers?,The result of division of two integers is a float.
"Reverse a Python dictionary.{ 1: 'A', 2: 'B', 3: 'C' }","def reverse_dict(d):
    return {v: k for k, v in d.items()}

if __name__ == '__main__':
    print(reverse_dict({ 1: 'A', 2: 'B', 3: 'C' }))"
"Add two numbers using Python.Numbers: 5, 7","def add_two_numbers(x, y):
    return x + y

if __name__ == '__main__':
    print(add_two_numbers(5, 7))"
What is a ternary operator?,"A ternary operator is a conditional expression operator that can be used to return one of two values based on the evaluation of a boolean expression. In Python, the ternary operator is written as a ? expression. For example, a ? b : c is a shorthand for ""if a then b else c"", where a is a boolean expression."
"Write an if..elif..else statement to check if a number is positive, negative or zero.","if num > 0:
    print(""The number is positive"")
elif num < 0:
    print(""The number is negative"")
else:
    print(""The number is zero"")"
"Insert an item into an array at a specific position.arr = [1, 2, 3]
item = 10
position = 1","arr.splice(position, 0, item);
// arr is now [1, 10, 2, 3]"
Reverse a string without using any in-built Python functions.String: racecar,"rev_str = """"
for ch in string:
    rev_str = ch + rev_str
return rev_str"
Describe the purpose and usage of the statement break.,"The break statement is used to terminate a loop prematurely. It is mostly used to escape an infinite loop or to move out of a loop when a specific condition is met. It can be used in while, for and nested loops."
Parse the sentence and find the sentence structure.Sentence: I arrived at the destination late in the evening.,"Subject: I 
Verb: arrived
Prepositional phrase: at the destination
Adverb clause: late in the evening

Sentence structure: (S (NP I) (VP arrived) (PP at the destination) (AdvCl late in the evening))"
"Using a dictionary, group the elements into their respective keys.List = [1,4,7,2,5,8]","d = {1: [1, 4, 7], 2: [2, 5], 8: [8]}"
Develop a program to remove duplicate items in the list.,"def remove_duplicates(list_values):
    result = []
    for i in list_values:
        if i not in result:
            result.append(i)
    return result"
"Find the most common elements across two sets of data.Set 1: [1,2,3,4,5]
Set 2: [4,5,6,7,8]",The most common elements between the two sets are 4 and 5.
"Sort the following list of numbers using Merge SortList = [5,7,3,9,2]","def mergesort(nums): 
    if len(nums) == 1: 
        return nums 
  
    mid = len(nums) // 2
    left_list = nums[:mid] 
    right_list = nums[mid:] 
  
    left_list = mergesort(left_list) 
    right_list = mergesort(right_list) 
    return merge(left_list, right_list) 

def merge(left_list, right_list): 
    sorted_list = [] 
    left_list_index = right_list_index = 0
  
    left_list_length, right_list_length = len(left_list), len(right_list) 
  
    for _ in range(left_list_length + right_list_length): 
        if left_list_index < left_list_length and right_list_index < right_list_length: 
            if left_list[left_list_index] <= right_list[right_list_index]: 
                sorted_list.append(left_list[left_list_index]) 
                left_list_index += 1
            else: 
                sorted_list.append(right_list[right_list_index]) 
                right_list_index += 1
        elif left_list_index == left_list_length: 
            sorted_list.append(right_list[right_list_index]) 
            right_list_index += 1
        elif right_list_index == right_list_length: 
            sorted_list.append(left_list[left_list_index]) 
            left_list_index += 1
  
    return sorted_list 

Output:
[2, 3, 5, 7, 9]"
"Find the maximum number in the given array without using an inbuilt functionArray = [3, 1, 7, 5, 8]","maxNum = 0
for num in array: 
    if num > maxNum: 
        maxNum = num 

Output:
8"
"Find the indices of the elements in the following array and output them in the form of a list.Array = [5, 4, 6, 8, 7]","indices = []
for i, element in enumerate(a):
    indices.append(i)

Output:
[0, 1, 2, 3, 4]"
Create a python program to count how many times a word appears in a given string.The quick brown fox jumps over the lazy dog,"def count_word(word, input):
    count = 0
    for w in input.split():
        if w == word:
           count += 1
    return count

if __name__ == '__main__':
    word = 'fox'
    input = 'The quick brown fox jumps over the lazy dog'
    result = count_word(word, input)
    print(f' ""{word}"" occurs {result} times in the given string.')"
"Given an array of integers and an integer, return true if any two integers in the array add up to the given integer.arr = [1, 2, 3, 4]
sum = 7","def test_sum(arr, sum): 
    for i in range(len(arr)-1): 
        for j in range(i+1, len(arr)): 
            if arr[i] + arr[j] == sum: 
                return True 
    return False

if __name__ == '__main__':
    arr = [1, 2, 3, 4] 
    sum = 7
    result = test_sum(arr, sum) 
    if result: 
        print(""Array has two elements with the given sum"") 
    else: 
        print(""Array doesn't have two elements with the given sum"")"
Write a function to check if a number is a power of 2.num = 8,"def isPowerOfTwo(num): 
    if (num == 0): 
        return False
  
    while (num != 1): 
        if (num % 2 != 0): 
            return False
        num = num // 2
              
    return True
  
# Driver code 
if __name__=='__main__':
    num = 8
    if(isPowerOfTwo(num)): 
        print('Yes') 
    else: 
        print('No')"
Find a way to generate all the unique permutations for a given string.s = 'ABC',"def permutation(str): 
    if len(str) == 0: 
        return [] 
    if len(str) == 1: 
        return [str]  
    l = []  
    for i in range(len(str)): 
       m = str[i]  
       remLst = str[:i] + str[i+1:]  
       for p in permutation(remLst): 
           l.append([m] + p) 
    return l 

if __name__== ""__main__"":
    s = 'ABC'
    perms = permutation(s)
    for p in perms:
        print(''.join(p))"
"Given a linked list, remove all elements from it which have greater value than a given number X.head = [7, 14, 28, 21, 32]
value = 21","class node:
    def __init__(self, data):
        self. data = data
        self. next = None

def removeGreater(head, value):
    while head and head.data > value:
        head = head.next
    p = head
    while p and p.next:
        if p.next.data > value:
            p.next = p.next.next
        else:
            p = p.next
    return head

if __name__ == '__main__':
    head = node(7)
    head.next = node(14)
    head.next.next = node(28)
    head.next.next.next = node(21)
    head.next.next.next.next = node(32)

    result = removeGreater(head, 21)
    while result:
        print(result.data, end="" "")
        result= result.next"
Create a cryptography program that computes the factorial of a given number.num = 5,"def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)

if __name__ == '__main__':
    num = 5
    result = factorial(num)
    print(result)"
Create a class in Python named ``Rectangle`` with two attributes length and width.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width"
"How would you create a new array with only the positive numbers from the following array in Python?[-2, -5, 3, 6, 0, -3]","arr = [-2,-5,3,6,0,-3]

pos_arr = [num for num in arr if num >= 0]"
"Write a Python script to remove all the elements with value 3 from the following list.[1, 2, 3, 4, 3, 5, 3]","my_list = [1, 2, 3, 4, 3, 5, 3]

filtered_list = [number for number in my_list if number != 3]"
Create an algorithm to detect if an array A contains duplicates.,"Algorithm to detect duplicate elements in an array A:

1. Initialize a hash set set to store the elements of array A.
2. Iterate through the array A, if the element is already present in the set, return True. Otherwise add the element to the set.
3. Return False once all the elements have been iterated through."
"Sort an array A of integers in ascending order without using any pre-defined sorting functions.[23, 1, 32, 15, 40]","Algorithm to sort an array A of integers in ascending order without using any pre-defined sorting functions:

1. Initialize a variable swapped to false.
2. Iterate through the array A, compare each pair of adjacent elements and swap them if they are not in ascending order.
3. After each iteration, if a swap has occurred, set swapped to true, otherwise set it to false.
4. Repeat step 2 and 3 until swapped is false."
"Calculate the number of substrings possible with the given string.""welcome""","Algorithm to calculate the number of substrings possible with the given string S:

1. Initialize a variable result to 0.
2. Iterate through the string S, for each iteration n, calculate the number of possible substrings from 0 to n.
3. Add the number of possible substrings to the result. 
4. Return the result once all iterations of the string S have been done."
"Suggest a modification to the following python code to make it efficient.def median(my_list):
	half = len(my_list)//2
	median_index = len(my_list) - half
	return my_list[median_index]","def median(my_list):
	half = len(my_list)//2
	my_list.sort()
	median_index = len(my_list) - half
	return my_list[median_index]

The suggested modification is to add a sorting step to the code before finding the median index. This will ensure the list is always in order and the median index can be found in an efficient manner."
"How can you optimize the following code snippet?for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)","A nested loop can be optimized by moving out common calculations from the inner loop. In this example, the loop can be optimized by replacing the two nested loops with a single loop of length n^2.

 for (int i = 0; i < n*n; i++) 
 { 
     int row = i/n 
     int col = i%n 
     // your operations 
 }"
Implement an algorithm to remove duplicates from a linked list.,"Algorithm to remove duplicate elements from a linked list:

1. Initialize a hash set to store the unique elements of the linked list.
2. Iterate through the linked list, if the element is not present in the hash set, add it to the set.
3. Else, remove the element from the linked list.
4. Return the modified list once all the elements have been iterated through."
Solve the following equation for x.3x + 4 = 10,"x = (10 - 4) / 3 

x = 2"
"Use the following code, and write a script to print out all the numbers from 1-50 that are divisible by 7.for i in range(1, 50):","for number in range(1, 50):
    if number % 7 == 0:
        print(number)"
Create a boolean expression that returns true if the value of the parameter 'x' is five or larger.x = 5,x >= 5
"Generate a program that identifies the type of triangle formed by the three given sides.side1 = 4
side2 = 4
side3 = 5","if side1 == side2 and side2 == side3:
    print(""Equilateral Triangle"")
elif side1 == side2 or side2 == side3 or side1 == side3:
    print(""Isosceles Triangle"")
elif side1 != side2 and side2 != side3 and side1 != side3:
    print(""Scalene Triangle"")"
"Convert an array of 12 integers which are between 0 to 255 into a string.[105, 152, 85, 248, 0, 248, 88, 88, 105, 133, 233, 240]","String.fromCharCode(105, 152, 85, 248, 0, 248, 88, 88, 105, 133, 233, 240);"
"Create a function to sort an array of objects by the property 'name' in ascending order.const array = [
  {name: 'Bob', age: 25},
  {name: 'Alice', age: 19},
  {name: 'John', age: 30},
  {name: 'Ben', age: 27}
];","function sortByName(array) {
    array.sort(function(a, b) {
      var nameA = a.name.toUpperCase();
      var nameB = b.name.toUpperCase();
      if (nameA < nameB) {
        return -1;
      }
      if (nameA > nameB) {
        return 1;
      }
      return 0;
    });
    return array;
}
console.log(sortByName(array));"
"Create a function that takes two parameters, an array and an element, and checks if the element exists in the array.let arr = [1, 2, 3, 4, 5];
let element = 7;","function checkElement(arr, element) {
    if (arr.indexOf(element) === -1) {
        return false;
    }
    return true;
}

console.log(checkElement(arr, element)); // false"
"Write a code to find the first non-duplicate character in a given string.var s = ""apple"";","function findFirstNonDuplicateChar(s) {
  var character = '';
  var checker = {};
  for (var i = 0; i < s.length; i++) {
    var char = s[i];
    if (checker[char]) {
      checker[char]++;
    } else {
      checker[char] = 1;
    }
  }
  for (var i = 0; i < s.length; i++) {
    var char = s[i];
    if (checker[char] === 1) {
      character = char;
      break;
    }
  }
  return character;
}

console.log(findFirstNonDuplicateChar(s)); // p"
"Ask the user to enter a number, then generate a random number between the user input and 100.User Input: 24","let userNumber = parseInt(prompt(""Please enter a number:""));
let randomNumber = Math.floor(Math.random() * (100 - userNumber + 1)) + userNumber; 
console.log(randomNumber);"
"Remove all of the elements from a given array that are divisible by 5.let arr = [5, 15, 25, 35, 45, 55];","let filteredArr = arr.filter(num => num % 5 !== 0);
console.log(filteredArr); // [15, 25, 35, 45]"
"Create a Python code that takes two strings and combine them into a single string.str1 = ""Hello""
str2 = ""World""","combinedString = str1 + ' ' + str2
print(combinedString) # Hello World"
Create a program that prints the first 10 positive integers in reverse order.,"for i in range(9, 0, -1): 
    print(i+1, end = "" "")"
"Output the contents of a list in a comma-separated string.myList = [14, 19, 22, 27, 30]","def list_to_string(myList): 
    # initialize an empty string 
    string = """" 
  
    # traverse in the string  
    for ele in myList:
        string += str(ele) +"",""
  
    # return result string  
    return string
  
# Driver code 
myList = [14, 19, 22, 27, 30]
print(list_to_string(myList))"
"Create a function to find the larger number in a given list.myList = [18, 24, 34, 30]","def larger_num(myList): 
    
    # Initialize maximum element 
    max = myList[0] 
  
    # Traverse list elements from second and 
    # compare every element with current max  
    for i in range(1, len(myList)): 
        if myList[i] > max: 
            max = myList[i] 
    return max 
  
myList = [18, 24, 34, 30]
print(larger_num(myList))"
"Create a program that adds up 11 numbers.11 numbers: 3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20","# defining a function  
def add_ele(numbers): 
  
    # Initialize result 
    result = 0
    i = 0
  
    # Iterating elements in list  
    for i in range(len(numbers)): 
        result += numbers[i] 
    return result 
  
# Driver code 
numbers = [3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20]
print(add_ele(numbers))"
Create a program that reads user inputs and stores them in a list.,"# Initializing empty list 
myList = [] 
  
# running infinity loop 
while True:     
    # Input from user 
    ele = input(""Enter any Element: "") 
      
    # insert the element 
    myList.append(ele) 
  
    # Output after adding the element 
    print(""Updated list: "", str(myList))"
Use an if statement to determine if a number is negative or positive.number = -5,"if number < 0: 
    print(""The number is negative."") 
else: 
    print(""The number is positive."")"
"Use a for loop to sum all the elements in an array.myArr = [2, 5, 8, 11]","def Sum_list(list): 
    sum = 0
    for i in range(len(list)):
        sum += list[i] 
    return sum 

myArr = [2, 5, 8, 11]
print(Sum_list(myArr))"
"What is the output of the following code if the input is a = [3, 5, 2, 4, 9]:a = [3, 5, 2, 4, 9]","The output will be [2, 3, 4, 5, 9] as it will sort the list in ascending order."
"Sum up all the elements in a given array.a = [7, 2, 5, 8]",The sum of the elements in the array is 22.
"Edit the following code to output Hello World<ar>print(""Hello"")</ar>","print(""Hello World"")"
"Given a string, write a program to reverse the words in the string.","def reverse_words(s):
   return ' '.join(s.split()[::-1])"
How do you declare an array of pointers to integers in C?,int *array[length];
"Create a variable called ``new_list`` that contains all elements from the list ``old_list`` which are greater than 5.old_list = [2, 3, 5, 7, 9]","old_list = [2, 3, 5, 7, 9]
new_list = []
for i in old_list: 
    if i > 5:
        new_list.append(i)"
"Suggest a solution to make the following code work correctly.def count_sum(arr):
    '''This function adds all elements in ``arr`` and returns the total sum.'''
    sum = 0
    for n in arr:
        sum += n
    return sum","def count_sum(arr):
    '''This function adds all elements in ``arr`` and returns the total sum.'''
    sum = 0
    for n in arr:
        if isinstance(n, (int, float)):
            sum += n
    return sum"
"Suggest some changes to the following code that will reduce the runtime complexity.def search_array(arr, target):
    '''This function searches a given array for the target and returns its index if found.'''
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1","def search_array(arr, target):
    '''This function searches a given array for the target and returns its index if found.'''
    for i, num in enumerate(arr):
        if num == target:
            return i
    return -1"
Suggest an efficient way to find the longest word in a string.,"The most efficient way to find the longest word in a string is to use the split() method to convert the string into a list of words, then use the max() method to find the longest word in the list. For example:

string = ""The quickest way to find the longest word""
longest_word = max(string.split(), key=len)"
Create a function which takes two strings and compares them to see if they are anagrams of each other.,"def isAnagram(str1, str2):
    list1 = sorted(str1.lower())
    list2 = sorted(str2.lower())
    if list1 == list2:
        return True
    else:
        return False"
Create a function which takes in an array and returns a list of all the elements which appear only once in the array.,"def find_unique_elements(arr):
    unique_elements = []
    for elem in arr:
        if arr.count(elem) == 1:
            unique_elements.append(elem)
    return unique_elements"
Create an algorithm to detect if a linked list contains a cycle.,"def has_cycle(head):
    slow = head
    fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False"
"Create a function that takes in a string and returns a boolean indicating whether or not the string contains the letter ""u"".","def contains_letter_u(str):
    for char in str:
        if char == 'u':
            return True
    return False"
Create a function that takes in two integers and returns the greatest common divisor (g.c.d).,"def gcd(a, b):
    if a == 0:
        return b
    return gcd(b % a, a)"
Create an algorithm for finding the largest number in a list.,"def find_largest(nums):
    largest = nums[0]
    for num in nums[1:]:
        if num > largest:
            largest = num
    return largest"
Create a GraphQL query for fetching the total number of post titles in a blog.,"query getTitlesCount {
  blog {
    posts {
      title
    }
    titlesCount: postsCount
  }
}"
"Given a list of strings, create a function to convert all of the strings into uppercase.","def to_uppercase(str_list):
    return [s.upper() for s in str_list]"
"Refactor the following code to make it more optimized.def sum(numbers):
    total = 0
    for number in numbers:
        total = total + number
    return total","def sum(numbers):
    return sum(numbers)"
Write a regex pattern to match strings with a word length of 5 characters.,\b\w{5}\b
Write a code that takes an array of integer as argument and returns the sum of the array elements.,"function arraySum(arr) { 
    var sum = 0; 
    for (var i = 0; i < arr.length; i++) 
        sum += arr[i]; 
    return sum; 
}"
Write a function to convert decimal number to binary number.,"def decimalToBinary(num):
    if num > 1:
        decimalToBinary(num // 2)
    return num % 2"
"Write a code that takes a string and an integer as arguments and returns the number of words in the string that are of the provided length.String: ""Hello World""
Length: 5","def wordCountByLength(string, length):
    words = string.split()
    return sum(1 for word in words if len(word) == length)"
"Compare two strings and find which one is lexicographically greater.String 1: ""apple""
String 2: ""banana""","if string1 > string2:
    print(""String 1 is lexicographically greater"")
else:
    print(""String 2 is lexicographically greater"")"
"Calculate the sum of all odd numbers between two given numbers.Lower limit: 3
Upper limit: 7","def sumOfOddNumbers(lower, upper):
    total = 0
    for i in range(lower, upper+1): 
        if (i % 2 != 0): 
            total += i
    return total"
"Using the provided code as a reference, write a loop to output the middle 3 elements in a given array.arr = [1,2,3,4,5,6]","for i in range(1, len(arr)-1):
    print(arr[i])"
What is the maximum number of parameters that a function can take in Python?,A function in Python can take up to 255 parameters.
What is the syntax of a for loop in Python?,"The syntax of a for loop in Python is: 
for item in iterable:
    statement(s)"
"Identify the errors, if any, in the following code.sum = 0
for i in range(1,10):
    sum =+ i","The error is that the operator '=+' should be changed to '+='. This operator adds the value on the left to the current value of the variable on the right, and then assigns the result back to the variable on the right. The correct code should be:

sum = 0
for i in range(1,10): 
    sum += i"
"Change the first character of a given string to uppercase.String: ""python""","String: ""Python"""
Create a function to count how many vowels are in a given string.,"def count_vowels(string):
  vowels = ""aeiou""
  count = 0
  
  for char in string:
    if char in vowels:
      count += 1
      
  return count"
Write a code to generate a random 8 character string containing only lowercase letters.,"import random
import string

def generate_random_string(length):
  return ''.join(random.choices(string.ascii_lowercase, k=length))

random_string = generate_random_string(8)
print(""Random 8-character string:"", random_string)"
"Create a class for a grocery item with attributes for item name, quantity and price.","class GroceryItem:
  def __init__(self, name, quantity, price):
    self.name = name
    self.quantity = quantity
    self.price = price
  
  def total_price(self):
    return self.quantity * self.price"
"Create a function to reversed an array in place.arr = [1, 2, 3, 4, 5]","def reverse_array(arr):
    start = 0
    end = len(arr) - 1
    while start < end:
        temp = arr[start]
        arr[start] = arr[end]
        arr[end] = temp
        start += 1
        end -= 1
    return arr

print(reverse_array(arr))"
"Write a code to create an object using a class constructor having attributes given in a dictionary.attributes = {'name': 'John', 'age': 20, 'gender': 'M', 'hobbies': ['books', 'sports']}","class Person:
  def __init__(self, attributes):
    self.name = attributes['name']
    self.age = attributes['age']
    self.gender = attributes['gender']
    self.hobbies = attributes['hobbies']
    
person = Person(attributes)"
Design a class to convert a given string to Morse code and store it as a list.,"class MorseCodeConverter:
    def __init__(self, string):
        self.string = string
        self.alphabet = {
            'a': '.-',
            'b': '-...',
            'c': '-.-.',
            'd': '-..',
            'e': '.',
            'f': '..-.',
            'g': '--.',
            'h': '....',
            'i': '..',
            'j': '.---',
            'k': '-.-',
            'l': '.-..',
            'm': '--',
            'n': '-.',
            'o': '---',
            'p': '.--.',
            'q': '--.-',
            'r': '.-.',
            's': '...',
            't': '-',
            'u': '..-',
            'v': '...-',
            'w': '.--',
            'x': '-..-',
            'y': '-.--',
            'z': '--..',
            '1': '.----',
            '2': '..---',
            '3': '...--',
            '4': '....-',
            '5': '.....',
            '6': '-....',
            '7': '--...',
            '8': '---..',
            '9': '----.',
            '0': '-----'
        }
    
    def convert(self):
        morse_code = []
        for char in self.string:
            if char in self.alphabet:
                morse_code.append(self.alphabet[char])
        return morse_code"
"Create a function to categorize a given array of numbers into prime and composite numbers.arr = [2, 5, 7, 11, 17, 21, 25]","def is_prime(num):
    # check prime
    divisors = []
    for x in range(1, num + 1):
        if (num % x == 0):
            divisors.append(x)
    if len(divisors) == 2:
        return True
    else:
        return False

def categorize_numbers(arr):
    prime_nums = []
    composite_nums = []
    for number in arr:
        if is_prime(number):
            prime_nums.append(number)
        else:
            composite_nums.append(number)
    return prime_nums, composite_nums
    
prime_nums, composite_nums = categorize_numbers(arr)
print(""Prime numbers in arr:"", prime_nums)
print(""Composite numbers in arr:"", composite_nums)"
Write a code to print a binary tree in pre order traversal.,"def pre_order_traversal(root):
    # Return if tree is empty
  if root == None:
    return
  # Print the data of node
  print(root.data),

  # Recursively call the pre-order traversal on left subtree 
  pre_order_traversal(root.left)
  
  # Recursively call the pre-order traversal on right subtree
  pre_order_traversal(root.right)"
Create a function to convert the given string to hexadecimal code.,"def string_to_hexadecimal(string):
    # convert the string to list of bytes
    bytes_ = [ord(char) for char in string] 
    
    # convert the bytes to hexadecimal code
    hexadecimal_list = [hex(byte) for byte in bytes_] 
    
    # remove the ""0x"" from the hexadecimal code
    hexadecimal_list = [item[2:] for item in hexadecimal_list]
    
    # join all the code into a single string
    hexadecimal_string = ''.join(hexadecimal_list)
    
    return hexadecimal_string"
"Write a code to normalize a given array of numbers between 0 and 1 where min = 0, max = 1 and every other number is proportional to it.arr = [10, 20, 30, 25, 0]","def normalize_array(arr):
  # Check if the array is empty
  if len(arr) == 0:
    return []
  
  # Get min and max of the array
  min_el = min(arr)
  max_el = max(arr)
  
  # Normalize elements in the array
  normalized_arr = [(el - min_el) / (max_el - min_el) for el in arr]
  
  return normalized_arr
  
normalized_arr = normalize_array(arr)
print(""Normalized array:"", normalized_arr)"
"Create a class in Python which has a method to sort an array of numbers in increasing order.nums = [4, 3, 1, 6]","class ArraySort:
    def __init__(self, nums):
        self.nums = nums
    
    def sort(self):
        for i in range(len(self.nums)):
            for j in range(i+1, len(self.nums)):
                if self.nums[i] > self.nums[j]:
                    temp = self.nums[i]
                    self.nums[i] = self.nums[j]
                    self.nums[j] = temp
        return self.nums"
Categorize the following data set as either a classification or an regression problem.The prediction of whether a customer will buy a product or not.,Classification problem.
"Develop a python code snippet to create a list, with the name ""fruits"" containing strings of the names of 5 fruits.","fruits = [""apple"", ""banana"", ""mango"", ""strawberry"", ""kiwi""]"
Formulate a regex expression in Python to check if a given string is an email address.,"import re 

def is_email(string): 
   regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w+$'
   if(re.search(regex,string)): 
      print(""Valid Email"")  
   else: 
      print(""Invalid Email"")"
Write pseudocode to implement a sorting algorithm using recursion.,"Function sort(array, leftIndex, rightIndex):
  // If leftIndex is greater than or equal to rightIndex, do nothing. 
  If (leftIndex >= rightIndex) : 
      return 
  
  // Get the middle index
  middleIndex = (rightIndex + leftIndex) / 2
  
  // Sort the left side  
  sort(array, leftIndex, middleIndex) 
  
  // Sort the right side 
  sort(array, middleIndex+1, rightIndex) 
  
  // Merge the sides
  merge (array, leftIndex, middleIndex, rightIndex)
  
Function merge(array, leftIndex, middleIndex, rightIndex):
  // Create two temporary arrays;
  leftArray = [middleIndex - leftIndex + 1] 
  rightArray = [rightIndex - middleIndex]
  
  // Copy data from array to the respective arrays  
  for (i = 0 to middleIndex - leftIndex) : 
      leftArray[i] = array[leftIndex + i] 
  for (j = 0 to rightIndex-middleIndex: j++) 
      rightArray[j] = array[middleIndex + 1 + j] 
  
  // sort the leftArray 
  sortLeftArray(leftArray) 
  
  // sort the rightArray 
  sortRightArray(rightArray) 
  
  // merge the sorted halves 
  i = 0     
  j = 0    
  k = leftIndex     
  while (i < sizeof(leftArray) //&& j < sizeof(rightArray)) 
  { 
      if (leftArray[i] <= rightArray[j]) 
      { 
          array[k] = leftArray[i]; 
          i++; 
      } 
      else
      { 
          array[k] = rightArray[j]; 
          j++; 
      } 
      k++; 
  } 
  
  // Copy the remaining elements  
  while (i < sizeof(leftArray)) : 
  { 
      array[k] = leftArray[i]; 
      i++; 
      k++; 
  } 
  
  while (j < sizeof(rightArray)) 
  { 
      array[k] = rightArray[j]; 
      j++; 
      k++; 
  }"
Generate a list of 20 strings containing random characters of length 10.,"['Kj9F7VAl1q', '28jVYbueph', 'f7VZRif5uP', '2jf5CHXyt7', '3qBtyKjDIY', 'hE5wrRmIP6', 'V7jQcfhIBz', 'UQy6gCwPa5', '6Ujpu7NfMk', 'Z6DFhBoK8e', 'DIFpjgrhT7', 'TzdGsvhRO2', '1Kv4RyZoF8', 'RKjUXviPca', 'yO2PCtEjx1', 'qchomMdP9X', '9ydNHCaTZX', 'TFrhYdgSjp', 'BYeH12I4th', '4XNgJfKCAd']"
"Suggest a way to combine two lists of dictionaries into one list of dictionaries in Python.list1 = [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 20}]
list2 = [{'name': 'Steve', 'age': 25}, {'name': 'Jake', 'age': 18}]",combinedList = list1 + list2
"Find the most frequently used character in the following string.str = “Hello, world!”",The character 'l' is the most frequently used character in the given string.
"Edit the following code to make it work in Python 3.# Python 2
def greet(name):
    print ""Hello,"", name

greet(""John"")","# Python 3
def greet(name):
    print(""Hello,"", name)
    
greet(""John"")"
Write a function that takes a list of numbers and returns their sum.,"def sum_list(list_nums):
  total = 0
  for num in list_nums:
    total += num
  return total"
Design a Python class to represent a student and their GPA.,"class Student:

    def __init__(self, name, gpa):
        self.name = name
        self.gpa = gpa

    def get_name(self):
        return self.name

    def get_gpa(self):
        return self.gpa"
"Design a Python class to represent a Triangle and its properties, such as area, perimeter, and angles.","class Triangle:
    def __init__(self, side_a, side_b, side_c):
        self.side_a = side_a
        self.side_b = side_b
        self.side_c = side_c

    def get_area(self):
        s = (self.side_a+self.side_b+self.side_c)/2
        return (s*(s-self.side_a)*(s-self.side_b)*(s-self.side_c)) ** 0.5

    def get_perimeter(self):
        return self.side_a + self.side_b + self.side_c

    def get_angles(self):
        a = (self.side_b**2 + self.side_c**2 - self.side_a**2)/(2*self.side_b*self.side_c)
        b = (self.side_a**2 + self.side_c**2 - self.side_b**2)/(2*self.side_a*self.side_c)
        c = (self.side_b**2 + self.side_a**2 - self.side_c**2)/(2*self.side_b*self.side_a)
        return [a, b, c]"
"From the input text, create a dictionary that contains the count of the most frequent words.The quick brown fox jumped over the lazy dog.","from collections import Counter

def most_frequent_words(text):
    word_list = text.split()
    word_counts = Counter(word_list)
    return word_counts.most_common()"
Create a python function that takes in a list and returns a new list with all the even elements of the original list.,"def get_even_elements(arr):
    return [num for num in arr if num % 2 == 0]"
Create a Python function that takes in a list of integers and returns a list containing only the odd numbers from the original.,"def get_odd_elements(arr):
    return [num for num in arr if num % 2 != 0]"
"From the input list, create a dictionary containing only key-value pairs for even integers.[4, 7, 9, 10, 16, 18]","# function to create a dictionary containing only key-value pairs for even integers
def even_dict(arr):
    return {i : i for i in arr if i % 2 == 0}"
Create a Python script to delete all the even numbers in the original list.,"# function to delete all the even numbers in the original list
def remove_even_elements(arr):
    return [num for num in arr if num % 2 != 0]"
Design a function that takes in a list of numbers and returns a dictionary with the frequency of each element.,"def element_frequency(arr):
    # use a dictionary to store the frequency of each element
    frequency = {}

    # loop through the list and keep a count of each element
    for elem in arr:
        if elem in frequency:
            frequency[elem] += 1
        else:
            frequency[elem] = 1

    return frequency"
Create a Python script to print the first N numbers of the Fibonacci sequence.,"def print_fibonacci(n):
    # make a list of the first n numbers in the Fibonacci series
    fibonacci = [0, 1]
    while len(fibonacci) < n:
        fibonacci.append(fibonacci[-1] + fibonacci[-2])
    
    # print out the list
    for number in fibonacci:
        print(number)"
Create a python class to manage a sports team.,"# define a class to manage a sports team
class SportsTeam:
    def __init__(self, name):
        # store the team name
        self.name = name
        # create an empty list for team members
        self.team_members = []

    # create a method to add a new player to the team
    def add_player(self, player_name):
        if player_name not in self.team_members:
            self.team_members.append(player_name)
    
    # create a method to remove a player from the team
    def remove_player(self, player_name):
        if player_name in self.team_members:
            self.team_members.remove(player_name)"
"Convert the following code to efficiently use list comprehensions.# define a function to generate a list of cubed numbers
def generate_cubes(n):
    result = []
    for num in range(1, n+1):
        result.append(num ** 3)
    return result","# define a function to generate a list of cubed numbers
def generate_cubes(n):
    return [num ** 3 for num in range(1, n+1)]"
What is the meaning of the term “variable” in programming?,"In programming, a variable is a symbolic name for a value that can change over the course of a program. It usually refers to a memory location where a whole value is stored. It can also refer to an expression that produces a value. Variables can store different values of different types, such as integers, floats, strings, and Booleans."
"Reverse the following string using a Python program""Hello World!""","def reverse_string(str):
  return str[::-1]

reverse_string('Hello World!') # output: '!dlroW olleH'"
Write a function to find all the prime numbers from 2 to n (where n is a given input).,"def find_primes(n):
    primes=[]
    for num in range(2, n+1):
        for n in range(2, num):
            if num%n==0:
                break
            
        else:
            primes.append(num)
    return primes"
"Given two sets, setA and setB, write a function to find the intersection of both sets.setA = {1, 2, 3, 4, 5}
setB = {4, 5, 6, 7, 8}","def intersection(setA, setB):
    return [x for x in setA if x in setB] # output: {4, 5}"
"Replace all occurrences of ‘x’ with ‘y’ in the following string.sentence = ""This is x a sentence x with x many x x'x.","sentence = sentence.replace('x', 'y')  # output: This is y a sentence y with y many y y'y."
What is the purpose of neural networks?,"The purpose of neural networks is to recognize patterns in data and make predictions or decisions based on those patterns. Neural networks are an approach to artificial intelligence, modeled after the neural networks in the human brain. They allow computers to learn by processing large amounts of data and identifying patterns and trends in it."
"Given an array of integers, write a function to sum all the integers in the array.","def sum_array(arr):
    total = 0
    for num in arr:
        total += num
    return total"
"Given a key and a value, write a function to store them in a dictionary.Key: 'name'
Value: 'John'","def add_key_value_pair(key, value, dictionary):
    dictionary[key] = value"
"Implement the Quick Sort algorithm with a list of numbers.[2, 5, 4, 1, 6, 2, 9, 3]","def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr)//2]
    left, right, equal = [], [], []
    for x in arr:
        if x < pivot:
            left.append(x)
        elif x > pivot:
            right.append(x)
        else:
            equal.append(x)
    return quicksort(left) + equal + quicksort(right)"
"Find the indices of the all occurrence of a specified element in an array.Array: [2, 3, 2, 4, 5]
Element: 2","def find_element(arr, element):
    result = []
    for i in range(len(arr)):
        if arr[i] == element:
            result.append(i)
    return result"
"Given an array of integers find the index of the element that appears an odd number of times.[2, 3, 2, 4, 5, 3]","def find_odd_element(arr):
    elements = set()
    for x in arr:
        if x in elements:
            elements.remove(x)
        else:
            elements.add(x)
    return arr.index(list(elements)[0])"
"Using the input list, generate a random permutation of the given list.[1, 2, 3, 4, 5]","import random
def get_random_permutation(list):
    random.shuffle(list)
    return list"
"Replace all occurrences of a letter in a given string with another letter.String: ""hello world""
Replace: ""e""
With: ""a""","def replace_letter(string, replace, with):
    return string.replace(replace, with)"
Write a function that converts a list of strings to a dictionary.,"def string_list_to_dictionary(string_list):
    result = {}
    for s in string_list:
        result[s] = True
    return result"
"Given a list of numbers and the length n, write a Python program to add the elements of all even indexed values to the corresponding odd indexed values.my_list = [5, 10, 15, 20, 25]
n = 5","def add_corresponding_elements(lst, n):
    result = 0

    for i in range(0, n, 2): 
        result += lst[i] + lst[i + 1] 

    return result

my_list = [5, 10, 15, 20, 25]
n = 5

result = add_corresponding_elements(my_list, n)
print(result)  # Output: 35"
"Convert the following Python code from functions to lambda expressions.def cube(x):
    return x ** 3

def add_cube(x, y):
    return cube(x) + cube(y)","cube = lambda x: x ** 3
add_cube = lambda x, y: cube(x) + cube(y)"
"Write a Python program to iterate the given list and print the square or each element.my_list = [1, 2, 3, 4]","my_list = [1, 2, 3, 4]

for i in my_list:
    print(i**2)

# Output: 1, 4, 9, 16"
"Write a Python program to divide two numbers and return the quotient and remainder of the division.x = 10
y = 3","x = 10
y = 3

quotient = int(x / y)
remainder = x % y

print(""Quotient:"", quotient)
print(""Remainder:"", remainder)
# Output: Quotient: 3, Remainder: 1"
"Write a Python program to compare two strings and return True if both the strings are equal, otherwise False.s1 = ""Hello""
s2 = ""Hello""","s1 = ""Hello""
s2 = ""Hello""

print(s1 == s2) # Output: True"
"Write a Python function to return the most frequent character in the given string.my_string = ""hello world""","def most_frequent(s):
    char_freq = {}
    max_freq = 0
    most_frequent_char = """"

    for c in s:
        if c in char_freq:
            char_freq[c] += 1
        else:
            char_freq[c] = 1

        if char_freq[c] > max_freq:
            max_freq = char_freq[c]
            most_frequent_char = c

    return most_frequent_char

my_string = ""hello world""
print(most_frequent(my_string)) # Output: 'l'"
"Given a two dimensional array, write a Python program to print the second diagonal of the array.my_array = [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]]","my_array = [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]]

# A function to print second diagonal of 
# given array
def print_second_diagonal(arr): 
    # Find length of given array 
    n = len(arr)  
      
    # Traverse second diagonal 
    for i in range(0, n): 
        print(arr[i][n-1-i], end = "" "") 
          
# Driver code 
print_second_diagonal(my_array)
# Output: 3 6 9"
"Write a Python program to find the equilibrium index of an array. An index of an array is called equilibrium index if the sum of elements at lower indexes is equal to the sum of elements at higher indexes.arr = [-7, 1, 9, -4, 3, 2]","def find_equilibrium_index(arr):
    total_sum = sum(arr)

    left_sum = 0
    
    for index, num in enumerate(arr):
        total_sum -= num
        if left_sum == total_sum:
            return index 
        left_sum += num
    return -1

arr = [-7, 1, 9, -4, 3, 2]
print(find_equilibrium_index(arr)) # Output: 2"
Implement a sequence to sequence model for translation.,"from tensorflow.keras.layers import Input, LSTM, Dense

def seq2seq_model(src_length, trg_length, embedding_dim, num_enc_tokens, num_dec_tokens):
    # Define an input layer.
    encoder_inputs = Input(shape=(None, num_enc_tokens))
    # Add an LSTM layer with `src_length` number of units
    encoder_lstm = LSTM(src_length, return_state=True)
    # Define the encoder output, state and the encoder states
    encoder_outputs, state_h, state_c = encoder_lstm(encoder_inputs)
    # Discard `encoder_outputs` and only keep the states.
    encoder_states = [state_h, state_c]

    # Set up the decoder, using `encoder_states` as initial state.
    decoder_inputs = Input(shape=(None, num_dec_tokens))
    # Add an LSTM layer with `src_length` number of units
    decoder_lstm = LSTM(src_length, return_state=True, return_sequences=True)
    decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)
    # Add a fully connected layer
    decoder_dense = Dense(trg_length, activation='softmax')
    # Define the output of the decoder
    decoder_outputs = decoder_dense(decoder_outputs)

    # Create a model
    model = Model([encoder_inputs, decoder_inputs], decoder_outputs)
    # Compile the model
    model.compile(optimizer='adam', loss='categorical_crossentropy')
    return model"
How can you create a copy of a list?,"You can create a copy of a list by using the ""list"" method. For example, to create a copy of a list called ""my_list"", you can simply write ""my_list_copy = list(my_list)""."
"Create a data frame from a dictionary.my_dict = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 
        'year': [2000, 2001, 2002, 2001, 2002],
        'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}","import pandas as pd

my_df = pd.DataFrame(my_dict)
print(my_df)"
"Write a function that takes in a list and a target value, and returns a new list with the target value removed.my_list = [1,2,3,4,5,6]
target = 3","def remove_target(my_list, target):
    return [x for x in my_list if x != target]

my_list = remove_target(my_list, target)
print(my_list)"
"Write code to print out all the even numbers from a given list of numbers.my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]","for number in my_list:
    if (number % 2 == 0):
        print(number)"
Perform PCA on a dataset.,"from sklearn.decomposition import PCA

def perform_pca(X):
    pca = PCA(n_components=2)
    pca.fit(X)
    X_pca = pca.transform(X)

    return X_pca"
Write a function that takes in a 2D matrix and outputs the transpose of the matrix.,"def transpose_matrix(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"
"Write a function to classify the input based on the following criteria: 
If the input is positive, output ""positive""; if the input is zero, output ""zero""; if the input is negative, output ""negative"".","def classify(x):
    if x > 0:
        return ""positive""
    elif x == 0:
        return ""zero""
    else:
        return ""negative"""
"Output the last three elements of a list.my_list = [7, 1, 5, 4, 0]",print(my_list[-3:])
"Generate a hash for a given dictionary.my_dict = {'name': 'John', 'age': 27, 'profession': 'programmer'}","import hashlib

def generate_hash(my_dict):
    my_string = str(my_dict)
    res = hashlib.md5(my_string.encode()).hexdigest() 
    
    return res

print(generate_hash(my_dict))"
Create a function that returns the nth Fibonacci number.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Create an algorithm to convert a temperature from Celsius to Fahrenheit.0,"def ctoF(temperature):
    return (temperature * 1.8) + 32

if __name__ == '__main__':
    print(ctoF(0))"
"Create a function that takes an array of strings and returns an array of their lengths.[‘Hello’, ‘World’]","def array_length(arr):
    return [len(s) for s in arr]

if __name__ == '__main__':
    arr = ['Hello', 'World']
    print(array_length(arr))"
Implement a function in Python to determine if a string is a palindrome.,"def is_palindrome(str): 
    rev = ''.join(reversed(str)) 

    if (str == rev): 
        return True
    return False"
Write an algorithm in Python to determine if an array has duplicate elements or not.,"def containsDuplicate(arr):
    seen = set()
    for element in arr:
        if element in seen:
            return True
        seen.add(element)
    return False"
Generate a Python function that takes 'string' as an argument and return a new string with the last two characters of 'string' repeated.,"def repeat_last_two_char(string):
    """"""Takes a string as an argument and returns a new string with the last two characters repeated.""""""
    if len(string) < 2:
        return """"
    return string[:-2] + string[-2:] * 2"
"Write a Python function to generate a dictionary with the keys 'a', 'b', 'c', and values of '1', '2', '3', respectively.","def generate_dictionary():
    """"""Generate a dictionary with the keys 'a', 'b', 'c' and values of '1', '2', '3' respectively.""""""
    return {'a': 1, 'b': 2, 'c': 3}"
"Modify the following code to include a try/except statement.def read_file(filename):
    with open(filename) as f:
        return f.read()","def read_file(filename):
    try:
        with open(filename) as f:
            return f.read()
    except FileNotFoundError:
        print(f""File {filename} was not found."")"
Construct an if statement with two conditions.,"if condition1 and condition2:
    # do something"
"Write a Python function to split a string into a list of strings, separated by a given delimiter.","def split_string(string, delimiter):
    """"""Split a string into a list of strings, separated by a given delimiter.""""""
    return string.split(delimiter)"
Construct an if/else statement that checks if a number is between 1 and 10.,"if n >= 1 and n <= 10:
    # do something
else:
    # do something else"
Create a function that returns true if number is divisible by 5.,"def isDivisibleByFive(n): 
    return (n % 5 == 0)"
What is an appropriate format to represent a 3-dimensional point?,"A 3-dimensional point can be represented as a tuple (x, y, z) consisting of the x-coordinate, y-coordinate, and z-coordinate of the point."
Implement a function for generating a list of Fibonacci numbers up to n.,"def fibonacci_list(n): 
    fib_list = [1,1] 
    while fib_list[-1] < n: 
        next_num = fib_list[-1] + fib_list[-2] 
        fib_list.append(next_num)
    return fib_list"
Create a code snippet for making a POST request using Python.,"import requests 
url = 'https://www.example.com' 
data = {'var1': 'value1', 'var2': 'value2'} 
response = requests.post(url, data=data)"
Outline the steps for sorting a list in descending order.,"1. Reverse the elements of the list. 
2. Sort the reversed list using a sorting algorithm. 
3. Return the reversed sorted list."
Design a distributed system for an online pharmacy.,"The distributed system for an online pharmacy should consist of the following components: 

1. Database Server: Stores customer information, product inventory, and transaction data.
2. Web Server: Serves web pages, process customer orders, and handles payment transactions.
3. Application Server: Processes customer orders, handles inventory management tasks, and communicates with the pharmacy's service providers (such as shipping and billing).
4. Messaging Server: Used to communicate with customers, send notifications, and handle customer service inquiries.
5. Analytics Server: Collects data from the other components and used to generate reports and provide business insights.
6. Warehouse Management System (WMS): Used by warehouse personnel to maintain inventory levels and fulfill customer orders. 
7. Payment Gateway: Provides payment processing services for customers. 
8. Content Delivery Network (CDN): Used to store and serve static content (such as images, videos, and audio files)."
"Write a code to sort an array of integers using the quicksort algorithm.array = [2, 4, 5, 1, 9, 0]","def quicksort(arr):
    if len(arr) == 0 or len(arr) == 1:
        return arr
    else:
        pivot = arr[0]
        arr.remove(arr[0])
        left_arr = []
        right_arr = []
        for element in arr:
            if element <= pivot:
                left_arr.append(element)
            else:
                right_arr.append(element)
        left_arr = quicksort(left_arr)
        right_arr = quicksort(right_arr)
        sorted_arr = left_arr + [pivot] + right_arr
        return sorted_arr

if __name__ == ""__main__"":
    array = [2, 4, 5, 1, 9, 0]
    sorted_arr = quicksort(array)
    print(sorted_arr)

# Output: [0, 1, 2, 4, 5, 9]"
Compare the insertion sort and the merge sort algorithms.,"Insertion sort is an in-place sorting algorithm that compares and inserts elements one at a time into a sorted list. It starts off with a single element and compares it to every element in the list. If the element is smaller than the element to the left, it moves the left element over and continues down the list until it reaches a spot where it is no longer smaller than the elements to the left, then it will insert the element in that spot. Insertion sort is a simple algorithm and is relatively fast for small lists. However, for larger lists, the time complexity can become large and the algorithm can be more expensive. 

Merge sort is an efficient, divide-and-conquer sorting algorithm that works by continuously dividing a list in half until it is broken down into individual elements, which are then recombined in sorted order. It has a time complexity of O(nlogn) in all cases, making it a very efficient algorithm for large lists. It also does not need additional memory for sorting, unlike some other sort algorithms. However, merge sort is not an in-place sorting algorithm and requires additional memory to perform the sorting."
"Design a data structure to find the first and last occurrence of a number in an array.array = [1, 5, 7, 8, 8, 10]","class FindFirstLastOccurrence:
    def __init__(self, arr):
        self.arr = arr
        self.first_occurrence = -1
        self.last_occurrence = -1
    
    def findFirstLastOccurrence(self, k):
        #Find the first occurrence
        left = 0
        right = len(self.arr) - 1
        while left <= right:
            mid = (left + right) // 2
            if self.arr[mid] == k and (mid == 0 or self.arr[mid-1] < k):
                self.first_occurrence = mid
                break
            elif self.arr[mid] < k:
                left = mid+1
            else:
                right = mid-1
        #Find the last occurrence
        left = 0
        right = len(self.arr) - 1
        while left <= right:
            mid = (left + right) // 2
            if self.arr[mid] == k and (mid == len(self.arr)-1 or self.arr[mid+1] > k):
                self.last_occurrence = mid
                break
            elif self.arr[mid] > k:
                right = mid-1
            else:
                left = mid+1
        
        return self.first_occurrence, self.last_occurrence

if __name__ == ""__main__"":
    finder = FindFirstLastOccurrence([1, 5, 7, 8, 8, 10])
    print(finder.findFirstLastOccurrence(8)) # (3,4)"
Identify the data type of '2947'.,The data type of '2947' is an integer.
Develop an algorithm to calculate the length of a string.,"Algorithm:

1. Input a string.
2. Initialize a counter to 0.
3. Iterate through the characters in the string, adding 1 to the counter for each character until the end of the string is reached.
4. Output the counter.

The algorithm successfully calculates the length of a given string."
"Use regex to match a substring, 'the' within a sentence.The quick brown fox","regex = /the/

This regex will match the substring ""the"" in the sentence ""The quick brown fox."""
"Write a Python function to find the number of odd numbers in the given list.[1, 4, 2, 6, 3, 9]","def countOddNumbers(numbers):
  odd_numbers = 0
  for i in numbers:
    if i % 2 == 1: 
      odd_numbers += 1
  return odd_numbers
  
print(countOddNumbers([1, 4, 2, 6, 3, 9]))
# Output: 3"
Create an if-statement for the given conditions.x is greater than or equal to 5,"if (x >= 5) {
  // Do something
}"
Write a Python code to convert the given temperature from Celsius to Fahrenheit.25,"Celsius = 25
Fahrenheit = (Celsius * 9/5) + 32

print('{} degrees Celsius is equal to {} degrees Fahrenheit.'.format(Celsius, Fahrenheit))
# Output: 25 degrees Celsius is equal to 77 degrees Fahrenheit."
Construct a for-loop with a range from 1 to 5.,"for (int i=1; i <= 5; i++) {
  // Do something
}"
What is the hexadecimal representation of the number 255?,FF
"Do a range check based on the provided code and output results.number = 4
lower_bound = 2
upper_bound = 5",True
Add a condition to the following code in Python to check if the given number is greater or less than 5.num = 3,"if num > 5:
    print(""The number is greater than 5"")
elif num < 5:
    print(""The number is less than 5"")"
Write a Python program to find all the prime numbers in the range between 1 to 1000.,"# Python program to find all the prime numbers in a 
# given range using Sieve of Eratosthenes 

def SieveOfEratosthenes(n): 
    # Create a boolean array ""prime[0..n]"" and 
    # initialize all entries it as true. A value   
    # in prime[i] will finally be False if i is 
    # Not a prime, else True. 
    prime = [True for i in range(n+1)] 
    p = 2
    while (p * p <= n): 
          
        # If prime[p] is not changed, then it is  
        # a prime 
        if (prime[p] == True): 
              
            # Update all multiples of p 
            for i in range(p * p, n+1, p): 
                prime[i] = False
        p += 1
    
    # Print all prime numbers 
    prime_nums_list = [] 
    for p in range(2, n): 
        if prime[p]: 
            prime_nums_list.append(p) 
    
    return prime_nums_list 
  
# Driver code 
n = 1000
print(SieveOfEratosthenes(n))"
"Write a Pyhton program to generate a new list whose elements are the two times of the given list elements.List = [1, 2, 3, 4, 5]","# Generate a new list whose elements are twice of the given list elements 

list1 = [1, 2, 3, 4, 5] 
   
list2 = [] 
   
# using loop to iterate the elements 
for i in list1: 
    list2.append(i * 2) 
      
# printing the new list 
print(list2)"
"Create a function to check if a string contains only unique characters.string = ""Programming""","def unique_chars(string):
    # List to keep track of characters 
    characters = []
    
    for c in string:
        if c not in characters:
            characters.append(c)
        else:  
            return False
    
    return True"
"Write a Python program to inverse a dictionary, so that the keys become values and values become keys.dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}","# Python program to inverse a dictionary 
  
# Function to inverse a dictionary
def inverse_dict(dictionary): 
    inverse = dict() 
    for key in dictionary: 
        linverse = inverse.setdefault(dictionary[key], []) 
        linverse.append(key) 
    return inverse
  
# example dictionary  
dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}
  
# Print the inverse dictionary
print(inverse_dict(dictionary))"
"Write a function in Python that takes in two lists and returns the lengths of the lists and the values that are common in both.list1 = [1, 2, 3, 4, 6]
list2 = [2, 4, 8, 10]","def compare_lists(list1, list2):
    length1 = len(list1) 
    length2 = len(list2) 
    common_values = list(set(list1).intersection(list2)) 
    return length1, length2, common_values"
"Using the given code, add the missing terminating condition for the loop.values = [3, 5, 7]
i = 0
while ():  # Add the condition
    print(values[i])
    i += 1","values = [3, 5, 7]
i = 0
while (i < len(values)):  # Add the condition
    print(values[i])
    i += 1"
"Edit the given code to add a function that calculates the area of a circle given its radius.def circumference(r):
    '''Calculates the circumference of a circle given its radius'''
    return 2* PI * r","def circumference(r):
    '''Calculates the circumference of a circle given its radius'''
    return 2* PI * r

def area(r):
    '''Calculates the area of a circle given its radius'''
    return PI * r * r"
"Edit the following code to print the last element of the list.arr = [1, 2, 3]
i = 0
while i < len(arr):
    print(arr[i])
    i += 1","arr = [1, 2, 3]
i = 0
while i < len(arr):
    print(arr[i])
    i += 1
print(arr[len(ar)-1])"
"Edit the following code in Python to swap two elements in a list.list1 = [1, 2, 4]

list1[0], list1[1] = list1[1], list1[0]","list1 = [1, 2, 4]

list1[0], list1[2] = list1[2], list1[0]"
"Convert the string in the given variable to lowercase.String: ""HELLO WORLD!""",str.toLowerCase();
Tokenize the given sentence.Sentence: He likes the quick brown fox,"['He', 'likes', 'the', 'quick', 'brown', 'fox']"
"Reverse a list of integers and output the result.[1, 2, 3, 4]","[4, 3, 2, 1]"
"Create a Python class ""Point"" that has two instance variables x and y.","class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y"
Design a function to convert a given numerical grade to a corresponding letter grade.,"def grade_to_letter(grade):
    if grade >= 90:
        return 'A'
    elif grade >= 80:
        return 'B'
    elif grade >= 70:
        return 'C'
    elif grade >= 60:
        return 'D'
    else:
        return 'F'"
"Merge the elements of two given arrays into one.[1, 2, 3] and [4, 5, 6]","[1, 2, 3, 4, 5, 6]"
Create a custom function to use in a python program that checks whether a given number is even or odd.,"def even_odd(num):
    '''This function will check if a number is even or odd
    and return 'even' or 'odd'.
    '''
    if num % 2 == 0:
        return ""even""
    else:
        return ""odd"""
Generate a list with the numbers from 1 to 10 using Python.,"# Generate a list with the numbers from 1 to 10
listA = []
for i in range(1,11):
    listA.append(i)
    
print(listA)"
"Convert the following function to use the reduce method in Python.def sum_list(nums):
  total = 0
  for num in nums:
    total += num
  return total","def sum_list(nums):
    return reduce(lambda x,y: x + y, nums)"
"Construct a query using Mongoose that returns all documents that match a certain criteria.Find all documents in the ""users"" collection where the ""city"" field is equal to ""Los Angeles"".","db.users.find({city: ""Los Angeles""})"
Devise a programming logic to find the sum of odd numbers between 1 and 50.,"total = 0
for i in range(1,51):
    if (i % 2 == 1):
        total += i
print(total)"
"Write a query in elasticsearch that returns documents that contain matching content.Find all documents in the ""products"" index that contains the phrase ""Black Friday""","GET products/_search
{
  ""query"": { 
    ""multi_match"": { 
      ""query"": ""Black Friday"", 
      ""fields"": [""*""] 
    }
  }
}"
"Write a function in Python to merge two sorted arrays.arr1 = [1, 5, 9]
arr2 = [2, 3, 6, 8]","def merge_sorted_arrays(arr1, arr2):
    n1, n2 = len(arr1), len(arr2)
    i, j, k = 0, 0, 0
    arr3 = [0] * (n1 + n2)

    while i < n1 and j < n2:
        if arr1[i] < arr2[j]:
            arr3[k] = arr1[i]
            i += 1
        else:
            arr3[k] = arr2[j]
            j += 1
        k += 1

    # Copy remaining elements 
    while i < n1:
        arr3[k] = arr1[i]
        i += 1
        k += 1

    while j < n2:
        arr3[k] = arr2[j]
        j += 1
        k += 1

    return arr3"
Summarize how to handle missing data in Pandas.,"There are a few different approaches to handling missing data in Pandas. The most common is to fill the null values with a placeholder value such as 0 or NaN. Alternatively, you can drop the rows containing the missing values. Depending on the dataset, you may also be able to fill the missing values in with a suitable statistical or machine learning model or use a backfill or forward fill method to fill in the gaps."
List three differences between a list and a tuple in Python.,"The three main differences between a list and a tuple in Python are:
1. Lists are mutable and tuples are immutable. That is, changes can be made to a list whereas elements of a tuple cannot be changed.
2. Lists use square brackets and tuples use parentheses.
3. Lists store arbitrary objects, whereas tuples store data of a specific type. For example, a list could contain integers, strings and objects while a tuple can only contain a predetermined number of elements."
"Suggest a way to optimize a given code segment.x = 0
for i in range(100):
    for j in range(100):
        x = x + 1","To optimize this code segment, you can use the NumPy library to take advantage of vectorized operations and reduce the number of iterations. Additionally, you can use MultiProcessing to run the code in parallel, taking advantage of multiple cores on the machine:

import numpy as np

x = np.zeros((100, 100))

for i in range(100):
    x[i] = x[i] + 1"
"Debug the following code to print a list of all prime numbers between 1 and 10for i in range(1, 10):
    for x n range 2, i // 2
    if i % x == 0 
    print(i)","for i in range(2, 10): 
    is_prime = True
    for x in range(2, i // 2 + 1): 
        if i % x == 0: 
            is_prime = False
            break
    if is_prime: 
        print(i)"
"Write a function that takes in a list and an element, and returns the index of the element in the list.list = [1, 2, 5, 8, 9]
element = 5","def find_index(lst, element):
    for i,num in enumerate(lst):
        if num == element:
            return i
    return -1"
"Modify the following code to print out all even numbers in the list.lst = [1, 2, 3, 4, 5]","for i in lst:
    if i % 2 == 0:
        print(i)"
"Write a code to print out all dates between two given dates in Pythonstart_date = '08/20/2020'
end_date = '08/30/2020'","from datetime import timedelta, date

def daterange(start_date, end_date):
    for n in range(int ((end_date - start_date).days)):
        yield start_date + timedelta(n)

start_date = date(2020, 8, 20)
end_date = date(2020, 8, 30)
for single_date in daterange(start_date,end_date):
    print(single_date.strftime(""%d/%m/%Y""))"
What is stdin and stdout in Python?,"In Python, stdin and stdout are two objects used to read standard input and print standard output respectively. stdin is used to read input from the command line or a script and stdout is used to write the output back to the command line or script. The advantage of using stdin and stdout is that they are portable and work on all versions of Python, whereas using input() and print() functions work only if the code is executed directly in Python interactive shell."
"Write a code that prints the reversed version of a given Python list.list = [1, 2, 3, 4]","def reverse_list(lst):
    reversed_list = lst[::-1]
    return reversed_list

print(reverse_list([1, 2, 3, 4]))"
What is type hinting in Python?,"Type hinting is a feature of the Python language that allows one to add type information to a variable, a function, and its parameters. The type hinting allows Python to infer the type of data to be used and this helps the interpreter to identify any errors and provide more feedback during the development process. It also makes the code more readable and maintainable since type information can be used to provide auto-complete and better error messages."
Compare inheritance and composition in Python,"Inheritance and composition in Python are two approaches for achieving code reuse. Inheritance involves creating a parent class which contains method and member field definitions. These are then used in a subclass and can be overridden to make them more specialized. Composition involves designing objects that contain references to other objects, using instance variables whose types are interfaces or classes. This way, the composition object can act as a proxy to the inner objects, passing requests on to them as required. The advantages of composition over inheritance include greater control over class dependencies and better encapsulation."
"Write a code that takes two lists and returns one combined listlist1 = [1, 2, 3]
list2 = [4, 5, 6]","def combine_lists(list1, list2):
  combined_list = list1 + list2
  return combined_list

print(combine_lists([1, 2, 3], [4, 5, 6]))"
Generate a regular expression to match a UK phone number,"import re
pattern = re.compile(""^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$"")"
Develop a python code to sort an array of numbers,"def bubble_sort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Generate a function in Python to calculate the total cost of an item given its price and quantityPrice=10 and Quantity=5,"def calculate_total_cost(price, quantity):
    return price * quantity"
"Identify the input and output for this code snippet.def adder(x, y):
    return x + y","Input: two integer variables, x and y
Output: the sum of x and y, an integer"
"Using the provided template, create a function which calculates the area of a right triangle.# calculate the area of a right triangle
# @param side_a {Number} - the length of side A of the triangle
# @param side_b {Number} - the length of side B of the triangle","const areaOfRightTriangle = (side_a, side_b) => 0.5 * side_a * side_b;"
"Create a regular expression to find the pattern ""123456"" in a text.",/123456/
Check if the given number is an even or odd number.let num = 42,"if (num % 2 == 0) {
  console.log('The number is even');
} else {
  console.log('The number is odd');
}"
"Compare the two given strings and output the longer one.let str1 = 'hello';
let str2 = 'world';","if (str1.length > str2.length) {
  console.log(str1);
} else {
  console.log(str2);
}"
Create a recursive algorithm to sum the numbers between 1 and n (inclusive).n = 5,"function recSum(n) {
  if (n === 1) return 1;
  return n + recSum(n-1);
}

// Usage
console.log(recSum(5)); // 15"
Create a Python program to create a list of the first 10 prime numbers.,"def prime_numbers(n): 
  primes = [2] 
  num = 3
 
  while len(primes) < n: 
    for i in range(2, num): 
      if (num % i == 0): 
        break
    else: 
      primes.append(num) 
    num += 1
  
  return primes

# Usage
print(prime_numbers(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
Create a code to generate a unique 7-character string of random numbers and letters.,"import random, string

def random_string():
    random_str = ''.join([random.choice(string.ascii_letters + string.digits) for i in range(7)])
    return random_str"
Write a code that takes in a string and returns the total count of each letter of the alphabet it contains.example123,"def letter_count(string):
    string = string.lower()
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    counts = {letter: 0 for letter in alphabet}
    
    for letter in string:
        if letter in alphabet:
            counts[letter] += 1
    
    return counts"
"Create a function to search a list of numbers and return the first index of the searched number, or -1 if the number does not exist.[1,2,3], 3","def linear_search(array, num):
    for index, element in enumerate(array):
        if element == num:
            return index
    return -1"
Create a function to find the sum of all the multiples of 3 or 5 below 1000.,"def sum_multiples():
    sum = 0
    for num in range(1000):
        if num % 3 == 0 or num % 5 == 0:
            sum += num
    return sum"
Create a program that counts the number of words in a sentence.,"def word_count(sentence):
    words = sentence.split() 
    return len(words)"
"Given a string, concatenate the first and last character of the string together.String: Grass",gs
"Determine if the given list is ascending or not.List: [5, 4, 3, 9, 8]",False
"Write code to sort a given array of strings.[""cat"", ""dog"", ""bird"", ""fish""]","def sort_array(arr):
    arr.sort()
    return arr

sort_array([""cat"", ""dog"", ""bird"", ""fish""])

# Output:
[""bird"", ""cat"", ""dog"", ""fish""]"
"Convert the following array to a dictionary using Python.[('A', 5), ('B', 3), ('C', 4), ('D', 7)]","def to_dictionary(arr):
    dict = {}
    for i in arr:
        dict[i[0]] = i[1]
    return dict

to_dictionary([('A',5), ('B', 3), ('C', 4), ('D', 7)])

# Output:
{'A': 5, 'B': 3, 'C': 4, 'D': 7}"
"Search the string for duplicates and remove them.Input: ""googleeee""","def remove_duplicates(str):
    result = """"
    for i in str:
        if i not in result:
            result += i
    return result

remove_duplicates(""googleeee"")

# Output:
""gole"""
Determine if a given number is prime using Python.Input: 20,"def is_prime(n):
    if n < 2:
        return False
    elif n == 2:
        return True
    else:
        for i in range(2, n):
            if n % i == 0:
                return False
        return True

is_prime(20)

# Output:
False"
"Identify the data type for this expression: ""Hello World!""","The data type for this expression ""Hello World!"" is a string."
"Edit the given code to remove compile time error.def add_two_numbers(a, b):
    return a b","def add_two_numbers(a, b):
    return a + b"
"Rewrite this query using OR operator.SELECT * FROM customers WHERE country = ""USA"" AND state = ""NC""","SELECT * FROM customers WHERE country = ""USA"" OR state = ""NC"""
What is the result of this expression?2 ** 3,The result of this expression is 8.
"Create an Angular component that displays information about a user.const user = { 
  id: 1, 
  name: 'Bob', 
  age: 23, 
  email: 'bob@example.com'
};","import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-user-info',
  template: `
    <div>
      <p>ID: {{ user.id }}</p>
      <p>Name: {{ user.name }}</p>
      <p>Age: {{ user.age }}</p>
      <p>Email: {{ user.email }}</p>
    </div>
  `
})
export class UserInfoComponent implements OnInit {

  user = {
    id: 1,
    name: 'Bob',
    age: 23,
    email: 'bob@example.com'
  };

  constructor() { }

  ngOnInit() {
  }

}"
"Write a function in Python to print out the elements of a given array in reverse order.array = [1,2,3,4,5];","def reverse_array(array): 
  for i in reversed(array): 
    print(i) 

reverse_array(array); // Output: 5,4,3,2,1"
"Write an algorithm in Python to search for the first non-repeating element in a given array.array = [4,6,4,1,8,6,44,21];","def find_non_repeating(array):
  for i in array:
    if array.count(i) == 1:
      return i
  
find_non_repeating(array); // Output: 1"
"Using a loop, output all the even numbers up to the given number n.n = 10;","for i in range(2,n+1,2):
  print(i)

// Output: 2,4,6,8,10"
Write a for loop in Python to print the first 10 even numbers.,"for i in range(2, 21, 2): 
    print(i)"
Write a function that takes two numbers as inputs and returns the larger number.,"def max_num(a, b):
    if a > b:
        return a
    else:
        return b"
"Use the .filter() function to find all even numbers from an array of numbers: [3, 5, 10, 7, 8, 11].[3, 5, 10, 7, 8, 11]","[3, 5, 10, 7, 8, 11].filter(x => x % 2 == 0) 
  // Output: [10, 8]"
"Determine the number of columns and rows in a given 2D array.The given 2D array is [[1,2,3], [4,5,6]].","// Function to determine the 
// number of columns and rows in a 2D array 
void getSize(int matrix[2][3]) 
{ 
	int row = sizeof(matrix) / sizeof(matrix[0]); 
	int column = sizeof(matrix[0]) / sizeof(matrix[0][0]);	 
	
	// Print the number of rows and columns 
	cout << ""The number of rows is : "" << row << endl; 
	cout << ""The number of columns is : "" << column; 
}"
"Generate a code in R to remove spaces and punctuation from a given string.The given string is ""Hello, World."".","# removing spaces and punctuation
remove_punctuation <- function(str){
  gsub(""[[:punct:] ]+"", """", str)
}

str <- ""Hello, World.""

print(remove_punctuation(str))"
Describe how dynamic programming works in programming.,"Dynamic Programming is a technique for solving complex programming problems by breaking them down into a collection of subproblems. It allows optimal solutions to be efficiently computed by breaking a single problem into subproblems and combining their solutions. Dynamic Programming is used for both optimization and selection problems, where subproblems are solved by storing and reusing the solutions to subproblems already solved."
"Given a list of numbers, write a function to check for odd numbers.my_list = [-1, 0, 1, 2, 3]","def is_odd_number(list):
    for num in list:
        if num % 2 != 0:
           return True 
    return False"
"What is the purpose of the ""os"" module in Python?","The ""os"" module in Python provides a way of using operating system dependent functionality. It includes functions for interacting with the filesystem, manipulating paths, and creating and interpreting file descriptors. It also provides miscellaneous operating system interfaces, such as tools for accessing environmental variables and for changing the current working directory."
"Create a function ""percentage"" that calculates the percentage to solve the following problem:amount = 5
total = 10","def percentage(amount, total):
    return (amount * 100) / total"
"Using numpy, write a function to check if a given matrix is symmetric.my_matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]","import numpy as np 

def check_symmetric(matrix):
    matrix_np = np.array(matrix)
    return np.array_equal(matrix_np, matrix_np.T)"
"Modify the following function to ensure that the number is always greater than zero.def get_random_number():
    return random.randint(-10, 10)","import random 

def get_random_number():
    num = random.randint(-10, 10)
    if num < 0:
        num = -num
    return num"
Create a regular expression to extract a string of 8 alphanumeric characters.,"import re 

my_regex = re.compile(r'[a-zA-Z0-9]{8}')"
"Let n1 and n2 be two positive integers.What is the result of n1 % n2n1 = 8
n2 = 5",The result of n1 % n2 is 3.
"Write a code to generate a random password consisting of 8 characters with atleast one lowercase letter, one uppercase letter and one number.","import string
import random 

def generate_password():
    password_characters = string.ascii_letters + string.digits
    password = ''.join(random.choice(password_characters) for i in range(8))
    if not any(char.islower() for char in password):
        password = password[:7] + random.choice(string.ascii_lowercase)
    if not any(char.isupper() for char in password):
        password = password[:7] + random.choice(string.ascii_uppercase)
    if not any(char.isdigit() for char in password):
        password = password[:7] + random.choice(string.digits)
    return password"
"Given a list of names, capitalize the first letter of each name.names = [""john"", ""sarah"", ""joe"", ""dave""]","def capitalize_names(names):
    capitalized_names = []
    for name in names:
        capitalized_name = name[0].upper() + name[1:]
        capitalized_names.append(capitalized_name)
    return capitalized_names"
Create a program that prints out triangle of stars.,"def print_triangle(n):
    for i in range(1, n * 2): 
        for j in range(1, i + 1): 
            print(""*"", end = "" "")
        print(""\r"")"
"Create a MongoDB collection named ""users"" with 2 fields called ""name"" and ""age"".","db.createCollection(""users"", {
  validator: {
    $and: [
      {name: { $type: ""string"" } },
      {age: { $type: ""int"" } }
    ]
  }
});"
Write a function in Python to check if a string consists of only alphabetic characters.,"def check_alphabetic(s):
    for c in s:
        if not c.isalpha():
            return False
    return True"
What is an example of a multi-dimensional array?,"An example of a multi-dimensional array is a two-dimensional array, which is an array of arrays. For example:

var array = [[1,2,3], [4,5,6], [7,8,9]];"
Which of the following type is used to store characters in memory?,"The data type used to store characters in memory is the character data type, also known as the char type in most programming languages."
"Specify an appropriate condition that limits the set of documents produced based on the given context.In a newsreader application, train a classifier to pull out only the articles about current world news.",The condition for the classifier should be to limit the set of documents to those where the topics include current events in the world.
"Identify the data structure usage in the following code.filenames = ['/home/user/project_data/sample_1.json', '/home/user/project_data/sample_2.json']",The data structure used in the code is a list. The list contains two elements - strings which are the filenames of the json files.
"Remove the given function from the code and replace it with a lambda expression.def multiply_by_two(x):
   return x * 2",multiply_by_two = lambda x: x * 2
Create a variable to store the age of a person and print a corresponding message.age = 20,"age = 20
print(f""The age of the person is {age}."")"
Usage of Global Variable,A global variable is a variable that can accessed by any part of a program. It is created outside any function body and can be used without passing it as an argument or declaring it in the function.
"Given input strings s and t, find the length of the longest common substring.s = ""abcde""
t = ""acfgh""","The length of the longest common substring of s and t is 2, since the characters ""a"" and ""c"" are the longest common substring."
"Perform a linear search on the given array for the target value.arr = [2, 7, 4, 8, 10] 
target = 8","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

linear_search(arr, target) # returns 3"
"Calculate the average of the numbers in the given list.numbers = [2, 10, 15, 20, 25, 30]",The average of the numbers in the given list is 17.5.
"Compute the standard deviation of the given array.data = [10, 15, 20, 25, 30]","import numpy as np

data = [10, 15, 20, 25, 30]
standard_deviation = np.std(data)
print(f""Standard deviation of the given array is {standard_deviation}."")"
"Implement a function that takes a string as a parameter and returns a modified string with the words reversed.string = ""This is a sentence.""","def reverse_words(sentence):
    return ' '.join(sentence.split()[::-1])

# Result:
reverse_words(string)  # ""sentence. a is This"""
"Compute the Minkowski distance between two lists.list_1 = [1, 2, 3]
list_2 = [-1, -2, -3]","def minkowski_distance(list_1, list_2, p):
    return (sum([abs(x-y)**p for x, y in zip(list_1, list_2)]))**(1/p)

# Result:
minkowski_distance(list_1, list_2, 3)  # 6.0"
"Write a code to generate a list of common elements from two given lists.list_1 = [1, 2, 3, 4]
list_2 = [2, 4, 8, 16]","def common_list(list_1, list_2):
    output = []
    for i in list_1:
        if i in list_2:
            output.append(i)
    return output

# Result:
common_list(list_1, list_2)  # [2, 4]"
"Create a program that will filter out all numbers divisible by 3 from the given list of integers.[2, 3, 4, 6, 8, 9, 10, 12]","def filter_3(nums):
    result = []
    for num in nums:
        if num % 3 != 0:
            result.append(num)
    return result"
"Create a function that takes a list of words and returns a list of capitalized words.['apple', 'orange', 'grape']","def capitalize_words(words):
    result = []
    for word in words:
        result.append(word.capitalize())
    return result"
Request the average temperature of the city 'Boston' from the Weather API.,"import requests
def get_average_temperature(city):
    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'
    response = requests.get(api_url)
    data = response.json()
    temp = data['main']['temp']
    return temp - 273.15"
"Design a program to partition a given list of numbers into two halves.[2, 6, 3, 8, 9]","def partition(list):
    half_len = len(list)//2
    left_half = list[:half_len]
    right_half = list[half_len:]
    return left_half, right_half"
"Design a program for implementing a linear search algorithm[3, 6, 8, 9, 15], 8","def linear_search(list, item):
    for i in range(len(list)):
        if list[i] == item:
            return i 
    return -1"
Describe what an else clause does in an if statement.,An else clause is used in an if statement as a way to define an alternative block of code that will be executed when the condition of the if statement is not met.
"Find the mean of the following set of numbers: 10, 20, 30, 40",25
"Find the maximum value in a given array of integers.[4, 6, 9, 11, 15]",15
Retrieve the last character of a given string.Programming,g
"Create a Python function that takes a list of strings and removes any words that include numbers.list_of_strings = [""hello123"", ""world456"", ""foo"", ""bar7""]","def remove_numbers_from_list(list_of_strings):
    '''This function will take a list of strings and remove any words that include numbers.'''
    modified_list = []
    for word in list_of_strings:
        if not any(char.isdigit() for char in word):
            modified_list.append(word)
    return modified_list
    
if __name__ == '__main__':
    list_of_strings = [""hello123"", ""world456"", ""foo"", ""bar7""]
    print(remove_numbers_from_list(list_of_strings))"
"Design and implement an algorithm to add two integers.num1 = 4
num2 = 5","def add_integers(num1, num2):
    '''This function will add two integers.'''
    return num1 + num2

if __name__ == '__main__':
    num1 = 4
    num2 = 5
    print(add_integers(num1, num2))"
Create a function to convert an integer to its binary representation.num = 15,"def int_to_binary(num):
    '''This function will convert an integer to its binary representation.'''
    binary = ''
    while num > 0:
        binary += str(num % 2)
        num //= 2
    return binary[::-1]

if __name__ == '__main__':
    num = 15
    print(int_to_binary(num))"
"Design an algorithm to find the longest increasing subsequence in an array.input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]","def get_longest_increasing_subsequence(input):
    '''This algorithm will find the longest increasing subsequence in an array.'''
    n = len(input)
    leng = [1]*n
    for i in range(n):
        for j in range(i):
            if(input[i] > input[j] and leng[i] < leng[j] + 1):
                leng[i] = leng[j]+1
    max_seq_len = max(leng)
    max_seq = []
    for i in range(n):
        if(leng[i] == max_seq_len):
            max_seq.append(input[i])
            max_seq_len -= 1
    max_seq.reverse()
    return max_seq

if __name__ == '__main__':
    input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]
    print(get_longest_increasing_subsequence(input))"
Build an algorithm to check if a given number is a prime number or not.,"def is_prime_number(num):
    '''This algorithm will check if a given number is a prime number or not.'''
    if num <= 1:
        return False

    for i in range(2, num):
        if num % i == 0:
            return False

    return True

if __name__ == '__main__':
    num = 7
    print(is_prime_number(num))"
"Write a line of code to print the summation of all elements in a list.list1 = [1, 2, 3, 4, 5]",print(sum(list1))
Define a Python class called “Person”.,"class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
 
  def speak(self, message):
    print(f""{self.name} says: {message}"")"
"Create a function to find the maximum element of a 3x3 matrix.myMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def find_max_element_of_matrix(matrix):
  # declare a variable to store the max value 
  max = matrix[0][0]
  
  # loop through the matrix 
  for row in range(len(matrix)):
    # loop through each element in the matrix 
    for col in range(len(matrix[row])):
      # if the elements value is greater then the max value, set the max value to that element 
      if matrix[row][col] > max:
        max = matrix[row][col]
  
  # return the max value
  return max"
"Create a function to convert a given number of days to years, months, and days.","def convert_days_to_years_months_days(n): 
  years = int(n/365) 
  months = int((n - (years*365))/30) 
  days = int(n - (years*365 + months*30))
  
  return (years, months, days)"
"Create a function that compares two binary strings and returns the number of differences between them.string1 = ""100100""
string2 = ""100011""","def differences_in_binary_strings(string1, string2):
  # initialise a variable to store total differences
  total_differences = 0

  # loop through each digit in the strings
  for i in range(len(string1)):
    # check if the digits in the same position in each string are different
    if string1[i] != string2[i]:
      # increment the total differences
      total_differences += 1

  return total_differences"
Convert the given decimal number to binary.30,11110
What is a stack overflow error and how can it be avoided?,"A stack overflow error occurs when too many functions are called or variables are used during the execution of a program, resulting in a stack overflow. This error is caused because the stack memory area is too full, and thus it can't store any more data. It can be avoided by using a larger stack, optimizing code to use less function calls, and using fewer local variables. Additionally, using recursive functions and a language with automatic memory management can help prevent stack overflow errors."
Create an array of 1000 random integers from 0 to 1000.,"function randomIntegers() {
    let randomIntegers = [];
    for (let i = 0; i < 1000; i++) {
        randomIntegers[i] = Math.floor(Math.random() * 1001);
    }
    return randomIntegers;
}
randomIntegers(); // Output: [513, 835, 593, 767, ...]"
Find the prime factorization of the given number.90,2 x 3 x 3 x 5
"Compare two given strings and print the differences between them.String1: This is a sentence.
String2: This is not a sentence.","String1: This is a sentence.
String2: This is not a sentence.
Differences: 
String1: 'a sentence.'
String2: 'not a sentence.'"
"Add a loop to the code to print out the numbers from 10 to 0.for i in range(10):
    print(i)","for i in range(10, 0, -1):
    print(i)"
"Based on the given input, generate a new list with its elements in reverse order.my_list = [1,2,3,4,5]","new_list = my_list[::-1]
print(new_list) # prints [5,4,3,2,1]"
"Create a function which takes two strings as parameters and return the concatenating of the two strings.string_1 = ""hello""
string_2 = ""world""","def concatenate_strings(s1, s2):
    """"""
    This function takes two strings as parameters and returns the concatenation of the two strings.
    """"""
    return s1 + s2

print(concatenate_strings(string_1, string_2)) # prints ""helloworld"""
Write a code to implement a basic calculator to add two numbers.,"def add_numbers(num1, num2):
    """"""
    This function takes two numbers as parameters and returns their sum.
    """"""
    return num1 + num2 

if __name__ == ""__main__"":
    num1 = float(input(""Enter first number: ""))
    num2 = float(input(""Enter second number: ""))
    print(add_numbers(num1, num2))"
"Analyze the given list and return the index of the first occurrence of the number 7.numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]","numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]

def find_index(lst):
    """"""
    This function takes a list of numbers as a parameter and returns the index of the first occurrence of the number 7.
    """"""
    for i in range(len(lst)):
        if lst[i] == 7:
            return i
        
print(find_index(numbers)) # prints 5"
"Algorithmically classify a given word as either a verb (action word) or a noun (object).word = ""write""","def classify_word(word):
    """"""
    This function takes a word as a parameter and returns its classification - verb or noun.
    """"""
    if word in [""run"", ""jump"", ""swim""]:
        return ""verb""
    else: 
        return ""noun""

print(classify_word(""write"")) # prints ""verb"""
Create a game of rock-paper-scissors using functions and conditionals.,"def play_game():
    """"""
    This function is a game of rock-paper-scissors.
    """"""
    import random
    player_input = input(""Choose rock(r), paper(p) or scissors(s): "")
    computer_choice = random.choice([""r"", ""p"", ""s""])
    if player_input == computer_choice:
        return ""It is a draw""
    elif player_input == ""r"":
        if computer_choice == ""p"":
            return ""Computer Wins!""
        else:
            return ""Player Wins!""
    elif player_input == ""p"":
        if computer_choice == ""s"":
            return ""Computer Wins!""
        else:
            return ""Player Wins!""
    elif player_input == ""s"":
        if computer_choice == ""r"":
            return ""Computer Wins!""
        else:
            return ""Player Wins!""
    else:
        return ""Invalid input""

print(play_game())"
"Produce an output string with the first two letters of the words in the given string capitalized.string = ""hello world""","def capitalized(string):
    """"""
    This function takes a string as a parameter and returns a new string with the first two letters of the words in the string capitalized.
    """"""
    output_string = """"
    words = string.split()
    for word in words:
        output_string += word[0].upper() + word[1].upper() + word[2:] + "" ""
    return output_string.strip()

print(capitalized(string)) # prints ""HeLlO WoRlD"""
Create a Keras model that can classify between two classes.,"from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

num_classes = 2

model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(10,)))
model.add(Dense(num_classes, activation='softmax'))

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])"
Create a Python program to calculate the product of a list of integers.,"def calculate_product(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product

if __name__ == ""__main__"":
    print(calculate_product([1,2,3,4,5]))"
Implement a version of your own version of quicksort in Python,"def quicksort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[0]
    left = []
    right = []

    for num in arr[1:]:
        if num < pivot:
            left.append(num)
        else:
            right.append(num)

    return quicksort(left) + [pivot] + quicksort(right)

if __name__ == '__main__':
    arr = [7, 3, 1, 9, 0]
    print(quicksort(arr))"
What is the best way to generate a random number in Python?,"The best way to generate a random number in Python is to use the random module. The random module provides access to functions  that are used to generate a random number in various distributions such as uniform, normal, exponential, and others.

The most basic function in random module is the function random(), which generates a random number from range [0, 1).

For example, the following code will generate a random number from range [1, 10):

    import random

    num = random.random() * 9 + 1  # Generates a random number from range [1, 10)"
Implement a function which will take a list of numbers as an input and return a sorted list,"def sort_list(numbers):
    #Base case
    if len(numbers) <= 1:
        return numbers

    pivot = numbers[0]
    left = []
    right = []
    #Divide
    for num in numbers[1:]:
        if num < pivot:
            left.append(num)
        else:
            right.append(num)
    #Conquer
    left = sort_list(left)
    right = sort_list(right)
    #Combine
    return left + [pivot] + right

if __name__ == '__main__':
    arr = [7, 3, 1, 9, 0]
    print(sort_list(arr))"
Create a function to iterate a list of strings and print them.,"def iterate_strings(string_list):
    for string in string_list:
        print(string)

if __name__ == '__main__':
    string_list = [""apple"", ""banana"", ""cherry""]
    iterate_strings(string_list)"
How would you print the contents of a 2D array in Python?,"def print_2d_array(arr):
    for row in arr:
        for value in row:
            print(value, end="" "")
        print()

if __name__ == '__main__':
    arr = [[1,2,3], [4,5,6], [7,8,9]]
    print_2d_array(arr)"
Write a Python program to convert all strings in a list to lower case,"def convert_to_lowercase(list_of_strings):
    return [string.lower() for string in list_of_strings]

if __name__ == '__main__':
    string_list = [""UPPERCASE"", ""lOwErCaSe"", ""MiXeDcAsE""]
    print(convert_to_lowercase(string_list))"
Suggest a way to count the number of two letter words in a string.,"def count_two_letter_words(string):
    words = string.split()
    count = 0
    for word in words:
        if len(word) == 2:
            count += 1
    return count

if __name__ == '__main__':
    string = ""This is a sample string with two letter words.""
    print(count_two_letter_words(string))"
Create a Python class for a 3×3 matrix.,"class Matrix3x3:

    def __init__(self):
        # Set the default 3x3 matrix values to 0
        self.matrix = [[0,0,0],[0,0,0],[0,0,0]]

    def set_value(self, x, y, value): 
        # Set the value in the matrix at position x and y
        self.matrix[x][y] = value

    def get_value(self, x, y): 
        # Get the value in the matrix at position x and y
        return self.matrix[x][y]

    def multiply_scalar(self, scalar): 
        # Multiply the matrix with a scalar
        for i in range(3): 
            for j in range(3): 
                self.matrix[i][j] *= scalar"
Design a basic linked list structure for storing integers.,"class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.length = 0

    def isEmpty(self):
        return self.head == None
    
    def insert(self, value):
        node = Node(value)
        node.next = self.head
        self.head = node
        self.length += 1
        
    def getSize(self):
        return self.length"
Generate a unique alphanumeric string of length 5.,"def generate_string():
    import string
    import random
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for i in range(5))"
Output the first 10 numbers in the Fibonacci series.,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)
    
for i in range(10):
    print(fibonacci(i))"
"Compute the average value in an array of integers[1, 2, 3, 4, 5]","def find_average(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum/len(arr)

arr = [1, 2, 3, 4, 5]
print(find_average(arr)) # 3.0"
Use a while loop to output the numbers from 0 to 10,"i = 0
while(i <= 10):
    print(i)
    i += 1"
Write a regex to match a list of valid US zip codes,"import re

def is_valid_zip(zip_code):
    regex = r""^[0-9]{5}(-[0-9]{4})?$""
    return re.match(regex, zip_code) is not None

print(is_valid_zip('12345')) # True
print(is_valid_zip('12345-6789')) # True"
"Write a function to calculate the Average True Range of a given array of price data[10, 15, 8, 11]","def calculate_ATR(data):
    max_diff = 0
    for i in range(1, len(data)):
        diff = abs(data[i] - data[i-1])
        if diff > max_diff:
            max_diff = diff
    return max_diff/len(data)

data = [10, 15, 8, 11]
print(calculate_ATR(data)) # 2.25"
"Find all numbers from a given array that can be expressed as the sum of two squares.arr = [2, 3, 4, 6, 8, 10]","vals = []
for num in arr:
    for i in range(int(num ** 0.5) + 1):
        for j in range(int(num ** 0.5) + 1):
            if i*i + j*j == num:
                vals.append(num)
                break;
print(vals)
# Output: [4, 8]"
Design a MongoDB collection Schema for stores' inventory records.,"db.inventoryRecords.insert({
 storeName: String,
 itemName: String, 
 quantity: Number,
 unitPrice: Number
})"
Manually calculate this equation: (5x + 6) / 3,(5x + 6) / 3 = (5x/3) + (6/3) = (5/3)x + 2
"Split a string of words into an array of words.str = ""This is a test string""","arr = str.split("" "")
# Output: ['This', 'is', 'a', 'test', 'string']"
"Write a function to find the longest substring without repetition.str = ""pwwkew""","def longest_substring(str):
    start = 0
    max_length = 0
    used_char = {}

    for i, char in enumerate(str):
        if char in used_char and start <= used_char[char]:
            start = used_char[char] + 1
        else:
            max_length = max(max_length, i - start + 1)

        used_char[char] = i

    return max_length"
Write a basic encryption function using Caesar Cipher.,"def caesar_encrypt(plaintext, key): 
    ciphertext = """" 
    for char in plaintext: 
        if (char.isupper()): 
            ciphertext += chr((ord(char) + key-65) % 26 + 65) 
        else: 
            ciphertext += chr((ord(char) + key - 97) % 26 + 97)
    return ciphertext"
Generate a random 10-character string with an even distribution of lowercase letters and numbers.,"import string
import random

def random_str():
    chars = string.ascii_lowercase + string.digits
    return ''.join(random.choice(chars) for _ in range(10))"
"Use the keyword ""Sum"" to find the total of the two integers 4 and 7.4, 7",The sum of 4 and 7 is 11.
"Reverse the words of the English sentence ""This is a pen"".",pen a is This
"Classify the following code as either a while loop or a for loop.i=0
while (i<5):
	print(i)
	i+=1",While loop
Create a code to save the first ten prime numbers in an array.,"# prime number sieve
def prime_numbers(n): 
 
    prime = [True for i in range(n+1)] 
    p = 2
    while (p * p <= n): 
        if (prime[p] == True): 
            for i in range(p * p, n+1, p): 
                prime[i] = False
        p += 1
  
    prime_numbers = []
    for p in range(2, n): 
        if prime[p]: 
            prime_numbers.append(p)
    return prime_numbers[:10]
  
if __name__ == ""__main__"":
    n = 100
    print(prime_numbers(n))"
Create a TCP server program using Python.,"import socket

# create a socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# get local machine name
host = socket.gethostname()

port = 9999

# bind to the port
s.bind((host, port))

# queue up to 5 requests
s.listen(5)

while True:
   # establish a connection
   clientsocket,addr = s.accept()
   print(""Got a connection from %s"" % str(addr))

   msg = 'Thank you for connecting' + ""\r\n""
   clientsocket.send(msg.encode('ascii'))
   clientsocket.close()"
"Write a code to construct a BST with the elements 11, 18, 14, 6 and 7.","# A node  
class Node:  
    def __init__(self,key): 
        self.left = None
        self.right = None
        self.val = key 

# A function to insert a new node with the given key  
def insert(root,node): 
    if root is None: 
        root = node 
    else: 
        if root.val < node.val: 
            if root.right is None: 
                root.right = node 
            else: 
                insert(root.right, node) 
        else: 
            if root.left is None: 
                root.left = node 
            else: 
                insert(root.left, node) 

# Create root node with the key 11  
root = Node(11)  
insert(root,Node(18))  
insert(root,Node(14))  
insert(root,Node(6))  
insert(root,Node(7))"
Create a code to import a module called 'math' in Python.,import math
Generate a code to execute a block of code 10 times in Python.,"for i in range(10): 
  # execute code here"
"Write a code to create a sentence from a given list of words.words = [""Today"",""I"",""am"",""happy""]","def create_sentence(words):
   sentence = """"
   for word in words:
      sentence += word + "" ""
   return sentence.strip()
   
if __name__ == ""__main__"":
   words = [""Today"",""I"",""am"",""happy""]
   print(create_sentence(words))
Output:
Today I am happy"
"Modify the code snippet so that it prints the **largest** element in the given list.list = [1, 5, 8, 10]","list = [1, 5, 8, 10]

# This code will print the largest element in the list
largest = list[0]

for item in list:
    if item > largest:
        largest = item

print(largest)"
"Select a random element from a given list.list = [1, 5, 8, 10]","import random

def select_random_element(list):
    index = random.randint(0, len(list)-1)
    return list[index]

if __name__ == ""__main__"":
    list = [1, 5, 8, 10]
    print(select_random_element(list))"
"Reorder the code snippet so that the loop terminates when i is equal to 5.i = 0
while i < 5:
	print(i)
	i += 1","i = 0
while i < 5:
	print(i)
	if i == 5:
		break
	i += 1"
"Given a list, remove all elements that are divisible by 4.list = [8, 5, 6, 8, 9, 3, 10]","def remove_elements_divisible_by_four(num_list):
   modified_list = []
   for num in num_list:
      if num % 4 != 0:
         modified_list.append(num)
   return modified_list
   
# Driver code
if __name__ == ""__main__"":
   list = [8, 5, 6, 8, 9, 3, 10]
   print(remove_elements_divisible_by_four(list))
Output:
[5, 9, 3]"
"Given a list, print all its elements in reverse order.list = [2, 3, 4, 5, 6]","def reverse_print(num_list):
  for i in range(len(num_list)-1, -1, -1):
    print(num_list[i])

# Driver code
if __name__ == ""__main__"":
   list = [2, 3, 4, 5, 6]
   reverse_print(list)
Output:
6
5
4
3
2"
Clone the repository from the given remote url.https://github.com/dagger2086/Hello-World.git,The repository has been successfully cloned from the given remote url.
Write a code that inverts the case for the given string.String: wElCOme,"def invert_case(input_string):
    result = """"
    for x in input_string: 
        if x.isupper():
            result += x.lower() 
        else: 
            result += x.upper() 
    return result"
Create a class called Team that has two attributes - name and players.,"class Team:
    def __init__(self, name, players):
        self.name = name
        self.players = players"
"If a given string contains four consecutive identical characters, write a code to print the string and the count of the consecutive characters.String: aaaagood","def four_consecutive_chars(input_string): 
    count = 1
    prev_char = """" 
    result = """" 
    for char in input_string: 
        if prev_char == char:
            count += 1 
            if count == 4:
                result += char + "" : "" + str(count) 
        else: 
            result += char + "" : "" + str(count) 
            count = 1
        prev_char = char 
    print(input_string)
    print(result)"
"Swap two elements in the given list.List: [1,2,3,4]","def swap_elements(arr): 
    temp = arr[0] 
    arr[0] = arr[1] 
    arr[1] = temp
    return arr"
Generate a unique random number in the range of 0 to 100.,The unique random number in the range of 0 to 100 is 87.
Print a text in reverse order without using any built-in function or loop.Text: Hello World,dlr ow olleH
Rewrite the given line of code to make it more efficient and concise.ifA==1 and B==2 and C==3:,if A == 1 and B == 2 and C == 3:
Compute the length of a given string without using in built length function.String: Hello,"def calculate_length(string):
    count = 0
    for letter in string:
        count += 1
    return count"
"Construct a linked list using the given data.Data: [5, 6, 2, 9, 0]","class LinkedList:
    def __init__(self):
        self.head = None
    def insert(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Given data
data = [5, 6, 2, 9, 0]

# Create linked list
linked_list = LinkedList()

for i in data:
    linked_list.insert(i)"
Design a classifier using Machine Learning in Python,"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier

# Load the data
data = pd.read_csv('data.csv')

# Split dataset into training and testing sets
X, y = data.iloc[:, 0: -1], data.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, 
                                                    random_state=42)

# Preprocess by scaling the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create the model 
clf = GradientBoostingClassifier(n_estimators=100, max_depth=4, 
                                 learning_rate=0.1)

# Train the model
clf.fit(X_train_scaled, y_train)

# Test the model
y_pred = clf.predict(X_test_scaled)"
Write a Pascal program to convert a number from decimal to hexadecimal.,"program convertToHex;
 
  // Declare a variable to store the number
  var number: integer;
 
  // Declare a variable to store the result
  var result: string;
 
  // Get the number from the user
  write('Enter the number to convert: ');
  readln(number);
 
  // Call the recursive function to convert to hexadecimal
  result := decToHex(number);
 
  // Print the result
  writeln('The hexadecimal representation of ', number, ' is ', result);
 
// A recursive function to convert a decimal number to its hexadecimal representation
function decToHex(n: integer): string;
var
  remainder: char; // To store the remainder
  result: string;
begin
  // If the number is greater than 0
  if (n > 0) then
  begin
    // Get the remainder
    remainder := Chr(n mod 16 + Ord('0'));
   
    // Convert the remainder to char A, B, C, D, E, F
    if (remainder > '9') then
      remainder := Chr(Ord(remainder) + 7);
  
    // Call the recursive function to get the rest of the digits
    result := decToHex(n div 16) + remainder;
  end
  else
    result := '';
  
  decToHex := Result;
end;
 
begin 
 
end."
"In a given list of integers, find the value that appears most frequently.nums = [2,2,2,2,3,4,5,6,6,7]","def most_frequent(nums):
    count = {}
    for num in nums:
        if num not in count:
            count[num] = 1
        else:
            count[num] += 1
    max_count = 0
    res = 0
    for key, val in count.items():
        if val > max_count:
            res = key
        max_count = max(max_count, val)
    return res"
Print out a song with 4 lines.,"Print(""Life feels like a constant struggle"")
Print(""When every day's a battle sure to ruffle"")
Print(""But keep your head up, don't you worry"")
Print(""Your courage will soon turn things to merry"")"
"Insert the missing code to print the list of numbers in reverse order.nums = [1, 2, 3, 4, 5]","nums = [1, 2, 3, 4, 5]
nums.reverse()
for num in nums:
    print(num)"
Create a program to calculate the Greatest Common Denominator (GCD) of two numbers.,"def gcd(a, b):
    while b != 0:
        c = a % b
        a = b
        b = c
    return a"
"For the following sentence, produce an output that prints the position and letter of each vowel.text = ""Programming is fun""","for index, letter in enumerate(text):
    if letter in 'aeiou':
        print(f'The letter {letter} is in position {index}.')"
Create a function to convert currency from one value to another.,"def convert_currency(amount, rate):
    return amount * rate"
Create a program that checks for duplicates in a list and removes them.,"def remove_duplicates(lst):
    res = []
    for ele in lst:
        if ele not in res:
            res.append(ele)
    return res"
Generate a regex expression that matches a string beginning with 'Hello' or 'Hi'.,/^(Hello|Hi)/.test(string)
"Edit the following code to limit the number of characters accepted in a text field to 25.<textarea name=""comment"" cols=""30"" rows=""5""></textarea>","<textarea name=""comment"" cols=""30"" rows=""5"" maxlength=""25""></textarea>"
"Given a list of numbers, write a Python function to find out the sum of the squares of all the numbers.[1, 2, 3]","def sumSquares(numbers):
  sum = 0
  for num in numbers:
    sum += (num ** 2)
  return sum"
Write a number of equations using the variable x to calculate the area of a triangle with its base set to 5 and its height set to 7.,"Equation 1:
Area = (1/2) * 5 * 7 

Equation 2: 
Area = 5 * 7 / 2

Equation 3: 
Area = 0.5 * 5 * 7"
Implement a function to convert USD dollars to Euro.amount = 100,"def convert_usd_to_euro(amount):
    """"""This function takes a given amount of USD and returns the equivalent amount in Euro """"""
    euro_amount = amount * 0.82
    return euro_amount
    
# Example Usage
usd_amount = 100
euro_amount = convert_usd_to_euro(usd_amount)
# euro_amount should be 82.0"
Design a class to represent a person's name.,"class PersonName:
    """"""Represents a person's name""""""

    # Instance Variables
    first_name = """"
    middle_name = """"
    last_name = """"
    
    def __init__(self, first_name, middle_name, last_name):
        """"""Constructor to initialize the PersonName object""""""
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
  
    # Other methods for getting, setting and printing the name"
Write a regular expression that matches a valid email address format.,^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
Describe a method to generate the next element in a Fibonacci series.,"A Fibonacci series is a sequence of numbers in which each number is the sum of the previous two numbers. To generate the next element in the series, simply add the current and previous number to get the next one. For example, given 0 and 1, the next number is 1 (0 + 1)."
"Find the maximum subarray sum in an array of integers.arr = [-2, -3, 4, -1, -2, 1, 5, -3]","def max_subarray_sum(arr):
    """"""This function takes an array of integers and returns the maximum subarray sum """"""
    current_max = arr[0]
    overall_max = arr[0]

    for num in arr[1:]:
        current_max = max(current_max + num, num)
        overall_max = max(current_max, overall_max)

    return overall_max

# Example Usage
arr = [-2, -3, 4, -1, -2, 1, 5, -3]
max_sum = max_subarray_sum(arr)
# max_sum should be 7"
Implement a singly-linked list insert function.,"// Inserts a new node with data at the 
// head of the linked list 
void insertAtHead(int data) 
{ 
    // Create a new node 
    Node* new_node = new Node(); 
  
    // Assign data to the new node 
    new_node->data = data; 
  
    // Point the new node's next pointer to the head 
    new_node->next = head; 
  
    // Make the new node the head 
    head = new_node; 
}"
"Generate a regular expression that matches the given example.Example:

'100'",/\b100\b/
Write an XPath query to identify all elements with the given ID attribute.ID: menu,//*[@id='menu']
Generate a regular expression that matches any number that is greater than 0.No input,/[1-9]\d*\.?\d*|0\.\d*[1-9]\d*/
"Write a Python program to create a histogram for a given list of numbers.list = [2, 3, 6, 5]","import matplotlib.pyplot as plt

plt.hist(list)

plt.title(""Histogram of numbers"")
plt.xlabel(""Values"")
plt.ylabel(""Frequency"")

plt.show()"
"Create a Python function to print out the last n items from a given list.list = [1, 2, 3, 4, 5], n = 3","def last_n_items(arr, n):
    if len(arr) < n:
        return arr
    return arr[-n:]
    
# Example
last_n_items(list, n) # returns [3, 4, 5]"
Create an object that adds two integers and returns their sum.,"const adder = {
  add: (a, b) => a + b
};"
"Generate a Python script that iterates over a list and prints each item.list = [1, 2, 3, 4]","for item in list:
    print(item)"
Create a Python program to validate an email address according to RFC5322 syntax.,"import re
def validate(email):
    regex = r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    if re.search(regex, email):
        return True
    else:
        return False"
"In Python, define a function to extract characters after a given substring.String = ""Hello-world-123""
Substring = ""-world""","def extract_string(str, substr):
    start_index = str.find(substr)
    if start_index == -1:
        return """"
    else:
        end_index = start_index + len(substr)
        return str[end_index:] 
   
x = extract_string(""Hello-world-123"", ""-world"")
print(x)"
"Design and write a code to identify the maximum number of vowels contained in any given string.String = ""Queensland""","def vowel_count(str): 
    # making a set of vowels 
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} 
  
    # counter variable to store the count of vowels 
    count = 0
  
    #a loop to check every character in a given string
    for alphabet in str: 
  
        # if statement to check if the character is in set of vowels 
        if alphabet in vowels: 
            count = count + 1
  
    #returning the count 
    return count 
  
# Driver code 
str = ""Queensland""
print(""No. of vowels :"", vowel_count(str))"
"Create a program to output the items in a list that appear only once.list = [50, 10, 20, 30, 10, 50, 44, 55, 44]","items_set = set(list)
unique_items = []

for item in items_set:
    if list.count(item) == 1:
        unique_items.append(item)

print(""Unique items:"",unique_items)"
"Design and write a code to detect and count the number of occurrences of a particular substring in a string.String = ""Please find the number of occurrences of this string""
Substring = ""string""","def count_occurrences(str, substr):
    count = 0
    start_index = -1 
    while True:
        start_index = str.find(substr, start_index + 1)
        if start_index == -1:
            break 
        count = count + 1
    return count 
print(""Number of occurrences:"",count_occurrences(""Please find the number of occurrences of this string"", ""string""))"
"Design a program to create a new string with the characters of the first string in the reverse order.String = ""Hello World""","def reverse(str): 
    return str[::-1] 
  
# Driver Code 
str = ""Hello World""
print(""Reverse string:"",reverse(str))"
"Create a program to output an array of words from a given string.String = ""Welcome to the world of Geeks""","def extract_words(str): 
    
    # to store the extracted words 
    words = [] 
  
    # split the string 
    word = """" 
    for i in str: 
        if i is not "" "": 
            word = word + i 
        else: 
            words.append(word) 
            word = """"             
    words.append(word) 
      
    # return the list of words 
    return words  
  
# Driver code 
str = ""Welcome to the world of Geeks""
words = extract_words(str) 
for i in words: 
    print(i)"
"Create a program to apply upper case to a given string.String = ""welcome to The world Of gEEks""","def upperCaseString(str): 
    res = """" 
    for i in range(len(str)):
        if i==0 or (str[i-1]==' '): 
            res = res + str[i].upper()
        else:
            res = res + str[i]
    return res 

str = ""welcome to The world Of gEEks""
print(upperCaseString(str))"
"Create a program to insert the given character at a particular position in a given string.String = ""Geek university""
Character = 's'
Position = 8","def insertStr(str, char, pos): 
	return str[:pos] + char + str[pos:] 

str = ""Geek university""
char = 's'
pos = 8
print(insertStr(str, char, pos))"
What is the best way to print something to the console in Python?,"The best way to print something to the console in Python is by using the built-in print() function. The syntax of this function is as follows:

print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

The print() function prints the given object to the standard output. The sep and end are keyword-only arguments which specify string to separate and end the output respectively. The default separator is a single space and the default end-string is a newline. The file argument specifies an open file object, for printing to a file, or an object with a write() method.

For example, to print the string ""hello"" to the console, you can use this code:

print(""hello"")"
What is the most efficient way to check if a given number is a prime in Python?,"The most efficient way to check if a given number is a prime in Python is to use the numpy.prime() function. This function returns a boolean value indicating whether the given number is a prime or not. The syntax is as follows:

numpy.prime(n)

The argument n must be a positive integer.

For example, to check if the number 7 is prime, you can use the following code:

import numpy as np

number = 7
print(np.isprime(number)) # returns True"
"Create a for loop to iterate over a list of words and print their length.words = [""happy"", ""sad"", ""tired"", ""energetic""]","for word in words:
    print(len(word))"
Write an algorithm to search an element in a linked list.,"def search_node(node, target):
    while node is not None: 
        if node.data == target: 
            return node
        else: 
            node = node.next
    return None"
Output the Fibonacci sequence from 0 to 15.,"The Fibonacci sequence from 0 to 15 is 0, 1, 1, 2, 3, 5, 8, 13."
"Replace the last occurrence of a given word in a string.str = ""Welcome to the world of Python""
word = ""Python""","updated_str = str.rsplit('Python',1)[0] + 'Java'

The updated string is ""Welcome to the world of Java""."
"Implement an algorithm that returns the maximum sum of a given subsequence.arr = [-2,1,3,-4,5]","The algorithm should return the maximum sum of subseqence in the array. 

To solve this, we can use the Dynamic Programming approach. The algorithm will traverse the array and for each index (i), it will calculate two values:
1. Max sum of the array including the element at index i.
2. Max sum of the array excluding the element at index i.

The algorithm should iterate through the array and return the maximum of the two values.

maxSum = max(maxSumIncludingCurrentElement, maxSumExcludingCurrentElement);

The maximum sum of the subsequence will be maxSum."
Find the number of non-negative integers that are even and less than 10.,"There are 5 non-negative integers that are even and less than 10: 0, 2, 4, 6, and 8."
"Programmatically calculate the sum of the first 10 natural numbers (1,2,3...10).","total = 0
for i in range(1,11):
    total += i

print(total)"
"Using the given array, write a function to return the count of elements next to each other that are equal.a = [1,1,1,2,2,3,4,4,4,4]","def adjacent_elements_count(arr):
    count = 0
    for i in range(1, len(arr)):
        if arr[i] == arr[i-1]:
            count += 1

    return count

print(adjacent_elements_count(a))"
Construct a RegEx pattern to identify a number followed by three uppercase letters.,^[0-9][A-Z]{3}$
"In Python, write a code snippet to calculate the average of numbers in a list.listOfNumbers = [2, 4, 6, 8]","def avg(listOfNumbers):
    total = 0
    for number in listOfNumbers:
        total += number
    return total / len(listOfNumbers)

print(avg(listOfNumbers))"
"Using the given array, create a function that returns a new array that contains elements that are greater than the given number.arr = [2, 3, 6, 9, 5]
num = 4","def greater_than(arr, num):
    result = []
    for el in arr:
        if el > num:
            result.append(el)
    return result

print(greater_than(arr, num))"
"Find the index of the letter 'a' in the string 'abcde'.string = ""abcde""",Index of 'a' in the given string is 0.
Create an array of numbers that is a random combination of integers from 1 to 25,"[2, 4, 17, 19, 25, 8, 14, 1, 15, 23, 22, 5, 6, 16, 10, 12, 3, 18, 11, 20, 9, 13, 7, 24, 21]"
Design a function for summing three numbers,"def sum_three(x, y, z): 
  return x + y + z"
Classify the given text according to its sentiment.This product is terrible.,Negative
"Generate a random password of 8 characters, including at least one letter, one number, and one symbol",Fjk3@sam
"Extract the numerical values from the following string.sentence = ""My age is 20 years old.""","num_values = [num_val for num_val in re.findall(r""\d+"", sentence)]"
"Estimate the complexity (Big-O) of this algorithm.arr = [3, 4, 7, 5, 6]

def find_average(arr):
    total = 0
    for num in arr:
        total += num
    return total / len(arr)",O(n)
"Find all possible permutations of the string ""ABC"".","permutations = [''.join(p) for p in permutations(list(""ABC""))]"
"Write a loop to convert the list of integers in the array to a single number.arr = [2, 3, 4, 5]","num = 0
for digit in arr:
  num = num * 10 + digit"
What is tail recursion?,"Tail recursion is a special form of recursion in which the recursive call is the last statement in the function. This form of recursion improves space efficiency of the algorithm, since only one activation record is needed at any given time, as there is no need to hold onto the history of the recursive call stack. This form of recursion can often be replaced by iterative solution for better performance."
Develop a MATLAB function to calculate the product of two matrices.,"function F = matrix_mult(A,B)
  [m,n] = size(A);
  [p,q] = size(B);
  if (n~=p)
      error('The matrices can not be multiplied');
  end
  F = zeros(m,q);
  for i=1:m
      for j=1:q
          sum = 0;
          for k=1:n
              sum = sum + A(i,k)*B(k,j);
          end
          F(i,j) = sum;
      end
  end
end"
"Find the longest substring of a string without repeating charactersstring=""abcabcbb""","def longestSubstring(string): 
    start_index = max_length = 0
    visited = {} 
  
    # traverse through the string  
    for i in range(len(string)):  
        if string[i] in visited and start_index <= visited[string[i]]: 
            start_index = visited[string[i]] + 1
        else: 
            max_length = max(max_length, i - start_index + 1) 
  
        visited[string[i]] = i 
  
    return max_length"
"Write Python code to return all indices of substrings in a given string.string= ""hi world bye world""","def substring_indices(string): 
    lengths = []
    # calculate length of substring 
    for i in range(len(string)): 
        for j in range(i+1, len(string)+1): 
            lengths.append(string[i:j]) 

    # create array to hold all indices 
    indices = []
    for length in lengths:
        indices.append([i for i in range(len(string)) if string.startswith(length, i)])

    return indices"
"Compress a given string using Run Length Encodingstring=""WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW""","def RunLengthEncoding(string):
    result = """" 
    count = 0
    current = string[0] 
  
    for i in range(len(string)): 
        if (string[i] == current): 
            count+= 1 
        else: 
            result += current + str(count) 
            current = string[i] 
            count = 1
    result += current + str(count)
  
    return result"
Replace all vowels in a string with a specified letterstring = 'hello world',"def replaceVowels(string, ch): 
    vowels = ""aeiouAEIOU""
    for x in string:
        if x in vowels:
            string = string.replace(x, ch) 
    return string"
Parse a given expression tree to evaluate the result,"def evaluate(root):
    # empty tree
    if root is None:
        return 0
    # leaf node
    if root.left is None and root.right is None:
        return int(root.data)
    # evaluate left tree
    left_sum = evaluate(root.left)
 
    # evaluate right tree
    right_sum = evaluate(root.right)
 
    # check which operation to apply
    if root.data == '+':
        return left_sum + right_sum
 
    elif root.data == '-':
        return left_sum - right_sum
 
    elif root.data == '*':
        return left_sum * right_sum
 
    else:
        return left_sum / right_sum"
"Determine which elements of the given list are strings.data = [0, 'a', 99, [], 'b', None]","def isString(data):
    strings = []
    for element in data:
        if isinstance(element, str):
            strings.append(element)
    return strings

print(isString(data))"
"Arrange the given list in ascending order.myList = [3, 1, 8, 2, 6, 5]","def sortList(myList):
    myList.sort()
    return myList

result = sortList(myList)
print(result)"
"Create a Dictionary where the list items are the keys and the square of the items are the valuesmyList1 = [1, 2, 3, 4, 5, 6]","def myDict(myList1):
    result = {}
    for i in myList1:
        result[i] = i**2
    return result

myDict = myDict(myList1)
print(myDict)"
"Create a function that takes 2 strings as arguments, and returns the longest string.","def longestString(str1, str2):
    if len(str1) > len(str2):
        longestString = str1
    else:
        longestString = str2
    return longestString

longestString = longestString(""Hello"", ""World"")
print(longestString)"
"Convert the given list to a dictionary where the items are the keys and the values are square of the keys.myList3 = [1, 2, 3, 4, 5]","def myDict(myList3):
    result = {}
    for i in myList3:
        result[i] = i**2
    return result

myDict = myDict(myList3)
print(myDict)"
"Create a function that takes a list and removes duplicates of the same element.myList4 = [1,2,2,3,3,3]","def removeDuplicate(myList4):
    result = []
    for x in myList4:
        if x not in result:
            result.append(x)
    return result

removeDuplicate = removeDuplicate(myList4)
print(removeDuplicate)"
Describe the necessary steps to debug a python program.,"Steps to debug a python program:

1. Check the syntax of your code to look for any obvious mistakes
2. Use print statement to understand the the variables in your program and the flow of execution.
3. Working your way through the program line by line to identify the source of the bug.
4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. 
5. If the bug is in a library that you're using, try to look into its source code to look for the bug.
6. Test small pieces of your code in isolation.
7. Take a break and come back to it with a fresh mind.
8. Ask for help from other programmers."
Design a function with two inputs that returns the maximum of the two.,"def maximum(a, b):
    if a > b:
        return a
    else:
        return b"
"Modify the below code so that it swaps two variables without the use of a temporary variable.int a = 10, b = 20; 
int temp; 
temp = a; 
a = b; 
b = temp;","int a = 10, b = 20; 
a = a + b; 
b = a - b;
a = a - b;"
"Find the index of the element that occurs only once in the array.arr = [1, 1, 5, 5, 6, 8];","def find_unique_element(arr):
 index = -1
 for i in range(len(arr)):
  freq = 0
  for j in range(len(arr)):
   if arr[i] == arr[j]:
    freq += 1
 if freq == 1:
  index = i
  break
 return index

# Testing
arr = [1, 1, 5, 5, 6, 8]
index = find_unique_element(arr)
print(""Index of the unique element is: "", index)"
Create a function that returns the sum of two numbers passed as arguments.,"def add_numbers(a,b):
  return a + b

# Testing
x = 3
y = 4
sum = add_numbers(x, y)
print(""Sum of {0} and {1} is {2}"".format(x, y, sum))"
"Given an array of integers, find the pair of elements that have the greatest difference.arr = [2, 5, 9, 11, 15, 27];","def find_greatest_difference(arr):
  max_diff = 0
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      diff = abs(arr[i] - arr[j])
      if diff > max_diff:
        max_diff = diff

  return max_diff

# Testing
arr = [2, 5, 9, 11, 15, 27]
max_diff = find_greatest_difference(arr)
print(""Greatest difference is: "", max_diff)"
"Write a function to retrieve the last element of a given array of strings.arr = [""word"", ""sentence"", ""paragraph""];","def get_last_element(arr):
  return arr[-1]

# Testing
arr = [""word"", ""sentence"", ""paragraph""]
last_element = get_last_element(arr)
print(""The last element is: "", last_element)"
"Given a dictionary, write a function to get all the keys with a given value.my_dict = {'a': 1, 'b': 2, 'c': 2};","def get_keys_by_value(my_dict, value):
  keys = []
  for k, v in my_dict.items():
    if v == value:
      keys.append(k)

  return keys

# Testing
my_dict = {'a': 1, 'b': 2, 'c': 2}
keys = get_keys_by_value(my_dict, 2)
print(""Keys with the value 2 are: "", keys)"
"Create a function to sort an array of objects by the value of a certain key.arr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}];","def sort_by_key(arr, key):
  sorted_arr = sorted(arr, key=lambda k: k[key])
  return sorted_arr

# Testing
arr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}]
sorted_arr = sort_by_key(arr, 'age')
print(""Sorted array by age: "", sorted_arr)"
"Write a function to remove all words that contain a certain letter from an array.arr = [""apple"", ""banana"", ""orange"", ""grape""];
letter = 'a'","def remove_words_by_letter(arr, letter):
  return [word for word in arr if letter not in word]

# Testing
arr = [""apple"", ""banana"", ""orange"", ""grape""]
filtered_arr = remove_words_by_letter(arr, 'a')
print(""Filtered array: "", filtered_arr)"
Fill in the blank with a successful response for a given user prompt.Please enter a valid number:,Please enter a valid number: <Enter a valid number e.g. 6>
Implement a function that checks if two strings are anagrams.,"def is_anagram(a, b):
    char_to_count = {}
    
    if len(a) != len(b):
        return False
  
    for char in a:
        if char in char_to_count:
            char_to_count[char] += 1
        else:
            char_to_count[char] = 1
    
    for char in b:
        if char not in char_to_count:
            return False
        else:
            char_to_count[char] -= 1

    for count in char_to_count.values():
        if count != 0:
            return False

    return True"
"Create a variable and set it to a value to pass the test.# Test if the variable `favorite_color` equals ""blue""","favorite_color = ""blue"""
"Using the given data, write a function that returns the average of the given numbersa_list = [1, 2, 3, 4, 5]","def average(a_list):
    total = 0
    for num in a_list:
        total += num
    return total / len(a_list)"
"Create a function that takes in a 2D list and prints the contents of the list in a 2D formatmatrix = [
    [1, 2],
    [3, 4],
    [5, 6]
]","def print_matrix(matrix):
    for row in matrix:
        for num in row:
            print(num, end="" "")
        print()"
"Create a function to find the total of all elements in the listnums = [1, 2, 3, 4, 5]","def find_total(nums):
    total = 0
    for num in nums:
        total += num
    return total"
"Given a list of numbers, write code using Python to print the sum of all elements.list_numbers = [2, 3, 4, 5, 6]","sum_of_numbers = 0

for i in list_numbers:
    sum_of_numbers += i

print(sum_of_numbers)"
"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2.s1 = 'listen'
s2 = 'silent'","def isAnagram(s1, s2): 
    if (sorted(s1) == sorted(s2)): 
        print(""The strings are anagrams."") 
    else: 
        print(""The strings aren't anagrams."")
  
isAnagram(s1, s2)"
"Write Python code to print out an inverse dictionary where the original key becomes the value and the original value become the key.original_dict = {'a':1, 'b':2, 'c':3}","inverse_dict = {value:key for key, value in original_dict.items()}
print(inverse_dict)"
"Given a dictionary of words, write Python code to find out the longest word in the dictionary.dictionary = [""apple"", ""orange"", ""pineapple"", ""banana""]","def findLongestWord(dictionary):
    longestWord = ''
    longestLength = 0
    for word in dictionary:
        if len(word) > longestLength:
            longestWord = word
            longestLength = len(word)
    return longestWord"
"Sort the given list of numbers in non-decreasing order with selection sort.[2, 1, 5, 3, 4]","[1, 2, 3, 4, 5]"
"Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings which contain the letter.lst = [""apple"",""banana"",""kiwi"",""pear""], letter = ""a""","def find_with_letter(lst, letter):
    result = []
    for s in lst:
        if letter in s:
            result.append(s)
    
    return result"
"Construct a hyperlink with text ""Google"" and link it to google.com","<a href=""http://www.google.com/"">Google</a>"
Create an algorithm with pseudocode to find maximum and minimum element of an array.,"Algorithm findMaxMin(arr)
  Input: arr - an array of integers
  Output: maxEle - the maximum element in the array, minEle - the minimum element in the array
Begin
  maxEle <- arr[0]
  minEle <- arr[0]
  for i = 0 to length(arr)-1 do
    if arr[i] > maxEle then
      maxEle <- arr[i]
    end if
    if arr[i] < minEle then
      minEle <- arr[i]
    end if
  end for
  return maxEle, minEle
End"
"Create an algorithm in MATLAB for sorting an array of integers in ascending order.arr = [8, 3, 5, 9, 4]","function sortedArr = sortAscend(arr)
sortedArr = zeros(size(arr));
count = 0;

while ~isempty(arr)
    minimum = min(arr);
    sortedArr(count+1) = minimum;
    count = count + 1;
    arr = arr(arr~=minimum);
end"
"Suggest a function written in Haskell for reversing an array.arr = [3, 4, 9, 5, 8]","reverse :: [a] -> [a]
reverse arr = rev arr []
  where
  rev [] ans = ans
  rev (x:xs) ans = rev xs (x:ans)"
"Develop an algorithm for counting the number of unique characters in a string.str = ""Hello World!""","def uniqueChars(str): 
    charCount = dict() 
    for ch in str: 
        if ch in charCount: 
            charCount[ch] += 1
        else: 
            charCount[ch] = 1
    return len(charCount)"
"We would like you to suggest a method written in TypeScript for reversing a string.str = ""abcd""","function reverseString(str) {
  let reversedStr = '';
  for (let i = str.length -1; i >= 0; i--) {
    reversedStr += str[i];
  }
  return reversedStr;
}"
"You need to write code for adding a column to a pandas DataFrame.import pandas as pd
df = pd.DataFrame({'A': [12, 4, 5, None, 1],
                   'B': [7, 2, 54, 3, None],
                   'C': [20, 16, 11, 3, 8],
                   'D': [14, 3, 17, 2, 6]})

new_col_data = [1, 1, 15, 6, 96]","import pandas as pd
df = pd.DataFrame({'A': [12, 4, 5, None, 1],
                   'B': [7, 2, 54, 3, None],
                   'C': [20, 16, 11, 3, 8],
                   'D': [14, 3, 17, 2, 6]})

new_col_data = [1, 1, 15, 6, 96]

df['new_col'] = new_col_data"
"Modify the code to print the second largest number in a list.num_list = [3, 6, 8, 4, 12, 20, 7]","num_list = [3, 6, 8, 4, 12, 20, 7]

# Sort the list in descending order
num_list.sort(reverse=True)

# Print the second largest number
print(num_list[1])"
Generate the first 10 prime numbers.,"2, 3, 5, 7, 11, 13, 17, 19, 23, 29"
What is the stack overflow limit of Python?,The stack overflow limit of Python is 2800 frames.
"You are given a 2D array. The task is to double each item in the array.arr = [[1,2], [3,4]]","[[2,4], [6,8]]"
How can one randomly shuffle a list using Python?,"import random

def shuffle(list):
    random.shuffle(list)
    return list"
You need to generate an API which returns the first 10 Fibonacci numbers.,"def FibApi():
   def fibonacci(n):
      if n < 0: 
         print(""Incorrect input"") 
      elif n == 1: 
         return 0
      elif n == 2: 
         return 1
      else: 
         return fibonacci(n-1) + fibonacci(n-2) 
   fib_list = [] 
   for i in range(1,11): 
      fib_list.append(fibonacci(i)) 
   return fib_list"
Write a regex to validate a phone number with the format XXX-XXX-XXXX.,^\d{3}-\d{3}-\d{4}$
"What will be the output of this code snippet?a = [1, 2, 3, 4, 5]
b = [x**2 for x in a]
print(b)","[1, 4, 9, 16, 25]"
"Write code in python to find the biggest number in a given list.my_list = [1, 25, 8, 10, 6]","def find_biggest_number(my_list):
    biggest_number = my_list[0]
    for i in range(0, len(my_list)):
        if my_list[i] > biggest_number:
            biggest_number = my_list[i]
    return biggest_number"
"Rearrange the elements of the list in ascending order.my_list = [8, 1, 3, 5, 4, 9]",my_list.sort()
"Using the given dictionary, find the most frequent elementmy_dict = {""A"":1,""B"":1,""C"":3,""D"":3,""E"":3}","most_frequent = max(my_dict, key=my_dict.get)
print(most_frequent)"
"Construct an if condition in Python to check if a given number is within the range of [2, 12].","if 2 <= x <= 12:
    # do something"
"Change the variable ""str"" below to upper case.let str = 'hello world!';",let str = 'HELLO WORLD!';
Create a function to calculate the Fibonacci number at the inputted index.,"function fibonacci(index) {
    if (index < 0) {
      return 0;
    }
    if (index === 0 || index === 1) {
      return 1;
    }
    return fibonacci(index - 1) + fibonacci(index - 2);
  }"
"Create a for loop that prints the values in the list ""numbers"".let numbers = [1, 2, 3, 4, 5];","for (let i = 0; i < numbers.length; i++) {
    console.log(numbers[i]);
}"
"Find the index of the element ""z"" in the array ""alphabet"" below, and print the index.let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","let index = alphabet.indexOf('z');
console.log(index);"
"Write Python code to reverse the letters in the string ""hello"".","def reverseString(s): 
    return s[::-1]

print(reverseString('hello'))"
"Modify the code to convert the string ""12345678"" to an integer.let str = ""12345678"";","let num = parseInt(str);
console.log(num);"
"Using the list as an input, write code to generate a comma-separated string of the list's elements.let fruits = [""apple"", ""pear"", ""banana""];","let str = fruits.join("", "");
console.log(str);"
"Modify the code below to use regular expressions to validate a phone number in the format ""123-456-7890"".","if (phone.match(/^\d{3}-\d{3}-\d{4}$/)) {
    console.log(""Valid phone number"");
} else {
    console.log(""Invalid phone number"");
}"
"Write a function that takes in two numbers in Roman numerals and outputs the sum.Roman numeral 1: XVI
Roman numeral 2: IX","def roman_numerals_sum(num1, num2):
    """"""This function takes two Roman numerals as parameters and outputs their sum in Roman numerals.""""""
    Int1 = int(roman.fromRoman(num1))
    Int2 = int(roman.fromRoman(num2))
    Sum = Int1 + Int2
    return roman.toRoman(Sum)"
"Create a function that returns an array of the three most common elements in an array.lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]","def three_most_common(lst):
    """"""This function takes in an array and returns an array of the three most common elements.""""""
    lst_len = len(lst)
    lst_dic = dict()
 
    for n in lst:
        if n in lst_dic:
            lst_dic[n] += 1
        else:
            lst_dic[n] = 1
 
    max_val = 0
    max_key = 0
    sec_key = 0
    last_key = 0
 
    for key, val in lst_dic.items():
        if val > max_val:
            max_val = val
            last_key = sec_key
            sec_key = max_key
            max_key = key
        elif val > sec_key:
            last_key = sec_key
            sec_key = key
        elif val > last_key:
            last_key = key
    return [max_key, sec_key, last_key]"
"Create a function that filters an array of elements based on a given criteria and returns an array of the resulting elements.lst = [2, 3, 4, 5, 6, 7, 8, 9]  # elements to filter
criteria = lambda x: x > 5  # criterion to filter by","def filter_by(lst, criteria):
    """"""This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.""""""
    return [x for x in lst if criteria(x)]"
"Create a function that takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.lst = [1, 2, 3, 4, 5]","def product_of_all_except_self(lst):
    """"""This function takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.""""""
    products = []
    n = len(lst)
    for i in range(n):
        product = 1
        for j in range(n):
            if i != j:
                product *= lst[j]
        products.append(product)
    return products"
"Create a function to filter out strings that have more than n number of characters in an array.lst = ['book', 'pen', 'pencil', 'eraser', 'ruler']
 n = 4","def filter_strings(lst, n):
    """"""This function takes in an array of strings and an integer n and returns an array of strings with more than n characters.""""""
    return [word for word in lst if len(word) > n]"
"Create a function that takes in a string and a number and returns a new string with the character at the given index replaced with another character.str = ""Hello World!""
 index = 3
 new_char = 'a'","def replace_char_at(str, index, new_char):
    """"""This function takes in a string and a number and returns a new string with the character at the given index replaced with another character.""""""
    return str[:index] + new_char + str[index + 1:]"
"Create a function to filter out elements in an array that meet a given criteria.lst = [2, 3, 4, 5, 6, 7, 8, 9] 
criteria = lambda x: x % 2 == 0","def filter_by(lst, criteria):
    """"""This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.""""""
    return [x for x in lst if criteria(x)]"
Create a function to detect whether a given character is a vowel or not.,"def is_vowel(char):
    """"""This function takes in a character and returns true if the character is a vowel, false otherwise.""""""
    vowels = 'aeiouAEIOU'
    return char in vowels"
Create a function to generate a list with length n of numbers from 0 to n-1.n = 5,"def generate_list(n):
    """"""This function takes an integer n and returns a list with length n of numbers from 0 to n-1.""""""
    return [i for i in range(n)]"
"Given two strings, create a function to find the total number of occurrences of the second string in the first string.str1 = ""Hello World!""
str2 = ""lo""","def count_string_occurrences(str1, str2):
    """"""This function takes in two strings and returns the total number of occurrences of the second string in the first string.""""""
    count = 0
    for i in range(len(str1) - len(str2) + 1):
        if str1[i:i + len(str2)] == str2:
            count += 1
    return count"
Build a Python dictionary that contains the names of the months as keys and the numbers of days in each month as values.,"months = {""January"":31, ""February"":28, ""March"":31, ""April"":30, ""May"":31, ""June"":30, ""July"":31, ""August"":31, ""September"":30, ""October"":31, ""November"":30, ""December"":31}"
"How do you use a ‘for’ loop in Python to iterate over a list of strings?list=[""Dog"",""Cat"",""Cow""]","for string in list:
    print(string)"
Generate a random number between -1 and 1 using a Python library.,"import random
random_num = random.uniform(-1,1)
print(random_num)"
"Write a function that takes a list of integers and returns a new list with all duplicate numbers removed.[3, 6, 8, 10, 10, 11, 15, 15, 15]","def remove_duplicate_integers(nums):
    new_list = []
    for num in nums:
        if num not in new_list:
            new_list.append(num)
    return new_list

print(remove_duplicate_integers([3, 6, 8, 10, 10, 11, 15, 15, 15]))"
Write a function that takes a sentence as an argument and returns a Dictionary of all the words and their counts in the sentence.'The quick brown fox jumps over the lazy dog',"def count_words(sentence):
    words_counts = {}

    words = sentence.split("" "")
    for word in words:
        if word not in words_counts:
            words_counts[word] = 0
        words_counts[word] += 1
    return words_counts

print(count_words('The quick brown fox jumps over the lazy dog'))"
Create an array from 0 to n-1.n = 10,"arr = [x for x in range(0, n)]
print(arr)"
"Write an algorithm to sort data in an array in ascending order.arr = [8, 0, 5, 10, 4, 6]","def bubble_sort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n-1):

        # Last i elements are already in place
        for j in range(0, n-i-1):

            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]

bubble_sort(arr)
print(arr)"
"Find the length of the longest increasing subsequence in an array.arr = [10, 22, 9, 33, 21, 50, 41, 60]","def longest_increasing_subsequence(arr):
    n = len(arr)

    # L[i] stores the length of the Longest Increasing 
    # Subsequence ending with arr[i]
    L = [1]*n
  
    # consider all the elements of the array in turn
    for i in range(1, n):
        for j in range(i):

            # if the element is larger then the prev element
            # update L[i] with the maximum of all such
            # possible values of L[j] + 1
            if arr[i] > arr[j]:
                L[i] = max(L[i], L[j] + 1)
  
    # L[i] now stores the LIS ending with arr[i]
    # find the maximum of all the stored values
    longest_length = 0
    for i in range(n):
        longest_length = max(longest_length, L[i])
    return longest_length

print(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))"
Convert the following number from binary to decimal form: 1101.1101,The number 1101 in binary form is 13 in decimal form.
Create an algorithm to evaluate a given expression.(3 + 5) * 2,"1. Initialize result as 0.
2. Save 3 plus 5 in a variable.
3. Multiply the variable by 2 and save it in another variable.
4. Set result as the value of the new variable.
5. Return result."
Write a Python program to calculate the median of three given numbers.,"def median_num(n1, n2, n3):
    if n1 > n2 and n2 > n3:
        return n2
    elif n3 > n2 and n2 > n1:
        return n2
    elif n1 > n3 and n3 > n2:
        return n3
    elif n2 > n3 and n3 > n1:
        return n3
    elif n2 > n1 and n1 > n3:
        return n1
    else:
        return n1"
"Create a function that takes in an input string and a delimiter, and spits out a list of words that were seperated by a given delimiter.""This_is_a_sentence""
 delimiter = ""_""","def split_words(string, delimiter):
    return string.split(delimiter)"
"Create a regular expression pattern to match a string composed of lowercase letters ""a"" through ""e"", with no other characters.",pattern = '^[a-e]*$'
Create a Python class with methods that accept a value and increase the stored value by 5.,"class MyClass:
    def __init__(self, value):
        self.value = value
        
    def increase_by_five(self):
        self.value += 5"
"Drop all duplicates from a NumPy array.arr = [10, 20, 30, 10, 30, 20]","import numpy as np

def drop_duplicates(arr):
    return np.unique(arr)"
"Reverse the elements of a given array.int[] array = {1, 2, 3, 4, 5};","for (int i = 0; i < array.length / 2; i++) {
    int temp = array[i];
    array[i] = array[array.length - i - 1];
    array[array.length - i - 1] = temp;
}"
What is a linked list?,A linked list is a data structure in which each element contains data as well as a link to the next element in the list. Linked lists provide a dynamic allocation of memory which can be useful for certain applications.
"Write code in Python to calculate the number of times a given number appears in a list.list = [2, 4, 3, 5, 4, 2, 3]
Number to find: 4","count = 0
for x in list:
  if x == 4:
    count = count +1

print(""The number 4 appears in the list "", count, "" times."")"
What is the purpose of using a data structure?,"The purpose of using a data structure is to store, organize, and manipulate data quickly and effectively. By using an appropriate data structure depending on the type of data and the operations being performed, it is possible to make data processing efficient and improve the performance of the program."
"You are given two strings and you need to output true if they are anagrams of each other, false otherwise.String 1: eat
String 2: tea",true
"Read the given code and detect which variables are not declared.int x=3;
y=4;
int z=x+y;",y is not declared.
"Implement a function to rotate a list by k elements.list = [1,2,3,4,5], k = 2","def rotate(list, k): 
    first_part = list[0:k] 
    second_part = list[k:] 
    second_part.extend(first_part) 
    return second_part"
How does the Binary Search algorithm work?,"The Binary Search algorithm works by repeatedly dividing an ordered list of items into half and searching for the desired element in that half. If the desired element is not present in the current half, the algorithm moves to the other half and the search continues until either the desired element is found or the list is exhausted."
Write code that adds two numbers using the unary operator.,"// Function to add two numbers using unary operator 
int addNumbers(int x, int y) 
{ 
    // Iterate till there is no carry 
    while (y != 0) 
    { 
        // carry now contains common 
        // set bits of x and y 
        int carry = x & y; 
  
        // Sum of bits of x and y where at 
        // least one of the bits is not set 
        x = x ^ y; 
  
        // Carry is shifted by one so that  
        // adding it to x gives the required sum 
        y = carry << 1; 
    } 
    return x; 
}"
Write a function to concatenate two strings in Python.,"def concat_strings(string1, string2): 
    return string1 + string2"
Write code to find the depth of a binary tree.,"// Recursive function to find the maximum depth 
// of a binary tree 
int maxDepth(Node *root) 
{ 
    // Base case 
    if (root == NULL) 
        return 0; 
  
    // Recur for left subtree and right subtree 
    int lDepth = maxDepth(root->left); 
    int rDepth = maxDepth(root->right); 
  
    // Use the larger one 
    if (lDepth > rDepth) 
        return lDepth + 1; 
    else
        return rDepth + 1; 
}"
"Perform checksum calculation on the following string ""HelloWorld"".","// Function to calculate the checksum of a given string 
// *str is the given string 
long calculateChecksum(string str) 
{ 
	long checksum = 0; 
  
	for (int i = 0; i < str.length(); i++) { 
		checksum += str.at(i); 
	} 
	return checksum; 
} 
// Output: checksum = 483 (for ""HelloWorld"")"
Output the result of 3+5*2-9,3 + 5 * 2 - 9 = 2
"Compare two given objects and output the differences.Object 1: {name: John, age: 30, city: New York}
Object 2: {name: John, age: 40, city: Las Vegas}","def compare_objects(object1, object2):
    for key, value in object1.items():
        if key in object2:
            if object1[key] != object2[key]:
                print(""Different values for "" + key + "": "" + str(object1[key]) + "" vs. "" + str(object2[key]))
        else:
            print(""New key not in second object: "" + key)
    for key, value in object2.items():
        if key not in object1:
            print(""New key not in first object: "" + key)
    
compare_objects({""name"": ""John"", ""age"": 30, ""city"": ""New York""},
                {""name"": ""John"", ""age"": 40, ""city"": ""Las Vegas""})

# Output:
# Different values for age: 30 vs. 40
# New key not in first object: city"
What is the Big-O notation and why is it used?,"The Big-O notation is a mathematical way of describing the performance of a given algorithm. It measures the complexity of an algorithm by taking into account the number of operations it performs, such as the time and space it takes to complete a given task. Big-O notation is used to compare different algorithms and to assess the impact of various choices on a given program's performance."
"Create a new list of words with the given words in the same order.words = [""Python"", ""is"", ""fun""]","new_words = [""Python"", ""is"", ""fun""]"
"Read the following array and print it in the same order using a for loop.list_int = [1,3,5,7,9]","for item in list_int:
    print(item)"
"Transform the following list of tuples into a dictionary.list_tuples = [(""python"", 1), (""is"", 2), (""fun"", 3)]",dict_tuples = { item[0] : item[1]  for item in list_tuples }
"Create a variable called ""score"" with the value of 0.",score = 0
Change the following variable to a string.a_variable = 8,a_variable = str(8)
"Read the following array and remove all the numbers divisible by 4.list_int = [2,4,6,10]",list_int = [num for num in list_int if num % 4 != 0]
"Create a program to combine the elements of two different lists into a single list.list_1 = [1,2,3]
list_2 = [4,5,6]",combined_list = list_1 + list_2
Create a program to remove all duplicate elements from a list and return a new list with the unique elements.,"def remove_duplicates(nums):
    temp_list = []
    for num in nums:
        if num not in temp_list:
            temp_list.append(num)
    return temp_list"
Produce a small program which prints the number 42 when run.,"#include <iostream>

int main() {
 std::cout << 42 << std::endl;
 return 0;
}"
Calculate the area of a circle whose radius is given by the value stored in the variable `radius`.radius = 5,"const area = Math.PI * Math.pow(radius, 2);
// area = 78.53981633974483"
"Create a class named `Person` and add four attributes called `name`, `age`, `gender`, and `height`.","class Person {
  constructor(name, age, gender, height) {
    this.name = name;
    this.age = age;
    this.gender = gender;
    this.height = height;
  }
}"
"Create an array with 10 integers from 0 to 9, where each number appears only once.","let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];"
Name three built-in Python data types.,"The three built-in Python data types are integers, floats, and strings."
Generate an array with the numbers from -10 to 10 in incremental order.,"let arr = [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"
"Using the given input, generate a code to print in reverse order.a_list = ['a', 'b', 'c', 'd', 'e']","def print_reverse(a_list):
    for i in range(len(a_list)-1, -1, -1):
        print(a_list[i])"
"Generate a code to filter out any value that is greater than the given number.my_list = [2, 4, 5, 6, 7]
and the number = 5","def filter_gt(my_list, number):
    return [x for x in my_list if x <= number]"
Generate a code to compare two strings and return a boolean result.,"def compare(string1, string2):
    if string1 == string2:
        return True
    else:
        return False"
Create a function to return the difference between two numbers.,"def difference(a, b):
    return a - b"
"Remove the duplicates from the given array.arr = [1, 2, 3, 3, 4, 4, 5, 6]","[1, 2, 3, 4, 5, 6]"
Generate a 3x3 matrix using randomly generated numbers between 1 and 10.,"matrix = [[4, 5, 7],
          [6, 2, 9],
          [1, 3, 8]]"
Make a function to convert a string to a number.,"def str_to_num(x):
    return int(x)"
"Iterate over the list and calculate the averagearr = [1,2,3,4,5]","def average(arr):
    sum = 0
    for i in arr:
        sum+=i
    return sum/len(arr)"
"Determine the most efficient way to loop over the list below.list = [""John"", ""James"", ""Glen"", ""Tony"", ""Kelly""]","for name in list:
    print(name)"
"Create a function "" avg_grade"" that would take a list of grades and return the average of the gradeslist = [84, 89, 94, 81]","def avg_grade(list):
    total = 0
    for num in list:
        total += num
    return total / len(list)"
"Make a function ""convert_time"" that would convert seconds to minutes","def convert_time(seconds):
    minutes = seconds / 60
    return minutes"
Create a while loop in Python that runs while the given condition is truewhile x is greater than 10,"while x > 10:
    # do something
    x = x - 1"
"Retrieve the location of the 3rd character in a given stringString: ""hello world""","print(""hello world""[2]) # returns 'l'"
Sum up the following two numbers2 and 3,2 + 3 = 5
List the advantages of using a linked list over an array.,"The advantages of using a linked list over an array include:

1. Insertion and deletion operations are faster since individual elements do not have to be rearranged in memory.
2. Elements can be stored in any order, as opposed to an array which requires elements to be stored contiguously.
3. Linked lists have an arbitrary number of elements, unlike an array which has a fixed size. 
4. Linked lists do not require the memory allocation of an entire block at once, making it suitable for dynamic memory allocation."
"Calculate the determinant of the following matrix.[1, 3, 4],
[5, 6, 7],
[9, 8, 2]",The determinant of the matrix is -76.
Implement a function to print the Fibonacci series up to the nth term.,"def FibonacciSeries(n): 
    a = 0
    b = 1 
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
Create a list of 50 integers to represent a frequency chart.,"frequency_chart = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
"Write a Python program to print the combination of the given list.list = [1, 2, 3]","from itertools import combinations

list1 = [1, 2, 3]

combinations = list(combinations(list1, 2))
print(combinations)

# Output: [(1, 2), (1, 3), (2, 3)]"
"Write a Python code to generate a random password of 12 characters containing a mix of numbers, alphabets, and special characters.",password = DX$bf7uj3@q3
"Write a function to check if the sum of two given number is between a given range.num1 = 10
num2 = 20
start = 15
end = 25",True
Write a Python program to verify if an integer is odd or even.num = 8,False
Create an array of 10 randomly generated integers between 0 and 10.,"import random

def generate_random_array():
    return [random.randint(0, 10) for _ in range(10)]"
Create a program in Python to compute the sum of two numbers.,"def add_numbers(num1, num2):
  sum_nums = num1 + num2
  return sum_nums"
"Identify the error in the following function:Replace all spaces in a string with a given character.

def replace_space (original_string, character):
new_string = original_string.replace( "" "", character )
return new_string",The code is correct. There is no error.
"Classify the following code as a part of a machine learning modelThe following code is for a linear regression model which predicts the estimated cost of a house based on area:

def linear_regression(x, y):
    m = (sum(x*y) - sum(x) * sum(y) / len(x)) / (sum(x*x) - sum(x) * sum(x) / len(x))
    b = (sum(y) - m * sum(x)) / len(x)
    return (m, b)",This is a code for a linear regression model.
Create an R function which takes a vector of numbers as input and returns its average.,"getAvg <- function(x){
  return(mean(x))
}"
"Edit the following code such that the output is reverseddef reverse_string(s):
    n = len(s)
    result = """"
    for i in range(n):
        result += s[i]
    return result","def reverse_string(s):
    n = len(s)
    result = """"
    for i in range(n-1, -1, -1):
        result += s[i]
    return result"
"Identify the specific type of this given object:object = {
""name"": ""John"",
""age"": 27,
""sex"": ""male""
}",The given object is a dictionary.
Create a data frame in R with 3 columns and 10 rows of randomly generated numerical data.,"dataFrame <- data.frame(V1 = sample(1:100, 10, replace=FALSE), V2 = sample(1:100, 10, replace=FALSE), V3 = sample(1:100, 10, replace=FALSE))"
"Convert the list of numbers below to a numpy array.[2, 4, 6, 8, 10]","import numpy as np 

arr = np.array([2,4,6,8,10])"
Write a code that can generate a list of random numbers between 0 to 100,"import random

# Function to generate a list of random numbers between 0 to 100
def generate_random_number_list():
  random_number_list = []
  for i in range(0,101):
    random_number_list.append(random.randint(0,100))
  return random_number_list

# call the function
random_number_list = generate_random_number_list()
print(random_number_list)"
Create a function that increments a given number by 1,"def increment_by_one(n):
    return n + 1"
"Update the existing code to have a shape of (3,3) when an array of size (2,2) is reshaped.import numpy as np

arr = np.arange(4).reshape(2,2)","import numpy as np

arr = np.arange(9).reshape(3,3)"
"Generate a dictionary mapping each Keytype with a description of ""What it is"".","dict = {
    'Integer': 'An integer is a whole number (not a fraction) that can be positive, negative, or zero',
    'Float': 'A float is a type of number that has a decimal point',
    'String': 'A string is a type of data that consists of a sequence of characters',
    'Boolean': 'A Boolean is a type of data that is either true or false',
    'List': 'A list is a collection of elements that can be of different data types',
    'Tuple': 'A tuple is a collection of elements that cannot be modified and has a fixed length'
}"
"Suggest code to add an item to the end of a given list.list1 = [1, 2, 3]","list1 = [1, 2, 3]
list1.append(4)"
"Suggest code to check if an object has a given property.object = {
  id: 1,
  name: 'John'
}","object = {
  id: 1,
  name: 'John'
}

if('name' in object) {
  // Do something
}"
Create a content aggregator application in Python.,"import requests
import json 

def content_aggregator():
    api_url = ""https://www.example.com/api/""
    response = requests.get(api_url)
    response_data = json.loads(response.text)
    for item in response_data:
        print(item)

if __name__ == '__main__':
    content_aggregator()"
"Parse the following text and extract all the numbers.This text contains the numbers 10, 20, and 30.","[10, 20, 30]"
Write a Python program that uses recursion to calculate the Fibonacci sequence up to the 25th number.,"def Fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return Fibonacci(n-1) + Fibonacci(n-2)

fibonacci_list = []

for i in range(26):
    fibonacci_list.append(Fibonacci(i))

print(fibonacci_list)"
"Classify the following words as either nouns or verbs.walk, machine, think","Nouns: machine
Verbs: walk, think"
"Write a script in Python that will find the average of a list of numbers.[2.3, 6.7, 8.2, 4.3, 9.1]","import numpy as np

data = [2.3, 6.7, 8.2, 4.3, 9.1] 
avg = np.mean(data)
print(""Average of the list of numbers is:"", avg)"
"Calculate the precision of the following machine learning model.Actual = [1, 0, 0, 1, 1]
Predicted = [1, 0, 1, 0, 0]",precision = (2 / 3)  # 2 true positives and 3 predicted positives.
"Find the index of the maximum value in an array of numbers in Python.[1, 6, 2, 8, 4, 9]","list = [1, 6, 2, 8, 4, 9]
max_index = list.index(max(list))
print(max_index) # Output: 4"
"Classify the following text as either positive, negative, or neutral.""This project was extremely difficult to complete.""",negative
"Implement the bubble sort algorithm for an array of integers.arr = [34, 16, 12, 9, 5]","def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above
arr = [34, 16, 12, 9, 5]
  
bubbleSort(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
"Compose a python function to find the maximum element in a 2-dimensional array.array = [[2, 4, 7, 1], [8, 12, 9, 5]]","def max_element(arr): 
    max_value = arr[0][0] 
    for i in range(len(arr)): 
        for j in range(len(arr[i])): 
            if arr[i][j] > max_value: 
                max_value = arr[i][j] 
    return max_value 
  
# Driver code 
arr = [[2, 4, 7, 1], [8, 12, 9, 5]] 
max_val = max_element(arr) 
print(""The maximum element in 2-dimensional array is"",max_val)"
"Implement a function to search an element in a BST.root:
        5
      /   \
     3     8
    / \   / \
   2   4  6   9

key: 3","def search_BST(root, key): 
  
    # Base Condition 
    if root is None or root.val == key: 
        return root 
  
    # If key is greater than root's key 
    if root.val < key: 
        return search_BST(root.right, key) 
  
    # If key is smaller than root's key 
    return search_BST(root.left, key) 
  
# Driver Code 
root = Node(5)
root.left = Node(3) 
root.right = Node(8)
root.left.left = Node(2) 
root.left.right = Node(4) 
root.right.left = Node(6) 
root.right.right = Node(9) 
  
key = 3
node = search_BST(root, key) 
if node:
    print(""Found"") 
else: 
    print(""Not Found"")"
"Code a function that takes a list of strings and checks if it is ordered lexicographically.list_of_strings = ['algorithm', 'coding', 'novel']","def ordered_list(list_of_strings): 
    for i in range(len(list_of_strings) - 1): 
        if list_of_strings[i] >= list_of_strings[i+1]: 
            return False
    return True 
  
# Driver Code 
list_of_strings = ['algorithm', 'coding', 'novel']
print(ordered_list(list_of_strings))"
"Find the GCD of two integers.a = 8, b = 12","def gcd(a, b): 

    # Base case 
    if a == 0:
        return b 
      
    return gcd(b % a, a) 
  
# Driver code
a = 8
b = 12
print(""GCD of"",a,""and"",b,""is"", gcd(a, b))"
Implement the bubble sort algorithm for a linked list.link_list = [10->9->8->7->6],"class Node:
    # initialization of node
    def __init__(self, data):
        self.data = data
        self.next = None
    
# bubble sort of linked_list
def bubble_sort(head):
    # Store last node
    end = None

    while end != head.next:
        p = head
        while p.next != end:
            q = p.next
            if p.data > q.data:
                p.data, q.data = q.data, p.data
            p = p.next
        end = p

# driver code
head =  Node(10) 
head.next = Node(9) 
head.next.next = Node(8) 
head.next.next.next = Node(7)
head.next.next.next.next = Node(6)
    
bubble_sort(head) 
<insert code to print the data of the linked list>"
Reverse a string in placeword = 'hello',"def reverse_string_in_place(word): 
    # Get the input string length 
    n = len(word) 

    # Swap character starting  
    # from two corners 
    for i in range(n // 2): 
        word[i], word[n - i - 1] = word[n - i - 1], word[i] 

word = list('hello') 
reverse_string_in_place(word) 
print(''.join(word))"
Write a function that takes two parameters and will print out the maximum of the two.,"def max_of_two(x, y):
  if x > y:
    return x
  else:
    return y"
"Implement a for loop that iterates for the given array and prints out the corresponding element on each iteration.array: ['apple', 'banana', 'cherry']","for e in array:
  print(e)"
"In the given code, add an if statement to check if the user's score is greater than a certain limit.score = 67
limit = 70","if score > limit:
  print(""The user scored higher than the limit."")"
"Update the given code to add an extra element to the array.array = [1,2,3]",array.append(4)
"Add a function to the code that will calculate the average of the input array.array = [1,2,3,4]","def calculate_average(array):
  total = 0
  for num in array:
    total += num
  avg = total/len(array)
  return avg"
write a function that takes two integers and returns their product.,"def multiply(x, y):
  return x * y"
"Update the given code to print out whether the input list is empty or not.inp_list = [1,2,3]","if not inp_list:
  print(""The list is empty."")
else:
  print(""The list is not empty."")"
"Update the code to remove an element from the given list.data_list = [""apple"", ""banana"", ""cherry""]","data_list.remove(""cherry"")"
"In the given code, include logic to calculate the area of a triangle if the shape is a triangle.shape = 'triangle
base = 5
height = 3","if shape == 'triangle':
  area = 0.5 * base * height
  print(""The area of the triangle is: "" + str(area))"
Update the given code to add a statement to check if the input number is a prime or not.num = 5,"flag = 0
for i in range(2, num):
  if num % i == 0:
    flag = 1
if flag == 0:
  print(""The number is a prime."")"
Suggest a completion for the following code to check if the given string is a palindrome.string = 'malayalam',"rev_str = string[::-1]
if rev_str == string:
  print(""The string is a palindrome."")"
"In the given code, replace the input function with a try-except block.num1 = int(input(""Enter a number: ""))","try:
  num1 = int(input(""Enter a number: ""))
except:
  print(""Input is not a number!"")"
"In the given code, add an environment variable that should be used to set the desired version of Python.","import os
os.environ[""PYTHON_VERSION""] = ""3.7"""
"Suggest a completion for the following code to generate a random string of the given length from a given set.length = 10
charset = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'","import random

def generate_random_string(length, charset):
  output_str = ''
  for i in range(length):
    output_str += random.choice(charset)
  return output_str"
"Transform the following Python function to a pseudo code.def find_max(x):
 max_val = -1
 for i in x:
 if i > max_val:
 max_val = i
 return max_val","# Find the maximum value in x
max_val = -1
FOR each i in x
    IF i > max_val
        max_val = i
END FOR
RETURN max_val"
Develop a Python program to calculate the greatest common factor of two positive integers.,"def gcd(x, y): 
  
    # base case 
    if x == 0: 
        return y 
    
    # a is greater 
    if x > y: 
        return gcd(x % y, y) 
    
    # b is greater
    return gcd(x, y % x) 

# Driver code
# x and y are the two positive integers
x = 16
y = 24
gcd_val = gcd(x, y)
print(""The greatest common factor of"",x,""and"",y,""is"",gcd_val)"
"Write an algorithm to detect the longest common subsequence of two given strings.str1 = ""ABCGDH"", str2 = ""ADGH""","// Input two strings
str1 = ""ABCGDH""
str2 = ""ADGH""

// Create a two dimensional matrix arr to store the lcs
int arr[len(str1)+1][len(str2)+1]

int maxLength = 0

// Initialize all elements of arr to zero
for i in range(len(str1)+1): 
    for j in range(len(str2)+1): 
        arr[i][j] = 0

// Calculate the value of arr[i][j] 
for i in range(1,len(str1)+1):
    for j in range(1,len(str2)+1):
        if str1[i-1] == str2[j-1]:
            arr[i][j] = arr[i-1][j-1] + 1
            maxLength = max(arr[i][j], maxLength)
        else:
            arr[i][j] = max(arr[i][j-1], arr[i-1][j])
return maxLength"
Create a VBA macro to find the maximum value of a given range of cells in a Microsoft Excel worksheet.Range of cells: A1:A10,"Sub FindMax()
Dim MaxVal As Double
MaxVal = Cells(1, 1).Value
For i = 2 To 10
    If Cells(i, 1).Value > MaxVal Then
        MaxVal = Cells(i, 1).Value
    End If
Next i 

MsgBox MaxVal
End Sub"
"Calculate the factorial of the integer ""n"".n = 5","def findFactorial(n): 
 fact = 1
 while(n> 0): 
 fact = fact * n 
 n = n - 1
 return fact 
 
print(find_factorial(5))"
Evaluate the given expression.5 * 12 + 3 * 6,90
"You are given a set of numbers and a number ""n"". Find the sum of all numbers in the given set greater than ""n"".[4, 7, 10, 11], n = 6","total = 18
def sum_greater_than_n(arr, n):
 total = 0
 for num in arr:
 if num > n:
 total += num
 return total

print(sum_greater_than_n([4, 7, 10, 11], 6))"
"Implement a backtracking algorithm to solve a sudoku puzzle.[
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]","def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1,10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0

    return False


def valid(bo, num, pos):
    # Check row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x * 3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False

    return True


def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)  # row, col

print(solve([
    [7, 8, 0, 4, 0, 0, 1, 2, 0],
    [6, 0, 0, 0, 7, 5, 0, 0, 9],
    [0, 0, 0, 6, 0, 1, 0, 7, 8],
    [0, 0, 7, 0, 4, 0, 2, 6, 0],
    [0, 0, 1, 0, 5, 0, 9, 3, 0],
    [9, 0, 4, 0, 6, 0, 0, 0, 5],
    [0, 7, 0, 3, 0, 0, 0, 1, 2],
    [1, 2, 0, 0, 0, 7, 4, 0, 0],
    [0, 4, 9, 2, 0, 6, 0, 0, 7]
]))"
"How many trailing zeros are in the factorial of the number ""n""?n = 20","The number of trailing zeros in 20! is 4.

def trailing_zeros(n):
 count = 0
 i = 5
 while (n/i >= 1): 
  count += int(n/i) 
  i *= 5
 return count

print(""The number of trailing zeros in 20! is"", trailing_zeros(20))"
Determine the size of an array in bytes.,"The size of an array in bytes is equal to the number of elements in the array multiplied by the size of each element in bytes. For example, an array of 10 integers requires 10 * 4 = 40 bytes of memory."
Which of the following operations is not appropriate to perform on a linked list?,Random access is not appropriate to perform on a linked list because it does not have random access like an array does. Random access involves directly accessing a specific index or position in the data structure. Linked lists require traversal of the list from the beginning to reach the desired node.
What are the main differences between a stack and a queue?,"The main differences between a stack and a queue are their insertion and deletion methods. Stacks use a Last In First Out (LIFO) approach for insertion and deletion, while queues use a First In First Out (FIFO) approach. Stacks are used when order is important, while queues are used when order is not important."
"Write a python program to filter a list of numbers to only include even numbers[1, 2, 3, 4]","def filter_even(nums):
    even_nums = []
    for num in nums:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums"
"Rewrite the given array of numbers into a binary tree.[3, 1, 4, 7, 2, 5]","3
  /   \
1       4
  \     / \
   2   5   7"
"Create a function that takes an array and elements to append at the end.list = [1,2]
element = 3","def appendList(list, element): 
  list.append(element) 
  return list 

result = appendList(list, element) 
print(result)"
"Given two numbers a and b, write a function to swap their values.a = 5, b = 8","def swap(a, b):
    a, b = b, a
    return a, b

a, b = swap(5, 8)
print(""a ="", a, ""and b ="", b)"
Provide a demo snippet to illustrate different ways of looping through a Python dictionary.,"#Looping through a dictionary using a for loop 
dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4} 
  
for key in dict: 
    print(""% s : % s"" %(key, dict[key])) 
  
#Looping through a dictionary using items() method 
for key, value in dict.items(): 
    print(""% s : % s"" %(key, value)) 
  
#Looping through dictionary keys 
for key in dict.keys(): 
    print(""% s : % s"" %(key, dict[key])) 
  
#Looping through dictionary values 
for value in dict.values(): 
    print(""% s"" %value)"
Create a program to accept a string and display its length.,"def getLength(string): 
    length = len(string) 
    return length 
  
result = getLength(""GPT"")
print(result)"
"You are given a string containing upper and lowercase letters, write a program to check it is Palindrome or not.racecar","def check_palindrome(string): 
    return string == string[::-1] 
  
result = check_palindrome('racecar')
print(result)"
"Construct a for loop that prints out each number in the listmy_list = [0, 1, 2, 3, 4, 5]","for num in my_list:
    print(num)"
"Modify the code so that it will print out ""Hello World!""print(""Hello"")","print(""Hello World!"")"
"Make the following code more efficientdef remove_dups(mylist):
    newlist = []
    for item in mylist:
        if not item in newlist:
            newlist.append(item)
    return newlist","def remove_dups(mylist):
    seen = set()
    newlist = []
    for item in mylist:
        if item not in seen:
            seen.add(item)
            newlist.append(item)
    return newlist"
Create a function that will accept a list and return the sum of all elements in the list,"def sum_list(mylist):
    s = 0
    for x in mylist:
        s += x 
    return s"
"Modify the following code to output Odd numbers from 1 to 10for num in range(1, 10):
    print( num )","for num in range(1, 10):
    if num % 2 == 1:
        print( num )"
"Given the following code, what should the output be when the function is called?def add(x, y):
    z = x + y
    return z

result = add(2, 3)","The output should be 5 as the result of calling add(2,3) is z = 5."
"Using the given list, create a code that will generate a unique list of numbersx = [4, 10, 16, 22, 28, 34]","new_list = []
for num in x:
    if num not in new_list:
        new_list.append(num)
print(new_list)"
"What will the following code output?i = 1

while i < 4:
    print(i)
    i = i + 1","The code will output 1, 2, and 3."
"Code a Python algorithm to reverse a given string.""Hello, World!""","def reverse(s):  
    return s[::-1] 

x = ""Hello, World!""
  
print(reverse(x))"
"Edit the Python code block below to print the text in reverse.word = ""Hello""
print (word)","word = ""Hello""
print (word[::-1])"
"Develop a Python3 program to extract the words of length 3 from a given sentence.""The quick brown fox jumped over the lazy dog""","def extract_words(s):   
    words = s.split()
    length_3_words = []
    for word in words:
        if len(word) == 3:
            length_3_words.append(word)
    return length_3_words

s = ""The quick brown fox jumped over the lazy dog""
print(extract_words(s))"
Create an Angular app with a login page and registration page.,"The Angular app will include a login and a registration page. The login page will have an input field for the user to enter their username and password. The registration page will have input fields for the user to enter their username, password, and email address. The app will also contain a service to store the user registration data and a guard to protect the registration page from unauthorized access."
"Normalize the following data set.[1000, 75, 16, -200, 24]","[1.00, 0.75, 0.16, -1.00, 0.24]"
Create an exponential moving average function in R.,"library(zoo)

exponential_moving_average <- function(x, n, beta) {
  EMA <- 0
  for (i in 1:length(x)) {
     if (i == 1) {
       EMA[i] <- x[i]
     } else {
       EMA[i] <- ((beta * x[i]) + ((1 - beta) * EMA[i - 1]))
     } 
  }
  
  ma_x <- as.numeric(rollapply(EMA, n, mean, fill = NA, align = ""right""))
  return(ma_x)
}"
Write a Python program to check if a string contains any special characters.CS 1501,"def has_special_characters(s):
  special_characters = '!@#$%^&*()_+-=[]{};:,.<>/?'
  for char in special_characters:
    if char in s:
      return True
  return False"
"Compare the two strings and output the difference between the two outputs.String A: Hello there
String B: Hi everyone",The difference is that String A contains the phrase 'Hello there' whereas string B contains the phrase 'Hi everyone'.
"Make a function that accepts 2 numbers and return the largest one.2, 3","def largest(x, y):
  if (x > y):
    return x
  else:
    return y"
Create a for loop which prints a Fibonacci series up to 10 numbers.,"int first = 0;
int second = 1;
int next;

for (int i = 0; i < 10; i++) {
  if(i <= 1){
    next = i;
  }
  else {
    next = first + second;
    first = second;
    second = next;
  }
  cout << next << "" "";
}"
"You are given an array of numbers. Create a function to check if the array contains duplicate values.11, 15, 40, 14, 11","def contains_duplicates(arr):
  unique_elements = set(arr)
  if len(arr) != len(unique_elements):
    return True
  else:
    return False"
"You are given an array of strings. Write a Python script to sort the array in alphabetical order.""ball"", ""cat"", ""dog"", ""apple""","arr = [""ball"", ""cat"", ""dog"", ""apple""]
arr.sort()
print(arr)"
Create a query that returns the top 5 cities with the highest population.,"SELECT City, Population FROM Cities
ORDER BY Population DESC
LIMIT 5;"
"Create a function to calculate the total cost of a shopping cart, given the price and the quantity of each item.Item 	Price 	Quantity
Apple 	2$ 		2
Orange 	3$ 		5
Banana 	1$ 		1","def total_cost(items):
  total = 0
  for item in items:
    total += item['price'] * item['quantity']
  return total
  
items = [
  { 'item': 'Apple', 'price': 2, 'quantity': 2 },
  { 'item': 'Orange', 'price': 3, 'quantity': 5 },
  { 'item': 'Banana', 'price': 1, 'quantity': 1 }
]
total = total_cost(items)
print(total)"
Generate the reCAPTCHA API key.,"Go to the Google reCAPTCHA admin page, sign up for an API key, and register the domain for your website. Once registered, you will receive a code for your API key."
Create an algorithm to implement a binary search.,"def binary_search(arr, x): 
  
    # find the leftmost and rightmost point 
    l = 0
    r = len(arr) - 1
      
    while l <= r: 
  
        mid = l + (r - l)//2
  
        # if element is present at the middle  
        if arr[mid] == x: 
            return mid 
  
        # if element is smaller than mid,  
        # then it can only be present  
        # in left subarray 
        elif arr[mid] < x: 
            l = mid + 1
  
        # else the element can only  
        # be present in right subarray 
        else: 
            r = mid - 1
      
    # if we reach here,  
    # then the element was not present 
    return -1"
Train a recursive neural network to classify whether a sentence is positive or negative.,"import tensorflow as tf

# Setup the RNN
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),
    tf.keras.layers.GRU(32, return_sequences=True),
    tf.keras.layers.Dense(2, activation='softmax')
])

# Compile and fit
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              
model.fit(x_train, y_train, epochs=5)"
Make a POST request to the same server and download the response content,"import requests
 
url = 'http://example.com/'
data = {'key': 'value'}
 
response = requests.post(url, data=data)
 
#Download response content
with open('response_content.txt', 'wb') as f:
    f.write(response.content)"
"Categorize the given text as positive, neutral, or negative sentiment.The movie was okay, but it could have been better.",Neutral
"Change the following array of objects to a dictionary.const arr = [
  {id: 1, name: ""John""},
  {id: 2, name: ""Jane""},
  {id: 3, name: ""Jake""}
];","const obj = {
  1: {name: ""John""},
  2: {name: ""Jane""},
  3: {name: ""Jake""}
};"
"Program a function in Go that takes a string and returns its corresponding ASCII code.""Hello, World!""","func stringASCIICode(s string) int {
	code := 0
	for _, c := range s {
		code += int(c)
	}
	return code
}"
"Apply a filter to the following array of numbers so that only the even numbers remain.const arr = [1, 2, 3, 4, 5, 6, 7, 8,9];",const filteredArr = arr.filter((num) => num % 2 === 0);
"Create a function in Julia to calculate the Median of an array.arr = [1, 2, 2, 3, 6, 8]","function median(arr)
  sorted_arr = sort(arr)
  n = length(sorted_arr)
  if n % 2 == 0
      return (sorted_arr[n ÷ 2] + sorted_arr[(n ÷ 2) + 1]) / 2
  else
      return sorted_arr[(n + 1) ÷ 2]
  end
end"
Design a Python class to represent geometric shapes.,"class GeometricShape:

    def __init__(self, sides):
        self.sides = sides

    def area(self):
        if self.sides == 3:
            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)
        else:
            return 0"
Design a function to validate a phone number.Phone Number: 212-555-0000,"def check_phone_number(phone_number):
  #Remove any non-numeric characters
  phone_number = phone_number.replace(""-"", """")
  phone_number = phone_number.replace("" "", """")

  #Check if the phone number is 10 digits long
  if (len(phone_number) != 10):
    return False

  #Check each digit is a number
  for digit in phone_number:
    if not digit.isdigit():
      return False

  #Check the area code is valid
  area_code = phone_number[0:3]
  valid_area_codes = [""201"", ""212"", ""203"", ""202"", ""205""]
  if area_code not in valid_area_codes:
    return False

  #All tests passed
  return True

print(check_phone_number('212-555-0000'))

Output:
True"
"Create a program that extracts the first and last names from a string.Full Name: ""Barack Obama""","def extract_names(full_name):
  #Split the name into separate words
  name_parts = full_name.split()
  
  #Check if the name has multiple words
  if len(name_parts) == 1:
    return None
  
  #Extract the first and last names
  first_name = name_parts[0]
  last_name = name_parts[-1]
  
  #Return the first and last names
  return first_name, last_name

print(extract_names(""Barack Obama""))

Output:
('Barack', 'Obama')"
"Create a function which accepts a string and prints out each word with the count of its characters.String: ""Hello World""","def print_word_lengths(input_string):
  #Split the string into individual words
  words = input_string.split()
  
  #Iterate over each word
  for word in words:
    #Print the word and the length of the word
    print('{}: {}'.format(word, len(word)))

print_word_lengths('Hello World')

Output:
Hello: 5
World: 5"
"Write a Python program to read two numbers and print their multiplication?Number1: 5
Number2: 10","#Take the two numbers from the user
number1 = int(input('Number1:  '))
number2 = int(input('Number2: '))

#Multiply and print the result
result = number1 * number2
print('The result is:', result)

Output:
The result is: 50"
Convert this given number in base 10 to base 234,100010
Create a loop to delete all elements in a linked list,"current = head
while current is not None:
    temp = current.next
    del current
    current = temp"
Define an F# array and initialize it with even numbers from 0 to 10,let evenNumbers = [|0;2;4;6;8;10|]
Create a function to validate a given email address.,"function validateEmail(email) {
  const regexp = /^(([^<>()[\]\\.,;:\s@\""]+(\.[^<>()[\]\\.,;:\s@\""]+)*)|(\"".+\""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return regexp.test(email);
}"
"Change the provided dataset into a 3-dimensional tensor, in order to feed it into a Convolutional Neural Network model.Dataset containing 10,000 grayscale images of size 32x32","import numpy as np 
  
# Creating the 3D tensor 
X = np.zeros((10000, 32, 32)) 
  
# Initializing it with the grayscale images 
X[:,:,:] = dataset"
Compute the maximum value of a List in Python.,max_val = max(my_list)  # Computes the maximum of the list
"Write code to find the sum of all items in the list.my_list = [5,3,7,8,2]",sum_items = sum(my_list)  # Calculates the sum of all items in the list
"Convert the given dictionary into a list of tuples.my_dict = {'a': 1, 'b': 2, 'c': 3}",my_list = list(my_dict.items())  # Converts the dictionary into a list of tuples
Write code to implement the Binary Search algorithm in Python.,"def binary_search(arr, target):
    low, high = 0, len(arr) - 1

    while low <= high:
        mid = low + (high - low)//2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            high = mid - 1
        else:
            low = mid + 1

    return -1  # not found"
"Calculate the mean of the given array.my_array = [2, 7, 6, 8, 4, 9]",mean = sum(my_array)/len(my_array)  # Calculates the mean of the array
"Remove duplicates from the given list and return a new list.my_list = [2, 3, 4, 2, 3, 5]",unique_list = list(set(my_list))  # removed duplicates and returns a new list
"Create a barplot using Matplotlib to display the given data.Data: [2, 3, 5, 7, 9]","import matplotlib.pyplot as plt 
  
# Creating the data 
data = [2, 3, 5, 7, 9]  
  
# Creating the figure and axis 
fig, ax = plt.subplots()  
  
# plotting the barplot 
ax.bar(range(len(data)), data)  
  
# show the plot 
plt.show()"
"Compute the entropy of a given probability distribution.Distribution: [2/9, 3/9, 4/9]","import math

# Calculates the entropy of the given distribution
entropy = -sum([p * math.log2(p) for p in distribution])"
Construct an array of 5 elements from a given string.String: programming,"[""p"", ""r"", ""o"", ""g"", ""r""]"
Write a regex expression to check for a valid name containing only lowercase letters and spaces.,/^[a-z\s]+$/
"Find out the number of occurrences of a vowels a, e, i, o, or u in the given string.String: The quick brown fox","var count = 0
let vowels = ""aeiou""
for c in string {
  if vowels.contains(c) {
    count += 1
  }
}
print(count)
// Output: 4"
"Construct an array of integers containing the following elements.3, 6, 9, 12, 15","[3, 6, 9, 12, 15]"
"You need to create a Python function to remove duplicate elements from a given list.[11,46,70,23, 11, 33, 46]","def remove_duplicates(numbers):
    s = set()
    for n in numbers:
        if n not in s:
            s.add(n)
    return list(s)"
"You are provided with a list of integers and a given number. Generate Python code that detects if the given number is in the list or not.list = [11,22,33,44,77], number = 44","def check_number(list, number):
    if number in list:
        return True
    else:
        return False"
"Create a Python function to sort a list of strings based on a given alphabetical order.alphabet = 'bdhajfz', strings = ['bad', 'hfja', 'abd', 'zaj']","def sort_string_list(strings, alphabet):
    sorted_list = sorted(strings, key=lambda x:(alphabet.index(x[0]),x))
    return sorted_list"
"Create a Python code that takes in two strings and finds all common characters from the strings.string1 = 'abcd', string2 = 'acde'","def common_chars(string1, string2):
    common = []
    for char in string1:
        if char in string2:
            common.append(char)
    return common"
"Generate a Python code to convert list of strings to list of integers.strings = ['23', '45', '7', '67']","def convert_to_ints(strings):
    ints = []
    for s in strings:
        ints.append(int(s))
    return ints"
"Create a Python code to find all uncommon characters between two strings.string1 = 'green', string2 = 'blue'","def uncommon_chars(string1, string2):
    uncommon = []
    for char in string1:
        if char not in string2:
            uncommon.append(char)
    for char in string2:
        if char not in string1:
            uncommon.append(char)
    return uncommon"
You need to write a Python function to find all substrings of a given string in order.string = 'hello',"def find_all_substrings(string):
    substrings = []
    for i in range(len(string)):
        for j in range(len(string)+1):
            substrings.append(string[i:j])
    return substrings"
You need to create a Python function to detect if a given number is prime or not.,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
You need to create a Python class to represent a 3-dimensional point.,"class Point3D:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        return '({}, {}, {})'.format(self.x, self.y, self.z)"
"Can you write a function that returns the sum of the elements of a given array?arr = [2, 3, 4, 5]","def sum_array(arr):
    sum = 0
    for ele in arr:
        sum += ele
    return sum"
Write a for loop that prints the integers from 100 to 1.,"for i in range(100, 0, -1):
    print(i)"
"Help debug this code snippet by adding comments with the appropriate error messages.def greetings(name):
num = 5
message = ""Hello, "" + name + ""!""
return message","def greetings(name):
    # assert name is a string
    assert isinstance(name, str), ""name must be a string""
    num = 5
    # ""message"" variable should be defined before using it 
    message = ""Hello, "" + name + ""!""
    return message"
Write a loop to print the numbers from 10 to 1 in reverse order.,"for i in range(10, 0, -1):
    print(i)"
"Can you build a linear regression model to predict the housing prices in the given dataset?The dataset contains 15 columns with 3,000 records.","Yes, it is possible to build a linear regression model to predict the housing prices in the given dataset. You will have to split the dataset into a training and testing set and then use the training set to build a linear regression model. Once the model is built, use it to predict labels on the test set and then evaluate the model performance with relevant metrics."
Construct a function that prints the first n terms in a Fibonacci sequence.,"def print_fibonacci(n):
    fib1 = 0
    fib2 = 1
    for i in range(n):
        print(fib1)
        temp = fib1
        fib1 = fib2
        fib2 = temp + fib2"
Construct a function to output the product of two numbers.,"def product(a, b):
    return a * b"
Create a function to select all the div tags within a document.,"def get_div_tags(document):
  """"""Selects all the div tags within a document""""""
  divs = document.find_all('div')
  return divs"
"Create a function to print out a numbered list of items from an array.array = [‘apple’, ‘banana’, ‘orange’]","def print_numbered_list(array):
  """"""Prints out a numbered list based on an array of items.""""""
  for i, item in enumerate(array, start=1):
    print(f""{i}. {item}"")"
"Given a string, find the longest palindrome within it.string = ""ananabay""","def longest_palindrome(string):
  """"""
  Find the longest palindrome within a given string
  """"""

  start, end, max_len = 0, 0, 0
  for i in range(len(string)):
      # Odd length of palindrome
      left, right = i, i
      while left >= 0 and right < len(string) and string[left] == string[right]:
          length = right - left + 1
          if max_len < length:
              max_len = length
              start = left
              end = right
          left -= 1
          right += 1


      # Even length of palindrome
      left, right = i, i+1
      while left >= 0 and right < len(string) and string[left] == string[right]:
          length = right - left + 1
          if max_len < length:
              max_len = length
              start = left
              end = right
          left -= 1
          right += 1

  return string[start:end+1]"
Using inspect module to count the number of lines of code in a module.,"def get_module_lines(module):
    """"""
    Returns the number of lines of code in a given module,
    using the inspect module.
    """"""
    import inspect
    sourcelines = inspect.getsourcelines(module)
    line_count = len(sourcelines[0])
    return line_count"
Write a python program to get all possible permutations of a given set of characters.,"def get_permutations(s):
  """"""Get all possible permutations of a given set of characters.""""""
  n = len(s)
  result = []
  def recurse(i):
    if i == n:
      result.append(''.join(s))
      return
    for j in range(i, n):
      s[i], s[j] = s[j], s[i]
      recurse(i+1) # recurse over each character
      s[i], s[j] = s[j], s[i] # backtrack
  recurse(0)
  return result"
Create a function that takes a specific input and produces a specific output using any mathematical operators.,"def f(x):
    """"""
    Takes a specific input and produces a specific output using any mathematical operators
    """"""
    return x**2 + 3*x"
Create a function that generates a series of Fibonacci numbers up to a certain number of items.,"def generate_fibonacci(n):
    """"""
    Generates a series of Fibonacci numbers up to a certain number of items.
    """"""
    fib = [0, 1]
 
    if n < 2:
        return fib[:n]
 
    for i in range(2, n):
        fib.append(fib[i - 1] + fib[i - 2])
    return fib"
"Write an algorithm to find the smallest missing positive number from a given list of integers.[3, 4, -10, -2, 9, 8, 1]","def findSmallestMissing(arr):
    smallest_missing = 1
    
    for num in arr:
        if (num == smallest_missing):
           smallest_missing += 1
    
    return smallest_missing"
Get a user input and check if the input is a palindrome.,"def is_palindrome(user_input):
    rev_input = user_input[::-1]
    
    if (rev_input == user_input):
        return True
    else:
        return False"
"Write a Python script to take two list and output the common elements of the given lists.list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]","def findCommon(list1,list2): 
    common = [] 
      
    # traverse through elements of list1 
    for x in list1: 
          
        # traverse through elements of list2 
        for y in list2: 
              
            # if common element is found append to list 
            if x == y: 
                common.append(x) 
    return common"
Write an algorithm to insert a new element in a given sorted array.,"def insert(arr, num): 
    # start from the rightmost element
    i = len(arr) - 1
    while ( i >= 0 and arr[i] > num):
        arr[i+1] = arr[i]
        i -= 1
  
    arr[i+1] = num"
"Write an if-else statement in Python to print ""Grater than 10"" if a number is greater than 10, and ""Less than 10"" if a number is less than 10.Number: 8","if 8 > 10:
  print(""Grater than 10"")
else:
  print(""Less than 10"")"
"Preprocess this data using Python.Data:
[
  {
    ""A"": 1,
    ""B"": 2,
    ""C"": 3
  },
  {
    ""A"": 2,
    ""B"": 3,
    ""C"": 5
  },
  {
    ""A"": 4,
    ""B"": 1,
    ""C"": 9
  }
]","import pandas as pd 

data = [
  {
    ""A"": 1,
    ""B"": 2,
    ""C"": 3
  },
  {
    ""A"": 2,
    ""B"": 3,
    ""C"": 5
  },
  {
    ""A"": 4,
    ""B"": 1,
    ""C"": 9
  }
]

df = pd.DataFrame(data)

preprocessed_data = df.apply(lambda x: (x - x.mean()) / x.std())"
Analyze this text using spaCy.Text: Modern technologies are revolutionizing the way we live and work.,"import spacy

nlp = spacy.load(""en_core_web_sm"")

doc = nlp(""Modern technologies are revolutionizing the way we live and work."")

for token in doc:
    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,
            token.shape_, token.is_alpha, token.is_stop)"
How many bytes of memory does a 32-bit system have?,"A 32-bit system has 4GB of memory, or 4,294,967,296 bytes."
"Create a python list with the following numbers: 27, 44, 28, 34","my_list = [27, 44, 28, 34]"
What is the difference between int and float data types?,"The main difference between int and float data types is that an int is a data type used to represent whole numbers, while a float is a data type used to represent numbers with decimal points. An int has a greater range of values than a float, but a float is more precise."
"Replace the following python code to print out the length of a given string.string = 'Hello world'
print(string)","string = 'Hello world'
print(len(string))"
"How would you access the value of the key 'name' in the following dictionary?my_dict = {
 'name': 'John',
 'age': 22
}",my_dict['name']
"Using a while loop, print the numbers from 1 to 10.","i = 1
while i <= 10:
    print(i)
    i += 1"
"Using a for loop, print the characters of a string.string = ""Programming""","for ch in string:
    print(ch)"
Construct a function to convert feet to meters.,"def feet_to_meters(feet):
    """"""This function converts feet to meters""""""
    meters = feet * 0.3048
    return meters"
"Find the sum of the elements of an array.arr = [1,2,3,4]","def find_sum(arr):
    """"""This function finds the sum of the elements of an array""""""
    sum = 0
    for num in arr:
        sum += num
    return sum

sum = find_sum(arr)
print(""The sum of the elements of the array is:"", sum)"
"Implement quick sort on an array.unsorted_nums = [2, 8, 1, 5, 9]","def partition(arr, low, high): 
    i = (low-1)
    pivot = arr[high]
    for j in range(low, high):
        if arr[j] < pivot:
            i = i+1
            arr[i], arr[j] = arr[j], arr[i] 
    arr[i+1], arr[high] = arr[high], arr[i+1]
    return (i+1) 

def quick_sort(arr, low, high): 
    if low < high:
        pi = partition(arr, low, high) 
        quick_sort(arr, low, pi-1) 
        quick_sort(arr, pi+1, high)

quick_sort(unsorted_nums, 0, len(unsorted_nums)-1)
print(unsorted_nums)"
"Create a function to capitalize all the words of a sentence.sentence = ""this is a test""","def capitalize_words(sentence):
    """"""This function capitalizes all the words of a sentence""""""
    words = sentence.split()
    capitalized_words = []
    for word in words:
        capitalized_words.append(word.capitalize())
    return ' '.join(capitalized_words)

print(capitalize_words(sentence))"
"Order the following array of dictionaries by their ""priority"" key.my_list =[
    {
        'name': 'Task 1',
        'priority': 4
    },
    {
        'name': 'Task 2',
        'priority': 6
    },
    {
        'name': 'Task 3',
        'priority': 2
    },
    {
        'name': 'Task 4',
        'priority': 8
    },
]","my_list.sort(key=lambda x: x['priority'])
print(my_list)"
"Run the code and identify the output.def string_compressor(string): 
    length = len(string) 
    compressed = """" 
    count = 1 
    i = 1
    while i < length: 
        if string[i] == string[i - 1]: 
            count += 1
        else: 
            compressed = compressed + string[i - 1] + str(count) 
            count = 1
        i += 1
    compressed = compressed + string[i - 1] + str(count) 
    return compressed
print(string_compressor(""aabcccccaaa""))",a2b1c5a3
"Provide a code for creating a function which receives an array of characters and prints them.['A', 'B', 'C', 'D']","def print_array_of_chars(arr): 
    for ch in arr: 
        print(ch) 
        
print_array_of_chars(['A', 'B', 'C', 'D'])

Output:
A
B
C
D"
Implement a code that checks if a given word is palindrome.Word: malayalam,"def is_palindrome(word): 
    reversed_word = word[::-1]
    if reversed_word == word: 
        return True
    else: 
        return False

print(is_palindrome(""malayalam""))

Output:
True"
Write a code for creating an array with values from 0 to n.n = 5,"def create_array(n): 
    array = []
    for i in range(n+1): 
        array.append(i)
    return array

print(create_array(5))

Output:
[0, 1, 2, 3, 4, 5]"
"Write a code which takes two strings and prints its longest common subsequence.String1: ""ABCDGH""
String2: ""AEDFHR""","def longest_common_subsequence(str1, str2): 
    m = len(str1) 
    n = len(str2) 

    matrix = [[0 for x in range(n+1)] for x in range(m+1)] 

    for i in range(m+1): 
        for j in range(n+1): 
            if i == 0 or j == 0: 
                matrix[i][j] = 0
            elif str1[i-1] == str2[j-1]: 
                matrix[i][j] = matrix[i-1][j-1] + 1
            else: 
                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) 

    result = """"
    i = m 
    j = n 

    while i > 0 and j > 0: 

        if str1[i-1] == str2[j-1]: 
            result += str1[i-1] 
            i -= 1
            j -= 1

        elif matrix[i-1][j] > matrix[i][j-1]: 
            i -= 1
        else: 
            j -= 1
    
    return result[::-1] 

print(longest_common_subsequence(""ABCDGH"", ""AEDFHR""))

Output:
ADH"
"Write a code for concatenating two arrays.Array1: [1,2,3]
Array2: [4,5,6]","def concat_arrays(arr1, arr2): 
    return arr1 + arr2

print(concat_arrays([1,2,3], [4,5,6]))

Output:
[1, 2, 3, 4, 5, 6]"
"Compute the maximum subarray sum for the given array.Array: [-2,1,-3,4,-1,2,1,-5,4]","def max_subarray_sum(arr): 
    max_so_far = 0 
    max_ending_here = 0

    for i in range(len(arr)): 
        max_ending_here += arr[i] 

        if max_so_far < max_ending_here:
            max_so_far = max_ending_here 

        if max_ending_here < 0: 
            max_ending_here = 0 
    
    return max_so_far

print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))

Output:
6"
"Rotate the given array by k steps.Array: [1,2,3,4,5]
k: 2","def rotate_array(arr, k): 
    for i in range(k): 
        arr.insert(0, arr.pop()) 
    return arr

print(rotate_array([1,2,3,4,5],2))

Output:
[4, 5, 1, 2, 3]"
"Implement a code which reverses a given string.String: ""Hello World""","def reverse_string(string): 
    rev_string = """" 
    for i in range(len(string)-1, -1, -1): 
        rev_string += string[i] 
    return rev_string 

print(reverse_string(""Hello World""))

Output:
dlroW olleH"
"Design a loop in Python to find the maximum value from a given array.array = [50, 10, 8, 1000, 1024]","maxValue = array[0]
for i in range(1, len(array)): 
    if array[i] > maxValue: 
        maxValue = array[i] 
print(maxValue)"
Write a regular expression to match the valid hex color code.,/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/
Create a custom encryption algorithm to encode a string of characters.Test,"def custom_encrypt(string):
    result = ''
    
    # Loop over each character
    for character in string: 
        # Get the Unicode code point of the character 
        # and add two to it
        code = ord(character) + 2 
        # Convert the code point back to character 
        # and add it to the result
        result += chr(code) 

    # Return the encrypted string
    return result

# Test the custom_encrypt() function
encoded_str = custom_encrypt('Test')
print(encoded_str)
# Output: Vguv"
Generate a list of integers up to the given number n.50,"lst = list(range(1, 51)) 
print(lst)

# Output
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
Create a Python class to encode a string of characters using a Caesar cipher.,"class CaesarCipher:
  
    def __init__(self, shift):
        self.shift = shift
    
    def encode(self, string):
        cipher = ''
        for char in string: 
            if char == ' ':
                cipher = cipher + char
            elif  char.isupper():
                cipher = cipher + chr((ord(char) + self.shift - 65) % 26 + 65)
            else:
                cipher = cipher + chr((ord(char) + self.shift - 97) % 26 + 97)
        return cipher

# Test 
cipher = CaesarCipher(3)
print(cipher.encode(""Hello, World!""))

# Output
Khoor, Zruog!"
"Automatically remove vowels from a sentence.Hello, World!","def remove_vowels(sentence):
    # Create an empty string.  
    result = """" 
    for letter in sentence:  
        # Select those characters that are not vowels. 
        if letter not in ""aeiouAEIOU"": 
            result += letter  
  
    return result

# Test
print(remove_vowels(""Hello, World!"")) 

# Output
Hll, Wrld!"
Generate a list that contains the Armstrong numbers in a given range.100,"# Code 
def armstrong_numbers(n): 
    # Empty list to store Armstrong numbers 
    lst = [] 
  
    for i in range(1, n + 1): 
        s = 0
        # To find the power 
        m = len(str(i)) 
  
        # Finding Armstrong numbers 
        temp = i 
        while temp > 0: 
            digit = temp % 10
            s += digit ** m 
            temp //= 10
  
        # Adding the number to list 
        if i == s: 
            lst.append(i) 
  
    return lst

# Test    
print(armstrong_numbers(100)) 

# Output
[1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407]"
Find all the prime factors of a given integer.100,"def prime_factors(n):
    # Empty list to store prime factors 
    lst = [] 
    
    # Divide by 2 while the number is 
    # divisible by 2  
    while n % 2 == 0: 
        lst.append(2)
        n = n / 2
          
    # n must be odd, now 
    # check all the numbers from 3 to 
    # the square root of n  
    for i in range(3, int(n**0.5)+1): 
        # check for divisibility of i by n  
        while n % i== 0: 
            lst.append(i) 
            n = n / i 
          
    # If n is a prime number then it 
    # will only be divisible by itself  
    if n > 2:
        lst.append(n)
      
    return lst

# Test  
print(prime_factors(100))

# Output
[2, 2, 5, 5]"
Create a custom min-heap data structure in Python.,"class MinHeap:
    def __init__(self):
        self.heap = [] 
 
    def parent(self, i): 
        return (i-1)/2 
 
    def insertKey(self, k): 
        self.heap.append(k) # Insert the new element at the end of the heap 
        i = len(self.heap)-1 
        self.heapifyup(i) 
  
    def heapifyup(self, i): 
        # If the current node is smaller than the parent node 
        # Swap the two nodes 
        if i != 0 and self.heap[int(self.parent(i))] > self.heap[i]: 
            self.heap[int(self.parent(i))], self.heap[i] = self.heap[i], self.heap[int(self.parent(i))]
            self.heapifyup(self.parent(i))
  
    def remove(self):
        # Get the value of the root node 
        root = self.heap[0] 
        # Move the last element of the heap to the top 
        self.heap[0] = self.heap[-1] 
        # Delete the last element of the heap 
        self.heap.pop()
        if len(self.heap) > 0:
            self.heapifydown(0)
        return root
  
    def heapifydown(self, i):
        # Get the left and right indices 
        left = 2*i+1
        right = 2*i+2
        small = i # Make the current node the small node 
  
        # Compare the left child with the small node 
        if left < len(self.heap) and self.heap[left] < self.heap[small]:
            small = left
  
        # Compare the right child with the small node 
        if right < len(self.heap) and self.heap[right] < self.heap[small]:
            small = right
 
        # If any of the children of the current node is smaller than 
        # the current node, then swap the current node with the small node 
        if small != i:
            self.heap[small], self.heap[i] = self.heap[i], self.heap[small] 
            self.heapifydown(small)"
"Suggest an algorithm for finding the maximum sum for all subarrays.arr = [2, 3, -5, 4]","The algorithm for finding the maximum sum for all subarrays can be solved using a divide and conquer approach.

First, divide the array into two parts by splitting it in half at its middle index. Then, calculate the maximum subarray sum for each of the two parts recursively. Finally, return the greater of the two sums plus the value at the middle index of the array. This will be the maximum sum of all subarrays."
"Classify the following random forest algorithm instance given the parameters.max_depth=5, n_estimators=5",The given random forest algorithm instance is a supervised learning algorithm with a maximum tree depth of 5 and 5 estimators.
"Write a TensorFlow 2.0 program that calculates the mean of an array.[1, 2, 3, 4, 5]","import tensorflow as tf

arr = [1, 2, 3, 4, 5]

arr_tensor = tf.constant(arr)
mean_tensor = tf.reduce_mean(arr_tensor)

with tf.Session() as sess:
    mean_value = sess.run(mean_tensor)
print(mean_value)"
"Create a function called check_restaurant_availability that returns True if a restaurant is open and False if it's closed.restaurant_status = {
    ""monday"": ""closed"",
    ""tuesday"": ""open"",
    ""wednesday"": ""closed"",
    ""thursday"": ""open"",
    ""friday"": ""closed"",
    ""saturday"": ""open"",
    ""sunday"": ""closed""
}","def check_restaurant_availability(restaurant_status):
    day = datetime.date.today().strftime(""%A"").lower()
    return restaurant_status[day] == ""open"""
"Process the following array of numbers to get the max, min, and average scores.scores = [90, 75, 70, 85, 80]","const scores = [90, 75, 70, 85, 80];

let maxScore = Math.max(...scores);
let minScore = Math.min(...scores);
let avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;

console.log(`Max Score = ${maxScore}`);
console.log(`Min Score = ${minScore}`);
console.log(`Average Score = ${avgScore}`);"
"Given a unsorted array, sort it using the quick sort algorithm.[5, 4, 8, 7, 1, 3, 10, 9]","def quickSort(nums): 
    if len(nums) <= 1: 
        return nums
    pivot = nums[len(nums) // 2] 
    left = [x for x in nums if x < pivot]
    middle = [x for x in nums if x == pivot] 
    right = [x for x in nums if x > pivot] 
    return quickSort(left) + middle + quickSort(right)
  
   
nums = [5, 4, 8, 7, 1, 3, 10, 9] 
print(quickSort(nums))"
"How can you reverse a given string using a while loop?string = ""hello""","new_string = """"
index = len(string) - 1
while index >= 0:
    new_string += string[index]
    index -= 1
print(new_string) # olleh"
How can you fill a 2D array with zeros?,my_2d_array = [[0 for col in range(3)] for row in range(3)]
"Given a list of strings, how can you categorize each string into one of the two categories: short and long?list = [""Hello"", ""World"", ""Foo"", ""Bar""]","for s in list:
    if len(s) <=3:
        category = ""short""
    else:
        category = ""long""
    print(f""{s} : {category}"")"
"Sort a list of user objects by their ageusers = [{'name': 'John', 'age': 10}, {'name': 'Peter', 'age': 20}, {'name': 'Chris', 'age': 15}]","sorted_users = sorted(users, key=lambda k: k['age'])"
"Given two strings s1 and s2, how can you check if s2 is a substring of s1?s1 = ""testString""
s2 = ""String""","if s2 in s1:
  print(""s2 is a substring of s1"")
else:
  print(""s2 is not a substring of s1"")"
"Given a list of strings, how can you join them all together into a single sentence?words = [""hello"", ""world"", ""foo"", ""bar""]","sentence = ' '.join(words)
print(sentence) # 'hello world foo bar'"
"Create an object that holds 3 attributes, each with its own value.","class MyObject:
 
    def __init__(self, attr1, attr2, attr3):
        self.attr1 = attr1
        self.attr2 = attr2
        self.attr3 = attr3

obj = MyObject('value1', 'value2', 'value3')"
Simulate a coin toss using Python.,"import random

def coin_toss():
  result = random.choice([""heads"", ""tails""])
  return result

print(coin_toss())"
"Replace all vowels with 'x' in a given string.myString = ""Python Programmer""","def replace_vowels(string):
    vowels = ""aeiouAEIOU""
    new_string = """"
    for char in string:
        if char in vowels:
            new_string += ""x""
        else:
            new_string += char
    return new_string

print(replace_vowels(myString))

# Output
# Pxthxn Prxgrxmmxr"
Generate 5 random numbers from 1 to 10.,"import random

numbers = random.sample(range(1, 11), 5)
print(numbers)

# Output
# [3, 9, 6, 8, 5]"
"Select the last two elements from a given listmylist = [1,2,3,4,5]","last_two_elements = mylist[-2:]
print(last_two_elements)

# Output
# [4, 5]"
"Find all unique values in a given datasetdataset = [['A', 4], ['B', 5], ['A', 3], ['C', 2]]","# Get all the values from the dataset
all_values = [value for _, value in dataset]

# Get the unique values
unique_values = set(all_values)

print(unique_values)

# Output
# {2, 3, 4, 5}"
"Find the most frequent value in a listmylist = [1,2,3,4,4,4,4,5,5]","from collections import Counter

def get_most_frequent_value(mylist):
    counted_list = Counter(mylist)
    return counted_list.most_common(1)[0][0]

most_frequent_value = get_most_frequent_value(mylist)
print(most_frequent_value)

# Output
# 4"
Measure the execution time of a given python script.,"import time
 
def measure_time():
  # Start the timer
  start = time.time()
 
  # Execute the code
  # ----- Code to be measured ------
  # -------------------------------
 
  # Stop the timer
  end = time.time()
  
  # Return the difference
  return end - start

execution_time = measure_time()
print(execution_time)"
What is the difference between a static method and an instance method in Python?,"A static method is a method that does not have access to the instance of the class and so it can't be used to access instance variables. A static method is associated with the class itself, not with any particular instance. A static method is often used to create utility functions that don't need to be accessed from instance level. 

An instance method requires an object or instance of a class to work. An instance method can access the instance variables of the class and has access to the self object which is an instance of the class. An instance method can also access static methods and static variables of the class."
"Given a Python dictionary, create a function to return the most common key in the dictionary.d = {
  'a': 4,
  'b': 3,
  'c': 2,
  'd': 2
}","def most_common_key(d):
  counts = [(key, value) for key, value in d.items()]
  max_count = max(counts, key=lambda item: item[1])
  return max_count[0]"
"Combine the following two items in an array.Item1: 2
Item2: [3, 4, 5]","[2, 3, 4, 5]"
"Rewrite the following selection sort algorithm in Python.def selectionSort(arr):
  for i in range(len(arr)):
    minIndex = i
    for j in range(i + 1, len(arr)):
      if arr[minIndex] > arr[j]:
        minIndex = j
    arr[i], arr[minIndex] = arr[minIndex], arr[i]","def selection_sort(arr):
  for i in range(len(arr)):
    min_index = i
    for j in range(i + 1, len(arr)):
      if arr[min_index] > arr[j]:
        min_index = j
    arr[i], arr[min_index] = arr[min_index], arr[i]"
"Rewrite the code block in an optimized way.nums = [1, 2, 3, 4, 5, 6]
new_nums = []
for num in nums:
	new_nums.append(num + 1)","nums = [1, 2, 3, 4, 5, 6]
new_nums = [num + 1 for num in nums]"
Define a function to calculate the product of three numbers.,"def product_of_three(a, b, c): 
	return a * b * c"
What is an example of a flag in programming?,"A flag is a boolean (true/false) value that is used to track the state of a program or condition. It can be used to execute certain statements depending on the value of the flag. For example, a program can have a flag that keeps track of whether the user has logged in or not. If the flag is set to true, certain features of the program are enabled; if it is set to false, these features are disabled."
"Compare two dictionaries for equality and return the result.a = {1:4, 2:5, 3:6} 
b = {2:5, 3:6, 1:4}","def compare_dicts(a, b): 
	# Check key-value pairs in both dicts 
	if a.items() == b.items(): 
		return True
	else: 
		return False

# Output 
print(compare_dicts(a, b))"
What are the properties of a good algorithm?,"A good algorithm should have the following properties: correctness, completeness, accuracy, robustness, time complexity, memory complexity, scalability, and reusability. The correctness of an algorithm means that it should produce the correct output for every possible input. The completeness refers to whether the algorithm will terminate and produce a result for every input. Accuracy refers to the correctness of the results. Robustness refers to the ability of the algorithm to handle unpredictable input and produce the same output every time. Time and memory complexity refers to how much time and memory the algorithm takes to execute. Scalability indicates how well the algorithm can handle larger inputs and outputs, and reusability means how easy it is for other programmers to use the algorithms for their own purposes."
"Given an acute angled triangle, write a function to compute its area using Heron's formula.","def heron_area(a, b, c): 
	# calculate the semi-perimeter 
	s = (a + b + c) / 2

	# calculate the area 
	area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
	return area"
"Create a function for printing each letter of a string on a separate line.str = ""Hello World""","def print_letter_separately(str): 
	for letter in str: 
		print(letter) 

# Output 
print_letter_separately(str)"
What is a stack in Computer Science?,"A stack is a data structure that works on the principle of Last in First Out (LIFO). It is used to store and retrieve elements in a particular order, and all operations of insertion and retrieval are performed at one end of the stack, referred to as the top. There are two main operations in a stack: Push - adds an item to the top, and Pop - removes an item from the top."
Write a for loop that prints all odd numbers between 1 and 10.,"for(let i = 1; i <= 10; i++){
 if(i % 2 !== 0) {
  console.log(i);
 }
}"
"Find the median of this sequence of numbers: 4, 3, 7, 10.",6
"How can you complete the console.log statement so that it prints the value of the variable `a`?let a = 5;
console.log(",console.log(a);
"What type of function does the following code represent?function foo(x, y) {
 return x * y;
}",This code represents a multiplication function.
Write a Python program that prints all numbers from 1 to 100 that are divisible by both 5 and 7.,"for num in range(1, 101):
    if (num%5==0) and (num%7==0):
        print(num)"
Create a list comprehension statement in Python that prints all the even numbers from a list of numbers from 1 to 10.,"[n for n in range(1, 11) if n % 2 == 0]"
"Write a Python code snippet to prompt the user to enter their age and store that value in a variable called ""age"".","age = int(input(""Please enter your age: ""))"
"Create a function in Python that will take two parameters: a string and an integer, and return the string repeated the amount of times specified by the integer.","def repeat(string, num_repetitions):
    return string * num_repetitions"
"Using the given code, implement the function ""add_two_numbers"" which will take two integers and return their sum.def add_two_numbers(x, y):
    #TODO
    pass","def add_two_numbers(x, y):
    return x + y"
"Fix the bug in the following code by modifying the function is_star_jumping_high_enough:

def is_star_jumping_high_enough(star_height):
    """"""return true if star height is greater than 5""""""
    if star_height < 5:
        return True","def is_star_jumping_high_enough(star_height):
    """"""return true if star height is greater than 5""""""
    if star_height > 5:
        return True"
"Using the given code, create a function ""calculate_area"" which will take two integer parameters and calculate the area of a rectangle.

def calculate_area(length, width):
    #TODO
    pass","def calculate_area(length, width):
    return length * width"
"Write Python code to extend a string to be twice as long as the original stringExample string: ""Hello world""","input = ""Hello world""
output = input + input"
Gather information about a given productHTC U12+,"The HTC U12+ is a flagship Android phone manufactured by HTC Corporation. It features a 6-inch LCD display, 12MP dual rear camera, 8MP front camera, 6GB of RAM, and 64GB of storage. It also has NFC and a 3,420 mAh battery."
"Write a code to delete the element at a given index in an arrayExample array: [4, 5, 6, 7, 8]
Index: 2","let array = [4, 5, 6, 7, 8];
let index = 2;
array.splice(index, 1);
console.log(array);
// Output: [4, 5, 7, 8]"
"Construct a regular expression to match a given stringString: ""Hello World!""",/^Hello\sWorld!$/
"Write code to count how many times a character appears in a stringString: ""Apple""
Character: ""p""","let string = 'Apple';
let count = 0;

for (let i = 0; i < string.length; i++) {
  if (string[i] == 'p') {
    count++;
  }
}

console.log(count); //2"
"Create a sorting algorithm to quickly sort an array of integersArray: [5, 4, 6, 7, 1]","function quickSort(arr) {
  if (arr.length <= 1) { 
    return arr;
  }
  let pivot = arr.pop();
  let left = [];
  let right = [];

  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < pivot) {
      left.push(arr[i]);
    } else {
      right.push(arr[i]);
    }
  }
  return quickSort(left).concat([pivot], quickSort(right));
}

console.log(quickSort([5, 4, 6, 7, 1])); // [1, 4, 5, 6, 7]"
"Generate a code this that calculates the gross salary including allowanceBasic salary: 10,000
Allowance: 4,000","let basicSalary = 10000;
let allowance = 4000;
let grossSalary = basicSalary + allowance;

console.log(grossSalary); //14,000"
"Implement a python class named 'Temperature' that ranks a temperature value as cold, warm, or hot given a threshold value of 30.","class Temperature:
  def __init__(self, value, threshold=30):
    self.value = value
    self.threshold = threshold

  def rank(self):
    if self.value < self.threshold:
        return ""cold""
    elif self.value == self.threshold:
        return ""warm""
    else:
        return ""hot"""
"Compute the edit distance between two provided words using the Levenshtein algorithm.word1 = ""cat""
word2 = ""bat""","def levenshteinDistance(word1, word2):
  m = len(word1)
  n = len(word2)
  
  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] 
  
  for i in range(m + 1): 
    for j in range(n + 1): 
      if i == 0: 
        dp[i][j] = j
        
      elif j == 0: 
        dp[i][j] = i
      
      elif word1[i - 1] == word2[j - 1]: 
        dp[i][j] = dp[i - 1][j - 1] 
      
      else: 
        dp[i][j] = 1 + min(dp[i][j - 1],  
                            dp[i - 1][j],  
                            dp[i - 1][j - 1]) 

  return dp[m][n]"
Write a Python function that finds and returns the number of occurrences of a particular character in a string.,"def countChar(string, char):
  ctr = 0
  for s in string:
    if s == char:
      ctr += 1
  return ctr"
"Create a program in Python that searches for a word in a string.This is a sample string
word","def search(string, word):
    if word in string:
       return ""The word is present in the sentence""
    else: 
       return  ""The word is not present in the sentence"""
"Rewrite the following piece of code in Python.for (i = 0; i < 10; i++)
    if (i % 2 == 0)
        printf(""%d"", i);","for i in range(10):
    if i % 2 == 0:
        print(i)"
"Edit the code to make sure that the sum is printed in the console.function add(a, b) {
  let result = a+b;
  return result;
}","function add(a, b) {
    let result = a+b;
    console.log('The sum is: ', result);
    return result;
  }"
Write a function that takes a string and a key as parameters and encrypts the string with the key.,"def encrypt(string, key):
    # Create an empty string that will hold the result
    encrypted_string = """"
    
    # Loop through the string and encrypt each character
    for i in range(len(string)):
        char = string[i]
        encrypted_char = chr(ord(char) + key)
        encrypted_string += encrypted_char
        
    # Return the encrypted string
    return encrypted_string"
"Using the given input, write a function to produce a desired output.Input: [1, 4, 8, 9, 10] 
Desired Output: [[1, 4, 8], [9, 10]]","def split_list(lst):
    # Create an empty list
    result = []
    
    # Iterate through the list and divide it into two parts
    for i in range(0, len(lst), 3):
        result.append(lst[i:i+3])
        
    # Return the result
    return result"
How would you differentiate a local variable from a global variable?,"A local variable is a variable declared within a block of code, usually within a function. When the block of code ends, the variable is no longer in scope and is destroyed. It is only accessible within the local scope. A global variable is declared outside of any function and is accessible by all code within the same scope. The scope of a global variable is the entire program or file."
Write a code to traverse a given tree in breadth-first order.,"// function to traverse a tree in breadth-first order
function traverseBreadthFirst(root) {
    // create an empty array to store nodes
    const nodes = [];

    // create an empty array to store the visited nodes
    const visited = [];

    // add the root node to the array
    nodes.push(root);

    // loop through the nodes in the array
    while (nodes.length) {
        // get the first node in the array
        const node = nodes.shift();

        // add it to the visited array
        visited.push(node);

        // loop through the node's children
        for (let child of node.children) {
            // add the child to the array if it is not visited
            if (!visited.includes(child)) {
                nodes.push(child);
            }
        }
    }

    // return the visited array
    return visited;
}"
What is Minimum Spanning Tree?,A minimum spanning tree (MST) is a subset of a graph in which all the nodes are connected and the total weight of the edges is minimized. It is used to find the shortest route to connect all the nodes in the graph. A MST always has less weight than any other spanning tree.
How do functions help with code organization?,"Functions help with code organization by breaking the program up into smaller logical blocks. This makes the code easier to read and maintain. Separating the code into functions also makes it easier to debug and test, as it allows for individual parts of the code to be tested and debugged. Having code organized into functions also makes it easier to reuse code as the functions can be called multiple times."
What is a syntax error in programming?,"A syntax error is an error in writing code which causes the code to be incorrect according to the programming language's syntax rules. This type of error prevents the code from being executed and can be identified by the compiler or interpreter. Examples of syntax errors include: putting a string in the wrong form, forgetting to add a semicolon at the end of a line, or missing a bracket."
"Create a function that accepts two parameters, a string and a list, and returns the length of the string in the list.string = 'FooBar'
list = [""FooBar"", ""Foo"", ""BarFoo""]","def getLength(string, list):
    return len([x for x in list if x == string])"
"Translate the following sentence into its Python equivalent.""If the number is greater than 10, print 'Success'.""","if num > 10:
    print('Success')"
"Create a new array containing the numbers from 10 to 100 in increments of 5.[10, 15, 20, 25, 30, ..., 95, 100]","int[] array = new int[19];
int num = 10;
for (int i=0; i<19; i++){
    array[i] = num;
    num += 5;
}"
Evaluate the following expression: 25 * 4 - 30 + 30,25 * 4 - 30 + 30 = 140
"Write a Python code snippet to print the minimum value of a given list of numbers.list = [7, 8, 10, 4]","min_val = min(list)
print('Minimum Value:', min_val)"
Implement a recursive solution to calculate the nth Fibonacci number.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)"
Write a Python function to find the largest prime factor of a given integer.,"def largest_prime_factor(n):
    i = 2
    while i * i <= n:
        if n % i == 0:
            n = n / i
        else:
            i += 1
    return n"
Modify the following code snippet to print the total number of characters in the string.string = 'Hello World!',"string = 'Hello World!'

num_chars = len(string)
print(""The total number of characters in the string is {}."".format(num_chars))"
"Construct a regular expression to extract specific words from a sentence.Sentence: Python is an interpreted, high-level, general-purpose programming language.
Words: interpreted, high-level","""""""
Construct a regular expression to extract specific words from a sentence.
""""""

import re

sentence = 'Python is an interpreted, high-level, general-purpose computing language.'
words = ['interpreted', 'high-level']

regex = r'\b(?:{})\b'.format('|'.join(words))
matches = re.findall(regex, sentence)

print(matches)"
"Write a code to return the key of the minimum element in a dictionary.dict: {'a': 1, 'b': 20, 'c': 3}","""""""
Write a code to return the key of the minimum element in a dictionary.
""""""

def min_key(d):
    if not d:
        return None
    min_val = min(d.values())
    return [key for key, val in d.items() if val == min_val][0]

if __name__ == '__main__':
    d = {'a': 1, 'b': 20, 'c': 3}
    print(min_key(d))"
"What is the length of the string ""Hello World!""?","The length of the string ""Hello World!"" is 12."
"What would you change in the following function to sort a list of numbers in increasing order?let arr = [ 4, 2, 5, 1, 3 ]

function bubbleSort(arr) {
  for (let i = 0; i < arr.length; i++) {
      for (let j = 0; j < arr.length - i - 1; j++) {
        if (arr[j] > arr[j + 1]) {
            let temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp
        }
      }
  }
}","let arr = [ 4, 2, 5, 1, 3 ]

function bubbleSort(arr) {
  for (let i = 0; i < arr.length; i++) {
      for (let j = 0; j < arr.length - i - 1; j++) {
        if (arr[j] < arr[j + 1]) {
            let temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp
        }
      }
  }
}"
"Edit the following code to add an event listener for mouseover events.<div id=""container"">Hello</div>

let element = document.getElementById('container');","<div id=""container"">Hello</div>

let element = document.getElementById('container');
element.addEventListener('mouseover', (e) => {
  // run some code
});"
Generate a regex to match any valid IPv4 address.,^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
What are the main components of an object oriented programming language?,"The main components of an object oriented programming language are classes, objects, methods, and inheritance. Classes are the blueprint used to create objects, methods are the functions which act on objects, and inheritance is the ability for classes to define a common set of characteristics."
"Update the following code to make it pass all test cases.def divisible_by_two(numbers): 
    result = []
    for num in numbers:
        if num % 2 == 0:
            result.append(True)
        else:
            result.append(False)
    return result","def divisible_by_two(numbers): 
    result = []
    for num in numbers:
        if num % 2 == 0:
            result.append(True)
        else:
            result.append(False)
    return result

def divisible_by_two(numbers):
    return [True if num % 2 == 0 else False for num in numbers]"
"Create a datastructure that stores customer information such as customer name, address and phone number.John Smith, 123 Main Street, 555-555-0110","customer_info = {
  ""name"": ""John Smith"",
  ""address"": ""123 Main Street"",
  ""phone"": ""555-555-0110""
}"
Create a for loop that iterates from 10 to 20 by 4's.,"for i in range(10, 21, 4):
    print(i)"
Write a code to print the first 10 odd numbers.,"for num in range(1, 21, 2):
    print(num)"
Create a variable called 'monday' and assign it a value of True.,monday = True
"Create a new list 'squared' that contains the squares of all the elements in the list 'nums'.nums = [1, 2, 3, 4]",squared = [num**2 for num in nums]
Create a class called 'Animal' that stores the attributes age and type.,"class Animal:
    def __init__(self, age, type):
        self.age = age
        self.type = type"
"How would you debug the following code?def findNumberSum(numbers):
    total = 0
    for n in numbers:
        total += n
    return total","To debug the code, you could start by adding print statements at different places in the code to find out the output at each step. For instance, you could add print statements to print out the value of the ""total"" variable at the beginning, during and after the for loop, or to see the contents of the list ""numbers"". Then you can check what value is expected and what value is actually produced for every step, to identify the issue."
Describe a greedy algorithm,"A greedy algorithm is an approach to solving a problem that involves making decisions based on the best immediate payoff, without considering the overall cost. It follows the principle of 'greedy', which involves making a decision with the largest immediate benefit and disregarding the overall cost of the solution. Greedy algorithms are used to solve optimization problems, such as finding the optimal path in a given graph, with the goal of maximizing the benefit of the overall solution."
How would you break down a large problem into smaller pieces?,"Breaking down a large problem into smaller pieces is a fundamental step in problem-solving. It can be done by first understanding the overall problem and its requirements. Then, the problem should be divided into smaller, more manageable chunks, which can then be solved independently. This process should be repeated until all the pieces of the problem have been divided into isolated tasks. Finally, the isolated pieces can be solved using different strategies, with the ultimate goal of connecting all these smaller solutions together to form the final solution."
Suggest an algorithm to determine whether a string is a palindrome,"A palindrome is a word, phrase, or sequence that reads the same backward as forward. To determine whether a string is a palindrome, one algorithm could be to compare the reversed characters in the string with the original characters. We can start at the ends of the string, and check if the characters at each end of the string are equal. If they are, we move to the next pair in the middle, and if they are not equal, then the string is not a palindrome."
What are the benefits of using multithreading in an application?,"The main benefits of using multithreading in an application are improved performance, increased responsiveness and better utilization of resources such as CPU and memory. When using multithreaded applications, the application can perform multiple tasks concurrently and improve data throughput. Additionally, it can improve scalability, provide complex task management, and manage a large number of resources without significantly slowing down the program."
How would you design a system to store and access the stored data when a user makes a request?,"To design a system to store and access the stored data when a user makes a request, we could use a client-server model, where the server provides the user with the requested data. The server would use a database to store the data, and when a user makes a request, the server would retrieve the requested data from the database and send it back to the user."
"Given a string ""Hello, World"", replace all vowels with '*'Hello, World","H*ll*, W*rld"
"Given a string ""Hello, World"", find the length of the string.Hello, World",Length of given string: 13
"Given a 2D array of integers, find the sum of all elements.[[1,2,3], [4,5,6], [7,8,9]]",Sum of all elements: 45
"Create a Python class ""Book"" with name and price properties.","class Book:
 def __init__(self, name, price):
  self.name = name
  self.price = price"
Design a class named Car and build its constructor.,"Class Car{
    // constructor
    Car(){ 
        // instance variables
        this.make = """";
        this.model = """";
        this.year = 0;
    }
}"
"Using Python, create a loop that prints each element in a given list.List = [""A"", ""B"", ""C""]","for item in List:
    print(item)"
Write an algorithm that prints the first 10 Fibonacci numbers in descending order.,"# Initialize the first two numbers
a = 0
b = 1

# Print the first 10 Fibonacci numbers
for i in range(10):
    # Swap the values
    a, b = b, a + b
    # Print the current Fibonacci number
    print(b)
# Reverse the list
for _ in range(9, 0, -1):
    print(_)"
"Make a regex pattern that returns the name and the day of the week given in the paragraph.text = ""My name is John, and today is Monday""","import re

text = ""My name is John, and today is Monday""

pattern = r""My name is (\w+), and today is (\w+)""

match = re.search(pattern, text)
name = match.group(1)
day = match.group(2)

print(name) # Output: John
print(day) # Output: Monday"
Create a Python program that takes as input an email address and validates it using a regex pattern.email = 'example@gmail.com',"import re

def validate_email(email):
    """"""Validates an email address using regex""""""
    pattern = r""^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$""
    match = re.search(pattern, email)
    if match:
        return True
    else:
        return False

email = 'example@gmail.com'

is_valid_email = validate_email(email)
print(is_valid_email) # Output: True"
"Create a program that takes as input an array of numbers and calculates the sum of all numbers in the array.arr = [10,20,30,40]","def get_sum(input_arr):
    """"""Returns the sum of all numbers in an input array""""""
    sum = 0
    for num in input_arr:
        sum += num
    return sum

arr = [10,20,30,40]
total = get_sum(arr)
print(total) # Output: 100"
Create a function that takes as argument the number of elements and return a list containing the Fibonacci sequence up to that number.n = 10,"def get_fibonacci_sequence(n):
    """"""Returns a list containing the Fibonacci sequence up to number n""""""
    fib_list = [0, 1]
    if n <= 2:
        return fib_list[:n]
    
    for i in range(2, n):
        fib_list.append(fib_list[i-2] + fib_list[i-1])
    
    return fib_list

n = 10

fib_sequence = get_fibonacci_sequence(n)
print(fib_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Make a regex pattern that checks if a string is in the valid phone number format 555-555-5555.,"import re

pattern = r""^\d{3}-\d{3}-\d{4}$""

if re.match(pattern, ""555-555-5555""):
    print(""Valid Phone Number Format"")
else:
    print(""Invalid Phone Number Format"")

# Output: Valid Phone Number Format"
Create a class named Person with two properties: name and age.,"class Person {
    private: 
        string name;
        int age;

    public:
        Person(string name, int age) {
            this->name = name;
            this->age = age;
        }
        void setName(string name) {
            this->name = name;
        }
        void setAge(int age) {
            this->age = age;
        }
        string getName() {
            return name;
        }
        int getAge() {
            return age;
        }
};"
"Create a list comprehension to generate a list of all the words in the sentence ""Python is amazing"".","words = [word for word in ""Python is amazing"".split(' ')]"
"Create a function that takes in an integer ""n"" and prints all perfect numbers between 0 to n.n = 20","def perfect_numbers(n):
    perfect_numbers = []
    for number in range(1, n+1):
        sum_divisors = 0
        for divisor in range(1, number):
            if number % divisor == 0:
                sum_divisors += divisor
        if sum_divisors == number:
            perfect_numbers.append(number)
    return perfect_numbers
 
print(perfect_numbers(n))"
"Create a function that takes in two arguments ""a"" and ""b"" and prints out the greatest common divisor between them.a = 6
b = 36","def gcd(a, b): 
    if (a == 0): 
        return b 
    return gcd(b % a, a)

print(gcd(a, b))"
"Need to write a function to encrypt a message using the caesar cipher, which takes the key as an argument.message = ""Hello World""
key = 3","def encrypt_caesar_cipher(message, key):
    encrypted_message = """"
    for char in message: 
        if not char.isalpha():
            encrypted_message += char
        else:
            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)
            encrypted_message += encrypted_char
    return encrypted_message

print(encrypt_caesar_cipher(message, key))"
"Create a code to get the average value of a given list.numbers = [1, 4, 9, 5]","def get_average(numbers):
    sum_nums = 0
    for num in numbers:
        sum_nums += num
    return sum_nums / len(numbers)

print(get_average(numbers))"
Convert the following infix expression to postfix notation.A + B * C,A B C * +
"Create a function to calculate the binomial coefficient for two integers.n = 5
r = 3","def binomial_coefficient(n, r):
    fact = 1 
    if r > n - r:
        r = n - r 
    for i in range(r):
        fact *= (n) - i 
        fact /= (i+1) 
    return int(fact)

print(binomial_coefficient(n, r))"
"Compute the number of ways to make a change of N with coins of given denominations.N = 4; Coins = {1,2,3}","def change(n, coins): 
    m = len(coins) 
    table = [[0 for x in range(m)] for x in range(n+1)] 

    # Fill the entries for 0 value case (n = 0) 
    for i in range(m): 
        table[0][i] = 1

    # Fill rest of the table entries in bottom-up manner 
    for i in range(1, n+1): 
        for j in range(m): 
            # Count of solutions including coins[j] 
            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0

            # Count of solutions excluding coins[j] 
            y = table[i][j-1] if j >= 1 else 0 

            # total count 
            table[i][j] = x + y 
    return table[n][m-1]"
Develop an algorithm to determine if a given integer is an Armstrong number or not.153,"def is_armstrong_number(num): 
  
    # initialize sum 
    sum = 0
    temp = num 
    while temp > 0: 
        digit = temp % 10
        sum += digit ** 3 
        temp //= 10
  
    if num == sum: 
        return True
    return False"
"Create an algorithm for finding the minimum element in an array of integers.[3, 7, 14, 2, 11]","def find_min(array):
    min_element = array[0] 
    for i in range(1, len(array)):
        if array[i] < min_element: 
            min_element = array[i] 
    return min_element"
Develop a program to generate a random number in a given range.Lower = 5 and Upper = 20,"import random

def generate_random_number(lower, upper):
    return random.randint(lower, upper)"
"Find the maximum of the numbers in a given array.[1, 23, 87, -5, 33]","def find_max(arr): 
    max_element = arr[0] 
    for i in range(1, len(arr)):
        if arr[i] > max_element:
            max_element = arr[i]
    return max_element"
"Develop an algorithm to find the maximum consecutive repeating character in a given string.""aaaaabcdddddefgggg""","def find_max_consecutive_repeating_character(str): 
    maxCount = 0
    tempCount = 1
    previous = ''

    # count the number of occurrences
    # of same character. 
    for i in range(len(str)): 
        if str[i] == previous:
            tempCount += 1

        else: 
            # Update maximum if required 
            if tempCount > maxCount: 
                maxCount = tempCount 

            tempCount = 1
            previous= str[i] 

    return maxCount"
"Create an algorithm that takes two numbers, a and b, and finds their greatest common divisor (GCD).a = 12, b = 18","// Algorithm to find the GCD of two numbers

// Function to find GCD 
function findGCD(a, b) { 
    // If both a and b are 0 
    if (a == 0 && b == 0) 
        return 0; 
  
    // If a is 0, GCD is b 
    if (a == 0) 
        return b; 
  
    // If b is 0, GCD is a 
    if (b == 0) 
        return a; 
  
    // Find GCD recursively 
    return findGCD(b, a % b); 
}

// Variable to hold a and b
var a = 12;
var b = 18;

// Find GCDs
var gcd = findGCD(a, b); 
  
// Print GCD
console.log(""The GCD of"", a, ""and"", b, ""is"", gcd);"
"Find the product of the elements of a given array in Python.[1, 2, 3]","def product(arr): 
    product = 1
  
    # Iterate the array 
    for i in arr: 
        product = product * i 
  
    return product 
  
# Driver Code 
arr = [1, 2, 3] 
print(product(arr)) # 6"
Create an algorithm in Python that converts a given number from base 10 to binary.8,"def base10_to_binary(n):

    # Create an empty binary array
    binary_arr = [0] * (int(math.log2(n)) + 1) 
  
    # Iterate through binary array
    for i in range(len(binary_arr) - 1, -1, -1): 
        if n >= pow(2, i): 
            n -= pow(2, i) 
            binary_arr[len(binary_arr) - i - 1] = 1
  
    return binary_arr 
  
# Driver Code 
n = 8
print(base10_to_binary(n)) # [1, 0, 0, 0]"
Find the sum of the first 10 natural numbers using a loop in C.,"// Function to find the sum of first n natural numbers 
int findSum(int n) 
{ 
    int sum = 0; 
    for (int i = 0; i <= n; i++) 
    sum = sum + i; 
  
    return sum; 
} 
  
// Driver program 
int n = 10; 
printf(""Sum of first %d natural numbers is %d\n"", n, findSum(n)); 
# Output 
Sum of first 10 natural numbers is 55"
"Write a loop statement to delete all even numbers from the given array.[1, 2, 3, 4, 5]","arr = [1, 2, 3, 4, 5]
for i in range(len(arr)):
    if arr[i] % 2 == 0:
        del arr[i]"
"Find the index of the maximum value.[3, 5, 9, 11, 18, 23, 27]",5
Change this sentence into a valid mathematical expression.Four minus five,4 - 5
"Convert the given list into a key-value dictionary.[1, 'a', 2, 'b', 3, 'c']","dict = {1: 'a', 2: 'b', 3: 'c'}"
Create a regular expression that matches any URL.,"Regex: ^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$"
"Find the sum of all elements in the given 2D array.[[1, 2, 3],[4, 5, 6],[7, 8, 9]]",45
"Write an array sorting function that sorts the array in ascending order.[3, 1, 9, 5, 4]","def array_sort(arr): 
    arr.sort() 
    return arr
array_sort([3, 1, 9, 5, 4])"
"Given a binary tree, write a method to compute the maximum path sum.10
      /  \
     2    10
    / \   / \
   20  1  -25  6","public int maxPathSum(TreeNode root) {
    
    int result = Integer.MIN_VALUE;
    if (root == null) return result;
    Stack<TreeNode> stack = new Stack<>();
    stack.push(root);
    while (!stack.isEmpty()) {
        TreeNode currentNode = stack.pop();
        result = Math.max(result, maxPathSum(currentNode));
        if (currentNode.left != null) {
            stack.push(currentNode.left);
        }
        if (currentNode.right != null) {
            stack.push(currentNode.right);
        }
    }
    return result;
}
 
public int maxPathSum(TreeNode root) {
    if (root == null) return 0;
    int sum = root.val;
    int leftSum = maxPathSum(root.left);
    int rightSum = maxPathSum(root.right);
    return Math.max(sum + leftSum + rightSum, sum + Math.max(leftSum, rightSum));
}"
"Write a function that takes three integers and returns the maximum of the three.-2, 5, 7","def max_of_three(x, y, z): 
    return max(x, y, z) 
  
print(max_of_three(-2, 5, 7)) 
# Output: 7"
"Rewrite the given loop in R.list = [1, 2, 3, 4, 5] 
for i in range(len(list)): 
    print(list[i])","list <- c(1, 2, 3, 4, 5)
for (i in seq_along(list)) {
    print(list[i])
}"
Write a code snippet to read characters from a given string until a whitespace is encountered,"def read_until_space(string):
 result = """"
 for char in string:
     if char == "" "":
         break
     result += char
 return result"
Modify the following code to take in a list of numbers and return the average.,"def average(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)"
Design a function in Python that takes a list of strings and returns a new list with words in reverse order.,"def reverse_words(words):
    return [word[::-1] for word in words]"
"Create a regular expression that matches any word starting with the letter ""a"".",^a\w*
"Develop an algorithm to search for a particular element in an array.[1, 9, 5, 8, 4, 9], element to search for: 9","def search(arr, el):
    for i in range(len(arr)):
        if arr[i] == el:
            return i
    return -1"
Generate a list comprehension in Python to generate a list of integers from 1 to 50.,"[x for x in range(1, 51)]"
Develop an algorithm to traverse a linked list in a reverse order.,"def traverseReverse(head):
    if head is None:
        return

    stack = []
    curr = head
    while curr is not None:
        stack.append(curr) 
        curr = curr.next 

    while len(stack) > 0:
        curr = stack.pop()
        print(curr.val)"
Create a Python script for creating a random string of given length.Length of 8,"import random
import string

def random_string(length):
    # Create a list of characters to be used in the random string
    char_list = list(string.ascii_letters + string.digits)

    # Create the random string with the given length
    random_string = ''.join([random.choice(char_list) for i in range(length)])
    
    # Return the random string
    return random_string

if __name__ == '__main__':
    # Define the length of the random string
    length = 8
    # Call the function to generate the random string
    random_str = random_string(length)
    # print the generated string
    print('Random string:', random_str)

Output:
Random string: fdLbBi49"
"Edit the following Python code to combine two lists.list1 = [1, 2, 3]
list2 = [4, 5, 6]","list1 = [1, 2, 3]
list2 = [4, 5, 6]

# Combine both the lists
combined_list = list1 + list2
# Print the combined list
print(combined_list)

Output:
[1, 2, 3, 4, 5, 6]"
Develop a Python program that creates a random password of length 8 characters.,"import string
import random

length = 8
all_characters = string.ascii_letters + string.digits + string.punctuation

password = """".join(random.choice(all_characters) for i in range(length))

print(password)"
"Create a class called Vehicle with members model, manufacturer, and color.","class Vehicle:
    def __init__(self, model, manufacturer, color):
        self.model = model
        self.manufacturer = manufacturer
        self.color = color"
"Write a function to extract a specific key from a dictionary.{'a':1, 'b':2, 'c':3}","def extract_key(dictionary, key):
    return dictionary.get(key)"
"Construct a for loop to iterate over a range of 10 numbers, printing out the square of each.","for i in range(1, 11):
    print(i*i)"
Write a code to decode a given URL encoded string.%40%7C%2523%5B,"def decode_url(string):
    string = string.replace('%40', '@')
    string = string.replace('%7C', '|')
    string = string.replace('%2523', '#')
    string = string.replace('%5B', '[')
    return string"
Write a code to get the current US Dollar to Euro exchange rate from the European Central Bank.,"""""""
Get the current Euro to US Dollar exchange rate from the European Central Bank
""""""

import requests
import json

def get_currency_exchange_rate():
    url = 'https://api.exchangeratesapi.io/latest?base=USD'
    response = requests.get(url)
    data = json.loads(response.text)
    return data['rates']['EUR']

if __name__ == '__main__':
    print(get_currency_exchange_rate())"
"Create a function that given two strings, returns a new string with the characters of the two strings alternating.('abcd', 'efgh')","def alternating_strings(str1, str2):
    result = """"
    
    for i in range(min(len(str1), len(str2))):
        result += str1[i] + str2[i]
    
    # take care of the rest of the elements
    if len(str1) > len(str2):
        result += str1[len(str1)-1]
    else:
        result += str2[len(str2)-1]
    
    return result"
"Create a code that takes two strings and checks whether they are a pair or not.('AB', 'CD')","def is_pair(str1, str2):
    return str1[0] == str2[0] and str1[1] == str2[1]"
"Create a dictionary from a given list of tuples.[('a', 1), ('b', 2), ('c', 3)]","def list_to_dict(tuples_list):
    result = {}
    for tuple_ in tuples_list:
        result[tuple_[0]] = tuple_[1]
    
    return result"
"Write code for finding the maximum of two numbers given as input.x=15, y=17","let maxNum = 0;

if (x > y) {
    maxNum = x;
} else {
    maxNum = y;
}

console.log(""The maximum of x and y is:"", maxNum);"
Classify the types of sentences in the given text.The quick brown fox jumped over the lazy dog. She jumped happily.,"The first sentence is a declarative sentence.
The second sentence is an exclamatory sentence."
Solve this math problem using Python code.Problem: Find the 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5.,"#Find the first term
a = (42/3) - (2*5)
a = 10

#Find the other two terms
b = a + 5
c = b + 5

#Print the answer
print(""The 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5 are:"", a, b, c)"
"Write code for converting each character of a string to uppercase.String: ""gpt is great""","let upperCaseStr = """";
for (let char of str) {
	upperCaseStr += char.toUpperCase();
}
console.log(""Uppercase string:"", upperCaseStr);"
"Calculate the standard deviation of the given set of numbers.[9, 2, 5, 4, 12, 7, 8, 11, 9, 3, 7, 4, 12, 5, 4, 10, 9, 6, 9, 4]",Standard deviation of the given set of numbers: 3.26
Describe the process of Gradient Descent algorithm.,Gradient Descent is an algorithm used for finding the minimum value of a given function by iteration. The process begins with initializing the parameters at a random value and then computing the gradient of the cost function. The gradient can then be used to update the parameters in the direction of steepest descent. The process is then repeated until a local minimum of the cost function is achieved.
"Write Python code to generate a random integer between 1 and 10,000 (inclusive).","import random

num = random.randint(1, 10000)
print(""Random integer between 1 and 10,000:"", num)"
Write a SVG code to create a circle with red radius of 25px.,"<svg width=""50"" height=""50"">
  <circle cx=""25"" cy=""25"" r=""25"" fill=""red"" />
</svg>"
"You need to identify if a given string is an anagram of another string or not. Output ""true"" if it is an anagram, output ""false"" if it is not.String s1 = ""abcd"";
String s2 = ""dcab"";",true
"You are provided with some sample data and you need to detect if there are any outliers present in the data set or not. Output true if any outlier is present, output false if there is no outlier.[3, 4, 5, 15, 16]",true
"Given the following data set, calculate the mean of the values.[45, 63, 76, 89, 47]",double mean = (45 + 63 + 76 + 89 + 47) / 5;
Create a for loop in Perl that adds all the numbers from 1 to 5.,"my $sum = 0;
for (my $i = 1; $i <= 5; $i++) {
    $sum += $i;
}
print $sum;"
Construct an if statement for Python that checks if a given number is greater than 5.,"num = 7
if num > 5:
 print(""The number is greater than 5"")"
Create an array of five random numbers.,"int[] randomNumbers = new int[] { 8, 5, 2, 1, 9 };"
"Compute a % b.a = 10, b = 3",int result = 10 % 3; // result is 1
"Compute the median of the following list: [2, 5, 9, 12].",double median = (5+9)/2.0; // median is 7.0
"Write a function that takes in an array of strings as input and returns the longest string in the array.[""Apple"", ""Banana"", ""Orange""]","string longestString(string[] strArr) {
    string longest = """";
    for (string str : strArr) {
        if (str.length() > longest.length()) {
            longest = str;
        }
    }
    return longest;
}"
"Reverse the following array of integers.[1, 5, 7, 9, 10]","int[] reversedArray = new int[] { 10, 9, 7, 5, 1 };"
"Create a string with alternating characters from two other given strings.string str1 = ""HELLO"";
string str2 = ""WORLD"";","string result = ""HWEOLLRODL"";"
Create a variable that stores the result of the following function: 10 * 10 + 12 / 3.,int result = 44;
Calculate the probability of drawing four aces from a standard deck of cards.,double probability = (4.0/52.0)*(3.0/51.0)*(2.0/50.0)*(1.0/49.0); // probability is 0.0045248868778280541
"Create an object that stores the following key, value pairs: {name: John, age: 20, nationality: American}.","Object person = {
    ""name"": ""John"",
    ""age"": 20,
    ""nationality"": ""American""
};"
"Given an array of strings, find the string that is the most common in the array.[""Apple"", ""Banana"", ""Apple"", ""Orange""]","String mostCommon = """";
int maxCount = 0;

for (int i = 0; i < strArr.length; i++) {
    int count = 0;
    for (int j = 0; j < strArr.length; j++) {
        if (strArr[i].equals(strArr[j])) {
            count++;
            if (count > maxCount) {
                mostCommon = strArr[i];
                maxCount = count;
            }
        }
    }
}

// mostCommon is ""Apple"""
"Create a method to filter an array and return all elements that are greater than or equal to 10.arr = [1, 2, 6, 10, 14, 18]","# method to filter an array 
def filter(arr):
    new_arr = []
    for element in arr:
        if element >= 10:
            new_arr.append(element)
    return new_arr

# main program
print(filter(arr))"
Update a variable to be the negative of its value.x = 5,"# negative function
def negative(x):
    return -x

# main program
x = negative(x)
print(x)"
"Use a while loop to iterate over a list of numbers and find the first even numbernumbers = [7, 3, 5, 11, 13]","# while loop to iterate over list of numbers
i = 0 
while i < len(numbers):
    if numbers[i] % 2 == 0:
        break
    i += 1

# main program
if i < len(numbers):
    print(""First even number is "", numbers[i])
else:
    print(""No even numbers found"")"
"Create a function that takes two arguments, a number and a list, and returns a list with all elements from the original list multiplied by the number.num = 2
lst = [1, 2, 3, 4]","# function to multiply each element of list by number 
def lst_multiply(num, lst):
    new_lst = []
    for num in lst:
        new_lst.append(num * num)
    return new_lst

# main program
print(lst_multiply(num, lst))"
"Write an if statement to check if a string is equal to ""Hello"".word = ""Hello""","// program to check if a string is equal to ""Hello""
if (word == ""Hello"") {
    console.log(""String is equal to 'Hello'"")
}"
"Retrieve the third character from a string using its index.word = ""Hello""","// program to retrieve the third character from a string using its index 
let third_char = word[2]
console.log(third_char)"
Create a switch statement that evaluates an integer from 0 to 5 and outputs a description of the number.num = 4,"// program to create a switch statement that evaluates an integer
switch(num) {
    case 0: 
        console.log(""num is 0"")
        break;
    case 1: 
        console.log(""num is 1"")
        break;
    case 2: 
        console.log(""num is 2"")
        break;
    case 3: 
        console.log(""num is 3"")
        break;
    case 4: 
        console.log(""num is 4"")
        break;
    case 5: 
        console.log(""num is 5"")
        break;
    default:
        console.log(""num is not between 0 and 5"")
        break;
}"
"How can this code be optimized?def set_similarity(a, b): 
    same = 0
    for i in a:
        if i in b:
            same += 1
    return same/max(len(a),len(b))","def set_similarity(a, b): 
    return len(set(a).intersection(set(b)))/max(len(a),len(b))"
"Find the index of an element in a given list.list = [1, 2, 3, 4, 5]
element = 3",2
"Given a string, remove all characters except for alphabets and write the new string.my_string = ""Hello, world!""",Hello world
"Calculate the number of days between two given dates in Python.date1 = '2020-09-13'
date2 = '2021-02-06'",122
Make the following sentence capitalized.the quick brown fox,The Quick Brown Fox
"Implement a Bubble Sort algorithm.list = [10, 5, 9, 25, 1]","def bubbleSort(list): 
    n = len(list) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if list[j] > list[j+1] : 
                list[j], list[j+1] = list[j+1], list[j] 
  
# Driver code to test above 
list = [10, 5, 9, 25, 1]
bubbleSort(list) 
print (""Sorted array :"") 
print(list)"
"Write a code snippet to convert a list in Python to a set.list1 = [1,2,3,4,5]","set1 = set(list1) # set1 will now contain [1,2,3,4,5]"
"Write a Python code snippet to sort a dictionary by its values in ascending order.dictionary = {'a': 5, 'b': 2, 'c': 4}","sorted_dictionary = dict(sorted(dictionary.items(), key=lambda item: item[1]))
print(sorted_dictionary) # result: {'b': 2, 'c': 4, 'a': 5}"
"Count the number of occurrences of each character in a given string and print the output.str = ""abbabbabbb""","from collections import Counter
str = ""abbabbabbb""
letters = Counter(str)
for key, value in letters.items():
    print(f""Character {key} occurs {value} time(s)"")"
Compute the sum of two integer inputs separated by a space1 5,6
Write a loop to print the characters of a string in reverse ordermyString,"for i in range(len(myString)-1,-1,-1):
    print(myString[i])"
"Check if the two strings are anagramsbombe
bemob","def is_anagram(str1, str2): 
    return sorted(str1) == sorted(str2)"
"Write a dictionary comprehension to mapp the following list[('a',0),('b',1),('c',2)]","{key: value for (key,value) in [('a',0),('b',1),('c',2)]}"
Print the fibonacci sequence of length 10,"def fibonacci(length): 
    result = [] 
    a, b = 0, 1
    for _ in range(length): 
        result.append(a) 
        a, b = b, a + b 
    return result"
"Using the provided list of numbers, compute the average[1, 4, 7, 10]","def calculate_average(numbers):
    return sum(numbers) / len(numbers)"
Provide an appropriate name for a Python module that contains a class for a user.,"The appropriate name for the module could be ""user_class.py""."
"Fill in the code to implement a for loop to get the sum of all the elements in a list.my_list = [1, 2, 3, 4, 5]","total = 0
for i in my_list:
 total += i"
Describe a method to solve an equation of the form ax + b = 0.,The equation ax + b = 0 can be solved by subtracting b from both sides and then dividing both sides by a. This will yield the solution x = -b/a.
"Split the following string into a list of words.string = ""this is a string""",words = string.split(' ')
"Rewrite the following function to function asynchronously.function example(data) {
    console.log('Started processing data');
    output = process(data);
    console.log('Finished processing data');
    return output;
}","async function example(data) {
    console.log('Started processing data');
    let output = await process(data);
    console.log('Finished processing data');
    return output;
}"
Create an array in Python of size 10 filled with zeroes.,arr = [0] * 10
"Categorize the given text into different class.The patient has a fever, headache and sore throat","Category 1 - Symptoms: fever, headache, sore throat
Category 2 - Illness: unknown"
Write a function in Python to compress a given string.aabcccccaaa,"def compression(string):
    output = """"
    count = 1
    curr_char = string[0]
    for char in string[1:]:
        if char == curr_char:
            count += 1
        else:
            output += curr_char + str(count)
            curr_char = char
            count = 1
    output += curr_char + str(count)
    return output

print(compression('aabcccccaaa'))
# Output: a2b1c5a3"
Generate an array in Python of size 10 filled with Random numbers between 1 to 100.,"import random
arr = [random.randint(1,100) for i in range(10)]"
What data type is best suited to store a list of students' names?,"A list of students' names can best be stored using a string data type. Strings are character sequences, making them well-suited for storing text-based information such as names. Storing a list of student names as a string is also more efficient memory-wise than other data types, since strings are immutable and can be reused for different values."
"Using Python, write a function to format a given date.Date: ""2021-02-14""
Format: ""dd/mm/yyyy""","def format_date(date, date_format):
 date = date.split('-') 
 day = date[2]
 month = date[1]
 year = date[0]
 if date_format == ""dd/mm/yyyy"": 
  formatted_date = day + ""/"" + month + ""/"" + year
 return formatted_date"
How can a string be converted to a list in Python?,"A string can be converted to a list in Python by using the list() function. The syntax for this is: 

list(string);

For example, to convert the string ""apple"" to a list, you would use: 

list(""apple"");"
Create a function to print a Diamond shape.Size: 5,"def print_diamond(size):
    for i in range(1, size + 1):
        print("" "" * (size - i) + ""*"" * (2 * i - 1))
    for i in range(size - 1, 0, -1):
        print("" "" * (size - i) + ""*"" * (2 * i - 1))"
Compute the Fibonacci sequence upto n.,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)"
What is static typing in programming?,Static typing is a type of type system where the type of each variable is determined at compile-time instead of at runtime. This means that the variables and their types are checked at compile-time of the program and any type mismatch will result in an error. This leads to better performance as it prevents runtime errors due to type mismatch and also makes the code more readable.
Create a function to append a new element to a list.,"def append_list(my_list, new_element):
    my_list.append(new_element)
    return my_list"
"Identify which is the given data typeData: [1,2,3]",The given data is a list.
"Rewrite this function using a recursive algorithm.def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result","def factorial(n): 
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Create an expression tree for the expression (2+3)*4.,"*
        / \
       +   4
      / \
     2   3"
Compile a piece of code written in Python language.,"python -c ""import py_compile; py_compile.compile('foo.py')"""
"Analyze this code for potential runtime errors.def factorial(n):
    result = 1
    if n >= 0:
        for i in n:
            result *= i
        return result","This code may result in a runtime error because an iterable is expected as an argument for the for loop, but the argument passed is a number rather than an iterable. Additionally, the if-statement does not have an else block making it possible for the function to return None instead of a number. To fix the code, the argument passing to the for loop should be changed to range(n) and the if-statement should have an else block that returns 1 if n is smaller than 0."
Write a code to implement an LRU (Least Recently Used) cache.,"class LRUCache:
    def __init__(self, capacity):
        self.capacity = capacity
        self.cache = {}
        self.lru = list()
           
    # get an item from the cache and update its timestamp
    def get(self, key):
        if key in self.cache:
            self.lru.remove(key)
            self.lru.append(key)
            return self.cache[key]
        else:
            return -1
             
    # add a new item to the cache, discard the least recently used item if cache is full 
    def put(self, key, value):
        if len(self.cache) >= self.capacity:
            self.cache.pop(self.lru[0])
            self.lru.pop(0)
        if key in self.cache: 
            self.lru.remove(key)
        self.cache[key] = value
        self.lru.append(key)"
"Implement a method to sort a list of numbers using the quick sort algorithm.[10, 3, 9, -2, 8, 7]","def quickSort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quickSort(left) + middle + quickSort(right)"
"Design a function to remove all duplicate words from a sentence.""This is this is a sentence with with repeats repeats""","def removeDuplicates(txt):
    newTxt = []
    txt = txt.split()

    for x in txt:
        if x not in newTxt:
            newTxt.append(x)

    return "" "".join(newTxt)"
Create a function to parse and print the date in DD-MM-YYYY format.date_string = '01 Jan 2018',"def parseDate(date_string):
    date_list = date_string.split()
    month_dict = {
        'Jan': '01', 
        'Feb': '02',
        'Mar': '03',
        'Apr': '04',
        'May': '05',
        'Jun': '06',
        'Jul': '07',
        'Aug': '08',
        'Sep': '09',
        'Oct': '10',
        'Nov': '11',
        'Dec': '12'
    }
    day = date_list[0]
    month = month_dict[date_list[1]]
    year = date_list[2]

    return day + ""-"" + month + ""-"" + year"
Write a function to classify a news article by its tone.,"def classifyArticle(article):
    tone_dict = {
        'positive': 0,
        'neutral': 0,
        'negative': 0
    }
    for token in article:
        if token in pos_words:
            tone_dict['positive'] += 1
        elif token in neg_words:
            tone_dict['negative'] += 1
        else:
            tone_dict['neutral'] += 1

    sorted_tones = sorted(tone_dict.items(), key=lambda x:x[1], reverse=True)
    return sorted_tones[0][0]"
Implement a stack data structure using linked lists.,"class Node:
	def __init__(self, data):
		self.data = data
		self.next = None

class Stack:
	def __init__(self):
		self.head = None
		self.num_elements = 0

	def push(self, element):
		new_node = Node(element)
		if self.head == None:
			self.head = new_node
		else:
			new_node.next = self.head
			self.head = new_node
		self.num_elements += 1
		
	def pop(self):
		if self.is_empty():
			return None
		temp = self.head
		self.head = self.head.next
		self.num_elements -= 1
		return temp.data

	def is_empty(self):
		if self.num_elements == 0:
			return True
		return False

	def top(self):
		if self.head:
			return self.head.data
		return None"
"Create a function called ask_age() that prints ""What is your age?"" and also returns the users input.","def ask_age(): 
    print('What is your age?')
    age = input()
    return age"
"Create a simple program to sort an array of integers from smallest to largest.[7,3,1,9,2]","def sort_array(arr):
    arr.sort()
    return arr 

result = sort_array([7,3,1,9,2])
print(result)

# Output: [1,2,3,7,9]"
"Given a list of numbers, create a function that finds the two elements that sum to a given target number.nums = [2, 45, 7, 9, 15]
target = 16","def two_sum(nums, target):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]

result = two_sum(nums, target)
print(result) 

# Output: [2, 3]"
"Implement an algorithm to find the number of occurrences of a substring in a string.string = ""This is a test""
substring = ""is""","def count_substring(string, substring):
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1

    return count

result = count_substring(string, substring)
print(result)

# Output: 2"
"Given a string and an index, create a function to return the character at the given index in the string.string = ""Hello""
index = 3","def get_char(string, index):
    return string[index]

result = get_char(string, index)
print(result)

# Output: l"
Print the first 10 Fibonacci numbers using a loop.,"a, b = 0, 1
for i in range(10):
    print(a)
    a, b = b, a + b"
"Given 3 lists a, b, and c, write a Python code to calculate the dot product of a and b and store the result in c.a = [3, 4, 5] 
b = [6, 7, 8]
c = []","def dot_product(a, b, c):
    if len(a) != len(b):
        raise ValueError(""Length of Lists cannot differ"")
    dp = 0
    for i in range(len(a)):
        dp += a[i]*b[i]
    c.append(dp)"
"Write a code to multiply two matrices, assuming the two matrices can be multiplied.A = [[1, 2], [3, 4]] 
B = [[5, 6], [7, 8]]","def multiply_matrices(A, B):
    if len(A[0]) != len(B):
        raise ValueError(""Matrices cannot be multiplied"")

    rows_A = len(A)
    columns_A = len(A[0])
    rows_B = len(B)
    columns_B = len(B[0])

    result = [[0 for column in range(columns_B)] for row in range(rows_A)]

    for row in range(rows_A):
        for column in range(columns_B):
            for k in range(columns_A):
                result[row][column] += A[row][k] * B[k][column]

    return result"
"Write a function to find the index of the point that lies closest to the origin.points = [[1,1],[-1,2],[3,-4]]","def closest_point(points):
    min_dist = float('inf')
    for i in range(len(points)):
        dist = points[i][0]**2 + points[i][1]**2 
        if dist < min_dist:
            min_dist = dist
            closest_index = i

    return closest_index"
"Given two strings, write a Python code to delete all occurrences of the second string from the first string.str1 = ""abcabcabcabcabcabcabcabcabcabc""
str2 = ""abc""","def delete_occurrences(str1, str2):
    return str1.replace(str2, '')"
"Write a function that sorts its arguments in descending order.nums = [4, 8, 10, 3, 5]","def sort_descending(*args):
    args = list(args)
    for i in range(len(args)-1):
        for j in range(i+1, len(args)):
            if args[i] < args[j]:
                args[i], args[j] = args[j], args[i]
    return args"
Create an algorithm to encourage work balance and productivity in remote work.,"One algorithm to encourage work balance and productivity in remote work is a scheduling algorithm that assigns workloads over manageable working windows with rest periods in between to allow for breaks and recovery. This algorithm can be designed to set maximum and minimum limit for each allocated workload and for duration for the rest periods, based on the individual's productive and rest needs. It can be used to monitor and manage workloads to ensure that workers do not experience fatigue or workload overload. Additionally, the algorithm can be designed to keep track of work performance over time to provide appropriate feedback and recommendations in order to help workers optimize their performance."
"Create a Python program to calculate the mean, median, and mode of a given set of data.data = [1, 4, 6, 3, 8, 9]","def calculate_mean(data):
    '''Function to calculate mean of data'''
    mean = sum(data) / len(data)
    return mean

def calculate_median(data):
    '''Function to calculate median of data'''
    data.sort()
    mid_index = len(data) // 2
    median = data[mid_index]
    return median

def calculate_mode(data):
    '''Function to calculate mode of data'''
    count_dict = {}
    mode_list = []
    # count the frequency of each element
    for i in data:
        count_dict[i] = data.count(i)
    # find the maximum frequency
    max_freq = max(count_dict.values())
    # find all elements with maximum frequency
    for k,v in count_dict.items():
        if max_freq == v:
            mode_list.append(k)
    return mode_list

data = [1, 4, 6, 3, 8, 9]
mean = calculate_mean(data)
median = calculate_median(data)
mode = calculate_mode(data)

print(f""Mean of data is: {mean}"")
print(f""Median of data is: {median}"")
print(f""Mode of data is: {mode}"")"
Create an algorithm to detect plagiarized text.,"One algorithm to detect plagiarized text is to compare text fragments of the document to a database of known plagiarized content. The algorithm can be refined by using natural language processing methods like vectorization and clustering to identify text parallelism and code similarity between the document and the content in the database. The algorithm also can weight the comparison based on similarity scores and can be further improved by utilizing machine learning models to identify more subtle aspects of plagiarism, such as paraphrasing, translations, and synonyms."
"Design a class in Python to store a user profile information such as name, age, city, etc.","class UserProfile:
    def __init__(self, name, age, city):
        self.name = name
        self.age = age
        self.city = city

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

    def get_city(self):
        return self.city"
"Write a script in Python to find the longest word in a given string.sample_string = ""This is a sample string containing a few words""","def longest_word(sample_string):
    words_list = sample_string.split()
    longest_word = """"
    for word in words_list:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
"Design a class in Python to store information about a car, such as its make, year, and mileage.","class Car:
    def __init__(self, make, year, mileage):
        self.make = make
        self.year = year
        self.mileage = mileage

    def get_make(self):
        return self.make

    def get_year(self):
        return self.year

    def get_mileage(self):
        return self.mileage"
"Design a class in Python to store a book's title, author, and number of pages.","class Book:
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages

    def get_title(self):
        return self.title

    def get_author(self):
        return self.author

    def get_pages(self):
        return self.pages"
"Write a function to concatenate two strings without using the concatenation operator ""+"".","def concat(string1, string2):
    result = """"
    for i in string1:
        result += i
    for j in string2:
        result += j
    return result"
Create a function that converts any number to its hexadecimal representation,"def to_hexadecimal(num):
    return hex(num)"
"Create a function that takes an array of numbers and a target number as input, and returns true if the target number is present in the given array, false otherwise.list1 = [1,2,3,4]
target = 2","def contains_target(list1, target):
    return target in list1"
"Write a function that takes two strings and searches for all the occurrences of the first string in the second and returns the positions of the pattern within the string.string1 = ""aa""
string2 = ""aaaaaa""","def pattern_occurences(string1, string2):
    positions = []
    for i in range(len(string2)):
        if string1 == string2[i:i+len(string1)]:
            positions.append(i)
    return positions"
Create a function that takes a string as input and returns a copy of the string with all punctuation marks removed,"def remove_punctuation(text):
    punctuation_chars = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    output = """"
    for char in text:
        if char not in punctuation_chars:
            output += char
    return output"
Create a function that encodes a message into a Vigenere cipher,"def vigenere_encode(message, key):
    encoded_message = """"
    key_index = 0
    for character in message:
        if character.isalpha():
            shift_amount = ord(key[key_index]) % 26
            key_index += 1
            if key_index == len(key):
                key_index = 0  
            shifted_char_code = ord(character) + shift_amount
            if shifted_char_code > ord('z'):
                shifted_char_code -= 26
            encoded_message += chr(shifted_char_code)
        else:
            encoded_message += character
    return encoded_message"
How to find the number of elements within a list in Python?,"The number of elements in a list can be obtained using the len() method in Python.
For example, if the list is named my_list, the number of elements can be obtained as len(my_list)."
We have a given string. Replace every occurrence of 'a' with 'A'string = 'I like apples',string = 'I like Apples'
You need add two numbers without using '+' operator.2 and 3,"The solution is to use the bitwise XOR operator. The XOR operator will return a 1 if either of the two given numbers is a 1, but will return a 0 if both of them are either 1 or 0.

Therefore, the solution is:

num1 = 2
num2 = 3
result = num1 ^ num2"
"You need to read a code and detect if there are any security vulnerabilities. Output true if there are any vulnerabilities, output false if there are none.def secret_function(username, password):
    if username == 'myusername' and password == 'mypassword':
        return True
    else:
        return False",true
How to remove duplicates from a list in Python?,"In Python, duplicates can be removed from a list by converting the list to a set. Sets are unordered collections of unique elements. They do not allow duplicate elements, thus when a list is converted to a set, all duplicates are removed.

For example, if the list is named my_list, then the set can be constructed as follows:

my_set = set(my_list)"
Write a function in Python that takes a number and returns the square of the number.x = 15,"def square(x):
    """"""This function takes an integer x and returns its square""""""
    return x * x
    
x = 15
print(square(x)) # prints 225"
"Create a RegEx pattern to match any sequences of characters that contains an ""a"".",let pattern = /a+/;
"Apply a style that changes the color of the text ""Hello, World!"" to red.<span>Hello, World!</span>","<span style=""color:red;"">Hello, World!</span>"
"Modify the code to make an HTTP request to a given URL.request = {
    type: ""GET""
}","let request = {
    type: ""GET"",
    url: ""https://example.com"",
    success: function(response) {
      console.log(response);
    }
};
$.ajax(request);"
Rewrite the code using a while loop to count down from the number 5 to 0.,"let num = 5;
while (num >= 0) {
    console.log(num);
    num--;
}"
Create a class to store and print information about a book.,"class Book:
    def __init__(self, title, author, publisher, pages):
        self.title = title
        self.author = author
        self.publisher = publisher
        self.pages = pages
   
    def print_info(self):
        print(f""Title: {self.title}"")
        print(f""Author: {self.author}"")
        print(f""Publisher: {self.publisher}"")
        print(f""Pages: {self.pages}"")"
"Create a function to sort the given array of numbers in descending order.[7, 2, 5, 1, 4]","def sort_number(arr): 
    arr.sort(reverse=True) 
    return arr 

arr = [7, 2, 5, 1, 4]
  
print(sort_number(arr)) 

# Output: [7, 5, 4, 2, 1]"
Name four significant members of the Python community.,"Guido van Rossum, Kenneth Reitz, Monty Python, and Brett Cannon."
"Convert a 2D array into a 1D array.array = [[1, 2], [3, 4]]","array = array.reshape(-1, ).tolist()"
"Multiply two vectors of the same size.Vector1 = [1, 2, 3] 
Vector2 = [4, 5, 6]","resultantVector = [4, 10, 18]"
"Generate an algorithm that sorts the elements of an array.[6, 3, 8, 9, 4]","def sort_array(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in correct position
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

# Driver code to test above 
arr = [6, 3, 8, 9, 4] 
sort_array(arr) 

print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
"Define a function that takes an array of integers and returns an array of the squares of the input values.[2, 4, 6]","def array_squares(arr):
    return list(map(lambda x: x**2 , arr))"
Provide an answer to the following questionWhat is the maximum size of an array in Java?,"The maximum size of an array in Java is determined by the amount of memory that the JVM has available to allocate. In practice, this means that the maximum size of an array is typically limited to the amount of free memory available on the heap. Generally speaking, the maximum size of an array can range from a few thousand to somewhere around 2 billion elements."
Generate a Python script that implements a Linked List data structure.,"# define Node
class Node(object):

    def __init__(self, data):
        self.data = data
        self.next = None

# define LinkedList
class LinkedList:

    def __init__(self, head=None):
        self.head = head
    
    def insert(self, node):
        current = self.head
        if not self.head:
            self.head = node
        else:
            while current.next:
                current = current.next
            current.next = node

     def delete_node(self, data):
        current = self.head
        while current.data != data and current.next is not None:
            previous = current
            current = current.next
        if current.data == data:
            if current == self.head:
                self.head = current.next
            else:
                previous.next = current.next"
"Suggest an improvement for the following piece of codedef addTwoNumbers(a, b):
    return a + b","def addTwoNumbers(a, b):
    try:
        if type(a) == str or type(b) == str:
            raise TypeError('Inputs must be of type int or float')
        return a + b
    except TypeError as e:
        print(e)"
"Write a function to produce a copy of an array[1, 2, 3, 4]","def copy_array(arr): 
    new_arr = list(arr) 
    return new_arr"
"Provide a Python function to calculate the number of times a word appears in a given string""This is a sample string. There are some words in this string.""","def count_words(s): 
    tokens = s.split() 
    word_freq = {} 
    for token in tokens: 
        if token in word_freq: 
            word_freq[token] += 1
        else: 
            word_freq[token] = 1
        
    return word_freq"
Write a Tensorflow program to perform binary classification on a given dataset.,"import tensorflow as tf

mnist = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(2, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

model.evaluate(x_test,  y_test, verbose=2)"
Implement a machine learning model in Python to predict customer churn.,"import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load dataset
customers = pd.read_csv(""customers.csv"")

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    customers.drop('Churn', axis=1), 
    customers.Churn,
    test_size=0.2, 
    random_state=42)

# Create model
model = LogisticRegression()

# Fit and make predictions
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(""Accuracy: %.2f%%"" % (accuracy * 100.0))"
Generate a list of 1000 random numbers between 1 and 1000 using Python.,"import random

random_list = [random.randint(1, 1000) for _ in range(1000)]"
Design a function in R to check if a variable is a character or not.,"is.character <- function(x){
  return(is.character(x))
}"
"Normalize a column ""Weight"" in a Pandas dataframe.","import pandas as pd

# Read data from csv file
df = pd.read_csv(""data.csv"")

# Normalize the column ""Weight""
df['Weight']=(df['Weight']-df['Weight'].min())/(df['Weight'].max()-df['Weight'].min())

# Print the dataframe
print(df)"
Generate a random password of length 8 using Python.,"import random

def generate_password(length):
    chars = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890""
    password = """"
    for i in range(length):
        index = random.randint(0, len(chars)-1)
        password += chars[index]
    return password

length = 8
password = generate_password(length)
print(""Here's your random password:"", password)"
"Create a function that determines if two words are anagrams.Fire, fry","def is_anagram(word1, word2):
    word1 = word1.upper()
    word2 = word2.upper()
    return sorted(word1) == sorted(word2)"
"Implement an algorithm to sort the following array.[3, 5, 4, 6, 1, 2]","def sortArray(array):
    n = len(array)
    for i in range(n):
        min_index = i
        for j in range(i+1, n):
            if array[min_index] > array[j]:
                min_index = j
        array[i], array[min_index] = array[min_index], array[i]
    return array"
List two advantages and two disadvantages of using a linked list data structure,"Advantages of using a linked list data structure: 
1. A linked list can grow and shrink in size as needed since nodes can be dynamically allocated. 
2. Nodes can be added at any point in the list without traversing the whole list. 

Disadvantages of using a linked list data structure: 
1. Time efficiency is reduced  since nodes must be searched sequentially. 
2. Memory efficiency is reduced since each node requires additional space to store references to the next node."
"What is the best approach to solve this problem?Given an array of integers, find the longest continuous increasing subarray within the array.","The best approach to solve this problem is to use the sliding window technique. This involves iterating through the array and keeping track of the start and end points of a window. We check to see if the elements of the window are increasing and update the start and end points accordingly. When the window becomes longer than the longest subarray found so far, we update the longest subarray. The time complexity of this approach is O(n)."
Identify the key differences between a set and a dictionary in Python.,"The key difference between a set and a dictionary in Python is that a set stores unordered elements while a dictionary stores key-value pairs. Additionally, dictionaries have a set of keys that are unique and immutable, while sets are unordered collections of unique and immutable elements. Sets are more efficient for searching and testing for membership, while dictionaries are more efficient for retrieving specific values."
What is the most efficient sorting algorithm for a large data set?,"The Quick Sort algorithm is one of the most efficient sorting algorithms for large data sets. It works by finding a pivot element in the array, and then dividing the array into two parts based on the pivot element. All elements that are lesser than the pivot element are placed to the left, and all elements that are greater than the pivot element are placed to the right. The Quick Sort algorithm then recursively divides and sorts the left and right parts until the entire array is sorted. It has a worst-case time complexity of O(n^2), but its average case time complexity is O(nlogn) which makes it an efficient sorting algorithm."
Convert a given string to its lowercase versionPython,"lower_case = ""python"""
"Given a list of numbers, find the number which appears the most times in the list.[2, 3, 4, 2, 3, 2, 3, 2]","The number which appears the most times in the list is 2, which appears 4 times."
Create an infinite loop in C.,"while (1) {
  // code goes here
  }"
"Create a function that takes a sentence as a string and returns a string containing the sentence in reverse order.""I am learning to code""","public String reverse(String sentence) {
    StringBuilder reversedSentence = new StringBuilder();
    
    String[] words = sentence.split("" "");
    
    for (int i = words.length - 1; i >= 0; i--) {
        reversedSentence.append(words[i]);
        reversedSentence.append("" "");
    }
    
    return reversedSentence.toString().trim();
}"
"Create a function that takes two arguments, a number and a string, and returns the string repeated the specified number of times.4, ""Hello""","def repeatString(n, s):
    return s * n

repeatString(4, ""Hello"")"
"Determine the type of an object.""Hello""",type(“Hello”)
"Write an R code snippet to normalize data stored in a vector.[1,2,3,6]","normalize <- function(v) {
  (v - min(v)) / (max(v) - min(v))
}

normalize([1,2,3,6])"
"Create a list comprehension for the following code.number_list = []
for x in range(10):
    if x % 2 == 0:
        number_list.append(x)",number_list = [x for x in range(10) if x % 2 == 0]
"Create a function to find the standard deviation of a list of numbers[2,4,4,4,5,5,7,9]","def std_deviation(data): 
    n = len(data) 
	 
    mean = sum(data) /n 
    sum_sqr = sum(pow(x-mean,2) for x in data) 
    stdev = sqrt(sum_sqr/n) 
	
    return stdev 
    
std_deviation([2,4,4,4,5,5,7,9])"
Create a Haskell function to calculate a number raised to a certain power,"pow' :: (Num a, Integral b) => a -> b -> a
pow' x p = x^p"
Create a Macros in Excel to transpose a given set of data,"Sub Transpose() 
 
    Dim ReadyRange As Range 
 
     
 
    Set ReadyRange = Selection 
 
    ReadyRange.Copy 
 
    ReadyRange.PasteSpecial xlPasteAll, Transpose:=True 
 
End Sub"
"Create a vector in R to count the occurrences of a given number in an arrayarr = c(1,1,2,2,2,2,3,3,4,4,4)","vector <- c()
for (i in arr) {
  count <- length(which(arr == i))
  vector <- c(vector, count)
}"
Write a SAS Procedure to mean generate a boxplot,"proc boxplot data=dataset;
  plot y*x;
run;"
Create a Regular Expression that validates a USA phone number,^\+?1?\s?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{4}$
"Create a function to convert a string containing numbers in scientific notation to an integer.inputString: ""1.0e7""","int convertSciNotation(String inputString) {
    int outputInteger = (int)Math.pow(10, Double.parseDouble(inputString.substring(inputString.indexOf('e') + 1)));
    return outputInteger;
}"
"Implement an algorithm to split a string of numbers (integers or floats) in to two parts with an even suminputString: '1,2,3,4,5,6'","public int[] splitEvenSum(string inputString) {
    List<int> nums = new List<int>();
    
    // Split inputString at , and add elements to the list
    foreach (var num in inputString.Split(',')) {
        nums.Add(int.Parse(num));
    }
    
    // Initialize variables
    int targetSum = 0;
    int sum1 = 0;
    int sum2 = 0;
    List<int> list1 = new List<int>();
    List<int> list2 = new List<int>();
    
    // Loop through and calculate sums
    foreach (var num in nums) {
        targetSum += num;
    }
    targetSum /= 2;
    
    // Backtrack and find the two subarrays with the same sum
    foreach (var num in nums) {
        if (sum1 + num <= targetSum) {
            sum1 += num;
            list1.Add(num);
        } else {
            sum2 += num;
            list2.Add(num);
        }
    }
    
    // Return results
    int[] result = new int[2] {sum1, sum2};
    return result;
}"
Classify the given sentence as short or long.Sentence: She felt so excited that her application got approval.,Short sentence.
"Create a function to check which HEX color can be generated from the given RGB value.rgb: 253, 199, 1","def rgb_to_hex(rgb):
 r, g, b = rgb
 hex_val = ""#{:02x}{:02x}{:02x}"".format(r, g, b)
 return hex_val

# Output: #fdc701"
"Convert the given text into a list of words, separating the words by whitespace.text: This sentence contains five words","def to_words(text):
 return text.split()

# Output: ['This', 'sentence', 'contains', 'five', 'words']"
Build a neural network for binary classification using TensorFlow.,"""""""
Build a neural network for binary classification using TensorFlow
""""""
import tensorflow as tf

# Define the model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) 
model.add(tf.keras.layers.Dense(units=4, activation='relu'))
model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])"
"Compute the mean of the following set of numbers: 7, 15, 16, 23, 35.","The mean of the given set of numbers is 19.4. 

Mean = (7+15+16+23+35)/5 = 19.4"
Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible.abc,"def generate_unique_permutations(string):
    output = []
    for x in range(len(string)):
        for y in range(x + 1,len(string)+1):
            output.append(''.join(sorted(string[x:y])))  
    return output

print(generate_unique_permutations(""abc"")) #Output: ['a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']"
Construct a Python function to count the number of words in a given sentenceThis is a sentence,"def word_count(sentence):
    return len(sentence.split())

print(word_count('This is a sentence')) # Output: 5"
"Create a dictionary where each key is a unique integer and the value of each key is the corresponding product of the two given numbers.x = 15 
y = 2","d = {}

for i in range(1, x + 1):
  d[i] = i * y

print(d)"
Write a single-line lambda expression that multiplies any two numbers.,"mul = lambda x, y: x * y"
Generate a list of numbers from 1 to 10 in reverse order.,"lst = list(range(10, 0, -1))"
"Using the numpy library, reshape the given matrix array to 5 rows and 2 columns.import numpy as np 
arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])","arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])

reshaped_arr = arr.reshape(5, 2)

print(reshaped_arr)"
"Replace all empty strings with a default value using the following list.my_list = [""apple"", """", ""grapes"", """", ""bananas""]","my_list = [""apple"", """", ""grapes"", """", ""bananas""]

my_list = [x if x != """" else ""default"" for x in my_list]

print(my_list)"
"Create a new list with the contents of the given list plus the new element at the beginning.my_list = [3, 5, 6, 7]
new_element = 1","my_list = [3, 5, 6, 7]
new_element = 1

new_list = [new_element] + my_list

print(new_list)"
"Using the re library, trim the following string of all whitespace.my_string = ""  Hello, World!  ""","import re

my_string = ""  Hello, World!  ""

modified_string = re.sub('\s+', '', my_string)

print(modified_string)"
"Is there an error in the following code?price = 10

if prive > 10:
   print('Price must be 10 or less')",true
Write a code to form a triangle pattern with the character '$',"for i in range(5): 
    for j in range(i+1): 
        print('$', end="""") 
    print()"
"Suggest ways to debug the following codex = 'Address'
    print(""Topic:"", x)","- Add four spaces of indentation before the print statement to make it part of the block 
- Check the spelling of x to ensure there is no typo 
- Check the documentation for the correct syntax to print the value of x 
- Check the scope of x to ensure the value has been properly set outside the loop 
- Run the code in a debugger to find any issues that may arise during code execution"
"Suggest a more efficient code to solve the following task.x = 5
y = 10

if x > y:
    result = x
else:
    result = y","x = 5
y = 10
result = max(x, y)"
"Write a code to reverse the order of characters in a string.text = ""Hello World""","text = ""Hello World""
rev_str = reversed(text)
print(''.join(rev_str))"
How to check if a given year is a leap year in Python?,"def leap_year(year):
    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):
        return True
    return False"
Generate a key-value pair such that the key is a string of length 3 and the value is a random number from 0 to 9,"import random

key = ''.join(random.choices(string.ascii_letters, k = 3))
value = random.randint(0, 9)
data = {key : value}"
Write a Python function that takes an integer as an argument and returns the square of that number,"def square(n):
    return n ** 2"
Generate a dictionary that has 5 string-string key-value pairs,"import random

keys = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]
values = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]

data = {key:value for key, value in zip(keys, values)}"
"Using the bubble sort algorithm, sort the following array.[3, 5, 2, 1, 4]","def bubbleSort(arr): 
    n = len(arr)
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
    return arr
  
  
# Driver code 
arr = [3, 5, 2, 1, 4]
  
bubbleSort(arr)

Output: [1, 2, 3, 4, 5]"
"Add an element to a given list.List: ['a', 'b', 'c']
Element: 'd'","list1 = ['a', 'b', 'c']
list1.append('d') 

print(list1)

Output: ['a', 'b', 'c', 'd']"
"Using a while loop, write a program to print the Fibonacci sequence.","# function to print Fibonacci sequence 
def fibo(n): 
    counter = 0
    a = 0
    b = 1
      
    while counter < n:
        print(a, end = "" "")
        fibonacci = a + b 
        a = b 
        b = fibonacci 
        counter += 1
fibo(10)

Output: 0 1 1 2 3 5 8 13 21 34"
Programmatically generate 10 random numbers between 0 and 1.,"import random 

for x in range(10): 
  print(random.random()) 

Output: 0.06344054085111036 0.2881477132700741 0.17747003808770072 0.4838670382036148 0.8504676489597706 0.6951969864720918 0.3444948373996736 0.251203536083174 0.603054609456176 0.8579147959146845"
Compress a given string by counting the occurrences of each character.,"def compress_string(s):
    l = len(s) 
    
    # If operations length is 0 
    if l == 0: 
        return """" 
  
    # Erroneous characters in the  
    #original string are ignored. 
    if l == 1 or s[0] == s[1]: 
        return s[0] + str(1) 
    
    # Initialize the variable 
    count = 1
    s1 = """" 
     
    # Here i is the indexing variable 
    i = 1
    while i < l: 
            # If the current character matches with the next one 
            if (s[i] == s[i - 1]): 
                count += 1
            else: 
                s1 = s1 + s[i - 1] + str(count) 
                count = 1
            i += 1
    s1 = s1 + s[i - 1] + str(count)
    
    return s1 
  
s = ""geeksforgeeks""

print(compress_string(s))

Output: g1e2k2s2f1o1r1g1e1e1k1s1"
"Given a sentence as input, check if the sentence is a palindrome""Madam, I'm Adam""","def is_palindrome(s):
    s = s.replace("" "", """")
    return s == s[::-1]

is_palindrome(""Madam, I'm Adam"") # returns True"
Write a Visual Basic Script to add two numbers,"Function add(a As Integer, b As Integer)
    add = a + b 
End Function

MsgBox(add(5, 2))"
Create an algorithm to generate a random password,"def generate_password(length):
  password = """"
  characters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()""
  for i in range(length):
    password += choice(characters)
  return password

print(generate_password(10)) // output 5s@N#s9J@2"
Develop Python code to print out all the divisors of a given number30,"def get_divisors(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    return divisors 

print(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]"
"Given a sentence, separate the words and store them in an array.Sentence: Programming is fun.","words = [""Programming"", ""is"", ""fun""]"
"Sort these integers in ascending order.6, 5, 10, 1","[1, 5, 6, 10]"
Describe what an abstract class is used for.,"An abstract class is a class that contains abstract methods and variables. Abstract classes are meant to be inherited and customized by their subclasses. They are used to provide basic implementations of commonly used methods, as well as impose a common interface between different subclasses."
Check if a given string is a numeric value.String: 12345678,true
"Compare two strings and return the differences in the two strings.String1: ""Today is a great day!""
String2: ""Today is a beautiful day!""","The differences are ""great"" and ""beautiful""."
Create a class with a method that returns the sum of its two parameters.,"public class Sum {
    public int getSum(int a, int b) {
        return a + b;
    }
}"
Create an Angular Component to display a user's profile information.,"import { Component, Input } from '@angular/core';

@Component({
  selector: 'user-profile',
  template: `
    <div>
      <img src=""{{ user.avatar }}"" alt=""Profile Image"" />
      <h3>{{ user.name }}</h3>
      <p>{{ user.email }}</p>
    </div>
  `
})
export class UserProfileComponent {
  @Input() user;
}"
Create a method to generate a random integer between 1 and 10 in Python.,"import random

def random_int():
    return random.randint(1, 10)"
"Find the length of the string in the given input.string = ""Hello World""","len_string = len(string)
print(len_string) # output: 11"
"Compute the absolute difference between two given numbers.x = 7
y = 4","diff = abs(x - y)
print(diff) # output: 3"
"Create an object structure to represent a 3X3 grid of numbers. This grid should contain two 2’s, two 4’s, and a 6.","```
let grid = [
  [2, 4, 6],
  [4, 2, 6],
  [2, 6, 4]
];
```"
"Create a class ""Car"" that has an attribute ""make"" and an attribute ""model"".","```
class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

```"
Create an array of integers ranging from 0 to 20 and print it.,"```
array = []
for i in range(0,21):
    array.append(i)

print(array)

```"
"Extract the first name, last name and age from a given string.""John Smith, 33""","```
import re

s = 'John Smith, 33'

firstName = re.match(""^\w+"", s).group(0)
lastName = re.search(""\w+$"", s).group(0)
age = re.findall(""(\d+)"", s)[0]

print(firstName, lastName, age)

```"
Implement a function to calculate the absolute value of a number.-7,"```
def absValue(num): 
    if num >= 0: 
        return num 
    else: 
        return -num 
  
print( absValue(-7) )

```"
Create an object to store key/value pairs representing students and their grades.,"```
let grades = {
    ""John"": {
        ""math"": 80,
        ""science"": 90
    },
    ""Alex"": {
        ""math"": 75,
        ""science"": 95
    }
};

```"
Create a class in Python with a constructor and two methods.,"class MyClass:
  def __init__(self):
    self.x = 0

  def method_1(self):
    self.x +=1

  def method_2(self, arg1):
    self.x += arg1"
"Write a Python function to filter a given list of strings by the specified character?my_list = ['Hello', 'World', 'Hi', 'Python']
character = 'o'","def filter_list_by_character(my_list, character):
  return [item for item in my_list if character in item]"
"Write a Python program to return a boolean indicating whether a substring is present within a given string.string = 'Hello world'
substring = 'world'","def contains_substring(string, substring):
  return substring in string"
"Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.matrix = [[2, 0, 3, 5],
          [4, 5, 1, 2],
          [3, 1, 2, 7]]","def min_path_sum(matrix):

    # initialize the solution matrix
    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]

    # copying the first row elements
    res[0] = matrix[0]

    # iterate over the remaining rows
    for i in range(1, len(matrix)):
        # copy the first element
        res[i][0] = res[i-1][0] + matrix[i][0]

        for j in range(1, len(matrix[0])):
            # choose the smaller of the two
            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]

    # return the bottom-right element
    return res[len(matrix)-1][len(matrix[0])-1]"
"Read the code and delete the unnecessary code. Output should contain the refactored code.def remove_duplicates(data):
    """"""
    Return a new list with duplicates removed.
    """"""
    output = []
    for item in data:
        if item not in output:
            output.append(item)
    return output","def remove_duplicates(data):
    """"""Return a new list with duplicates removed.""""""
    return list(set(data))"
"You need to answer the following question: what is the output of the following code?def double_value(number):
   return number * 2

x = double_value(3)
print(x)",6
"You need to edit the following code so that it returns ""hello world"" as a string.function greet() {
    return 'hello' 
}","function greet() {
    return 'hello' + ' world'
}"
"You need to use a for loop to create the following sequence: 1,4,7,10,13","for (let i = 1; i <= 13; i += 3) {
    console.log(i)
}"
"Determine the number of times a specific value exists in an array.arr = [1, 2, 3, 3, 4, 5, 3]
num = 3","let num = 3;
let count = 0;
for (let i = 0; i < arr.length; i++) {
   if (arr[i] === num) {
      count++;
   }
}
console.log(count);"
You need to create a loop that prints out the square root of the numbers from 1 to 10.,"for (let i = 1; i <= 10; i++) {
    console.log(Math.sqrt(i));
}"
Output the following string in reverse order using loops.Hello World,"for (let i = 10; i >= 0; i--) {
    console.log(msg[i]);
}"
Count how many words are in a given sentence.This sentence contains five words.,"let sentence = ""This sentence contains five words."";
let words = sentence.split("" "");
console.log(words.length);"
Create a function to compute the Fibonacci sequence for a given input,"def compute_fibonacci(n):
    fib_list = []
    a, b = 0, 1

    while a < n:
        fib_list.append(a)
        a, b = b, a+b
    return fib_list"
"Create a boolean function to check whether a given string contains all alphabetsphrase = ""The quick brown fox jumps over the lazy dog""","def is_alphabetical(phrase):
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    for letter in alphabet:
        if letter not in phrase:
            return False
    return True"
Write a function to find the n-th Fibonacci number for a given n,"def get_fibonacci(n):
    a, b = 0, 1
    for _ in range(2, n):
        a, b = b, a + b
    return b"
"Create a Python program to replace all instances of a specific character in a string.string = ""Hello World!""
character = ""o""
replacement_character = ""_""","def replace_character(string, character, replacement_character):
    new_string = """"
    for c in string:
        if c == character:
            new_string += replacement_character
        else:
            new_string += c
    return new_string"
"Create a function to print a multiline message in Pythonmessage = ""This is a multiline 
message.""","def print_multiline_message(message):
    print(message)"
Describe a pipelined architecture for a processor,"A pipelined Processor architecture is one in which the instruction set is divided into separate stages, each associated with a specific segment in the computation process. As an instruction is entered, it is routed to the appropriate stage in the pipeline and progresses sequentially, thereby allowing the processor to complete multiple instructions simultaneously. The stages, known as the pipeline stages, can include IF (Instruction Fetch), ID (Instruction Decode), EX (Execution), MEM (Memory Access) and WB (Write-Back). The IF and ID stages typically handle instruction fetch and decode, while EX and MEM perform instruction execution and memory access, respectively. The final stage, WB, is responsible for writing the result to memory or a register."
Generate a pseudocode of a breadth first search algorithm.,"1. Create a queue Q

2. Enqueue item S(source) onto Q

3. For each element v in the adjacency list of S 
    3.1. Enqueue v onto Q
    3.2. Set v's predecessor to S

4. While Q is not empty
    4.1. Dequeue an item u from Q 
    4.2. For each element v in the adjacency list of u
       4.2.1. If v is unvisited, then
           4.2.1.1. set v's predecessor to u
           4.2.2.2. enqueue v onto Q

5. Return each node's predecessor"
"Edit the code below to add an exception handling mechanism in it.def divide(a, b):
    return a/b","def divide(a, b):
    try: 
        return a/b
    except ZeroDivisionError:
        print(""Division by zero is undefined"")"
Create a function that takes two integers and returns the remainder when the greater integer is divided by the smaller integer.,"def remainder(a,b):
    if a > b:
        return a % b
    else:
        return b % a"
Create a list of the first 10 perfect squares.,"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
"Design a Python function to return the list of values in two separate lists for even and odd numbers in a given list.[1, 2, 3, 4, 5]","def separateEvenOdd(nums):
    evenList = []
    oddList = []

    for n in nums:
        if n % 2 == 0:
            evenList.append(n)
        else:
            oddList.append(n)

    return evenList, oddList

print(separateEvenOdd([1,2,3,4,5]))"
"Create a function in python that takes a string as an argument and prints out two copies of the string.string = ""Hello World!""","def print_twice(string):
    print(string)
    print(string)
    
print_twice(string)"
"Using the given list, calculate the mode and median.[2, 4, 5, -6, 8, 9, -9, 10, 19]","Mode: -9 
Median: 7"
"Sort the given list.[7, 3, 5, 6, 2]","[2, 3, 5, 6, 7]"
"Using the comment as a guide, add the appropriate exception handling code.try: 
	div_num=5/0
except ZeroDivisionError as e:
	# TODO:
	    print(""Divide by zero error"")","try: 
	div_num=5/0
except ZeroDivisionError as e:
	# TODO:
    print(""Divide by zero error"")
    print(""Error message: "" + str(e))"
Create a program that logs the time a user entered a program.,"import time

def log_time():
    current_time = time.time()
    print(""You entered the program at"", current_time)"
"Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5.numbers = [5, 10, 15, 20, 25]","for number in numbers:
    print(number*5)"
"You need to group an array of objects according to their property. Output an object containing the grouped items.let array = [ 
    { name: ""John"", type: ""fruit"" }, 
    { name: ""Paul"", type: ""vegetable"" },
    { name: ""Ringo"", type: ""fruit"" } 
]","let groupedItems = {
    fruit: [{name: ""John"", type: ""fruit""}, {name: ""Ringo"", type: ""fruit""}],
    vegetable: [{name: ""Paul"", type: ""vegetable""}]
}"
"You need to prefill an array with a given value.let array = new Array(10);
let val = 'foo'",let prefilledArray = array.fill(val);
Create a script in Python which can generate random numbers in a given range.,"import random

def generate_random_number_in_range(min_value, max_value):
    return random.randint(min_value, max_value)"
"Use regular expression to match all valid URLs in a string.// This is a string containing valid and invalid URLs
let string = 'https://www.example.com/?q=test http://example.org#page http://example.com/# invalid_url'","let urls = string.match(/https?:\/\/(www\.)?([a-zA-Z0-9][-a-zA-Z0-9]+\.)+[a-zA-Z]+(\/[-a-zA-Z0-9_:\@&?=+,.!/~*'\(\)]*)?/g);"
You need to generate an array of strings of length 5 to 10 characters.,"import string
import random

def generate_string_array(length):
    # This function will generate an array of strings
    array_of_strings = []
    for _ in range(length):
        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))
        array_of_strings.append(new_string)
    return array_of_strings"
"Reorder an array of numbers in descending order.let array = [3, 8, 5, 1, 9]","let sortedArray = array.sort((a,b) => b - a);"
You need to run a loop 'n' times and print a value each time.let n = 10;,"for (let i = 0; i < n; i++) {
    console.log(i);
}"
Write code to generate a random six-character string that contains at least one lowercase letter and one number.,"import string
import random

def generate_code():
    chars = string.ascii_lowercase + string.digits
    return ''.join(random.choices(chars, k=6))"
How can we remove all elements of a list that meet a certain condition?,"def remove_condition(lst, condition):
    return [x for x in lst if not condition(x)]"
What is the syntax to create a list of numbers from 0 to n in Python?,"def create_list(n):
    return [i for i in range(n+1)]"
Reverse the order of a list without using the built-in reverse function.,"def reverse_list(lst):
    rev = []
    for x in lst:
        rev.insert(0, x)
    return rev"
How can we check if a given string is a valid IP address or not?,"import re

def isvalid_ip(string):
    regex = r""^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$""
    if re.search(regex, string):
        return True 
    else: 
        return False"
How can we sort a given list of integers in ascending order?,"def sort_list(lst):
    return sorted(lst)"
How can we trim a specified amount of characters from the beginning of a string in Python?,"def trim_string(string, n):
    return string[n:]"
What data structure would be best used to store a phone book?,"A hash table is a suitable data structure to store a phone book as it provides quick and efficient access to stored data via a simple hashing algorithm. This allows for simple lookups of data stored against a key, like a person's name. A hash table also provides quick insertion and deletion of data without impacting the efficiency of searches."
Create a MongoDB query to find all documents where the 'name' field contains the string 'alex'.,"db.collection.find({""name"": {$regex : /alex/i}})"
"Using the data structure created in question 4, write a function to populate the person details.name: John
age: 23
street: 123 Main St
city: New York
state: NY
zip: 10222","def populate_person(name, age, street, city, state, zip):
    person_data['name'] = name
    person_data['age'] = age
    person_data['address']['street'] = street
    person_data['address']['city'] = city
    person_data['address']['state'] = state
    person_data['address']['zip'] = zip"
You need to write a function to find the absolute difference between a number and its reverse.,"def absolute_difference(n):
    num = str(n)
    rev = num[::-1]
    diff = int(num) - int(rev)
    return abs(diff)"
"You need to write a function to find the sum of the squares of even numbers in a given list.list_example = [2, 3, 4, 5]","def sum_of_even_squares(lst):
    sum = 0
    for elem in lst:
        if elem % 2 == 0:
            sum += elem**2
    return sum

total_sum = sum_of_even_squares(list_example) #total_sum is equal to"
Create a script to convert a number in scientific notation into a floatNumber: 6.02e23,"x = float(6.02e23)
print(x) # 6.02E+23"
"What is the Euclidean distance between two points?Two points: (1, 0) and (4, 3)","The Euclidean distance between two points (1, 0) and (4, 3) is 5.0."
What is the Python built-in function to swap two values?,"The Python built-in function to swap two values is the ""tuple unpacking"" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable."
How to generate a random string of a given length in Python?Length: 10,"import random
import string

length = 10

x = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
print(x) # 'sbMTWHmfrh'"
"Write a method to sum up two matricesMatrix A: [[3, 5, 7],
           [1, 6, 9]]
Matrix B: [[4, 8, 2],
           [3, 5, 7]]","def matrix_addition(A, B):
    if len(A) != len(B) or len(A[0]) != len(B[0]):
        return 'Matrices cannot be added!'
    else:
        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]
        for i in range(len(A)):
            for j in range(len(A[0])):
                result[i][j] = A[i][j] + B[i][j]
        return result

A = [[3, 5, 7], [1, 6, 9]]
B = [[4, 8, 2], [3, 5, 7]]

print(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]"
"Who is the author of the book ""Alice in Wonderland""?","The author of the book ""Alice in Wonderland"" is Lewis Carroll."
"Create a Python function that takes one argument as an array of integers and returns the sum of all the integers.[2, 3, 4, 5]","def sum_array(array):
    res = 0
    for i in array:
        res += i
    return res"
"Create an algorithm in Python that sorts an array of n numbers using insertion sort.[5, 3, 2, 4, 1]","def insert_sort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >= 0 and key < arr[j] : 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = key"
"Compute the median of an array of integers in Python.[1, 2, 3, 4, 5]","def median(arr): 
    arr.sort() 
    if (len(arr) % 2 != 0): 
        return arr[len(arr) // 2] 
    else: 
        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0"
Design a class that stores information about a person.,"class Person:
    def __init__(self, first_name, last_name, age, gender):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.gender = gender"
Create a function that takes a string and returns the longest set of characters in descending order.Hello World,"def longest_substring(string):
    longest = ''
    current = ''
    for i in range(len(string)):
        if (i==0 or string[i] >= string[i-1]):
            current += string[i]
            if (len(current) > len(longest)):
                longest = current
        else:
            current = string[i]
    return longest"
"Design an algorithm to find the maximum number from a set of numbersSet of numbers: [24, 5, 40, 15]","# Algorithm

1. Initialize maximum as 0
2. Iterate through each number in the set
  a. if number > maximum:
      i. set maximum as number
3. Return maximum"
Generate a loop that prints odd numbers between 0 to 10.,"for(int i = 0; i <= 10; i++){
    if(i % 2 != 0)
        System.out.println(i);
}"
"Create a program that adds two sets of numbers together.Set 1: [1, 3, 5]
Set 2: [2, 4, 6]","def add_sets(set1, set2):
    result=[]
    for i in range(max(len(set1),len(set2))):
        if i < len(set1):
            result.append(set1[i])
        if i < len(set2):
            result.append(set2[i])
    return result"
Insert this line of code to the third place in the for loop.sum += i,"for i in range(1, n):
    sum += i - 1 
    sum += i
    sum += i + 1"
Create a program that implements a Stack (LIFO) using an array,"class Stack:
    def __init__(self):
        self.stack = []
    
    def push(self, item):
        self.stack.append(item)
    
    def pop(self):
        if self.is_empty():
            return None
        return self.stack.pop()
    
    def is_empty(self):
        return len(self.stack) == 0"
"Generate a list of words that contain the substring ""al"" using Python.","words = [""arrival"", ""essential"", ""animal"", ""pascal"", ""medieval"", ""festival"", ""final"", ""spirited"", ""downfall"", ""functional"", ""locational"", ""fundamental""]"
"Modify the following code to make it work with big integers.def multiply(x, y):
    return x * y","def multiply(x, y):
    return int(x) * int(y)"
Implement an efficient sorting algorithm in Python.,"def sort(arr): 
    if len(arr) == 0: 
        return [] 
    else: 
        pivot = arr[0] 
        lesser = sort([x for x in arr[1:] if x < pivot])
        greater = sort([x for x in arr[1:] if x >= pivot])
        return lesser + [pivot] + greater"
"Given an array of integers, write a function to determine whether the array is a palindrome.array = [1,2,3,2,1]","def isPalindrome(array): 
    return array == array[::-1]  # reversed array"
Compute the absolute value of a given number.x = -2,"absX = abs(x)
print(""Absolute value of"", x, ""is"", absX)"
Convert a natural number to its binary representation.n = 4,"bin_n = bin(n)
print(bin_n) # Returns 0b100"
Determine whether a given number is divisible by 3.n = 15,"if n % 3 == 0:
    print(str(n) + "" is divisible by 3."")
else:
    print(str(n) + "" is not divisible by 3."")"
"Search for the index of a given element in a given array.array = [1,2,3,4,5]
element = 3","index = array.index(element)
print(""Index of the element"", element, ""is"", index)"
"Refactor this code to use the built-in functions.def find_odd(array):
    is_odd = False
    for element in array:
        if element % 2 == 1:
            is_odd = True
            break
    return is_odd","def find_odd(array):
    return any(element % 2 == 1 for element in array)"
Write a Python program to generate a dictionary that contains a number (x) of random numbers.x = 10,"import random

random_numbers = {} 
  
for i in range(x + 1): 
    n = random.randint(1, 50) 
      
    random_numbers[i+1] = n
      
print(random_numbers)"
"Reverse the order of words in a given sentence.sentence = ""This is Python Language""","words = sentence.split("" "") 
   
reverse_sentence = ' '.join(reversed(words)) 
   
print(reverse_sentence)"
"Using the provided data structure, create a class in Python to represent a car.car = { 
    ""make"": ""Honda"", 
    ""model"": ""Civic"", 
    ""year"": 2011
}","class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
    
    def __str__(self):
        return f""{self.make} {self.model} ({self.year})"""
"Using the provided objects and classes, write a code snippet in Python to implement polymorphism.class Animal:
  def sound(self):
    pass

class Cat(Animal):
  def sound(self):
    print(""Meow"")

class Dog(Animal):
  def sound(self):
    print(""Bark"")","def make_sound(animal):
  animal.sound()
  
make_sound(Cat())  #Prints ""Meow""
make_sound(Dog())  #Prints ""Bark"""
What is the time complexity of the Bubble Sort algorithm?,The time complexity of Bubble Sort is O(n^2).
"Write a code snippet to replace the given character in a string with another given character.str = ""This is a string""
old_char = 's'
new_char = 'x'","str = str.replace(old_char, new_char)"
"Create a Python class for a student that holds their name, age and grade.","class Student:
 def __init__(self, name, age, grade):
  self.name = name
  self.age = age
  self.grade = grade

def get_student_info(self):
  return (f""{self.name}, {self.age}, {self.grade}"")"
"You need to create a function that takes a character as input and prints out all words from a given dictionary that start with the given character.dictionary = [""apple"", ""ball"", ""cat"", ""dog""]
character = 'd'","def search_dictionary(dictionary, character):
    result = []
    for word in dictionary:
        if word[0] == character:
            result.append(word)
    return result"
You need to remove duplicates from a list while preserving the order of the items.,"def remove_duplicates(list):
    output = []
    seen = set()
    for i in list:
        if i not in seen:
            seen.add(i)
            output.append(i)
        return output"
You need to write a program to convert a given number to its binary representation.,"def binary_representation(num):
  if num > 1:
    binary_representation(num//2)
  print(num % 2, end = '')"
You need to convert any given number to its octal representation.,"def octal_representation(num):
    output = """"
    while num > 0:
        output = str(num % 8) + output
        num //= 8
    return output"
You need to create a regex (regular expression) to check if a given string contains a given substring.,"import re

def check_substring(string, substring):
    pattern = r"".*""+substring+"".*""
    if re.match(pattern, string):
        return True
    else:
        return False"
"Write a python code to concatenate two strings and reverse the result.string1 = ""Hello""
string2 = ""World""","res = string1+string2
res = res[::-1] 
print(res)"
Translate the following sentence into binary language.This is a great day.,01010100 01101000 01101001 01110011 00100000 01101001 01110011 00100000 01100001 00100000 01100111 01110101 01110100 01100101 01110011 00100000 01100100 01100001 01110100 00100001
Design a regular expression for validating email address.,^[a-z0-9]+@[a-z]+\.[a-z]+$
"Upon user entry, filter the array of objects to find the relevant object.const array = [
{name:""John"", age: 20}, 
{name:""Jane"", age: 21}, 
{name:""Jim"", age: 22}, 
]","function filterArray(userInput) {
  return array.filter(item => item.name === userInput);
}"
Define a class in Python that takes a string and returns the length of the string.,"class StringLength:
  def __init__(self, string):
    self.string = string

  def getLength(self):
    return len(self.string)"
Create a program in Assembly that adds two numbers and prints the result.,".data

number1: .word 10
number2: .word 20

.text

main:
	ADD word [number1], [number2] 
	MOV EAX, 0 
	MOV EBX, 0 
	PUSH [number1] 
	MOV EAX, [number1] 
	 ADD EBX, EAX
	POP EAX 
	PRINT num1 
	PRINT num2 
	PRINT result 

	HALT"
"Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical orderToBeOrNotToBe","inp =raw_input(""Enter String:"")
my_dict = {}
for character in inp:
     if character not in my_dict:
         my_dict[character] = 1
     else:
         my_dict[character] += 1

sorted_order = sorted(my_dict.items(), key=lambda x: x[0])

print(""Sorted Dictionary"")
for character in sorted_order:
    print(""{} : {}"".format(character[0], character[1]))"
"Create a program that takes no input and prints out the phrase ""Hello World"".","print(""Hello World"")"
"Use a for loop to add up all odd elements in a listlist=[4,5,7,9,11,3]","odd_total = 0
for element in list:
    if element % 2 != 0:
        odd_total += element
print(odd_total) # Prints 25"
"Generate code to find the maximum element from a given listlist=[-2, 12, 3, 0, -5]","def find_max(list):
    max_element = float('-inf')
    for element in list:
        if element > max_element:
            max_element = element
    return max_element

print(find_max(list)) # Prints 12"
"Remove all duplicates from this list using Pythonlist=[5,5,5,7,8,8,9]","list=[5,7,8,9]

list = list(dict.fromkeys(list))"
"Edit this code so it prints the sum of the increasing odd numbers from 10 to 50total = 0
for num in range(10, 50):
    if num % 2 == 0:
        total += num","total = 0
for num in range(10, 50, 2):
    total += num"
"Print the following statements in a sorted orderI am learning Python
I am learning Java","I am learning Java
I am learning Python"
"Edit the code to produce the output of the following matrix multiplicationX = [[2, 3, 9],
     [8, 7, 6],
     [1, 6, 4]]
Y = [[9, 4, 5],
     [7, 3, 3],
     [2, 1, 5]]","X = [[2, 3, 9],
     [8, 7, 6],
     [1, 6, 4]]
Y = [[9, 4, 5],
     [7, 3, 3],
     [2, 1, 5]]

def mat_mult(X, Y):
    result = [[0, 0, 0],
              [0, 0, 0],
              [0, 0, 0]]
    for i in range(len(X)):
        for j in range(len(Y[0])):
            for k in range(len(Y)):
                result[i][j] += X[i][k] * Y[k][j]
    return result"
Write a Python program to generate a 3x3 Identity matrix,"def generate_identity_matrix():
    matrix = [[0, 0, 0],
              [0, 0, 0],
              [0, 0, 0]]

    for i in range(len(matrix)):
        for j in range(len(matrix)):
            if i == j:
                matrix[i][j] = 1
            else:
                matrix[i][j] = 0
    
    return matrix"
"Write a function that takes a two-dimensional array and returns its transpose.arr = [[1,2,3], [4,5,6], [7,8,9]]","def transpose(arr):
    transpose_arr = [[0] *len(arr) for _ in range(len(arr[0]))]
    for row in range(len(arr)):
        for col in range(len(arr[0])):
            transpose_arr[col][row] = arr[row][col]
    return transpose_arr"
Write a function to reverse an integer.x = 12345,"def reverse_integer(x):
    rev_int = 0
    while x > 0:
        rev_int = rev_int * 10 + (x % 10)
        x //= 10
    return rev_int"
Write a function to simulate a dice roll.,"import random

def roll_dice():
    return random.randint(1, 6)"
Develop a JS snippet to display the elements in an ordered list.,"let list = document.getElementById('list');
list.innerHTML = '';
list.appendChild(document.createElement('ul'));
for (let i = 0; i < elements.length; i++) {
    list.firstChild.appendChild(document.createElement('li')).innerHTML = elements[i];
}"
What is the most important concept in object-oriented programming?,"The most important concept in object-oriented programming is encapsulation, which refers to the process of packaging related data and functionality together in an object. Encapsulation provides a high degree of abstraction and modularity, allowing developers to manage complexity and reduce the dependencies between various classes of objects."
"Create a switch statement to convert a string input to its corresponding enumerated type.Input: ""Red"", ""Blue"", ""Green"", ""Yellow""","enum Color {
    Red,
    Blue,
    Green,
    Yellow
};

Color color;
std::string str = ""Red"";
switch (str) {
    case ""Red"":
        color = Color::Red;
        break;
    case ""Blue"":
        color = Color::Blue;
        break;
    case ""Green"":
        color = Color::Green;
        break;
    case ""Yellow"":
        color = Color::Yellow;
        break;
    default:
        color = Color::Red;
        break;
}"
"Write a script to calculate the sum of two numbers stored in variables.var x = 4; 
var y = 10;","function sum(x,y) {
  return x + y;
}

console.log(sum(x,y));"
"Create a function to evaluate a given expression written in infix notation.exp = ""5 + (7 * 8) / 3""","def eval_exp(exp): 
    stack = [] 
  
    for char in exp: 
        if char in ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" or char in ""0123456789"": 
            stack.append(char)
  
        else: 
            val1 = stack.pop() 
            val2 = stack.pop() 
            stack.append(str(eval(val2 + char + val1))) 
  
    return int(stack.pop()) 

print(eval_exp(exp))"
"Edit the following code to include user input.def hello_world():
    # Prints ""Hello, World!""
    print(""Hello, World!"")","def hello_world():
    # Prompt user for input
    user_input = input(""Please enter your name: "")

    # Prints ""Hello, {user_input}!""
    print(""Hello, {}!"".format(user_input))"
"Go through the following code and create test cases for it.def reverse_string(string):
  rev_str = """"

  # Loop through the string in reverse order
  for i in range(len(string)-1, -1, -1):
    rev_str += string[i]

  return rev_str","import unittest

class ReverseStringTests(unittest.TestCase):
    def test_reverse_string_with_single_character_string(self):
        result = reverse_string(""a"")
        self.assertEqual(result, ""a"")

    def test_reverse_string_with_even_length_string(self):
        result = reverse_string(""hello"")
        self.assertEqual(result, ""olleh"")

    def test_reverse_string_with_odd_length_string(self):
        result = reverse_string(""world"")
        self.assertEqual(result, ""dlrow"")


if __name__ == '_main_':
unittest.main()"
Edit the following code so it prints out a message when the condition is true.if condition:,"if condition:
    print(""Condition is true!"")"
"Write a function that takes in two arrays of integers and returns the sum of the elements in both arrays.array1 = [1, 2, 3] 
array2 = [4, 5, 6]","def sum_arrays(arr1, arr2):
    sums = []
    for i in range(len(arr1)):
        sums.append(arr1[i] + arr2[i])
    return sums"
"Create a function in Python that takes in a string and returns a list of all unique characters in it.string = ""banana""","def unique_chars(string): 
    char_list = [] 
    for char in string: 
        if(char not in char_list): 
            char_list.append(char) 
    return char_list"
"Go through the following code and make sure there is an appropriate return statement at the end.def add_two_numbers(num1, num2):
    num3 = num1 + num2
    print(num3)","def add_two_numbers(num1, num2):
    num3 = num1 + num2
    print(num3)
    return num3"
Write a function in Go that takes in a number and returns true if it is a prime number.$num = 13,"func isPrime(num int) bool {
	if num <= 1 {
		return false
	}

	for i := 2; i*i <= num; i++ {
		if num%i == 0 {
			return false
		}
	}

	return true
}"
Modify the program to take input from the user and create a two-dimensional array in Python.,"rows, cols = (int(x) for x in input(""Enter size of 2D array: "").split())
arr = [[None for x in range(cols)] for y in range(rows)]
for i in range(rows):
    for j in range(cols):
        arr[i][j] = int(input(""Enter element: ""))"
Describe how LSTMs are used to predict time-series data.,"Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection."
Create a function that appends the input string to a given array.find the string “hello world”,"def append(array, string):  
    array.append(string) 
    return array 

array = [] 
string = ""hello world""
append(array, string) 
 
# Output 
array = ['hello world']"
Write a regex to detect valid email addresses.,"^(([^<>()\[\]\\.,;:\s@""]+(\.[^<>()\[\]\\.,;:\s@""]+)*)|("".+""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$"
"What is the syntax to print out the following string?string = ""Hello World!""",print(string)
What is the correct syntax to prompt and save a user's input?,"name = input(""What is your name? "")"
Describe the difference between the 'break' and 'continue' keywords in Python.,"The 'break' keyword is used to end a loop and exit the loop, whereas the 'continue' keyword is used to skip the current iteration and continue with the next iteration."
Make a class that creates a list and has a maximum length.,"class LimitedList:
    def __init__ (self, max_len):
        self.max_len = max_len
        self.items = []

    def add(self, item):
        if len(self.items) < self.max_len:
            self.items.append(item)
        else:
            self.items.pop(0)
            self.items.append(item)

    def get_list(self):
        return self.items"
"Write a function to compare two lists of objects and return true if the objects in both lists are the same.list1 = [{'id': 1, 'name': 'John'}, {'id': 3, 'name': 'Sara'}]
list2 = [{'id': 1, 'name': 'John'}, {'id': 3, 'name': 'Sara'}]","def compare_lists(list1, list2):
    return list1==list2"
"Create a list comprehension for a given list that only contains odd numbers.[1, 2, 3, 4, 5, 6, 7, 8]","odd_nums = [num for num in [1, 2, 3, 4, 5, 6, 7, 8] if num % 2 != 0 ]"
"Convert a given list to a dictionary with items as keys and their corresponding position in the list as values.[‘a’, ‘b’, ‘c’, ‘d’]","def list_to_dict(lst):
    return {k: v for v, k in enumerate(lst)}"
"Calculate the sum of squared differences between every number in a list and the mean of the list.[1, 2, 3, 4]","def sum_squared_diffs(nums):
    mean = sum(nums) / len(nums)
    return sum((num - mean)**2 for num in nums)"
"Create a class that has 3 methods. The first method should multiply two numbers, the second should add two numbers, and the third should calculate the modulus of two numbers.","class Calculator:
    def multiply(self, num1, num2):
        return num1 * num2
        
    def add(self, num1, num2):
        return num1 + num2
        
    def modulus(self, num1, num2):
        return num1 % num2"
Write a regular expression to find all the email addresses in a given text.,"regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"""
Name four different types of sorting algorithms.,"The four different types of sorting algorithms are Selection sort, Bubble sort, Insertion sort and Merge sort."
How can you find the sum of all numbers in a list?,"The sum of all numbers in a list can be found by using the ""sum()"" function."
"Create a function to print out words that include the letter ""e"" from a given list of strings.mylist = [""hello"", ""world"", ""fire"", ""feline""]","def print_words_with_e(mylist):
 for word in mylist:
  if 'e' in word:
   print(word)

print_words_with_e(mylist)

#Output: 
hello
fire
feline"
"Manipulate a given list of strings to capitalize the first letter in each string.mylist = [""this"", ""is"", ""a"", ""list""]","def capitalize(mylist):
  new_list = []
  
  for item in mylist:
    new_list.append(item.capitalize())
  
  return new_list

print(capitalize(mylist))

#Output:
['This', 'Is', 'A', 'List']"
"Use the zip function to combine two lists by index.list1 = [1, 2, 3]
list2 = [4, 5, 6]","list3 = list(zip(list1, list2))

#Output:
list3 = [(1, 4), (2, 5), (3, 6)]"
"Generate a correct Python code to turn a list of strings into a list of their lengths.mylist = [""hello"", ""world"", ""fire"", ""feline""]","length_list = [len(x) for x in mylist]

#Output:
length_list = [5, 5, 4, 6]"
"Find the most common element in a list of strings.mylist = [""red"", ""blue"", ""red"", ""green"", ""green"", ""red""]","def most_common_element(mylist):
    count = 0
    common = None

    for i in mylist:
        curr_count = mylist.count(i)
        if curr_count > count:
            common = i
            count = curr_count
    return common

print(most_common_element(mylist))

#Output:
red"
"Find all the occurrences of the word ""the"" in the following text.The quick brown fox jumps over the lazy dog.","The word ""the"" occurs 2 times in the text."
Create a method in Python to generate all the prime numbers between 1 and 100.,"def prime_generator(n):
    primes = []
    for i in range(2, n+1):
        is_prime = True
        for j in range(2, i):
            if i%j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

print(prime_generator(100))"
"Use this data to predict the weather for the next week.Current temperature: 34 degrees
Humidity: 66%
Precipitation chance: 30%","The weather for the next week is predicted to be warm and mostly dry, with only a slight chance of rain scattered throughout the week. Temperatures will remain around the 34 degree mark, and humidity levels should stay fairly moderate, around 66%."
"Change this code so that it uses an appropriate data structure.x = 0 
y = 0","coordinates = (0,0)"
"What type of data structure is this?array = [1, 2, 3, 4, 5]",This is an array data structure.
"Using the input, create a function to calculate the average of the set.nums = [1, 2, 3, 4, 5]","def avg_nums(nums):
  total = 0
  for num in nums:
    total += num
  avg = total / len(nums)
  return avg

print(avg_nums([1, 2, 3, 4, 5]))

# Output: 3.0"
"Given an array of integers, find the maximum value.arr = [8, 1, 2, -1, 4, 9]",int max_value = arr.Max(); // 9
Create a data visualization comparing the population of California and New York.,"import matplotlib.pyplot as plt 
  
# X axis values 
x = ['California', 'New York'] 
# Y axis values 
pop = [39.56, 19.45] 
  
# plotting bars  
plt.bar(x, pop) 
  
# Naming the x-axis 
plt.xlabel('State') 
# naming the y-axis 
plt.ylabel('Population') 
  
# giving a title to the figure 
plt.title('California vs. New York Population') 
  
# function to show the plot 
plt.show()"
Develop a Chatbot that can respond to the user's queries about programming languages.,"def chatbot():
    while True: 
        # User's query 
        query = input(""What would you like to know about programming languages? "")

        # Checking if query is relevant 
        if ""language"" in query:
            # Provide response 
            print(""There are many different programming languages, and these can range from low-level languages such as assembly, to high-level languages such as Python and Java."")
        else: 
            # Provide different response for irrelevant query 
            print(""I'm sorry, I don't understand your query. Please ask me something else."")"
"Given a sentence, clean up any duplicate words.My favorite favorite food is pizza.",my favorite food is pizza.
"Given two strings, find the longest common substring between them.s1 = ""Hello, world!""
s2 = ""world, goodbye!""","def longest_substring(s1, s2):
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
            if s1[x - 1] == s2[y - 1]:
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else:
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]

s1 = ""Hello, world!""
s2 = ""world, goodbye!""
print(longest_substring(s1, s2))

# Output: world"
Implement an autocomplete feature for an input field.,"input_field.addEventListener(""input"", function(e) {
    // Fetch the input value 
    var inputValue = e.target.value;

    // Check the input value matches one from our list 
    if (list.includes(inputValue)) {
        // If so, complete it 
        input_field.value = inputValue;
    }
});"
"Given a string and a number, print the string the number of times specified by the number.str = ""Hello""
num = 3",console.log(str.repeat(num)); // HelloHelloHello
Use a RegEx function to identify all the words that contain at least 7 characters in a given sentence.Sentence: This is a sample sentence to test.,"import re
pattern = r""\b\w{7,}\b""

sentence = ""This is a sample sentence to test""
matches = re.findall(pattern, sentence)
 
print(matches)"
"Write a Python script to display the number of days between two given dates.Date 1: 21 May 2020
Date 2: 13 June 2020","import datetime 
start_date = datetime.date(2020, 5, 21)
end_date = datetime.date(2020, 6, 13)
delta = end_date - start_date
print(""Number of days between two dates:"", delta.days)"
Generate input data for a convolutional neural network (CNN).The CNN will classify objects in an image.,"Input data should include an image dataset of the objects to be classified. Each image should contain its corresponding label. Image labels can be one-hot encoded. The dataset should be split into separate training, validation and test datasets."
"Edit the given data to ensure data integrity.Given data:
Name	Location
John   US
Julia  Germany","Name	Location
John   United States
Julia  Germany"
Describe the concept of text mining.,"Text mining is the process of extracting valuable information from textual data, typically through the application of natural language processing and machine learning algorithms. Text mining can identify hidden patterns and relationships in text, including key words, topics, and complex themes, by analyzing sentence structure, co-occurrences, metaphors and other characteristics of natural language."
"Employ an algorithm to predict the customer churn rate.A dataset containing customer data such as demographics, spending patterns, customer lifetime value and customer satisfaction.","A supervised learning algorithm can be employed to predict customer churn rate. This will involve training the algorithm on the customer dataset, by providing features such as customer age, spending pattern, customer lifetime value and customer satisfaction, as well as a target the algorithm should learn from. The trained model can then be used to predict customer churn rate."
"Implement a sorting algorithm in Python for the given data.Data: [4, 2, 3, 8, 1]","def sort_data(data):
    for i in range(len(data)):
        min_index = i
        for j in range(i+1, len(data)):
            if data[min_index] > data[j]:
                min_index = j
        data[i], data[min_index] = data[min_index], data[i]
       
    return data"
"Using the given dataset, generate a tree chart visualization.Dataset:
Name	Category
John   A
Kate   B
Jake   B","A
- John
B
- Kate
- Jake"
"Given the following Python code, generate a function that will print the first 5 elements of a list.my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","def print_first_five(my_list):
    """"""This function prints the first five elements of a list.""""""
    print(my_list[:5])"
"Sort an array of integers in ascending order without using the built-in sort() function.my_array = [1, 6, 9, 5, 8, 10, 4, 2, 7, 3]","def sort_ascending(my_array):
    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''
    n = len(my_array)
    for i in range(n):
        for j in range(0, n-i-1):
            if my_array[j] > my_array[j+1]:
                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]
    return my_array"
Create a class named Person.,"class Person:
    '''This class represents a person with a name and age.'''
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Create a function that takes in two variables and checks if they have the same type.,"def type_checker(x, y):
    '''This function takes in two variables and checks if they have the same type.'''
    return type(x) == type(y)"
Create a function that takes in a number and returns all the prime factors.num = 30,"def prime_factorize(num):
    '''This function takes in a number and returns all the prime factors.'''
    primes = []
    i = 2
    while i * i <= num:
        while num % i == 0:
            primes.append(i)
            num //= i
        i += 1
    if num > 1:
        primes.append(num)
    return primes"
Create a function which will take in a string and returns a string in reverse order.,"def reverse_string(s):
    '''This function takes in a string and returns a string in reverse order.'''
    return s[::-1]"
"Analyze a provided string of characters and return the number of occurrences of each character.input_string = ""HelloWorld""","def analyze_string(input_string):
    '''This function analyzes a provided string of characters and 
    returns the number of occurrences of each character.'''
    dict_count = {}
    for char in input_string:
        if char in dict_count:
            dict_count[char] += 1
        else:
            dict_count[char] = 1
    return dict_count"
Calculate the value of the following expression: 2 to the power of 5.,"def calculate_expression(expression):
    '''This function calculates a given expression.'''
    return eval(expression)"
"Write a function which will take an array as an argument and return an object with the keys being the elements of the array and the values being their counts.my_array = [1, 2, 2, 3]","def count_elements(my_array):
    '''This function takes an array as an argument and returns an object with the 
    keys being the elements of the array and the values being their counts.'''
    counts = {}
    for element in my_array:
        if element in counts:
            counts[element] += 1
        else:
            counts[element] = 1
    return counts"
Create a function that takes in a positive integer up to 1000 and prints out its prime factorization.num = 17,"def prime_factorization(num):
    '''This function takes in a positive integer and prints out its prime factorization.'''
    factors = []
    dividend = num
    divisor = 2
    while divisor <= dividend:
        if dividend % divisor == 0:
            factors.append(divisor)
            dividend //= divisor
        else:
            divisor += 1
    return factors"
Create a function for splitting a string into an array of characters.,"def split_string_to_chars(string):
    '''This function takes a string and splits it into an array of characters.'''
    return list(string)"
"Write a function which will take an array of integers and returns an array with no repeated elements.my_array = [1, 2, 3, 2, 4, 6, 1, 2]","def remove_duplicates(my_array):
    '''This function takes an array of integers and returns an array with no repeated elements.'''
    return list(set(my_array))"
Create a regular expression to match numbers between 10 and 100,"[1-9]\d{1,2}"
What is the maximum value a 32-bit signed integer can represent?,2147483647
Normalize the following URLhttp://www.facebook.com/profile/pages?,http://www.facebook.com/profile/pages
"Convert the following string ""Hello World!"" to an integer.""Hello World!""",101946
"Given the following code snippet, rewrite it using for loop.let counter = 0
while (counter < 10) {
  console.log(counter);
  counter++;
}","for(let counter = 0; counter < 10; counter++) {
  console.log(counter);
}"
Create a function to calculate the sum of all the even numbers between 20 and 100.,"const calculateSum = (start, end) => {
  let sum = 0;
  for (let i = start; i <= end; i++) {
    if (i % 2 === 0) sum += i
  }
  return sum;
}

calculateSum(20, 100); // 1890"
"Write an array filter to remove any element with the value 0.[0,1,2,3,4,0,6]","const result = arr.filter(item => item !== 0); // result will be [1,2,3,4,6]"
Create a Python class to represent a 3 x 3 matrix with variable values.,"class Matrix:
    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):
        self.matrix = [[a00, a01, a02],
                        [a10, a11, a12],
                        [a20, a21, a22]]
    
    def __str__(self):
        return str(self.matrix)"
"Write a JS function to make an API request.const URL = ""https://example.com/api""","function makeRequest(url) {
    return fetch(url).then(response => response.json());
}

makeRequest(URL);"
Design a Python class to represent a rectangle with a length and width attribute.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    
    def get_area(self):
        return self.length*self.width"
Design a Python class to represent a 3 x 3 chess board.,"class ChessBoard:
    def __init__(self):
        self.board = [
            [""a1"",""b1"",""c1""],
            [""a2"",""b2"",""c2""],
            [""a3"",""b3"",""c3""]
        ]

    def __str__(self):
        board_string = """"
        for row in self.board:
            for col in row:
                board_string += col + "" ""
            board_string += ""\n""
        return board_string"
Design a Python class to represent a user with fields name and age.,"class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age"
Write a function that takes two strings and returns a boolean value indicating whether the two strings are anagrams or not.,"def anagram(s1, s2):
    
    # Strip whitespaces and convert to lowercase
    s1 = s1.replace(' ', '').lower()
    s2 = s2.replace(' ', '').lower()
    
    # Return boolean indicating anagram status
    return sorted(s1) == sorted(s2)

if __name__ == '__main__':
    print(anagram('tea', 'eat')) 
    # should print True"
Categorize the following text into its corresponding sentimentThe newest addition to the concert line-up is incredibly disappointing.,Negative sentiment.
"Create a function that takes two lists and returns a dictionary with the elements of each list as keys.list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]","def create_dictionary(list1, list2):
    """"""
    Function to create a dictionary with two lists
    """"""
    return {list1[i]: list2[i] for i in range(len(list1))}
    
if __name__ == '__main__':
    list1 = ['a', 'b', 'c']
    list2 = [1, 2, 3]
    print(create_dictionary(list1, list2))
    # should print {'a': 1, 'b': 2, 'c': 3}"
"Calculate the area of a triangle given the coordinates of its three vertices.x1 = 1
y1 = 5
x2 = 4
y2 = 3
x3 = 7
y3 = 2","def calculate_triangle_area(x1, y1, x2, y2, x3, y3):
    """"""
    Function to calculate the area of a triangle given the coordinates of its 3 vertices
    """"""
    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5
    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5
    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5
    s = (a + b + c) / 2
    return ((s*(s-a)*(s-b)*(s-c))**0.5)
    
if __name__ == ""__main__"":
    x1 = 1
    y1 = 5
    x2 = 4
    y2 = 3
    x3 = 7
    y3 = 2
    print(calculate_triangle_area(x1, y1, x2, y2, x3, y3))
    # should print 4.24"
"Build a neural network using Pythonimport numpy as np

# Sample data
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([[0, 1, 1, 0]]).T","import keras

# Create a neural network
model = keras.Sequential([
    keras.layers.Dense(2, activation='sigmoid'),
    keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X, y, epochs=1000)"
"Merge two dictionaries into another dictionarydict1 = {'a':1, 'b':2}
dict2 = {'c':3, 'd':4}","def merge(dict1, dict2):
    """"""
    Function to merge two dictionaries
    """"""
    return {**dict1, **dict2}

if __name__ == '__main__':
    dict1 = {'a':1, 'b':2}
    dict2 = {'c':3, 'd':4}
    print(merge(dict1, dict2))
    # should print {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
Generate all possible permutations of the characters in a given string,"def permutations(string):
    """"""
    Function to generate all possible permutations of a given string
    """"""
    if len(string) == 0:
        return ['']
    prev_list = permutations(string[1:len(string)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(string)):
            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]
            if new_string not in next_list:
                next_list.append(new_string)
    return next_list

if __name__ == '__main__':
    string = 'abcd'
    print(permutations(string))
    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']"
Develop a function in Python to convert a temperature in Celsius to Fahrenheit.Temperature in Celsius: 30,"def celsius_to_fahrenheit(celsius):
    return (celsius * 1.8) + 32

print(celsius_to_fahrenheit(30))"
Create a program in Python to generate a random number in the range from 0 to 10.,"import random 

print(random.randint(0, 10))"
"Create a function in Python that will print out a random word from a given list.words_list = ['cat', 'dog', 'ball', 'toy']","import random

def random_word(words_list):
    word = random.choice(words_list)
    print(word)

random_word(words_list)"
Write a code to generate an array of 10 random integers in the range 0-99.,"import random
 
def random_int_array(num):
    array = []
    for i in range(num):
        num = random.randint(0, 99)
        array.append(num)
    return array

print(random_int_array(10))"
"Construct a list in Python that contains the names of the months in order, starting with January.","months = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""]"
"Create a function in Python to generate all possible strings of length k from given lowercase characters.set = {'a', 'b', 'c'}
k = 3","def generate_strings(set, k): 
	strings = [] 
	n = len(set) 
	
	def generate_strings_recur(sub, count): 
		
		# Base cases 
		if count == 0 : 
			strings.append(sub) 
			return
		
		for i in range(n): 
			
			# Next character of string to be 
			# formed 
			new_sub = sub + set[i] 
			
			# Recursion call 
			generate_strings_recur(new_sub, 
								count-1) 
	
	count = k 
	sub = """" 
	
	# Call to generate all strings of length k 
	generate_strings_recur(sub, count) 
	
	return strings"
"You need to edit the given code for sorting. Make the array sort in descending order.arr = [3, 5, 8, 9, 10]","def quick_sort(arr): 
    if len(arr) <= 1:
        return arr
  
    pivot = arr[-1]
    lesser_elements = [i for i in arr[:-1] if i <= pivot]
    greater_elements = [i for i in arr[:-1] if i > pivot]
    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)"
You need to find the area of a given circle with the formula: Area = pi * r * rr = 5,"const PI = 3.14;
const r = 5;

const area = PI * r * r;

console.log(area);"
"Edit the statements given below so that they can be compiled and run without any errors.public class Test {
    public static void main(String[] args) {
    System.out.println(""Hello World"");
    int x;
    System.out.println(x);
    }
}","public class Test {
    public static void main(String[] args) {
    System.out.println(""Hello World"");
    int x = 0;
    System.out.println(x);
    }
}"
"Implement a function that calculates the sum of n numbers.numbers = [1,2,3,4]","def sum_n_numbers(numbers):
    '''This function returns the sum of n numbers'''
    total = 0
    for n in numbers:
        total += n
    return total"
"Convert a given string to the CamelCase format.string = ""this is a string""","def to_camel_case(string):
    '''This function converts a given string to the CamelCase format'''
    res = """"
    for word in string.split():
        res += word[0].upper() + word[1:]
    return res"
"Create a Python script that shows the frequency of words in a given text.text = ""Hello, this is a sentence.""","def calc_word_freq(text):
    '''This function calculates word frequency in a given text'''
    word_freq = {}
    for word in text.split():
        if word in word_freq:
            word_freq[word] += 1
        else:
            word_freq[word] = 1

    for word,freq in word_freq.items():
        print(f'{word} - {freq}')"
"Create a Python program that compares two given lists to check if they have any common element.list1 = [1,2,3]
list2 = [4,5,6]","def compare_lists(list1, list2):
    '''This function checks if two lists have any common element'''
    found_common = False
    
    for x in list1:
        if x in list2:
            found_common = True
            break
    return found_common"
Create a Python class that encodes a given number using the Base58 algorithm.number = 123456789,"class Base58Encoder:
    '''This class encodes numbers using the Base58 algorithm'''
    def __init__(self,number):
        self.number = number

    def encode(self):
        encoded = """" 
        alphabet = ""123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz""
    
        while self.number > 0:
            remainder = self.number % 58 
            self.number = self.number // 58 
            encoded = alphabet[remainder] + encoded 
    
        return encoded"
"Using the given array of integers, calculate the mean and output the result.[7, 4, 5, 9]",The mean of the given array is 6.5.
"Write a Python script that reads in a string and checks if it is a palindrome.""Radar""",The given string is a palindrome.
"Create a Python program that prints out a given list of numbers in reverse order.[1, 2, 3, 4, 5]","for i in range(len(list) - 1, -1, -1):
    print(list[i])"
"Change the code to allow two parameters to be passed.function sum(a) {
  return a;
}","function sum(a, b) {
  return a + b;
}"
Describe the difference between a loop and a conditional statement.,"A loop is a set of instructions that is execute repeatedly until a certain condition is met. A conditional statement is an instruction that is used to check a condition, and if the condition is true, it will execute certain code. Loops can be used to execute a block of code multiple times, while a conditional statement can be used to choose between different blocks of code."
Write an algorithm to sort a list of numbers from least to greatest.,"def sort_list(mylist):
    for i in range(len(mylist)):
        min_idx = i
        for j in range(i+1, len(mylist)):
            if mylist[min_idx] > mylist[j]:
                min_idx = j
        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]
    return mylist"
What are the three main principles of OOP?,"The three main principles of Object Oriented Programming (OOP) are encapsulation, inheritance, and polymorphism. Encapsulation is the process of wrapping data and functions together into one unit. Inheritance is the process of allowing a class to inherit the properties and behavior of a parent class. Polymorphism is the ability to define multiple versions of the same function or object depending on the context in which they are used."
Write an algorithm to print the first 10 natural numbers.,"""""""
Write an algorithm to print the first 10 natural numbers
""""""
for i in range(1, 11):
    print(i)"
Construct a dialogue bot using natural language processing techniques.`<code>Hello!</code>`,"""""""
Construct a dialogue bot using natural language processing techniques
""""""
import nltk

# Define a simple set of rules to respond to the user's input
def respond(input):
	if input == ""hello"" or input == ""hi"":
		return(""Hello. How can I help you today?"")
	elif input == ""goodbye"":
		return(""Goodbye! Have a nice day."")
	else:
		return(""I'm sorry, I don't understand what you said."")

# Tokenize the input string and call the respond function
def chatbot(input_string):
	tokens = nltk.word_tokenize(input_string)
	response = respond(' '.join(tokens))
	return response

if __name__ == '__main__':
	print(chatbot(""Hello!""))"
"Create an algorithm to search for a substring in a given string.`<code>'Hello World!', substring = 'll'</code>`","""""""
Create an algorithm to search for a substring in a given string
""""""
def search(string, substring):
    for i in range(len(string)):
        if string[i: i + len(substring)] == substring:
            return True
    return False

if __name__ == '__main__':
    print(search('Hello World!', 'll'))"
"Construct an algorithm to find the longest common prefix string amongst an array of strings.`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>`","""""""
Construct an algorithm to find the longest common prefix string amongst an array of strings
""""""
def longest_common_prefix(strs):
    prefix = strs[0]
    i = 0
    while i < len(prefix):
        for string in strs:
            if i >= len(string) or string[i] != prefix[i]:
                return prefix[0:i]
        i += 1
    return prefix

if __name__ == '__main__':
    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))"
Construct a program to print the Pyramid pattern using asterisks.,"""""""
Construct a program to print the Pyramid pattern using asterisks
""""""
for i in range(0, 5):
    for j in range(0, i+1):
        print(""*"", end="""")
    print()"
"Construct a function to set up a dictionary with words and corresponding counts of occurrences of each word.`<code>'hey hey hello hello hell oh hello',</code>`","""""""
Construct a function to set up a dictionary with words and corresponding counts of occurrences of each word
""""""
def word_count(string):
    word_dict = {}
    for word in string.split():
        if word in word_dict:
            word_dict[word] += 1
        else:
            word_dict[word] = 1

    return word_dict

if __name__ == '__main__':
    print(word_count('hey hey hello hello hell oh hello'))"
Create a class in Python called 'Rectangle' to store the coordinates of a rectangle.,"class Rectangle: 
    def __init__(self, x1, y1, x2, y2): 
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
  
    def get_coordinates(self): 
        return (self.x1, self.y1, self.x2, self.y2)"
Write a function in Haskell that takes two strings as arguments and returns them in reverse order.,"reverseOrder :: String -> String -> String
reverseOrder x y = y ++ x"
"Write an assembly code to calculate the sum of a series of numbers.Series of numbers: [1, 5, 8, 10]","MOV      R1, #1 ; Load the first number
        ADD      R2, R1 ; Initialize the sum
LOOP    CMP      R1, #10 ; Check if we have reached the last number
        BEQ      SUM    ; If yes, jump to SUM
        ADD      R1, #1 ; Increment the number
        ADD      R2, R1 ; Add the number to sum
        B        LOOP   ; Loop
SUM     ; At the end, the sum is in R2"
"Using the parameters provided, create a new variable ""n"" that stores the sum of ""a"" and ""b"".a = 25
b = 10",n = a + b
"Construct a for loop to print out numbers ranging from 1 to 10, skipping even numbers.","for i in range(1,11):
 if i % 2 != 0:
 print(i)"
Create a list of all the words in the given sentence.The quick brown fox jumped over the lazy dog.,"words_list = [""The"", ""quick"", ""brown"", ""fox"", ""jumped"", ""over"", ""the"", ""lazy"", ""dog""]"
Retrieve the public IP address of your machine using Python.,"import requests

def get_public_ip():
 response = requests.get('https://api.ipify.org')
 return response.text"
Construct a while loop that prints integers from 0 to 9.,"i = 0
while i < 10:
 print(i)
 i+=1"
"Given a sorted list of integers, write a Python function to search for a specific target element.","def binary_search(list, target):
 low = 0
 high = len(list) - 1

 while low <= high:
  mid = (low + high) // 2
  if list[mid] < target:
   low = mid + 1
  elif list[mid] > target:
   high = mid - 1
  else:
   return mid
 return False"
"Using the given list, create a new variable ""result"" that stores the sum of all the elements.items = [1, 2, 3, 4, 5]","result = 0
for item in items:
 result += item"
"Modify the existing code so it prints out the numbers from 0 to 10 in reverser order.for (let i = 0; i < 10; i++) {
	console.log(i);
}","for (let i = 10; i >= 0; i--) {
	console.log(i);
}"
"Read the data structure and output the sum of all the values.data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","let total = 0;
data.forEach((arr)=> {
	arr.forEach(num => {
		total += num;
	});
});
console.log(total); //45"
"Develop a program for sorting an array of numbers.arr = [40, 10, 5, 50, 30]","function sortArray(arr) {
	let n = arr.length;
	for (let i = 0; i < n-1; i++) {
		let minIndex = i;
		for (let j = i + 1; j < n; j++){
			if (arr[j] < arr[minIndex]) 
				minIndex = j; 
		}
		let temp = arr[minIndex];
		arr[minIndex] = arr[i];
		arr[i] = temp; 
	}
	return arr;
}
console.log(sortArray(arr)) // Output: [5, 10, 30, 40, 50]"
"Develop a function to search for a value in an array and return its position.arr = [25, 100, 98, 50];
value = 50","function searchValue(arr, value) {
	let position = -1;
	arr.forEach((n, i)=> {
		if (n == value) {
			position = i;
		}
	});
	return position;
}
let position = searchValue(arr, value);
console.log(position); // 3"
"Improve the code to return the sum of all the numbers in the given vector.vector<float> nums = {1.5, 2.5, 3.5, 4.5};","float get_sum(vector<float>& nums) {
    float sum = 0;
    for (auto n : nums) {
        sum += n;
    }
    return sum;
}"
"Create a Python class called Dog that contains the following attributes: breed, name, and age.","class Dog:
    def __init__(self, breed, name, age):
        self.breed = breed
        self.name = name
        self.age = age"
"Create a copy of the given code without using the copy.deepcopy()import copy

list1 = [[1, 2], [3, 4]]
list2 = copy.deepcopy(list1)","list2 = []
for i in range(len(list1)):
    list2.append(list1[i].copy())"
"Calculate the cosine similarity between the given two sentence vectors.vec1 = [1,2,3,4,5]
vec2 = [2,3,4,5,6]","def cosine_similarity(vec1, vec2):
    dot_product = np.dot(vec1, vec2)
    norm_vec1 = np.linalg.norm(vec1)
    norm_vec2 = np.linalg.norm(vec2)
    return dot_product / (norm_vec1 * norm_vec2)"
Define a custom Exception for an invalid data type.,"class InvalidDataTypeError(Exception):
    """"""Exception raised when an invalid data type is encountered""""""

    def __init__(self, message):
        self.message = message"
"Given a list of tuples, return a new list with the value of each tuple increased by one.tuples = [(1,2), (2,3), (3,4)]","new_tuples = []
for t in tuples:
    new_tuples.append((t[0] + 1, t[1] + 1))"
"Identify the largest element of an array with python.[9, 4, 2, 8, 7]","def find_largest_num(a): 
  if len(a) == 0: 
    return
  max = a[0] 
  for num in a: 
    if num > max: 
      max = num 
  return max"
"Generate a python script that concatenates two strings.String 1: ""foo"" 
String 2: ""bar""","str1 = ""foo"" 
str2 = ""bar""
concatenated_str = str1 + str2
print(concatenated_str)"
"Create a line chart from given data on the number of car sales in the UK from 2008 to 2019.year = ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']
number_of_sales = [1.8, 2.1, 2.5, 2.6, 2.8, 3.0, 3.2, 3.5, 3.7, 3.8, 4.0, 4.2]","import matplotlib.pyplot as plt

# Make a data frame from the given data
df = pd.DataFrame({'year': year, 'number_of_sales': number_of_sales})

# Plot a line chart
plt.plot(df['year'], df['number_of_sales'], linewidth=3)
plt.title(""Car Sales in the UK from 2008 to 2019"")
plt.xlabel(""Year"")
plt.ylabel(""Number of sales"")

# Show the plot
plt.show()"
Create an array of 100 elements filled with random numbers from 1 to 100.,"import random

# Create an array of 100 elements with 0 values
random_num_arr = [0] * 100

# Fill each of the 100 elements with random numbers from 1 to 100
for i in range(100):
    random_num_arr[i] = random.randint(1, 100)

print(random_num_arr)"
Create a program that prompts the user to enter their name and prints it out.,"# Get user input
name = input('Enter your name: ')

# Print out the user's name
print('Hello ' + name + '!')"
"Write a Python function to normalize a given list of numbers so that they sum up to 1.arr = [2, 4, 6, 8]","def normalize(arr):
    # calculate the sum of the given numbers
    total = sum(arr)

    # normalize each number in the array
    normalized_arr = [number / total for number in arr]
    
    return normalized_arr

# print the normalized array
print(normalize(arr)) # prints [0.1, 0.2, 0.3, 0.4]"
"Create a class in Python to represent a book with the title, author and year of publication as attributes.","class Book:
    def __init__(self, title, author, year):
        self.title = title
        self.author = author
        self.year = year"
"Write a code to print the words ""Hello world!"" n times if n is given as an input.","def hello(n):
    if n > 0:
        for x in range(n):
            print(""Hello world!"")
    else:
        print(""Input should be a number greater than 0"")

hello(5)"
"Generate an algorithm to perform the task described belowGiven two strings, find out if one string is a rotation of other.","The following algorithm can be used to find out if a given string is a rotation of another given string:
1. Create a concatenated string by concatenating the first string with itself
2. Check if the second string is a substring of the concatenated string.
3. If yes, then the second string is a rotation of the first string"
"Manually debug the following code to find any errors.def foo(x):
    y = x**3
    z = y + 2
    return z",No errors found in the given code.
What is an example of a one-to-one mapping?,"An example of a one-to-one mapping is a function, which pairs each element in one set to a unique element in another set, such that each element in the first set is paired with exactly one element in the second set. For example, the following function is one-to-one: f(x) = x + 1. This function maps each number x to a unique number x + 1."
"Create a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists.list1 = [1,2, 3, 4, 5]
list2 = [2,4,6,8]","def common_elements(list1, list2):
    return [item for item in list1 if item in list2] 

list1 = [1,2, 3, 4, 5]
list2 = [2,4,6,8]

common_items_list = common_elements(list1, list2)
print(common_items_list)"
What is a use case for inheritance in object-oriented programming?,"In object-oriented programming, inheritance is used to create and maintain a hierarchical relationship between classes. By inheriting properties and methods from a parent class, a child class can reuse and extend the functionalities of the parent class. This allows developers to write less code and keep their codebase organized by logically grouping similar classes into a hierarchy, which can then be further extended with new features."
"Write a method to take two strings as the inputs and check if the second string is a substring of the first one or not.String1: hello world
String2: world","def is_substring(string1, string2):
    if string2 in string1: 
        return True
    else:
        return False

string1 = 'hello world'
string2 = 'world'

is_substring(string1, string2) # will return True"
What kind of sorting algorithm is Insertion Sort?,"Insertion sort is a comparison-based sorting algorithm in which the elements are compared and arranged in a particular order. In this algorithm, a sublist is created which is sorted and at each iteration it is compared with the elements of the original list and placed in the correct position. It is an in-place sorting algorithm, meaning it doesn’t require any additional data structures for sorting."
"Write a function to take three integers as input and return their product.x=3, y=5, z=7","def product(x,y,z):
    return x*y*z

x = 3
y = 5
z = 7

res = product(x,y,z)
print(res)"
What is the advantage of using Dynamic programming over Greedy algorithms?,"The main advantage of using dynamic programming over greedy algorithms is that it is optimized for the long-term. Dynamic programming takes into account the entire problem and finds the optimal solution based on the entire problem. On the other hand, greedy algorithms may find an optimal solution to a given sub-problem, but they may not find the optimal solution to the entire problem. In addition, dynamic programming is better suited for problems with overlapping sub-problems, which may not be solved by a greedy algorithm."
Create a recursive function that returns the Fibonacci number corresponding to a given input.,"def Fibonacci(n): 
    if n <= 1: 
        return n 
    else: 
        return(Fibonacci(n-1) + Fibonacci(n-2)) 
  
# Driver Code 
nterms = 10
  
# check if the number of terms is valid 
if nterms <= 0: 
    print(""Plese enter a positive integer"") 
else: 
    print(""Fibonacci sequence:"") 
    for i in range(nterms): 
        print(Fibonacci(i))"
"Create a Python code snippet to create a line chart with three different categories.category1 = [1,2,3,4]
category2 = [4,5,6,7]
category3 = [7,8,9,10]","import matplotlib.pyplot as plt

# Data to plot
category1 = [1,2,3,4]
category2 = [4,5,6,7]
category3 = [7,8,9,10]

# Create the line plot
plt.plot(category1, label='Category 1')
plt.plot(category2, label='Category 2')
plt.plot(category3, label='Category 3')

# change font type and size
plt.rc('font', size=16)

# Add a legend
plt.legend()

# Show the plot
plt.show()"
"Create a Python program to sort a dictionary by value.my_dict = {“One”:1, “Two”:2, “Three”:3}","my_dict = {'One': 1, 'Two': 2, 'Three': 3}

#sort dictionary by value
sorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])

print(sorted_dict)"
"Calculate the mean of the following array elements: 4, 9, 16, 11, 15.",The mean of the array elements is 11.
"Create a loop to print out all even numbers in the given set [3, 7, 10, 18, 21, 24].","for (let i=0; i < arr.length; i++) {
  if (arr[i] % 2 === 0) {
    console.log(arr[i]);
  }
}

// Output: 10, 18, 24"
List 5 elements of the Python standard library.,"sys, os, logging, string, collections"
"Write a Python code snippet to iterate over a list of strings and print the length of each string.List: [""Hello"", ""World"", ""!""]","for string in list:
    print(len(string))
    
# Output: 5, 5, 1"
"Arrange the following functions in order of complexity from least complex to most complex.
A) linearSearch
B) binarySearch
C) insertionSort
D) quickSort","A) linearSearch
C) insertionSort
B) binarySearch
D) quickSort"
Create a variable in Python and assign it the value 15.,num = 15
"What is the output of the following code snippet?
int a = 5;
int b = 6;
int result = a * b;",The output of the code snippet is 30. This is the result of multiplying the values of 'a' (5) and 'b' (6).
How can we convert strings to float in Python?,"We can convert strings to float in Python by using the float() function. This takes a string argument and returns a floating-point number. For example, float(""10.5"") would return 10.5 as a float."
"Assume that we have an array of integers. Create code to input the array and output the sum of all the elements of the array.arr = [1, 2, 3, 4, 5]","def calculate_sum(arr):
    """"""Calculates sum of all elements in the given array""""""
    total = 0
    for num in arr:
        total += num
    return total

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5]
    print(calculate_sum(arr))"
"Are there any palindromes in the given sequence of numbers?seq = [2332, 24124, 1221, 89898]","def has_palindrome(seq):
    """"""Returns True if the given sequence has a palindrome, otherwise returns False""""""
    for num in seq:
        if str(num) == str(num)[::-1]:
            return True
    return False

if __name__ == '__main__':
    seq = [2332, 24124, 1221, 89898]
    print(has_palindrome(seq))"
"Create code to extract the middle character of a given string.string = ""middle""","def get_middle_char(string):
    """"""Returns the middle character of a given string.""""""
    middle_index = int(len(string) / 2)
    return string[middle_index]

if __name__ == '__main__':
    string = ""middle""
    print(get_middle_char(string))"
"How many unique elements are present in the given array?arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]","def count_unique_elements(arr):
    """"""Returns the number of unique elements present in the given array.""""""
    unique_elements = set(arr)
    return len(unique_elements)

if __name__ == '__main__':
    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
    count = count_unique_elements(arr)
    print('Number of unique elements:', count)"
"Reorder a given array such that all even elements are placed before odd elements.arr = [1, 2, 3, 4, 5, 6, 7, 8]","def reorder_array(arr):
    """"""Reorders a given array such that all even elements are placed before odd elements.""""""
    even = [i for i in arr if i % 2 == 0]
    odd = [j for j in arr if j % 2 != 0]

    return even + odd

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5, 6, 7, 8]
    ordered = reorder_array(arr)
    print(ordered)"
"Add 10 to the last element of a given array.[1, 2, 3, 4]","arr = [1, 2, 3,4]
arr[-1] += 10
print(arr)"
"Find the index of the element 8 in the list [3, 8, 9, 5, 1, 6].","list = [3, 8, 9, 5, 1, 6]
index = list.index(8)
print(""Index of 8 is:"", index)"
"Read the following dictionary:{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] }","myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}
for key, val in myDict.items():
    print(""key:"", key, ""values:"", val)"
"Extract all values from the following dictionary:{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] }","myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}
values = [val for vals in myDict.values() for val in vals]
print(values)"
Write a for loop to output all the odd numbers from 1 to 10 in Python.,"for i in range(1,11):
   if (i % 2 != 0):
       print(i)"
"Write a function that given a string of character, returns the number of vowels in it.Example string: ""hello world""","def count_vowels(s): 
    vowels = 'aeiou'
    count = 0
    for char in s: 
        if char in vowels: 
            count += 1
    return count"
Now write a function to generate all the factorial numbers from 1 to n.,"def generate_factorials(n):
    factorials = [1]
    for num in range(1,n+1):
        if num == 1:
            factorials.append(1)
        else:
            factorials.append(factorials[-1]*num)
    return factorials"
"Given an integer array, output the largest sum of all the possible subarray sums, use Python for the solution.Example array: [-2,1,-3,4,-1,2,1,-5,4]","def largest_sum(arr):
    cur_sum = 0
    max_sum = float(""-inf"")
    for i in range(len(arr)):
        cur_sum = max(arr[i], cur_sum + arr[i])
        max_sum = max(max_sum, cur_sum)
    return max_sum"
"Write a query in MongoDB to search for documents where the address field contains the string ""California"".","db.collection.find({""address"":{$regex: "".*California.*""}})"
"Sort a given array using quicksort algorithm.arr = [3, 2, 9, 10, 1]","def quicksort(arr):
  if len(arr) <= 1:
    return arr
  
  pivot = arr[len(arr) // 2]
  left = [x for x in arr if x < pivot]
  middle = [x for x in arr if x == pivot]
  right = [x for x in arr if x > pivot]
  return quicksort(left) + middle + quicksort(right)

print(quicksort(arr))"
"Write a Python function to compare two strings and return all the common elements.s1='python'
s2='programming'","def find_common_elements(s1, s2):
 res = []
 for i in s1:
 if i in s2:
 res.append(i)
 return res

find_common_elements(s1,s2)
#Output: ['n']"
Create a Python function to generate the first n prime numers.,"def generate_prime_numbers(n):
 prime_nums = []
 i = 2
 while len(prime_nums) < n:
 if is_prime(i):
 prime_nums.append(i)
 i += 1
 return prime_nums

def is_prime(n):
 if n <= 1:
 return False
 for i in range(2, int(n**0.5) + 1):
 if n % i == 0:
 return False
 return True"
Create a Python script to separate a given string into words and count the number of times the each word is used in the string.,"def count_words(string):
 counts = {}
 words = string.split()
 for word in words:
 if word in counts:
 counts[word] += 1
 else:
 counts[word] = 1
 return counts"
Create a Python code to reverse the given string.,"def reverse_string(string):
 return string[::-1]"
"Write a function in Python to select all the elements from a list whose index is a multiple of 3.test_list = [2, 5, 8, 12, 9, 82, 3]","def select_multiples_of_3(input_list):
    result = []
    for index, num in enumerate(input_list):
        if index % 3 == 0:
            result.append(num)
    return result

# test
test_list = [2, 5, 8, 12, 9, 82, 3]
print(select_multiples_of_3(test_list)) # [2, 12, 3]"
Generate a linear regression model with a categorical independent variable.,"from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import OneHotEncoder

X = df[[""categorical_var""]]
y = df[""target""]

encoder = OneHotEncoder()
encoded_X = encoder.fit_transform(X)

model = LogisticRegression(solver=""lbfgs"")
model.fit(encoded_X, y)"
"Train a random forest model for the given dataset.import pandas as pd
from sklearn.model_selection import train_test_split

df = pd.read_csv(""mydata.csv"")
X = df.drop('target', axis = 1)
y = df[""target""]

X_train, X_test, y_train, y_test = train_test_split(X, y, testSize = 0.2, randomState = 42)","from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)
rf_model.fit(X_train, y_train)"
"Compute the occurrence of each character in a given string.my_string = ""Hello World!""","def compute_occurrences(my_string):
    count_dict = {}
    for c in my_string:
        count_dict[c] = count_dict.get(c, 0) +1
    return count_dict

# test
my_string = ""Hello World!""
print(compute_occurrences(my_string)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
"Edit this three lines of code to remove the last item from a given array.Input array: [1, 2, 3, 4]","arr = [1, 2, 3, 4]
last_item = arr.pop()
arr.remove(last_item)"
"Generate a function that takes an array of strings and returns a new array with the strings sorted in alphabetical order.Input array: [""hello"", ""world"", ""this"", ""is"", ""a"", ""sentence""]","def sort_strings(arr):
    sorted_arr = sorted(arr)
    return sorted_arr

print(sort_strings([""hello"", ""world"", ""this"", ""is"", ""a"", ""sentence""]))

# Output: ['a', 'hello', 'is', 'sentence', 'this', 'world']"
"Create a function that takes two arrays and returns the elements that are present in both of them.Input array 1: [1, 2, 3, 4, 5]
Input array 2: [3, 4, 5, 6, 7]","def find_common_elements(arr1, arr2):
    common_elements = []
    for element1 in arr1:
        if element1 in arr2:
            common_elements.append(element1)
    return common_elements

print(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))

# Output: [3, 4, 5]"
Write a Python script to validate the following inputValidate a Date type field with the following format: YYYY/MM/DD,"# Import the required datetime module
import datetime

def validate_date(date):
    # Check if the date matches with the given format
    try:
       datetime.datetime.strptime(date, '%Y/%m/%d')
       return True
    except ValueError:
        return False"
What parameters will we pass to the following function?def factorial(n):,"We will pass one parameter, an integer 'n', to the factorial function."
"Output a struct in Golang for the following scenarioCreate a struct for a post on a blog that includes theTitle, Author, Timestamp, Body and Comments.","type Post struct {
        Title string
        Author string
        Timestamp time.Time
        Body string
        Comments []Comment
    }"
"Modify the following Python code to make it run fasterdef roll_dice(n):
    values = []
    for i in range(n):
        values.append(random.randint(1,6))
    return values","import random
    
def roll_dice(n):
    values = []
    random.seed() 
    for i in range(n):
        values.append(random.randint(1,6))
    return values"
Where does a Python interpreter look for modules?,"The Python interpreter looks for modules in the following locations: the home directory, the built-in modules, the PYTHONPATH environment variable, and the standard Python library path."
Compare functions and classes in Python.,"Functions in Python are blocks of reusable code that are used to perform a single, specific action. Classes, on the other hand, are a way of grouping related data and functions together. Classes allow objects to be grouped and given common properties and behaviors."
"Write a Python function to input a number and print if it is positive, negative, or zero","def check_sign(num):
  if num > 0:
    print(""Positive"")
  elif num < 0:
    print(""Negative"")
  else:
    print(""Zero"")"
What is the use of tuple in python?,"Tuple is an immutable collection of objects in Python. It is sequence of values which are immutable, meaning that the values can't be modified. Tuple is useful in data integrity because it ensures that the values in the tuple will remain consistent when passed to a function or used in an expression. It is also used to store related data that must not be changed throughout a program. Some common operations on tuple include indexing, iteration, membership testing. Tuples are also useful in multiple function argument packing and unpacking. Tuples are also commonly used in dictionary as keys."
"You are given a list of numbers, write a program to calculate the mode.[1, 2, 3, 3, 4, 4, 5]","from collections import Counter

def find_mode(lst):
    counter = Counter(lst)
    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]
    return min(mode_vals)

print(find_mode([1, 2, 3, 3, 4, 4, 5]))"
How can you create a class in python?,"A class can be created in Python by using the keyword class followed by the name of the class. The class should include a constructor method __init__() that specifies the attributes and behaviors of the class and it should also end with a colon. Inside the class body, methods and attributes can be defined as required."
"Design a function that counts the number of times a word occurs in a sentence.sentence = ""The quick brown fox jumped over the lazy dog.""","""""""
Design a function that counts the number of times a word occurs in a sentence.

Input: sentence (string)

Output: number of times word appears in the sentence (int)

""""""
def count_word(sentence, word):
    return sentence.lower().split().count(word.lower())

if __name__ == '__main__':
    sentence = ""The quick brown fox jumped over the lazy dog.""
    print(count_word(sentence, ""The""))
    # Output: 1"
Generate a random 16 character string.,"import random
import string

def generate_string():
    chars = string.ascii_letters + string.digits 
    return ''.join(random.choice(chars) for _ in range(16))

if __name__ == '__main__':
    print(generate_string()) 
    # Output: 5A5l7p9XohHmFWhh"
"Given the following code, write a function to calculate the length of the linked list.""""""
class Node:
  def __init__(self, val, next=None):
    self.val = val
    self.next = next

head = Node(4, Node(3, Node(2, Node(1))))
""""""","""""""
Given the following code, write a function to calculate the length of the linked list.

Input: Head of the linked list (Node)

Output: Length of the linked list (int)

""""""
def get_length(head):
    if head is None:
        return 0
    
    length = 1
    node = head
    
    while node.next is not None:
        length += 1
        node = node.next
    
    return length

if __name__ == '__main__':
    head = Node(4, Node(3, Node(2, Node(1))))
    print(get_length(head)) 
    # Output: 4"
"Determine the index of an element in a given array using binary search.arr = [1, 2, 3, 4, 5, 6, 7]
element = 4","""""""
Determine the index of an element in a given array using binary search.

Input: arr (list)  element (int)

Output: index (int)

""""""
def binary_search(arr, element):
    start = 0
    end = len(arr) - 1
    
    while start <= end:
        mid = (start + end) // 2
        if element < arr[mid]:
            end = mid - 1
        elif element > arr[mid]:
            start = mid + 1
        else:
            return mid
    
    return -1

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5, 6, 7]
    element = 4
    print(binary_search(arr, element)) 
    # Output: 3"
"Generate a list of the data type of each element in the given list.my_list = [12, 'hello', 15.7]","[int, str, float]"
"Determine how many times the given string appears in the paragraph.Paragraph: In one moment, I paused in a quiet street and suddenly quite near me, the beauty of a full moon shot up into the sky.
String: moon",1
Count the number of times each letter occurs in the given text.Text: Coding is fun!,"{'C':1, 'o':2, 'd':1, 'i':2, 'n':1, 'g':2, ' ':2, 'f':1, 'u':1, '!':1}"
Create a function to transform all strings to capital letters.my_string = 'Hello World!',"def to_upper(string):
 return string.upper()"
"Implement a sorting algorithm for the given list of numbers.sort_me = [10, 4, 1, 5]","def sorting_algorithm(sort_me):
    len_sortme = len(sort_me)
    for i in range(len_sortme):
        for j in range(0, len_sortme-i-1):
            if sort_me[j] > sort_me[j+1]:
                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]
    return sort_me"
"Tell the difference between the two provided pieces of code.def recursive(num):
 if num<=0:
 return 0
 else:
 return num + recursive(num-1)

def iterative(num):
 result = 0
 for i in range(1, num+1):
 result += i
 return result","The recursive code uses a recursive call to loop through each value from num to 0, while the iterative code uses a for-loop to add up from 1 to num."
"Simplify the following code as much as possiblecounter = 0
for item in fruits:
 if item == 'apple':
 counter += 1",counter = fruits.count('apple')
Create a function to capitalize the first letter in each word of the given string.my_string = 'this is a test',"def capitalize_words(string):
  words = string.split(' ')
  capitalized_words = []
  for word in words:
    capitalized_word = word[0].upper() + word[1:]
    capitalized_words.append(capitalized_word)
  return ' '.join(capitalized_words)"
Calculate the number of bits required to represent the given letter.letter = 'A',8 bits.
"Convert the given list to a set and remove all duplicates.my_list = [1, 2, 1, 20, 10, 5, 4, 4]","my_set = set(my_list)
my_set = {1, 2, 5, 10, 20, 4}"
"Unwrap the value in the following nested tuple.my_tuple = ((1, (2, (3, 4))), 5)",4
Extract all the numbers from the given string.my_string = 'I have 4 cats and 2 dogs in my house',"[4, 2]"
Create an algorithm in pseudocode to find the maximum value in an array.,"max = 0

for each element in array
  if element > max 
    max = element

return max"
Create a Python script that calculates the sum of two given numbers.,"def sum(x, y):
  return x + y;"
"Debug the given Python code and make sure that it runs without errors.def add_two_numbers(a, b):
  return a b","def add_two_numbers(a, b):
  return a + b"
"Calculate the total of all characters in the given string.String: ""Hello World!""","int sum = 0; 
for (int i = 0; i < str.length(); i++) { 
    sum += str.charAt(i); 
} 

return sum;"
Create a recursive function in Python which returns the sum of the elements in a given list.,"def recursive_sum(arr):
    if len(arr) == 0:
        return 0
    else:
        return arr[0] + recursive_sum(arr[1:])"
"Show the output of the following array when it is printed in the console.let arr = [5, 8, 15, 7];","[5, 8, 15, 7]"
"Suggest a way to solve the following problem.

Given an array of integers, find the most occuring element in the array.","One way to solve this problem is to use a hash map to store the count of each element in the array. Then, traverse the hash map to find the element which has the highest count."
"Modify the Python code below to solve the following error: ""TypeError: 'str' object is not callable"".""""""
def greet(name):
    print('Hello', name())
greet('John')
""""""","def greet(name):
    print('Hello', name)
greet('John')"
Convert a given string in the form of a camelCase notation to snake_case notationcamelCaseString,camel_case_string
"Design a system that can take an integer list as its input and return a sorted list[70, 2, 8, 45, 23]","[2, 8, 23, 45, 70]"
Create a Python class for Animal,"class Animal:
    def __init__(self, name, type):
        self.name = name
        self.type = type"
"Develop a function that takes a dictionary and returns a list{""Name"": ""John"", ""Age"": 45}","def dict_to_list(d):
    lst = []
    for k, v in d.items():
        lst.append((k, v))
    return lst"
"Edit the following code to convert it into a generic functiondef add_two_numbers(a, b):
    return a + b","def add_numbers(a, b):
    return a + b"
Calculate the factorial of a positive integer in C.,"#include <stdio.h>

int factorial(int n) 
{ 
  int i, fact = 1; 
  
  // handles cases greater than 1
  if (n > 1) { 
    for (i = 2; i <= n; i++) 
      fact = fact * i; 
  } 
  return fact; 
} 

int main() 
{ 
  printf(""The factorial of 5 is %d"", factorial(5)); 
  return 0; 
}"
Generate a Python program that creates a list of numbers from 1 to 10.,"# Create a list of numbers from 1 to 10
numbers = list(range(1, 11))
print(numbers)"
"Using the given set and scores, find the maximum score.set = {1, 2, 3}, scores = {4, 3, 6},","# Find the maximum score
maxScore = max(scores[i] for i in set)
print(maxScore)"
Classify the given text into either positive or negative sentiment.This movie was one of the worst movies I've ever seen.,Negative sentiment.
"Write a function to sort a list of numbers using merge sort.myList = [4, 8, 2, 3, 1]","def mergeSort(myList): 
    if len(myList) >1: 
        mid = len(myList)//2 #Finding the mid of the array 
        L = myList[:mid] # Dividing the array elements  
        R = myList[mid:] # into 2 halves 
  
        mergeSort(L) # Sorting the first half 
        mergeSort(R) # Sorting the second half 
  
        i = j = k = 0
          
        # Copy data to temp arrays L[] and R[] 
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                myList[k] = L[i] 
                i+= 1
            else: 
                myList[k] = R[j] 
                j+= 1
            k+= 1
          
        # Checking if any element was left 
        while i < len(L): 
            myList[k] = L[i] 
            i+= 1
            k+= 1
          
        while j < len(R): 
            myList[k] = R[j] 
            j+= 1
            k+= 1"
Write a query in MongoDB that selects all documents in a given collection.,db.collection.find({})
"Parse the following XML code and print all the ""name"" fields.<employees>
    <employee>
        <name>John</name>
        <age>35</age>
    </employee>
    <employee>
        <name>Alex</name>
        <age>42</age>
    </employee>
</employees>","import xml.etree.ElementTree as ET 

# parse the xml file
root = ET.parse('employees.xml').getroot()
for employee in root.findall('employee'):
    name = employee.find('name').text
    print(name)"
"Generate a random word from a given list of wordswords = ['apple', 'banana', 'grape', 'orange']","import random

def get_random_word(words):
    return random.choice(words)

if __name__ == '__main__':
    print(get_random_word(words))"
"Create a for loop for printing ""Hello World N times"", where N is a given numberN = 5","for i in range(N):
    print(""Hello World"")"
Design a class for representing a triangle with its 3 sides,"class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def area(self):
        semi = (self.side1 + self.side2 + self.side3) / 2.0
        return (semi*(semi-self.side1)*(semi-self.side2)*(semi-self.side3)) ** 0.5"
"Print the letter frequency of a given stringstring = ""Hello World""","from collections import Counter

def get_letter_frequency(string):
    counter = Counter(string)
    for key, value in counter.items():
        print(f'{key}: {value}')

if __name__ == '__main__':
    get_letter_frequency(string)"
"Unpack a given list of tuplestuples = [('John', 23), ('Adam', 45)]","def unpack_tuples(tuples):
    names, ages = zip(*tuples)
    return list(names), list(ages)

if __name__ == '__main__':
    names, ages = unpack_tuples(tuples)
    print(names)
    print(ages)"
Create an array of strings containing the names of your relatives,"relatives = ['John', 'Adam', 'Sarah', 'Paul', 'Emily']"
"Change the given Python script to not assign any variablesx = 10
y = ""Some Text""",# no variables are assigned
"Convert the following if-else block of code into a ternary expression.if (condition){
  do_something();
}
else {
  do_something_else();
}",condition ? do_something() : do_something_else();
Create a Python function to generate all prime numbers less than a given number.,"def generate_prime_numbers(n): 
    primes = [] 
    for num in range(2, n + 1): 
        is_prime = True
        for i in range(2, num): 
            if (num % i == 0): 
                is_prime = False
        if is_prime: 
            primes.append(num) 
    return primes"
"In the given code, convert the output to its equivalent integer type.","x = ""10"" 
y = int(x)"
Change the given code so that the variable is incremented only if the condition returns true.,"x = 0
if (condition):
    x += 1"
"Determine the data type for the given value.value: ""hello""",string
Compute the sum of all numbers from 1 to 5 using a for loop.,"total = 0
for i in range(1, 6):
    total += i
print(total)"
"Suggest a code snippet to shuffle a list of numbers.[1, 2, 3, 4, 5]","import random

numbers = [1, 2, 3, 4, 5]
random.shuffle(numbers)
print(numbers)"
"Find the most frequent word from the given list.['apple', 'mango', 'banana', 'apple', 'orange']","from collections import Counter

words = ['apple', 'mango', 'banana', 'apple', 'orange']
word_counts = Counter(words)
most_frequent = word_counts.most_common(1)
print(most_frequent[0][0]) # prints 'apple'"
Edit the following code to ensure that it runs without any error.print('Hello world),print('Hello world')
Create an iterator in Python that yields only even numbers.,"def even_numbers():
    i = 0
    while True:
        if i % 2 == 0:
            yield i
        i += 1"
"Sort the given list of integers in descending order using the Bubble sort technique.[3, 5, 2, 8, 9, 1]","def bubble_sort_descending(nums):
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] < nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums

a = [3, 5, 2, 8, 9, 1]
a = bubble_sort_descending(a)
print(a) # prints [9, 8, 5, 3, 2, 1]"
"Retrieve the data of the third item from the given list.[{""name"":""Mary"",""age"":27,""city"":""NY""},{""name"":""David"",""age"":35,""city"":""LA""},{""name"":""John"",""age"":22,""city"":""Uk""}]","data_list = [{""name"":""Mary"",""age"":27,""city"":""NY""},{""name"":""David"",""age"":35,""city"":""LA""},{""name"":""John"",""age"":22,""city"":""Uk""}]

third_item = data_list[2]
print(third_item) # prints {""name"":""John"",""age"":22,""city"":""Uk""}"
Write a validation code to verify if a given string is an integer.,"def is_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False"
"Delete the last element from the given list.[4, 8, 15, 16, 23, 42]","my_list = [4, 8, 15, 16, 23, 42]
del my_list[-1]
print(my_list) # prints [4, 8, 15, 16, 23]"
"Print all the odd numbers between a given range in Python.start = 5 
end = 20","start = 5
end = 20

for num in range(start, end+1): 
    if num % 2 != 0: 
        print(num, end = ' ')

# Outputs 5 7 9 11 13 15 17 19"
"Develop an algorithm to find the maximum number of overlapping intervals.[[2, 3], [1, 5], [7, 10]]","def maxOverlaps(intervals): 
    if len(intervals) == 0: 
        return 0
  
    # Sort intervals according to their starting time 
    intervals.sort(key = lambda x: x[0])
  
    # Creating an array that stores the number of 
    # overlapping intervals for each interval 
    result = [0] * len(intervals) 
  
    # Initialising result[0] (as the first interval is always 
    # non-overlapping as it has no previous intervals) 
    result[0] = 1
  
    # Initializing the endpoint variable for comparison 
    endpoint = intervals[0][1] 
  
    for i in range(1, len(intervals)): 
        # If the current interval's start time is less 
        # than or equal to the endpoint, it's overlapping 
        if intervals[i][0] <= endpoint: 
            # Store the maximum number of overlapping 
            # intervals 
            result[i] = result[i - 1] + 1
        else: 
            result[i] = 1
          
        # Update the endpoint 
        endpoint = max(endpoint, intervals[i][1]) 
  
    # Finding the maximum number of overlapping intervals 
    maximum_overlaps = max(result) 
  
    return maximum_overlaps"
"Edit the following program to improve its execution speed#include <iostream> 
  
int n = 100; 
  
void foo(int n) 
{ 
    for (int i = 0; i < n; i++) 
        std::cout << i << ""\n""; 
} 
  
int main() 
{ 
    foo(n); 
    return 0; 
}","#include <iostream> 
  
int n = 100; 
 
void foo(int n) 
{ 
    int chunk_size = 5;
    for (int i = 0; i < n; i+=chunk_size) {
        for (int j = i; j < i + chunk_size; j++) 
            std::cout << j << ""\n""; 
    } 
} 
  
int main() 
{ 
    foo(n); 
    return 0; 
}"
"Develop a program to find all pairs in a list that sum up to a given number[1, 2, 4, 5, 6, 7], 8","def pair_sum(arr, k): 
  
    # Seen pairs 
    pairs = set() 
  
    # Iterate through the array 
    for i in range(0, len(arr)): 
  
        # Calculate the complement value 
        complement = k - arr[i] 
  
        # Check if the complement exists in the array 
        if complement in arr[i + 1:]: 
  
            # Add the pair to the seen pairs set 
            pairs.add((arr[i], complement)) 
  
    return pairs 

# Driver code 
arr = [1, 2, 4, 5, 6, 7] 
k = 8

pair_sums = pair_sum(arr, k) 
print(pair_sums)"
"Write a query to find the number of students enrolled in each class each semester.Table Name: enroll
Fields: enroll_id, student_id, class_id, semester","SELECT class_id, semester, COUNT(student_id)
FROM enroll
GROUP BY class_id, semester;"
"Write a Lambda function to filter out the even numbers[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","const evenNumbers = arr => arr.filter(num => num % 2 == 0);

console.log(evenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));"
What is the correct code for looping through a list of elements in Python?,"for element in list:
    print(element)"
"Determine the largest number in a list of integers using C.int list[] = {3, -2, 0, 7, 1};","int max = list[0];

for (int i = 1; i < (sizeof(list) / sizeof(list[0])); i++) {
   if (list[i] > max)
      max = list[i];
}

printf(""Maximum number in given array is: %d"", max);"
Create a regex pattern for extracting emails from a text.,([a-zA-Z0–9_.+-]+@[a-zA-Z0–9-]+\.[a-zA-Z0–9-.]+)
"Find all vowels in a sentence using Python.sentence = ""This is a sample sentence.""","vowels = []
for c in sentence:
    if c in ('a', 'e', 'i', 'o', 'u'):
        vowels.append(c)

print(vowels)"
"Modify the code in the following snippet to include a try/catch block.function getStringLength() {
    let string = prompt(""Please enter a string"");
    let length = string.length;
    console.log(length);
}","function getStringLength() {
    try {
        let string = prompt(""Please enter a string"");
        let length = string.length;
        console.log(length);
    } catch (error) {
        console.log('ERROR: ', error);
    }
}"
"Build an algorithm to compare two strings and report whether they are identical or not.string1 = ""hello"";
string2 = ""world"";","function compareStrings(string1, string2) {
    if (string1 === string2) {
        return ""the strings are identical""
    } else {
        return ""the strings are not identical""
    }
}"
"Design an algorithm to search for the longest string in a list.list = [""apples"", ""bananas"", ""kiwis""]","def find_longest_string(list):
    # Set initial max_length to the length of the first item in list
    max_length = len(list[0])
    # Set initial max_string to the first string in the list
    max_string = list[0]
    # Loop through remaining strings in the list
    for i in range(1, len(list)):
        current_string = list[i]
        current_length = len(current_string)
        if current_length > max_length:
            max_length = current_length
            max_string = current_string
    return max_string"
Convert a number in base 10 to binarynum = 5,"def base10_to_binary(num):
    binary_num = ''
    while num > 0:
        remainder = num % 2
        binary_num = str(remainder) + binary_num
        num = num // 2
    return binary_num

base10_to_binary(5)  # '101'"
"Write an algorithm to find the maximum depth of nested dictionarydict = {‘a’:{‘b’:{‘c’:1}}, ‘d’:2}","def findMaxDepth(dict_):
   max_depth = 1
   for val in dict_.values():
      if isinstance(val, dict):
         max_depth = max(max_depth, 1 + findMaxDepth(val))
   return max_depth

findMaxDepth(dict) // 3"
"Create a program that converts a string to a URL friendly slugstring = ""My Page Title""","def create_slug(string):
    slug = string.replace("" "", ""-"").lower()
    return slug

create_slug(""My Page Title"") // ""my-page-title"""
"Find the second largest number in the following array of integers.[1, 6, 4, 8, 7]",7
"Replace all words with 4 letters or more with ""*****"" in the following text.This is an example of text.",This is an ***** of *****.
Write an if-else condition to check for vowel or consonants in a character in Python.,"""""""
Write an if-else condition to check for vowel or consonants in a character in Python.
""""""

def is_vowel_or_consonant(letter):
    vowels = ""aeiouAEIOU""
    if letter in vowels:
        return ""Vowel""
    else:
        return ""Consonant""

if __name__ == '__main__':
    print(is_vowel_or_consonant(""a""))  # Vowel"
Create a function that takes two numbers and returns their greatest common divisor in Python.,"""""""
Create a function that takes two numbers and returns their greatest common divisor in Python.
""""""

def greatest_common_divisor(a, b):
    if a == 0:
        return b
    if b == 0:
        return a
    if a == b:
        return a
    if a > b:
        return greatest_common_divisor(a - b, b)
    return greatest_common_divisor(a, b - a)

if __name__ == '__main__':
    print(greatest_common_divisor(20, 25))  # 5"
Create a recursive Python function to generate the Fibonacci series up to n-th terms.,"""""""
Create a recursive Python function to generate the Fibonacci series up to n-th terms.
""""""

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    print(fibonacci(5))  # 5"
"Combine the following two lists into a dictionary in Python.list1 = [""a"", ""b"", ""c""]
list2 = [1, 2, 3]","dict1 = {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3
}"
"Make a program to find the sum of each row in a two-dimensional array.[[1,2,3], [2,3,4]]","def row_sum(arr):
    total_sum = 0
    for row in arr:
        total_sum += sum(row)
    return total_sum"
Create a function to input a string from the user and return its reversed version.,"def reverse_string(string):
    return string[::-1]"
write a piece of code to print out the first n Fibonacci numbers in Python.n = 8,"def Fibonacci(n): 
    fibList = [0, 1] 
    
    if n <= 0: 
        print(""Incorrect input"") 
    elif n == 1: 
        print(fibList[0]) 
    elif n == 2: 
        print(fibList) 
    else: 
        temp = fibList[0] + fibList[1] 
        while len(fibList) < n: 
            fibList.append(temp) 
            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] 
      
    return fibList 
  

print(Fibonacci(8))"
"Develop a python program to sort a list of strings alphabetically from a-z.list1 = [""cat"", ""apple"", ""banana"", ""dog""]","def sort_alphabetically(list1):
    list1.sort()
    return list1

print(sort_alphabetically(list1))"
code a Python script that converts temperatures in celsius to fahrenheit.,"def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32"
Create a function to input a number and prints out its prime factorization24,"def prime_factors(num):
    factors = list()
    x = 2
    while x * x <= num:
        while num % x == 0:
            factors.append(x)
            num /= x
        x += 1
    if num > 1:
        factors.append(num)
    return factors

print(prime_factors(24))"
"Generate a Python program to calculate the total number of vowels in a given string.string = ""Today is a beautiful day""","def calculate_vowels(string):
    vowels = 'aeiou'
    count = 0
    
    for char in string:
        if char in vowels:
            count += 1
    return count

print(calculate_vowels(""Today is a beautiful day""))"
Code a script that prints out the first n elements of the Fibonacci sequence.n = 8,"def Fibonacci(n): 
    fibList = [0, 1] 
    
    if n <= 0: 
        print(""Incorrect input"") 
    elif n == 1: 
        print(fibList[0]) 
    elif n == 2: 
        print(fibList) 
    else: 
        temp = fibList[0] + fibList[1] 
        while len(fibList) < n: 
            fibList.append(temp) 
            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] 
      
    return fibList 
  

print(Fibonacci(8))"
Create a program to convert a binary number to its decimal equivalent.,"def binary_to_decimal(number):
    result = 0
    power = 0
    for digit in str(number)[::-1]:
        if digit == '1':
            result += 2 ** power
        power += 1
    return result"
"Create a function to accept an array of integers and return an array with the corresponding squares of each element.arr = [1, 2, 3, 4]","def array_sqr(arr):
    return [x*x for x in arr]

print(array_sqr(arr))"
Suggest an appropriate way to select the last element of a given list in Python.,list[-1]
Provide an appropriate regular expression for checking if a given string contains only numbers,^[0-9]+$
"Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.The bank account has the following details:
- Customer Name: John Doe
- Account Number: 12345
- Balance: $1000","class BankAccount:
    def __init__(self, customer_name, account_number, balance):
        self.customer_name = customer_name
        self.account_number = account_number
        self.balance = balance

    def display_balance(self):
        print('Your balance is', self.balance)

    def withdraw_amount(self, amount):
        self.balance -= amount
        print('You withdrew', amount, 'from your account.')

    def deposit_amount(self, amount):
        self.balance += amount
        print('You deposited', amount, 'into your account.')

    def transfer_amount(self, target_account, amount):
        self.balance -= amount
        target_account.balance += amount
        print('You transferred', amount, 'to the account', target_account.account_number)"
"Create a class in Python to represent a car and include methods to set and get the car's color, model, and year.","class Car:
    def __init__(self, model, year, color):
        self.model = model
        self.year = year
        self.color = color

    def set_color(self, color):
        self.color = color

    def get_color(self):
        return self.color

    def set_model(self, model):
        self.model = model

    def get_model(self):
        return self.model

    def set_year(self, year):
        self.year = year

    def get_year(self):
        return self.year"
"Sort a given list of numbers from smallest to largest with Python.[12,3,7,9,1]","myList = [12,3,7,9,1] 
myList.sort() 
print(myList) 
# Prints [1,3,7,9,12]"
Create a K Nearest Neighbor (KNN) classifier in R.,"# Load the Libraries
library(class)
library(kknn)

# creating a training data set
df <- data.frame(feature1=c(2,3,4,5,6),
                 feature2=c(3.1, 4.1, 5.1, 6.1, 5.9), 
                 outcome=c(""yes"",""yes"",""no"",""no"",""yes""))

# set the predictor and outcome variables 
X <- as.matrix(df[, 1:2])
y <- df[,3]

# Build k-Nearest Neighbors Model 
model <- kknn(outcome~., data=df, k=5)

# Predict the response variable
pred <- predict(model, X)

# get the accuracy of the model 
accuracy <- mean(y == pred) * 100

# Print accuracy 
print(accuracy)"
"Use a regular expression to replace URLs with ""URL"" in a given text in Python.This is a text with a link http://example.com","import re

text = ""This is a text with a link http://example.com""
text = re.sub(r'http\S+', 'URL', text)
print(text)
# Prints: This is a text with a link URL"
Implement a Search algorithm in Python with a space complexity of O(n).,"def search(list, target): 
    for i in range(len(list)): 
        if list[i] == target: 
            return i 
    return -1"
"Transform a given Python list of integers into a dictionary that contains the numbers as keys and its squares as values.[1,2,3]","my_list = [1,2,3]
dict_squares = {x:x**2 for x in my_list}"
Write a Python program that finds the most common word in a given string.This is the first sentence of a sample text.,"def get_most_common_word(text):
 words = text.split()
 common_words = {}
 for word in words:
 if word in common_words:
 common_words[word] += 1
 else:
 common_words[word] = 1

 max_word = """"
 max_count = 0
 for word, count in common_words.items():
 if count > max_count:
 max_word = word
 max_count = count
 return max_word"
"Group the list into a Dictionary Key/Value pair, where the key is the name and the value is number of pet animals owned.pets = [""Henry 12 dogs"", ""Eric 2 cats"", ""David 7 birds""]","pets_dict = {
 ""Henry"": 12, 
 ""Eric"": 2, 
 ""David"": 7
}"
"Create a new list that reverses the order of the original list's elements.old_list = [""apple"", ""banana"", ""kiwi""]","new_list = [""kiwi"", ""banana"", ""apple""]"
Create an empty dictionary with three key-value pairs.,"my_dict = {
 ""key1"": None, 
 ""key2"": None, 
 ""key3"": None
}"
"Create a new string that is the reverse of the original string.my_string = ""Hello World!""","new_string = ""!dlroW olleH"""
"Create a new list that only has the even numbers from the input list.nums = [1, 2, 3, 4, 5, 6, 7]","even_nums = [2, 4, 6]"
"Create a new string that contains all uppercase letters from the original string.my_string = ""Hello World!""","new_string = ""HW"""
"Write a function to take two integer arguments and return their sum.x = 3
y = 5","def add(x, y): 
  return x + y"
"Create a new list that is the combination of two other given lists.list_a = [""A"", ""B"", ""C""]
list_b = [1, 2, 3]","new_list = [""A"", ""B"", ""C"", 1, 2, 3]"
"Create an object named 'person' and assign the properties 'name', 'age', and 'hobby'.""name"": ""John"",
""age"": 18,
""hobby"": ""reading""","person = {
    ""name"": ""John"",
    ""age"": 18,
    ""hobby"": ""reading""
}"
Create a function 'convertStringToInt' that takes a string and converts it into an integer.,"def convertStringToInt(string): 
    convertValue = int(string) 
    return convertValue"
Create a program that reads an integer and prints out the next Fibonacci number.,"def get_next_fibonacci_number(n):
  if n == 0 or n == 1:
    return n
  else:
    fibonacci_sequence = [0,1] 
    for i in range(2, n + 1): 
      next_value = fibonacci_sequence[i-2] + fibonacci_sequence[i-1] 
      fibonacci_sequence.append(next_value)
    return fibonacci_sequence[n]"
Create a function that prints all the prime numbers between 1 and a given number.,"def print_prime_numbers(upper_limit):
  prime_numbers_list = []
  for num in range(2, upper_limit+1):
   if all(num % i != 0 for i in range(2, num)): 
    prime_numbers_list.append(num)
  print(""The prime numbers between 1 and"",upper_limit,""are:"",prime_numbers_list)"
Create a program that reads 6 numbers from the user and outputs whether they form an increasing subsequence of length 3 or not.,"def increasing_subsequence(arr):
  for i in range(len(arr)-2):
    if (arr[i] < arr[i+1]) and (arr[i+1] < arr[i+2]):
      return 'True'
  return 'False'"
Write a function that takes a list of strings and returns the longest common prefix of the list of strings.,"def longest_common_prefix(strings):
    if len(strings) == 0:
        return """"
    smallest_string = min(strings, key=len)
    end_word_index = len(smallest_string)

    for i in range(end_word_index):
        for word in strings:
            if word[i] != smallest_string[i]:
                return smallest_string[:i] 
    return smallest_string"
You are given an array of integers and the task is to create a function that returns the maximum pairwise product of those numbers.,"def max_pairwise_product(nums):
  max_product = 0
  for i in range(len(nums)):
      for j in range(i+1,len(nums)):
          max_product = max(max_product, nums[i] * nums[j])
  return max_product"
Create a program that reads two numbers and prints out their greatest common divisor.,"def gcd(a, b):
  if a == 0:
    return b 
  return gcd(b % a, a)"
Create a program that reads a list of integers and returns the highest prime number in the list.,"def get_highest_prime(numbers):
  highest_prime = 0
  for num in numbers:
    for i in range(2, num): 
      if (num % i == 0): 
        break
    else:
      highest_prime = max(highest_prime, num)
  return highest_prime"
Create a program that reads an integer N and calculates the sum of the series 1/1 + 1/2 + 1/3 + . . . . . + 1/N.,"def calculate_series_sum(N):
    summation = 0
    for i in range(1, N+1):
        summation += (1 / i)
    return summation"
"Write a Python program that takes a string entered by the user, reverses it and displays the reversed version of the string.","def reverse_string(s): 
    return s[::-1]
  
input_string = input(""Enter a string: "")
  
reversed_string = reverse_string(input_string) 
  
print(""The reversed string is:"", reversed_string)"
How would you convert a number from decimal to binary using bitwise operators?,"def decimalToBinary(n): 
    return bin(n).replace(""0b"", """") 
    
decimal_num = 7
binary_num = decimalToBinary(decimal_num) 
print(binary_num) # 111"
Create a class named 'Person' that has attributes such as name and age.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Create a Python program that sorts an array of integers using the insertion sort algorithm.[4, 2, 6, 8, 1]","def insertionSort(arr): 
  
    # Traverse through 1 to len(arr) 
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i-1
        while j >= 0 and key < arr[j] : 
                arr[j + 1] = arr[j] 
                j -= 1
        arr[j + 1] = key 
  
# Driver code to test above 
arr = [12, 11, 13, 5, 6] 
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (arr[i])"
Create a Python program that generates a random number between 0 and 10 and checks if the generated number is even.,"import random

num = random.randint(0, 10)

if (num % 2 == 0):
    print(str(num) + "" is even."")
else:
    print(str(num) + "" is odd."")"
Define a function to find the factorial of the given number.,"def factorial(num):
    if num <= 1:
        return 1
    else:
        return num * factorial(num-1)"
Create a program to calculate the Fibonacci sequence up to the nth element.,"def fibonacci(n):
    a = 0
    b = 1
    if n==1:
        print(a)
    else:
        print(a)
        print(b)
        for i in range(2,n):
            c=a+b
            a=b
            b=c
            print(b)"
"Create a program to search a nested list and print all the elements containing the number 3.nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, [3, 4, 5]]]","def search_nested_list(nested_list):
    for element in nested_list:
        if isinstance(element, list):
            search_nested_list(element)
        elif element == 3:
            print(element)

search_nested_list(nested_list)"
"Determine the two largest numbers in a given list.lst = [11, 5, 3, 21, 19, 17]","def find_two_largest(lst):
    max1 = 0
    max2 = 0
    for val in lst:
        if val > max1:
            max2 = max1
            max1 = val
        elif val > max2:
            max2 = val
    return (max1, max2)

print(find_two_largest(lst))"
"Create a method that given an array as input, outputs the quantity of odd numbers.[1,2,3,4,5,6,7]","def countOdds(arr): 
    return len([x for x in arr if x % 2 != 0])"
"Create a list comprehension that outputs a list of strings with the same character.string=""This is a test.""",[x for x in string if x == 't']
"Given an integer n, write a Python program to print a pattern.n = 5","for i in range(1, n+1): 
  for j in range(1,i+1): 
    print(""* "", end="""")  
  print(""\r"")"
"Create a method that takes an array as input and outputs a Boolean indicating if the sum of the numbers in the array is divisible by 5.[3,7,8]","def divisibleByFive(arr): 
  return (sum(arr) % 5 == 0)"
"Perform the following operation on this array and print the result: remove the last two elements and add them to the beginning.arr = [1, 2, 3, 4, 5]","arr.splice(-2); 
arr.unshift(4,5);"
"Create a list in Python using list comprehension to obtain a new list which contains only the even numbers from the given list.originalList = [1, 3, 4, 17, 19, 6, 2]",evenlist = [i for i in originalList if i%2==0]
Write a computer program to generate a matrix filled with zeros.,"def generateMatrix(m, n): 
  
    # Initialize a m * n matrix with all 0s 
    matrix = [[0 for x in range(n)] for y in range(m)] 
    return matrix 
  
# Driver code 
m = 4
n = 5
print(generateMatrix(m, n))"
"Write a code in Python to find the subsequence of a given sequence.sequence = [1, 6, 2, 4, 3, 7]","def findSubsequence(sequence): 
    subSeq = [] 
    maxLen = 1
  
    # looping through the sequence 
    for i in range(len(sequence)): 
        j = i + 1
        while j < len(sequence): 
            # checking for non decreasing sequence 
            if sequence[j] >= sequence[i]: 
                subSeq.append(sequence[j]) 
                i = j 
                j += 1
  
            # checking for the subsequence with the max length 
            if len(subSeq) > maxLen: 
                maxLen = len(subSeq) 
  
            # reset subSeq for the next subsequence if current element is starting of new subsequence 
            else: 
                subSeq = [] 
  
    # return-1 when there is no subsequence  
    if maxLen == 1: 
        return -1
    else: 
        return maxLen 
  
# Driver Code 
sequence = [1, 6, 2, 4, 3, 7] 
print(""LCS is "", findSubsequence(sequence))"
"Write a Python program to filter out all the elements greater than 5 in the given list.[1, 2, 3, 4, 5, 6, 7, 8, 9]","myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]
 result = list(filter(lambda x: x <= 5, myList))
 print(result)"
"How would you modify the following code to store the output of the function in a dictionary?def convert_list_keys(list_of_data):
    key_list = []
    for item in list_of_data:
        key_list.append(item[0])
    return key_list","def convert_list_keys(list_of_data):
    key_dict = {}
    for item in list_of_data:
        key_dict[item[0]] = item
    return key_dict"
"Compare the input list with a pre-defined list and return a new list containing only the elements that are present in both lists.my_list = [1, 2, 3, 4]
pre_defined_list = [2, 4, 6, 8]","def compare_lists(my_list, pre_defined_list):
    new_list = []
    for element in my_list:
        if element in pre_defined_list:
            new_list.append(element)
    return new_list"
"How would you modify the code to check whether the list contains an even number?list_data = [1, 2, 3, 4]
for item in list_data:  
    print(item)","list_data = [1, 2, 3, 4]
flag = False
for item in list_data:  
    print(item)
    if item % 2 == 0:
       flag = True
if flag:
    print(""List contains even number."")"
"Edit the function so that an element can be deleted from the list.def delete_element(list, element):
    # TODO","def delete_element(list, element):
    # iterate through the list
    for elem in list:
        if elem == element:
            list.remove(elem)
    return list"
"Rewrite the following piece of code to check if a string is a palindrome or not.String text = ""malayalam""","def is_palindrome(text): 
    start = 0
    end = len(text) - 1
    while start < end:
        if text[start] != text[end]:
            return False
        start += 1
        end -= 1
    return True"
Write a code to find the factorial of a given number using a recursive function.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
"Compute the minimum string edit distance between two strings of same length.str1 = ""kitten""
str2 = ""sitting""","def minimumEditDistance(str1, str2):
    m = len(str1)
    n = len(str2)
 
    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
 
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0: 
                dp[i][j] = j 
            elif j == 0: 
                dp[i][j] = i 
            elif str1[i - 1] == str2[j - 1]: 
                dp[i][j] = dp[i - 1][j - 1] 
            else: 
                dp[i][j] = 1 + min(dp[i][j - 1],       
                                   dp[i - 1][j],       
                                   dp[i - 1][j - 1]     
                                   ) 
  
    return dp[m][n]

min_edit_distance = minimumEditDistance(str1, str2)
print(min_edit_distance) # output: 3"
Construct a loop to print all the numbers divisible by 3 between 1 and 20,"for num in range(1, 21):
    if num % 3 == 0:
        print(num)"
"Write a Python function to find all pairs in a given list of numbers whose sum equals a given target numberGiven List: [1, 4, 2, 9, 5]
Target number: 7","def find_pairs_sum(numbers, target):
    res = [] 
    for i in range(len(numbers)): 
        for j in range(i + 1, len(numbers)):
            if numbers[i] + numbers[j] == target: 
                res.append([numbers[i], numbers[j]]) 
  
    return res"
Build a machine learning model to classify the type of iris flower.,"from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier

# Load data
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

# Create a model and train it
model = RandomForestClassifier()
model.fit(X, y)

# Make predictions
predictions = model.predict(X)"
"Use the given code snippet to convert the data type of the x_data from float to integer.x_data = [3.4, 6.2, 3.7]",x_data = [int(x) for x in x_data]
What are the main data types in Python?,"The main data types in Python are numbers, strings, lists, tuples, dictionaries, and sets."
"Given two strings, write a Python function that finds the common letters between them.String 1: apple
String 2: oranges","def find_common_letters(s1, s2):
    letters = set()

    for letter in s1:
        if letter in s2:
            letters.add(letter)
    return letters

# Example
s1 = 'apple'
s2 = 'oranges'
print(find_common_letters(s1, s2))
# Output: {'a', 'e'}"
"Create a function which takes a variable number of arguments, checks if all of them are a list, and then adds all the items in the lists.my_lists = [[1,2,3], [4,5], [6,7,8]]","# Function which takes variable arguments
def add_lists(*args):

    # Check if all arguments are lists
    for arg in args:
        if not isinstance(arg, list):
            return ""All the arguments should be a list.""

    # Add all items of the lists
    result = 0
    for lst in args:
        # Iterate each item in the list
        for item in lst:
            result += item
    return result

# Example
my_lists = [[1,2,3], [4,5], [6,7,8]]
print(add_lists(*my_lists))
# Output: 36"
"Create a function which takes a string, converts it to lowercase, and prints out the most commonly-used character in the string.string = ""Hello World""","def most_common_char(string):
    # Convert to lowercase
    string = string.lower()
    # Create an empty dict
    chars = dict()
    # Iterate over string
    for char in string:
        # Check if the character is in the dict
        if char in chars:
            chars[char] += 1
        else:
            chars[char] = 1
    # Get most common char
    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]

    return most_common_char

# Example
string = ""Hello World""
print(most_common_char(string))
# Output: l"
"Create a function which takes a set of numbers as argument and returns a dictionary containing the frequency of each number.my_set = {1, 2, 2, 3, 4, 5, 6}","def freq_dict(my_set):
    # Initialize a empty dict
    frequency_dict = dict()
    # Iterate over given set
    for num in my_set:
        # Add or update item in the dict
        frequency_dict[num] = frequency_dict.get(num, 0) + 1
    return frequency_dict

# Example
my_set = {1, 2, 2, 3, 4, 5, 6}
print(freq_dict(my_set))
# Output: {1: 1, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}"
"Write a function that takes a string, checks if it is a palindrome, and returns a corresponding boolean value.string = ""racecar""","def is_palindrome(string):
    # Reverse string 
    reversed_string = string[::-1]
    # Compare strings
    if string == reversed_string:
        return True
    else:
        return False

# Example
string = ""racecar""
print(is_palindrome(string))
# Output: True"
"Write a function that takes a number x and multiplies it by itself n amount of times using recursion.x = 4
n = 3","def recursive_multiply(x, n):
	# Base case
    if n == 0:
        return 1
    return x * recursive_multiply(x, n - 1)

# Example
x = 4
n = 3
print(recursive_multiply(x, n))
# Output: 64"
"Given a matrix of m*n size, write a program to find the largest number in the matrix.matrix = 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]","def largest_number_in_matrix(matrix): 
 largest = -1
 for row in matrix: 
 for ele in row: 
 largest = max(largest, ele) 
 return largest 

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  
print(largest_number_in_matrix(matrix)) # 9"
Write a Python program to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.,"dct = {}
for i in range(1, 16):
 dct[i] = i**2

print(dct)"
Answer the following question about the data structure Stack.What is the order of accessing elements from the Stack?,The order of accessing elements from the Stack is Last In First Out (LIFO).
Create a single line program in Python to check if a number is divisible by 5.,"print(lambda x: x%5 == 0, ""is divisible by 5."")"
"In Python, create a function that takes 2 integers and returns the maximum number.","def maximum(a, b):
    if a > b:
        return a
    else:
        return b"
Write an algorithm in MIPS assembly language to determine if a given character is an uppercase letter or not.Character: ‘A’,"li $t0, 65
li $t1, 90
beq $t0, $t1, isUpperLetter
j isNotUpperLetter
isUpperLetter:
    # Do something
isNotUpperLetter:
    # Do something"
What is the Big O time complexity of selection sort?,Selection sort has a time complexity of O(N2) in the worst case.
Write a regex pattern for identifying a valid email address.,"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"
Give an example input to the following instruction.Write a JavaScript code snippet that calculates the sum of the squares of two numbers.,"let x = 3;
let y = 2;

let sum = x * x + y * y;

console.log(sum); // prints 13"
"Write an algorithm for sorting an array in ascending order using the Bubble Sort technique.[3, 7, 4, 1, 9]","// Start loop
for i in range(length of array):

  // Start inner loop
  for j in range(i+1, length of array):

    // Compare elements and swap if needed
    if array[i] > array[j]:
      temp = array[i]
      array[i] = array[j]
      array[j] = temp

  // End inner loop

// End loop

// Result: array is now sorted in ascending order [1, 3, 4, 7, 9]"
"Write an algorithm to solve the Stock Span problem.[100, 80, 60, 70, 60, 75, 85]","// Create an empty stack
stack stack;

int stock_span[N] = { };

// Push index of first element to stack 
stack.push(0);

// Calculate stock span values for rest of the elements 
for (int i=1; i<N; i++) 
{ 
    // Pop elements from stack while stack is not empty and top of 
    // stack is smaller than price[i] 
    while (!stack.empty() && arr[stack.top()] <= arr[i]) 
        stack.pop(); 

    // If stack becomes empty, then price[i] is greater than all elements 
    // on left of it, i.e., price[0], price[1],..price[i-1]. Else price[i] 
    // is greater than elements after top of stack 
    stock_span[i] = (stack.empty())? (i + 1) : (i - stack.top()); 

    // Push this element to stack
    stack.push(i); 
}"
Generate a valid Python expression that multiplies the given numbers.3 and 4,3 * 4
"Write an algorithm for the Caesar Cipher encryption techniqueText: ""Hello, World!""
Key: 3","// Take each letter of the string
for(i=0; i<text.length; i++) {

  // Find the character code of each letter
  letter = text.charCodeAt(i);

  // Apply the key and add it to character code
  cipher = letter + key;

  // Convert the cipher back to letters
  encrypted_letter = String.fromCharCode(cipher);

  // Store the encrypted letters into an encrypted string
  encrypted_string += encrypted_letter;
  
} 

// Result: encrypted_string = ""Khoor,#Zruog!"""
"Edit the given Python program to print the sum of two given numbersfirstNumber = 5
secondNumber = 10

print(""The difference is: "", firstNumber - secondNumber)","firstNumber = 5
secondNumber = 10

print(""The sum is: "", firstNumber + secondNumber)"
Write a pseudocode for the Depth-First Search algorithm,"// Define a function DFS(vertex):
DFS(vertex):
  // Mark the current node as Visited
  Mark the current node as Visited
  
  // Loop through the adjacent nodes
  for each adjacent node of vertex:
    // If the adjacent node has not been visited
    if the adjacent node has not been visited:
      // Call DFS on the adjacent node
      call DFS(adjacent node)

// Call the DFS function on the root node
call DFS(root node)"
Create a Python function to generate a Fibonacci sequence of a given length.,"def generate_fibonacci(length): 
    result = [0, 1] 
    for i in range(2,length): 
        result.append(result[i-2] + result[i-1]) 
    return result"
"Write a function to detect the smallest window in a string containing all characters of another string.string1 = ""abcde"", string2 = ""ade""","def smallest_window(str1, str2):
 min_str = """"
 min_size = float(""inf"")
 
 for i in range(len(str1)):
  for j in range(i+1, len(str1)):
   curr_str = str1[i:j+1]
   count = 0
   for ch in str2:
    if ch in curr_str:
     count += 1
   if len(curr_str) < min_size and count == len(str2):
    min_str = curr_str
    min_size = len(curr_str)
 return min_str
 
print(smallest_window(""abcde"", ""ade""))"
"Given a matrix, write a program to traverse it spirally.matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def spiral_traverse(arr):
 res = []
 top_row, bottom_row = 0, len(arr) - 1
 left_col, right_col = 0, len(arr[0]) - 1
 
 while top_row <= bottom_row and left_col <= right_col:
  for i in range(left_col, right_col + 1):
   res.append(arr[top_row][i])
  top_row += 1
 
  for i in range(top_row, bottom_row + 1):
   res.append(arr[i][right_col])
  right_col -= 1
 
  for i in range(right_col, left_col - 1, -1):
   res.append(arr[bottom_row][i])
  bottom_row -= 1
 
  for i in range(bottom_row, top_row - 1, -1):
   res.append(arr[i][left_col])
  left_col += 1
 
 return res

print(spiral_traverse(matrix))"
"Given a list of numbers, write a program to check if there exists a triplet in the list whose sum is equal to the given number.nums = [2, 7, 11, 15], target = 24","def triplet_sum(nums, target):
 for i in range(len(nums) - 2):
  for j in range(i+1, len(nums) - 1):
   for k in range(j+1, len(nums)):
    if nums[i] + nums[j] + nums[k] == target:
     return True
 return False
 
print(triplet_sum(nums, target))"
Implement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem.,"def traveling_salesman_heuristic(distance_matrix):
    # Create a list of cities
    num_cities = len(distance_matrix)
    cities = range(num_cities)
    
    # Create a list of visited cities and an empty list for the route
    visited = [False for _ in range(num_cities)]
    route = []
    
    # Start from the first city
    current_city = 0
    visited[current_city] = True
    route.append(current_city)
 
    # Find the total distance of the route so far
    total_distance = 0
    
    # Keep looping until all cities are visited
    while False in visited:
        # Find the nearest unvisited city
        best_city = 0
        best_distance = float('inf')
        for i in range(1, num_cities):
            if not visited[i] and distance_matrix[current_city][i] < best_distance:
                best_city = i
                best_distance = distance_matrix[current_city][i]
                
        # Mark the best city as visited
        visited[best_city] = True
        
        # Add the best city to the route
        route.append(best_city)
        
        # Accumulate the total distance
        total_distance += best_distance
        
        # Change the current city to the best city
        current_city = best_city
        
    # Add the distance from the last city to the first
    total_distance += distance_matrix[route[-1]][route[0]]
    
    return route, total_distance"
"Compare two Python objects to check if they have the same values.obj1 = {'a':1,'b':2}
obj2 = {'b':2, 'a':1}","def compareObjects(obj1, obj2):
    '''
    Checks if two Python objects have the same value
    '''
    if obj1 == obj2:
        return True
    else:
        return False"
"Using a for loop, print all the odd numbers between 1 and 20 (inclusive).","for i in range(1, 21):
    if i % 2 != 0:
        print(i)"
Create a Python class that accepts a name and an age to create a person instance.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def __str__(self):
        return f'Name: {self.name}, Age: {self.age}'"
Generate a random 10 character alphanumeric string in Python.,"import random
import string

def generate_random_string():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))"
Customize a WordPress theme to ensure its compatibility with the latest version of the WordPress software.,"Update the functions.php file of your WordPress theme to use the latest functions, classes, constants, and APIs supplied by WordPress. 
Also, delete any deprecated code and features that are not supported in the latest version of WordPress. 
Using the WordPress Theme Check plugin is highly recommended to check the compatibility of any WordPress theme with the newest version of WordPress."
Develop a machine learning system to detect fraud.,"The machine learning system should use supervised learning techniques to learn from labeled data. It should identify trends, anomalies and irregularities by leveraging statistical techniques such as clustering and classification, feature engineering, and outlier detection. The system should utilize data from sources such as transaction data, customer behavior data and external risk information sources such as IP addresses, device information and anomaly detection."
Develop an algorithm to implement a tree traversal.,"A tree traversal is an algorithm for visiting all the nodes of a tree data structure. There are three common traversal algorithms: pre-order, in-order, and post-order. 

Pre-order traversal visits the root node first, then the left subtree, and then the right subtree. In-order traversal visits the left subtree first, then the root node, and then the right subtree. Post-order traversal visits the left subtree first, then the right subtree, and then the root node."
"Given a list of numbers, write a function to determine if the list is an arithmetic sequence.nums = [2, 4, 6, 8, 10]","def is_arithmetic_sequence(nums):
    difference = nums[1] - nums[0]

    for i in range(len(nums)-1):
        if nums[i+1] - nums[i] != difference:
            return False
    return True"
"Create a function to remove the second largest element in a given array.arr = [5, 4, 2, 1, 3]","def remove_second_largest(arr): 
    max_arr = max(arr) 
    arr.remove(max_arr) 
    return max(arr)"
"Given a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list.string = ""thequickbrownfox"" 
words_list = [""the"", ""quick"", ""brown"", ""fox""]","def is_valid_sequence(string, words_list):
    str_index = 0
    for word in words_list:
        if len(string[str_index:]) < len(word):
            return False
        if string[str_index:str_index+len(word)] != word:
            return False
        str_index += len(word)
    return True"
Write a Python function to print out the squares of the numbers between 1 and 10.,"def print_squares():
    for i in range(1, 11):
        print(i**2)"
Create a Python class for a thread-safe queue.,"import threading

class ThreadSafeQueue():
    def __init__(self):
        self.queue = []
        self.lock = threading.Lock()

    def push(self, item):
        with self.lock:
            self.queue.append(item)

    def pop(self):
        with self.lock:
            item = self.queue.pop(0)
        return item"
"Given a list of numbers, find the lowest and highest numbers in the list.numbers = [5, 8, 2, 9, 4, 7]","def find_min_max(numbers):
    lowest = numbers[0]
    highest = numbers[0]
    for num in numbers:
        if num < lowest:
            lowest = num
        if num > highest:
            highest = num
    return (lowest, highest)"
Write a function to find the median of 3 numbers.,"def median_of_three(x, y, z):
    if x>= y:
        if y>=z:
            return y
        elif x>=z:
            return z
        else:
            return x
    else:
        if x>=z:
            return x
        elif y>=z:
            return z
        else:
            return y"
"Given a 2D array, print out all the elements in a spiral order.[
    [1,  2,  3,  4,  5],
    [6,  7,  8,  9,  10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
]","def print_in_spiral_order(arr):
    row_start = 0
    row_stop = len(arr) - 1
    col_start = 0 
    col_stop = len(arr[0]) - 1
    while row_start <= row_stop and col_start <= col_stop:
        for i in range(col_start, col_stop + 1):
            print(arr[row_start][i], end=' ')
        row_start += 1
        for i in range(row_start, row_stop + 1):
            print(arr[i][col_stop], end=' ')
        col_stop -= 1
        if row_start <= row_stop:
            for i in range(col_stop, col_start - 1, -1):
                print(arr[row_stop][i], end=' ')
        row_stop -= 1
        if col_start <= col_stop:
            for i in range(row_stop, row_start - 1, -1):
                print(arr[i][col_start], end=' ')
        col_start += 1"
"Sort the following numbers ascendingly.arr = [3, 9, 5, 8, 6, 4]","def sort_ascendingly(arr):
    return sorted(arr)"
"Create an array of five numbers and output the result in reverse order.1, 2, 3, 4, 5","ans = [5,4,3,2,1]"
Create a dictionary with key as the string and values as the number of occurrences of the respective character in a given string.mystring,"dict = {
    'm': 1,
    'y': 1,
    's': 1,
    't': 1,
    'r': 1,
    'i': 1,
    'n': 1,
    'g': 1
}"
"Given a list of integers, write a program to check if there exist any pairs of numbers that sum to a given number.v = [2, 3, 4, 9], sum = 8","def findSumPairs(v, sum):  
    v.sort()
    l = 0
    r = len(v) - 1
    while l < r: 
        if v[l] + v[r] == sum:
            return True
        elif v[l] + v[r] > sum:
            r -= 1
        else:
            l += 1
    return False
  
v = [2, 3, 4, 9]
sum = 8
print(findSumPairs(v, sum))"
"Classify the following text as one of four categories: sport, technology, health, and entertainment.Apple just released their new line of laptops.",technology
Count the total number of words in a given text.The quick brown fox jumped over the lazy dog.,9
"Insert the correct syntax to define a constructor for the class Person given below.class Person {
  String name;
  int age;
}","class Person {
  String name;
  int age;
  
  Person(String name, int age) {
     this.name = name;
     this.age = age;
  }
}"
"Take a given array and find the number of unique values.[3, 8, 4, 3, 16, 8, 1]","function countUniqueValues(arr) {
  let seen = {};
  let count = 0;

  for (let num of arr) {
    if (!seen[num]) {
      seen[num] = true;
      count++;
    }
  }
  return count;
}

console.log(countUniqueValues([3, 8, 4, 3, 16, 8, 1]));
// output: 5"
Find the maximum of three integers without using any comparison operator.,"public static int max(int a, int b, int c) {
    int x = Math.max( a, b );
    int y = Math.max( b, c );
    int z = Math.max( x, y );
    return z;  
}"
Create a Angular component which has a text field and prints the user input when the user clicks a button.,"@Component({
  selector: 'app-input-form',
  template: `
    <input type=""text"" [(ngModel)]=""userInput"" />
    <button (click)=""printInput()"">Print User Input</button>
  `
})
export class InputFormComponent {

  userInput: string;

  printInput() {
    console.log(this.userInput)
  }

}"
"Construct an algorithm that finds the minimum element in an array of values.[5, 4, 11, 7, 12, 55, 3]","Create a variable called min and set its value to be the first element of the array.
Loop through elements of the array and compare the value at each index to the value of min.
If the value at the current index is less than min, update min with the current index's value.
When the loop has finished, min will contain the minimum element of the array."
"You are given a 2-dimensional array. Write a function in Python to find the sum of each row.arr = [[1, 3, 2],
       [4, 6, 5],
       [7, 9, 8]]","def row_sum(arr):
    row_sum_arr = []
    for row in arr:
        row_sum_arr.append(sum(row))
    return row_sum_arr

row_sum_arr = row_sum(arr)
print(row_sum_arr)
# Output: [6, 15, 24]"
"Concatenate two lists in Python (using an appropriate method).list1 = [1,2,3,4]
list2 = [5,6,7,8]",list3 = list1 + list2
"Define a function in Python that takes an integer and returns ""positive"" if it is positive, ""zero"" if the integer is 0, and ""negative"" if the integer is negative.","def pos_neg_zero(num):
  if num > 0:
    return ""positive""
  elif num < 0:
    return ""negative""
  else:
    return ""zero"""
Describe the algorithm and time complexity of selection sort.,The selection sort algorithm works by repeatedly finding the minimum element in an unsorted list and then swapping it with the element in the current position. The algorithm has a time complexity of O(n^2) as it has to iterate through both the subarray to find the minimum element and then swap it.
Create a program to lowercase all characters of a given string.HeLLo WoRLd,"public class LowerCase{
    public static void main(String args[]) {
		String str = ""HeLLo WoRLd"";
		System.out.println(""Original string: "" + str);
		System.out.println(""Lowercase string: "" + str.toLowerCase());
	}
}"
Write a sentence to describe how does a stack data structure works.,A stack data structure works by allowing elements to be added or removed from the top of the stack in a Last-In-First-Out (LIFO) order.
"Convert the following sentence into a valid regular expression.The text must contain the words “start”, “end”, and “here”.",^.*start.*end.*here.*$
"Calculate the sum of the following 2-dimensional array in Python.arr = [[1, 2], [3, 4], [5, 6]]","def sum_2d_array(arr):
 result = 0
 for row in arr:
  for num in row:
   result += num
 return result
 
print(sum_2d_array([[1, 2], [3, 4], [5, 6]]))"
"Create a function to group an array of numbers based on the following conditions.array = [3, 15, 10, 5, 11, 14]
conditions = [((3 <= x) & (x <= 10)), ((11 <= x) & (x <= 14))]","def group_arrays(array, conditions):
    groups = []
    for condition in conditions:
        group = [x for x in array if condition(x)]
        groups.append(group)
    return groups"
"Analyze the computational complexity of the following piece of code.int fun(int n){
    if(n < 2){
        return n;
    }
    return fun(n-1) + fun(n-2);
}","The function has a computational complexity of O(2^n) as it involves recursive calls. Each recursive call makes two additional calls, thus each call leads to two additional calls etc. Thus, the time complexity of the algorithm is exponential."
Reverse a string using the built-in function in R programming language.,"rev_string <- function(string) 
{
    rev_string <- paste(rev(strsplit(string, """")[[1]]), sep = """")
    return(rev_string)
}"
Write a Python script to find the prime factors of a number.Number: 24,"""""""
Write a Python script to find the prime factors of a number
""""""

def find_prime_factors(num):
    prime_factors = []
    for i in range(2, num+1):
        count = 0
        while num % i == 0:
            count += 1
            num //= i
        if count > 0:
            prime_factors.append((i, count))
 
    return prime_factors

if __name__ == '__main__':
    n = 24
    prime_factors = find_prime_factors(n)
    print(prime_factors)"
Create a function for detecting changes in an array of numbers.,"def detect_changes(numbers):
    results = []
    for i in range(1, len(numbers)):
        if numbers[i] != numbers[i-1]:
            results.append((i, numbers[i]))
    return results"
Write a code that adds two integers without using any arithmetic operators.,"def add_two_integers(a, b): 
    while b != 0:
        carry = a & b     
        a = a ^ b      
        b = carry << 1  
    return a"
"Sort this array of dictionaries by the value of 'popularity' in descending order.[
  {
    ""name"": ""Apple"",
    ""popularity"": 5
  },
  {
    ""name"": ""Orange"",
    ""popularity"": 2
  },
  {
    ""name"": ""Mango"",
    ""popularity"": 3
  },
  {
    ""name"": ""Grapes"",
    ""popularity"": 4
  }
]","arr.sort(key=lambda dict: dict['popularity'],reverse=True)"
"Create a list comprehension to generate a new list of composed strings.names = [""John"", ""Steve"", ""Bob""]
blanks = [""__'s cat"", ""__'s dog"", ""__'s parrot""]",[name + blank for name in names for blank in blanks]
"Write an R script to compute the sum of all the elements of a given list.list = c(1, 2, 3, 4, 5)","sum <- 0

for(i in list){
  sum <- sum + i
}

print(sum)

# Output: 15"
"Format the given string to capital letters and display the output.string = ""this is a text""","string = ""THIS IS A TEXT""
print(string)"
Create a Fibonacci series of n numbers.n = 5,"def fibonacci_sequence(n):
    a, b = 0, 1
    fib_series = [a]
    while b < n:
        fib_series.append(b)
        a, b = b, a+b
    return fib_series

print(fibonacci_sequence(n)) #[0, 1, 1, 2, 3]"
"Identify the purpose of the given lines of code.# Create a boolean variable
is_valid = True",The given code creates a boolean variable called is_valid and assigns it the value of True.
"Write a Python function to remove all elements from a set in another setSet A = {1, 2, 3, 4} 
Set B = {2, 3}","def remove_from_set(A, B):
  for element in B:
    A.discard(element)
  return A

A = {1, 2, 3, 4} 
B = {2, 3}

print(remove_from_set(A,B)) 
# Output: {1, 4}"
Create a fizz-buzz Python program to print numbers from 1 to 50 but for multiple of 3 print “Fizz” and for the multiple of 5 print “Buzz” and for numbers which are multiple of both 3 and 5 print “FizzBuzz”.,"for num in range(1,51): 
    if num % 3 == 0 and num % 5 == 0: 
        print(""FizzBuzz"") 
    elif num % 3 == 0: 
        print(""Fizz"") 
    elif num % 5 == 0: 
        print(""Buzz"") 
    else: 
        print(num)"
How would you write a function in Python for generating a Fibonacci sequence?,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
How would you search for an element in an array using a linear search algorithm in Python?,"def linearSearch(arr, x): 
 
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
 
    return -1"
"Create a list comprehension in Python to extract all the even numbers from a given list.list = [3,4,5,6,7,8]",evens_list = [num for num in list if num % 2 == 0]
"Compute the GCD of two numbers in Python.a = 10, b = 15","def gcd(a,b): 
    if(b==0): 
        return a 
    else: 
        return gcd(b,a%b) 
a = 10
b = 15
gcd = gcd(a,b) 
print(gcd)"
"Develop an algorithm in Python to reverse a given string.string = ""Hello""","def reverse(string):
    str = """" 
    for i in string: 
        str = i + str 
    return str
  
string = ""Hello""

print(reverse(string))"
"Create an in-place version of selection sort in Python.arr = [5, 2, 4, 6, 8, 1]","def selection_sort(arr): 

    # Traverse through all array elements 
    for i in range(len(arr)): 
  
        # Find the minimum element in remaining unsorted array 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
                
        # Swap the found minimum element with the first element         
        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
Identify the data type for the value in the given statement.value = 2 / 3,float.
Find the decimal value of the binary number 0110110.,54.
Generate a random hexadecimal string with a length of 8 characters.,"import random

def generate_hex():
    hex_values = '0123456789ABCDEF'
    string_length = 8
    hex_string = '' 
    for _ in range(string_length): 
        hex_character = random.choice(hex_values) 
        hex_string += hex_character
    return hex_string

if __name__ == '__main__':
    print(generate_hex())"
Create a variable to store the result of 2 + 5,result = 7
Classify the following sentence into one of the seven categories.Sentence: My cat came home late last night,Animal
Detect if the following string is a palindrome or notString: rabcr,false
"Write a code to output a substring of the given stringString: Hello World
Start: 3
End: 5","""""""
Write a code to output a substring of the given string
""""""

def substring(inp_str, start, end):
    return inp_str[start:end]

if __name__ == '__main__':
    inp_str = ""Hello World"" 
    start = 3
    end = 5
    print(substring(inp_str, start, end))"
Write a code to implement Multiple Linear Regression for a dataset.,"""""""
A code to implement Multiple Linear Regression for a given dataset
""""""

import numpy as np

def multiple_linear_regression(X, y):
    '''
    This function accepts feature matrix X and target vector y,
    and returns the coefficients of the determined multiple linear regression model.
    '''
    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1) 
    #concatenate a column of ones to X
    return np.linalg.inv(X.T @ X) @ X.T @ y"
Describe an efficient way to find the minimum value in an unsorted array.,One efficient way to find the minimum value in an unsorted array is to make use of the divide-and-conquer approach. We can split the array into two halves and find the minimum element in each of them. Then we can compare the two minimum elements to find the global minimum in the array. This approach runs in O(log n) time complexity.
How can you convert a binary search tree into an array?,"One way to convert a binary search tree into an array is to first use an inorder traversal to visit all the nodes of the tree in order. We can then store the node values into an array as we traverse. This will result in an array containing the elements in ascending order, which is the same order they would appear in the binary search tree. This approach runs in O(n) time complexity."
Construct a Linked List class.,"""""""
Construct a Linked List class
""""""

class Node: 
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def add_node(self, data):
        temp = Node(data) 
        temp.next = self.head
        self.head = temp
    
    def print_list(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

if __name__ == '__main__':
    llist = LinkedList()
    llist.add_node(1)
    llist.add_node(3)
    llist.add_node(5)
    llist.add_node(7)
    llist.print_list() # prints 7 5 3 1"
Construct a Fibonacci Heap class.,"""""""
Construct a Fibonacci Heap class
""""""

class FibonacciHeap:
    def __init__(self):
        self.min = None
        self.nodes = []
    
    def insert(self, node):
        self.nodes.append(node)
        if self.min is None or node.key < self.min.key:
            self.min = node
    
    def extract_min(self):
        min_node = self.min
        self.min = None
        return min_node 

if __name__ == '__main__':
    heap = FibonacciHeap()
    node1 = Node(3)
    node2 = Node(10)
    heap.insert(node1)
    heap.insert(node2)
    print(heap.extract_min().data) # prints 3"
"Edit the following code so that it will print out all the integer numbers between 0 and 10.for x in range(10):
    print(x)","for x in range(11):
    print(x)"
Construct a python program to determine if a number is prime or composite.,"# Program to determine whether a number is prime or composite

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

number = int(input(""Enter a number: ""))
if is_prime(number):
    print(f""{number} is a prime number."")
else:
    print(f""{number} is a composite number."")"
"Create a program to subtract the two numbers from the following input.first_num = 4
second_num = 2","first_num = 4
second_num = 2

# Program to subtract two numbers
diff = first_num - second_num

print(f""The difference between {first_num} and {second_num} is {diff}."")"
Implement a custom defined length function that works with strings.,"# Implementation of custom length function

def length(string):
    count = 0
    for char in string:
        count += 1
    return count

print(length(""Hello World!""))"
"Check if the following word is a palindromeword = ""level""","word = ""level""

# Program to check if a word is a palindrome

is_palindrome = True
for i in range(len(word)//2):
    if word[i] != word[len(word)-1-i]:
        is_palindrome = False
        break

if is_palindrome:
    print(f""{word} is a palindrome."")
else:
    print(f""{word} is not a palindrome."")"
Implement a class to calculate the sum of two numbers.,"# Program to calculate sum of two numbers

class Sum:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2
    
    def calculate_sum(self):
        return self.num1 + self.num2

num1 = 10
num2 = 20

s = Sum(num1, num2)
print(f""The sum of {num1} and {num2} is {s.calculate_sum()}."")"
"Compute the maximum and minimum number from the following list.my_list = [2, 4, 5, 7, 9]","my_list = [2, 4, 5, 7, 9]

# Program to compute maximum and minimum number

max_num = max(my_list)
min_num = min(my_list)

print(f""The maximum number from the list is {max_num} and the minimum number is {min_num}."")"
"Generate a function that prints all combination of unique integer elements from an array.Array: [1,2,3]","def print_all_combinations(arr):
    n = len(arr)
    result = []
    def combinations(arr, start, end, index, r):
        if index == r: 
            result.append(list(arr[start : end + 1]))  
            return
        for i in range(start, end + 1): 
            arr[start], arr[i] = arr[i], arr[start]  
            combinations(arr, start + 1, end, index + 1, r) 
            arr[start], arr[i] = arr[i], arr[start] 
  
    for i in range(1, n + 1):
        combinations(arr, 0, n - 1, 0, i)
    print(*result, sep = ""\n"")"
"Generate a function to flatten a nested list.list = [1, 2, [3, 4, [5]], [[6], 7]]","def flatten_list(list):
    s=[]
    
    for v in list:
        if isinstance(v, list):
            s+=flatten_list(v)
        else:
            s.append(v)
    
    return s"
Generate a method to print the Nth element of a Fibonacci sequence.N: 5,"def Fibonacci(n): 
    f1 = 0 
    f2= 1
    if n<1: 
        print(""Incorrect input"") 
    elif n == 1: 
        return 0
    elif n == 2: 
        return 1
    else:
        for x in range(2, n): 
            next = f1 + f2 
            f1 = f2 
            f2 = next 
        return f2"
Build a machine learning model to predict the outcome.Input dataset of 200 records with 10 features,"Using the input dataset, a machine learning model can be built to predict the outcome by training it on the features provided in the dataset."
"Change the last line of the code to assign the output of the function call to the variable n.def add_two_numbers(x, y):
    return x + y

# TODO:","def add_two_numbers(x, y):
    return x + y

n = add_two_numbers(x, y)"
Identify the parts of speech of the words in the sentence.The cat ran quickly across the street.,"The: article
cat: noun
ran: verb
quickly: adverb
across: preposition
the: article
street: noun"
"Construct a dictionary with the keys ""name"" and ""age"" and assign the appropriate values.Name: John
Age: 25","my_dict = {""name"": ""John"", ""age"": 25}"
Generate the list of numbers from 0 to 10 using a while loop.,"numbers = []
i = 0
while i <= 10:
    numbers.append(i)
    i += 1"
"Write a function to replace all whitespaces with the character '*'.my_string = ""This is a string with whitespaces""","def replace_whitespaces(string):
    return string.replace("" "", ""*"")

replace_whitespaces(my_string)"
"Generate a random text using the given code.seed_text = ""This is starting sentence.""","This is starting sentence. It was a sunny day with a gentle breeze. I walked slowly, taking in the scenery around me. The birds were singing and the grass was swaying in the wind. The sky was a brilliant blue with white clouds drifting by. I felt a peace come over me, a peace that I hadn't felt in a long time."
How do you install a Python package on Windows?,"The easiest way to install a Python package on Windows is to open the Command Prompt and type the command 'pip install <package name>'. This will install the package using pip, the Python package manager. Alternatively, Python packages can be installed using the Windows Subsystem for Linux (WSL). To do this, open a bash shell using the Windows Key + x and typing 'bash'. Then, type 'sudo apt install <package name>'. This will install the package from the Ubuntu repositories."
"Construct a CFG to describe the given language.The language {anbmcn | n, m ≥ 0}","S -> aSbc | aAbc | abM | a | bM | ε
A -> nA | ε
M -> mM | ε"
What is the mathematical expression for calculating next fibonacci number from any number?,The mathematical expression for calculating the next fibonacci number from any number is F(n+1)=F(n)+F(n-1) where n is the number for which we want to calculate the next fibonacci number.
Write a code that converts a given binary number to its equivalent decimal number.,"def binary_to_decimal(binary): 
    decimal = 0
    base = 1
    binary = str(binary)
    length = len(binary) 
    for i in range(length-1, -1, -1): 
        if (binary[i] == '1'):      
            decimal += base
        base = base * 2
    return decimal"
Create an if-else statement which checks if the number is positive or negative.int num = 5,"if (num > 0):
    print(""The number is positive"")
else:
    print(""The number is negative"")"
"Output the last four elements of the array.int[] arr = {1, 2, 3, 4, 5, 6, 7, 8}",print(arr[4:])
"Create a loop that prints out every other element in the given array.int[] arr = {1, 2, 3, 4, 5, 6, 7, 8}","for i in range(0, len(arr), 2):
    print(arr[i])"
"Write a function to remove any leading and trailing whitespaces from a given string.string str = ""   Hello World !""","def trim_whitespace(str):
    return str.strip()

print(trim_whitespace(str))"
"Create a loop that prints each letter in the given string one by one on a new line.string str = ""Hello World""","for i in str:
    print(i)"
"Create a function which takes an array as input and check if any of its elements are equal to the given value.Array: [1, 2, 3, 4, 5]
Value: 4","def element_equal(arr, value):
    """"""Check if any element in the array is equal to the given value.""""""
    for ele in arr:
        if ele == value:
            return True
    return False"
"Write code to calculate the mean of two numbersnumbers = [4, 6]","def mean(numbers):
    """"""Calculate the mean of two numbers""""""
    return sum(numbers) / len(numbers)"
Create a script to find the most and least frequent words in a given textText: This is a sample text with a few words that should be counted and analyzed.,"def frequent_words(text):
    """"""Find the most and least frequent words in a given text""""""
    words = text.split(' ')
    word_count = dict()

    for w in words:
        if w not in word_count:
            word_count[w] = 1
        else:
            word_count[w] += 1
    
    most_frequent_word = max(word_count, key=word_count.get)
    least_frequent_word = min(word_count, key=word_count.get)

    return most_frequent_word, least_frequent_word"
encode a given string using the Base64 algorithmString: MySuperSecretString,"import base64

def encode_base64(string):
    """"""Encode the given string using the Base64 algorithm""""""
    byte_string = string.encode('utf-8')
    return base64.b64encode(byte_string).decode('utf-8')"
"edit the code so that it prints out the resultval = 5
sum = 0
sum = sum + val","val = 5
sum = 0
sum += val
print(sum) # prints 5"
"Write a function to sort a list of integers in non-increasing order[9, 6, 7, 4, 3, 5]","def sort_desc(arr):
    """"""Sort a list of integers in non-increasing order.""""""
    return sorted(arr, reverse=True)"
Identify the type of variable initialization in the given codemy_var = 0,This is an implicit variable initialization.
"Create a function to check if an array contains any duplicate elements[1, 3, 5, 7, 9]","def has_duplicates(arr):
    """"""Check if an array contains any duplicate elements.""""""
    return len(arr) != len(set(arr))"
Convert the following timestamp to ISO 8601 format1579183000,"import time

def timestamp_to_iso8601(timestamp):
    """"""Convert the given timestamp to ISO 8601 format""""""
    return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.localtime(timestamp))"
"Create an object-oriented Python program to simulate a simple calculator with a add, subtract and \multiply"" function","""""""Object-oriented Python program to simulate a simple calculator with add, subtract and multiply function""""""

# create a class Calculator
class Calculator:

    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y

    def multiply(self, x, y):
        return x * y

# create an instance of class Calculator
calc = Calculator()

# call the add, subtract and multiply functions 
print(calc.add(5,5))
print(calc.subtract(5,5))
print(calc.multiply(5,5))"
"Edit the code to output the sum of array elements.arr = [5, 20, 15]","arr = [5, 20, 15]

total = 0
for num in arr:
    total += num

print(total) # Output: 40"
"Write a function that prints values from the given list in one line separated by a comma and a space.list = [4, 10, 15]","def print_list(list):
    for item in list:
        print(item, end=', ')

print_list(list) # Output: 4, 10, 15,"
"Classify the following words according to their part-of-speech tags.busy, psychology, running","Adjective, Noun, Verb."
"Create a program to calculate the total marks of a student.Marks of 5 Subjects:
English: 35
Maths: 88
Chemistry: 70
Physics: 45
Computer: 80","def calculate_total(marks):
    total = 0
    for mark in marks:
        total += mark
    return total

scores = {
    ""English"": 35,
    ""Maths"": 88,
    ""Chemistry"": 70,
    ""Physics"": 45,
    ""Computer"": 80
}

total_marks = calculate_total(scores.values())
print(total_marks) # Output: 328"
Write a code to reverse a sentence word by word.This is a sentence,"def reverse_words(sentence):
    words = sentence.split(' ')
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)
    
print(reverse_words('This is a sentence')) # Output: sihT si a ecnetnes"
Generate a random number between 0 and 1 using the random module in Python.,"import random

random_number = random.random()
print(random_number) # Output: 0.00549342319234"
Create a generator which generates the first ten square numbers.,"def generate_squares():
    for num in range(1, 11):
        yield num**2

for square in generate_squares():
    print(square, end=', ') # Output: 1, 4, 9, 16, 25, 36, 49, 64, 81, 100,"
"Transform the following regular expression so that it matches any string that doesn't contain ""cat"".let regex = /cat/",let regex = /^(?:(?!cat).)*$/
"Compute the overall rating for each product as the weighted sum of ratings given for each feature.product_id | feature_id | rating 
1 | 1 | 5 
1 | 2 | 4 
1 | 3 | 2","SELECT product_id, SUM(rating * weight) AS Overall_Rating
FROM (
  SELECT product_id, feature_id, rating, weight 
  FROM products 
  INNER JOIN features 
  ON products.product_id = features.product_id
) tmp 
GROUP BY product_id;"
"Update the code so that the function will add all numbers in the array.function add(arr) {
  let total = 0;
  arr.forEach(num => total += num);
  //TODO
  return total;
}","function add(arr) {
  let total = 0;  
  arr.forEach(num => total += num);
  total = total/arr.length;
  return total;
}"
"Write a Python program to find all pairs of numbers in the given list whose sum is equal to the given number.nums = [1, 2, 3, 4, 5], sum = 8","def find_pairs(nums, sum):
  result = []
  for i in range(len(nums)):
    for j in range(i+1, len(nums)):
      if nums[i] + nums[j] == sum:
        result.append((nums[i], nums[j]))
  return result

res = find_pairs(nums, sum)
print(res)
# Output: [(2, 6), (3, 5)]"
"Edit the following program to add all the numbers in the given array.let numbers = [2, 10, 5, 4, 3];

function add(arr) {
  let total = 0;
  arr.forEach(num => total += num);
  //TODO
  return total;
}","let numbers = [2, 10, 5, 4, 3];

function add(arr) {
  let total = 0;  
  arr.forEach(num => total += num);
  total = total/arr.length;
  return total;
}"
"Store the given data in a dictionary structure in python.key: name 
value: John","mydict = {
    ""name"": ""John""
}"
"Write a stored procedure for a search query.Table name: myTable
Search query: select all the records from myTable where name is like ‘John’","CREATE PROCEDURE SearchMyTable
    @Name varchar(50)
AS 
BEGIN 
    SELECT * 
    FROM myTable 
    WHERE Name LIKE '%' + @Name + '%' 
END"
"Write a regular expression to validate a string which contains the characters ""a"", ""b"", ""c"".",^[a-c]+$
"Write a JS code to detect peaks for an array of numbers.[4, 2, 3, 6, 10, 1, 12, 5]","let numArray = [4, 2, 3, 6, 10, 1, 12, 5];
let peakIndexes = [];
for (let i = 1; i < numArray.length - 1; i++) {
    let left = numArray[i - 1];
    let center = numArray[i];
    let right = numArray[i + 1];

    if (center > left && center > right) {
        peakIndexes.push(i);
    }
}

console.log(peakIndexes);
// Output: [3, 5, 6]"
"Write a recursive function in JS to traverse a multi-dimensional array.let arr = [
  [1, 2],
  [3, 4],
  [5, 6]
];","function traverseArray (arr) {
  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      traverseArray(arr[i]);
    } else {
      console.log(arr[i]);
    }
  }
}

traverseArray(arr);
// Output: 1, 2, 3, 4, 5, 6"
"Write a Python script to find all the numbers which are divisible by 7, but are not multiples of 5; between 2000 and 3200 (both included).","res = []
for i in range(2000, 3200):
    if (i%7 == 0) and (i%5 != 0):
        res.append(str(i))

print(','.join(res))"
Generate a 5 rows by 4 columns matrix of random numbers between 0 and 10 in Python,"import random 

matrix = [] 
for i in range(5): 
    matrix.append([random.randint(0, 10) for j in range(4)]) 

print(matrix)"
Construct a regex pattern to validate an email address.,^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
Describe the main use of a router in computer networking.,"A router is a networking device that forwards data packets between networks. It works by examining the destination address of each packet and forwarding it to the correct final destination. Routers play an important role in computer networks, helping to connect networks together and routing traffic between them efficiently. They also provide security by helping to control network access and creating virtual networks to segment traffic."
"Provide the output from executing the given program.matrix = [
  [1, 2, 3], 
  [4, 5, 6], 
  [7, 8, 9]
]
for row in matrix:
    print(row[1])","2
5
8"
"Add try-catch blocks to the following code.while True:
    try:
        x = int(input('Please input a number:'))
        break
    except ValueError:
        print('Enter a valid number!')","while True:
    try:
        x = int(input('Please input a number:'))
        break
    except ValueError:
        print('Enter a valid number!')
        try:
            print('Retry') 
        except:
            print('Failed to retry')"
Create a list of integers from 16 to 34.,"[16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]"
Use a nested loop to print the output.,"for i in range(3):
    for j in range(3):
        print('*', end=' ')
    print()"
"Determine the data type of the following string.a = ""#@$ What's up? %^&$$*&""",string
"Edit the following program to output a list of the numbers that are divisible by 3numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]","numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]

result = []
for num in numbers:
    if num % 3 == 0:
        result.append(num)

print(result)"
What needs to be done to use the random module in Python?,"The random module needs to be imported in order to use it in Python. To do this, you can use the following line of code: ""import random"". Once the module has been imported, you can use the functions provided by the module in your code."
Write a regular expression to match a positive or negative floating-point number.,"The regular expression to match a positive or negative floating-point number is ""(-?\d*\.\d+)|(-?\d+\.\d*)"". This regular expression will match both positive and negative numbers, with or without decimal points."
"Identify the bug in the following code and provide a solution.def calculate_average(numbers):
    sum = 0
    for number in numbers:
       sum += numbers
    return sum/len(numbers)","The bug in the code is that the variable ""number"" is not used inside the for loop. Instead, the variable ""numbers"" is used. To fix this, the line ""sum += numbers"" should be replaced with ""sum += number"". This will ensure that the correct variable is used inside the loop and the code will execute as expected."
Recognize the type of a credit card from the given string of numbers.4111 2029 3219 9480,Visa
"Merge two sorted arrays.[1, 2, 4, 5] & [3, 6, 7, 8]","// Merging two sorted arrays 
int[] a1 = {1, 2, 4, 5}; 
int[] a2 = {3, 6, 7, 8}; 

int length1 = a1.length;
int length2 = a2.length;

int[] mergedArray = new int[length1 + length2];

// indexes for main array 
int i = 0;
int j = 0;
int k = 0;

while (i < length1 && j < length2)
{
    if (a1[i] < a2[j]) 
    { 
        mergedArray[k] = a1[i]; 
        i++; 
    } 
    else
    { 
        mergedArray[k] = a2[j]; 
        j++; 
    } 
    k++; 
} 

// check for remaining elements of a1[] 
while (i < length1) 
{ 
    mergedArray[k] = a1[i]; 
    i++; 
    k++; 
} 

// check for remaining elements of a2[] 
while (j < length2) 
{ 
    mergedArray[k] = a2[j]; 
    j++; 
    k++; 
}"
"Given an array of size n, find the kth largest element by using a Heap.[9, 8, 7, 6, 5], k=2","// Initialize max heap
PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder()); 

// kth element to be found 
int k = 2; 
      
int[] arr = {9, 8, 7, 6, 5};

// add elements to max heap 
for (int i : arr) 
    maxHeap.add(i); 
      
// Extract kth largest elements 
for (int i=0; i<k; i++) 
        System.out.print(maxHeap.poll() + "" "");

Output: 8 7"
Convert a given binary tree to a doubly linked list.,"// Java Program to convert binary tree to doubly linked list 
public class BinaryTreeToDLL { 
  
    Node root; 
      
    // A simple recursive function to convert a given Binary tree 
    // to Doubly Linked List 
    Node BTTDLL(Node root) { 
          
        // Base case 
        if (root == null) 
            return root; 
      
        // Convert the left subtree and link to root 
        if (root.left != null) { 
              
            // Convert the left subtree 
            Node left = BTTDLL(root.left); 
      
            // Find inorder predecessor. After this loop, left 
            // will point to the inorder predecessor 
            for (; left.right != null; left = left.right); 
      
            // Make root as next of the predecessor 
            left.right = root; 
      
            // Make predecssor as previous of root 
            root.left = left; 
        } 
      
        // Convert the right subtree and link to root 
        if (root.right != null) { 
              
            // Convert the right subtree 
            Node right = BTTDLL(root.right); 
      
            // Find inorder successor. After this loop, right 
            // will point to the inorder successor 
            for (; right.left != null; right = right.left); 
      
            // Make root as previous of successor 
            right.left = root; 
      
            // Make successor as next of root 
            root.right = right; 
        } 
      
        return root; 
    } 
}"
Create a function that examines the character and determines if it's an uppercase letter or not.,"def is_uppercase(character):
    if character.isalpha and character.isupper():
        return True
    else:
        return False"
"Sort the array of strings lexicographically.arr = [""james"", ""john"", ""bob"", ""michelle""]","def sort_strings_lexicographically(arr):
    return sorted(arr)"
"Iterate over a given array and modify each element by adding a constant value to it.arr = [3, 7, 8], constant = 4","def modify_elements(arr, constant):
    for i in range(len(arr)):
        arr[i] += constant"
"Given a string and two substrings, create a function to replace the two substrings with another string.main_string = ""Replace the first and last substring with this string"", start_substring = ""first"", end_substring = ""last""","def replace_substrings(main_string, start_substring, end_substring):
    start_index = main_string.index(start_substring)
    end_index = main_string.index(end_substring) + len(end_substring)
    return main_string[:start_index] + ""this string"" + main_string[end_index:]"
"Compare two given arrays and find the common elements present in botharr1 = [1, 2, 3, 5], arr2 = [3, 5, 7, 8]","def get_common_elements(arr1, arr2):
    common_elements = []
    for a in arr1:
        if a in arr2:
            common_elements.append(a)
    return common_elements"
"Produce an alphabetically sorted list from a given set containing both strings and integerss = {1, 3, 5, 1.2, ""John"", ""Bob""}","def sort_alpha_numeric_list(s):
    return sorted(s, key = lambda x: str(x))"
"Summarize the key concepts in this Python code snippet.import random

for x in range(0, 10):
  print(""Random number generated: "", random.randrange(1, 10))","This Python code snippet generates and prints out 10 random numbers between 1 and 10 using the ""random.randrange()"" function."
"Given the input dictionary below, create a list containing all the items of the dictionary.my_dict = {
    ""name"": ""John"",
    ""age"": 21,
    ""place"": ""Delhi""
}","my_list = list(my_dict.values())
print(my_list)
# Output: [""John"", 21, ""Delhi""]"
"Write a function in Python to calculate the number of minutes a user has been logged in.log_in_time = '11:30:00', log_out_time = '13:30:00'","def calculate_time_difference(log_in_time, log_out_time) :
  time_in = datetime.strptime(log_in_time, '%H:%M:%S')
  time_out = datetime.strptime(log_out_time, '%H:%M:%S')
  diff = time_out - time_in
  minute_difference = diff.seconds // 60
  return minute_difference

print(calculate_time_difference('11:30:00', '13:30:00'))
# Output: 120"
"Edit the following for loop to add a counter that tracks the number of iterations of the loop.for i in range(10):
  print(i)","counter = 0

for i in range(10):
  print(i)
  counter += 1

print(f""Number of iterations: {counter}"")"
"Given the following two lists, combine them into a single list containing each element of both the lists in order.list_first = [1, 2, 3]
list_second = [4, 5, 6]","list_combined = list_first + list_second
print(list_combined)
# Output: [1, 2, 3, 4, 5, 6]"
"Using the input list, write a function to calculate the sum of all the elements in the list.my_list = [1, 2, 3, 4]","def calculate_sum(my_list):
    sum = 0
    for i in my_list:
        sum += i
    return sum

print(calculate_sum(my_list))
# Output: 10"
"Given the following list, create a Python dictionary having the ID as the key and the full name as the value.my_list = [('John', '1'), ('Alice', '2'), ('Bob', '3')]","my_dict = dict(my_list)
print(my_dict)
# Output: {'John': '1', 'Alice': '2', 'Bob': '3'}"
Create a new virtual environment for Python.,"Convert your current directory to a virtual environment:

python3 -m venv <name of virtual environment>

Activate the virtual environment:

source <name of virtual environment>/bin/activate
    
Deactivate the virtual environment:

deactivate"
Assign a value of 123 to the variable x.,x = 123
Create a function that adds two integers and subtracts a third.,"def add_subtract(a, b, c):
  return a + b - c"
"Compute the product of two matrices.A [[2, 4], [3, 7]]
B [[9, 2], [7, 1]]","# Python Program to calculate the product of two matrices 

A = [[2, 4], [3, 7]] 
B = [[9, 2], [7, 1]] 
  

# function to calculate the product of two matrices 
def multiplyMatrix(A, B): 
  
    rowsA = len(A) 
    colsA = len(A[0]) 
    rowsB = len(B) 
    colsB = len(B[0]) 
  
    if colsA != rowsB: 
        print(""Cannot multiply the two matrices. Incorrect dimensions."") 
        return
  
    # Create an empty product matrix C[rowA][colB] 
    C = [[0 for row in range(colsB)] for col in range(rowsA)] 
  
    # Multiply and fill in the product matrix 
    for i in range(rowsA): 
        for j in range(colsB): 
            for k in range(colsA): 
                  C[i][j] += A[i][k] * B[k][j] 
  
    return C 
  
  
# Print the product 
result = multiplyMatrix(A, B) 
for r in result: 
    print(r)"
"Develop a Python script to print out a given string 5 times.str = ""Hello World!""","for i in range(5):
  print(str)"
"Classify the following sentence as either statement or question.""She had taken the train to France.""",Statement.
"Write a Python class for a Person with attributes name, age, and address.","class Person:
  def __init__(self, name, age, address):
    self.name = name
    self.age = age
    self.address = address
    
  def setName(self, name):
    self.name = name
  
  def getName(self):
    return self.name
  
  def setAge(self, age):
    self.age = age
  
  def getAge(self):
    return self.age
  
  def setAddress(self, address):
    self.address = address
  
  def getAddress(self):
    return self.address"
How do you add an element to the end of an array in Python?,"To add an element to the end of an array in Python, use the append() method. For example, to add the element ""apple"" to the end of the array [""orange"", ""banana""], use the following code:

my_array = [""orange"", ""banana""]
my_array.append(""apple"")"
Construct a while loop that prints the numbers from 10 to 100 incrementing by 4 with each iteration.,"num = 10

while num <= 100:
    print(num)
    num += 4"
Write a Python code that checks if a given string only contains alphabets.,"import re 
  
def is_alphabetic(string):  
    Pattern = re.compile(""^[a-zA-Z]*$"")
    return bool(Pattern.match(string))"
Construct a for loop that iterates 10 times and prints the square of each iteration.,"for i in range(10):
    print(i**2)"
"Construct an if-else statement that takes an integer as an argument and prints ""positive"" if the value is greater than 0 and ""negative"" if the value is less than 0.7","if (num > 0) {
    cout << ""positive"";
}
else {
    cout << ""negative"";
}"
"Write a Python code to compute the dot product of two given vectors.[1, 2, 3] and [4, 5, 6]","def dot_product(v1, v2):
    product = 0
    for i in range(len(v1)):
        product += v1[i] * v2[i]
    return product"
Identify the string format required to display the date in the following format: dd/mm/yyyy.,"""%d/%m/%Y"""
"Compare two strings and identify the first index of a mismatch.String 1: stack
String 2: stacc",Index: 4
"Print the length of an array containing the numbers [6, 5, 9, 15].",4
"Create a for loop in Python to find the combined length of all the strings in a list.list = ['Data', 'Science', 'AI']","total_length = 0

for s in list:
   total_length += len(s)

print(total_length)"
"Implement a function in Python to reverse the contents of a given dictionary.dictionary = {
    ""name"": ""John Doe"", 
    ""age"": 30,
    ""city"": ""New York""
    }","def reverse_dictionary(d): 
    return dict(zip(d.values(), d.keys())) 

print(reverse_dictionary(dictionary))"
"Calculate the dot product of two given 3x3 and 3x1 matrices.Matrix 1:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

Matrix 2:
[1]
[2]
[3]",dot_product = 38
Generate a 3x3 identity matrix.,"[[1, 0, 0], 
 [0, 1, 0], 
 [0, 0, 1]]"
"Write a Python script to Iterate over a given list and print the square of the numbers in the list.list = [3, 4, 5]","for num in list:
  print(num*num)"
Create a function to reverse a list without using the reverse() method.,"def reverse_list(lst): 
    reversed_list = [] 
    for i in range(len(lst) - 1, -1, -1): 
        reversed_list.append(lst[i]) 
    return reversed_list"
"Name the variable used for looping in this for loop.for i in range(1, 7):
    print(i)",The variable used is i.
"Rewrite the code snippet using a different loop structure.i = 0
while i < 5:
    print(i)
    i += 1","for i in range(0, 5):
    print(i)"
"Classify the type of error in the following code snippet.for i in range(5):
    print(i, sum)","The type of error here is a NameError, where a variable is referenced without having been previously defined."
Calculate the factorial of x and store it in the variable y.x = 5,y = 120 # 5! = 1 * 2 * 3 * 4 * 5 = 120
"Edit the code so that it does not throw an error.a = 2 + 3
b = a * 2
c = b / a

z = b + c","a = 2 + 3
b = a * 2
c = b / a

# We need to explicitly convert c to an integer before doing the addition.
z = b + int(c)"
"Find the maximum and minimum values in a given array.array = [2, 3, 5, 1, 9]","maxValue = 9 
minValue = 1"
"Write a script to sort a linear array in descending orderarr = [2, 4, 1, 8, 10, 7, 9]","arr.sort(reverse=True)
print(arr)"
"Given an array of n elements and an integer k, find the subarray with the maximum sum less than k.arr = [1, 4, 6, 8, -5, 7], k = 11","max_sum = 0 
start = 0 
end = 0

# Loop through each element of the array
for i in range(len(arr)): 
    sum = 0
  
    # Find maximum sum subarray
    for j in range(i, len(arr)): 
        sum += arr[j] 
        if (sum > max_sum and sum <= k): 
            max_sum = sum 
            start = i 
            end = j 
  
# Print maximum subarray
print(""Maximum sum subarray with sum <="", k, ""is"") 
print(""["", end="""") 
for i in range(start, end+1): 
    print(arr[i], end="", "") 
print(""]"")"
"Modify the previous program to also print the sum of the subarray elementsarr = [1, 4, 6, 8, -5, 7], k = 11","max_sum = 0 
start = 0 
end = 0

# Loop through each element of the array
for i in range(len(arr)): 
    sum = 0
  
    # Find maximum sum subarray
    for j in range(i, len(arr)): 
        sum += arr[j] 
        if (sum > max_sum and sum <= k): 
            max_sum = sum 
            start = i 
            end = j 
  
# Print maximum subarray and its sum
print(""Maximum sum subarray with sum <="", k, ""is"") 
print(""["", end="""") 
for i in range(start, end+1): 
    print(arr[i], end="", "") 
print(""]"")
print(""Sum of the subarray elements:"", max_sum)"
"Name the outlier value in the following array of integer valuesarr = [121, 124, 127, 130, 135]",135
Create a program that finds all the prime numbers between 1-100,"for number in range(1,101):
    # To check if a number is prime or not
    is_prime = True
  
    # We need to check until the square root of that number
    for i in range(2, int(number**0.5)+1):
        if number % i == 0:
            is_prime = False
            break
  
    if is_prime:
        print(number, end="" "")"
"Assume you are given two integer variables, b and c, write a program to multiply these two numbers without using the asterisk (*) operatorb = 5, c= 7","mult = 0 
for i in range(0, abs(b)): 
    mult = mult + abs(c) 
  
if (b < 0 and c < 0) or (b > 0 and c > 0): 
    print(mult) 
else: 
    print(-mult)"
Design a program that takes a date in the format dd/mm/yyyy as input and prints the day of that given date01/02/2020,"day = int(input(""Enter date in dd/mm/yyyy format: "").split('/')[0])
month = int(input(""Enter date in dd/mm/yyyy format: "").split('/')[1])
year = int(input(""Enter date in dd/mm/yyyy format: "").split('/')[2])

# Determine day name
day_num = datetime(year, month, day).weekday()
days = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]
day_name = days[day_num]

print(""The day is: "", day_name)"
"Sort an array of integers according to their frequency of occurrencearr = [1, 1, 2, 2, 2, 3, 4, 4]","freq = {}
for i in arr:
    if i in freq.keys():
        freq[i] += 1
    else: 
        freq[i] = 1

# Create list of tuple
freq_lst = []
for k,v in freq.items():
    freq_lst.append((k,v))

# Sort the list of tuple in descending order
freq_lst = sorted(freq_lst, key = lambda x : x[1], reverse = True)

# Create list from sorted tuple
sorted_arr = [i[0] for i in freq_lst]
print(sorted_arr)"
Create a program that prints out the set of all prime divisors of a given numbernum = 50,"primes = []
for i in range(2, num+1):
    is_prime = True
    for j in range(2, int(i**0.5)+1):
        if (i % j) == 0:
            is_prime = False
            break

    if is_prime:
        primes.append(i)

prime_divisors = {i for i in primes if num % i == 0}
print(prime_divisors)"
"Use the given code to create a Pandas Dataframe.data = {'Name': ['Jack', 'James', 'Joe'], 
        'Age': [21, 22, 23]}","import pandas as pd
df = pd.DataFrame(data)"
"Insert a given element into the correct position of the list.list = [1,3,4,5]
element = 2","list = [1,2,3,4,5]"
"Create a loop for the given range of numbers.start = 5
end = 10","for i in range(start, end+1):
    print(i)"
"Use a try-except block to check if a given string can be converted to a float.str = ""123.45""","try:
    float(str)
    print(""Valid"")
except ValueError:
    print(""Invalid"")"
"Create a dictionary to store the phone numbers of your friends.list_friends = [""John"", ""Doe"", ""Jane"", ""Smith""]","friends_phone_numbers = {}
for name in list_friends:
    phone_number = input(f'Please enter the phone number for {name}: ')
    friends_phone_numbers[name] = phone_number"
"Create a script in Python for printing the Fibonacci series for a given range of numbers.start = 1
end = 10","a,b = 0,1
for i in range(start, end+1):
    print(a)
    a,b = b,a+b"
"Write a python program to remove all the elements from a list that are less than 10.mylist = [4, 7, 21, 24, 88, 12]","def remove_less_than_10(mylist):
    return [n for n in mylist if n >= 10]"
"Write a function to rearrange the elements of an array in such a way that no two same numbers are adjacent to each other.mylist = [2, 5, 9, 2, 1, 5, 9, 0]","def rearrange(mylist): 
    mylist.sort() 
    length = len(mylist) 
    temp = [0]*(length + 1) 
       
    # to store indexes of mylist[] 
    j, k = 0, length-1;
       
    # filling temp[] from both sides 
    for i in range(length): 
          
        if i%2==0: 
            temp[i] = mylist[j] 
            j += 1
        else: 
            temp[i] = mylist[k] 
            k -= 1
       
    # modify original array 
    for i in range(length): 
        mylist[i] = temp[i]
    return mylist"
Create a class in Python named 'Bar' that has an attribute named 'fname' and a single method named 'sayHello'.,"class Bar:
  def __init__(self, fname):
    self.fname = fname
  
  def sayHello(self):
    print ""Hello, "" + self.fname + ""!"""
"Translate a given string of comma-separated words into a list of words in Python.""apple, orange, grape""","words = ""apple, orange, grape"".split("", "")
print(words) # ['apple', 'orange', 'grape']"
Create a class in Python named 'Foo' that has two methods named 'add' and 'subtract' to add and subtract two given numbers respectively.,"class Foo:
  def add(self, num1, num2):
    return num1 + num2

  def subtract(self, num1, num2):
    return num1 - num2"
Implement a function that determines whether an integer is odd or even.,"def is_even(n):
  return n % 2 == 0"
"Create a programming language syntax to print ""Hello, World!""","println(""Hello, World!"")"
"What is the algorithm used in the following python snippet?defbinarySearch( arr, low, high, x): 
   
    if high >= low: 
  
        mid = (high + low) // 2
  
        # Check if x is present at mid 
        if arr[mid] == x: 
            return mid 
  
        # If x is greater, ignore left half 
        elif arr[mid] < x: 
            return binarySearch(arr, mid + 1, high, x) 
  
        # If x is smaller, ignore right half 
        else: 
            return binarySearch(arr, low, mid - 1, x)","The algorithm used in this python snippet is a binary search algorithm. Binary search is an efficient search algorithm that searches a sorted array for a specified element in O(log n) time complexity. The algorithm works by first determining the median of the array, and then comparing the value at the median to the value being searched for. If the value at the median is the same as the value being searched for, the algorithm returns the index at which it found the element. Otherwise, it will either ignore the left or right half of the array depending on whether the value at the median is larger or smaller than the value being searched for. The algorithm then repeats this step on the narrowed down subarray until the element is found."
Suggest a way to gracefully handle errors in Python code.,"In Python, errors can be handled gracefully using try and except blocks. The try block contains the code that might throw an exception and the except block is used to handle the exception. In addition, the finally block is used to perform any clean up after the code is executed. Additionally, custom exception classes can be implemented and used to handle errors more granularly."
How can you sort a list of integers by their absolute value in Python?,"You can sort a list of integers by their absolute value using the sort() method. For example: 
 
numbers = [2, -1, 5, 0, -4] 
numbers.sort(key = lambda x: abs(x)) 
print(numbers)
# Output: [0, -1, 2, -4, 5]"
How can you remove the duplicate items from a list of integers in Python?,"You can remove the duplicate items from a list of integers in Python by using the set() function. For example:

a = [1, 2, 3, 3, 4]
b = list(set(a))
print(b)
# Output: [1, 2, 3, 4]"
"Write code to construct an objectGiven a class Patient with the following constructor:
```python
class Patient:
    def __init__(self, name, age, illness, medical_record):
		self.name = name
		self.age = age
		self.illness = illness
		self.medical_record = medical_record
```","p1 = Patient(""John"", 45, ""Diabetes"", ""1234567890"")"
"Create a list comprehensionGiven a list of numbers: nums = [1, 2, 3, 4, 5]",[x*2 for x in nums]
"Find the length of the longest substring without repeating charactersstring = ""abcabcbb""","def longest_substring(string):
    longest_substring = """"
    curr_substring = """"
    char_set = set()
    for char in string:
        if char not in char_set:
            curr_substring += char
            char_set.add(char)
        else:
            if len(curr_substring) > len(longest_substring):
                longest_substring = curr_substring
            curr_substring = char
            char_set = set(char)
    if len(curr_substring) > len(longest_substring):
        longest_substring = curr_substring
    return len(longest_substring)"
Implement a Go program that takes a string as input and prints its reverse.,"package main

import ""fmt""

func main() {
    var str string
    fmt.Printf(""Enter a string: "")
    fmt.Scanf(""%s\n"", &str)
    fmt.Printf(""The reverse of the string is %s\n"", reverse(str))
}

func reverse(s string) string {
    r := []rune(s)
    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {
        r[i], r[j] = r[j], r[i]
    }
    return string(r)
}"
Write Python code to find the nth element of a Fibonacci sequence.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
"Find the sum of all the items in this array of integers.[3, 8, 17, 29, 32, 33]",122
Find the GCD (greatest common divisor) of 12 and 18.,6
"Sort this array of numbers from low to high.[21, 8, 18, 32, 56]","[8, 18, 21, 32, 56]"
Write a Recurrent Neural Network (RNN) in Keras for sentence classification.,"import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

model = Sequential()

# input layer with embedding
model.add(Embedding(input_dim = vocab_size, output_dim = 32, input_length = max_length))

# lstm layer
model.add(LSTM(16))

# output layer
model.add(Dense(1, activation='sigmoid'))

# compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# train the model
model.fit(X_train, y_train, epochs=10, batch_size=128)

# evaluate the model
score = model.evaluate(X_test, y_test, batch_size=128)"
"Design an algorithm that sorts a given array of integers in ascending order.[5, 4, 2, 6, 1]","def sort_array(arr):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] = arr[j+1], arr[j]
  return arr"
Construct an XML document for storing a collection of books and their authors.,"<?xml version=""1.0"" encoding=""UTF-8""?>
 
<books>
  <book id=""1"">
    <title>Book 1</title>
    <author>John Doe</author>
  </book>
  <book id=""2"">
    <title>Book 2</title>
    <author>Jane Doe</author>
  </book>
  <book id=""3"">
    <title>Book 3</title>
    <author>Robert Smith</author>
  </book>
</books>"
How can we inverse the numerical order of elements stored in an array?,"To invert the order of elements stored in an array, we can use the reverse() function. This function takes in an array and reverses the order of the elements in-place, returning nothing. The syntax is as follows:

array.reverse()"
"Compute the mean of a list of integers within the range of 1-5.[1, 2, 4, 3, 5]","mean = 3.0 

# Calculate the sum of the list
total = 0
for i in range(len(list)):
 total += list[i]
 
# Calculate the mean
mean = total / len(list)"
"Replace the following if-else statement with a ternary operator.if n > 0:
  x = n * 10
else:
  x = n * 5",x = n * 10 if n > 0 else n * 5
Design a function that provides the square root of a number x.,"def square_root(x):
    return x ** 0.5"
How can we sort a dictionary by value in Python?,"We can use the sorted() function in combination with the operator.itemgetter() operator to sort the dictionary by value in Python. The syntax is as follows:

sorted(dictionary.items(), key=operator.itemgetter(1))"
"Update a given line of code to make a function return 'True' if both values are equal.def compare(val1, val2):
    if val1 == val2:","def compare(val1, val2):
    if val1 == val2:
      return True"
"Generate a unique key using the following string.my_str = ""Hello World""","import uuid 
 
key = uuid.uuid5(uuid.NAMESPACE_DNS, my_str)"
"Determine the maximum of two numbers.num1 = 10
num2 = 15","max_num = max(num1, num2)"
"Reverse the words of the sentence ""The quick brown fox jumps over the lazy dog"".",dog lazy the over jumps fox brown quick The
"Create a type with 4 fields, including ""name"", ""address"", ""phone"", and ""email"".","type ContactInfo {
  name: string;
  address: string;
  phone: string;
  email: string;
}"
"Rework the following code so that it prints the same output with fewer lines of code.int x = 13;
if (x == 13) {
  System.out.println(""x is 13"");
}","int x = 13;
System.out.println(x == 13 ? ""x is 13"" : """");"
Answer the following question: What is the difference between a keyword and an identifier in Python?,"In Python, a keyword is a reserved word that has a specific pre-defined meaning and purpose in the language, while an identifier is any name that you assign to a variable, function, class, module or any other object. Keywords are words that are reserved for specific functions and operations, while identifiers are used to name user-defined objects."
"Find the runtime complexity of the following algorithm in Big-O notation.def add_array_elements(arr):
    n = len(arr) 
    sum_elements = 0
    for i in range(0, n): 
        sum_elements += arr[i] 
    return sum_elements","The runtime complexity of the algorithm in Big-O notation is O(n), where n is the length of the array."
How would you calculate the sum of all integers between two given integers?,The sum of all integers between two given integers can be calculated by using the formula: sum = (first integer + last integer) * (last integer - first integer + 1) / 2.
How would you create a socket connection between two computers in a network?,"Creating a socket connection between two computers in a network involves setting up a Socket Server on one of the computers and a Socket Client on the other computer. The computer with the Socket Server will need to listen for any incoming connection. Then, the computer with the Socket Client will send a connection request to the Socket Server. When the connection is established, data can then be transmitted between the two computers."
"Create an inheritance hierarchy of three classes, ""Person"", ""Student"" and ""Professor""","class Person { 
  // properties and methods
} 
  
class Student extends Person { 
  // properties and methods
} 
  
class Professor extends Person { 
  // properties and methods
}"
"Given the following function that takes in a string and returns true if it is a palindrone. Rewrite the function to make it more optimized.def is_palindrome(s):
    s = str(s).lower().replace("" "","""")
    return s == s[::-1]","def is_palindrome(s):
    s = ''.join(char.lower() for char in s if char.isalpha())
    return s == s[::-1]"
"Add the `color` parameter to this function and make sure it works properly.def printShape(num, shape):
    for i in range(0,num):
        print(shape)","def printShape(num, shape, color):
	for i in range(0, num):
		print(color + shape)"
"Fix the following function to make it comply with PEP8 standards.def f(x):
k= x+4
return k","def f(x):
    k = x + 4
    return k"
"Complete the given function to print the Cartesian product of two sets.A = {0, 1, 2}
B = {3, 4, 5, 6}

def cartesian_product(A, B):","A = {0, 1, 2}
B = {3, 4, 5, 6}

def cartesian_product(A, B):
	C = set()
	for a in A:
		for b in B:
			C.add((a, b))
	return C"
Normalize the given string to lowercase and remove all punctuation marks.Hey! How are you?,hey how are you
"Sort the following list of dictionaries by the values of the keys.lst = [
{'a':2},
{'a':3},
{'a':1}
]","lst = [
{'a':2},
{'a':3},
{'a':1}
]

sorted_list = sorted(lst, key=lambda k: k['a'])"
"Given a list of prices, use a comprehension to calculate the average price.prices = [2.50, 3.25, 4.00, 1.75]","prices = [2.50, 3.25, 4.00, 1.75]

avg_price = sum([price for price in prices])/len(prices)"
"Given a list of words, create a reverse lookup dictionary (word as key, indices as values).words = ['apple', 'ball', 'cat', 'ball']","words = ['apple', 'ball', 'cat', 'ball']

reverse_lookup = {word: [i for i, v in enumerate(words) if v == word] for word in set(words)}"
Define a class in Python to represent a rectangle and add a method to calculate its area.,"class Rectangle:
    def __init__(self, length, width):
         self.length = length
         self.width = width

    def area(self):
        return self.length * self.width"
"Design a function in Python that takes two parameters, a list and a number, and returns a list where all elements are multiplied by the number.[1,2,3], 4","def mul_list(input_list, number): 
    return [x*number for x in input_list]"
"Write the following pseudocode in python""for each element in the list, check if the number is even""","for element in some_list:
    if element % 2 == 0:
        # do something"
Design a function in Python to split a sentence into words,"def split_sentence(sentence):
    return sentence.split(' ')"
"Create a function to search a list l for the value v.list l = [1, 2, 3, 4, 5, 6]
value v = 4","def search_list(l, v):
    # Iterate through the list
    for i in l:
        # Check if the current item is equal to v
        if i == v:
            return True
    
    # Return False if we did not find the value
    return False

# Search for the value 4
search_list([1, 2, 3, 4, 5, 6], 4) # Output: True"
"List the combinations of two lists l1 and l2.list l1 = [1, 2]
list l2 = [a, b]","[[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]"
Create a loop to iterate through the elements of an array arr.,"for (int i = 0; i < arr.length; i++) { 
  // code to run for each element
}"
Create an if statement to check if an integer i is between 1 and 10.,"if (i >= 1 && i <= 10) {
  // code to run if the condition is true
}"
"Output the most frequent letter in a given string s.String s = ""Hello World!""","String s = ""Hello World!""

// Create a HashMap to store frequency of each letter
Map<Character, Integer> freqMap = new HashMap<>();

// Loop through the string
for(char c : s.toCharArray())
{
  int freq = freqMap.getOrDefault(c, 0);
  // Update the frequency map
  freqMap.put(c, freq + 1);
}

// Find the letter with the highest frequency
int maxFreq = 0;
char maxLetter = ' ';
for(Map.Entry<Character, Integer> entry : freqMap.entrySet())
{
  int freq = entry.getValue();
  if (freq > maxFreq) {
    maxFreq = freq;
    maxLetter = entry.getKey();
  }
}

// Output the most frequent letter
System.out.println(maxLetter); // Output: l"
"Create a function that takes in a dictionary and returns a new dictionary with the values squared.my_dict = {1:5, 2:6, 3:7}","def squared_values(my_dict):
    """"""This function takes in a dictionary as an argument,
    and returns a new dictionary containing the values of the
    original dictionary squared.
    
    Parameters
    ----------
    my_dict : dict
        The input dictionary.
    Returns
    -------
    A new dictionary with the values of the original
    dictionary squared.
    """"""
    
    return {k : v**2 for k, v in my_dict.items()}"
"Create a code to sort a list of strings based on the length of the strings.my_list = ['apples', 'bananas', 'oranges']","def sort_strings_by_length(my_list):
    """"""This function takes in a list of strings and sorts
    them based on the length of the strings.
    
    Parameters
    ----------
    my_list : list
        The list of strings.
    
    Returns
    -------
    The sorted list of strings.
    """"""
    
    return sorted(my_list, key=len)"
"Create a function that takes in two lists of numbers and returns a new list of numbers in which each element is the sum of the corresponding elements in the two input lists.list1 = [1, 2, 3]
list2 = [4, 5, 6]","def add_lists_elementwise(list1, list2):
    """"""This function takes in two lists of numbers and 
    returns a new list of numbers in which each element
    is the sum of the corresponding elements in the 
    two input lists.
    
    Parameters
    ----------
    list1 : list
        The first list of numbers.
    list2 : list
        The second list of numbers.
    
    Returns
    -------
    A new list in which each element is the sum of the
    corresponding elements in the two input lists.
    """"""
    
    return [x + y for x, y in zip(list1, list2)]"
Create a code that sums the first n Fibonacci numbers.num = 5,"def sum_n_fibonacci_numbers(num):
    """"""This function takes in a number, n, and sums
    the first n Fibonacci numbers.
    
    Parameters
    ----------
    num : int
        The number of Fibonacci numbers to sum.
    
    Returns
    -------
    The sum of the first n Fibonacci numbers.
    """"""
    
    fib = [0, 1]
    if num < 0:
        return None
    elif num == 0:
        return 0
    elif num == 1:
        return 1
    else:
        for i in range(2, num + 1):
            fib.append(fib[i-2] + fib[i-1])
        return sum(fib)"
Generate a random list of 20 numbers between 1 and 100.,"[86, 19, 2, 8, 12, 37, 43, 48, 63, 68, 21, 4, 39, 55, 87, 23, 69, 61, 44, 91]"
"Sort a given array of numbers [4, 2, 5, 3, 1] in ascending order.[4, 2, 5, 3, 1]","[1, 2, 3, 4, 5]"
"Compare two sorted lists and return the elements that are present in both lists.list1 = [1, 3, 5, 6, 7]
list2 = [2, 3, 4, 5, 6]","[3, 5, 6]"
"Create a class Animal with two methods: speak(), which prints out the sound the animal makes, and eat() which prints out the food the animal eats.","class Animal():
    def __init__(self):
        pass
    def speak(self):
        print(""Animal sound"")
    def eat(self):
        print(""Animal food"")"
Generate a randomly generated 8 character alphanumeric string.,mZvx8ecz
Write a lambda function to add two given numbers.,"lambda x,y: x+y"
Translate the given sentence into Spanish.The cat is sitting on the mat.,El gato está sentado en la alfombra.
Write a Python script to generate random passwords with a combinations of 6 letters and numbers.,"import random

def generate_password(): 
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    password = ''
    for i in range(6):
        password += random.choice(chars)
    return password

print(generate_password())"
"Create a code that removes all duplicates from an input arrayArray = [1,2,3,3,2,1]","def remove_duplicates(arr):
    result = []
    for i in arr:
        if i not in result:
            result.append(i)
    return result

arr = [1,2,3,3,2,1]

print(remove_duplicates(arr))"
"Create a program that reverses an arrayArray = [1,2,3,4,5]","def reverse(arr):
    start = 0
    end = len(arr)-1
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    return arr

arr = [1,2,3,4,5]

print(reverse(arr))"
Classify the following programming language as either a general-purpose language or a domain-specific language.MATLAB,MATLAB is a domain-specific language.
"Figure out the output type of the following instruction: ""print('Hello World')"".",The output type is a string.
Create a dictionary where the keys are the letters of the alphabet and the values are integers from 1 to 26.,"alphabet_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}"
"Create a Python class to represent a Person object. The class should contain the person's name, age, and occupation.","class Person:
  def __init__(self, name, age, occupation):
    self.name = name
    self.age = age
    self.occupation = occupation"
"Write a function in Python to generate all permutations of the given list of letters.['a','b','c','d']","def permutations(letters):
 permutations = []
 for a in letters:
 for b in letters:
 for c in letters:
 for d in letters:
 permutations.append(''.join(sorted([a, b, c, d])))
 return permutations"
"Write a function to remove all duplicates from a given list of numbers and sort the remaining elements in ascending order.[1, 4, 3, 3, 7, 4, 8, 3]","def remove_duplicates(numbers):
 unique_numbers = set(numbers)
 sorted_numbers = sorted(unique_numbers)
 return sorted_numbers"
"Create a Python Search Algorithm to search for a given number in a given sorted array.data = [1, 7, 11, 14, 16]
search_num = 14","def search(data, search_num):
 for i in range(len(data)):
  if data[i] == search_num:
   return i
 return -1"
Write a function in Python to print a diamond pattern of stars.,"def diamond_pattern():
 row = 5
 for i in range(1, row + 1):
  print("" ""*(row-i)+""*""*(2*i-1))
 if row > 1:
  for i in range(row-1, 0, -1):
   print("" ""*(row-i)+""*""*(2*i-1))"
"Write a function in Python to implement a linear search algorithm. The algorithm should return the index of the number in the array if found, otherwise -1.data = [7, 13, 11, 9, 12]
search_num = 9","def linear_search(data, search_num):
 for index, num in enumerate(data):
  if num == search_num:
   return index
 return -1"
"Rewrite the above function in Python to use binary search algorithm instead of linear search.data = [7, 13, 11, 9, 12]
search_num = 9","def binary_search(data, search_num):
 low = 0
 high = len(data) - 1
 while low <= high:
  mid = (low + high)//2
  if data[mid] == search_num:
   return mid
  elif data[mid] < search_num:
   low = mid + 1
  else:
   high = mid - 1
 return -1"
Write a Python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2.n = 8,"def sum_series(n):
 sum = 0 
 for num in range(1, n + 1):
 sum += num**2
 return sum"
"How can this code be refactored to make it more efficient?x = 100
if (x > 50)
  y = x + 20
else
  y = x - 20",The code can be refactored as follows: y = x+20 if x > 50 else x-
Create a looping statement in Python to print the alphabet in lowercase.,"for letter in ""abcdefghijklmnopqrstuvwxyz"":
    print(letter)"
"Convert the string ""hello world"" to a byte array",b'hello world'
"Construct a for loop to iterate through a list of numbers and sum them together.numbers = [1, 2, 3, 4, 5]","total = 0
for number in numbers:
    total += number

print(""The sum is: "", total)"
"Parse the given XML document and print out the text content of the ""title"" element.<doc>
  <title>This is a title</title>
</doc>","import xml.etree.ElementTree as et

root = et.fromstring(""<doc><title>This is a title</title></doc>"")
title = root.find('title')
print(title.text)"
Create an array of size 128 with values initialized to 0.,array = [0] * 128
"Construct a loop to print all the items in the list.items = [""apple"", ""banana"", ""cherry""]","for item in items:
    print(item)"
"Print each character in the given stringstring = ""Hello World""","for char in string:
    print(char)"
"Rewrite the following function without using the ``for`` loop.def double_array(array):
    for i in range(len(array)):
        array[i] *= 2","def double_array(array):
    array[:] = [x * 2 for x in array]"
Create a program that prints the triangle pattern given a number of rows.5,"* 
* * 
* * * 
* * * * 
* * * * *"
"Reverse the list without using built-in list functionslist = [1, 2, 3, 4, 5]","list = [5, 4, 3, 2, 1]"
"Write a regex that matches the strings ""apple"" and ""match"".",/(apple)|(match)/
Create a Python class to store attributes of a student,"class Student:
    def __init__(self, name, grade, age):
        self.name = name
        self.grade = grade
        self.age = age

    def get_name(self):
        return self.name

    def get_grade(self):
        return self.grade

    def get_age(self):
        return self.age"
How could we modify the following code to capture user input?num = 5,"We can use the built-in input() function to capture user input in this code:

num = input(""Please enter a number: "")"
"How could we modify the following code to add an item to a list?list = [1, 2, 3]","We can use the list.append() method to add an item to the list:

list.append(4) # Adds the item 4 to the list"
Generate a code segment that prints all the elements of a 2-dimensional array.,"for array in 2d_array:
    for element in array:
        print(element)"
"Edit the following code to add a try-except block and print an error message on an exception.arr = [1, 2, 3]

i = 4

print(arr[i])","arr = [1, 2, 3]

i = 4

try:
    print(arr[i])
except IndexError:
    print(""Index out of bounds. Please specify a valid index."")"
"How could we modify the following code to handle potential errors when computing sum?num1 = input(""Enter a number: "")
num2 = input(""Enter another number: "")

sum = int(num1) + int(num2)","num1 = input(""Enter a number: "")
num2 = input(""Enter another number: "")

try: 
    sum = int(num1) + int(num2)
except ValueError:
    print(""Error: Please enter a valid number."")"
"Create a function in python to find the minimum value in an array.arr = [3,6,2,7,1]","def find_min(arr): 
    min = arr[0] 
    for x in arr: 
        if x < min: 
            min = x 
    return min

result = find_min(arr)
print(result) # prints 1, which is the minimum in the array."
"Remove the duplicates in a list.arr = [1,2,1,2,3]","arr = [1,2,1,2,3]

res = []
for x in arr: 
    if x not in res: 
        res.append(x)
print(res) # prints [1,2,3], which is the list without any duplicates."
Modify the following code to use a for loop to print the numbers 0 to 9,"for i in range(10): 
    print(i) # prints the numbers 0 to 9"
Write a a code to find all the prime numbers from 0 to 100,"# create a list of all the prime numbers
prime_list = []

# iterate through 0 to 100
for i in range(1,101):
    if i > 1:
        # loop through 2 to i/2
        for j in range(2,i//2):
            # if i is divisible by j, then it is not a prime number
            if (i % j) == 0:
                break
        else:
            # add the prime number to the prime list
            prime_list.append(i)

print(prime_list) # prints the list of all prime numbers from 0 to 100."
Implement a basic calculator that can compute simple math expressions.9 * 2,"def calculate(expr):
    return eval(expr)"
Write a function to tokenize a given sentence into words.I am a programmer,"def tokenize_sentence(sentence):
    tokens = sentence.split()
    return tokens"
"Write a code to perform a linear search in a given list.[1, 6, 2, 8, 5], 8","def linear_search(my_list, x):
    for i in range(len(my_list)):
        if my_list[i] == x:
            return i
    return -1"
Implement a function to compute the binomial coefficient.,"def compute_binomial_coefficient(n, k):
    if k == 0 or k == n:
        return 1
    else:
        return compute_binomial_coefficient(n-1,k-1) + compute_binomial_coefficient(n-1,k)"
"Implement a function that can convert a given string to an integer.""123""","def string_to_int(num):
    return int(num)"
Generate a random string of 16 characters containing both alphabetical and numerical characters.,"import random
import string

def random_string():
    characters = string.ascii_letters + string.digits
    random_string = ''.join(random.choices(characters, k=16))
    return random_string

if __name__ == '__main__':
    print(random_string())"
"Given a two-dimensional array of integers, find the maximum sum of numbers you can find by tracing a path from the top-left to bottom-right corner.[[1, 5, 4], [2, 3, 4], [1, 9, 3]]","def max_sum(arr):
    result = [[None] * len(arr[0]) for _ in range(len(arr))]
    result[0][0] = arr[0][0]
    for i in range(1, len(arr[0])):
        result[0][i] = arr[0][i] + result[0][i - 1]
    for i in range(1, len(arr)):
        result[i][0] = arr[i][0] + result[i - 1][0]
    for i in range(1, len(arr)):
        for j in range(1, len(arr[0])):
            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]
    return result[- 1][- 1]

if __name__ == '__main__':
    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]
    print(max_sum(arr))"
"Write an algorithm to find the maximum subarray sum within the provided input array.[-2, 1, -3, 4, -1, 2, 1, -5, 4]","def max_subarray_sum(arr):
    max_sum = 0
    curr_sum = 0
    for x in arr:
        curr_sum += x
        if curr_sum < 0:
            curr_sum = 0
        elif curr_sum > max_sum:
            max_sum = curr_sum
    return max_sum

if __name__ == '__main__':
    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    print(max_subarray_sum(arr))"
"Given a binary tree, write a function to determine whether it is a valid binary search tree.","def is_valid_bst(root):

    def helper(node, lower_limit, upper_limit):
        # base case
        if not node:
            return True
        
        val = node.val
        if val <= lower_limit or val >= upper_limit:
            return False

        if not helper(node.right, val, upper_limit):
            return False
        if not helper(node.left, lower_limit, val):
            return False
        return True
    
    return helper(root, float('-inf'), float('inf'))

if __name__ == '__main__':
    # Assume a binary tree is defined
    root = Node().root
    result = is_valid_bst(root)
    print(result)"
"Remove all the punctuation from a given string""Welcome to the world of computers!""","import string

def remove_punctuation(text):
    punctuations = string.punctuation
    no_punct = """"
    for char in text:
        if char not in punctuations:
            no_punct += char
    return no_punct

if __name__ == '__main__':
    text = 'Welcome to the world of computers!'
    print(remove_punctuation(text))"
"Using Python, make a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase.listOfStrings = [""apple"", ""banana"", ""mango""]","def convertStringsToUppercase(listOfStrings):
  return [string.upper() for string in listOfStrings]"
"Write a function in Python which takes a list of integers as an argument and returns a new list which contains the maximum value of each unique number in the input list.intList = [1, 4, 2, 9, 3, 5, 1, 9]","def maxValuesInList(intList):
  uniqueValues = set(intList)
  maxValuesList = []
  for value in uniqueValues:
    maxValue = max([item for item in intList if item == value])
    maxValuesList.append(maxValue)
  return maxValuesList"
"Using Python, create a function that takes a string as an argument and returns a updated string where each character is repeated twice.inputValue = ""Hello""","def repeatCharacters(inputValue):
  outputValue = """"
  for char in inputValue: 
    outputValue += char * 2 
  return outputValue"
What is the most efficient way to delete a key from a Python dictionary?,The most efficient way to delete a key from a Python dictionary is to use the del keyword. This will delete the specified key and its associated value from the dictionary.
How to select data from a Pandas DataFrame?,"Pandas DataFrames can be queried by selecting specific columns and/or rows.

To select a single column from a DataFrame, you can use the following syntax:

df['column_name']

To select multiple columns from a DataFrame, you can use the following syntax:

df[['column_1', 'column_2', 'column_3']]

To select rows from a DataFrame, you can use the following syntax:

df[(df['column_name'] == condition) & (df['column_name_2'] > condition)]"
"Create a class in Python called ""Person"" and define two methods - one for getting a name, and one for saying hello.","class Person(object):
    def __init__(self, name):
        self.name = name
    
    def getName(self):
        return self.name
    
    def say_hello(self):
        print(""Hello, my name is %s"" % self.name)"
"Given two integers, how to find the GCD of them in Python?","def gcd(a, b): 
  if(b == 0): 
    return a 
  else: 
    return gcd(b, a % b)"
How to check if a string contains a specific character in Python?,"You can check if a string contains a specific character in Python by using the in operator. For example:

my_string = ""Hello World!""

if 'W' in my_string:
    print(""The string contains the character W"")"
Write a function in Python to find the sum of all even numbers between 0 and a given number.,"def sum_of_even_numbers(n):
    result = 0
    for i in range(0, n + 1):
        if i % 2 == 0:
            result += i
    
    return result"
How to sort a list of tuples in Python?,"You can sort a list of tuples in Python by using the sorted() function. For example:

tuple_list = [('John', 18), ('Jane', 20), ('Bob', 16)]

sorted_list = sorted(tuple_list, key=lambda tup: tup[1])

print(sorted_list)

# Output: [('Bob', 16), ('John', 18), ('Jane', 20)]"
Create a function that returns a list of Prime numbers between 0-50.,"def prime_numbers():
    primes=[]
    for i in range (1,51):
        count=0
        for j in range (2,i):
            if i%j==0:
                count+=1
        if count==0:
            primes.append(i)
    return primes"
"Create an algorithm that will search for a key-value pair in an object.searchKey='c'
object= {
    ""a"": 1,
    ""b"": 2,
    ""c"": 3,
    ""d"": 4,
    ""e"": 5
}","def search(searchKey, object):
    if searchKey in object:
        return object[searchKey]
    else:
        return -1"
"How to remove all special characters from a string?string=""It@#$%^&*( ) is a;?.incredible# time""","def remove_special_characters(string):
    new_string = """"
    for char in string:
        if char.isalpha() or char.isdigit() or char=="" "":
            new_string += char
    return new_string"
How to hide a particular div when a button is clicked?,"document.getElementById(""div_id"").style.display=""none"";"
"Write a Python script to remove duplicates from the list.my_list = [1,2,4,4,1,2]","def remove_duplicates(my_list): 
    new_list = [] 
    for item in my_list: 
        if item not in new_list: 
            new_list.append(item) 
    return new_list"
How to delete all elements from a given set?,Set.clear()
How to get the size of a dictionary?,len(dictionary)
"Create a function which takes an array of strings as an argument and return the longest string.array =['cake', 'apple', 'orange']","def largest_string(array):
   largest_string=array[0]
   for i in array:
      if len(i) > len(largest_string):
         largest_string = i
   return largest_string"
How to check if a list contains any None value in it?,any(x is None for x in my_list)
"Describe a for loop for iteration of a list.my_list = [1, 2, 3, 4, 5]","for item in my_list:
    # do something with the item"
Write a class to define a complex number,"class ComplexNumber{ 
        double real;
        double imaginary;
    
        public ComplexNumber(double real, double imaginary){
            this.real = real;
            this.imaginary = imaginary;
        }
    
        public double getReal(){ 
            return real;
        }
    
        public double getImaginary(){
            return imaginary;
        }
    }"
Write Python code to print the most frequent characters in a given string.String: I love apples,"def most_frequent_char(s):
    count = [0] * 256
    max_count = 0
    max_id = 0
    for i in range(len(s)):
        count[ord(s[i])] += 1
        if count[ord(s[i])] > max_count:
            max_count = count[ord(s[i])]
            max_id = i
    
    return s[max_id]"
Compute the sum of the squares of all the numbers between 1 and 10 (inclusively).,385
"Find the index of the first occurrence of the substring “sea” in the following string.String: ""These are the seas""",The index of the first occurrence of “sea” is 8.
"Find the mean of the elements in this array.Array: [2, 3, 5, 4, 9]",The mean of the elements in this array is 4.8.
"Compare the two strings and find out which one comes first alphabetically.String1: apple
String2: banana",apple comes first alphabetically.
"Extract the 3rd element from a given list[1, 2, 3, 4, 5]",3
"Given a factor of two numbers, find the two numbersfactor: 12",The two numbers are 1 and 12.
Generate a regex pattern for valid emails,^[\w\.\+\-]+@[\w\-]+\.[\w\-\.]+$
Create a Python script to fetch the weather data of a given cityBangalore,"import requests

city = ""Bangalore""
url = f""http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key""

# Fetching the JSON data
response = requests.get(url)
data = response.json()
 
# Get the main weather data
weather_data = data[""main""]
 
# Obtain the current temperature 
temp = weather_data[""temp""]
 
print(f""The current temperature in {city} is {temp} degrees Celsius."")"
"Print all the permutations of a given list[1, 2, 3]","def permute(lis):
    if len(lis) == 0:
        return [] 
    if len(lis) == 1:
        return [lis] 
  
    l = [] 
    for i in range(len(lis)):
        m = lis[i] 
  
        remLis = lis[:i] + lis[i+1:] 
  
        for p in permute(remLis): 
            l.append([m] + p) 
    return l 

list1 = [1, 2, 3]
result = permute(list1) 
for i in result: 
    print(i)"
Create a Python program to calculate prime numbers between 0 to 50.,"# Program to calculate prime numbers between 0 to 50

# list of prime numbers
prime_list = []
for num in range(0,51):  
   # prime numbers are greater than 1  
   if num > 1:  
       for i in range(2, num):  
           if (num % i) == 0:  
               break  
       else:  
           prime_list.append(num)

print(prime_list)"
"Using Python, create a function to return the number of days in a particular month.September","def days_in_month(month):
 if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':
  return 31
 elif month == 'February':
  return 28
 else:
  return 30
  
# Output
days_in_month('September') 
# Output 
30"
How would you create a list of 10 elements by calling the range() function?,my_list = list(range(10))
"Define a function that returns the string ""Hello World!""","def hello_world():
    return ""Hello World!"""
"Fragment the following statement ignoring whitespace and punctuation:""Hi, how are you doing?""","word_list = [""Hi,"", ""how"", ""are"", ""you"", ""doing?""]"
"Find the maximum among three integers.widget_1 = 8
widget_2 = 4
widget_3 = 12","maximum = max(widget_1, widget_2, widget_3)"
"What is the value of ``a`` after the following statement?a = 5
a += 3",a = 8
"Correct the following code and generate an output:list_of_ints = [2, 3, 4, 8]

for x in list_of_ints
    print(x)","list_of_ints = [2, 3, 4, 8]

for x in list_of_ints:
    print(x)

# Output:
2
3
4
8"
Write a function to print the permutations of a given string.,"def print_permutations(string):
    if len(string) == 1:
        print(string)
    else:
        for permutation in (print_permutations(string[1:])):
            for i in range(len(string)):
                print(permutation[:i] + string[0] + permutation[i:])

print_permutations(""abc"")"
How would you reverse a string in Python?,"my_string = ""Hello World!""
my_string = my_string[::-1]  # slice the string from start to finish in reverse order"
You need to sort an Unsorted Linked List in ascending order.head -> 10 -> 8 -> 5 -> 12 -> 15,head -> 5 -> 8 -> 10 -> 12 -> 15
"Read an array from stdin and find the maximum element in it.[3, 8, 5, 6, 1]","#include <iostream>
using namespace std;

int main()
{
    int arr[] = {3, 8, 5, 6, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_element = 0;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] > max_element)
            max_element = arr[i];
    }
    cout << ""Maximum element in the array is "" << max_element << endl;
    return 0;
}"
Name an advantage of using linked list over an array.,"One advantage of a linked list over an array is that it does not require the memory for storing all the elements to be allocated at once. Linked lists allow memory to be allocated as needed and can be easily expanded as new records are added. Also, linked list can easily insert and remove elements at any position in the list. Additionally, they can easily be manipulated or sorted in the same order in which they are stored. Finally, linked lists can store data items of different sizes while arrays require all elements to be the same size."
"Using pandas, create a dataframe with two columns and five rows.","import pandas as pd

df = pd.DataFrame(
    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], 
    columns=['a', 'b']
    )"
"Using MongoDB, create a query to find all documents where the status is ""ACTIVE"".","db.collection.find({status: ""ACTIVE""})"
"In Python, write a function that takes two integers a, b and returns a*b.","def multiply(a, b):
  return a * b"
Write a Perl program to generate Fibonacci series.,"#include <stdio.h> 
  
int main() 
{ 
    int n, first = 0, second = 1, next; 
  
    printf(""Enter the number of terms \n""); 
    scanf(""%d"", &n); 
  
    printf(""First %d terms of Fibonacci series are :\n"", n); 
  
    int i; 
    for (i = 0; i < n; i++) { 
        if (i <= 1) 
            next = i; 
        else { 
            next = first + second; 
            first = second; 
            second = next; 
        } 
        printf(""%d\n"", next); 
    } 
  
    return 0; 
}"
"Given a string, reverse the order of words and then print the string.Hello World","World Hello

#!/bin/bash
echo $(echo $1 | awk '{for (i=NF; i!=0; i--) {printf (""%s "",$i)}; print """"}')"
Create a GUI interface for a multiplayer card game using PyQt5.,"import sys 
import PyQt5 
from PyQt5.QtWidgets import QApplication, QWidget 
  
  
class Game(QWidget): 
    def __init__(self): 
        super().__init__() 
        self.title = 'Multiplayer Card Game' 
        self.left = 400 
        self.top = 400 
        self.width = 300 
        self.height = 100 
        self.initUI()
  
    def initUI(self): 
        self.setWindowTitle(self.title) 
        self.setGeometry(self.left, self.top,  
                         self.width, self.height)
        self.show() 
  
app = QApplication(sys.argv) 
screen = Game() 
sys.exit(app.exec_())"
Create an artificial neural network in PyTorch to predict the next word in a sentence.,"import torch 
import torch.nn as nn 

class ANN(nn.Module):
    def __init__(self, vocab_size, embedding_dim, hidden_dim):
        super().__init__()
        self.embedding = nn.Embedding(vocab_size, embedding_dim) 
        self.fc1 = nn.Linear(embedding_dim, hidden_dim) 
        self.fc2 = nn.Linear(hidden_dim, vocab_size)
    
    def forward(self, x):
        embedded = self.embedding(x) 
        out = self.fc1(embedded)
        out = self.fc2(out) 
        return out"
"Write a MongoDB query to find all documents in a collection whose field ""date"" has a value of today.",db.collection.find({ date: new Date().toISOString().split('T')[0] })
"Reverse the following Scala list: ``List(1, 2, 3, 4)``","List(4, 3, 2, 1)"
"Create a class called Vehicle in Python with attributes for type (car, truck, motorcycle etc.), make, model, year, and speed.","class Vehicle:
    def __init__(self, type, make, model, year, speed):
        self.type = type
        self.make = make
        self.model = model
        self.year = year
        self.speed = speed"
How do you create a new list in Python from a given list that contains the square of each element?,The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]
Devise a recursive solution to the problem.Find the sum of all numbers from 1 to N,"def sum_recursive(n):
    if n == 0:
        return 0
    else:
        return n + sum_recursive(n-1)"
Replace the placeholder in the sentence below with the appropriate methodUse the __________ function to convert the string to lowercase.,Use the lower() function to convert the string to lowercase.
"Using the comment as a guide, write a nested loop to iterate over all elements of a multi-dimensional array[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]","for i in range(len(array)):
    for j in range(len(array[i])):
        print(array[i][j])"
Modify the following code so that it prints the Fibonacci numbers up to the given numberx = 10,"def fibonacci(x):
    a = 0
    b = 1
    if x < 0:
        return []
    elif x == 0:
        return 0
    elif x == 1:
        return [0, 1]
    else:
        c = a + b
        res = [a, b, c]
        while c < x:
            a = b
            b = c
            c = a + b
            res.append(c)
        return res"
Design a program to search a list for a specified item,"def search_list(array, item):
    for i in range(len(array)):
        if array[i] == item:
            return i
    return -1"
"Create a function to return the count of even numbers in a listlist_num = [4, 5, 6, 7, 8]","def count_even_numbers(list_num):
    count = 0
    for i in list_num:
        if (i % 2 == 0):
            count += 1
    return count"
Write a code to convert an input string of numbers to an integer.input_str = '1234',"def str_to_int(input_str):
    num = 0
    for i in input_str:
        num = num * 10 + (ord(i) - ord('0')) 
    return num"
"Create a function to find all anagrams of a given word.word = ""abbac""","def anagrams(word):
    if len(word) == 1:
        return [word]
    else:
        anagrams_list = []
        for i, letter in enumerate(word):
            for j in anagrams(word[:i]+word[i+1:]):
                anagrams_list.append(letter+j)
        return anagrams_list"
"Write a code to find the sum of values present in two dimensional arrayarr = [[1,2], [3,4], [5,6]]","def sum_two_dimensional_array(arr):
    total = 0
    for sublist in arr:
        for i in sublist:
            total += i
    return total"
Generate a list of unique numbers between 10 and 50.,"[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
"Given a matrix, output the sum of all elements in the matrix.[
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]",45
"How many continuous substrings are there in the string ""Geeks""?",15
Design a function to get the user input and print the maximum among them.,"def getMaxNumber():
    numbers = []
    
    num = int(input(""Enter how many numbers: ""))
    
    for i in range(num):
        numbers.append(int(input(""Enter a number: "")))
        
    maxNum = max(numbers)
    print(""The maximum number is"", maxNum)"
How can you change the given string 'Hello World' to 'World Hello'?,"string = ""Hello World""
string = string.split()
string = string[1] + ' ' + string[0]
print(string) # World Hello"
How can you find the severity of a given error?,"Error severity can be found by looking at the error code or message provided. The higher the code or the more detailed the message, the more severe the error is. In addition, if the error message indicates the impact of the error on the system or application, it can be used to measure the severity of the error."
"Given a list of numbers, sort them in increasing order.nums = [2, 3, 1, 4, 5]","def sort_numbers(nums):
    return sorted(nums)"
"Identify which elements in an array are even numbers.nums = [1, 2, 3, 4, 5]","def is_even_num(nums):
    result = []
    for num in nums:
        if num % 2 == 0:
            result.append(num)
    
    return result"
"Create a class in python with three functions, two of which must be called `add` and `subtract`.","class MathOperations:
    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b
    
    def multiply(self, a, b):
        return a * b"
What type of neural network is used for language generation?,Recurrent Neural Networks (RNNs) are commonly used for language generation. Long Short-Term Memory (LSTM) networks and Gated Recurrent Units (GRUs) are prominent examples of RNNs used for language generation.
Assign ``num = 5`` to the ``num`` variable using the Python assignment operator.,num = 5
"Rearrange the given fragments of code in order to build an ``if ... else ...`` statement in Python.print('Success!')
else:
if a > b","if a > b:
    print('Success!')
else:"
What data structure is adopted to reflect the hierarchical structure of XML documents?,"A tree data structure is typically adopted to represent the hierarchical structure of XML documents. In this structure, each node represents an element of the document and can have any number of children or parents depending on the structure."
"Given two lists ``a`` and ``b``, calculate their difference and store the result in a list ``c``.a = [1, 2, 3]
b = [2, 3, 4]",c = list(set(a) - set(b))
Write a code to make an API call to a remote server.,"import requests

url = ""http://example.com/api""

response = requests.get(url)
data = response.json()"
How would you extract emails from a given string using regex in Python?,"import re

s = 'This string contains an email address: email@example.com'

emails = re.findall(r'[\w\.-]+@[\w\.-]+', s)"
How do you debug an application in Python?,"Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities."
Enter the variables from the equation below into Python code.2x + 5y - 7z = 9,"x = 2
y = 5
z = -7"
"Replace the following loop with a list comprehension.my_list = []
for item in range(20):
 my_lis.append(item**2)",my_list = [item**2 for item in range(20)]
Copy the following string without the middle word.The quick brown fox,The quick fox
"How would you update the following code to iterate over a list of strings?list_of_ints = [1, 2, 3, 4]

for n in list_of_ints:
    print(n)","The following code can be updated to iterate over a list of strings by replacing `list_of_ints` with the list of strings and replacing `print(n)` with `print(str(n))` to properly format each element of the list.

list_of_strings = [""one"", ""two"", ""three"", ""four""]

for n in list_of_strings:
    print(str(n))"
"Describe the result of running this code.obj = {
    'a': 1,
    'b': 2,
    'c': 3
}

for key in obj.keys():
    print(key + ': ' + obj[key])","The result of running this code is that it prints each key-value pair in the object with key and value separated by a colon and a space, e.g, 'a: 1', 'b: 2', 'c: 3'."
Find the area of a circle with radius 2.,The area of a circle with radius 2 is 12.566370614359172.
Suggest a faster way to get a sublist from a given list.,"A faster way to get a sublist from a given list is to use slicing. For example, to get the first 3 elements of a given list, the following code can be used: 

original_list = [1, 2, 3, 4, 5]
sublist = original_list[:3]"
Write a function to print a given character N times.,"def print_n_times(character, times):
    for _ in range(times):
        print(character, end="""")

print_n_times(""*"", 5)"
"Create a python script that takes three required parameters 'x', 'y' and 'z' and prints the result of x * y * zx=4
y=3
z=2","def multiply(x, y, z):
  return x * y * z
  
print(multiply(4, 3, 2)) //output 24"
"Suggest a Python code for sorting a list of dictionaries based on ascending order of a given key.original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 18}, {'name':'Lisa', 'age': 20}]","def sort_by_age(original_list):
    Return sorted(original_list, key = lambda i: i['age'])"
"Write a Python function that takes a list of strings as parameter and returns a dictionary with the strings as keys and the length of each string as value.words = ['apple', 'banana', 'cat']","def string_lengths(words):
    return {word:len(word) for word in words}"
"Write a Python program to remove duplicates from a list of dictionaries based on their values for a given key.original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 25}, {'name':'Lisa', 'age': 20}]","def remove_duplicates(original_list, key):
    seen = set()
    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]
    return new_list"
"Suggest a Python program to execute a given block of code a specified number of times.execute_n_times(5, print(""Hello World!""))","def execute_n_times(n, code):
    for _ in range(n):
        exec(code)"
"Write a Python program to create a function that takes two numbers as arguments and returns a list of all odd numbers between them.start_range = 2
end_range = 10","def get_odds(start_range, end_range):
    return [num for num in range(start_range, end_range+1) if num % 2 != 0]"
Write a Python program to convert an integer to a Roman numeral.number = 2019,"def to_roman(num):
    thousands = ["""", ""M"", ""MM"", ""MMM""]
    hundreds = ["""", ""C"", ""CC"", ""CCC"", ""CD"", ""D"", ""DC"", ""DCC"", ""DCCC"", ""CM""]
    tens = ["""", ""X"", ""XX"", ""XXX"", ""XL"", ""L"", ""LX"", ""LXX"", ""LXXX"", ""XC""]
    ones = ["""", ""I"", ""II"", ""III"", ""IV"", ""V"", ""VI"", ""VII"", ""VIII"", ""IX""]
    
    return thousands[num//1000] + hundreds[(num%1000)//100] + tens[(num%100)//10] + ones[num%10]"
"Write a Python program to compare two given lists and return True if their contents are the same.list1 = [1, 3, 8, 9]
list2 = [1, 3, 8, 9]","def compare_lists(list1, list2):
    return list1 == list2"
"Suggest a Python code for printing the sum, minimum and maximum of a given list.list_elements = [1, 2, 4, 6, 8, 9]","def list_calculations(list_elements):
    print('sum:', sum(list_elements))
    print('min:', min(list_elements))
    print('max:', max(list_elements))"
"Write a Python program to shuffle the items of a given list in random order.list_elements = [1, 2, 3, 4, 5]","from random import shuffle

def shuffle_list(list_elements):
    shuffle(list_elements)
    return list_elements"
"Without using any built-in functions, generate a Python code to remove the duplicated elements in a list","def remove_duplicates(l): 
    res = [] 
    for i in l: 
        if i not in res: 
            res.append(i) 
    return res"
Write a MongoDB query to find which roles have Permission 2,db.roles.find({permissions: 2})
Write a python script to print out a list comprehension that prints out all the integers in a given range1-10,"my_list = [x for x in range(1, 11)]  
print(my_list)"
Create a loop to print out all odd number from 0 to 10.,"for i in range(0, 11): 
    if i % 2 != 0:
        print(i)"
"Compute the cosine similarity of two vectors.Vectors: [2, 3] and [4, -5]","def cosine_similarity(v1, v2):
    dot = 0
    mag1 = 0
    mag2 = 0
    for a, b in zip(v1, v2):
        dot += a*b
        mag1 += a**2
        mag2 += b**2
    return dot/(mag1**0.5 * mag2**0.5)

v1 = [2, 3]
v2 = [4, -5]

cosine_sim = cosine_similarity(v1, v2)

print(cosine_sim)"
"Write a code for extracting the last n elements of a list.List: [1, 2, 3, 4, 5], n = 3","# Define a function to extract the required elements
def extract_last_elements(list, n): 
    # Get the length of list 
    l = len(list)    
    # Check if n is negative or greater than length 
    if n <= 0 or n > l: 
        return [] 
  
    # return the last n elements 
    return list[l - n:]

# Driver code
list = [1, 2, 3, 4, 5]
n = 3
print (extract_last_elements(list, n))"
"Integrate the plotting library Matplotlib into this Python script.import pandas as pd
data = pd.read_csv('data.csv')","import pandas as pd
import matplotlib.pyplot as plt 

# Read csv file 
data = pd.read_csv('data.csv')  

# Data visualization 
plt.plot(data) 
plt.xlabel('x-axis') 
plt.ylabel('y-axis')  
plt.title('Plot of data')  
plt.show()"
"Calculate the Hamming distance of two binary strings.String1: 1001100 
String2: 1010101","def hammingDistance(str1, str2): 
    # Iterate through all possibles index of the strings 
    # and counting the number of different characters and return it.
    distance = 0
    for index in range(len(str1)): 
        if str1[index] != str2[index]: 
            distance += 1
  
    return distance 

# Driver code 
str1 = '1001100'
str2 = '1010101'
print(hammingDistance(str1, str2))"
Create a function to generate Pythagorean Triples up to a given limit.Limit: 20,"# Create a function to generate pythagorean triples
def generator(limit):
	# Create an empty list to store the result
	result = []
    # Iterate over limit
	for n in range(1, limit + 1):
		for m in range(n + 1, limit +1):
			a = m*m - n*n
			b = 2*m*n
			c = m*m + n*n
			if c > limit:
				break
			if a > b:
				result.append([a, b, c])
			if a < b:
				result.append([b, a, c])
	return result

# Driver code
limit = 20
pythagorean_triples = generator(limit)
print(pythagorean_triples)"
Make a Visual Basic code to find the sum of the integers from 1 to 10,"Sub add_numbers()
   Dim sum As Integer
   sum = 0
   
   For i = 1 To 10
      sum = sum + i
   Next
   MsgBox (""Sum of all numbers from 1 to 10 is : "" & sum)
End Sub"
Write a R program to print the first 5 rows of a given dataset“data.csv”,"data <- read.csv(""data.csv"")
head(data, 5)"
Write a function to convert inches to centimeters.,"function inchToCm(inches) {
   return inches * 2.54;
}"
Create a Date object containing tomorrow's date.,"var tomorrow = new Date();
tomorrow.setDate(tomorrow.getDate() + 1);"
Create a for loop for counting from 1 to 10.,"for (let i = 1; i <= 10; i++) {
   console.log(i); 
}"
What is the result of 3 + 4 * 9?,The result of 3 + 4 * 9 is 39.
"Write a code snippet to check if all characters in a given string are letters or numbers.string = ""Welcome123""","function checkString(string) { 
    var lettersOnly = /^[0-9a-zA-Z]+$/; 
    if (string.match(lettersOnly)) 
        console.log(""The string contains only letters and numbers.""); 
    else
        console.log(""The string contains other characters too.""); 
}"
Create a function to print an inverted triangleIt should display 8 lines with 5 asterisks,"def print_inverted_triangle():
    for i in range(8, 0, -1):
        print(""*"" * i)"
"Create a python program to determine the comprehesive count of words in a given stringGiven the string s =""python programming is fun""","def count_words(s):
    words = s.split(' ')
    count = len(words)
    return count"
Construct a program to find the difference between two numbersGiven values x = 20 and y = 10,"def diff(x, y):
    return x - y"
Create a program to print the FizzBuzz seriesUp to the number 25,"def fizzbuzz(n): 
    for num in range(1, n+1):
        if num % 3 == 0 and num % 5 == 0:
            print(""FizzBuzz"")
        elif num % 3 == 0: 
            print(""Fizz"") 
        elif num % 5 == 0: 
            print(""Buzz"")
        else: 
            print(num)"
"Write a Python program to find the four letter words from a given list.[""tree"", ""door"", ""apple"", ""ball"", ""house"", ""cat"", ""wood""].","""""""
A Python program to find the four letter words from a given list
""""""

# Initializing the list 
words = [""tree"", ""door"", ""apple"", ""ball"", ""house"", ""cat"", ""wood""] 

# Using list comprehension to extract four letter words 
four_letter_words = [word for word in words if len(word) == 4] 

# Printing the four letter words 
print(""Four letter words:"", four_letter_words)"
Write a regex pattern to match all characters in a string that start with a lowercase letter.,[a-z][a-zA-Z]*
Create a function that takes two strings and finds the longest common substring between them.,"def longest_common_substring(s1, s2): 
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
            if s1[x - 1] == s2[y - 1]:
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else:
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]"
Create a program that takes a given string and returns the frequency of each alphabet character.,"def get_character_frequency(str):
    char_freq = {}
    for char in str:
        if char in char_freq:
            char_freq[char] += 1
        else:
            char_freq[char] = 1
    return char_freq

get_character_frequency(""Hello World!"") # Output: { 'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1 }"
Write a code snippet that prints the current date and time in the format YYYY-MM-DD HH:MM:SS.,"import datetime

# Get the current datetime
now = datetime.datetime.now()

# Prints the current datetime in YYYY-MM-DD HH:MM:SS format
print(now.strftime(""%Y-%m-%d %H:%M:%S""))"
"Write a function to compare two lists of numbers and return a new list with the elements which are common to both the lists.list1 = [1, 2, 3, 4, 5]
list2 = [3, 5, 6, 7, 8]","def compare_lists(list1, list2):
    new_list = []
    for element in list1:
        if element in list2:
            new_list.append(element)
    return new_list
    
# Call the compare_lists()
list_common = compare_lists(list1, list2)

# Print the new_list
print(list_common) # [3, 5]"
"Create a variable to store the text ""Python is a programming language"" and then print it.","text = ""Python is a programming language""
print(text)"
"Create an array that contains the elements 1, 3, 5, 7, and 9 in random order.","import random

# Create an array with all our values
array = [1, 3, 5, 7, 9]

# Use the shuffle function to randomize
random.shuffle(array)

# Print out the randomized array
print(array)"
Write an algorithm to find the middle item in a linked list.,"# Finds the middle node in a linked list 
# Input: head of the linked list 
# Return: the middle element of the linked list 
def findMiddleNode(head): 
	# If the linked list is empty 
	if (head is None): 
		return None

	# Find the length of the linked list 
	length, node = 0, head 
	while (node is not None): 
		length += 1
		node = node.next

	# Jump to the middle of linked list 
	node = head 
	for _ in range(length // 2): 
		node = node.next
		
	return mid"
"Use .split() in Python to break the following text into a list of sentences.text = ""Hello! My name is John. What is your name?""","text = ""Hello! My name is John. What is your name?""

sentences = text.split("". "")
print(sentences) # ['Hello! My name is John', 'What is your name?']"
Create an array containing 10 random numbers between 0 and 10.,"import random

# Create an array with 10 random numbers
array = []
for i in range(10):
    array.append(random.randint(0,10))

# Print the array
print(array)"
How would you implement a simple object oriented Programming concept in Python?,"In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods."
Write a function which takes a C-style string as a parameter and prints it out reversed.,"void reverse_string(char *str) {
    int len = strlen(str);
    int i;
    char *rev_str = (char*)malloc((len+1)*sizeof(char));
    for(i = 0; i < len; i++) {
        rev_str[i] = str[len - i - 1];
    }
    rev_str[len] = '\0';
    printf(""Reversed string: %s\n"", rev_str);
    free(rev_str);
}"
"Assign a value to a variable based on the value of another variable.int x = 0;
int y = 1;","if (x == 0) {
    int y = 1;
} else {
    int y = 0;
}"
Define an operator which adds two points of a given type.,"struct Point {
    int x;
    int y;
};

Point operator+(Point p1, Point p2) {
    Point result;
    result.x = p1.x + p2.x;
    result.y = p1.y + p2.y;
    return result;
}"
"Create an event handler for a ""click"" that updates a text field.","// define ""click"" parameter
$(""#element"").on(""click"", function (click) {
    // update text field
    document.getElementById(""text_field"").innerHTML = ""updated"";
});"
Put a number into a variable and assign a string to another variable based on it's value.num = 5,"if (num == 5) {
    String str = ""five"";
} else {
    String str = ""not five"";
}"
Use a loop to print out a list of numbers.,"for (int i = 0; i < 10; i++) {
    System.out.println(i);
}"
Assert that an array is not empty before adding items.,"if (array != null && array.length > 0) {
    // add items to array
}"
"Count the number of integers in the given 2D array.[
  [1, 2, 3],
  [4, 5, 6],
  [7, 8]
]",8
Write a Regular Expression pattern to check if the given input is a valid email address.,/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
"Create a data structure that stores the given data.Name: John
Age: 20
Gender: Male
Occupation: Developer","student = {
  'name': 'John',
  'Age': 20, 
  'Gender': 'Male',
  'Occupation': 'Developer'
}"
Generate the MD5 hash of the given string.Hello World,a7ad492532f2f806e140722d00453901
"Using the given Python code, format the number 7.321 to contain two decimal points.n=7.321",'{:.2f}'.format(n)
Remove the character 'o' from the given string.books,'bks'
Compress the given string using the Huffman Coding.aabbccdd,"{
  'a': '0',
  'b': '10',
  'c': '110',
  'd': '111'
}"
Convert the given integer number to a Roman Numeral.403,CDIII
Use the bisection method to approximate the root of the given equation.x^2 - 2x - 3,Approximate root: 1.839285
"Given the different test scores in the list, calculate the GPA.[('DS', 98), ('OS', 95), ('SE', 85), ('ML', 80)]",GPA: 89.25
"Using a random seed of 0, generate a 5x4 random matrix of integers up to the given number.10","matrix = [
  [8, 3, 3, 5],
  [7, 7, 4, 8],
  [6, 2, 9, 2],
  [8, 3, 3, 0],
  [2, 5, 4, 8]
]"
"Create a function in Python that takes a sentence as an argument and returns the formatted sentence with the first letter of each word capitalized.sentence = ""this is a sentence""","def capitalize_sentence(sentence):
  words = sentence.split()
  capitalized_words = [word.capitalize() for word in words]
  return "" "".join(capitalized_words)"
"Create a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week.beer_sales = [200, 500, 600, 100, 800]","import matplotlib.pyplot as plt

week = [1, 2, 3, 4, 5]
plt.bar(week,beer_sales)
plt.xlabel('Week')
plt.ylabel('Number of beers sold')
plt.show()"
Write a R script that reads in dataset and prints out the summary statistics of the dataset.,"# Read in the dataset
data <- read.csv(""data.csv"")

# Print out the summary statistics
summary(data)"
"Modify the following python code to calculate the average of a list of numbers.def list_average(numbers):
    '''This function will calculate the average of a list of numbers.'''","def list_average(numbers):
    '''This function will calculate the average of a list of numbers.'''
    return sum(numbers) / len(numbers)"
"Come up with a Python generator expression to iterate over a given list and return only even elements.[1, 2, 3, 4, 5, 6, 7, 8]","even_list = (x for x in [1, 2, 3, 4, 5, 6, 7, 8] if x%2 == 0)"
Come up with a Matlab expression to generate a random permutation of size 10.,randperm(10)
Construct an if/else block to convert a given score to a grade.score = 25,"if (score >= 90) {
    grade = 'A';
} else if (score >= 80) {
    grade = 'B';
} else if (score >= 70) {
    grade = 'C';
} else if (score >= 60) {
    grade = 'D';
} else {
    grade = 'F';
}"
Suggest an assembly instruction to move 1 byte of data from one register A to register B.,"movb A, B"
Generate a random password with at least 8 characters and with at least 1 number and 1 letter.,"import string 
import random 

def generate_password(n):  # n is the length of the password
  
    alphabet = string.ascii_letters + string.digits
    password = ''.join(random.choice(alphabet) for i in range(n))
    while not any(c.isdigit() for c in password) or not any(c.isalpha() for c in password):
        password = ''.join(random.choice(alphabet) for i in range(n))
    return password

print(generate_password(8))"
"Find the most frequent name in a given array of names.[""John"", ""John"", ""Sandra"", ""Sandra"", ""Sandra"", ""Tom""]","function mostFrequent(arr) {
    let maxCount = 0;
    let item;
    let frequencyMap = new Map();

    arr.forEach(name => {
        if (frequencyMap.has(name)) {
            frequencyMap.set(name, frequencyMap.get(name) + 1);
        } else {
            frequencyMap.set(name, 1);
        }
    });

    for (let [name, count] of frequencyMap.entries()) {
        if (count > maxCount) {
            maxCount = count;
            item = name;
        }
    }

    return item;
}

console.log(mostFrequent([""John"", ""John"", ""Sandra"", ""Sandra"", ""Sandra"", ""Tom""])); // Sandra"
"Create a code that can be used to perform a linear search in an array.[1, 3, 5, 7, 8, 9], 8","func linearSearch(_ array: [Int], _ x: Int) -> Int {
    for (index, value) in array.enumerated() {
        if value == x {
            return index
        }
    }
    return -1
}

print(linearSearch([1, 3, 5, 7, 8, 9], 8))"
"For a given array of numbers, find the length of the longest increasing subsequence[1, 5, 4, 3, 8, 10, 6]","def longest_increasing_subsequence(arr):
    n = len(arr)
    lis = [1] * n 
  
    for i in range (1 , n): 
        for j in range(0 , i): 
            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : 
                lis[i] = lis[j]+1
  
    maximum = 0
    for i in range(n): 
        maximum = max(maximum , lis[i]) 
  
    return maximum"
What is the logic behind bubble sort?,"Bubble sorting is an algorithm based on iterating through an array of objects or values and comparing each adjacent pair of items. If the first item is greater than the second item, they are swapped, else they remain the same. This process continues until no swaps are needed, which indicates that the elements are sorted increasingly."
How is the traversal of a binary search tree done?,"Binary Search Tree traversal can be done in three different ways: preorder, inorder, and postorder. In preorder traversal, the root of the tree is first printed, followed by traversing the left subtree, then the right subtree. In inorder traversal, the left subtree is traversed first, followed by the root node and the right subtree. Finally, in postorder traversal, the left subtree is traversed first, followed by the right subtree and the node itself."
"Given an array of integers, sort the array in-place using quick sort.[12, 8, 9, 10, 4]","def quickSort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[len(arr)//2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]

    return quickSort(left) + middle + quickSort(right)"
How can you make a dictionary key iterable in Python?,"A dictionary in Python can be made iterable using a for loop. To iterate over the keys of a dictionary, we can use the ``dict.keys()`` method which returns an iterable object of the keys in the dictionary. This iterable can then be used to iterate over the keys of the dictionary."
Create a python program that takes a keyword as an input and prints the top 10 relevant Wikipedia articles for that keyword,"import wikipedia

def get_top_ten_results(keyword):
    results = wikipedia.search(keyword, results=10)
    for result in results:
        print(result)"
How to debug a program in Python?,"In Python, debugging a program can be done by using a debugger to step through code line by line and checking the current state of the values, variables, objects, and functions. Using a debugger is useful for understanding the exact flow of code and finding errors or unexpected behavior. Python also provides a number of built-in debugging tools such as the ``pdb`` module which can be used to debug a program."
"How would you solve this leetcode problem in Python?Problem: Implement the following function

```def majorityElement(self, nums: List[int]) -> int:```

Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.","def majorityElement(self, nums: List[int]):
    majority_count = len(nums)//2
    num_count = {}
    for num in nums:
        if num in num_count:
            num_count[num] += 1
        else:
            num_count[num] = 1
    for key, value in num_count.items():
        if value > majority_count:
            return key"
Write an assembly program to subtract two numbers.,"SUB AA, BB

; AA = AA - BB
;
; This program subtracts the contents of BB from AA
Move B, A
Not B
Add B, #1
Add A, B
; A now contains the result"
Construct a GraphQL query to show all blog posts.,"{
  allBlogPosts {
    id
    title
    author
    content
    createdAt
    modifiedAt
  }
}"
"Produce the following output given the list of numbers.[1, 2, 4, 5]","The list contains 1, 2, 4 and 5."
"Create a valid input format for the calculation of the average of the given numbers.[3, 8, 10]","3, 8, 10"
"Write a Python program to divide the numbers in the list by a given number[2, 4, 10], 2","def divide_list(list, n):
    return [x/n for x in list]"
Generate code to create a PDF report from a given dataset.The dataset contains information about customer orders.,"def generate_report(data):
    doc = PDFDocument()
    title = doc.add_heading('Customer Report', 0)
    doc.add_page_break()

    table = doc.add_table(rows=1, cols=2)
    table.style = 'TableGrid'
    header_row = table.rows[0]
    header_row.cells[0].text = 'Order ID'
    header_row.cells[1].text = 'Amount'

    rows = len(data)
    for row in range(rows):
        new_row = table.add_row()
        new_row.cells[0].text = str(data[row][0])
        new_row.cells[1].text = '{:.2f}'.format(data[row][1])

    doc.add_page_break()
    doc.save('Customer_Report.pdf')"
"Construct a loop to apply a function to each element of a list[2, 5, 8], function square","def apply_function(list, f):
    for i in range(len(list)):
        list[i] = f(list[i])
    return list

def square(x):
    return x*x

list = [2, 5, 8]
apply_function(list, square)"
Construct a Django view that outputs the following stringHello World!,"from django.http import HttpResponse

def hello_world(request):
 return HttpResponse(""Hello World!"")"
Formulate a spark query to delete records having a given value in a fieldfield: age; value: 18; table: people,DELETE FROM people WHERE age = 18;
Generate a logic for a basic regex expression to detect a valid email address.,^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
"Given an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.[1,3,5,7,3,9], k=3","def solution(arr, target):
    for i in range(0, len(arr)-1):
        for j in range(i+1, i + target + 1):
            if j >= len(arr):
                break
            if arr[i] == arr[j]:
                return True
    return False"
"Analyze the following list of strings and find the most frequent character.strings = [""hello"", ""world"", ""foo"", ""bar""]","strings = [""hello"", ""world"", ""foo"", ""bar""]

char_counts = {}
for string in strings:
    for char in string:
        if char not in char_counts:
            char_counts[char] = 0
        char_counts[char] += 1

most_frequent = max(char_counts, key=lambda k: char_counts[k])
print(most_frequent) # prints l"
Create a for loop to print all the even numbers between 1 and 10 (including 1 and 10).,"for i in range(1, 11):
    if i % 2 == 0:
        print(i)"
"List the keys of the following dictionary.person = {
    ""name"": ""John"",
    ""age"": 30
}","person = {
    ""name"": ""John"",
    ""age"": 30
}

keys = list(person.keys())
print(keys) # prints ['name', 'age']"
What is the data structure used to implement a stack?,"The data structure used to implement a stack is a Last-In-First-Out (LIFO) data structure, which is typically implemented using an array or a linked list."
Describe what is ternary operator and provide an example.,"A ternary operator is an operator that takes three arguments and returns one of two values based on a condition. It is a shorthand way to write a standard if-else statement. For example, the following expression evaluates to either ""true"" or ""false"" depending on the value of ""x"": (x > 0) ? ""true"" : ""false""."
Create a loop in Python that prints the integers between 1 and 10 (including 1 and 10).,"for i in range(1, 11):
  print(i)"
Write a Python snippet to print from 1 to 10 (inclusive) using a for loop,"for i in range(1, 11):
  print(i)"
Write a Python snippet to print the same message 10 times.,"for _ in range(10):
  print(""Hello World!"")"
Write a function in Python to move the last element of a given list to the beginning of the list.,"def move_last_to_front(list):
  list[0], list[-1] = list[-1], list[0]
  return list"
"Reverse the order of the values in the input list using Python.list = [1, 4, 5, 6, 7]","list = [7, 6, 5, 4, 1]

def reverse_list(input_list):
    """"""Reverse the order of the values in the input list.""""""
    return input_list[::-1]

if __name__ == '__main__':
    list = [1, 4, 5, 6, 7]
    print(reverse_list(list))"
Create a function in Python to generate a list of consecutive natural numbers starting from 1 up to a given number.n = 8,"def gen_list_of_consecutive_numbers(n):
    """"""Generate a list of consecutive natural numbers up to a given number n""""""
    return list(range(1, n + 1))

if __name__ == '__main__':
    n = 8
    print(gen_list_of_consecutive_numbers(n))"
"Create a Python script to combine two lists into a dictionarylist1 = [1, 2, 3]
list2 = [""a"", ""b"", ""c""]","list1 = [1, 2, 3]
list2 = [""a"", ""b"", ""c""]

def combine_lists(list1, list2):
    """"""Combine two lists into a dictionary""""""
    return {key: value for key, value in zip(list1, list2)}

if __name__ == '__main__':
    list1 = [1, 2, 3]
    list2 = [""a"", ""b"", ""c""]
    print(combine_lists(list1, list2))"
"Add a new key-value pair (""year"": 2020) to the given dictionary using Python.dictionary = {""name"": ""John"", ""age"": 30}","dictionary = {""name"": ""John"", ""age"": 30}

def add_year(dictionary):
    """"""Add a new key-value pair (""year"": 2020) to the dictionary""""""
    dictionary[""year""] = 2020
    return dictionary

if __name__ == '__main__':
    dictionary = {""name"": ""John"", ""age"": 30}
    print(add_year(dictionary))"
"Using the function you wrote in 4.
Write a Python program to convert a binary list to an integerbinary_list = [1, 0, 1, 0]","def binary_list_to_int(binary_list):
    return int(''.join(str(x) for x in binary_list), 2)"
Construct the code which will generate addition equations with randomized numbers ranging from 0 to 5.,"import random

def generate_addition_equation():

    a = random.randrange(0, 6)
    b = random.randrange(0, 6)

    equation = str(a) + "" + "" + str(b) + "" = ""

    return equation"
"Edit the following code to make the output more reusable.def get_name(names):
    print(""Here's my name:"")
    for name in names:
        print(name)
    return","def get_name(names):
    result = []
    for name in names:
        result.append(name)
    return result"
"Create a Python program that takes two lists as arguments, and returns a list that contains the elements present in both lists.list1 = [2, 3, 4, 5] 
list2 = [1, 4, 6]","def common_elements_of_two_lists(list1, list2): 
    result = [] 
    for element in list1: 
        if element in list2: 
            result.append(element) 
    return result"
Construct a regular expression to search the data.Search for all words starting with 'Foo'.,^Foo\w*
"Construct an if-else conditional statement for this situation.If the number is greater than 0, print ""Positive"", otherwise print ""Negative"".","if (number > 0) {
  System.out.println(""Positive"");
} else {
  System.out.println(""Negative"");
}"
"What data structure should we use to solve this problem?We want to store a list of names and their associated addresses, and then look up names quickly.",A HashMap is the best data structure for this use case because it provides the ability to quickly look up values when given the associated key (name in this case).
Create a JS object property with a string value.,"let obj = {
  name:""John Smith""
};"
Construct an array in Python of size 10 and fill it with random integers from 0 to 5.,"import random

array = []
for i in range(10):
  array.append(random.randint(0,5))
  
print(array)"
Design a data structure that can efficiently store unique user IDs and what type of data structure is this?,"A hash table can be used to store unique user IDs as it provides efficient lookups, inserts and deletes of data."
Write a Python code to find all the prime numbers below a given number.,"def get_primes(n): 
  primes = [] 
  for num in range(2, n+1): 
    is_prime = True     
    for div in range(2, n): 
      if (num % div == 0): 
        is_prime = False      
    if is_prime: 
      primes.append(num) 
  return primes"
"Write a Python code that reverses the order of words in a sentence.""This is a sentence""","def reverseWords(sentence): 
  return ' '.join(sentence.split()[::-1])

# Output: ""sentence a is This"""
"Remove the extra spaces from a given string and make the spaces between letters and words consistent.""  The  quick  brown fox  jumps  over  the lazy  dog  ""","def remove_extra_spaces(s):
    s = s.strip()
    words = s.split("" "")
    result = """"
    for word in words:
        if word:
            result += word + "" ""
    return result.strip()"
Write a code that prints all the possible outcomes of rolling two dice.,"def roll_two_dices():
    for i in range(1, 7):
        for j in range(1, 7):
            print(f""({i}, {j})"")"
"How would you improve the efficiency of the following code snippet?def get_total(list):
    total = 0 
    for item in list:
        total += item
    return total","One way to improve the efficiency of this code snippet is to use the built-in sum() function. This avoids having to manually iterate over the list and keep a running total. So the code can be rewritten as:

def get_total(list):
    return sum(list)"
"Generate some sample input that can be used to test the edge cases of the following code snippet.def multiply_two_numbers(a, b):
    if a == 0 or b == 0:
        return 0
    else:
        return a * b","Sample inputs for testing the edge cases:
- Input: a = 0, b = 5
- Input: a = 5, b = 0
- Input: a = 0, b = 0"
"Rewrite this code snippet from a functional programming perspective.def is_even_sum(nums):
    return sum([1 for x in nums if x % 2 == 0]) > 0","This code snippet can be rewritten using a functional programming approach by using the built-in any() function.

def is_even_sum(nums):
    return any(x % 2 == 0 for x in nums)"
"Rewrite the following code snippet from an object-oriented programming perspective.def find_greeting(name):
    if name == ""Alice"":
        return ""Hi Alice!""
    else:
        return ""Hello!""","This code snippet can be rewritten using an object-oriented programming approach by creating two classes - Greeting and Person. 

class Person:
    def __init__(self, name):
        self.name = name

class Greeting:
    def __init__(self):
        self.greetings = {""Alice"": ""Hi Alice!"",
                          ""default"": ""Hello!""}

    def find_greeting(self, person):
        if person.name in self.greetings:
            return self.greetings[person.name]
        else:
            return self.greetings[""default""]"
"How would you print the sum of all elements in a 2-dimensional array?array=[[1,2], [3,4], [5,6]]","sum=0
for i in range(len(array)):
    for j in range(len(array[i])):
        sum+= array[i][j] 

print(sum)"
Write a function to reverse the contents of a stack.,"def reverseStack(stack):
    revStack = []
 
    while len(stack) > 0:
        top = stack.pop()
        revStack.append(top)
 
    return revStack"
"Change the For loop statement below to a While loop statement:for i in range(0, 5):","i = 0
while i < 5: 
    i += 1"
"Convert the given for loop code to a functional programming approach.list = [1,2,3,4]
for i in list:
    new_list.append(i * 2)","new_list = list(map(lambda x: x * 2, list))"
"How would you construct a for loop to print out the contents of an array?arr=[1,3,5,7,9]","for i in range(len(arr)):
    print(arr[i])"
"Write a Python program to sort the dictionary by key.myDict = {'a': 1, 'c': 3, 'b': 2}","sortedDict = sorted(myDict)
for key in sortedDict:
    print(key, ':', myDict[key])"
Design an algorithm for sorting data in ascending order using selection sort.,"def selection_sort(arr):

    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[min_index] > arr[j]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]

    return arr"
"Create a Python dictionary with key-values pairs (fruit-quantity) as listed below.apple = 5, banana = 10, orange = 15","fruit_dict = {
    ""apple"":5,
    ""banana"":10,
    ""orange"":15
    }"
Create a loop in Python to find the sum of all integers from 1 to 100.,"total = 0
for num in range(1, 101): 
    total+= num 

print(""Sum of all integers from 1 to 100 is"", total)"
"Write a regular expression to match the email address ""test@example.com"".","^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$"
"Visualize the following dataset using a bar chart in matplotlib.labels = ['A', 'B', 'C', 'D', 'E', 'F']
values = [8, 5, 7, 12, 4, 10]","import matplotlib.pyplot as plt

labels = ['A', 'B', 'C', 'D', 'E', 'F']
values = [8, 5, 7, 12, 4, 10]

plt.bar(labels, values)
plt.title('Dataset')
plt.xlabel('Category') 
plt.ylabel('Value')
plt.show()"
What is the difference between a software engineer and a software developer?,"Software engineers focus on developing and building software. They design software, maintenance and testing. They may also be involved in the development of applications, the creation of databases, and hardware integration. 
 
Software developers focus on coding, debugging, testing and maintenance of existing software. Developers may also be involved in the development of new applications. They are generally experts in one or more programming languages."
What is the most popular software development language?,"The most popular software development language is currently JavaScript, according to Stack Overflow's 2020 Developer Survey. JavaScript is used by 69.8% of software developers, followed by HTML/CSS at 63.1% and SQL at 54.2%."
Write a query in MongoDB to find all documents which have a count greater than 10.,db.collection.find( { count: { $gt: 10 } } )
"Alter the following python code such that it prints ""Hello, world!""for x in range(1,10):
    print(x)","for x in range(1,10):
    if x == 5:
        print('Hello, world!')
    else:
        print(x)"
Create a function in Python to take two numbers as input and return their sum.,"def add_nums(num1, num2):
    return num1 + num2"
"Construct a class in Python named ""Person"" which stores first name and last name in instance variables","class Person:
  def __init__(self, first_name, last_name):
    self.first_name = first_name
    self.last_name = last_name"
"Calculate the total cost of an order including shipping and taxes, given the following input:shipping cost = 10
tax rate = 0.1
base price = 100",total_cost = 110 + (100 * 0.1) = 120
Find the first prime number larger than 100.,The first prime number larger than 100 is 101.
"Create a dictionary to store the marks of students in a class.Johnny: 85
Jane: 95
Tom: 75","marks = { 'Johnny': 85, 'Jane': 95, 'Tom': 75 }"
Estimate the value of pi to four decimal places.,The estimated value of pi is 3.1416.
"Calculate the sales tax given a price and a tax rate.price = 30
tax rate = 0.075",total_tax = 30 * 0.075 = 2.25
"Given a 2-d array, write a method to flatten the array.[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def flatten(arr):
    flat_list = []
    for sublist in arr:
        for item in sublist:
            flat_list.append(item)
    return flat_list"
Create a RNN model to predict the next character in a given string.,"model = Sequential()
model.add(LSTM(128, input_shape=(sequence_length, n_unique_characters)))
model.add(Dense(n_unique_characters, activation='softmax'))"
Construct the loop in the code to find the maximum element in a non-empty array.int maxNum = array[0];,"for(int i = 0; i < array.length; i++) {
  int currentNum = array[i];
  if (currentNum > maxNum) { maxNum = currentNum; }
}"
"Use the given array to construct the appropriate loop structure to replace the ""TODO"" comment in the code.const array = [1, 2, 3, 4, 5];","for (let i = 0; i < array.length; i++) {
  // TODO
}"
"Write a Python program to convert a string to a list. The string is ""This is a test"".""This is a test""","""""""
Write a Python program to convert a string to a list.
""""""
def string_to_list(str):
    return str.split()

if __name__ == '__main__':
    str = ""This is a test""
    print(string_to_list(str))"
"Sort all strings in a list alphabetically, using Python.[""apple"", ""dog"", ""cat"", ""banana""]","""""""
Sort all strings in a list alphabetically, using Python.
""""""

# Initialize the list of strings
list_of_strings = [""apple"", ""dog"", ""cat"", ""banana""]

# Sort the list alphabetically
list_of_strings.sort()

# Print the sorted list
print(list_of_strings)"
"From a list of numbers, find the smallest number using Python.[21, 9, 67, 34]","""""""
From a list of numbers, find the smallest number using Python.
""""""

# Initialize the list of numbers
list_of_nums = [21, 9, 67, 34]

# Sort the list in order
list_of_nums.sort()

# Print the first element of the sorted list
print(list_of_nums[0])"
Write a query in Redis to get all the keys starting with 'user:'.,KEYS user:*
"Write an Angular component to display a list of books.bookList = [
  {name: ‘The Aeneid’, author: ‘Virgil’},
  {name: ‘The Odyssey’, author: ‘Homer’},
  {name: ‘The Divine Comedy’, author: ‘Dante’}
]","import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-book-list',
  templateUrl: './book-list.component.html',
  styleUrls: ['./book-list.component.css']
})
export class BookListComponent implements OnInit {

  bookList = [
    {name: 'The Aeneid', author: ‘Virgil’},
    {name: ‘The Odyssey’, author: 'Homer’},
    {name: ‘The Divine Comedy’, author: ‘Dante’}
  ];

  constructor() { }

  ngOnInit(): void {
  }

}

<ul>
  <li *ngFor=""let book of bookList"">{{book.name}} - {{book.author}}</li>
</ul>"
"Calculate the total surface area of a rectangular prism with length 10 cm, width 8 cm, and height 5 cm.","Total surface area of a rectangular prism = 2(lw + lh + wh)
= 2(10 x 8 + 10 x 5 + 8 x 5) 
= 2(80 + 50 + 40) 
= 220 cm2"
What is the value of Dirac's constant?,"The value of Dirac's constant, also known as the reduced Planck constant, is 6.62607015 × 10-34 J⋅s."
Convert the following time from Central Daylight time to Eastern Standard time: 15:00.,15:00 Central Daylight Time is equivalent to 16:00 Eastern Standard Time.
Create a function that returns a substring of a given string.string = 'This is a sample string',"def get_substring(string, start, end):
    return string[start:end]"
Generate a list containing all positive integers between 1 and 10.,"positive_integers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Given a list of strings, write a Python program to print each individual string in uppercase.string_list = [""apple"",""banana"",""oranges""]","def print_uppercase(string_list):
  for string in string_list:
    print(string.upper())"
Write code to check if the word 'python' is present in a given string.string = 'I love the programming language Python',"def string_has_python(string):
  return 'python' in string"
Parse a given string and reverse the order of words.string = 'My name is John',"def reverse_words(string):
    words = string.split(' ')
    reversed_words = ' '.join(words[::-1])
    return reversed_words"
Create an array with 10 elements and populate it with zeros.,a = [0] * 10
"Print the 3rd to 5th characters in a given string.string = ""Hello World""","def print_chars(string):
    print(string[2:5])"
Change the following variable declaration into Python.int num = 10;,num = 10
"Create an object that returns the value of the given array.[1,2,3,4]","obj = {1:1, 2:2, 3:3, 4:4}"
"Write a code that sorts an array in descending order.[7,4,1,2]","arr = [7,4,1,2]
arr.sort(reverse=True)"
"Using a for loop and an if statement, count how many even numbers are in the given array.[1,2,3,4]","count = 0
for num in [1,2,3,4]:
 if num % 2 == 0:
 count += 1"
"Create an array that contains the square of every number between 1 and 10, excluding 5.","arr = [1,4,9,16,36,49,64,81, 100]"
"Find the maximum of following array.[4,1,7,9,3]",max = 9
"Print all the elements of the given 2D array in row-wise order.arr = [[1,2], [3,4]]","for row in arr:
 for ele in row:
 print(ele)"
How to generate all permutations of a given list of items?,"def permutation(lst):
 
 if len(lst) == 0:
 return []
 
 if len(lst) == 1:
 return [lst]
 
 l = []
 
 for i in range(len(lst)):
 m = lst[i]
 remLst = lst[:i] + lst[i+1:]
 
 for p in permutation(remLst):
 l.append([m] + p)
 
 return l"
Construct a while loop statement to print only even numbers between 0 to 10 in Python.,"i = 0

while i <= 10: 
 if i % 2 == 0:
 print(i)
 i = i + 1"
"Write a Python script to convert the given list of strings into a comma separated string.[ 'John', 'Julia', 'JeY', 'Jill' ]","list = [ 'John', 'Julia', 'JeY', 'Jill' ]
print( ', '.join(list) )"
"Produce a Regex statement to find a six-letter word that starts with an ""a"" and ends with an ""s"".",/^a\w{4}s$/
"Write a python program to extract the substring from a string after a specific characterstring = ""Hello,World!""
character = "",""","string = ""Hello,World!""
character = "",""
result = string[string.find(character)+1:]
print(result) # World!"
"Create a python program to implement a Binary Search in an arrayarr = [2, 3, 4, 10, 40]
x = 10","def binarySearch(arr, x):
    low = 0
    high = len(arr)-1
    while low <= high:
        mid = int((low + high)/2)
        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid
    return -1
arr = [2, 3, 4, 10, 40]
x = 10
result = binarySearch(arr, x)
if result != -1:
    print(""Element is present at index"",result) 
else:
    print(""Element is not present in array"")"
"Write a Python script to merge two given dictionaries into onedict1 = {'a': 1, 'c': 3, 'd': 4}
dict2 = {'a': 6, 'b': 2, 'c': 4}","dict1 = {'a': 1, 'c': 3, 'd': 4}
dict2 = {'a': 6, 'b': 2, 'c': 4}

dict3 = {**dict1, **dict2}
print(dict3) # {'a': 6, 'c': 4, 'd': 4, 'b': 2}"
Get the sum of the first 100 even numbers.,"The sum of the first 100 even numbers is 10,200."
Identify the input validation code that would be most appropriate for a form receiving a user's age.,"// Validate Age
if (!(age >= 0 && age < 100)) {
    alert(""Please enter a valid age!"");
    return false;
}"
Describe an algorithm for sorting an array of n integers in O(n log n) time.,"A sorting algorithm applicable to an array of n integers in O(n log n) time is Merge Sort. Its procedure first divides the input array into two halves until there are no more divisions are possible. This is the ""divide and conquer"" step of the algorithm. Then, each pair of divided arrays is sorted and merged into a single, sorted array. This is the ""combine"" step of the sorting algorithm. Finally, the sorted sub-arrays are combined in an organized manner to obtain the final sorted array. This algorithm is considered to be efficient, as it runs in O(n log n) time, where n is the number of elements in the array."
Describe a method for adding two numbers that uses a stack data structure,"A method for adding two numbers using a stack data structure involves the following steps: 
1. Push the two numbers onto the stack. 
2. Pop the two numbers off the stack and add them together. 
3. Push the result onto the stack.
4. Pop the result off the stack and return it as the final answer."
"Write code to store an input string in a hashmap with the count of its occurrence as the valueThe input string is ""apple"".","string = ""apple""
count_map = dict()

for char in string:
    if char in count_map:
        count_map[char] += 1
    else:
        count_map[char] = 1

print(count_map)"
"Change the list elements to binary numbers.mylist=[3, 8, 9]",mylist = [bin(i) for i in mylist]
"Normalize a given vector.vector = [2, 5, 6]","# Calculate sum of vector elements
vector_sum = 0
for x in vector:
    vector_sum += x

# Normalize vector
normalized_vector = [x/vector_sum for x in vector]

# Print the normalized vector
print(normalized_vector)"
"Read in a 2D array with three columns.[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]","# Create an empty list
array = []

# Iterate over the 2D array
for row in array_input:
    
    # Create a temporary list
    temp_list = []

    # Iterate over each column
    for col in row:
        temp_list.append(col)

    # Append the temporary list to the array
    array.append(temp_list)"
"Add up the elements of a given matrix.matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]","# Initialize the sum
sum = 0

# Iterate over the matrix
for row in matrix:
    # Iterate over the elements of each row
    for elem in row:
        # Add up the elements
        sum += elem

# Print the sum
print(sum)"
"Create a list of numbers in the range [0, 10) that are divisible by 3.","# Initialize an empty list
list_by_3 = []

# Iterate over the range
for i in range(0, 10):
    # Check if the number is divisible by 3    
    if i % 3 == 0:
        # Append it to the list
        list_by_3.append(i)

# Print the list
print(list_by_3)"
"Generate a dictionary with keys being the list elements and values being the list indexes.mylist = ['a','b','c','d']","# Initialize an empty dictionary
dict_list = {}

# Iterate over the list
for i, item in enumerate(mylist):
    # Add the elements of the list as keys with the index as their value
    dict_list[item] = i

# Print the dictionary
print(dict_list)"
"Calculate the maximum of an input array.mylist = [1, 4, 5, 6, 8, -3]","# Initialize the max
max = mylist[0]

# Iterate over the list
for i in mylist:
    # Check for bigger value
    if i > max:
        # Update the max
        max = i

# Print the max
print(max)"
"Create a function that takes a list of numbers and removes all elements that occur more than once.[1, 2, 3, 1, 2, 5]","def remove_duplicates(numbers): 
    new_list = [] 
    for num in numbers: 
        if num not in new_list: 
            new_list.append(num) 
    return new_list 

print (remove_duplicates([1, 2, 3, 1, 2, 5]))"
Write a recursive function to calculate the Fibonacci sequence.,"def fibo(n): 
  
    if n <= 1: 
        return n 
    else: 
        return(fibo(n-1) + fibo(n-2)) 
  
# take input from the user 
nterms = 10

# check if the number of terms is valid 
if nterms <= 0: 
   print(""Please enter a positive integer"") 
else: 
   print(""Fibonacci sequence:"") 
   for i in range(nterms): 
       print(fibo(i))"
"Find the index of the first character in a string that is not a space.string: ""    Hello world!""","def find_index(string): 
    for i in range(len(string)):  
        if string[i] != ' ': 
            return i 
    return -1

string = ""    Hello world!""
print(find_index(string))"
Write a class to represent a point in a 2-D plane.,"class Point: 
    
    def __init__(self, x_coordinate, y_coordinate): 
        self.x = x_coordinate 
        self.y = y_coordinate 
  
    def get_x(self): 
        return self.x 
  
    def get_y(self): 
        return self.y 
  
    def set_x(self, x_coordinate): 
        self.x = x_coordinate 
  
    def set_y(self, y_coordinate): 
        self.y = y_coordinate 
  
    def distance(self, other_point): 
        x_diff_sq = (self.x - other_point.x) * (self.x - other_point.x) 
        y_diff_sq = (self.y - other_point.y) * (self.y - other_point.y) 
          
        return (x_diff_sq + y_diff_sq) ** 0.5 
  
p1 = Point(1, 2) 
p2 = Point(3, 4) 

print(p1.distance(p2))"
Use a programming language to generate this sequence of numbers:,"[1, 2, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199]"
Write an algorithm to calculate the nth Fibonacci number.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
"Given a list of integers, how can you find the second smallest number in the list?my_list = [4, 8, 19, 6, 17, 11]","def find_second_smallest_number(lst):
    sorted_list = sorted(lst)
    return sorted_list[1]

second_smallest_number = find_second_smallest_number(my_list)"
How can you concatenate two strings in Python?,"# Using the + operator 
str1 = ""Hi""
str2 = "" there!""
str3 = str1 + str2 
print(str3)

# Output: Hi there!

# Using the join() method
str1 = ""Hi""
str2 = "" there!""
str3 = """".join([str1, str2]) 
print(str3)

# Output: Hi there!"
Can you detect if a given number is even or odd?,"def is_even(n):
    return n % 2 == 0"
"Edit the following while loop to fix the error.i = 0
while i <= 5:
    print(i)   
    i =  i + 1","i = 0
while i < 5:
    print(i)    
    i =  i + 1"
"Create a class with two methods which will print out strings ""Hello"" and ""Goodbye"".","class MyClass:
    def hello_method(self):
        print(""Hello"")
    
    def goodbye_method(self):
        print(""Goodbye"")"
How can you sort a list in decending order in Python?,"my_list = [4, 8, 19, 6, 17, 11]

sorted_list = sorted(my_list, reverse=True)"
"Construct a class Student which will take in attributes name, age, and city upon initialization.","class Student:
    def __init__(self, name, age, city):
        self.name = name
        self.age = age
        self.city = city"
Output code for a function that accepts one argument and returns the square of the argument.,"def square(x):
        return x * x"
Output the code for a function to generate the Fibonacci sequence up to the given number n.,"def generate_fibonacci(n):
    fibonacci_list = [0, 1]
    i = 1
    while i < n:
        fibonacci_list.append(fibonacci_list[i] + fibonacci_list[i-1])
        i = i + 1
    return fibonacci_list"
"Write a function to sum up all the elements in a given list and output the result.my_list = [2, 4, 9, 16]","def sum_list_elements(lst):
    result = 0
    for num in lst:
        result += num
    return result"
Construct a set containing numbers from 1 to 5.,"my_set = set(range(1, 6))"
"Output code for a function that will remove all instances of an element from a given list.my_list = [1, 3, 5, 3, 7, 9, 3]","def remove_element(lst, element):
    return [x for x in lst if x != element]"
"Write code to find the longest word in the given list and output it.words_list = [""apple"", ""mango"", ""banana"", ""blueberry""]","def find_longest_word(lst):
    longest_word = """"
    for word in lst:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
"Summarize the following article in less than 100 words.Machine Learning is an advanced course that is currently trending in the tech world. With the help of machine learning, many complex patterns and functions can be solved using algorithms and mathematical models. The ever-increasing advancements in technology also mean that the applications of machine learning are also widening every day.","Machine Learning is a powerful tool utilized in the tech industry to unlock complex patterns and functions. Advances in hardware and software technologies are allowing machine learning to be used in wider applications than ever before, making it a growing trend in the industry. It involves algorithms and mathematical models to complete tasks, resulting in improved efficiency and practical solutions to existing problems."
How does a recursive function work?,"A recursive function is a function that calls itself in order to complete its task. When a recursive function is called, it will break the problem into smaller sub-problems, and call itself with the smaller sub-problems. This process will repeat until the smallest sub-problem is solved, at which point the recursive function will return the result of all the sub-problems it encountered."
Provide an example of a memoization technique in programming.,"An example of a memoization technique in programming is to store the result of a function call in a lookup table. When the function is called for the same input in the future, the stored result can be accessed quickly from the lookup table instead of needing to calculate it again, resulting in improved performance."
Differentiate between a stack and a queue.,"A stack is a data structure that operates on a Last-In-First-Out (LIFO) principle, meaning the element that was added last will be removed first. A queue is a data structure that works on a First-In-First-Out (FIFO) principle, meaning the element that was added first will be removed first. Stacks are often used to reverse the order of elements or to store data temporarily, while queues are used for processing queues of data such as tasks and messages."
What is the difference between a programming language and a scripting language?,"The main difference between a programming language and a scripting language is that a programming language generally requires compiling or interpreting the source code before it can be used, while a scripting language is interpreted on the fly without pre-compilation. Another difference is that programming languages are generally thought of as being more powerful, but scripting languages offer quick development times and are generally easier to learn."
"Compute the minimum of three numbers.50, 133, 4",4
"Classify the following elements into a list.Banana, Apple, Mango","[""Banana"", ""Apple"", ""Mango""]"
List the primitive data types of the language Python.,"Python data types include integers, floating-point numbers, strings, Booleans, lists, sets, dictionaries, tuples, and None."
Find the ASCII code for the character H,72
"Edit this program to print the output as ""Hello World""print (""Bye World""","print(""Hello World"")"
"Write a regular expression that matches words with an ""r"" followed by any number of letters.",\br[a-zA-Z]*
"Convert the following code snippet from Python 2 code to Python 3 code.x = raw_input(""What is your name? "")","x = input(""What is your name? "")"
"Using TensorFlow, create a model that predicts the price of an item from its features.","import tensorflow as tf

# Define the inputs, weights and bias.
inputs = tf.keras.Input(shape=(features))
weights = tf.keras.layers.Dense(3, activation='relu')(inputs)
bias = tf.Variable(tf.random_normal([1]))

# Create the model.
model = tf.keras.Model(inputs, weights + bias)

# Compile and fit the model.
model.compile(optimizer='adam', loss='mse', metrics=['accuracy'])
model.fit(x_train, y_train, validation_split=0.2, epochs=50)"
"Create a constructor for a class called ""Student"".","class Student:
    def __init__(self, name, age, grades):
        self.name = name
        self.age = age
        self.grades = grades"
Add a method to a given class to check if an element is present in it.,"class MyClass:
  def __init__(self, elements):
    self.elements = elements

  def contains(self, element):
    return element in self.elements"
Generate a pseudo code for calculating the Fibonacci sequence.,"// This function starts from 0 
function fibonacci(n) {
    if (n <= 1) {
        return n; 
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2); 
    }
}"
"Using Python, write a code snippet to identify the capital of a given country.Country: India","if country == 'India':
  capital = 'New Delhi'
print(capital)"
"Write a Tensorflow code for building a neural network with two input layers, two hidden layers and one output layer.","model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=[2]),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])"
Compose a Python code for computing the factorial of a given number.,"def factorial(n): 
	if n <= 1 : 
		return 1 
	else : 
		return n * factorial(n-1)"
"Write a ternary operation that checks if a number is negative and prints ""negative"" or positive and prints ""positive"".Number: -5","(Number < 0) ? ""negative"" : ""positive""

Result: negative"
"Develop a function that converts an array of real numbers to its nearest integer values.Array: [3.5, 4.7, 7.9]","def to_nearest_int(real_num_list):
    return [round(x) for x in real_num_list] 

to_nearest_int([3.5,4.7,7.9])

Result: [4, 5, 8]"
"Create a function that takes a 2D array as the argument and returns an array that contains the sums of each row.[[0, 2, 3],
 [1, 2, 3],
 [2, 2, 3]
]","def row_sum(A): 
    result = [] 
  
    for row in A: 
        sum = 0  
        for element in row: 
           sum = sum + element 
        result.append(sum) 
  
    return result"
"Write an algorithm to calculate the median of a given array.Array=[7, 4, 5, 2, 6]","Step 1: Start 
Step 2: Set an empty array, called median_arr.
Step 3: Sort the given array.
Step 4: Check if the length of the array is even or odd. 
Step 5: If even, calculate the average of the middle two elements and store it in median_arr. 
Step 6: If odd, store the middle element in the median_arr.
Step 7: Return the array median_arr containing the median. 
Step 8: End."
"Prepend a given list with the number 0.list = [3, 4, 5, 6]",[0] + list
Generate a number in range between 1 to 10  randomly.,"import random

def random_num():
    return random.randint(1, 10)

if __name__ == '__main__':
    print(random_num())"
"Compute the edits between two strings.str1 = ""I am eating""
str2 = ""I am eating a sandwich""","def edit_distance(str1, str2):
    """"""
    Compute the edit distance between two strings
    """"""
    m = len(str1)
    n = len(str2)

    distance = [[0 for i in range(n+1)] for j in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):

            # If first string is empty, only option is to insert all characters of second string
            if i == 0:
                distance[i][j] = j

            # If second string is empty, only option is to remove all characters of first string
            elif j == 0:
                distance[i][j] = i

            # If last characters are same, ignore last char and recur for remaining string
            elif str1[i-1] == str2[j-1]:
                distance[i][j] = distance[i-1][j-1]

            # If last characters are not same, consider all possibilities and find minimum
            else:
                replace_cost = distance[i-1][j-1] + 1
                remove_cost = distance[i-1][j] + 1
                insert_cost = distance[i][j-1] + 1
                distance[i][j] = min(replace_cost, remove_cost, insert_cost)

    return distance[m][n]
if __name__ == '__main__':
    str1 = ""I am eating""
    str2 = ""I am eating a sandwich""
    print(edit_distance(str1, str2))"
"Join two dictionaries by adding the values with the same key.d1 = {""a"": 1, ""b"": 2, ""c"": 3}
d2 = {""a"": 10, ""d"": 20, ""e"": 30}","def join_dictionaries(d1, d2):
    ''' 
    This function joins two dictionaries by adding their values with
    the same key
    '''
    result = {}
    for k1, v1 in d1.items():
        result[k1] = v1
    
    for k2, v2 in d2.items():
        if k2 in result.keys():
            result[k2] += v2
        else:
            result[k2] = v2
            
    return result

if __name__ == '__main__':
    d1 = {""a"": 1, ""b"": 2, ""c"": 3}
    d2 = {""a"": 10, ""d"": 20, ""e"": 30}
    print(join_dictionaries(d1, d2))"
Write a function to generate valid random passwords.passwordlen = 8,"import string
import random

def generate_password(passwordlen):
    ''' 
    This function generates a random password of the given length
    '''
    code_str = string.ascii_letters + string.digits
    password = ''.join(random.choice(code_str) for i in range(passwordlen))
    return password

if __name__ == '__main__':
    passwordlen = 8
    print(generate_password(passwordlen))"
"Find the subarray with the largest sum in an integer array of length n.[3, -2, 1, 5, 6, -1, 4]","int[] a = [3, -2, 1, 5, 6, -1, 4];
int max_so_far = Integer.MIN_VALUE;
int max_ending_here = 0;
int start = 0;
int end = 0;
int s = 0;

for (int i = 0; i < a.length; i++) {

    max_ending_here += a[i];

    if (max_so_far < max_ending_here) {
        max_so_far = max_ending_here;
        start = s;
        end = i;
    }

    if (max_ending_here < 0) {
        max_ending_here = 0;
        s = i + 1;
    }
}

System.out.println(""Maximum contiguous subarray is from "" + start + "" to "" + end);"
"Write an algorithm to flatten a deeply nested array[1, [2], 3, [4, [5, 6], 7]]","public static List<Object> flattenArray(List<Object> arr) { 
  
    List<Object> result = new ArrayList<>(); 
  
    for (int i = 0; i < arr.size(); i++) { 
  
        if (arr.get(i) instanceof List<?>) { 
  
            List<Object> flat = flattenArray((List<Object>) arr.get(i)); 
            result.addAll(flat); 
        } 
        else { 
            result.add(arr.get(i)); 
        } 
  
    } 
    return result; 

}"
Identify the longest consecutive sequence of zeros in a binary string.110010001,"public static int longestSequenceOfZeros(String s) {
	int max_len = 0;
    int count = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == '0') {
            count++;
            max_len = Math.max(max_len, count);
        } else {
            count = 0;
        }
    }
    return max_len;
}"
"Create a script in Python to search a given string for a substringstring = ""Hello World!""
substring = ""llo""","def searchSubstring(string, substring): 
    results = [] 
    n = len(string) 
    m = len(substring) 

    for i in range(n - m + 1): 
        j = 0

        while(j < m): 
            if(string[i + j] != substring[j]): 
                break
            j += 1

        if j == m: 
            results.append(i)
  
    print(results) 

string = ""Hello World!"" 
substring = ""llo""
searchSubstring(string, substring)"
Create a function to print the elements of a linked list in reverse,"public static void printReversedLinkedList(Node head) {
    if(head == null) return;
    printReversedLinkedList(head.next);
    System.out.print(head.data + "" "");
    }"
Formulate a loop in Python that prints 7 to 18.,"for i in range(7, 19):
    print(i)"
"Using a while loop in Python, print numbers from 5 to 19.","i = 5
while i < 20:
    print(i)
    i += 1"
"Construct an if-else statement in Python that swaps the values of two variables.a = 2
b = 5","if a > b:
    temp = a
    a = b
    b = temp
else:
    temp = a
    a = b
    b = temp"
"Compose an if-else block in Python for checking if a string is empty.str1 = ""My String""
str2 = """"","if len(str1) > 0:
    print(""Not empty"")
else:
    print(""Empty"")"
"Take the following array and write a program to remove any duplicates from itarr = [3, 5, 2, 4, 5, 3, 2, 6]","let arr = [3, 5, 2, 4, 5, 3, 2, 6];
let set = new Set(arr);
let new_arr = [...set];
console.log(new_arr); // [3, 5, 2, 4, 6]"
Generate a random hexadecimal string of length 16.,8b5f5d45ab80fa9e
"Compute median of a given set of integers[1, 6, 5, 8, 14, 9]",8
Evaluate the polynomial f(x) = 4x^2 + 7x + 1 at x = -3.,f(-3) = 4(-3)^2 + 7(-3) + 1 = -36 + 21 + 1 = -14
"Modify the code below to make it a one-liner# Initialize a variable
sum = 0

# Iterate over numbers from 1 to 10
for i in range(1, 11):
    # Add number to sum
    sum = sum + i

# Print sum
print(sum)","print(sum([i for i in range(1, 11)]))"
"Design a class that can be used to represent books. Each book should have the following properties: title, author, and publisher.","class Book:
    def __init__(self, title, author, publisher):
        self.title = title
        self.author = author
        self.publisher = publisher"
Create a dictionary of key-value pairs containing the names of five fruits and their corresponding colors.,"fruitsColors = {
    'apple': 'red',
    'banana': 'yellow',
    'orange': 'orange',
    'grape': 'purple',
    'strawberry': 'red'
}"
Write a Python script to display the numbers from 1 to 10 in ascending order.,"for num in range(1, 11):
    print(num)"
Evaluate the given algebraic expression by substituting 4 for x.expression = 2x + 6,expression = 2 * 4 + 6 = 14
"Create a list comprehension that returns the even numbers in a given list.my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",even_nums = [num for num in my_list if num % 2 == 0]
Write a function that takes a list and an item as parameters and appends the item to the list.,"def append_item(my_list, item):
  return my_list.append(item)"
Create an Angular component that consists of a dropdown menu filled with a list of countries.,"import { Component } from '@angular/core';

@Component({
  selector: 'app-dropdown',
  template: `
  <select>
    <option>USA</option>
    <option>Canada</option>
    <option>France</option>
    <option>Japan</option>
    <option>China</option>
  </select>
  `
})
export class DropdownComponent {

}"
Which library should be used to process data in Scala?,"The Apache Spark library is the most common library used to process data in Scala. Apache Spark provides an easy-to-use, distributed environment for analytics and data processing applications. It offers APIs in Java, Python, and Scala, allowing users to neatly integrate data processing with high-level programming languages."
What is principle of DRY (Don’t Repeat Yourself) in coding?,"The principle of DRY (Don’t Repeat Yourself) states that code should not be written twice, and instead should be reused. This means that code should be organized such that similar functionalities are grouped together so as to avoid duplication, making the code more efficient, robust, and maintainable. It also allows for code to be more easily refactored in order to correct errors or to add new features."
"Construct an algorithm to apply merge sort to an array of integers.[1, 10, 2, 5, 8, 7]","# Python program for Merge Sort

# Merges two subarrays of arr[]. 
# First subarray is arr[l..m] 
# Second subarray is arr[m+1..r] 
def merge(arr, l, m, r): 
	n1 = m - l + 1
	n2 = r- m 

# create temp arrays 
	L = [0] * (n1) 
	R = [0] * (n2) 

# Copy data to temp arrays L[] and R[] 
	for i in range(0 , n1): 
		L[i] = arr[l + i] 

	for j in range(0 , n2): 
		R[j] = arr[m + 1 + j] 

# Merge the temp arrays back into arr[l..r] 
	i = 0	 # Initial index of first subarray 
	j = 0	 # Initial index of second subarray 
	k = l	 # Initial index of merged subarray 

	while i < n1 and j < n2 : 
		if L[i] <= R[j]: 
			arr[k] = L[i] 
			i += 1
		else: 
			arr[k] = R[j] 
			j += 1
		k += 1

# Copy the remaining elements of L[], if there 
# are any 
	while i < n1: 
		arr[k] = L[i] 
		i += 1
		k += 1

# Copy the remaining elements of R[], if there 
# are any 
	while j < n2: 
		arr[k] = R[j] 
		j += 1
		k += 1

# l is for left index and r is right index of the 
# sub-array of arr to be sorted 
def mergeSort(arr,l,r): 
	if l < r: 
		
		# Same as (l+r)//2, but avoids overflow for 
		# large l and h 
		m = (l+(r-1))//2
		
		# Sort first and second halves 
		mergeSort(arr, l, m) 
		mergeSort(arr, m+1, r) 
		merge(arr, l, m, r) 

# Driver code to test above 
arr = [1, 10, 2, 5, 8, 7] 
n = len(arr) 
print (""Given array is"") 
for i in range(n): 
	print (""%d"" %arr[i]), 

mergeSort(arr,0,n-1) 
print (""\n\nSorted array is"") 
for i in range(n): 
	print (""%d"" %arr[i]), 

# This code is contributed by Shreyanshi Arun"
"Create an array of appripriate data to store the following information: {name: John, age: 17, weight: 75}.","[‘John’, 17, 75]"
Create a machine learning algorithm to classify emails as spam or not spam.,"import numpy as np 
from sklearn.naive_bayes import MultinomialNB 
from sklearn.feature_extraction.text import CountVectorizer 

# Create feature vectors 
vectorizer = CountVectorizer() 

# Train the model 
classifier = MultinomialNB() 

# training data 
training_data = [
   (""cheap replica watches"", ""spam""), 
   (""click here to win money"", ""spam""), 
   (""I like your offer"", ""not spam"")]

# Extract feature vectors 
train_features = vectorizer.fit_transform([data[0] for data in training_data]) 

# Train classifier 
classifier.fit(train_features, [data[1] for data in training_data]) 

# Test email 
test_email = ""Click here to get special offers""
test_features = vectorizer.transform([test_email]) 
prediction = classifier.predict(test_features) 

if prediction[0] == ""spam"": 
   print(""Test email is marked as spam"") 
elif prediction[0] == ""not spam"": 
   print(""Test email is marked as not spam"")"
"Create a function in Python that takes two list of strings as parameters and returns a third list of strings which are the elements common in both lists.list1 = [""apple"", ""orange"", ""banana"", ""cherry""] 
list2 = [""apple"", ""grapes"", ""banana"", ""watermelon""]","def common(list1, list2): 
    ans_list = [] 
    
    for i in list1: 
        for j in list2: 
            if i == j: 
                ans_list.append(i) 
    return ans_list 
  
if __name__ == ""__main__"": 
    list1 = [""apple"", ""orange"", ""banana"", ""cherry""] 
    list2 = [""apple"", ""grapes"", ""banana"", ""watermelon""]
    print(common(list1, list2)) # ['apple', 'banana']"
Select the appropriate language to implement a linked list data structure.,"C++ is the best language to implement a linked list data structure as it provides features like dynamic memory allocation, pointers and templates which make it easier to create a linked list."
"Implement a function to check whether a given array contains an odd number or not.array = [2, 3, 5, 9, 22, 13]","def check_odd(array): 
    for i in array:
        if (i % 2 != 0):
            return True
    return False 
  
array = [2, 3, 5, 9, 22, 13] 
if (check_odd(array)): 
    print(""Array contains an odd number"") 
else: 
    print(""Array does not contain an odd number"")"
"Sort an array of strings alphabetically.array = [""cat"", ""dog"", ""horse"", ""apple"", ""zebra""]","def sort_alphabetically(array):
    sorted_array = sorted(array, key = str.lower)
    return sorted_array

array = [""cat"", ""dog"", ""horse"", ""apple"", ""zebra""]
print(sort_alphabetically(array))"
Write a Python program that takes two numbers as input and outputs the greatest common divisor (GCD) between them.18 9,"def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

x = int(input(""Enter the first number: ""))
y = int(input(""Enter the second number: ""))

print(""The GCD of {} and {} is {}"".format(x, y, gcd(x, y)))"
"Change the following code so that it will still print the same output but with a better runtime complexity.def find_duplicates(list):
    duplicates = []
    for i in range(len(list)):
        current = list[i]
        for j in range(len(list)):
            if i != j and list[j] == current:
                duplicates.append(current)
    return duplicates","def find_duplicates(list):
    duplicates = []
    seen = set()
    for i in range(len(list)):
        current = list[i]
        if current in seen:
            duplicates.append(current)
        else:
            seen.add(current)
    return duplicates"
"Write a recursive version of the following code.def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result","def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)"
Implement a Python function to check if an integer is even or odd.,"def is_even(num):
  return num % 2 == 0"
what is the shortest code to print multiple strings on the same line?,"print(*[""String1"", ""String2"", ""String3""])"
Use numpy to create a 3x3 matrix full of zeros.,"import numpy as np 
  
  
# create a 3x3 matrix full of zeros using numpy
matrix_zeros = np.zeros( (3,3) )
print(matrix_zeros)"
"Implement a function in Python that takes two parameters, an array and a number, and sorts the array in ascending order by the number.[5, 29, 4, 7, 28], 3","def sort_array_by_nth_parameter(arr, n):
  return sorted(arr, key=lambda x: x[n])

numbers = [5, 29, 4, 7, 28]
sorted_numbers = sort_array_by_nth_parameter(numbers, 3)
print(sorted_numbers)"
Create a class in Python which contains three attributes and a method.,"class MyClass:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    
    def get_values(self):
        return self.x, self.y, self.z"
"Create a machine learning model to classify the following dataset.x1	x2	x3	y
2	4	2	0
-1	-2	1	1
-1	1	0	1
-2	2	1	0","model = SVC(kernel='linear')  
model.fit([[2,4,2],[-1,-2,1],[-1,1,0],[-2,2,1]], [0,1,1,0]) # Output: SVC(kernel='linear')"
"Create an array with the following elements in the given order.2, 3, 7, 8","my_list = [2, 3, 7, 8]"
Define a tuple in Python.,"my_tuple = (1, 2, 3)  # Output: (1, 2, 3)"
Create a program to check if two binary trees are identical.,"def is_identical(root1, root2): 
    #Check if root1 and root2 are both none
    if root1 == None and root2 == None:
        return True
    #Check if root1 and root2 are none
    if root1 == None or root2 == None:
        return False
    #Check if their data is same
    if root1.data == root2.data:
        #Check if their left subtrees are same
        left_identical = is_identical(root1.left, root2.left)
        #Check if their right subtrees are same
        right_identical = is_identical(root1.right, root2.right)
        if left_identical and right_identical:
            return True
    return False"
Create a program to find the maximum depth in a binary tree.,"def max_depth(root):
    if root == None: 
        return 0;  
    else : 
        #Compute the depth of each subtree
        l_depth = max_depth(root.left) 
        r_depth = max_depth(root.right) 
  
        #Use the larger one
        if (l_depth > r_depth): 
            return l_depth+1
        else: 
            return r_depth+1"
Create a machine learning model to classify an email into spam and non-spam classes.,"The model can be built using any machine learning algorithm. The model should be trained with data points labeled as spam or non-spam emails. After training the model with the data, it should be able to predict whether an email is spam or not based on the input."
"Find the size of a given byte array.byte_array = bytearray([1, 2, 3, 4, 5])",The size of the given byte array is 5.
"Identify the data structure used to represent a given tree.A Tree with 8 nodes, A as the root node, and B, C, D, E, F, G and H as its children.","A tree is a hierarchical data structure, so it can be best represented using a linked list."
Assign values to a given linked listA linked list with 4 nodes,"class Node: 
    def __init__(self,data): 
        self.data = data
        self.next = None
  
class LinkedList: 
    def __init__(self):  
        self.head = None
  
    def assignValues(self, dataList): 
        node1 = Node(dataList[0]) 
        node2 = Node(dataList[1]) 
        node3 = Node(dataList[2]) 
        node4 = Node(dataList[3]) 
  
        self.head = node1 
        node1.next = node2 
        node2.next = node3 
        node3.next = node4 

dataList = [1, 2, 3, 4] 
llist = LinkedList() 
llist.assignValues(dataList)"
Develop an algorithm to traverse a two-dimensional array.A two-dimensional array with 3 rows and 4 columns.,"One possible algorithm to traverse a two-dimensional array is an in-place spiral traversal. Start at the top left corner of the array and traverse in a clockwise direction while updating the location at each step. Each time move one step in the direction you are currently going, then turn right and continue in the new direction. When you reach the end of a row or column, turn right and continue in the new direction until you have traversed the entire array. 

For example, for an array of 3 rows and 4 columns: 

Step 1: [0, 0] 
Step 2: [0, 1] 
Step 3: [0, 2] 
Step 4: [0, 3] 
Step 5: [1, 3] 
Step 6: [2, 3] 
Step 7: [2, 2] 
Step 8: [2, 1] 
Step 9: [2, 0] 
Step 10: [1, 0] 
Step 11: [1, 1] 
Step 12: [1, 2]"
Construct an array which contains the count of each character present in the given string.String: “Hello world”,"def characterCount(str): 
    # create a dictionary and store count 
    # of every character 
    freq = {} 
  
    for i in str: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
          
    # return the dictionary    
    return freq 
  
# Driver code 
str = ""Hello world""
print(characterCount(str))"
Compute the most frequent character from the following string.Codepen,'e' is the most frequent character in the given string.
"Create a script in Python to sort a given array.[1, 5, 4, 3, 6, 2]","sorted_array = [1, 2, 3, 4, 5, 6]"
Design a program to remove punctuations from a given string.,"def remove_punctuations(s):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    s_without_punc = """" 
    for char in s: 
        if char not in punctuations: 
            s_without_punc = s_without_punc + char
    return s_without_punc"
Write code to split a given string into words.,"def split_string_into_words(s):
    words = s.split(' ') 
    return words"
Write a code to create Fibonacci sequence in Python,"def Fibonacci(n): 
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 1: 
        return 0
    elif n == 2: 
        return 1
    else: 
        return Fibonacci(n-1) + Fibonacci(n-2)"
"Identify the type of the given input data.[""A"", ""B"", ""C""]",The given input data is an array of strings.
Construct a Pandas dataframe that contains the average monthly temperatures of a given location over the year.,"import pandas as pd

# define the year 
year = 2020

# define the list of months
months = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"",
          ""July"", ""August"", ""September"", ""October"", ""November"", ""December""]

# define the list of temperatures
temperatures =[32.2, 37.3, 43.3, 51.4, 63.4, 70.4, 
               72.7, 73.4, 68.7, 56.4, 43.7, 34.2]

# construct the dataframe
df = pd.DataFrame({
    'month': months,
    'temperature': temperatures
})

# set the index to the month column
df.set_index('month', inplace=True)"
Formulate a query in MongoDB to find records with a specific field having an array containing a certain value.,"db.collection.find({""field.arrayName"": ""value""})"
Create an R script that takes the summation of given numbers.,"add_numbers <- function(a, b, c){
  return(a + b + c)
}"
Develop a Python program to calculate the area of a triangle given its three sides.,"# Function to calculate area of triangle  
def calculateArea(a, b, c): 
     
    # Calculating the semi-perimeter of triangle  
    s = (a + b + c) / 2
  
    # Calculate the area  
    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    
    
    return area 

# Driver code  
a = 5
b = 6
c = 7
print(""Area of triangle is %0.2f"" %calculateArea(a, b, c))"
Write an objective-C program to print the number of ones in an integer.,"int countOnesInInteger(int number) { 
	int count = 0; 
	while(number) { 
		count += number & 1; 
		number >>= 1;
	} 
	return count; 
}"
Write a Lambda function in Python to generate random numbers in the range of 10 to 50.,"import random
def random_num():
    return random.randint(10,50)"
Train a logistic regression model on the housing prices dataset with 5 features.,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

#read in the dataset
data = pd.read_csv('housing_prices.csv')

#inspect the data
data.info()
data.describe()

#split the data into train & test
X = data[['Bedrooms','Bathrooms','Square_Feet','Parking','Yard']]
y = data['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#train the logistic regression model
logreg = LogisticRegression().fit(X_train, y_train)

#evaluate model performance
print(""Training set score: {:.3f}"".format(logreg.score(X_train, y_train)))
print(""Test set score: {:.3f}"".format(logreg.score(X_test, y_test)))"
"Rewrite the following code to use more efficient loops.for (int i = 0; i < 10; i++) {
   for (int j = 0; j < 10; j++) {
      System.out.println(""hi"");
   }
}","for (int i = 0; i < 100; i++) {
    System.out.println(""hi"");
}"
"Calculate the mean, median and mode for the given set of numbers.130, 160, 140, 160, 160","The mean is: 149.4
The median is: 160
The mode is: 160"
Train a neural network using TensorFlow to predict housing prices.,"import tensorflow as tf
import numpy as np
from tensorflow import keras

# Load the dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.housing_prices.load_data()

# Normalize the input data
x_train = x_train / 255.0
x_test = x_test / 255.0

# Build the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(x_train.shape[1], x_train.shape[2])),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1)
])

# Compile and fit the model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10)

# Evaluate the model
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print('Test accuracy {:.2f}%'.format(test_accuracy*100))"
"Create an array with elements 'Red', 'Green', 'Blue'.","var colors = ['Red', 'Green', 'Blue'];"
Use the string `'Hello world!'` and print it reversed.,!dlrow olleH
Find the length of a string `The quick brown fox`.,19
"Create a low-level PyTorch implementation of the following neural network structure, using the class PyTorch provides.Input shape: (300, 100)

Output shape: (2, 5)","import torch

class MyNetwork(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = torch.nn.Linear(300, 150)
        self.fc2 = torch.nn.Linear(150, 100)
        self.fc3 = torch.nn.Linear(100, 50)
        self.fc4 = torch.nn.Linear(50, 5)
        self.softmax = torch.nn.Softmax(dim=1)


    def forward(self, x):
        x = self.fc1(x)
        x = self.fc2(x)
        x = self.fc3(x)
        x = self.fc4(x)
        
        return self.softmax(x)"
"How would you fill in the blanks in the following code to make it print ""Hello, World"" n times in a row?n = 5
for _ in range(n):
  ________","n = 5
for _ in range(n):
  print(""Hello, World!"")"
"Use a machine learning model to predict the next number in a given sequence.Sequence: [1, 4, 9, 16, 25]","The next number in the given sequence is 36.

To use a machine learning model, the dataset should be split into features and labels. The features could be the numbers in the sequence, and the label could be the next number. The model can be trained on this dataset to accurately predict the next number in a sequence."
"Given a list of strings, write a Python program to remove all duplicates from the list.[“cat”, “dog”, “cat”, “parrot”, “goat”, “dog”]","def remove_duplicates(list):
 res = [] 
 for str in list:
 if str not in res:
 res.append(str)
 return res"
Write a Python program to create a list containing the squares of numbers between 1 and 50.,"def squares_list():
 squares = []
 for i in range(1, 51):
 squares.append(i**2)
 return squares"
"Given an array of numbers, write a Python program to find the second highest element in the array.[1, 3, 5, 4, 7, 9]","def second_highest(arr):
 arr.sort()
 return arr[-2]"
Create a Python program to convert an input string to Morse code.,"def string_to_morse(user_string):
 morse_code = """"
 for ch in user_string:
 if ch.lower() in Morse.alpha:
 morse_code += Morse.alpha[ch.lower()] + "" ""
 return morse_code"
"Change the line in the following code that contains a syntax error.x = 10
if x == 10
print('x is 10')","x = 10
if x == 10:
print('x is 10')"
"Sort the following array in ascending order: [135, 781, 79, 6, 903, 5].[135, 781, 79, 6, 903, 5]","[5, 6, 79, 135, 781, 903]"
Create a variable 'total' that stores the sum of integers 5 and 10.,total = 5 + 10;
Write a loop that prints the numbers from 0 to 9 on the console.,"for (let i = 0; i < 10; i++) {
  console.log(i);
}"
"Create a regex to extract the first name from a string ""John Doe is a programmer"".""John Doe is a programmer""",/John(\s[A-Za-z]+)*/
Describe what a closure is in programming.,"A closure is a special type of function that allows a program to access variables and functions from an outer (or parent) scope, even after that outer scope has been closed or finished executing. The closure essentially ""closes"" the variables and functions from the outer scope, making them available for use in the inner scope of the function."
"Convert the following string into an array using the JS split() function: ""apples oranges bananas grapes"".""apples oranges bananas grapes""","str.split("" ""); // returns [""apples"", ""oranges"", ""bananas"", ""grapes""]"
Create an array with 5 elements in Python.,"arr = [1, 2, 3, 4, 5]"
Create a method to multiply two numbers.,"public static int multiply(int num1, int num2) {
  return num1 * num2;
}"
Write a function to generate a random password that is 10 characters long.,"import random
import string

def generate_password(length):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

print(generate_password(10))"
Construct correctly a for-loop in Python that iterates 6 times from 0 to 5,"for i in range(6):
    print(i)"
"Write a Python expression to compute the GCD (Greatest Common Divisor) of two numbers.a = 10, b = 15","def compute_gcd(a, b):
    while b:
        a, b = b, a % b
    
    return a"
Write a Python expression to generate a list containing numbers from 0 to 12 (not including 12).,"[x for x in range(0, 12)]"
Write a Python expression to compute the exponential of a given number.x = 3,"import math
math.exp(x)"
"Write a Python program to truncate a string after a given number of characters.string = ""Hello World!"", limit = 6","def truncate_string(string, limit):
    return string[:limit]"
"Read the input values and sort them in ascending order.9, 4, 2, 10, 15","list = [9, 4, 2, 10, 15]
list.sort()
print(list)"
"Write a Python program to compute the summation of a list of numbers.list = [1, 2, 3, 4, 5]","def compute_summation(list):
    result = 0
    for i in list:
        result += i
    return result"
"Create an algorithm that prints the common elements of two arrays.arr1 = [3, 10, 15, 7]
arr2 = [7, 8, 5, 10]","def common_elements(arr1, arr2):
   result = []
   for numbers in arr1:
       if numbers in arr2:
           result.append(numbers)
   return result

print(common_elements(arr1, arr2)) # Output: [7, 10]"
"Implement the quicksort algorithm.[12, -6, 47, 18, 0, -3]","def quicksort(alist):
    quicksort_helper(alist, 0, len(alist)-1)

def quicksort_helper(alist, first, last):
    if first < last:
        splitpoint = partition(alist, first, last)
        quicksort_helper(alist, first, splitpoint-1)
        quicksort_helper(alist, splitpoint+1, last)

def partition(alist, first, last):
    pivot = alist[first]

    leftmark = first+1
    rightmark = last

    done = False
    while not done:
        while leftmark <= rightmark and alist[leftmark] <= pivot:
            leftmark = leftmark + 1

        while alist[rightmark] >= pivot and rightmark >= leftmark:
            rightmark = rightmark - 1

        if rightmark < leftmark:
            done = True
        else:
            temp = alist[leftmark]
            alist[leftmark] = alist[rightmark]
            alist[rightmark] = temp

    temp = alist[first]
    alist[first] = alist[rightmark]
    alist[rightmark] = temp

    return rightmark"
Give an example of inheritance in Python,"class Animal:
  def __init__(self, name):
    self.name = name
   
  def eat(self):
    print(f""{self.name} is eating"")

class Dog(Animal):
  def bark(self):
    print(f""{self.name} is barking"")

dog = Dog(""Fido"")
dog.eat()
dog.bark()

# Output:
# Fido is eating
# Fido is barking"
"Construct a Python dictionary with the countries and their total population.countries = [""USA"", ""Canada"", ""India"", ""China"", ""Japan""]","population = {""USA"": 331, 
              ""Canada"": 37, 
              ""India"": 1351, 
              ""China"": 1414, 
              ""Japan"": 126}"
"Modify the code below to print the 10th and 11th element of the arrayarr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]","arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] 

print(arr[9], arr[10])"
"Write a Python program to collect the data from the form below.Name: John 
Email: john@email.com 
Phone: (999)-999-9999","name = input(""Name: "")
email = input(""Email: "")
phone = input(""Phone: "")

data = {
    ""name"": name,
    ""email"": email,
    ""phone"": phone
}"
Write a code to encrypt a text using a Ceasar cipher,"def ceasar_cipher(plaintext, shift): 
    ciphertext = """" 
    for i in range(len(plaintext)): 
        char = plaintext[i] 
        if (char.isupper()): 
            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)
        else: 
            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)
    return ciphertext"
How can you detect the version of Python installed?,"You can detect the version of Python installed by running `python -V` in the command line. This will print the version of Python installed. Alternatively, you can execute `import sys; print(sys.version)` in the Python shell."
Create a program to convert a string of ASCII characters to its equivalent decimal valueString : hello,"def ascii_to_decimal(string):
    decimal_value = 0
    for c in string:
        decimal_value += ord(c)
    return decimal_value

print(ascii_to_decimal('hello')) # Output -> 104 101 108 108 111"
Determine whether a given string contains a valid numberString : abc123,"def is_valid_number(string):
    for c in string:
        if not c.isdigit():
            return False
    return True

print(is_valid_number('abc123')) # Output -> False"
How can you delete an element from a tuple in Python?,"You cannot delete an element from a tuple in Python because tuples are immutable. However, you can create a new tuple with all elements except the one you want to delete. For example, if you want to delete the element at index 3, you can create a new tuple by slicing the tuple from 0 to 3 and then adding the remaining elements after index 3. For example:

tup = (1, 2, 3, 4, 5)
tup = tup[:3] + tup[3+1:]  # Output -> (1, 2, 3, 5)"
"Using classes, create an object that can describe a geometric shape","class Shape:
    def __init__(self, length, width, colour):
        self.length = length
        self.width = width
        self.colour = colour

shape = Shape(10, 20, ""red"")"
Sum the integers from 0 to 10,"def sum(start, end):
    sum = 0
    for i in range(start, end+1):
        sum += i
    return sum

print(sum(0, 10)) # Output -> 55"
Which sorting algorithm should you use for a nearly sorted array?,"For a nearly sorted array, insertion sort is the best sorting algorithm because it only shifts elements up to one position and has a best-case time complexity of O(n) which makes it suitable for nearly sorted arrays."
How can you find all the subsets of a set in Python?,"In Python, you can use the itertools.combinations module to find all the subsets of a set. The syntax is as follows: 

import itertools
list(itertools.combinations(<list or set>, <length of subset>)) 

For example, to find all the subsets of a set [1,2,3] of length 2, you can run: list(itertools.combinations([1,2,3], 2)) // Output -> [(1,2), (1,3), (2,3)]"
Create a program to generate the Pascal's triangle,"def pascal_triangle(n): 
  
    # Create an empty list 
    pascal=[]
  
    for line in range(1, n+1): 
        l=[1]
        for i in range(1,line): 
            l.append(pascal[line-2][i-1]+pascal[line-2][i]) 
        l.append(1) 
        pascal.append(l)
                     
    return pascal 
  
print(pascal_triangle(6))
# Output -> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]"
"Modify the given code to multiply each element in the list by 5.lista = [3, 4, 6, 7]","lista = [x * 5 for x in [3, 4, 6, 7]]"
"Construct a loop that prints out all elements in the list, one at a time.myList = [""egg"", ""milk"", ""bread"", ""sugar""]","for element in myList:
    print(element)"
"Swap the two variables without using a temporary variablea = 3
b = 7","a = a + b
b = a - b
a = a - b"
"Write a Python function to remove the whitespace from the beginning and end of a stringmyStr = ""   hello   ""","def trim_whitespace(myStr):
  myStr = myStr.strip()
  return myStr

print(trim_whitespace(myStr))"
"Given a dictionary with keys as strings and values as numbers, calculate the sum of the valuesmyDict = {'x': 12, 'y': 23, 'z': 8}","def sum_of_dict(myDict):
    result = 0
    for key in myDict:
        result += myDict[key]
    return result

print(sum_of_dict(myDict))"
Write a function to rearrange a given string in alphabetical ordermyString = ‘ Hello World’,"def rearrange_string(myString):
    myString = myString.lower().strip()
    words = myString.split(' ') 
    words.sort() 
    return ' '.join(words)

print(rearrange_string(myString))"
"Copy the given array and add 5 to each elementmyList = [2, 3, 11, 5, 10]",newList = [x + 5 for x in myList ]
"Create an algorithm to detect whether an array is sorted in a given order.array = [1, 2, 4, 7, 10, 11]","def is_sorted(arr, order = ""asc""):
    #check if array is sorted in ascending or descending order
    if order == ""asc"":
        for i in range(0, len(arr)-1):
            if arr[i] > arr[i+1]:
                return False
    elif order == ""desc"":
        for i in range(0, len(arr)-1):
            if arr[i] < arr[i+1]:
                return False
    else:
        print(""Error: Invalid sort order!"")
    return True"
Generate an array of length n that contains the square of the numbers from 1 to n.n = 10,"def generate_square_numbers(n):
    arr = []
    for i in range(1, n+1):
        arr.append(i*i)
    return arr"
Generate an array that contains the first n Fibonacci numbersn = 10,"def generate_fibonacci_numbers(n):
    arr =[0, 1]
    for i in range (2, n):
        arr.append(arr[i-1] + arr[i-2])
    return arr"
Write code to return the kth element in the Fibonacci sequence.,"def return_fibonacci(k):
    a = 0
    b = 1
    if k < 0:
        return ""Incorrect input""
    elif k == 0:
        return a
    elif k == 1:
        return b
    else:
        for i in range(2, k+1):
            c = a + b
            a = b
            b = c
        return b"
"Find all the factors of N (greater than 0), add them together and return the result.N = 30","def sum_factors_of_N(N):
    sum = 0
    for i in range(1, N+1):
        if N % i == 0:
            sum += i
    return sum"
"Using the sample data, extract the substring between two words.sample_data = ""This is a sample sentence.""","def extract_substring(sample_data):
    start_word = ""This""
    end_word = ""sentence""
    start_index = sample_data.index(start_word) + len(start_word)
    end_index = sample_data.index(end_word)
    return sample_data[start_index:end_index]"
Convert a given binary number to a hexadecimal number.binary_num = 1011,"def binary_to_hex(binary_num):
    return hex(int(binary_num, 2))"
"Using the given lists, concatenate the two lists and return the result.list1 = [1, 4, 5]
list2 = [2, 3, 6]","def concatenate_lists(list1, list2):
    return list1 + list2"
"Calculate the hypotenuse of a right angled triangle.x = 3
y = 4","def hypotenuse(x, y):
    return (x**2 + y**2)**0.5"
"Compute the maximum sum of m consecutive values in a given array.arr = [2, 6, 1, 3, 7, 4, 9]
m = 3","def max_m_consecutive_sum(arr, m):
    max_sum = 0
    for i in range(len(arr) - m + 1):
        curr_sum = 0
        for j in range(i, i + m):
            curr_sum += arr[j]
        if curr_sum > max_sum:
            max_sum = curr_sum
    return max_sum"
"Write a code to generate random words from a given text.text = ""Hello World!""","import random

def generate_random_word_from_text(text):
    words = text.split()
    return random.choice(words)

if __name__ == '__main__':
    text = ""Hello World!""
    print(generate_random_word_from_text(text))"
"Write a code to check if one given string is a substring of another.string1=""programming""
string2=""gram""","def is_substring(string1, string2):
    return string2 in string1

if __name__ == '__main__':
    string1=""programming""
    string2=""gram""
    print(is_substring(string1, string2))"
"You need to read a code and count the number of lines of code.def function(a, b):
    c = a + b
    d = a * b
    return c + d","def count_lines_of_code(code):
    lines = code.splitlines()
    return len(lines)

if __name__ == '__main__':
    code=""""""
def function(a, b):
    c = a + b
    d = a * b
    return c + d
    """"""
    print(count_lines_of_code(code))"
"Find the lowest common multiple of two numbers a and b.a = 12, b = 15","def lcm(a, b):
    lcm_num = (a * b) // math.gcd(a, b)
    return lcm_num
 
lcm(12, 15)  # 60"
Describe what a hash function is.,"A hash function is a function which maps a given input of arbitrary or variable length to a fixed length output. It is deterministic, meaning that the same input will always result in the same output, and it is a one-way function, meaning that it is not possible to reconstruct the input from the output. The main purpose of a hash function is to act as a digital fingerprint for data or messages, allowing them to be quickly compared with other fingerprints to determine whether they are the same or different."
Name three techniques used to debug a program.,Three techniques used to debug a program are: 1) Printing debugging messages to track the state of the variables; 2) Stepping through code execution to find the source of the bug; and 3) Testing the code through a series of test cases to uncover any issues.
Write a Haskell code snippet to find the length of a given list.,"length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + (length xs)"
"Design a sorting algorithm to order a list of integers in descending order.[4,7,2,8,9,1]","def descend_sort(nums):
    for i in range(len(nums)-1): 
      for j in range(i+1,len(nums)): 
        if nums[i]<nums[j]: 
          nums[i],nums[j]=nums[j],nums[i] 
    return nums"
"Write a Python program to make a dictionary that contains a number as a key, and its cube as the corresponding value.","def cube_dictionary(n):
    d = {}
    for i in range(1, n+1):
        d[i] = i**3
    return d"
Write a piece of code to return 'hello world' in lower case.,console.log('Hello World'.toLowerCase());
"Rewrite the given code so that it prints the value of `a` 5 times.a = 10

print (a)","a = 10

for i in range(5):
    print (a)"
"Write a Python code that prints the longest continuous increasing sequence of integers within a given list.[1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9]","def longest_continuous_increasing(arr):
  """"""Function to return the length of the longest continuous increasing sequence of integers within a given list
  
  Args:
      arr (list): a list of integers
  
  Returns:
      int: the length of the longest continuous increasing sequence
  """"""
  n = len(arr)
  max_len = 0
  curr_len = 1

  for i in range(1, n): 
    if arr[i] > arr[i-1]: 
      curr_len += 1
    else: 
      # update current length of the increasing sequence
      max_len = max(curr_len, max_len) 
      curr_len = 1
  return max(max_len, curr_len) 
 
# Driver code 
arr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] 
print(longest_continuous_increasing(arr)) # Output: 9"
Create a validation function in Python 3 that checks if the value is an integer,"def validate_integer(val):
    if isinstance(val, int):
        return True
    else: 
        return False"
"Using the Python 3 language, access the second character of the string.string = ""Hello!""",print(string[1])
"Using the Python language, sort the following list in ascending order.mylist = [5, 2, 3, 1, 4]","mylist.sort() 
# mylist is now [1, 2, 3, 4, 5]"
"Using list comprehension, write a Python code to get a list of all possible subsets of the list [1, 2, 3][1, 2, 3]","subsets = [[x for x in [1, 2, 3]] for y in range(0, 2**len([1, 2, 3]))]"
"Write a regular expression to find a substring in a string that matches the pattern ‘an example’string = ""This is an example of a string.""",pattern = /an example/;
"Filter the following list of integer using python, so that only the numbers divisible by 2 are left[1, 2, 3, 4, 5, 6, 7, 8]","def filter_list(list): 
    new_list = []
    for item in list:
        if item % 2 == 0:
            new_list.append(item)
    return new_list 

list = [1, 2, 3, 4, 5, 6, 7, 8]
print(filter_list(list))

# Output: [2, 4, 6, 8]"
Write a code that converts degrees Celsius to degrees Fahrenheit,"def celsius_to_fahrenheit(celsius):
    fahrenheit = celsius * 9/5 + 32
    return fahrenheit"
"Write a code that finds the largest palindromic number in a given array[73, 111, 109]","def largest_palindromic_number(arr):
    largest = 0

    for i in arr:
        s = str(i)
        if s == s[::-1]:
            largest = max(i, largest) 
    return largest

largest = largest_palindromic_number([73, 111, 109])
print(""The largest palindromic number is:"", largest)"
"Compute the sum of each separate element in an array.[1,2,3,4]","def sum_of_elements(arr): 
    total = 0
    for num in arr: 
        total += num  
    return total"
"Print out all even elements in an array.[1,2,3,4,5]","def print_even(arr):
    even = []
    for num in arr:
        if num % 2 == 0:
            even.append(num)
    return even"
"Determine the number of ints in a list.[2, 5, 7, 3, 8]","def count_int(arr):
    count = 0
    for n in arr:
        if type(n) == int:
            count +=1
    return count"
"Write a function to print an array without duplicate elements.[4,3,6,5,4,7]","def remove_duplicates(arr):
    seen = set()
    for x in arr:
        if x not in seen:
            seen.add(x)
            print(x)"
"Determine if all the elements in a list are unique.[3,4,5,5,6]","def has_unique_elements(arr):
    unique_elements = set(arr)
    if len(unique_elements) == len(arr):
        return True
    return False"
Create a function to detect if a given string contains all letters of the English alphabet.,"def has_all_alphabet(string):
    letters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    return set(letters).issubset(string.upper())"
"Write a function to tokenize a string into its characters.sentence = ""Hello world!""","def tokenize(sentence):
    tokens = []
    # loop through the characters in the sentence
    for letter in sentence:
        # append each character to the tokens list
        tokens.append(letter)
    return tokens"
"Train a logistic regression model using Scikit-Learn.import numpy as np
from sklearn.linear_model import LogisticRegression

X = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])
Y = np.array([0, 0, 1, 1])","model = LogisticRegression(solver='lbfgs')
model.fit(X, Y)"
"For the following array of integers, find the number of instances of 6:[1,2,3,4,5,6,7,8,9,10,6,6]","count = 0
for i in [1,2,3,4,5,6,7,8,9,10,6,6]:
    if i == 6:
        count += 1
print (""Number of instances of 6:"",count)"
"Create a list comprehension to extract unique characters from a string.string = ""Hello World""","unique_characters = [char for char in string if string.count(char) == 1]
print(unique_characters)"
"Create a dictionary in Python to store the frequency of characters in a string.string = ""Hello World!""","# Empty dictionary
frequencies = {}

# Iterate over each character in the string
for char in string:
    # Check if the character exists as a key in the dictionary
    if char in frequencies:
        # Increase the count by 1 if it exists
        frequencies[char] += 1
    else:
        # Set the count to 1 for a new character
        frequencies[char] = 1"
"Create a NumPy array to store the values of a given function.import numpy as np

def f(x):
    return x**2","xs = np.linspace(0,10,100)
ys = np.array([f(x) for x in xs])"
Develop a logistic regression model using Python to predict the outcome of a binary classification dataset.,"import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
 
# Load the dataset
df = pd.read_csv(""data.csv"")
 
# Split the data into features (X) and targets (y)
X= df.drop(""target"",axis=1)
y = df[""target""]
 
# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)
 
# Initialize and fit the logistic regression model
clf = LogisticRegression().fit(X_train, y_train)
 
# Make predictions on the test set
predictions = clf.predict(X_test)"
"Given an array of numbers, write a Python function to remove even numbers from the array.[1, 2, 3, 4, 5, 6, 7, 8, 9]","def remove_even_numbers(arr):
    return [x for x in arr if x % 2 != 0]"
Write a Python function to create an empty dictionary.,"def create_empty_dict():
  return {}"
"Create a dictionary that contains the countries and their total populations according to the given list of country-population pairs[('India', 1237696000),('Nigeria', 142429000),('China', 1139517000)]","population_dict = {
 'India': 1237696000,
 'Nigeria': 142429000,
 'China': 1139517000
}"
"Generate a regular expression which matches the following strings: “Run”, “Rune”, “Runner”",Regex: r'Run(e?)r?'
"Write a function that takes a 2D array as input and returns the transposed array[[1, 2], [3, 4], [5, 6]]","def transpose(arr):
    new_arr = []
    for i in range(len(arr[0])):
        new_arr.append([row[i] for row in arr])
    return new_arr"
"Write an algorithm that sorts the following list of integers in ascending order[15, 5, 8, 0, 42]","def sort_list(lst):
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] > lst[j]:
                lst[i], lst[j] = lst[j], lst[i]
    return lst"
"Write a function that checks whether an array contains an element[1, 5, 10]","def exists(arr, target):
    for i in arr:
        if i == target:
            return True
    return False"
Create a class for a BankAccount with the following details:,"class BankAccount {
    constructor(accountNumber, balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }
    deposit(amount) {
        this.balance += amount;
    }
    withdraw(amount) {
        this.balance -= amount;
    }
    getBalance() {
        return this.balance;
    }
}"
"Write a function to delete an element from a given array[1, 2, 3, 4], 3","def delete_element(arr, x):
    new_arr = []
    for i in arr:
        if i != x: 
            new_arr.append(i)
    return new_arr"
"You need to implement a function that finds the longest string inside an array.array = [""cherry"", ""apple"", ""applepie"", ""strawberry"", ""raspberry""]","def find_longest_str(arr):
  longest_str = """"
  for s in arr:
    if len(s) > len(longest_str):
      longest_str = s
  return longest_str
 
result = find_longest_str(array)
print(result) # prints ""applepie"""
Create a simple calculator that takes two float numbers as input and outputs the sum of the two numbers.,"def calculator(num1, num2):
  return num1 + num2
  
print(calculator(2.0, 3.0)) # Prints 5.0"
Ask the user to input a positive integer and find the sum of all positive integers up to that number.,"n = int(input(""Please enter a positive integer: ""))
 
# Initialize sum 
sum = 0
 
# Find sum of all numbers
for i in range(1,n+1):
 sum = sum + i
 
# Print the sum
print(sum)"
"Write a script to filter out strings with more than five characters from a list of strings.arr = [""code"",""programming"",""language"",""Python"",""Loops"",""Conditions""]","def filter_strings(arr):
 filtered_arr = [s for s in arr if len(s) <= 5]
 return filtered_arr
  
print(filter_strings(arr)) # Prints [""code"", ""Loops""]"
Write a simple formatter to wrap the text at a given number of characters.,"def wrap_text(text, columns):
  wrapped_text = """"
  for i in range(0, len(text), columns):
    wrapped_text += text[i:i+columns] + ""\n""
  return wrapped_text
 
text = ""It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.""
print(wrap_text(text, 30)) 

# Prints
# It is a long established 
# fact that a reader will 
# be distracted by the rea
# dable content of a page 
# when looking at its layo
# ut."
Create a function to add two numbers without using the + operator.,"def add_numbers(a, b):
  while b != 0:
    carry = a & b
    a = a ^ b
    b = carry << 1
  return a

print(add_numbers(3,4)) #Prints 7"
Suggest a method in Python to remove any whitespaces from a given string.,"The easiest way to remove whitespaces from a string in Python is to use the replace() method. This method takes two arguments, the string to be replaced and the string to replace it with. To remove all existing whitespace, use the string ' ' as the replace argument. For example, given the string ""This is my string"", the following code would remove all whitespace from the string:

string = ""This is my string""
string = string.replace(' ', '')"
Develop a program to determine if a given year is a leap year.year = 2024,"# Determining if a year is a leap year

# Assigning the current year
year = 2024

# Checking if the year is a leap year
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print(year, ""is a leap year"")
else:
    print(year, ""is not a leap year"")"
Develop an algorithm for a breadth-first search.,"Breadth-first search (BFS) is an algorithm used to traverse a graph or tree data structure. The algorithm works by starting at the root node and exploring each of its adjacent nodes before exploring any of its children. The adjacent nodes are explored in the order with which they were discovered in the graph or tree. The algorithm moves from node to node by visiting the nearest neighbors first, as opposed to a depth-first search, which moves from node to node by exploring the furthest nodes first. The basic algorithm for a breadth-first search is as follows:

1. Create an empty queue
2. Enqueue the root
3. While the queue is not empty: 
    a. Dequeue the next node
    b. If it is the desired node, return success
    c. Else, add all of its children to the queue
4. Return failure"
"Create a function that returns the number of prime numbers between the numbers provided in the input.start_num = 10
end_num = 30","def count_primes(start_num, end_num):
    primes_count = 0
    for num in range(start_num, end_num + 1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                primes_count += 1
    return primes_count"
"Print out the elements of the list in reverse order without using the reverse() method.list_of_words = [""Hello"", ""World"", ""How"", ""Are"", ""You""]","for word in list_of_words[::-1]:
    print(word)"
Write a script to sort an array of numbers from largest to smallest using quick sort.,"def partition(array, begin, end):
    pivot = begin
    for i in range(begin+1, end+1):
        if array[i] <= array[begin]:
            pivot += 1
            array[i], array[pivot] = array[pivot], array[i]
    array[pivot], array[begin] = array[begin], array[pivot]
    return pivot

def quick_sort(array, begin=0, end=None):
    if end is None:
        end = len(array) - 1
    
    def _quick_sort(array, begin, end):
        if begin >= end:
            return
        pivot = partition(array, begin, end)
        _quick_sort(array, begin, pivot-1)
        _quick_sort(array, pivot+1, end)

    return _quick_sort(array, begin, end)"
"Create a function to create a simple calculator for addition, subtraction, multiplication and division.","def simple_calculator(action, a, b):
    if action == ""add"":
        return a + b
    elif action == ""subtract"":
        return a - b
    elif action == ""multiply"":
        return a * b
    elif action == ""divide"":
        return a / b
    else:
        return 0"
"Using the provided text, remove all punctuation and store the resulting output in a new variable.text = ""This is a text string with punctuation!""","import re

new_text = re.sub('[^\w\s]','', text)"
"Print out the names of even numbered elements from the given list.list_of_names = [""John"", ""Jacob"", ""Michael"", ""Peter"", ""Paul""]","for i in range(0, len(list_of_names), 2):
    print(list_of_names[i])"
"Create a function that returns the longest word in a sentence.sentence = ""This is a sentence with lots of words.""","def get_longest_word(sentence):
    words = sentence.split()
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
"Create a function that recursively flattens an array of arbitrarily nested arrays.array = [[1, [2, [3, [[4, 5], 6]]]], 7]","def flatten_list(l):
  for el in l:
    if isinstance(el, list):
      yield from flatten_list(el)
    else:
      yield el"
"Edit the code below so that the condition outcome is true. 

if 3 > 5:
    outcome = True","if 5 > 3:
    outcome = True"
"Check if two strings are an anagram of each other.string1 = ""elbon"" string2 = ""noble""","def is_anagram(string1, string2):
    # Make sure strings are the same length
    if len(string1) != len(string2):
        return False

    # Create dictionary of letter frequency for each string 
    char_freq1 = {}
    char_freq2 = {}

    # Iterate through each character in the strings
    for char in string1:
        char_freq1[char] = char_freq1.get(char, 0) + 1
    for char in string2:
        char_freq2[char] = char_freq2.get(char, 0) + 1

    # Compare the two dictionaries
    if char_freq1 == char_freq2:
        return True
    else:
        return False

if __name__ == '__main__':
    string1 = ""elbon""
    string2 = ""noble""
    print(is_anagram(string1, string2))"
"Compress the following string using a Huffman algorithm.""aaaaaaaaabccddddee""","import heapq

def huffman_encode(string):
    freq = {}
    for c in string:
        freq[c] = freq.get(c, 0) + 1
    
    heap = [[weight, [char, """"]] for char, weight in freq.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        low = heapq.heappop(heap)
        high = heapq.heappop(heap)
        for pair in low[1:]:
            pair[1] = '0' + pair[1]
        for pair in high[1:]:
            pair[1] = '1' + pair[1]
        heapq.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])
    
    encoded = """"
    codes = dict()
    for char, code in heap[0][1:]:    
        codes[char] = code
        encoded += code

    return codes, encoded

if __name__ == '__main__':
    string = ""aaaaaaaaabccddddee""
    codes, encoded = huffman_encode(string)
    print(encoded)"
"Find the maximum product of three numbers in an array.[1, -5, -6, 10, 20, 15]","def max_product_of_three(arr):
    """"""Find the maximum product of three numbers in an array.""""""
    # Sort the array in descending order
    arr.sort(reverse=True)

    # Return max product of the first three numbers
    return arr[0] * arr[1] * arr[2]

if __name__ == '__main__':
    print(max_product_of_three([1, -5, -6, 10, 20, 15]))"
Construct a function to check whether a string is a valid IPv4 address or not.,"def is_valid_ipv4(string):
    # Split the string at the '.'s
    parts = string.split(""."")

    # Check if the length of the parts is valid
    if len(parts) != 4:
            return False

    # Iterate over each part and check if it is a valid number
    for part in parts:
        if not part.isdigit() or int(part) > 255 or int(part) < 0:
            return False

    return True

if __name__ == '__main__':
    string = ""192.168.1.1""
    print(is_valid_ipv4(string))"
Print the sum of the first ten natural numbers.,"def sum_of_first_ten():
    """"""Print the sum of the first ten natural numbers.""""""
    total = 0
    for i in range(1, 11):
        total += i
    return total

if __name__ == '__main__':
    print(sum_of_first_ten())"
"Given an array with n numbers, write a function to find if there exists three elements in the array whose sum is equal to a given number.array = [5, 3, 1, 8], number = 14","def sum_three_elements(array, number):
    """"""Given an array with n numbers, find if there exists three elements in the array whose sum is equal to a given number.""""""
    array.sort()
    for i in range(len(array) - 2):
        left = i + 1
        right = len(array) - 1
        while left < right:
            temp = array[i] + array[left] + array[right]
            if temp == number:
                return True
            elif temp < number:
                left += 1
            else:
                right -= 1
    return False

if __name__ == '__main__':
    a = [5, 3, 1, 8]
    number = 14
    print(sum_three_elements(a, number))"
"Compute the bulk density of a polyhedron using the formula $\frac{mass}{volume}$.mass = 3.5 g, volume = 2.6 cm$^3$","def compute_bulk_density(mass, volume):
    """"""Compute the bulk density of a polyhedron using the formula $\frac{mass}{volume}$.""""""
    return mass / volume

if __name__ == '__main__':
    mass = 3.5 # g
    volume = 2.6 # cm^3
    print(compute_bulk_density(mass, volume))"
Write a function that converts a number to its corresponding month name.4,"def numToMonth(num):
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    return months[num-1]

numToMonth(4) # output: April"
"Write a function to select the second max value in an array.a = [1, 3, 6, 8, 7, 0]","def selectSecondMax(arr): 
    max_1 = 0
    max_2 = 0
  
    for value in arr: 
        if (value > max_1): 
            max_2 = max_1 
            max_1 = value 
        elif (value > max_2 and value != max_1): 
            max_2 = value
    return max_2 
  
a = [1, 3, 6, 8, 7, 0]
print(selectSecondMax(a)) # output: 6"
Write a function that computes the factorial of a positive integer.8,"def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1) 

print(factorial(8)) # output: 40320"
"Convert a binary string to a decimal integer.binString=""11101""","def binaryToDecimal(binString): 
    num = 0
    for i in range(len(binString)): 
        num += int(binString[i]) * pow(2, len(binString)-1-i) 
    return num
  
binString=""11101""
binaryToDecimal(binString) # output: 29"
"Compress a given string to shorter characters by replacing substrings of length 3.string = ""aaabbcc""","def compress(string):
    compressed = """"
    count = 1
    for i in range(len(string)):
        if (i+1 < len(string) and string[i] == string[i+1]):
            count += 1
        else:
            if count > 3:
                compressed += string[i] + str(count)
            else:
                compressed += string[i]*count
            count = 1
    return compressed

string = ""aaabbcc""
print(compress(string)) # output: a3b2c2"
"Write a function to retrieve and reverse the order of all words in a sentence.sentence = ""This is a sentence.""","def reverseSentence(sentence):
    words = sentence.split()
    rev_words = [word[::-1] for word in words]
    return "" "".join(rev_words)

sentence = ""This is a sentence.""
print(reverseSentence(sentence)) # output: sihT si a ecnetnes."
"Perform insertion sort on a given array.arr = [5, 1, 6, 2, 4, 3]","def insertionSort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
    return arr

arr = [5, 1, 6, 2, 4, 3]
print(insertionSort(arr)) # output: [1, 2, 3, 4, 5, 6]"
"Create a function to convert a string of words into a dictionary with the words as keys.string = ""Hello World Bye World""","def string_to_dict(string):
    data = string.split(' ') 
    answer = dict() 
    for element in data: 
        if element in answer: 
            answer[element] += 1
        else: 
            answer[element] = 1
    return answer"
"You are given a string. Remove duplicated characters from the string and return the output.string = ""Mississippi""","def remove_duplicates(string): 
    new_string = [] 
    for i in string: 
        if i not in new_string: 
            new_string.append(i)    
    return ''.join(new_string)"
"You must refactor a code to reduce the complexity and improve its readability.def is_even(num):
    if num == 0:
        return True
    else:
        return is_odd(num - 1)

def is_odd(num):
    if num == 0:
        return False
    else:
        return is_even(num - 1)","def is_even(num):
    return num % 2 == 0

def is_odd(num):
    return num % 2 != 0"
"You need to write a code to solve this logic puzzle.Five people meet at a party. Each of them has a different favorite type of music.

The host is hip-hop fan.
Beth loves Jazz.
Ethan's favorite is rock.
Fiona prefers country.
The last person, Gia, listens only to R&B.

Given these facts, use the known information to determine:

Who listens to R&B?",Gia listens to R&B.
"Create a function to remove all duplicated words from an input sentence.sentence = ""Hello World Bye World""","def remove_duplicates_from_sentence(sentence): 
    split_words = sentence.split(' ')
    no_duplicates = list(set(split_words))
    return ' '.join(no_duplicates)"
"You mustreverse a given array of numbers in-place.arr = [1, 2, 3, 4, 5]","def reverse_array(arr):
    low = 0
    high = len(arr)-1
    while low<high:
        arr[low], arr[high] = arr[high], arr[low]
        low += 1
        high -= 1
    return arr"
How do you extract all the unique words from a string in Python?,"def get_unique_words(input_string):
    words = input_string.split()
    unique_words = set(words)
    return list(unique_words) # Retruns a list of all unique words present in the string."
Create a function that deletes all non-alphanumeric characters from an input string.,"def clean_string(input_string):
    alphaNumericString = [ch for ch in input_string if ch.isalnum()]
    return ''.join(alphaNumericString)"
What is a lambda expression in Python?,"A lambda expression is an anonymous function in Python, which can take any number of arguments and return any type of expression or value. Lambda functions are mainly used for functional programming and can be used wherever normal functions can be used, such as in the filter, map, and reduce functions."
How do you implement depth-first search in Python?,"def depth_first_search(graph, start):
    explored = [] # List of already explored nodes
    stack = [start] # Stack of nodes to explore

    while stack:
        node = stack.pop() # Pop the next node from stack
        if node not in explored:
            explored.append(node) # Add the node to explored
            neighbors = graph[node] # List of neighbors of node
            for neighbor in neighbors:
                stack.append(neighbor) # Add neighbors to stack
    
    return explored"
"There is an array of integer numbers. You need to replace all the odd numbers with 0.arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]","def replace_odds_with_zero(arr):
  for i in range(len(arr)):
    if arr[i] % 2 == 1:
      arr[i] = 0
  return arr"
"You need to find the total length of all words in a given array of strings.arr = [""abc"", ""def"", ""ghi""]",total_length = sum([len(word) for word in arr])
"Write a Python program to create a dictionary with values being doubled for every key.{'a':4, 'b':7}","my_dict = {'a': 4, 'b': 7} 
double_dict = {k : 2*v for (k,v) in my_dict.items()} 
print(double_dict)"
"Write an AngularJS controller to set the ""page"" variable to be the same as the page parameter passed in the URL.","app.controller('pageCtrl', function ($scope, $location) {
    $scope.page = $location.search().page;
});"
"Sort the given array of numbers from least to greatest.[11, 5, 9, 3, 6]","[3, 5, 6, 9, 11]"
"Using the Python requests library, implement a call to the given URL and print the response.URL: http://example.com","import requests

resp = requests.get('http://example.com')
print(resp.text)"
Sum the numbers from 1 to 10 using a for loop in Python.,"total = 0
for i in range(1, 11):
  total += i

print(total)"
Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers.,"def power_list(numbers):
  return [num**2 for num in numbers]"
Calculate the number of minutes in 3 hours using Python.,"minutes = 3 * 60
print(minutes)"
"Find the area of a rectangle given its width and height.Width: 3
Height: 8",Area of the rectangle is 24.
"Using lambda expressions, write a function to convert a given temperature value in celsius to fahrenheit.",convert_c_to_F = lambda x: x*9/5 + 32
"Create a program that searches a given string for a word and prints out its position.String: I am a programmer
Word: programmer",The word 'programmer' is at position 9 in the given string.
"Divide a given list of numbers by a given number.List: [15, 20, 25, 30]
Number: 5","[3, 4, 5, 6]"
"Insert a given value in the middle of a linked list.Linked list: [1, 2, 3]
Value: 4","[1, 2, 4, 3]"
"Write a code to search for an element in a given array of numbers.Array: [30, 2, 10, 15, 33]
Element: 10",The element 10 is found at index 2 in the given array.
Create a function that sorts a given list of strings alphabetically.,"def sort_list(strings):
    return sorted(strings)"
Create a list comprehension expression to generate a list of the squares of all even numbers from 1 to 10.,"[x**2 for x in range(1, 11) if x % 2 == 0]"
"Find the product of all values in a given dictionary.Dictionary: {'a': 10, 'b': 20, 'c': 30}",The product of all values in the given dictionary is 6000.
Create an assembly language program to find the sum of two numbers.,".MODEL SMALL
        .STACK 100H
 
        .DATA
NUM1  DB  12H 
NUM2  DB  17H 
RES   DB  ?
 
        .CODE
MAIN   PROC
        MOV AX, @DATA
        MOV DS, AX
 
        MOV AL, NUM1  ; Move value of num1 in AL
        MOV AH, 0     ; Clear AH
                ADD AL, NUM2  ; Add num2 to AL
        MOV RES, AL
 
        MOV AH, 4CH   ; return to operating system
        INT 21H
MAIN   ENDP
        END MAIN"
"Using the given data point, train a linear regression model.[4, 7], [2, 5], [3, 6]","import numpy as np

X = np.array([[4,7], [2,5], [3,6]])
y = np.array([7, 5, 6])

from sklearn.linear_model import LinearRegression  
model = LinearRegression()  
model.fit(X, y)"
"Generate a string which has ""Hello"" plus the length of the input string.""Hi""","""Hello3"""
Write a routine to print the elements in a linked list.,"class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None

def printList(head): 
    temp = head 
    while(temp): 
        print (temp.data, end="" "") 
        temp = temp.next"
"Edit the following code so that it prints the sum of all elements of given arrayarr = [1,5,8,4,2]
def sumArray(arr):
    for i in len(arr):
        print(arr[i])","arr = [1,5,8,4,2]
def sumArray(arr):
    total = 0
    for i in arr:
        total += i
    print(total)"
"Find the closest match in a given string using the Levenshtein edit distance.String: helpful
Closest match: healthful","editDistance(helpful, healthful) = 2"
Calculate the probability of an event that occurs 3 out of 10 times.,probability = 0.3
"Design a physics experiment to measure the acceleration due to gravity,","A classic experiment to measure the acceleration due to gravity involves timing the free fall of an object. Measure the time it takes for the object to reach the ground from a fixed height, and then calculate the acceleration due to gravity with the formula: a = 2*h/t^2, where h is the height, and t is the measured time."
"Implement a search algorithm to find an element in an array.Array: [2, 4, 6, 8, 10]
Element to find: 8","def search(arr, elem):
    for i in range(len(arr)):
        if arr[i] == elem:
            return i
    return -1"
"Rewrite the given code in a different language.// code written in C++
#include<iostream>
using namespace std;

int main(){
    cout << ""Hello World!"";
    return 0;
}","// code written in Java
public class Main {
    public static void main(String[] args) {
        System.out.println(""Hello World!"");
    }
}"
Convert the given numerical value from base 10 to base 2.Number: 50,base2 = 110010
"Output the top 5 most common strings in a given list of strings.[""apple"", ""orange"", ""apple"", ""banana"", ""apple"", ""cherry"", ""banana""]","from collections import Counter
word_freq = Counter([""apple"", ""orange"", ""apple"", ""banana"", ""apple"", ""cherry"", ""banana""])
words = word_freq.most_common(5)
for word, freq in words:
    print(word, freq)

Output:
apple 3
banana 2
orange 1
cherry 1"
"Create a copy of an existing array.my_arr = [1, 2, 3]","import copy

my_arr_copy = copy.deepcopy(my_arr)"
"Print the elements of an array in reverse order.my_arr = [1, 2, 3]","for element in my_arr[::-1]:
    print(element)"
"Write a function to determine if two rectangles intersect.rect1 = (x1, y1, w1, h1)
rect2 = (x2, y2, w2, h2)","def is_intersect(rect1, rect2):
    if rect1[0] > rect2[0] + rect2[2] or rect1[0] + rect1[2] < rect2[0] or rect1[1] > rect2[1] + rect2[3] or rect1[1] + rect1[3] < rect2[1]:
        return False
    else:
        return True"
Calculate the area of a triangle given three side lengths.,"def calculate_area_triangle(a, b, c):
    s = (a + b + c) / 2
    return (s*(s-a)*(s-b)*(s-c)) ** 0.5"
Create a function to generate random English sentences.<noinputn>,"import random
import nltk

def generate_sentences(num_sentences):
    sentences = []
    for _ in range(num_sentences):
        sentence = []
        while True:
            word = random.choice(nltk.corpus.words.words())
            sentence.append(word)
            if word[-1] == '.':
                break
        sentences.append(' '.join(sentence))
    return sentences"
Write an algorithm to print out the numbers between 0 and 10 in an increasing order.,"for i in range(0,10):
   print(i)"
"Create a function that adds two inputs of type integers and returns the sum.a = 8
b = 3","def add(a, b):
    return a + b"
"Use Numpy or Pandas to calculate the mean of the following array.array = [3, 4, 8, 10, 14]","import numpy as np

mean = np.mean(array)
print(mean)"
Create a program which takes an integer input n and prints its factorial.n = 5,"def factorial(n): 
    fact = 1
    for i in range(1, n+1): 
        fact = fact * i 
    return fact

print(factorial(n))"
"Query an API and display its results.URL = ""http://ip-api.com/json""","import requests

response = requests.get(url)
data = response.json()

print(data)"
Create a range between 10 and 20 with a step of 2.,"range(10,20,2)"
"Aggregate and calculate the mean of the following array by grouping them by the key 'region'.array = [
    {'name': 'John', 'region': 'West', 'score': 4},
    {'name': 'Jane', 'region': 'West', 'score': 10},
    {'name': 'Bob', 'region': 'East', 'score': 5},
    {'name': 'Alice', 'region': 'East', 'score': 20}
]","import pandas as pd

df = pd.DataFrame(array)
mean_by_region = df.groupby('region')['score'].mean() 

print(mean_by_region)"
"Using a for loop, print out a countdown from 10 to 1.","for i in range(10, 0, -1): 
    print(i)"
"Create a function that takes two strings as an input and concatenate the two strings.string1 = ""Hello""
string2 = ""World""","def concat(string1, string2):
    return string1 + string2"
Calculate the square root of a number without using any built-in function.num = 25,"def calculate_sqrt(num):
   # Babylonian method
   x = num
   y = 1
 
   while x > y:
       x = (x + y) / 2
       y = num / x
 
   return x

calculate_sqrt(num)"
"Define a function that takes an array of strings and combines the strings into a single string.array = [""Hello"", ""World""]","def combine_strings(strings_array):
    output_string = """"
    for string in strings_array:
        output_string += string
    
    return output_string

combine_strings(array)"
Interpret the following regular expression.\d{2}\s[A-Z]{3},"The regular expression \d{2}\s[A-Z]{3} matches a two-digit number (\d{2}) followed by a space (\s) followed by three upper-case letters (A-Z]{3}). For example, 12 ABC would be a valid match."
"Calculate the inverse of this matrix.[[1, 0, 0],
[2, 1, 0],
[4, 4, 4]]","[[1.0, 0.0, 0.0],
[-2.0, 1.0, 0.0],
[-3.5, -2.0, 0.25]]"
"Given a list of words, sort them using a bubble sort algorithm.['apple', 'banana', 'cherry', 'date']","['apple', 'banana', 'cherry', 'date']

def bubble_sort(words):
    n = len(words)
    for i in range(n): 
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
            if words[j] > words[j+1]: 
                words[j], words[j+1] = words[j+1], words[j]
    return words"
"Using random module, generate a random sequence of 8 numbers from range 1 to 8.","import random

random_sequence = random.sample(range(1, 9), 8)
print(random_sequence)"
"Compose a function that takes in two strings and produces an array of characters that are only in the first string.stringA = ""abcdefg""
stringB = ""hijklmn""","def to_array(strA, strB):
    output = []
    for char in strA:
        if char not in strB:
            output.append(char)
    return output

result = to_array(stringA, stringB)
print(result)"
"Create a class for a Counter object that will keep track of a total count, and increase and decrease the count when functions are called.","class Counter:
    def __init__(self):
        self.count = 0

    def increase_count(self):
        self.count += 1

    def decrease_count(self):
        self.count -= 1"
Create a function that takes two numerical parameters and checks if they are equal.,"def is_equal(num1, num2):
    if num1 == num2:
        return True
    else:
        return False"
Generate a random string of length n containing only lowercase letters.,"import random
import string

def random_string_generator(n):
    return ''.join(random.choices(string.ascii_lowercase, k=n))

random_string = random_string_generator(n)"
Create a basic program to demonstrate a conditional statement,"num = int(input(""Please enter a number: ""))

if (num % 2) == 0:
   print(""The number is even"")
else:
   print(""The number is odd"")"
"Develop a program to count the number of items of a given listlist = [43, 87, 21, 65]","list = [43, 87, 21, 65]

def count_list_items(list):
    count = 0
    for item in list:
        count += 1
    return count

print(count_list_items(list))"
"Generate a program to filter a list of numbers, passing only the greater than a given numberlist = [12, 24, 36, 45], 36","list = [12, 24, 36, 45]
given_number = 36

def filter_list(list, given_number):
    filtered_list = []
    for number in list:
        if number > given_number:
            filtered_list.append(number)
    return filtered_list

print(filter_list(list, given_number))"
"Write a function to extract the substring between two given indices of a stringstring = ""Hello World"", start_index = 2, end_index = 5","def extract_substring(string, start_index, end_index):
    return string[start_index:end_index]

string = ""Hello World""
start_index = 2
end_index = 5

print(extract_substring(string, start_index, end_index))"
"Create an algorithm to compute the sum of all the numbers in a listlist = [14, 37, 54, 20]","list = [14, 37, 54, 20]

def compute_sum(list):
    total_sum = 0
    for number in list:
        total_sum += number
    return total_sum

print(compute_sum(list))"
"Develop a program to find the smallest number in a listlist = [25, 67, 12, 8]","list = [25, 67, 12, 8]

def find_smallest(list):
    smallest = list[0]
    for number in list:
        if number < smallest:
            smallest = number
    return smallest

print(find_smallest(list))"
Write a function in Python to print out the most common words in a given text.This is a test text. It can be used to test a function for the most common words.,"def most_common(text):
    text_list = text.lower().split()
    results = {}
    for word in text_list:
        if word not in results:
            results[word] = 1
        else:
            results[word] += 1

    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)
    for word, count in sorted_words[:10]:
        print(word, count)"
Write an algorithm to find the common elements in two arrays.,"A possible algorithm to find the common elements in two arrays is as follows:

1. Initialize an empty array to store the common elements.
2. Iterate through the first array and for each element, check if it exists in the second array.
3. If the element does exist in the second array, add it to the common elements array.
4. Return the common elements array."
"Convert the given string to an all lowercase string.""This Is A String""","let s = ""This Is A String"";
let lowercaseString = s.toLowerCase(); // returns ""this is a string"""
Create an object to store name and age.,"An object to store name and age can be created as follows:

let person = { 
    name: 'John Doe', 
    age: 45
};"
"Create an algorithm for sorting a list of numbers using bubble sort.[3,1,5,4,2]","def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

bubble_sort([3,1,5,4,2])"
Compute the factorial of a given number using a recursive algorithm.,"def factorial(n): 
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Create an array of 10 integers initialized to zero and print their values.,"import numpy as np 
arr = np.zeros(10, dtype=int)
print(arr)"
"Convert the following array to a numpy array and print it:[2, 4, 6, 8]","import numpy as np 
arr = np.array([2,4,6,8])
print(arr)"
"Calculate the average of the numbers 1, 2, and 3.<noinput","The average of 1, 2 and 3 is 2.0."
"Reverse the following array using slicing:[1, 2, 3, 4, 5]","[5, 4, 3, 2, 1]
arr = [1, 2, 3, 4, 5]
arr = arr[::-1]
print(arr)"
"Given an array of strings and a string, write a program to find the first index of the string in the array.arr = [""Hello"", ""World"", ""World""]
string = ""World""","def find_index(arr, string):
    for i in range(len(arr)):
        if arr[i] == string:
            return i
    return -1

index = find_index(arr, string)
print(index)"
"Read the code below and edit it to make the output for the given input.def sum_two(a, b):
     return a + b

Input: a = 5, b = 10","def sum_two(a, b):
     return a + b

Input: a = 5, b = 10
Output: 15"
Create a dictionary that contains 10 entries.,"tutorials = {
  'Python': 'http://www.python.org/',
  'Django': 'http://www.djangoproject.com/',
  'Selenium': 'https://pypi.python.org/pypi/selenium',
  'Robotics': 'http://www.robotics-focus.com/',
  'Machine Learning': 'https://en.wikipedia.org/wiki/Machine_learning',
  'Data Science': 'http://www.datascience.com/',
  'Big Data': 'https://aws.amazon.com/big-data/',
  'Cloud Computing': 'http://www.mcp.com/cloud-computing/',
  'Artificial Intelligence': 'https://www.microsoft.com/en-us/research/ai/',
  'Internet of Things': 'https://www.intel.com/content/www/us/en/internet-of-things/overview.html'
}"
"Write a function to convert a given list of strings into a dictionary where the key is a string in the list, and the value is the frequency of the string in the list.[""hello"", ""hello"", ""world"", ""welcome"", ""hello""]","def list_to_dict(lst):
    my_dict = {}
    for i in lst:
        if i in my_dict:
            my_dict[i] += 1
        else:
            my_dict[i] = 1
    return my_dict

list_to_dict([""hello"", ""hello"", ""world"", ""welcome"", ""hello""]) 
# output: {'hello': 3, 'world': 1, 'welcome': 1}"
"Write a code that takes a list of strings and a string, and returns a list containing all strings from the given list that have the given string as a substring.['Hello', 'Hello, world', 'Bonjour', 'My name is John']
String: 'lo'","def find_substring(lst, query):
    result = []
    for el in lst:
        if query in el:
            result.append(el)
    return result

find_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')
# output: ['Hello', 'Hello, world']"
Create a program in python that takes a number as input and checks if it is a prime number5,"def is_prime(num):
    if num == 1:
        return False
    elif num == 2:
        return True
    else:
        for i in range(2, num):
            if (num % i == 0):
                return False
    return True

is_prime(5)
# output: True"
"Use the regex module in python to remove all punctuation in a given string.""Hello, world!""","import re

def remove_punc(string):
    punc_pattern = re.compile('[^\w\s]')
    return punc_pattern.sub('', string)

remove_punc(""Hello, world!"")
# output: 'Hello world'"
"Use the collections module in python to return the most common phrase from a list of strings.[ ""hello world"", ""hello"", ""hello world again"" ]","from collections import Counter

def most_common_phrase(string_list):
    c = Counter(string_list)
    return c.most_common(1)[0][0]

most_common_phrase([""hello world"", ""hello"", ""hello world again""])
# output: 'hello world'"
"The following code is broken, please rewrite it so that it prints out all the primes within a range of 1-100.for i in range(2,100):
    if i % 2 == 0:
        print (i, "" is prime"")","for i in range(2,100):
    is_prime = True
    for j in range(2,i):
        if i % j == 0:
            is_prime = False
            break
    if is_prime:
        print(i, ""is prime"")"
"Write a code that takes an array and returns an array of all elements in the original except for the duplicates.[1, 2, 2, 3, 4, 4, 5]","def remove_duplicates(arr):
    new_arr = []
    seen = set()
    for i in arr:
        if i not in seen:
            seen.add(i)
            new_arr.append(i)
    return new_arr

remove_duplicates([1,2,2,3,4,4,5])
# output: [1,2,3,4,5]"
"Create a program in python to simulate a game of rock, paper, scissors.","from random import randint 

def rock_paper_scissors():
    print(""rock, paper, scissors!"")
    player = input(""Your input: "")
    rand_num = randint(0,2)
    if rand_num == 0:
        computer = ""rock""
    elif rand_num == 1:
        computer = ""paper""
    else:
        computer = ""scissors"" 

    print(""The computer plays: "" + computer)
    if player == computer:
        print(""It's a tie!"")
    elif player == ""rock"":
        if computer == ""paper"":
            print(""Computer wins!"")
        else:
            print(""Player wins!"")
    elif player == ""paper"":
        if computer == ""scissors"":
            print(""Computer wins!"")
        else:
            print(""Player wins!"")
    elif player == ""scissors"":
        if computer == ""rock"":
            print(""Computer wins!"")
        else:
            print(""Player wins!"")
    else:
        print(""Invalid input! You have to choose between rock, paper or scissors"")

rock_paper_scissors()"
"Generate a random password with 8 characters, including upper and lower case letters, numbers, and special characters.","import string
import random

def generate_password():
    # create a string of all possible characters
    chars = string.ascii_letters + string.digits + string.punctuation
    # generate a random password with 8 characters
    password = ''.join(random.choice(chars) for i in range(8))
    return password

# Generate a random password
password = generate_password()
print(password)"
Train a sentiment analysis model using a corpus of movie reviews.,"import pandas as pd
import numpy as np
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.layers import Dense, Embedding, LSTM, Dropout
from keras.models import Sequential

# Load corpus of movie reviews
data = pd.read_csv('movie_reviews.csv')
sentences = data['review'].values
y = data['sentiment'].values

# Create tokenizer
tokenizer = Tokenizer(num_words=2000)
tokenizer.fit_on_texts(sentences)
X = tokenizer.texts_to_sequences(sentences)
vocab_size = len(tokenizer.word_index)+1
X = pad_sequences(X)

# Build and train a model
model = Sequential()
model.add(Embedding(vocab_size, 128, input_length=X.shape[1]))
model.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# fit the model with epochs
model.fit(X,y, batch_size=64, epochs=15)

# Evaluate the model
scores = model.evaluate(X, y, verbose=0)
print(""Accuracy: %.2f%%"" % (scores[1]*100))"
"Construct a loop in Python to invert the order of a string.string = ""Hello World!""","string = ""Hello World!""
inverted_string = """"
for char in string:
    inverted_string = char + inverted_string

print(inverted_string) # Output: ""!dlroW olleH"""
"Write a function in Python to generate a list containing the sum of corresponding elements given two lists.list1 = [9, 4, 8]
list2 = [1, 8, 5]","list1 = [9, 4, 8]
list2 = [1, 8, 5]
def add_corresponding_elements(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result

print(add_corresponding_elements(list1, list2)) # Output: [10, 12, 13]"
"Create a function in Python that shuffles the elements of an input list.arr = [1, 4, 5, 8, 9, 2]","import random 

arr = [1, 4, 5, 8, 9, 2]

def randomize_list(arr): 
    random.shuffle(arr) 
    return arr 

print(randomize_list(arr)) # Output: [9, 1, 2, 4, 5, 8]"
"Design a function in Python to find all the elements in an array that are divisible by 3.arr = [3, 8, 15, 20, 7]","arr = [3, 8, 15, 20, 7]

def divisible_by_3(arr):
    result = []
    for element in arr:
        if element % 3 == 0:
            result.append(element)
    return result

print(divisible_by_3(arr)) # Output: [3, 15, 20]"
"Write Python code to replace all the vowels with underscore.string = ""Hello World!""","string = ""Hello World!""

vowels = [""a"", ""e"", ""i"", ""o"", ""u""]

def replace_vowels_with_underscore(string):
    result = """"
    for char in string:
        if char in vowels:
            result += ""_""
        else:
            result += char
    return result

print(replace_vowels_with_underscore(string)) # Output: ""H_ll_ W_rld!"""
Write a function to receive a list of numbers and return the sum of the list.,"def list_sum(list):
    sum = 0
    for num in list:
        sum += num
    return sum

if __name__ == '__main__':
    print(list_sum([1, 2, 3, 4]))"
"Calculate the area of a rectangle given height and width.height = 2
width = 5","def area_rectangle(height, width):
    return height*width

if __name__ == '__main__':
    print(area_rectangle(2, 5))"
"Convert a string to all uppercase.text = ""Hello World""","def to_uppercase(text):
    return text.upper()

if __name__ == '__main__':
    text = ""Hello World""
    print(to_uppercase(text))"
"Check if an element is present in a list.lst = [1, 2, 3, 4]
element = 5","def is_element_in_list(lst, element):
    return element in lst

if __name__ == '__main__':
    lst = [1, 2, 3, 4]
    element = 5
    print(is_element_in_list(lst, element))"
Write a function to generate a random 5 letter string.,"import random

def generate_random_5_letter_string():
    res = """"
    for i in range(5):
        res += chr(random.randint(97, 122))
    return res

if __name__ == '__main__':
    print(generate_random_5_letter_string())"
"Create a new list by changing all the strings in a given list to uppercase.lst = [""apple"", ""orange"", ""banana""]","def to_upper_case_list(lst):
    res = []
    for s in lst:
        res.append(s.upper())
    return res

if __name__ == '__main__':
    lst = [""apple"", ""orange"", ""banana""]
    print(to_upper_case_list(lst))"
"You need to read a series of intergers and output the smallest and largest number in the series.[-9, 12, -7, 4, 3, -2]","Smallest number: -9
Largest number: 12"
"Identify if a given array is a palindrome.[1, 2, 3, 3, 2, 1]",true
"Modify the provided code to swap two variables.a = 1
b = 2","a, b = b, a"
Validate a credit card number.378734493671000,true
"Given a class definition, write a method to count the number of objects created in the class.class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age","class Student:
    _count = 0
    def __init__(self, name, age):
        self._count += 1
        self.name = name
        self.age = age

    @classmethod
    def get_count(cls):
        return cls._count"
"Given a list of numbers, write a Python code to replace negative numbers with 0 in the list.data = [-4, -2, 5, 8, -1, 0]","data = [0, 0, 5, 8, 0, 0]

result = [0 if ele < 0 else ele for ele in data] # List comprehension"
Create a Haskell function that takes a list of tuples and prints out the first element of each tuple.,"firstElems :: [(a, b)] -> [a]
firstElems [] = []
firstElems ((x, _):xs) = x : firstElems xs"
Create a function that checks if a string contains all the vowels.,"def check_if_string_contains_all_vowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    str_vowels = [ltr for ltr in string.lower() if ltr in vowels]
    return len(str_vowels) == len(vowels)"
Help the user enter two numbers and print the sum of them.,"def print_sum_of_two_numbers():
    num1 = int(input(""Enter a number: ""))
    num2 = int(input(""Enter another number: ""))
    print(""The sum of the two numbers is: "" + str(num1 + num2))"
"Write a code snippet to print the minutes between two timestamps.t1 = datetime.datetime(2020, 1, 1, 12, 0)
t2 = datetime.datetime(2020, 1, 1, 15, 30)","from datetime import datetime, timedelta

t1 = datetime(2020, 1, 1, 12, 0)
t2 = datetime(2020, 1, 1, 15, 30)

minutes_difference = int((t2-t1).total_seconds()/60)
print(""The difference in minutes between the two timestamps is: "" + str(minutes_difference) + "" minutes."")"
"Classify the following code snippet:name = input(""What is your name? "")
print(""Hello, "" + name)",This code snippet is a classification task as it is asking for user input and displaying the result based on the input provided.
Create a function that converts seconds to minutes.,"def convert_seconds_to_minutes(seconds):
    minutes = seconds // 60
    return minutes"
Help the user enter a number and print the square of it.,"def print_square_of_a_number():
    num = int(input(""Enter a number: ""))
    print(""The square of the number is: "" + str(num**2))"
"Modify the original list, so that it contains the numbers from 1 to 10.original_list = [3, 4, 6, 8]","original_list[0] = 1
original_list[1] = 2
original_list.append(5)
original_list.append(7)
original_list.append(9)
original_list.append(10)"
"Create a generator expression to return the squared values of a given list.list_of_nums = [1, 2, 3, 4, 5]",squared_values = (num**2 for num in list_of_nums)
"Create a simple Python program that prints the characters of a string in reverse order.String to be printed: ""Hello""","string = ""Hello"" 

revString = """" 
for i in range(len(string)-1,-1,-1): 
	revString = revString + string[i] 
  
print(revString)"
"Write a Perl script for extracting the first three words from a given string.String: ""I love apples""","@words = split("" "", $string); 

$first_three_words = join("" "", @words[0 .. 2]);
print ""$first_three_words\n"";"
Write a code to get the top 5 Twitter trends in the US.,"""""""
Get the top 5 Twitter trends in the US
""""""

import tweepy

def get_top_trends():
    # Setup authorization
    auth = tweepy.OAuthHandler('','')
    auth.set_access_token('','')
    api = tweepy.API(auth)

    # Get trends
    trends_result = api.trends_place(23424977)
    trends = trends_result[0]['trends']

    # Get top 5 trends
    top_trends = []
    for trend in trends:
        if trend['tweet_volume'] is not None and len(top_trends) < 5:
            top_trends.append(trend['name'])

    return top_trends

if __name__ == '__main__':
    print(get_top_trends())"
"Write a script that generates a random integer within a given range.Minimum value: 0, Maximum value: 20","import random
min_val = 0
max_val = 20
print(random.randint(min_val, max_val))"
How would you create a debug statement to help identify an error in code,"print(f""Error at line {lineno}: {error}"")"
Create an array of 10 people in Python.,"people = [""John"", ""Mia"", ""Nick"", ""Sarah"", ""Emma"", ""Alex"", ""Jayden"", ""Olivia"", ""Lucas"", ""Ava""]"
Write an R function that computes the mean of two numbers.,"compute_mean <- function(x, y) {
  mean = (x + y) / 2
  return(mean)
}"
"Rewrite the following code snippet to an equivalent code in Python.int i = 0;
while (i < 10)
{
   System.out.println(i);
   i++;
}","i = 0
while i < 10:
    print(i)
    i += 1"
"Write an R program to find the unique values in a vector.data = c(10, 20, 30, 20, 40, 30, 50)","data = c(10, 20, 30, 20, 40, 30, 50)
uniq_data = unique(data)
print(uniq_data)  # Outputs: 10, 20, 30, 40, 50"
"Create a function that takes in two parameters ``str_1``and ``str_2``and returns a boolean indicating whether or not ``str_1`` is contained in ``str_2``.str_1 = ""hello"", str_2 = ""hello world""","def is_string_contained(str_1, str_2):
    return str_1 in str_2"
Develop a program to generate a random integer from 1 to 100.,"import random
 
random_int = random.randint(1,100)
print(random_int)"
"Determine the sum of the numbers in a given list using for loops.list_of_numbers = [1, 2, 3, 4, 5]","list_of_numbers = [1, 2, 3, 4, 5]
sum = 0
for num in list_of_numbers:
    sum += num
print(sum)"
"Format the following list of strings according to the desired output.input_strings = [""Hello"", ""world"", ""in"", ""Python""]","input_strings = [""Hello"", ""world"", ""in"", ""Python""]

output_string = ' '.join(input_strings)
output_string = output_string.capitalize() + '!'
print(output_string) 
# Output: Hello world in python!"
"Convert the following hexadecimal value to its decimal equivalent.hex_value = ""0xFF""","hex_value = ""0xFF""

dec_value = int(hex_value, 16)
print(dec_value) # output: 255"
Write a regular expression to validate a domain name.,"regex = r""^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})$"""
"Find the frequency of each letter in the given string.string = ""banana""","freq = {} 
  
for i in string: 
    if i in freq: 
        freq[i] += 1
    else: 
        freq[i] = 1
# freq is {'b': 1, 'a': 3, 'n': 2}"
"Fetch the latest version of the package ""abcd"" and save it to your local environment.",pip install --upgrade abcd
"Calculate the edit distance between the two strings.str1 = ""SUPER""
str2 = ""SPHERE""",edit_distance = 2
Write a regex to match the email address format.,"regex = r'^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$'"
Write a Python for loop to produces the following output:,"for i in range(1, 11):
    print(f""{i}x{i} = {i*i}"")

// Output:
1x1 = 1
2x2 = 4
3x3 = 9
4x4 = 16
5x5 = 25
6x6 = 36
7x7 = 49
8x8 = 64
9x9 = 81
10x10 = 100"
Describe what the 'Error 404 Not Found' page means.,"Error 404 Not Found is an HTTP status code that is sent when the server is unable to find the requested page. It indicates that the page you are looking for could not be found on the server. This page may have been deleted, moved, or temporarily unavailable."
Create a new class 'Dog' with a private attribute 'name' and two public methods 'bark' and 'setName'.,"class Dog:
    __name = """"
    
    def __init__(self, name):
        self.__name = name
    
    def bark(self):
        print(""Woof!"")
    
    def setName(self, name):
        self.__name = name"
"Create a data frame that for a given set of students contains their name, age, and grade level.John (age 18, grade 12),
Jane (age 17, grade 11),
Tom (age 19, grade 13),
Emily (age 17, grade 11).","import pandas as pd

df = pd.DataFrame({
    ""Name"": [""John"",""Jane"",""Tom"",""Emily""],
    ""Age"": [18,17,19,17],
    ""Grade Level"": [12,11,13,11]
})

print(df)"
Write a Python program to find the number of days in a month specified by the user.Month: February,"days = 28

if month == 'February':
    print(days)
else:
    print('Invalid Month')"
"Find the min and max of the given array of numbers.Array: [5, 3, 10]","min = 3
max = 10"
"Write a Python script to return the index of a specific value from a given list.List: [1,2,3,4,5]
Value: 4","list = [1,2,3,4,5]
value = 4

index_value = list.index(value)
print(index_value) # 3"
"Create a vector in R with the following entries: 3, 5, 7.","v1 <- c(3, 5, 7)"
Suggest a way to render the background colour of a div element to blue.,"<div style=""background-color: blue;""> ... </div>"
"Suggest a code to sort the list of tuples below in the descending order of scores.my_list = [('John', 70), ('Jane', 80), ('Dave', 65)]","my_list.sort(key=lambda tup: tup[1], reverse=True)"
Write a list comprehension to generate a list of all prime numbers less than 100.[noinput],"# An efficient list comprehension to generate a list of prime numbers
# less than 100
prime_numbers = [num for num in range(2, 100) 
                 if all(num % i != 0 for i in range(2, int(pow(num, 0.5) + 1)))]"
"Write a function to generate a random password based on the given parameters.Parameters: Length of password must be 8 characters, must contain at least one uppercase letter, contain at least one lowercase letter and must include at least one number","import random
import string

def generate_password(min_length, max_length, upper_case, lower_case, number):
    password = []
    for _ in range(min_length, max_length + 1):
        password.append(random.choice(string.ascii_lowercase if lower_case else '') +
                        random.choice(string.ascii_uppercase if upper_case else '') +
                        random.choice(string.digits if number else ''))
    
    random.shuffle(password)
    return ''.join(password)

# Driver code
print(generate_password(8, 8, True, True, True))"
"Write a function that returns the largest number in a list.List: [1,2,3,4,5,6]","def get_largest(lst):
    largest = 0
    for i in range (0,len(lst)):
        if lst[i] > largest:
            largest = lst[i]
    return largest

# Driver code
myList = [1,2,3,4,5,6]
print(get_largest(myList)) # Output: 6"
"Create a for-loop in Python that iterates through a list of numbers and prints out only the numbers in the list that are divisible by 5.myList = [10,11,20,21,30,31,40]","for i in myList:
    if i % 5 == 0:
        print(i)"
"Generate a XML structure to store the following information.Name: John Smith
Age: 28
Gender: Male","<?xml version=""1.0"" encoding=""UTF-8""?>
<person>
   <name>John Smith</name>
   <age>28</age>
   <gender>Male</gender>
</person>"
"Convert a list of strings to a list of integers.list_of_strings  = [""1"", ""2"", ""3""]","list_of_ints = [1, 2, 3]"
Write a while loop that adds 1 to the value of ‘var’ each time it is iterated until it reaches 5.var = 0,"while var < 5: 
    var += 1"
"Create a new string from the given string by replacing any character with its opposite.string = ""Hello""","opposite_string = ""Sllfs"""
"Reorder the lines of the code to make the program run correctly.def example():
    print(""Line "" + str(a))
    a = 6
    print(""Line "" + str(a))","def example():
    a = 6
    print(""Line "" + str(a))
    print(""Line "" + str(a))"
Complete the function below to make a list of n numbers and return the result.n = 5,"def create_list(n):
  result = [] 
  for i in range(0,n): 
    result.append(i) 
  return result"
Make the following sentence in a statement instantiable.The quick brown fox,The quick brown fox jumped over the lazy dog.
"Classify the following classes into Group A and Group B.apple, banana, pineapple, strawberry","Group A: apple, banana
Group B: pineapple, strawberry"
Suggest a better data structure for the following situation:You have to maintain a record of employees with the property name and telephone number.,"A better data structure for this situation would be to use a hash table, where the name is the key and the phone number is the value. This data structure would provide quick lookups and make updating records efficient."
Define an application programming interface (API) for a given program.,"An application programming interface (API) for a program can be defined as a set of routines, protocols, and tools that provide access services for a software component. An API can expose some aspects of a program's functionality, such as creating a user or managing database records, so that other programs can interact with it and access its data."
Suggest a machine learning algorithm to solve a binary classification problem.,"A machine learning algorithm suitable to solve a binary classification problem could be Logistic Regression, Support Vector Machines, or Naive Bayes. These algorithms are capable of solving binary classification problems and have proven to produce good results in a variety of applications."
Construct a custom data type that is capable of representing the information of a student in a college.,"A custom data type that is capable of representing the information of a student in a college could be a dictionary where the keys represent different student details, such as name, student ID, GPA, and course load. The values for each key would be the respective information for a particular student."
Suggest a data structure for storing real-time stock prices of different companies.,"A suitable data structure for storing real-time stock prices of different companies could be a heap, because it provides efficient access to the lowest values. Since a heap will always store the lowest values, it can be used to keep track of the latest stock prices of each company."
What is a dynamic programming algorithm?,"Dynamic programming is an algorithm design technique that is used to solve optimization problems by breaking them down into smaller subproblems. It enables you to solve a problem by combining solutions to similar subproblems, saving time and often being more efficient than standard methods. It is widely used in operations research, artificial intelligence, bioinformatics, linguistics, and other fields."
"Debug the following code to print the correct output.num = [2, 5, 12, 8]
output = []

for n in num:
  output.apend(n**2)

print(output)","num = [2, 5, 12, 8]
output = []

for n in num:
  output.append(n**2)

print(output)"
"Modify the following code to handle large numbers correctly.def factorial(n):  
   fact = 1
   for i in range(1, n+1): 
       fact *= i 
   return fact","def factorial(n):
    fact = 1
    for i in range(1, n+1): 
        fact = fact*i % 10**10
    return fact % 10**10"
What is the data type returned by the following code snippet?value = 2**8,The data type returned by the following code snippet is an integer.
Write a Python program to display even numbers between two intervals.,"def print_even_numbers_in_range(start, end):
    for i in range(start, end+1):
        if i % 2 == 0:
            print(i)

print_even_numbers_in_range(2, 10)"
"Given a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.words = [""abcd"", ""dcba"", ""lls"", ""s"", ""sssll""]","def find_palindrome_pairs(words): 
    res = [] 
    for i in range(len(words)): 
  
        for j in range(len(words)): 
            if i != j: 
                word = words[i] + words[j] 
                if word == word[::-1]: 
                    res.append((i, j)) 
    return res 
print(find_palindrome_pairs(words))"
Write a function to fill an array of size n with random integers in the range 0...k-1.,"def random_fill_array(n, k):
    arr = []
    for _ in range(n):
        arr.append(random.randint(0, k-1))
    return arr"
Categorize the following algorithm as either a depth-first search or a breadth-first search.,The algorithm is a breadth-first search (BFS) since it starts at a root node and visits nodes in order of increasing depth.
"Using binary search, find the index of a given number in an array of length n.","def binary_search(arr, x):
    low = 0
    high = len(arr)-1
    while low<=high:
        mid = (low+high)//2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1"
"Sort a given matrix such that the elements in each row are in increasing order.[[9, 2, 7], [5, 1, 6], [3, 8, 4]]","[[2, 7, 9], [1, 5, 6], [3, 4, 8]]"
How do you check if a given string is in a list?,"You can check if a given string is in a list by using the ""in"" keyword. For example, if you have a list of strings [""apple"", ""banana"", ""orange""] and you want to check if the string ""banana"" is in the list, you can use the following syntax: 

if ""banana"" in lst:
    print(""String is in list"")"
"Build a neural network with one input layer, two hidden layers and one output layer, using Keras.","import keras 
from keras.models import Sequential
from keras.layers import Dense

# create model
model = Sequential()
model.add(Dense(64, input_dim=1, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# compile model
model.compile(loss='binary_crossentropy', optimizer='RMSprop', metrics=['accuracy'])"
Write a regular expression to match numbers that start with 8,The regular expression to match numbers that start with 8 is: ^8\d+$
What is the most efficient way to search for a specific item in an array?,The most efficient way to search for a specific item in an array is to use a binary search algorithm. Binary search works by repeatedly dividing the array in half until the desired item is found. This method has a time complexity of O(log n).
"Develop a function to compute the cost of a route.distance_matrix=[
 [ 0, 10, 15, 20 ], 
 [ 10, 0, 35, 25 ], 
 [ 15, 35, 0, 30 ], 
 [ 20, 25, 30, 0 ]
]

route = [0, 2, 3, 1]","def get_route_cost(distance_matrix,route):
    cost = 0
    for i in range(len(route)-1):
        cost += distance_matrix[route[i]][route[i+1]]
    return cost
  
route_cost = get_route_cost(distance_matrix, route) 
print (route_cost) 
# Output: 90"
"Create a conditional statement using the given variables.x = 5
y = 10","if x < y:
    print(""x is less than y"")"
Output a list that contains all the non-repeating characters from a given string.string = “thequickbrownfoxjumpsoverthelazydog”,"def non_repeating_characters(string):
    character_set = set() 
    for c in string: 
        if c not in character_set: 
            character_set.add(c)
    return list(character_set)

output = non_repeating_characters(string)
# Output: ['h', 'd', 'g', 'u', 'e', 'm', 'o', 'p', 'q', 't', 'v', 'i', 'c', 'b', 'k', 'x', 'f', 'z', 'a', 'y', 'r', 'w', 'l', 'n', 's', 'j']"
"Develop a function that is able to compute the number of days between two dates.date1 = ""27 April, 2020""
date2 = ""8 May, 2020""","from datetime import datetime 
  
def days_between_dates(date1, date2): 
    date1 = datetime.strptime(date1, ""%d %B, %Y"") 
    date2 = datetime.strptime(date2, ""%d %B, %Y"") 
    return (date2 - date1).days 

output = days_between_dates(date1, date2) 
print (output) 
# Output: 11"
"Develop a function that is able to print a list of consecutive numbers between 1 and N, given an integer N as argument.N = 5","def print_n_numbers(N):
    for x in range(1,N+1):
        print (x) 

print_n_numbers(N) 
# Output: 1 2 3 4 5"
"Implement a function that is able to sum two integers, without using the '+' operator.x = 10
y = 20","def sum_without_plus(x,y):
    while y != 0:
        carry = x & y
        x = x ^ y
        y = carry << 1
    return x

result = sum_without_plus(x, y)
print (result)
# Output: 30"
Write a for loop in python for printing the square of numbers from 0 to 4.,"for num in range(5):
    print(num**2)"
Compute the result of the following equation:  5*3 + 1/2,16.5
Create a request handler for a POST request in Python Flask.,"# Import the necessary libraries
from flask import Flask, request

# Initialize the app
app = Flask(__name__) 
  
@app.route('/post_request_handler', methods = ['POST']) 
def post_request_handler(): 

    # Extract the data from POST request 
    data = request.get_json()  

    # Do something with the data

    # Return a response
    return ""Post request handled"", 200"
"Create a block of code which sorts the given list in increasing order.List = [10, 4, 5, 7, 2]","# Create a new list to store the sorted elements
sortedList = []

# Loop through the given list and add the sorted elements to the new list
while List:
    minimum = List[0]
    for x in List: 
        if x < minimum:
            minimum = x
    sortedList.append(minimum)
    List.remove(minimum)

# Print the sorted list
print(sortedList) # Output: [2, 4, 5, 7, 10]"
"Add an element to the beginning of an array.Array = [3, 4, 6, 9]","# Create a new array with one element at the beginning
new_array = [1] + Array

# Print the new array
print(new_array) # Output: [1, 3, 4, 6, 9]"
"Create a function to calculate the total discount when given items to purchase and their corresponding discounts.item_list = [""shirt"", ""trees"", ""shoes""]
discount_list = [0.25, 0.3, 0.2]","def calculate_total_discount(items, discounts):
    total_discount = 0
    for i in range(len(items)):
        total_discount += discounts[i]
    return total_discount"
Create a function to convert miles per hour to kilometers per hour.,"def convert_mph_to_kph(mph):
    return mph * 1.609"
Generate a custom URL for a Google search.Search: Python Programming,https://www.google.com/search?q=python+programming
Incorporate the PUT method in the given URL.URL: https://example.com/users,https://example.com/users/PUT
Find the area of a square with a given side.Side: 6,36
"Compare the value of the two integers and return True if the first is greater than the second.Number_1: 5
Number_2: 10","public static boolean compare(int num1, int num2){
    return num1 > num2;
}

// Calling the method
boolean result = compare(5, 10);

// Output
// false"
Write a Python function for transforming all characters of a string to upper case.string: 'Hello World!',"def toUpperCase(string):
    return string.upper()

# Output: HELLO WORLD!"
Describe the difference between static and dynamic programming,"Static programming is when all of the instructions to perform a task are written out before the program is executed. In static programming, the order of instructions and the number of instructions does not change during execution. Dynamic programming is when the instructions and number or order of instructions can change at runtime. The instructions and order of instructions may also depend on inputs or external conditions. Dynamic programming is mainly used in optimization problems to reduce the number of calculations needed for a solution."
"Write a code to list out the unique numbers in an arrayarr = [1, 2, 1, 1, 3, 4, 4]","let arr = [1, 2, 1, 1, 3, 4, 4];
let unique_nums = [];

for (let i = 0; i < arr.length; i++) {
  if (!unique_nums.includes(arr[i])) {
    unique_nums.push(arr[i]);
  }
}

console.log(unique_nums);"
"Consider the following code and identify the bugarray = [1, 2, 3, 4]

i = 0
while i < array.length:
	print(array[i]
	i++","array = [1, 2, 3, 4]

i = 0
while i < array.length:
	print(array[i])
	i++

// The bug is that the parenthesis after print(array[i] is missing. It should be print(array[i]) instead."
"Rewrite the following code snippet in Python to multiply an array of two numbers with each element in the array.var numbers = [3, 5];

for (var i = 0; i < numbers.length; i++) {
  numbers[i] = numbers[i] * 2;
}","numbers = [3, 5]

for i in range(len(numbers)):
  numbers[i] *= 2"
"Write a Python program to check if a string starts with a letter 'A'.str = ""I love apples""","if str.startswith(""A""):
  print(""The string starts with 'A'."")
else:
  print(""The string does not start with 'A'."")"
"Use Python to design a function that concatenates two given strings.""Hello"" and ""World""","def concatStrings(a, b): 
	return a + "" "" + b 
 
string1 = ""Hello""
string2 = ""World""
 
print(concatStrings(string1, string2)) # Output: Hello World"
"Implement the function compute_sum() that takes an array of integers and return their sum.arr = [1, 5, 7, -2, 3]","def compute_sum(arr):
    result = 0
    for num in arr:
        result += num
    return result"
Is it possible to create a copy of a multi-dimensional array in Python?,"Yes, it is possible to create a copy of a multi-dimensional array in Python using the copy or deepcopy methods from the copy module. These methods return a new object that is a shallow or deep copy of an array respectively."
Create a function which adds two strings together.,"def add_strings(s1, s2):
    return s1 + s2"
"Write a code that finds the most frequent element in a list.data = [1, 2, 3, 2, 3, 2, 1, 2, 3]","def find_most_frequent(data):
    counts = {}
    for item in data:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1
    most_frequent_item = max(counts, key=counts.get)
    return most_frequent_item"
How do you sort an array of integers in ascending and descending order?,"The easiest way to sort an array of integers in ascending order is to use the built-in sorting function in the programming language of your choice. For example, in Python, the sorted() function can be used. Similarly, to sort an array of integers in descending order, you can use the sorted() function with the reverse argument set to True."
"Implement a method that verifies whether an array of numbers is in increasing order.arr = [2, 3, 5, 10, 15]","def is_increasing_order(arr):
    for i in range(len(arr)-1):
        if arr[i+1] <= arr[i]:
            return False
    return True"
Write a function which checks if a number is a prime number.,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True"
Write a function to convert an RGB color to HEX.,"def rgb_to_hex(red, green, blue):
    return '#%02x%02x%02x' % (red, green, blue)"
"With given input string, create a program that returns a new string with the first character capitalized.hello world","def capitalize(text):
    return text[0].upper() + text[1:]"
How can you print the current memory address of a pointer in C?,"printf(""The current memory address of the pointer is %p"", pointer);"
Write an algorithm to find the maximum substring in the given string.abcadefghi,"def findMaxSubstring(string):
    max_len = 0
    max_substring = """"
    for i in range(len(string)):
        current_substring = []
        for j in range(i, len(string)):
            if string[j] not in current_substring:
                current_substring.append(string[j])
            else:
                break
        if len(current_substring) > max_len:
            max_len = len(current_substring)
            max_substring = ''.join(current_substring)
    return max_substring"
"Develop a python program to search for a substring in a string.String = ""This is a sample string""
Substring = ""sample""","def search_substring(string, substring):
    start = 0
    index = -1

    while start < len(string):
        i = string.find(substring, start)
        if i == -1:
            break
        else:
            index = i
            start = i + 1

    return index"
List the features of a matrix A,"The features of a matrix A include the number of rows and columns, the rank, the determinant, the trace, the eigenvalues, the eigenvectors, and the transpose."
Create a function to calculate the sum of squares x^2 + y^2,"def sum_squares(x, y):
    return x**2 + y**2"
Develop a regular expression to detect a valid e-mail address,"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$"
"Offer a solution to the following programming problemGiven a list of strings, return the longest string","def longest_string(string_list):
    longest_string = """"
    for s in string_list:
        if len(s) > len(longest_string): 
            longest_string = s
    return longest_string"
What is a switch statement?,A switch statement is a control flow statement used to execute different blocks of code depending on the value of a given expression. It provides an alternative to using multiple if-else statements.
Split the given string by hyphen.String: This-is-an-example,"words = input_string.split(""-"") 
# words is ['This', 'is', 'an', 'example']"
Design a distributed system to store and retrieve large amounts of data.,"Design a distributed system utilizing multiple nodes. The system should include a shared storage system with data partitioned across nodes, a distributed hash table to store information about data locations and a replication system to provide fault tolerance."
"Debug the following code to correct a logical error.def sort_list(nums):
    sorted_nums = []
    for i in range(len(nums)):
        print(max(nums))
        sorted_nums.append(max(nums))
        nums.remove(max(nums))
    return sorted_nums","def sort_list(nums):
    sorted_nums = []
    for i in range(len(nums)):
        max_num = max(nums)
        sorted_nums.append(max_num)
        nums.remove(max_num)
    return sorted_nums"
"Enhance the given code to add a search function.def display_list(list):
        for item in list:
        print(item)","def display_list(list, search_term=None):
    for item in list:
        if search_term is None or search_term in item:
            print(item)"
Design an algorithm that can be used to identify if a given binary tree is a valid BST.,"def isValidBST(root): 
	
	# Base Case 
	if root is None: 
		return True
		
	# Check recursive if left is valid 
	if not isValidBST(root.left): 
		return False

	# If root's value is smaller than left subtree, not valid 
	if root.left is not None and root.data < root.left.data: 
		return False

	# Check recursive if right is valid 
	if not isValidBST(root.right): 
		return False

	# If root's value is greater than right subtree, not valid 
	if root.right is not None and root.data > root.right.data: 
		return False

	return True"
"Create a dictionary of student records, where each key is an integer and 
each value is a set containing the student’s name and age.{1: ('John', 24), 2: ('Tom', 26), 3: ('Harry', 20)}","student_dict = {1: {'name': 'John', 'age': 24}, 2: {'name': 'Tom', 'age': 26}, 
                3: {'name': 'Harry', 'age': 20}}"
Write a R code to shuffle the elements of a given vector,shuffle <- function(x) sample(x)
Write an Objective-C program to check if two strings are anagrams,"- (BOOL) isAnagram:(NSString *)string1 with:(NSString *)string2 {

  NSUInteger length1 = [string1 length];
  NSUInteger length2 = [string2 length];
  if (length1 != length2) return NO;

  NSUInteger count[256] = { 0 };
  unichar char1, char2;

  for(int i=0; i<length1; i++) {
    char1 = [string1 characterAtIndex:i];
    char2 = [string2 characterAtIndex:i];
    count[char1]++;
    count[char2]--;
  }

  for (int i=0; i<256; i++) {
    if (count[i] != 0) return NO;
  }
  return YES;
}"
Write a Python script that takes in a string and prints out the frequency distribution of the letters in the string.apple,"def frequency_distribution(string):
    
    # create a dictionary of frequencies    
    freq_dict = {}
    for i in string:
        if i in freq_dict:
            freq_dict[i] += 1
        else:
            freq_dict[i] = 1
    
    # print the result
    for key, value in freq_dict.items():
        print (key + ': ' + str(value))"
"Create a dictionary where the keys are the integers up to 10, and the values are the cubes of those same integers.","def create_dict():
    cube_dict = {}
    for i in range(1,11):
        cube_dict[i] = i**3
    return cube_dict"
Create a function that produces input strings for a calculator.,"def create_input_string(nums, ops):
    input_str = """"
    
    for i in range(len(nums)):
        if i == 0:
            input_str += str(nums[i])
        else:
            input_str += ops[i - 1] + str(nums[i])
    
    return input_str"
"Create a function that takes an array as input and returns true if all elements in the array are similarly oriented (i.e. either all positive or all negative).[-2, -4, -7, -9]","def is_all_same_sign(arr):
    is_same_sign = True
    for i in range(len(arr)):
        if i == 0:
            sign = (arr[i] >= 0)
        else:
            if (arr[i] < 0) != sign:
                is_same_sign = False
    return is_same_sign"
Write a function that produces an array of Fibonacci numbers with n numbers.,"def fibonacci(n):
    if n == 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    elif n > 2:
        fib_nums = [0, 1]
        for i in range(2, n):
            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])
        return fib_nums"
You need to provide an efficient way to implement a stack.,"class Stack:
    def __init__(self):
        self.items = []
    
    def push(self,item):
        self.items.append(item)
    
    def pop(self):
        return self.items.pop()
    
    def isEmpty(self):
        return (self.items == [])"
"Create an array with the following elements: 1, 2, 3, 2, 1.","[1, 2, 3, 2, 1]"
Create a class for a bank account and include the following functions: deposit() and withdraw().,"class BankAccount:
    def __init__(self, balance):
        self.balance = balance
    
    def deposit(self, amount):
        self.balance += amount
    
    def withdraw(self, amount):
        self.balance -= amount"
Suggest an appropriate value for the following variable.number,8
"Output all the elements in an array where the last character of the element is 's'.['apple', 'cat', 'dog', 'elephants']",['elephants']
Write a Python program to count the number of upper and lower case letters in a given string.s = “Hello World”,"def count_letters(s):
    upper_count = 0
    lower_count = 0
    for c in s:
        if c.isupper():
            upper_count += 1 
        elif c.islower():
            lower_count += 1 
    return upper_count, lower_count"
"Write an algorithm to check if two given strings are an anagram.s1 = ""listen""; s2 = ""silent""","Algorithm:

Set s1Letters to an empty array
Set s2Letters to an empty array

Break s1 and s2 into letters and add them to respective arrays.

Sort the arrays

Compare the sorted arrays, if both are equal then strings are anagram else not."
Calculate the number of Sundays in a given year that falls on the first of a month.Year: 2021,There are 5 Sundays in 2021 that fall on the first of a month.
Create a 16-bit hash for this data.Data: 0x0010,The 16-bit hash for the given data is 0xB8C2.
"Perform 3 xor operations for the following data.Data1: 0x8B
Data2: 0x7D",The result of Data1 XOR Data2 is 0xF6. The result of Data2 XOR Data1 is also 0xF6. The result of Data1 XOR Data1 is 0x00.
Name the class for this object-oriented design.[Image],The class name for this object-oriented design should be Foo.
Calculate the area of this shape.[Image],The area of this shape is 36 cm^2.
Generate a Fibonacci sequence until the 100th number.,"The generated Fibonacci sequence up to the 100th number is [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]."
Write a script to generate 10 random numbers between 1 and 100.,"let randomNumbers = [];

for (let i = 0; i < 10; i++) {
  let randNumber = Math.floor(Math.random() * 100 + 1);
  randomNumbers.push(randNumber);
}
console.log(randomNumbers);"
"Write a Python while loop that iterates through the list `my_list` and prints each item.my_list = [1, 2, 3, 4, 5]","i = 0
while i < len(my_list):
    print(my_list[i])
    i += 1"
"Print out the average of all elements within a given array.arr = [3, 7, 4, 8, 9]","arr = [3, 7, 4, 8, 9]
sum = 0

for num in arr:
    sum += num

average = sum / len(arr)
print(average)  # prints 6.4"
What is the syntax for adding a new element to an array?,"The syntax for adding a new element to an array is to use the append() method. For example, to add the element 'hello' to an array named my_array, you would use my_array.append('hello')."
"Using the comment as a guide, complete the code to reverse an array in-place.def reverse_arr(arr):
    """"""Reverses an array in-place. This means the existing array will be modified!""""""
    # TODO: write the code here","def reverse_arr(arr):
    """"""Reverses an array in-place. This means the existing array will be modified!""""""
    # reverse the array in-place
    for i in range(len(arr)//2): 
        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]"
"What is ""type casting"" in programming?","In programming, type casting is the process of converting a value from one data type to another. This is done either explicitly, by writing a cast operator, or implicitly, which is done by the programming language itself. Type casting is often used to convert values from one type to another to enable a program to work with values of multiple types."
Update the code to add to a given list all even numbers between 0 and 10 (inclusive).my_list = [],"my_list = []
for i in range(11):
    if i % 2 == 0:
        my_list.append(i)

print(my_list)  # prints [0, 2, 4, 6, 8, 10]"
"Submit a program to a computer that takes an array and reverses it.array = [1,2,3,4,5]","# Reverse an Array

def reverse_array(arr): 
    return [arr[i] for i in range(len(arr)-1, -1, -1)] 
  
# Driver program 
arr = [1, 2, 3, 4, 5] 
result = reverse_array(arr) 
print(result)"
"Print the longest substring of a string that does not have any repeated characters.string = ""abcaabccbad""","# Longest Substring with no repeated chars
def longestSubstringWithoutDuplication(string): 
    longest = """" 
    start = 0 
    seen = {} 
      
    for i, char in enumerate(string): 
         # Stop current substring when repeating character is found
        if char in seen and start <= seen[char]: 
            start = seen[char] + 1
        # Add the character to the dictionary
        seen[char] = i 
        # Update longest substring
        longest = max(longest, string[start:i + 1], key = len) 
      
    return longest

# Main Program
string = ""abcaabccbad""
result = longestSubstringWithoutDuplication(string)
print(result)"
"Submit an algorithm to find the first non-repeating character of the given string.string = ""bacdedbage""","# Find First Non-Repeating Character
def first_non_repeat(string): 
    seen = {} 

    for char in string: 
        if char not in seen: 
            seen[char] = 0 
        seen[char] += 1

    # Find the first character that appears once
    for i in range(len(string)): 
        if seen[string[i]] == 1: 
            return string[i] 
      
    return '_'


# Main Program
string = ""bacdedbage""
result = first_non_repeat(string)
print(result)"
"Generate a function that takes an array and computes the minimum element within the array.array = [2,3,5,1,4]","# Calculate Minimum Element
def find_min(arr):
    # Set a variable to store the minimum element of the array 
    minimum = arr[0] 
    # Compare each element of the array with the current min element 
    for i in range(1, len(arr)): 
        if arr[i] < minimum: 
            minimum = arr[i] 
    return minimum 

# Main Program
array = [2,3,5,1,4]
result = find_min(array)
print(result)"
"Edit the code so that it can handle the fractions.def calculate(x, y): 
    if isinstance(x, int) and isinstance(y, int): 
        return x + y 
    else: 
        return ""Please use integers only.""","def calculate(x, y): 
    # Check if the numbers are integers or floats 
    if isinstance(x, (int, float)) and isinstance(y, (int, float)): 
        return x + y 
    else: 
        return ""Please use numbers only."""
"Create an array of strings, such that it contains strings of all possible combinations of n characters from a given string of characters.Given string: ""ABC"", n = 3","arr = [""AAA"", ""AAB"", ""AAC"", ""ABA"", ""ABB"", ""ABC"", ""ACA"", ""ACB"", ""ACC"", ""BAA"", ""BAB"", ""BAC"", ""BBA"", ""BBB"", ""BBC"", ""BCA"", ""BCB"", ""BCC"", ""CAA"", ""CAB"", ""CAC"", ""CBA"", ""CBB"", ""CBC"", ""CCA"", ""CCB"", ""CCC""]"
"let A be a n x n matrix, write a function to calculate the trace of AA = [[1,2,3],[4,5,6],[7,8,9]]","def trace(A):
    # initialize trace
    trace = 0
    
    # loop through matrix A
    for i in range(len(A)):
        for j in range(len(A)):
            # when i equals j
            if i == j:
                trace += A[i][j]

    return trace"
"Write a function to calculate the hypotenuse of a right triangle when passed two sides (lenghts) of the triangleside1 = 4, side2 = 3","def calculate_hypotenuse(side1, side2):
    hypotenuse = (side1 ** 2 + side2 ** 2) ** 0.5
    return hypotenuse"
"Write an algorithm to count the number of distinct values in an arrayarr = [1, 2, 3, 2, 4, 5, 3, 2]","def count_distinct_values(arr):
    # use a set to store the distinct values
    distinct_values = set()
    
    # loop through the array
    for i in arr:
        # add each value to the set
        distinct_values.add(i)
    # return the size of the set
    return len(distinct_values)"
"Create a function to convert a string of characters to lower casestring = ""HELLO WORLD""","def to_lowercase(str):
    return str.lower()"
"Write a function which takes in two parameters and returns the largest of themnum1 = 4, num2 = 3","def find_largest(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2"
Construct a class in Python that describes a car,"class Car:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color
    def describe(self):
        return “This car is a {} and it is {}.”.format(self.brand, self.color)"
Write a function to convert a timestamp from epoch time to human readable timeepoch = 1597968470,"import datetime
def epoch_to_human_time(epoch):
    # convert timestamp to human readable time
    human_time = datetime.datetime.utcfromtimestamp(epoch).strftime('%Y-%m-%d %H:%M:%S')
    # return human readable time
    return human_time"
"Write a function that takes a string and returns the number of times the string occurs in the given arraystring = ""hello"", arr = [""hello"", ""hi"", ""hello"", ""salut""]","def count_string_occurrences(string, arr):
    # initialize count
    count = 0
    # loop through array
    for i in arr:
        # if element equals string, increment count
        if i == string:
            count += 1
    # return count
    return count"
Create a 5x5 zero matrix using an array.,"[[0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0]]"
"Suppose you have a string with a specific pattern, write a function that checks if the string follows the pattern.str = ""WXYZWXYZ""
pattern = 'XYYZ'",true
"Write a class constructor for a Unicorn class with name, color, and age as parameters.","class Unicorn:
    def __init__(self, name, color, age):
        self.name = name
        self.color = color
        self.age = age"
Change all the characters in a given string to uppercase.str = 'Hello World!','HELLO WORLD!'
"Make a method that takes a given list and shuffles it.arr = [1, 2, 3, 4, 5, 6]","public List<Integer> shuffle(List<Integer> list) {
    Collections.shuffle(list);
    return list;
}"
"Write a function that calculates the average of all the numbers in a given array.arr = [2, 6, 21, 14, 8]","public double calculateAverage(int[] arr) {
    double sum = 0;
    for (int i : arr) {
        sum += i;
    }
    return sum/arr.length;
}"
Create a function that prints out an ASCII art of a unicorn.,"public void printUnicorn() {
    System.out.println(""                                     ,/ \\"");
    System.out.println(""                                    //~~~\\\\"");
    System.out.println(""                                   (./   \\\\~-_"");
    System.out.println(""                                 _/        \\_/\\\\"");
    System.out.println(""                               /~            | \\\\\\_"");
    System.out.println(""                              (O         O   //// \\\\)"");
    System.out.println(""                              |           O/////   \\\\"");
    System.out.println(""                              |           |////    \\\\"");
    System.out.println(""                              |           |_/      \\\\"");
    System.out.println(""                              |            \\\\       \\\\_"");
    System.out.println(""                               \\            \\\\\\      \\\\"");
    System.out.println(""                                \\____________\\\\|     |"");
    System.out.println(""                                 \\            /      |"");
    System.out.println(""                                  \\__________/   _--'"");
    System.out.println(""                                   |||    |||  |--'"");
    System.out.println(""                              _--'|||||||||||`-\\"");
    System.out.println(""                            __\\   __________    \\\\"");
    System.out.println(""                           /  \\~~        ~~//   /"");
    System.out.println(""                          /  |             |   |"");
    System.out.println(""                         /   |             |_--'"");
    System.out.println(""                         |___\\______________/"");
}"
"Write a code snippet to print all the items in a list using a for loop.List = [""apple"",""banana"",""orange""]","for item in list:
    print(item)"
Create a function to generate a random string with the given length.Length = 8,"import string
import random

def generate_random_string(length):
    char_list = """".join(random.sample(string.ascii_letters, length))
    return char_list"
Write a code to display the current directory path in the terminal.,"import os

currdir = os.getcwd()
print(currdir)"
"Develop a script to create a new folder in the specified directory.Directory = ""my_folder""","import os

def create_folder(folder_name):
    try:
        if not os.path.exists(folder_name):
            os.makedirs(folder_name)
    except OSError:
        print(""Error creating directory"")
        
create_folder(""my_folder"")"
"Write a function that given a list of strings, filters out empty strings.string_list = [""Hello"", """", ""Bye"", """", ""See you!""]","def filter_empty_strings(string_list):
    return [string for string in string_list if string]"
"Write code to print the following data structure in an easily readable format.data = {
  ""name"": ""John Smith"",
  ""age"": 35,
  ""languages"": [""Python"", ""JavaScript"", ""SQL""]
}","print('Name: {}'.format(data['name']))
print('Age: {}'.format(data['age']))
print('Languages: {}'.format(', '.join(data['languages'])))"
Calculate the remainder when the following number is divided by 4:50,"remainder = 50 % 4
print('Remainder: {}'.format(remainder))"
"Create a dictionary called ""contact"" which contains three key-value pairs.","contact = {
  'name': 'John',
  'email': 'john@example.com',
  'phone_number': '123-456-7890'
}"
What is the Pythonic way to combine two dictionaries key-value pairs and store it in a new dictionary?,"combined_dict = {**dict_1, **dict_2}"
"Create a function that given a string of words, counts the frequency of each word.word_string = ""I am learning a lot of new things!""","def count_word_frequencies(word_string):
    # Split string into separate words
    words = word_string.split()
    # Initialize dictionary for word frequencies
    word_freqs = {}
    # Iterate through each word
    for word in words:
        if word in word_freqs:
            # Increment count if word already in dictionary
            word_freqs[word] += 1
        else:
            # Add word if first time it appears
            word_freqs[word] = 1

    return word_freqs

word_frequencies = count_word_frequencies(""I am learning a lot of new things!"")
print(word_frequencies)"
"Given a list of numbers, construct a function that returns the highest and the lowest numbers.numbers = [3, 10, 2, 8, 5]","def get_min_max(numbers):
    # Set min and max to first number
    lowest = numbers[0]
    highest = numbers[0]
    # Iterate through each number 
    for num in numbers:
        if num < lowest:
            lowest = num
        if num > highest:
            highest = num
    # Return min and max in a tuple
    return (lowest, highest)

min_max_nums = get_min_max([3, 10, 2, 8, 5])
print(min_max_nums)"
"Create an object of the following data structure.data = {
    'animal': {
        'type': 'dog',
        'name': 'Lucky',
        'age': 5
    }
}","animal = {
    'type': 'dog',
    'name': 'Lucky',
    'age': 5
}"
"Write a function that given a positive number, returns the sum of all positive numbers from 1 to the given number.number = 10","def sum_numbers(number):
    # Initialize sum
    total = 0
    # Iterate through 1 to number
    for i in range(1, number + 1):
        total += i
    return total

sum_result = sum_numbers(10)
print('Total sum: {}'.format(sum_result))"
"Suggest a way to loop through the following data structure and print the value of the ""name"" property.data = [
    {
        'name': 'John',
        'age': 30
    },
    {
        'name': 'Jane',
        'age': 24
    }
]","for person in data:
    print(person['name'])"
"Append the following list to an existing list.listA = [1, 2, 3] 
listB = [4, 5, 6]",listA.extend(listB)
"Find the index for the following string ""Hello"".string = ""Hello World!""","index = string.index('Hello')
print('Index: {}'.format(index))"
"Given a string of words, what is the most efficient way to replace the word ""a"" with ""the""?word_string = ""I am learning a lot of new things!""","# Using the replace method
new_string = word_string.replace('a', 'the')
print(new_string)"
"Add the two given integer variables using a Python script.a = 5
b = 10","sum = a + b
print(sum)"
What are the different ways to loop through a list in Python?,"The different ways of looping through a list in Python are the for loop, the while loop, the list comprehension, and the map() function."
Define a function to calculate the median of a given array of numbers.,"def median(numbers):
    sorted_numbers = sorted(numbers)

    if len(numbers) % 2 == 1:
        return sorted_numbers[len(numbers)//2]
    else:
        middle1 = sorted_numbers[len(numbers)//2]
        middle2 = sorted_numbers[len(numbers)//2 - 1]
        return (middle1 + middle2) / 2"
"Change the second element of a tuple.my_tuple = (1,2,3)","my_tuple = (1, 2, 5)"
Describe the different data types available in Python.,"The different data types available in Python include strings, integers, floats, tuples, lists, dictionaries, sets, booleans, and None."
"Create a class called Person with two variables, name and age, and two methods, getName() and setAge().","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
 
    def getName(self):
        return self.name
 
    def setAge(self, age):
        self.age = age"
Create a type alias for a function pointer in C.,"typedef int (*func_ptr)(int, int);"
"Using the list of numbers, create a filter in Python that removes all odd numbers from the list.numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]","filtered_list = list(filter(lambda x: x % 2 == 0, numbers))"
Design a simple user authentication system with a login page and logout page.,"Create a separate directory containing HTML files for the login and logout pages. 
The login page should contain a form with fields for the user to enter their username and password. 
On successful validation, the user will be redirected to the home page. 
On the logout page, provide a link to destroy the user session and log the user out of the system."
Create a function that calculates the area of a circle when provided with its radius.radius = 5,"def calculate_area(radius):
    return 3.14 * radius * radius"
"Create a function to calculate the value of ""e"" to the nth term.term = 5","def calculate_e(term): 
    e = 0
    for i in range(term + 1): 
        e += 1 / math.factorial(i) 
    return e"
"Given the following list of numbers, find the minimum value.numbers = [2, 4, 9, 3, 8]","min_number = min(numbers)
print(f""Minimum value is {min_number}"")"
"Create a Python script for removing all whitespace from a given string.string = "" Hi There ""","no_whitespace = string.replace("" "", """")
print(no_whitespace)"
How would you convert a given number in hexadecimal format to binary?number = 3E,"hex_to_binary = bin(int(number, 16)).replace(""0b"", """")
print(hex_to_binary)"
Create a function in Python that prints out the numbers from 0 to the given parameter.10,"def printnumbers(n):
    for i in range(n+1):
        print(i)

printnumbers(10)"
What is a Heap in data structure?,"A Heap is a specialized tree-based structure in data structures where the root node is compared with its children and arranged accordingly. Every node is either greater than or equal to or less than its children, according to a comparison key. Heaps are commonly used for Priority queues and efficient sorting algorithms."
"Using the below array, create an object with key for individual item and value for the count of the item.['Apple', 'Apple', 'Orange', 'Banana']","items = ['Apple', 'Apple', 'Orange', 'Banana']

count = {}
for item in items:
    if item in count:
        count[item] += 1
    else:
        count[item] = 1

print(count)"
What are lambda expressions in Python?,"Lambda expressions in Python are anonymous functions that can take in arguments and return a value. They are commonly used for performing operations on collections of data, or for making code more concise."
"Sort a given list of objects(integers or strings) as fastest as you can.[1, 13, 45, 11, 6, 27]","[1, 6, 11, 13, 27, 45]"
"Compute the centroid of given points using mathematical formulas.points = [(2, 3), (4, 7), (6, 9)]","def calculate_centroid(points): 
    n = len(points) 
  
    centroidX = sum(row[0] for row in points) / n
    centroidY = sum(row[1] for row in points) / n
     
    return [centroidX, centroidY] 
  
points = [(2, 3), (4, 7), (6, 9)] 
print(calculate_centroid(points))"
"List the constants and variables from the script.def add_two_numbers(a, b):
    result = a + b
    return result","Constants: None

Variables: a, b, result"
Write an algorithm for adding two numbers.,"Step 1: Declare two variables a and b of type int.
Step 2: Read the two numbers and store them in a and b.
Step 3: Compute the sum of the two numbers and store it in a variable sum.
Step 4: Print sum."
"Implement the function with input parameters, described below.Parameters: a, b (both of type int)","def add(a, b):
    """"""
    Parameters: a, b (both of type int)
    Returns: the sum of two input parameters, a+b (int)
    """"""
    return a + b"
Generate 10 random numbers between 5 to 10.,"import random

# Generate 10 random numbers between 5 and 10
random_numbers = [random.randint(5, 10) for _ in range(10)]

print(""The 10 random numbers are: "", random_numbers)"
"Convert the binary input to its decimal value.binary = ""1101""","def binary_to_decimal(binary):
    decimal = 0
    for digit in binary:
        decimal = decimal * 2 + int(digit)
    return decimal

print(binary_to_decimal(""1101""))

# Output:
13"
"Construct a binary search tree from the given array of integers.[ 10, 5, 15, 1, 8, 12, 2 ]","class Node: 
    def __init__(self, data): 
        self.data = data  
        self.left = None
        self.right = None
  
def insert(root,data): 
    if root is None: 
        return Node(data) 
    else: 
        if root.data > data: 
            root.left=insert(root.left,data) 
        else: 
            root.right=insert(root.right, data) 
        return root 

root = None
nodes = [10, 5, 15, 1, 8, 12, 2] 
for data in nodes:
    root = insert(root, data)"
"Create a program to filter out keywords from a given text.Text: This is a text containing some keywords
Keywords: [""keywords"", ""text""]","def filter_keywords(text, keywords):
  words = text.split()
  filtered_words = [word for word in words if word not in keywords]
  return ' '.join(filtered_words)
  
text = 'This is a text containing some keywords'
keywords = ['keywords', 'text']

print(filter_keywords(text, keywords))"
Create a program to find the most frequently used word in a given text.Text: Machine learning is a subset of artificial intelligence and is a powerful tool in data science.,"import collections 
  
# function to get most frequently used word 
def most_frequent(string): 
  
    # split the string into list of words 
    split_it = string.split() 
      
    # pass the split_it list to instance of Counter class. 
    Counter = collections.Counter(split_it) 
  
    # most_common() produces k frequently encountered 
    # input values and their respective counts. 
    most_occur = Counter.most_common(1) 
  
    return most_occur[0][0]  
  
#Driver function 
text = ""Machine learning is a subset of artificial intelligence and is a powerful tool in data science.""
print(most_frequent(text))"
"Build a function that takes in an array of integers and returns an average.[5, 8, 6, 9]",7.5
Construct a regex expression that will check if a email is valid.,"^[A-Za-z0-9\.\'\+\-\_]+(\@)[A-Za-z0-9.-]+([\.][a-zA-Z]{2,4})+$"
Create a nested loop that increments a variable from 0 to 5.,"for i in range(0, 5):
    for j in range(0, 5):
        var += 1"
"Construct another array containing the product of each corresponding elements from two given array.Array A = [2, 4, 3] 
Array B = [10, 5, 6]","Array C = [20, 20, 18]"
Create a for loop that prints the multiples of 3 from 0 to 30.,"for (var i = 0; i <= 30; i++) {
    if (i % 3 == 0) {
        console.log(i);
    }
}"
Construct a function which will take the name of a month as a parameter and return the number of days in that month.,"function daysInMonth(month) {
    switch (month) {
        case ""January"":
        case ""March"":
        case ""May"":
        case ""July"":
        case ""August"":
        case ""October"":
        case ""December"":
            return 31;
        case ""April"":
        case ""June"":
        case ""September"":
        case ""November"":
            return 30;
        case ""February"":
            return 29;
        default:
            throw new Error('Invalid month');
    }
}"
Write a function that checks if a given string contains a valid date.,"function isValidDate(dateString) {
  var regEx = /^\d{4}-\d{2}-\d{2}$/;
  if(!dateString.match(regEx)) return false;  // Invalid format
  var d = new Date(dateString);
  if(Number.isNaN(d.getTime())) return false; // Invalid date
  return d.toISOString().slice(0,10) === dateString;
};"
"Build a function that takes an array parameter and returns the sum of the squares of its elements.[3, 4, 5]",54 (3^2 + 4^2 + 5^2 = 54)
Write a Python Class to store a telephone directory's details.,"class TelephoneDirectory:
 def __init__(self):
 self.contacts = {}

 def add(self, name, number):
 self.contacts[name] = number

 def find(self, name):
 return self.contacts[name]"
Create an Angular controller that adds two numbers.,"app.controller(""addNumbersController"", function($scope) { 
 $scope.total = 0; 
 $scope.add = function() { 
 $scope.total = $scope.number1 + $scope.number2; 
 } 
});"
"Design a Python script to extract the name, date of birth, and address from a given string.John Smith; 10/03/1994; 9 Hall Street, Anytown","import re 

pattern = re.compile(r'(?P<name>[\w ]+); (?P<dob>[\d/]+); (?P<addr>[\w ]+[,][\w ]+)')
match = pattern.search('John Smith; 10/03/1994; 9 Hall Street, Anytown') 
name = match.group('name') 
dob = match.group('dob') 
addr = match.group('addr')"
Create a RegEx pattern to match a text string with a pattern string.,"pattern = re.compile(r""patternstring"")"
Create a function that creates a random number in a given range.,"def random_number(n):
return random.randint(1, n)"
"Rewrite the given function without using the ternary expression.def func(x):
    return x if x > 0 else x + 10","def func(x):
    if x > 0:
        return x
    else:
        return x + 10"
"Write a code snippet to format a date in ""DD/MM/YYYY"" format.date = ""06-02-2021""","newDate = date.split(""-"")
formattedDate = newDate[2] + ""/"" + newDate[1] + ""/"" + newDate[0]"
"Rearrange the characters of given string in the order of their frequency.String = ""tree""","def rearrange(string):
    Frequency={}
    newstr=''
    for c in string:
        if c not in Frequency:
            Frequency[c] = 1
        else:
            Frequency[c] = Frequency[c]+1
    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):
        for i in range(value):
            newstr = newstr+key
    return newstr"
"Create a program to check if a number lies between two other numbers.Num1 = 25
Num2 = 70
Num3 = 40","def check_in_range(num1, num2, num3):
    if (num1 < num3 and num3 < num2):
        return True
    else:
        return False"
"Write a function in Python that takes two strings as input and returns a sorted version of the first string with all occurrences of the letters in the second string removed.firstString = 'hello world'
secondString = 'lo'","def remove_occurrences(first_string, second_string):
  original_string_list = list(first_string)
  for char in second_string:
    if char in original_string_list:
      original_string_list.remove(char)
  return ''.join(sorted(original_string_list))

# Usage
print(remove_occurrences('hello world', 'lo')) # Output: dehwr"
Develop an AI model to classify emails with spam contents.,"# import necessary libraries in Python
import pandas as pd
import numpy as np 
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB

# read data 
df = pd.read_csv('emails.csv')
X = df['text']
y = df['label']

# Vectorize emails using TF-IDF
vectorizer = TfidfVectorizer()
X_vec = vectorizer.fit_transform(X)

# split dataset into training and test data 
X_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=2)

# train model using the training data
clf = MultinomialNB()
clf.fit(X_train, y_train)

# evaluate performance on the test data
score = clf.score(X_test, y_test)
print(f'Model Accuracy: {score*100}%')"
Write an Apache Spark code snippet to count the number of elements in an array of integers.,"# This code is written in Scala

val array = Array(1, 2, 3, 4, 5)

val count = array.count(_ => true)

println(s""The number of elements in the array is $count"")"
Develop a natural language processing model to detect sarcasm in text.,"# This code is written in Python

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LogisticRegression

# Load dataset 
df = pd.read_csv('sarcasm_data.csv')

# Vectorize text using CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['text'])
y = df['label']

# Split into train and test dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

# Train model using Logistic Regression
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate model performance
score = model.score(X_test, y_test)
print(f'Model Accuracy: {score*100}%')"
Transform the string from all lowercase characters to all uppercase characters.a string for example,string newString = originalString.toUpperCase();
"Compute the union of two sets A and B using algorithms.<[2,4,5,6], [1,2,3,4]>","The union of sets A and B is [1,2,3,4,5,6]."
"Given a string, replace every letter with its corresponding ASCII character code.""hello world""","String newString = ""104 101 108 108 111 32 119 111 114 108 100"";"
"Create a for loop to iterate through a given collection and print out an index for each element.[5, 10, 15, 20]","for i, element in enumerate(collection):
    print(i, element)

// Output
0 5
1 10
2 15
3 20"
"Create a Python class with two methods; one to add two numbers, and another to subtract two numbers.","class Calculator:
    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y"
"Given a list of numbers, calculate the median value.[5,9,1,4,8,7]",The median value of the list is 6.
Use a switch statement to check if a number is between 1 and 10.7,"switch(number){
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
        //number is between 1 and 10
        break;
    default:
        //number is not between 1 and 10
        break;
 }"
"Convert this Python statement into a list comprehension.for item1 in list1:
    for item2 in list2:
        if item1 == item2:
            result_list.append(item1)",result_list = [item1 for item1 in list1 for item2 in list2 if item1 == item2]
"Write a Python program to remove an empty tuple from a list of tuples.list1 = [ (), ('a',), ('b', 'c'), ('d', 'e', 'f')]","list2 = [ t for t in list1 if t ]
print(list2)"
"Write a function in Python to calculate the sum of all even integers in a list.[1, 2, 3, 4, 5]","def sum_even_ints(list_nums):
    total_sum = 0
    for num in list_nums:
        if num % 2 == 0:
            total_sum += num
    return total_sum

sum_even_ints([1, 2, 3, 4, 5])"
"We have a list of integers, write a function in Python to find the second smallest element in the list.[2, 4, 7, 10, 8]","def find_second_smallest(list_nums):
    sorted_list = sorted(list_nums)
    return sorted_list[1]

find_second_smallest([2, 4, 7, 10, 8])"
Create a class in Python to represent a book and include a method for getting the name of the book.,"class Book:
    def __init__(self, name):
        self.name = name

    def get_name(self):
        return self.name"
Write an R script to find all entries of a data frame where the 'Name column' equals 'John'.,"df[df$Name == ""John"", ]"
Edit the following Python code to add a loop to generate a list of numbers from 1 to 10.numbers = [],"numbers = []

for i in range(1, 11):
 numbers.append(i)"
"Add proper type annotations to the following Python function.def get_favorite_number(name):
  return name + 10","def get_favorite_number(name: str) -> int:
  return name + 10"
"Rewrite the following program using OOP concepts.NUMBER_OF_ELEMENTS = 10
arr = [0] * NUMBER_OF_ELEMENTS

def set_element(index, value):
    arr[index] = value","class Array():
    def __init__(self, num_elements):
        self.arr = [0] * num_elements

    def set_element(self, index, value):
        self.arr[index] = value"
"Edit the program to print ""Hello world!"" in the output.def greet():
    print(""Good morning!"")","def greet():
    print(""Hello world!"")"
"Modify the program to accept user input of two numbers, and show the result based on the operator provided.def calculate(num1, num2):
    result = num1 + num2
    return result","def calculate(num1, num2, operator):
    if (operator == '+'):
        result = num1 + num2
    elif (operator == '-'):
        result = num1 - num2
    elif (operator == '*'):
        result = num1 * num2
    elif (operator == '/'):
        result = num1 / num2
    else:
        print(""Invalid operator"")
    return result"
"Create an object-oriented program that calculates the cost of a given item including sales tax.Item cost (without tax): $10
Input tax rate: 10%","//class definition 
class Item { 
  constructor(cost, taxRate) { 
    this.cost = cost;
    this.taxRate = taxRate;
  }
  
  //calculate the cost including sales tax
  getCostWithTax() {
    return this.cost * (1 + this.taxRate);
  }
  
} 

//instantiate Item and calculate cost
let item = new Item(10, 0.1); 
let costWithTax = item.getCostWithTax();
console.log(costWithTax); //11"
Write a query in MongoDB to select an item with a price greater than $10.,"db.items.find({""price"": {$gt: 10}});"
Create an Apache Spark program written in Scala that takes in an RDD and returns the same RDD multiplied by 2.,"val rdd = sc.parallelize(List(1,2,3,4,5))

val newRDD = rdd.map(x => x*2)

print(newRDD.collect().mkString("",""))"
"You are given an array of integers and you need to find three numbers such that the sum of the three numbers is 0.nums = [-40, 40, -20, 60, 10, -80]","// Use a brute-force approach to find the three numbers
for (let i = 0; i < nums.length; i++) {
  for (let j = i+1; j < nums.length; j++) {
    for (let k = j+1; k < nums.length; k++) {
      if (nums[i] + nums[j] + nums[k] === 0) {
        console.log(nums[i], nums[j], nums[k])
      }
    }
  }
}

// Output
-40, 40, -80"
Write a regular expression to detect any email address.,\S+@\S+\.\S+
"Read the given date string in the specified format and print out the day of the week.Date String: 03/02/2020
Format: mm/dd/yyyy",Thursday
"Write a for loop to iterate over an array of numbers and calculate their sum.array=[1, 2, 3]","sum=0
for item in array:
    sum+=item
    
print(sum)"
"Create a Python script to find the greatest common divisor (GCD) of a pair of integers.Number 1: 10
Number 2: 12","def findGCD(x, y): 
  
    # This function implements the Euclidian algorithm 
    # to find GCD of two numbers 
    while(y): 
        x, y = y, x % y 
  
    return x 
  
# Driver program 
gcd = findGCD(10, 12) 
print(gcd)"
"Write the code to create a class in Python named ""Person"".","class Person:
    def __init__(self, name, age=None):
        self.name = name
        self.age = age"
Describe a complete algorithm for sorting n integers.,"The algorithm for sorting n integers is a divide-and-conquer algorithm.

The algorithm works as follows:
1. Select a pivot element from the array.
2. Split the array into two sub-arrays based on the pivot element. 
3.  For each of the sub-arrays, use the same sorting algorithm to sort their contents. 
4. Once both sub-arrays are sorted, merge the two sub-arrays into one sorted array."
"In Python, write a program to remove all duplicates from a given list of integers.","def remove_duplicates(arr):
    result = [] 
    seen = set() 
    for item in arr:
        if item not in seen:
            result.append(item)
            seen.add(item)
    return result"
"Update the following code to be Python 3 compatible.print ""Welcome to the Program.""","print(""Welcome to the Program."")"
"Create an algorithm that takes in an array of integers and returns true if two of the integers add up to a target number.example_array = [10, 7, 8, 3, 5]
target_num = 13","def two_sum_algorithm(arr, target): 
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if arr[i] + arr[j] == target: 
                return True
  
    return False

two_sum_algorithm(example_array, target_num)"
"Append the item ""Banana"" to the list below:fruits = [""Apple"", ""Strawberry"", ""Pear""]","fruits = [""Apple"", ""Strawberry"", ""Pear"", ""Banana""]"
"Sort the following list using Python's built-in sorting functions.unsorted_list = [5, 1, 6, 8, 2, 4]","unsorted_list.sort()
# unsorted_list is now [1, 2, 4, 5, 6, 8]"
Create a Python function which takes a given string and replaces all its characters with the next consecutive character.,"def shift_string(string):
  result = """"
  for ch in string:
    result += chr(ord(ch) + 1)
  return result"
Implement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers,"def gcd(a, b): 
  
   if (a == 0): 
       return b 
       
   if (b == 0): 
       return a 
       
   if (a == b): 
       return a 
       
   if (a > b): 
       return gcd(a-b, b) 
      
   return gcd(a, b-a)"
Write a script in Python to sort a list of words alphabetically.,"words = ['Apple','Banana','Cherry','Orange']

words.sort()

print(words)"
Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format.,"def printDictionary(dictionary):
    for key in dictionary.keys():
        print(key, "":"", dictionary[key])"
"Write a function that takes in a string of text and counts the number of times each letter appears in the stringtext = ""The quick brown fox jumps over the lazy dog""","def count_letters(text):
    letter_count = {}
    for character in text:
        if character not in letter_count:
            letter_count[character] = 1
        else:
            letter_count[character] += 1
    return letter_count

print(count_letters(text))"
"Write a function in Python that will take two integers as inputs and compute their average.int1 = 10
int2 = 15","def calculate_average(int1, int2):
    return (int1 + int2) / 2

print(calculate_average(int1, int2))"
"Create a function in Python that takes a string as an input and returns a new string that is the reverse of the input string.string = ""Reverse Me""","def reverse_string(string):
    return string[::-1]

print(reverse_string(string))"
"Create a function in Python to remove all characters other than letters and numbers from a string.string = ""This#%&string c&$o#th=esa#@ll cha*%$racter""","import re

def remove_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)

print(remove_characters(string))"
"Create a function in Python to split a given string into a list of strings using a space as a delimiter.string = ""This is a string to split""","def split_string(string):
    return string.split("" "")

print(split_string(string))"
"Write a function in Python to take a string as input and return a dictionary with the count of each letter in the string.string = ""This is a string of characters""","def count_letters(string):
    letter_count = {}
    for char in string:
        if char not in letter_count:
            letter_count[char] = 1
        else:
            letter_count[char] += 1;
    return letter_count

print(count_letters(string))"
Create a class for customer data.,"class Customer:
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_email(self):
        return self.email"
What is the principal difference between a linked list and an array?,"The principal difference between a linked list and an array is that a linked list is a collection of points that each point to their respective memory locations, while an array is a contiguous block of memory locations. A linked list has the advantage of being able to insert and delete nodes at any time, while the elements of an array must be shifted to make room for new elements. Similarly, linked lists do not require a pre-allocated block of memory, so it is more memory efficient than an array."
"Add a method to the Customer class to print out customer's name, age and email","class Customer:
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email
    
    def get_name(self):
        return self.name
    
    def get_age(self):
        return self.age
    
    def get_email(self):
        return self.email
    
    def print_customer_data(self):
        print('Name: ' + self.name + ', Age: ' + str(self.age) + ', Email: ' + self.email)"
Write a function to calculate the sum of the elements of an array with float values.,"def sum_float_array(float_array):
    total = 0
    for i in float_array:
        total += i
    return total"
What is the difference between while and do while loops in programming?,"The main difference between while and do while loops is that a while loop will only execute the loop body if the condition evaluates to true, while a do while loop will always execute the loop body at least once, and then continue to execute the loop body until the condition evaluates to false. This means that a do while loop is guaranteed to run at least once, whereas a while loop may not run at all."
Write a function to identify all palindromes in the given string.,"def find_palindromes(string):
    result = []
    for i in range(len(string)):
        for j in range(i+2,len(string)+1):
            if string[i:j] == string[j-1:i-1:-1]:
                result.append(string[i:j])
    return result"
Determine the syntax for a function call in Python.,"Function calls in Python must include the name of the function followed by parentheses and the arguments inside the parentheses. If you do not include any arguments, the parentheses should still be included. An example would be:

  my_function()"
"Provide a solution to print the following string in reverse order.String = ""Hello, world!""","print(""!"".join(reversed(""Hello, world!""))) # Output: !dlrow ,olleH"
Build a program in Python to check if a number is Odd or Even.,"def odd_even(n):
	if (n % 2 == 0):
		print(""Even"")
	else:
		print(""Odd"")"
"Suggest a solution to print the third character from a string in Python.String = ""Hello, world!""",print(string[2]) # Output: l
"Write a function to calculate the string length in a given string.String: ""Hello, World!""","def string_length(string):
  return len(string)"
"Write a Python program to find the closest number in a given array to a given number.Array: [3, 6, 9, 12, 15], Number: 10","def closest_number(nums, number): 
  min_diff = abs(nums[0] - number) 
  min_num = nums[0] 
  for num in nums:
    min_diff_temp = abs(num - number) 
    if min_diff_temp < min_diff:
    	min_diff = min_diff_temp
    	min_num = num
  return min_num"
"Remove all non-alphabetical characters from the given string.String: ""Hello,123_[World!]%$""","import re

def remove_non_alphabetic(string):
  return re.sub(""[^a-zA-Z ]"", """", string)"
Create an array in Python containing five strings.,"my_words = [""Hello"", ""World"", ""Python"", ""Programming"", ""Code""]"
"Create a class in Python called Cat with constructor that takes three arguments i.e. name, color and age. The class should have three methods called meow, purr and display_info.","class Cat:
    def __init__(self, name, color, age):
        self.name = name
        self.color = color
        self.age = age
    
    def meow(self):
        print('%s the %s cat meows!' % (self.name, self.color))
    
    def purr(self):
        print('%s the %s cat purrs contentedly.' % (self.name, self.color))
    
    def display_info(self):
        print('%s is a %s cat and is %d years old.' % (self.name, self.color, self.age))"
Show an example of a while loop in Python.,"i = 0

while i < 10:
    print(i)
    i += 1"
"Given an array of integers, write an algorithm to reorder the array so that all the negative integers appear before all the positive integers.arr = [4, -7, -3, 9, 1, -4]","def reorder_arr(arr): 
  negatives = [] 
  positives = [] 

  for item in arr: 
    if item < 0: 
      negatives.append(item) 
    elif item >= 0: 
      positives.append(item) 
    
  return negatives + positives"
How to delete a specific item from a Python dictionary?,"dictionary_name.pop(""item_name"", None)"
"Write a method to find the maximum number of elements in an array such that all subarrays add up to a specified number.arr = [1, 2, 3, 4, 5, 6, 7]","def find_max(arr, target): 
  dp = [[False for i in range(target + 1)] for j in range(len(arr))]
  for i in range(len(arr)):
      dp[i][0] = True
  for i in range(1, len(arr)): 
    for j in range(1, target + 1): 
      if dp[i - 1][j]: 
          dp[i][j] = dp[i - 1][j] 
      elif j >= arr[i]: 
          dp[i][j] = dp[i - 1][j - arr[i]] 
  max_val = 0
  for i in range(1, target + 1): 
    if dp[len(arr) - 1][i]: 
      max_val = max(max_val, i) 
  return max_val"
Write a method to remove the trailing spaces from a string in Python.,"def remove_trailing_spaces(s): 
    return s.rstrip()"
How to generate a random number between two given numbers in Python?,"import random 

def random_number(minimum, maximum): 
    return random.randint(minimum, maximum)"
How do you sort a dictionary by values in Python?,"sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))"
"Code a for loop that iterates over a list of numbers and stores the doubled value of each number in another list.num_list = [1, 2, 3, 4]","doubled_list = []
for num in num_list:
    doubled_list.append(num * 2)"
How can you remove all the empty strings from a list?,filtered_list = [x for x in list if x!= '']
"Code a for loop that iterates over a list of strings and capitalizes the first letter of each string.my_list = ['eggs', 'bacon', 'cheese']","capitalized_list = []
for string in my_list:
    capitalized_list.append(string.capitalize())"
Write a function to join a list of strings using a given character.,"def join_list(list, char):
    return char.join(list)"
How can you flatten a list of lists?,"from itertools import chain
flattened_list = list(chain.from_iterable(list_of_lists))"
"Edit the following function to remove duplicate elements from a list.def remove_duplicates(list):
    new_list = []
    for element in list:
        new_list.append(element)
    return new_list","def remove_duplicates(list):
    new_list = []
    for element in list:
        if element not in new_list:
            new_list.append(element)
    return new_list"
"Find the smallest positive number that is not present in a given list.my_list = [1, 3, 6, 9, 11]","def find_missing_number(my_list):
    sorted_list = sorted(my_list)
    for i, num in enumerate(sorted_list):
        if i != num:
            return i
    return max(sorted_list) + 1"
"Convert a given string from lowercase to uppercase characters.""this is a string""","def convert_to_uppercase(string):
    return string.upper()
    
if __name__ == '__main__':
    print(convert_to_uppercase(""this is a string""))"
"Print a random permutation of an array of integers.[1,2,3,4,5]","import random

def random_permutation(arr):
    new_arr = arr.copy()
    random.shuffle(new_arr)
    return new_arr

if __name__ == '__main__':
    print(random_permutation([1,2,3,4,5]))"
"Compose a program to create a dictionary of characteristics from a given list .itemList = [""Apple"", ""Orange"", ""Grapes"", ""Bananas"", ""Watermelons""]","def create_characterstic_dictionary(itemList):
    out = {}
    for item in itemList:
        out[item] = len(item)
    return out

if __name__ == '__main__':
    itemList = [""Apple"", ""Orange"", ""Grapes"", ""Bananas"", ""Watermelons""]
    print(create_characterstic_dictionary(itemList))"
Generate the nth Fibonacci number using a loop.,"def fibonacci_loop(n):
    prev, curr = 0, 1
    for _ in range(1, n):
        prev, curr = curr, prev + curr
    return curr

if __name__ == '__main__':
    print(fibonacci_loop(10))"
"Given a list of strings, create a Python function that sorts them in alphabetical order.example_list = [""Apple"", ""Banana"", ""Cherry""]","def sort_list(l):
    l.sort()
    return l"
"Create a function in Python that takes a sentence as input and returns a dictionary of each word and its frequency in the sentence.example_sentence = ""The quick brown fox jumps over the lazy dog.""","def word_frequency(sentence):
    words = sentence.split()
    freq_dict = {}
    for word in words:
        if word in freq_dict:
            freq_dict[word] += 1
        else:
            freq_dict[word] = 1
    return freq_dict"
"Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'.example_list = [""Apple"", ""Cat"", ""Ant"", ""Table""]","def count_str_starts_a(l):
    count = 0
    for word in l:
        if word[0].lower() == 'a':
            count += 1
    return count"
"Write a function to convert an anagram of a string to a dictionaryword = ""geeksforgeeks""","def convert_anagram(word):
    result = {}
    for c in word:
        result.setdefault(c, 0)
        result[c] += 1
    return result"
"Calculate the Euclidean distance between two arraysarray1 = [1, 2, 3]
array2 = [4, 5, 6]","def euclidean_distance(array1, array2):
    return np.sqrt(np.sum((array1 - array2)**2))"
"Generate a target field from an input field by adding a new columnInput Dataframe:
name  age  height
John  24   180
Mary  22   160","def generate_column(dataframe):
    dataframe['target'] = dataframe.apply(
    lambda row: row.age * row.height, axis = 1
    )
    return dataframe"
Implement a neural network for regression,"import tensorflow as tf

# create input layer
inputs = tf.keras.Input(shape=(2,))

# create the first layer of the network with 16 neurons
fc1 = tf.keras.layers.Dense(16, activation=""relu"")(inputs)

# create the second layer of the network with 8 neurons
fc2 = tf.keras.layers.Dense(8, activation=""relu"")(fc1)

# create the output layer of the network with 1 neuron (for regression)
outputs = tf.keras.layers.Dense(1, activation=""sigmoid"")(fc2)

# create the model and compile it.
model = tf.keras.Model(inputs=inputs, outputs=outputs)
model.compile(optimizer='Adam', loss='mse')"
Implement Naive Bayes for classification.,"import numpy as np

# Create a data set
X = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])
y = np.array([0, 0, 0, 0, 1, 1, 1, 1])

# Build a Naive Bayes classifier
naive_bayes = GaussianNB()

# Train the classifier using the training data
naive_bayes.fit(X, y)"
"Find the frequency of a given phrase in the texttext = ""This is a phrase that I want to find the frequency of""
phrase = ""phrase""","def find_frequency(text, phrase):
    fdist = nltk.FreqDist(text.lower().split())
    return fdist[phrase]"
"Extract the value of the given key from the given XML structure.<score>
    <name>Alice</name>
    <points>15</points>
</score>

Key: points",15
"Read the given code and provide an example output.def add_two_numbers(a, b):
    return a + b","Example output:
add_two_numbers(3, 4)

Output: 7"
"Read the following code and identify the type of loop it is.for a in range(0, 10):
    print(a)",for loop.
"Write a function that prints the same string three times consecutively.string = ""Hello World!""","def print_three_times(string):
    for _ in range(3):
        print(string)
        
print_three_times(""Hello World!"")"
Output true if a number is odd or false if it is even.number = 8,false
"Trace the given solution to find the output for the given input.def find_max_number(arr):
    max_num = arr[0]
    for num in arr:
        if num > max_num:
            max_num = num

    return max_num

Input:
find_max_number([2, 3, 4, 6, 5])","max_num = 2

Loop 1: num = 3, max_num = 3
Loop 2: num = 4, max_num = 4
Loop 3: num = 6, max_num = 6
Loop 4: num = 5, max_num = 6

Output: 6"
"Get the length of the given string.string = ""Summer is here!""","len(string)

Output: 14"
"Construct a regular expression that extracts substrings that match the pattern ""AAA_BBB_CCC"".",Regex: ^([A-Za-z]{3})_([A-Za-z]{3})_([A-Za-z]{3})$
Produce a regular expression that checks if a string contains between 5 and 20 characters.,"^.{5,20}$"
"Construct a function in Python that takes a list and returns the mean of the elements in the list.[30, 10, 40, 20]","def mean(list): 
    # Finding total of the list elements 
    total = 0
    for num in list: 
        total += num 

    # Calculate mean of the list 
   mean = total / len(list) 

    # Return the mean 
    return mean"
"Edit the following code to make it an infinite loop.# Python 3
# Print numbers from 0 to 10 
i = 0
while i <= 10: 
    print(i) 
    i += 1","# Python 3
# Print numbers from 0 to 10 
while True: 
    print(i) 
    i += 1"
Create a list of entries that should be included in a `Person` class.,"A `Person` class should include the following entries:
- name: string
- age: integer
- gender: string
- address: string
- phone_number: string
- email: string
- occupation: string
- school: string
- current_city: string
- birth_city: string
- nationality: string"
Demonstrate how to use an if-else block to control the execution sequence of a program.,"Using an if-else block to control execution sequence involves using if-else statements to check a given condition. If the condition is true, the code inside the if statement is executed, otherwise, the code inside the else statement is executed. For example, if a variable called ""x"" is declared with a value of 3, the following if-else block will print ""X is 3"": 

if(x == 3) {
   System.out.println(""X is 3"");
} else {
   System.out.println(""X is not 3"");
}"
How can you use the modulo operator to print even numbers in a loop?,"The modulo operator can be used to print even numbers in a loop by using an IF statement to check if the remainder of a number divided by two is zero. If the condition is true, the even number is printed. For example, the following code will print all even numbers from 1 to 10:

for (int i = 1; i <= 10; i++){ 
   if (i % 2 == 0) 
      System.out.println(i);
}"
Generate a random valid email address.,"import random

def generate_email():
 characters = 'abcdefghijklmnopqrstuvwxyz0123456789'
 email_address = ''.join(random.choice(characters) for i in range(10))
 return email_address + '@example.com'"
"Given an input string and a pattern, find the first index of the pattern in the string.string: “The quick brown fox jumps over the lazy dog”
pattern: “dog”","def find_pattern_index(string, pattern):
 for i in range(len(string) - len(pattern) + 1): 
  if string[i:i+len(pattern)] == pattern: 
   return i 
 return -1
 
print(find_pattern_index(""The quick brown fox jumps over the lazy dog"", ""dog""))
# Output: 40"
"Given an array of integers, calculate the sum of all even numbers in the array.[ 5, 10, 15, 11, 22, 33, 28, 9]","def sum_even_numbers(arr):
 sum = 0
 for i in arr:
 if i % 2 == 0:
 sum += i
 return sum
 
print(sum_even_numbers([5, 10, 15, 11, 22, 33, 28, 9]))
# Output: 70"
Decompose a given number into its prime factors.25,"def prime_factorize(n):
 prime_factors = []
 i = 2
 while i * i <= n:
 if n % i:
 i += 1
 else:
 n //= i
 prime_factors.append(i)
 if n > 1:
 prime_factors.append(n)
 return prime_factors
 
print(prime_factorize(25))
# Output: [5, 5]"
"Given an array, separate the odd and even numbers, and return a list of two different arrays, one for even and one for odd numbers.[3, 6, 9, 12, 21]","def separate_even_odd(arr):
 even = []
 odd = []
 for i in arr:
 if i % 2 == 0:
 even.append(i)
 else:
 odd.append(i)
 return even, odd

print(separate_even_odd([3, 6, 9, 12, 21]))
# Output: ([6, 12], [3, 9, 21])"
"Create a computer program that takes a string as an input and builds a dictionary of words and their respective frequencies.""the quick brown fox jumps over the lazy dog""","def get_frequency(input):
    # Split the input into words
    words = input.split()

    # Create a dictionary to store the words and the frequency
    frequency = dict()

    # Iterate over the words and store the frequency
    for word in words:
        if word in frequency:
            frequency[word] += 1
        else:
            frequency[word] = 1
            
    return frequency

if __name__ == ""__main__"":
    # Input string
    input = ""the quick brown fox jumps over the lazy dog""

    # Get the frequency of words
    frequency = get_frequency(input)

    # Print the frequency
    print(frequency)"
Design a class that stores and prints a complex number.,"class ComplexNumber:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag

    def __str__(self):
        return '{} + {}i'.format(self.real, self.imag)

if __name__ == '__main__':
    c = ComplexNumber(2, 8)
    print(c)"
"Output the number of words in a given sentence stored as a string.""Welcome to the world of coding!""","def count_words(sentence):
    return len(sentence.split())

if __name__ == '__main__':
    sentence = ""Welcome to the world of coding!""
    print(count_words(sentence))"
"Write a function that takes two strings as parameters and return a new string that has the characters of the second string appended to the first string.""hello"",""world""","def append_string(string1, string2):
    return string1 + string2

if __name__ == '__main__':
    string1 = ""hello""
    string2 = ""world""
    result = append_string(string1, string2)
    print(result)"
Create a function which determines if a given number is a palindrome.7337,"def palindrome(num):
    # convert the number to a string
    num_str = str(num)

    # Reverse the string using slicing
    rev_str = num_str[::-1]

    # check if the given number is equal to the reversed string
    if num_str == rev_str:
        return True
    else:
        return False

if __name__ == ""__main__"":
    num = 7337
    print(palindrome(num))"
"Reverse the words in a sentence stored as a list in Python.['word', 'one', 'is', 'this']","def reverse_words(words):
    # Get the length of the words
    n = len(words)

    # Reverse the list words
    for i in range(n // 2):
        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]

    return words

if __name__ == ""__main__"":
    words = ['word', 'one', 'is', 'this']
    print(reverse_words(words))"
Extract the country code from a given phone number of the format +cc xxx-xxx-xxxx+91 983-741-3256,"def extract_country_code(number):
    # Check if number is valid
    if len(number) == 13 and number[0] == '+':
        # Extract the country code
        cc = number[1:3]
        return cc

if __name__ == ""__main__"":
    number = ""+91 983-741-3256""
    print(extract_country_code(number))"
Design an algorithm to compute the number of trailing zeroes in a factorial number.,"def count_trailing_zeroes(factorial_number):
    
    # Initialize count 
    count = 0

    # Keep dividing n by powers of 5 and update count
    i = 5
    while (factorial_number/i>=1):
        count += int(factorial_number/i)
        i *= 5
        
    return int(count)

if __name__ == ""__main__"":
    factorial_number = 12
    print(count_trailing_zeroes(factorial_number))"
Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.,"def sieve_of_eratosthenes(lower, upper):
    # Create a list of prime numbers
    prime_list = [True] * (upper + 1)
    prime_list[0] = False
    prime_list[1] = False

    # Iterate over the list until the square root of the upper limit
    for i in range(2, int(upper ** 0.5) + 1):
        # If i is true, then it is prime
        if prime_list[i]:
            # Set all multiples of i to false
            for j in range(i*i, upper + 1, i):
                prime_list[j] = False

    # Get the list of prime numbers between lower and upper
    prime_nums = []
    for i in range(lower, upper + 1):
        if prime_list[i]:
            prime_nums.append(i)

    return prime_nums

if __name__ == ""__main__"":
    lower = 0
    upper = 50
    print(sieve_of_eratosthenes(lower, upper))"
"Design an algorithm to calculate the intersection of two given lists.List1 = [2, 5, 9, 12, 17]
List2 = [3, 5, 9, 10]","def intersection(list1, list2):
    # Initialize an empty list 
    intersection_list = []

    # Iterate over elements of the first list
    for num in list1:
        # Compare each element of first list with elements of second list
        if num in list2:
            # Add to the intersection list if matches
            intersection_list.append(num)

    return intersection_list

if __name__ == ""__main__"":
    list1 = [2, 5, 9, 12, 17]
    list2 = [3, 5, 9, 10]
    print(intersection(list1, list2))"
"Retrieve the elements in an array [1, 2, 3, 4, 5, 6] where the index is greater than or equal to 3[1, 2, 3, 4, 5, 6]","[4, 5, 6]"
"Convert the following string ""10 10 20 20 30"" into a list of integers.""10 10 20 20 30""","list_of_ints = [10, 10, 20, 20, 30]"
"Sort the following list in ascending order [3, 5, 1, 2, 9].[3, 5, 1, 2, 9]","sorted_list = [1, 2, 3, 5, 9]"
Design a Python class that allows a user to set and get the name of an object.,"class User:
    def __init__(self, name):
        self.name = name

    def getName(self):
        return self.name

    def setName(self, name):
        self.name = name"
"How many lines would the following algorithm require?# Find all the prime numbers between two given numbers
# Input: two numbers, n1 and n2
# Output: list of prime numbers between n1 and n2",It would require approximately 9 lines of code.
Write a loop in Python to find the summation of the square of the first 10 natural numbers.,"sum = 0
for i in range(1, 11): 
    sum += i**2 
 
print(""The sum of the square of the first 10 natural numbers is"", sum)"
"Create a for loop in Python that will iterate through a given list and add the square of each element to a new list.nums = [2, 3, 4]","# Create an empty list
squared_nums = []

# Iterate through the given list 
for num in nums:
  # Calculate the square of the element
  squared_num = num * num
  # Append it to the new list
  squared_nums.append(squared_num)

# Print the new list
print(squared_nums) 
# Output: [4, 9, 16]"
"Given a list of strings, construct a regex to match any string that starts with ""ab"".",^ab.*
"Given an array of integers, write a program to find the longest consecutive sequence.[1, 9, 3, 10, 4, 20, 2]","def longest_consecutive(numbers):
    longest_sequence = 0
    numbers_set = set(numbers)
 
    for num in numbers:
        if num - 1 not in numbers_set:
            current_number = num
            current_sequence = 1
 
            while current_number + 1 in numbers_set:
                current_sequence += 1
                current_number += 1
 
            longest_sequence = max(longest_sequence, current_sequence)
 
    return longest_sequence"
"Given a string, convert it to upper case.String: this string should be in upper case",THIS STRING SHOULD BE IN UPPER CASE
Find all character positions in the given stringString: abracadabra,"Character Positions: 
a: 0, 3, 5, 7, 10
b: 1, 8
c: 2
d: 4
r: 6, 9"
Create an array of a length 10 filled with odd numbers starting from 3.,"int[] arr = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21};"
"Write a code for finding the maximum value within a range.List: [10, 20, 30, 5, 40] 
Range: [20, 40]","max = 0
for num in list:
    if num >= 20 and num <= 40:
        max = max(max, num)
print(max) # 40"
"Compare the given hashes and return true if they have the same set of keys and values.Hash1: {""a"": 1, ""b"": 2} 
Hash2: {""b"": 2, ""a"": 1}",True
What is the Python function for swapping two variables' values?,"The Python function for swapping two variables' values is ""*a, b = b, a*"". This is a simple one-line expression that swaps the values of the two variables."
"Create an algorithm that will return all numbers in the given array that are greater than 10.[5, 8, 10, 12, 15, 17, 20]","def get_over_10(arr):
    output = []
    for num in arr:
        if num > 10:
            output.append(num)
    return output"
"Write a Python program that takes two lists, adds their items and returns a new list.list_a = [1, 2, 3]
list_b = [4, 5, 6]","def add_list_items(list_a, list_b):
    output = []
    for item_a, item_b in zip(list_a, list_b):
        output.append(item_a + item_b)
    return output"
Design an algorithm that can efficiently search for an element in a given sorted array,"def binary_search(arr, x):
  start = 0
  end = len(arr) - 1
  while start <= end:
    mid = start + (end - start)//2
    if arr[mid] == x:
      return mid
    elif arr[mid] < x: 
      start = mid + 1
    else: 
      end = mid - 1
  return -1"
Create an algorithm that performs bubble sort.,"def bubble_sort(arr):
    n = len(arr)
    for i in range(n-1, 0, -1):
        for j in range(i):
            if arr[j] > arr[j+1]:
                arr[j+1], arr[j] = arr[j], arr[j+1]"
"Which programming language syntax is used in the following code snippet?#define some_function() {
    // do something
}",The programming language syntax used in the given code snippet is C.
"Write an algorithm to count the number of pairs whose difference is k.nums = [1, 5, 3, 4, 7, 8]
k = 3","def count_pairs(nums, k):
    count = 0
    # Create a set to store all the elements of the array
    num_set = set(nums)
    for num in nums:
        if num + k in num_set:
            count += 1

    return count

num_diff = 3
pair_count = count_pairs(nums, num_diff)
print(""Number of pairs with difference"", num_diff, "" is :"", pair_count)"
"Using ES6 syntax, insert the following into the code:let arr = [1, 2, 3];","let arr = [1, 2, 3];
const doubled = arr.map(num => num * 2);
console.log(doubled); // [2, 4, 6];"
"Use the information provided to create a class in Python which represent a Rectangle.The Rectangle class should have: 
- Attributes of length and width
- A method to compute the area of the rectangle","class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
   
    def get_area(self):
        return self.length * self.width"
"Create an algorithm to merge two sorted linked lists.Linked List 1: 1 - 4 - 7
Linked List 2: 2 - 5 - 8","def merge_sorted_lists(list1, list2):
    if not list1:
        return list2
    if not list2:
        return list1
        
    if list1.val < list2.val:
       head = list1
       list1 = list1.next
   else:
       head = list2
       list2 = list2.next
  
   cur = head
  
   while list1 and list2:
       if list1.val < list2.val:
           cur.next = list1
           list1 = list1.next
       else:
           cur.next = list2
           list2 = list2.next
          
       cur = cur.next
          
   cur.next = list1 if list1 else list2
  
   return head"
Write a TensorFlow program for a linear regression model.,"import tensorflow as tf

# Create variables
a = tf.Variable(0.5)
b = tf.Variable(0.5)

# > Create the input data, y and x
x = tf.placeholder(tf.float32)
y = tf.placeholder(tf.float32)

# > Model: y = ax + b
y_pred = a * x + b

# > Loss: Mean Squared Error (MSE)
loss = tf.reduce_mean(tf.square(y_pred - y))

# > Optimizer: Gradient Descent
train_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)

# > Initialize all variables
init = tf.global_variables_initializer()

# > Execute the graph
with tf.Session() as sess:
    sess.run(init)
    for step in range(200):
        sess.run(train_op, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})
        if (step + 1) % 20 == 0:
            loss_val = sess.run(loss, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})
            print(""Step:"", step + 1, "" Loss:"", loss_val)"
Create an instance of the Date class that represents the current date and time.,DateTime now = DateTime.Now;
Describe the Divide-and-Conquer algorithm.,"The Divide-and-Conquer algorithm is a generic algorithmic technique used to solve problems by breaking down the problem into smaller sub-problems, solving each sub-problem, and combining the results. This technique can be applied to a wide variety of problems (such as sorting and matrix multiplication). The basic steps of the Divide-and-Conquer algorithm involves dividing the problem into subproblems, typically in the form of a recursive approach. Then, each subproblem is solved using a similar approach until the subproblems become so small they can be easily solved directly. Then, the solutions to the subproblems are combined to give the solution to the original problem."
Create a linked list of 5 integers.,"class Node {
  int data;
  Node next;
  Node(int data) { 
    this.data = data; 
    next = null;
  }
}

class LinkedList {
  Node head;
  public void insertNode(int data) { 
    Node new_node = new Node(data); 
    if (head == null) { 
        head = new_node;
        return;
    }
    Node last = head;  
    while (last.next != null) {
        last = last.next;
    }
    last.next = new_node; 
  } 
}

LinkedList list = new LinkedList();
list.insertNode(2);
list.insertNode(6);
list.insertNode(7);
list.insertNode(8);
list.insertNode(10);"
"Edit the following code to make the function return the value of n mod m.int modulo(int n, int m)
{
    return n / m;
}","int modulo(int n, int m)
{
    return n % m;
}"
Describe the sorting algorithm Bubble Sort.,"Bubble sort is an algorithm for sorting a collection of items. It iterates over the collection and compares adjacent items, swapping them if they are out of order. This step is repeated until all items are sorted. Bubble sort has a time complexity of O(n^2), making it a slow sorting algorithm. It is still often used as it is simple to implement and requires little memory."
"Sort the following items in O(n log n) time complexity.[2, 5, 4, 3, 9]","[2, 3, 4, 5, 9]"
Generate a random sequence of letters containing 5 characters without repeating a character.,XUBHJ
"Scale up the following backend service using Kubernetes.service.yaml

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  ports:
  - port: 8080","apiVersion: v1
kind: Service
metadata:
  name: my-service
  labels:
    app: my-service
spec:
  replicas: 3
  ports:
  - port: 8080
  selector:
    app: my-service
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-service
spec:
  selector:
    matchLabels:
      app: my-service
  replicas: 3
  template:
    metadata:
      labels:
        app: my-service
    spec:
      containers:
        - name: my-service
          image: my-service:v1
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
          env:
            - name: NODE_ENV
              value: production
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: my-service-lb
  labels:
    app: my-service
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 30008
  selector:
    app: my-service"
"Add a feature to the following code that prints the current date and time.def hello_world():
    print(""Hello world!"")","import datetime
def hello_world():
    print(""Hello world!"")
    now = datetime.datetime.now()
    print(now.strftime(""%Y-%m-%d %H:%M:%S""))"
"Create an API endpoint for the following model.class Comment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)","from django.http import JsonResponse

def comments_list(request):
    if request.method == 'GET':
        comments = Comment.objects.all()
        comments_list = [{
            'id': comment.id,
            'user': comment.user.username,           
            'content': comment.content,
            'created_at': comment.created_at,
            'updated_at': comment.updated_at
        } for comment in comments]
        return JsonResponse(comments_list, safe=False)"
"Given a list of numbers, write a Python program to find the maximum and minimum number.[4, 7, -2, 11, 9]","Maximum Number = 11
Minimum Number = -2"
"Design a function to filter words based on give characters.characters = ""aeiou""
words = ['apple','elephant','mountain','river']","def filter_words(characters, words):
    result = []
    for word in words:
        if set(characters).issubset(word):
            result.append(word)
    return result

print(filter_words(""aeiou"", ['apple','elephant','mountain','river']))
# Output: ['apple', 'elephant', 'river']"
"Create a dictionary containing the count of each word in the sentence.sentence = ""the quick brown fox jumps over the lazy dog""","def count_words(sentence):
    words = sentence.split()
    word_count = {}
    for word in words:
        if word in word_count.keys():
            word_count[word] += 1
        else:
            word_count[word] = 1
    return word_count

print(count_words(""the quick brown fox jumps over the lazy dog""))
# Output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}"
"Create a list containing the number of characters in each word of the sentence.sentence = ""the quick brown fox jumps over the lazy dog""","def count_characters_per_word(sentence):
    words = sentence.split(' ') 
    char_count_per_word = [] 
    for word in words:
        char_count_per_word.append(len(word)) 
    return char_count_per_word

print(count_characters_per_word(""the quick brown fox jumps over the lazy dog""))
# Output: [3, 5, 5, 3, 5, 3, 4, 3]"
Formulate a statement using Python that will return the value 'True' when the user's age is equal to 21.userage = 21,"if userage == 21:
    print(True)"
"Compute the sum of two numbers, 5 and 7, using Scala","val sum = 5 + 7
println(sum)"
"Create a function that takes two strings, s1 and s2, and checks to see if s2 is a substring of s1s1 = ""Hello World""
s2 = ""Hello""","def isSubstring(s1, s2): 
    if s2 in s1: 
        return True
    else: 
        return False"
"Create a for loop in Python that traverse a list and prints out every second elementlst = [1,2,3,4,5]","for i in range(0, len(lst), 2):
    print(lst[i])"
Create an array of 10 numbers in Python with values from 0 to 9.,"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
Create a class in Python with the attributes name and age.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Create a package in R called ""myPackage"" and save it in your current directory.","devtools::create(""myPackage"", path=getwd())"
Launch an instance of an Amazon EC2 machine.,aws ec2 run-instances --image-id <AMI-id> --instance-type <instance-type>  --key-name <keyname> --security-group-ids <security-group-ids>
"Find the 2 smallest elements in a Python list of integers.[2, 3, 5, 8, 4, 9, 11]","min1, min2 = list[0], list[1]
for num in list:
    if num < min1:
        min2 = min1
        min1 = num
    elif num < min2:
        min2 = num"
"For a given list of numbers, write a palindrome checker.sample = [1, 2, 3, 4, 5, 4, 3, 2, 1]","def is_palindrome(sample):
    res = True
    i = 0
    j = len(sample) - 1
    while i < j:
        if sample[i] != sample[j]:
            res = False
            break
        else:
            i += 1
            j -= 1
            
    return res"
Create a matrix of 5 x 4 and set the values to 0.,"# create a matrix of 5 x 4
matrix = [[0 for x in range(4)] for y in range(5)]"
"Using a recursive algorithm, reverse the order of elements in a list.arr = [1, 2, 3, 4, 5]","# recursive approach
def recursive_reverse(arr, length):
    if length == 0:
        return

    recursive_reverse(arr, length - 1)
    arr.append(arr[length - 1])
    arr.pop(length - 1)
    
# call function on the data
recursive_reverse(arr, len(arr))"
"Write a for loop to multiply two numbers and print the result.a = 5
b = 6","# multiply two numbers and print the result
for i in range(b):
    a *= b
    
print(a)"
"Add an 'except' statement to the following python code to prevent a ValueError.a = 5
b = 0

try:
    c = a / b","a = 5
b = 0

try:
    c = a / b
except ZeroDivisionError:
    print(""b cannot be zero"")"
Construct a for loop to check for prime numbers up to a given number.n = 20,"# construct a for loop to check for prime numbers up to 20
for num in range(2, n+1):
    isPrime = True
    
    for i in range(2, num):
        if (num % i == 0):
            isPrime = False
            break
    if isPrime:
        print(num, "" is a prime number"")"
Write a lambda expression that multiplies the argument by two.,"# construct a lambda that multiplies the argument by two
func = lambda x : x * 2"
Create a dictionary to store 'name' and 'age' as the keys and print the dictionary.,"# create a dictionary
dict = {""name"": ""John"", ""age"": 30}

# print the dictionary
print(dict)"
"Generate a unique ID for a given string.s = ""Hello World""","# generate a unqiue ID for the given string
import uuid 
  
# string 
string = ""Hello World""
  
# printing the original string 
print(""The original string is : "" + string) 
  
# generating the unique ID 
string_id = uuid.uuid4() 
  
# printing the unique ID 
print(""The unique id for given string is : "", string_id)"
"Using a dictionary comprehension, select the keys that start with a specific letter.d = {'cat' : 1, 'dog' : 2, 'mouse' : 3}","# select the keys that start with 'c'
dict = {k: v for k, v in d.items() if k.startswith('c')}"
"Print the output of the following loop.for i in range(6):
    print(i)","# print the output of the loop
for i in range(6):
    print(i)
    
# output of the loop
0
1
2
3
4
5"
"Use a built-in Python method to print the contents of a list in reverse order.arr = [1, 2, 3, 4]","# use a built-in python method to print the list in reverse order
arr.reverse() # using the list reverse method
print(arr)"
"Create an array using the given comma separated numbers, convert the array into a string, and then print the string.6,4,8","arr = [6,4,8]
str = ', '.join(map(str, arr))

print(str) # Output: 6, 4, 8"
Create a structure for a student in C.,"struct student {
    char name[100];
    int age;
    char address[100];
};"
"Calculate the distance of two points located in the 3-dimensional space.Point 1: (3, 4, 5)
Point 2: (2, 6, -1)",The distance between the two points is 6.244997998398398.
"Create a function that takes an array of string elements and sorts them in alphabetical order.[""apple"", ""banana"", ""papaya"", ""kiwi""]","def sortStringArray(stringArray): 
    return sorted(stringArray)"
"Write a Python code to search for a given keyword in a dictionary.dictionary = {
    “Car”: “A vehicle with four wheels”,
    “Laptop”: “A computer for personal use”,
    “Game”: “An activity for entertainment”
    }","def search(dic, keyword):
    for key, value in dic.items():
        if keyword in key:
            return value
    return ""No matching keyword found!""
search(dictionary, 'Laptop')"
Create an array of 3 strings and print it.,"myArray = [""Hello"", ""World"", ""!""]
print (myArray)"
"Write a regex pattern to match words that begin with ""cat"".",^cat\w*
"Using the given NumPy array, print out all the elements that are greater than 5.import numpy as np

arr = np.array([4, 6, 2, 8, 0, 7, 5])","import numpy as np

arr = np.array([4, 6, 2, 8, 0, 7, 5])

print(""Elements greater than 5:"")
for element in arr:
 if element > 5:
 print(element)"
"Using the code provided, write a regular expression pieces of code that validates an email address.","let regex = /^(([^<>()\[\]\\.,;:\s@""]+(\.[^<>()\[\]\\.,;:\s@""]+)*)|("".+""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;"
Edit the given code to generate an Array of all the numbers between 1 and 15.,"let myArray = [];

for (let i = 1; i<= 15; i++) {
  myArray.push(i);
}"
"Rewrite the code such that it uses thread-safe code and prevents race conditions.int x = 0; 
 
//This is the Thread Task
void increment(){ 
    x++; 
}","#include <atomic>

std::atomic_int x = 0;

// This is the Thread Task 
void increment() { 
    x.fetch_add(1); 
}"
"Modify the code to remove the duplicate elements from the given array.[5, 4, 5, 3, 2, 3, 1]","let myArray = [5, 4, 5, 3, 2, 3, 1];
let uniqueArray = []; 
  
myArray.forEach((item) => { 
    if (uniqueArray.indexOf(item) === -1) { 
        uniqueArray.push(item); 
    } 
});"
Write a python to convert an IP address from dot-decimal notation to binary notation.192.168.1.1,"def convert_ip_address(ip_address):
    """"""
    Convert IP address from dot-decimal notation (e.g. 192.168.1.1) to binary.
    """"""
    # Split the IP address in octets
    octets = ip_address.split('.')
    
    # Convert each octet to binary
    binary_octets = [bin(int(numeric_octet))[2:].zfill(8) for numeric_octet in octets]
    
    # Join the binary octets and return the IP address in binary notation
    return ''.join(binary_octets)

if __name__ == '__main__':
    ip_address = '192.168.1.1'
    print(convert_ip_address(ip_address))"
"Write a code to output the cosine similarity between two vectors.vector1 = [1, 2, 3]
vector2 = [4, 5, 6]","import numpy as np

def cosine_similarity(vector1, vector2):
    
    # normalize the vectors
    v1 = np.array(vector1)/np.linalg.norm(vector1)
    v2 = np.array(vector2)/np.linalg.norm(vector2)
    
    # calculate cosine similarity
    return np.dot(v1, v2) 
    
if __name__ == '__main__':
    vector1 = [1, 2, 3]
    vector2 = [4, 5, 6]
    print(cosine_similarity(vector1, vector2))"
"Replace the comment in the code with a line of code that prints the index of the maximum value in the list.list_a = [5, 8, 3, 6, 9]","list_a = [5, 8, 3, 6, 9]

# TODO: replace the comment with a line of code that prints the index of the maximum value in the list
print(list_a.index(max(list_a)))"
Write a code to generate a list with the first 20 Fibonacci numbers.,"def fibonacci(n):
    """"""
    Generate a list with the first n Fibonacci numbers.
    """"""
    fib_list = [0, 1]

    # Generate the list and stop when n is reached
    while len(fib_list) < n:
        fib_list.append(fib_list[-1] + fib_list[-2])
    
    return fib_list

if __name__ == '__main__':
    print(fibonacci(20))"
"Using numpy, write a code to multiply matrix A and B togethermatrix A:
[[1, 2], [3, 4]]
matrix B:
[[5, 6], [7, 8]]","import numpy as np

def matrix_multiply(A, B):
    """"""
    Multiply matrix A and B using numpy
    """"""
    # Convert the matrices to numpy arrays
    A = np.array(A)
    B = np.array(B)
    
    # Multiply the matrices
    C = np.dot(A, B)
    
    return C

if __name__ == '__main__':
    # example matrices
    A = [[1, 2], [3, 4]]
    B = [[5, 6], [7, 8]] 
    print(matrix_multiply(A, B))"
"Using regular expression, write a code to extract words that start with a specific letter from a given string.string = ""This is a test sentence""
letter = ""t""","import re

def extract_words(string, letter):
    """"""
    Extract words that start with a specific letter from a given string
    """"""
    # Use a regular expression to match words that start with the letter
    pattern = r""\b"" + letter + r""\w*\b""
    words = re.findall(pattern, string) 
  
    return words

if __name__ == '__main__':
    string = ""This is a test sentence""
    letter = ""t""
    print(extract_words(string, letter))"
"Add an else clause to the following if statement.if cond:
    print(""true"")","if cond:
    print(""true"")
else:
    print(""false"")"
Take in a string and return true if it is a valid IPv4 address.127.0.0.1,true
"Input a string with parameters and return an updated string that replaces each parameter with its corresponding value.""The number is {x}""","""The number is 4"""
"Take in an array of integers and return the sum of all odd numbers.[1,2,3,4,5]",9
Parse a given input of timestamp and convert it to a datetime object in python.1552520802,"datetime.datetime(2019, 3, 12, 17, 33, 22)"
Take in a string and return an output where every second character of the input string is capitalized.'apple','ApPlE'
Write a set of if-else statements to convert numerical grade 1-100 to their letter grade equivalent.,"if grade >= 90:
  letter_grade = 'A'
elif grade >= 80:
  letter_grade = 'B'
elif grade >= 70:
  letter_grade = 'C'
elif grade >= 60:
  letter_grade = 'D'
else:
  letter_grade = 'F'"
"Take in a list of integers and return true if any of the numbers in the list are prime numbers.[2, 3, 5, 7]",true
Create a function to return all possible sums of two numbers.,"def two_num_sums(nums):
    """"""Returns a list of all possible sums of two numbers from nums.""""""
    combinations = []

    for i in range(len(nums)-1):
        for j in range(i+1, len(nums)):
            combination = nums[i]+nums[j]
            combinations.append(combination)

    return combinations"
"Rewrite the code to be efficient and use less lines of code.def count_letters(string_name):
    letter_count = 0
    for x in string_name:
        letter_count = letter_count + 1
    return letter_count","def count_letters(string_name):
    return len(string_name)"
"Implement quicksort algorithm in Python for a list of integers.[4, 2, 5, 3, 1]","def quicksort(arr):
	if len(arr) <= 1:
		return arr
	pivot = arr[len(arr) // 2]
	left = [x for x in arr if x < pivot]
	middle = [x for x in arr if x == pivot]
	right = [x for x in arr if x > pivot]
	return quicksort(left) + middle + quicksort(right)"
"Using a switch-case statement, calculate the grade for the student using the percentage in the input.Student percentage: 80","switch(percentage) {
  case (percentage >= 90):
    grade = 'A';
    break;
  case (percentage >= 80):
    grade = 'B';
    break;
  case (percentage >= 70):
    grade = 'C';
    break;
  case (percentage >= 60):
    grade = 'D';
    break;
  case (percentage < 60):
    grade = 'F';
    break;
  default:
    grade = 'Invalid';
    break;
}"
Classify the following string using Regular Expressions.Hello World,\w+ \w+
Generate the Fibonacci sequence using a for loop in Python.,"def generateFibonacciSequence(n):
    fib_sequence = [0,1]
    for i in range(2,n):
        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])
        
    return fib_sequence"
Reverse a string of characters and words.Hello World,dlroW olleH
"Write a python program that takes in two input strings and checks if the second string is an anagram of the first one.silent, listen","def anagram_check (str1, str2): 
    if(sorted(str1)== sorted(str2)): 
        print(""The strings are anagrams."")  
    else: 
        print(""The strings aren't anagrams."")         

# Driver code 
str1 = ""silent""
str2 = ""listen""
anagram_check(str1, str2)"
"Edit the following code to ensure that the conditions in the if-else statement are met.if (x == 2 && y == 2) {
   console.log(""x equals y"");
}","if (x == 2 && y == 2) {
   console.log(""x equals y"");
} else if (x != 2 && y != 2) {
   console.log(""x does not equal y"");
}"
"Create a regular expression to match strings containing two consecutive symbols ""#"" followed by four alphabetic characters.",/\#[a-zA-Z]{4}/
"Using the comments as a guide, fill in the blanks with code where applicable to make the function jumbledLetters() work.def jumbledLetters(word):
    """"""Returns a randomly jumbled version of the given word.""""""
    new_word = """"
    for letter in word:
        #__TODO__ use the random module to generate a number between 0 and the length of the word
        num = ____ 
        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step
        ____ 
    return new_word","def jumbledLetters(word):
    """"""Returns a randomly jumbled version of the given word.""""""
    new_word = """"
    for letter in word:
        #__TODO__ use the random module to generate a number between 0 and the length of the word
        num = random.randint(0, len(word)-1)
        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step
        new_word += word[num]
    return new_word"
Create a visualization in Matplotlib to display sales figures over the last 6 months.,"import matplotlib.pyplot as plt
import numpy as np
 
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
sales = [40000, 42000, 46000, 50000, 60000, 63000]
 
fig, ax = plt.subplots()
ax.plot(months, sales, marker='o')
ax.set_title('Monthly Sales')
ax.set_xlabel('Month')
ax.set_ylabel('Sales ($)')
ax.set_ylim(0, max(sales) + 5000)
 
plt.show()"
Construct a MongoDB query to retrieve all documents where the field 'name' contains the letter 'y'.,"db.collection.find({
    ""name"": {
        ""$regex"": /.*y.*/i
    }
})"
"Inject a variable in a Python script, named ""greeting_message"" with the value ""hello world""","greeting_message = ""hello world"""
"Write a regular expression to validate a password  containing at least 8 characters, one uppercase letter, one lowercase letter and a special character.","^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$"
"Create a Python script to generate a random password of 8 characters that contains an uppercase letter, a special symbol and a number.","import random
import string

def generate_random_password():
  password = """"
  character_types = string.ascii_letters + string.digits + string.punctuation
  length = 8
  for _ in range(length):
    password += random.choice(character_types)
  return password

print(generate_random_password())"
Create a processing sketch that can randomly generate 500 circles.,"// Setup a canvas of 500x500
void setup() {
  size(500, 500);
}

// Randomly draw 500 circles in the canvas
void draw() {
  for (int i=0; i<500; i++) {
    float x = random(0, 500);
   	float y = random(0,500);
   	float rand = random(0, 100);
   	fill(rand, rand, rand);
	ellipse(x, y, 20, 20);
  }
}"
Write an algorithm to identify below number is prime or not.7,"# Function to check for prime number 
def isPrime(n): 
      
    # Corner cases 
    if n <= 1: 
        return False
  
    # Check from 2 to n-1 
    for i in range(2, n): 
        if n % i == 0: 
            return False
  
    return True

# Driver Program 
if isPrime(7):
    print(""YES! It is a prime number"")
else:
    print(""No! It is not a prime number"")"
Write a regular expression that validates email addresses.,"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$"
"Write a function in Go language that splits a string into three parts based on a specified separator.String to Split: Learn, GPT models
Separator: ,","func SplitString(input, separator string) (string, string, string) {
    strings := strings.Split(input, separator)
    return strings[0], strings[1], strings[2]
}"
"Write a function to reverse a given sentence in Python.Given sentence: ""The quick brown fox jumps over the lazy dog.""","def reverse_sentence(sentence):
    words = sentence.split()
    reversed_words = words[::-1]
    reversed_sentence = ' '.join(reversed_words)
    return reversed_sentence

if __name__ == '__main__': 
    sentence = ""The quick brown fox jumps over the lazy dog.""
    print(reverse_sentence(sentence))"
What is the difference between post() and get() in AJAX?,"The main difference between post() and get() in AJAX is that post() sends the data in the body of the request and get() sends it in the URL. Post() is generally used to send form data, and can be used for creating or updating data on the server. Get() is usually used for requesting data from the server, and can be used for reading data from the server."
Design a class in Python to model a hospital.,"class Hospital:
    def __init__(self, location, name, rooms, staff):
        self.location = location
        self.name = name
        self.rooms = rooms
        self.staff = staff
    
    def get_location(self):
        return self.location
    
    def get_name(self):
        return self.name
    
    def get_rooms(self):
        return self.rooms
    
    def get_staff(self):
        return self.staff
    
    def set_location(self, location):
        self.location = location
    
    def set_name(self, name):
        self.name = name
    
    def set_rooms(self, rooms):
        self.rooms = rooms
    
    def set_staff(self, staff):
        self.staff = staff"
Find the maximum number of left and right parentheses that can be balanced for a given expression.Expression: (()(),The maximum number of left parentheses that can be balanced in the given expression is 3 and the maximum number of right parentheses that can be balanced is 3.
"Write code to iterate through a nested dictionary and return the sum of all values.dictionary = {
 'level1': {
  'level2a': {
   'level3a': 1,
   'level3b': 3
  },
  'level2b': {
   'level3a': 4,
   'level3b': 5
  }
 }
}","dictionary = {
 'level1': {
  'level2a': {
   'level3a': 1,
   'level3b': 3
  },
  'level2b': {
   'level3a': 4,
   'level3b': 5
  }
 }
}

def iterate_dict(d):
    result = 0
    for value in d.values():
        if type(value) is dict:
            result += iterate_dict(value)
        else:
            result += value
    return result

print(iterate_dict(dictionary)) # 13"
"Make a single change in the following code to throw an error when the argument to the function is negative.def calculate_square_root(n):
    return n**(1/2)","def calculate_square_root(n):
    if n < 0:
        raise ValueError(""n must be a positive number"")
    return n**(1/2)"
Create a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.,"def sublist_sum(nums, target):
    result = []
    current_sum = 0
    start = 0
    for end in range(len(nums)):
        current_sum += nums[end]
        while current_sum > target and start < end:
            current_sum -= nums[start]
            start += 1
        if current_sum == target:
            result.append(nums[start:end+1])
    return result"
"Create a class to represent a calculator with the following methods: add, subtract, multiply, and divide","class Calculator:
    def add(self, num1, num2):
        return num1 + num2

    def subtract(self, num1, num2):
        return num1 - num2

    def multiply(self, num1, num2):
        return num1 * num2

    def divide(self, num1, num2):
        return num1 / num2"
"Replace the ""TODO"" in the following code with the code to print the sum of the first n natural numbers.def print_sum(n):
    # TODO

print_sum(5)","def print_sum(n):
    sum_n = n * (n + 1) // 2
    print(sum_n)

print_sum(5)"
Create a function to parse a string that has lines of key/value pairs and return a dictionary of the values paired with the keys.,"def parse_key_value_pairs(string):
    result = {}
    lines = string.split(""\n"")
    for line in lines:
        if line:
            key, value = line.split("":"")
            result[key] = value
    return result"
Write code to find the maximum sum for a contiguous subarray of a given array.,"def max_sum_subarray(nums):
    current_sum = 0
    max_sum = -float('inf')
    for num in nums:
        current_sum += num
        max_sum = max(max_sum, current_sum)
        current_sum = max(current_sum, 0)
    return max_sum"
Create a function to format a given list of numbers with commas as thousands separators.,"def format_numbers(nums):
    formatted_nums = []
    for num in nums:
        formatted_nums.append(""{:,}"".format(num))
    return formatted_nums"
"Write a regex (in Python) to match the following pattern: ""an apple a day keeps the doctor away""","import re

regex = r""\ban\sapple\s\ba\sday\skeeps\sthe\sdoctor\saway\b"""
"Extract the title and description from this XML data.<data>
<info>
 <title>Page Title</title>
 <description>This is a description of a web page.</description>
</info>
</data>","let title = xml.querySelector('title').innerHTML;
let description = xml.querySelector('description').innerHTML;"
"Find the average value of the following array in Python.arr = [1,2,3,4,5]","import numpy as np

arr = [1,2,3,4,5]
average = np.mean(arr)
print(f""The average of the array is: {average}"")"
"Create an algorithm that returns an array of the unique items in a given list.[1, 2, 4, 2, 5, 6, 7, 1, 4]","def unique(arr):
    unique_list = []
    for el in arr:
        if el not in unique_list:
            unique_list.append(el)
    return unique_list"
"Create an algorithm to determine if two strings are rotations of each other.""abcde"", ""eabcd""","def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1+str1"
"Generate a code to sort a list of floats.[4.5, 7.5, 1.5, -2.5]","def sort_floats(arr): 
    arr.sort(key=float) 
    return arr"
"Given the following text, create a Python function that finds the number of unique words in the text.This is a sample text to find the number of unique words.","def find_unique_words(text):
    words = set(text.split("" ""))
    return len(words)

unique_words = find_unique_words(""This is a sample text to find the number of unique words."")
print(unique_words)"
"Replace the values in the following array with its cumulative sum.arr = [1, 2, 3, 4, 5]","def cumulative_sum(arr):
    cum_sum = []
    temp_sum = 0
    for num in arr:
        temp_sum += num
        cum_sum.append(temp_sum)
    return cum_sum

arr = [1, 2, 3, 4, 5] 
cum_sum = cumulative_sum(arr)

print(cum_sum)  # Output: [1, 3, 6, 10, 15]"
"Given the following array and a number k, determine if two elements from the array add up to k.arr = [10, 15, 3, 7], k = 17","def findSum(arr, k):
    s = set()
    for num in arr:
        diff = k - num
        if diff in s:
            return True
        s.add(num)
    return False

arr = [10, 15, 3, 7] 
k = 17 
print(findSum(arr, k))  # Output: True"
"Programmatically generate a random password of length 8 that contains at least one lowercase letter, one uppercase letter, one number, and one special character.","import string
import random

def generate_password():
    letters = string.ascii_letters
    numbers = string.digits
    symbols = string.punctuation

    chars = letters + numbers + symbols
    length = 8

    password = """".join(random.sample(chars, length))
    if any(char.islower() for char in password) \
        and any(char.isupper() for char in password) \
            and any(char.isdigit() for char in password) \
                and any(char in symbols for char in password):
        return password

random_password = generate_password()
print(random_password)  # Output: eQ@0?St$"
"Sort the following list of numbers in increasing order without using any built-in sorting method.arr = [2, 5, 3, 8, 7]","def sort_increasing(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i, len(arr)):
            if arr[min_index] > arr[j]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

arr = [2, 5, 3, 8, 7] 
sorted_arr = sort_increasing(arr)
print(*sorted_arr) # Output: 2 3 5 7 8"
"Given an array of integers, replace each element of the array with its square.arr = [1, 2, 3, 4, 5]","def get_squares(arr):
    squares = []
    for num in arr:
        squares.append(num ** 2)
    return squares

arr = [1, 2, 3, 4, 5]
squares = get_squares(arr)

print(*squares)  # Output: 1 4 9 16 25"
"Using the array below, count the occurrence of the number 3.arr = [1, 1, 2, 3, 3, 3, 4, 5]","arr = [1, 1, 2, 3, 3, 3, 4, 5]

def count_number(arr, num):
    count = 0
    for val in arr:
        if val == num:
            count += 1
    return count

count = count_number(arr, 3)
print(count)  # Output: 3"
Create a program that finds the average of two numbers.7 and 9,"def find_average(num1, num2):
    return (num1 + num2) / 2

if __name__ == '__main__':
    print(find_average(7, 9))"
How would you generate a Fibonacci sequence up to n in a list?,"def generate_fibonacci_sequence(n):
    result = [1]
 
    current_number = 1
    next_number = 1
    while current_number <= n:
        result.append(current_number)
        current_number, next_number = next_number, current_number + next_number
 
    return result

if __name__ == '__main__':
 print(generate_fibonacci_sequence(10))"
"Create a function to get the root of a quadratic equation1, 4, 4","def get_roots_of_quad_eqn(a, b, c):
    # compute discriminant 
    d = (b**2) - (4 * a * c)
    
    # compute roots
    root1 = (-b + math.sqrt(d)) / (2 * a) 
    root2 = (-b - math.sqrt(d)) / (2 * a) 
    
    # return the roots
    return root1, root2

if __name__ == '__main__':
    a, b, c = 1, 4, 4
    print(get_roots_of_quad_eqn(a, b, c))"
Write a Python program to print the numbers of a specified list after removing even numbers from it.,"def print_odd(numbers):
    odd_numbers = []
    for num in numbers:
        if num % 2 != 0:
            odd_numbers.append(num)
    return odd_numbers

if __name__ == '__main__':
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    print(print_odd(numbers))"
"Edit the following code to print the position of an element x in a list y.list y = [2, 3, 4, 1, 5]
x = 1","list y = [2, 3, 4, 1, 5]
x = 1

def find_position(y, x):
    for index, value in enumerate(y):
        if value == x:
            return index
    return f""{x} is not in the list""

if __name__ == '__main__':
    print(find_position(y, x))"
How would you calculate the distance between two points in a three-dimensional space?,"def distance_3d(x1, y1, z1, x2, y2, z2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)

if __name__ == '__main__':
    x1, y1, z1 = 1, 2, 3
    x2, y2, z2 = 5, 6, 7
    print(distance_3d(x1, y1, z1, x2, y2, z2))"
Write a code to get the second smallest number from a list of integers.,"def second_smallest(numbers):
    sorted_numbers = sorted(numbers)
    return sorted_numbers[1]

if __name__ == '__main__':
    numbers = [1, 5, 2, 9, 3, 6]
    print(second_smallest(numbers))"
How would you form a list from two lists by taking elements at same index from both the lists?,"def form_list_from_list(list1, list2):
    return [list1[i] + list2[i] for i in range(len(list1))]

if __name__ == '__main__':
    list1 = [1, 2, 3] 
    list2 = [4, 5, 6]
    print(form_list_from_list(list1, list2))"
"Investigate the syntax error in this R script and fix it.x <- c(1, 2, 3","x <- c(1, 2, 3)"
Edit the given code snippet to reverse the elements of a list in Python.,"def reverseList(list): 
    list.reverse() 
    return list"
"Output the remaining items in the following array after removing duplicates:let arr = [1, 2, 1, 4, 5, 2, 6]","[4, 5, 6]"
"Use the given array and print the second element using its index.Array: [2, 3, 4, 5, 6]",console.log(arr[1]); // prints 3
"Use dictionaries in Python to merge the data from two given dictionaries.dictA = {
  'keyA': 1,
  'keyB': 2
}
dictB = {
  'keyC': 3,
  'keyD': 4
}","dictC = {**dictA, **dictB}"
Develop a regex expression to validate if a given string contains 5 numbers consecutively.,^\d{5}$
Write a query in MongoDB to fetch all documents where the field 'status' is 'active'.,"db.collection.find({""status"": ""active""})"
Use TensorFlow to build a machine learning model for predicting continuous values given a data set of temperature vs electricity consumption.,"import tensorflow as tf
import matplotlib.pyplot as plt

#Import the dataset
x = tf.placeholder(tf.float32)
y = tf.placeholder(tf.float32)
  
# Create our model
model = tf.keras.Sequential([tf.keras.layers.Dense(1, input_shape=[1])])

# Compile the model
model.compile(loss='mean_squared_error', optimizer='sgd')

# Fit the model
model.fit(x, y, epochs=10)

# Plot the result
plt.plot(x, y, 'ro', label='original data')
plt.plot(x, model.predict(x), label='predicted')
plt.xlabel('Temperature')
plt.ylabel('Electricity Consumption')
plt.legend()
plt.show()"
"using the given input text, identify the parts of speech for each word.The cat is black and white","The: article 
cat: noun 
is: verb 
black: adjective 
and: conjunction 
white: adjective"
Implement quicksort in Python,"def quicksort(array):
    if len(array) < 2:
        return array
    else:
        pivot = array[0]
        less = [i for i in array[1:] if i <= pivot]
        greater = [i for i in array[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)"
Count the number of vowels present in the input text.Good morning!,"def vowel_count(text):
    vowels = ['a', 'e', 'i', 'o', 'u']
    count = 0
    for c in text:
        if c.lower() in vowels:
            count += 1
    return count"
"Create an algorithm to determine whether the given array contains an odd number of elements.[1, 2, 3, 4, 5]","def is_odd(arr):
    return len(arr) % 2 != 0"
"Compute the sum of elements in the following input array.[4, 7, 2, 9, 10, 15]","def sum_array(arr):
    total = 0
    for num in arr:
        total += num
    return total"
"Interchange the values of two given variables.x = 10 
y = 5","# Swap x and y
def swap_values(x, y):
    x, y = y, x 
    return x, y"
Describe the timeline of a given project.Create a social media app,"# Describe the timeline of a given project
def create_timeline(project):
    timeline = ['identify goals', 'analyze market', 'develop strategy', 'plan development',
                'design UI', 'write code', 'test and refine', 'launch']
    return timeline"
"Calclate the area of a triangle in accordance with the given values.Base = 4 
Height = 3","def calculate_area(base, height):
    return 0.5 * base * height"
"Generate a list of integers between a given start and end value.Start = 3
End = 10","def generate_list(start, end):
    return list(range(start, end+1))"
Compose an algorithm to determine whether a given string contains all unique characters.,"def is_unique(string):
   char_set = set()
   for char in string:
       if char in char_set:
           return False
       else:
           char_set.add(char)
   return True"
"Update the following code to loop through the numbers 0 to 5.for i in range():
    print(i)","for i in range(6):
    print(i)"
"Complete the missing parts of the code to sort an array in ascending order.int[] arr = {3, 5, 2, 7, 1};
int temp;
for (int i = 0; i < arr.length; i++){
  // TODO: complete the code
}","int[] arr = {3, 5, 2, 7, 1};
int temp;
for (int i = 0; i < arr.length; i++){
  for (int j = i+1; j < arr.length; j++){
    if (arr[i] > arr[j]) {
      temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    }
  }
}"
Create a Go program to convert a given temperature from Kelvin to Celsius.,"package main

import ""fmt""

func KelvinToCelsius(k float64) float64 {
    c := k - 273.15
    return c
}

func main() {
    k := 300.15
    c := KelvinToCelsius(k)
    fmt.Printf(""%.2f kelvin is equal to %.2f celsius.\n"", k, c)
}"
"Debug the following code to print all the elements of an array.int[] arr = {1,2,3,4,5};
for (int i = 0; i < arr.len; i++){
  System.out.println(arr[i]);
}","int[] arr = {1,2,3,4,5};
for (int i = 0; i < arr.length; i++){
  System.out.println(arr[i]);
}"
"Create an Angular2 component to display a ""Hello, world!"" message.","import { Component } from '@angular/core';

@Component({
  selector: 'app-hello-world',
  template: `<div>Hello, World!</div>`,
})
export class HelloWorldComponent {

}"
"Add a feature to the given code to print the name of the largest number in an array.int[] arr = {5,3,7,2,4};
int largest = arr[0];
for (int i = 1; i < arr.length; i++){
  if(arr[i] > largest){
    largest = arr[i];
  }
}","int[] arr = {5,3,7,2,4};
int largest = arr[0];
String name;
for (int i = 1; i < arr.length; i++){
  if(arr[i] > largest){
    largest = arr[i];
    name = Integer.toString(arr[i]);
  }
}
System.out.println(""The largest number is "" + name);"
Design a function that will print out the leap years in a given intervalFrom 2015 to 2050,"def print_leap_years(start_year, end_year): 
    for year in range(start_year, end_year + 1):
        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
            print(year)

print_leap_years(2015, 2050)"
Output the square of the following number5,25
Create a program to identify a given string as a valid ISBN 10 code,"def is_valid_isbn_10(code):
    # check for the length
    if len(code) != 10:
        return False
    # check for leading ""X"" characters
    if code.startswith(""X""):
        return False
    # check for digits
    if not code.isdigit():
        return False
    # calculate the check digit
    sum = 0
    for i in range(9): 
        sum += int(code[i]) * (10 - i)
    checksum = sum % 11
    # check for valid check digit
    if not (checksum==int(code[9]) or (checksum == 10 and code[9] == 'X')):
        return False
    # No errors found
    return True

if __name__ == '__main__':
    code = input('Enter the ISBN-10 code: ')
    print(is_valid_isbn_10(code))"
Design a function that takes two parameters a and two and returns the result of a multiplied by two,"def mul_two(a, b):
    return a * b

if __name__ == '__main__':
    x = int(input('Enter first number: '))
    y = int(input('Enter second number: '))
    print(mul_two(x, y))"
"Verify if a given password string matches the regular expression.password = ""Ab12#""","import re

# regex pattern to match given password
pattern = re.compile(r""^[A-Za-z]\w{7,15}$"") 

# check if the password string matches the pattern 
if pattern.match(password): 
    print(""Password is valid"")
else: 
    print(""Password is invalid"")"
"Run a sentiment analysis on a given text.Text: ""The movie was amazing!""","import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

analyzer = SentimentIntensityAnalyzer()

# run sentiment analysis
sentiment = analyzer.polarity_scores(text)

for key in sentiment:
    print('{0}: {1}'.format(key, sentiment[key]))

# output
compound: 0.6249
neg: 0.0
neu: 0.406
pos: 0.594"
"Train a machine learning model for a classification problem.X = [[0, 1], [1, 1], [0, 0], [1, 0]]
y = [1, 0, 1, 0]","# importing the necessary libraries
import numpy as np 
from sklearn.svm import SVC 

# creating a svm classifier
clf = SVC(kernel = 'linear') 

# fitting the model 
clf.fit(X, y)"
"Create a basic query using two variables.sky, blue","SELECT *
FROM table
WHERE sky = 'blue';"
Create a regular expression to identify email addresses in a given string.,"The regular expression to identify email addresses in a given string is:

\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b"
Apply K-means clustering to a 3-dimensional dataset given a certain number of clusters.Number of Clusters = 4,"from sklearn.cluster import KMeans

# prepare the data
X = [... the 3-dimensional dataset ...]

# define the clustering model
kmeans_model = KMeans(n_clusters=4)

# fit the model
kmeans_model.fit(X)

# get the cluster centers
cluster_centers = kmeans_model.cluster_centers_

# get the labels for each point
labels = kmeans_model.labels_"
Write a Micropython program to turn on an LED.,"from machine import Pin
led = Pin(0, Pin.OUT)
led.on()"
"Correct the mistake in this code.x = ""Hello word""","x = ""Hello world"""
"Compare two strings and print true if they are equal, otherwise print false.String 1: Hello World
String 2: Hello World",true
"Create a loop through a given list of numbers and check if the number is divisible by 3.nums = [3, 5, 7, 8, 10, 11]","for num in nums:
  if num % 3 == 0:
    print (f""{num} is divisible by 3."")"
"Develop a function to fetch the maximum element from a given dictionary.d = {'Name': 'John', 'Age': 28, 'Score': 98}","def getMaxElement(d): 
  maxElement = max(d.values()) 
  for key, value in d.items(): 
    if (value == maxElement):  
        return key, value"
"Create a new dictionary in Python with the given keys and values.Keys: A, B
Values: 1, 2","d = {'A': 1, 'B': 2}"
"Identify the type of variable (integer, float, string) for the given value.Value: 1968",integer
"Implement a class in Python which implements the given method.class Test:
    def print_name(name):
        print(name)","class Test:
    def print_name(self, name):
        print(name)"
Generate 10 random integers between 12 and 25.,
Construct a regular expression to detect a valid IP address in a user input.,^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
"Convert the given string ""I am a programmer"" into upper case letters.","""I AM A PROGRAMMER"""
Suggest a design pattern to solve the following problemA system needs to access different types of data from multiple data sources.,"A good design pattern for solving this problem is the Adapter Pattern. This pattern allows the adapter to abstract away the different types of data sources and provide an interface for accessing the data from a single source. With this pattern, the system can easily access different types of data from multiple sources without having to handle the different data sources directly."
Suggest a data structure to efficiently store a set of phone numbers,"A good data structure for efficiently storing a set of phone numbers is a Hash Table. This data structure uses a hash function to map each phone number to the value(s) associated with it and stores the values in a linked list. This data structure provides constant time lookup, insert and delete operations, making it ideal for storing a large set of phone numbers."
What is the basic syntax to define a function in Python 3?,"def function_name(parameters):
    """""" function docstring """"""
    statement(s)"
"Given an array of integers, write a function to find the maximum difference between a lower element and an upper element.Array: [3, 10, 2, 6, 4, 8, 1]","def findMaxDifference(arr):
    min_element = arr[0]
    max_difference = arr[1] - arr[0]
    for num in arr:
        if num - min_element > max_difference:
            max_difference = num - min_element
        if num < min_element:
            min_element = num
    return max_difference"
"Calculate the number of days taken to finish a task given its start and end dates.Start Date: 01 June 2020
End Date: 15 June 2020",14 days.
"Generate a dynamic timestamp for a given date.Date: June 13, 2020, 5:30pm",1592175000
Construct a URL for making an HTTP POST request to the given endpoint.Endpoint: http://example.com/building/1,http://example.com/building/1?method=POST
"Parse the following URL and extract the protocol, hostname and the path.URL: https://example.com/blog/post/1","protocol: https
hostname: example.com
path: blog/post/1"
Write a style rule to apply a border on the first and last elements of the document.,"*:first-child, *:last-child {
   border: 1px solid black;
}"
Convert 1024 bytes into kilobytes.,"1 kilobyte = 1024 bytes

1024 bytes = 1 kilobyte."
Develop a regex pattern to match email addresses.,^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
"Given a value, x, write a line of code that converts it from a float to an integer.x = 25.32",int(x) # result: 25
Initialize a list with 5 items containing numbers from 1 to 5.,"my_list = [1, 2, 3, 4, 5]"
"Write a loop that prints the square of each element in a given array.arr = [1, 2, 3, 4]","arr = [1, 2, 3, 4]
for i in arr: 
  print(i*i)"
"Extend the following dictionary with three more key-value pairs.my_dict = {
 ""name"": ""John"",
 ""age"": 17
}","my_dict = {
 ""name"": ""John"",
 ""age"": 17,
 ""gender"": ""male"",
 ""height"": 180,
 ""hobbies"": [""basketball"", ""reading"", ""traveling""]
}"
"Create an anonymous function that takes two numbers, x and y and returns their product.","product = lambda x, y: x * y"
"Create a class called 'Address' with four string fields: address line 1, address line 2, city, and zipCode.","class Address {
  String addressL1;
  String addressL2;
  String city;
  String zipCode;

  public Address(String addressL1, String addressL2, String city, String zipCode) {
    this.addressL1 = addressL1;
    this.addressL2 = addressL2;
    this.city = city;
    this.zipCode = zipCode;
  }
}"
"Build a Python function that normalizes a given array.array = [4, 8, 15, 23, 42]","def normalize(array):
    min_val = min(array)
    max_val = max(array)
    normalized = [ (x-min_val) / (max_val-min_val) for x in array]
  return normalized"
Build a Python dictionary that contains five elements.,"myDictionary = {
  ""key1"": ""value1"",
  ""key2"": ""value2"",
  ""key3"": ""value3"",
  ""key4"": ""value4"",
  ""key5"": ""value5""
}"
"Design an object-oriented class in Python that stores a book's title, author, and publisher.","class Book:
  
  def __init__(self, title, author, publisher):
    self._title = title
    self._author = author
    self._publisher = publisher

  def get_title(self):
    return self._title

  def set_title(self, title):
    self._title = title

  def get_author(self):
    return self._author
  
  def set_author(self, author):
    self._author = author

  def get_publisher(self):
    return self._publisher
  
  def set_publisher(self, publisher):
    self._publisher = publisher"
Write an assembly language program to calculate 2 to the power of 8.,".data
    x:    .word 8
.text
    li $v0, 2       # load 2 to $v0
    li $t0, 1       # load 1 to $t0
    lw $a0, x       # load 8  to $a0
    jal pow
    j exit

pow:
    mul $t1, $v1, $v0 # r3 = $v0 * r2 
    mflo $v1         # r2 = lo(r3)
    addi $a0, $a0, -1 # r1 = r1-1 
    bne $a0, 0, pow  # if r1 != 0 go to loop start
    mfhi $v0         # r0 = hi(r3)
    jr $ra           

exit:
    nop"
Write an Arduino program to blink an LED once every two seconds.,"void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(2000);
  digitalWrite(LED_BUILTIN, LOW);
  delay(2000);
}"
"Suppose we have a list of numbers, write a Python code to compute the average of the list.list = [1, 5, 8, 9, 10]","def find_average(list):
    sum = 0
    for num in list:
        sum += num
    return sum/len(list)"
"Given the following 2D array. Create a function to find the sum of each row.Array = [[2, 5, 6], [4, 1, 3], [5, 9, 0]]","def sum_row(arr):
    total = []
    for row in arr:
        total.append(sum(row))
    return total"
How would you check an integer is divisible by 7 or not in Python?,"We can use the modulo operator (%) to check if an integer is divisible by another number in Python.

The modulo operator (%) returns the remainder of the division. If the remainder is zero then the two numbers are divisible.

For example, to check if an integer is divisible by 7, we can use:

if (x % 7) == 0:
    # x is divisible by 7
else:
    # x is not divisible by 7"
"alter this code so that it can run on python3,def say_message(message, times=1):
    print message * times

say_message(""Hello world!"")","""""""
Alter this code so that it can run on Python 3
""""""

def say_message(message, times=1):
    print(message * times)

say_message(""Hello world!"")"
"generate a function minL that takes two lists and returns the smallest element from both lists.list1 = [9, 11, 8, 10, 20] 
list2 = [3, 10, 12]","""""""
Generate a function minL that takes two lists and returns the smallest element from both lists.
""""""

def minL(list1, list2):
    min_list = sorted(list1 + list2)
    print('The minimum of list1 and list2 is: ', min_list[0]) 

if __name__ == '__main__': 
    list1 = [9, 11, 8, 10, 20] 
    list2 = [3, 10, 12] 
    minL(list1, list2)"
"create a function that calculates the total cost of a meal including taxes and tips.meal_price = 35
sales_tax = 0.09
tip_percentage = 0.18","""""""
Create a function that calculates the total cost of a meal including taxes and tips
""""""

def calculate_total_meal_cost(meal_price, sales_tax, tip_percentage): 
    # Calculate subtotal
    subtotal = meal_price + meal_price * tip_percentage
    # Calculate tax
    tax =  subtotal * sales_tax
    # Calculate total
    total = subtotal + tax

    return total

if __name__ == '__main__': 
    meal_price = 35
    sales_tax = 0.09
    tip_percentage = 0.18
    print(""Total cost of meal is: "" + str(calculate_total_meal_cost(meal_price, sales_tax, tip_percentage)))"
"edit the existing function to calculate the compound interest.# Calculate Simple Interest 
def calcSimpleInterest(p, r, t): 
    return (p * r * t) / 100","""""""
Edit the existing function to calculate the compound interest
""""""
# Calculate Compound Interest 
def calcCompoundInterest(p, r, t): 
    # Calculate Simple Interest 
    interest= p * (pow((1 + r / 100), t)) 
    return interest

if __name__ == '__main__': 
    principal_amount = 1000
    rate_of_interest = 5
    time_period = 5
    print(""Compound interest is"", calcCompoundInterest(principal_amount, rate_of_interest, time_period))"
"Generate a function to calculate the probability of an event.num_outcomes = 36
num_favourable_outcomes = 9","""""""
Generate a function to calculate the probability of an event
""""""
def calculate_probability(num_outcomes, num_favourable_outcomes):
    # calculate probability 
    probability = float(num_favourable_outcomes) / float(num_outcomes)
    return probability
    
if __name__ == '__main__': 
    num_outcomes = 36
    num_favourable_outcomes = 9
    print(""Probability of an event is: "" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))"
"determine if two strings are anagrams or not.string1 = 'listen'
string2 = 'silent'","""""""
Determine if two strings are anagrams or not
""""""

def is_anagram(string1, string2):   
    # get lists of characters
    list1 = list(string1.lower())
    list2 = list(string2.lower())

    # sort both lists
    list1.sort()
    list2.sort()

    if list1 == list2: 
        return True
    else:
        return False

if __name__ == '__main__': 
    string1 = 'listen'
    string2 = 'silent'
    print(""Result: "" + str(is_anagram(string1, string2)))"
Write a function to calculate the number of letter and non-letter characters in a string.Input: 'If These Hills',"def numberOfLettersAndNonLetterCharacters(string):
    count_characters = 0
    count_non_characters = 0
    
    for char in string:
        if char.isalpha():
            count_characters += 1
        else:
            count_non_characters += 1
    return (count_characters, count_non_characters)

print(numberOfLettersAndNonLetterCharacters('If These Hills'))"
Write a correct implementation of the following algorithmBinary search for an element x in a sorted array,"def binary_search(arr, x): 
    low = 0
    high = len(arr) - 1
    while low <= high: 
        mid = (high+low)//2
        if arr[mid] < x: 
            low = mid + 1
        elif arr[mid] > x: 
            high = mid - 1
        else: 
            return mid 
  
    return -1"
Create a graphical user interface using Python to perform the following functionTake two inputs from the user: a name and an age,"import tkinter 
  
# Create an instance of tkinter 
root = tkinter.Tk()  
  
# Create two lables and two input boxes 
name_label = tkinter.Label(root, text ='Name: ')   
age_label = tkinter.Label(root, text ='Age: ') 
name_entry = tkinter.Entry(root) 
age_entry = tkinter.Entry(root) 
  
# Place the labels,entry boxes in the desired layout 
name_label.grid(row = 0, column = 0)   
name_entry.grid(row = 0, column = 1)  
age_label.grid(row = 1, column = 0)   
age_entry.grid(row = 1, column = 1) 
  
root.mainloop()"
"Find the sum of the following fibonacci sequence0, 1, 1, 2, 3, 5, 8, 13",The sum of the given sequence is 33.
"Fill in the blanks of the following Python code to implement a Selection Sort algorithm.def selection_sort(arr):
    for [i] in [range](len(arr),1,-1):
        max_element=arr[0]
        for [j] in [range]([i]):
            if arr[j] > max_element :
                max_element=arr[j]
          
        [temp] = arr[i]
        arr[i] = max_element
        arr[arr.index(max_element)] = [temp]","def selection_sort(arr):
    for i in range(len(arr),1,-1):
        max_element=arr[0]
        for j in range(i):
            if arr[j] > max_element :
                max_element=arr[j]
          
        temp = arr[i-1]
        arr[i-1] = max_element
        arr[arr.index(max_element)] = temp"
What is the reuse principle in software engineering?,"The reuse principle in software engineering states that software components should be written and designed for reuse in other software components and systems. This can save developers time and money when developing software, since they can use existing components to build new functions and features into their software products. Additionally, it helps promote consistent coding, makes debugging easier, and reduces the risk of introducing bugs and other errors."
"Write a function in Python that takes a list and returns the one with all negative numbers sorted in ascending order.[3, -4, 1, -2]","def remove_negative_numbers(lst):
  negative = []
  for x in lst:
    if x < 0:
      negative.append(x)
  return sorted(negative)"
What is the difference between compile-time and run-time errors?,"Compile-time errors occur when code does not conform to the syntax specified by the programming language, and usually prevent the code from being executed. Run-time errors occur when code is syntactically correct, but there are still problems executing the code. Run-time errors typically occur at the point where code is executed, as opposed to compile-time errors which occur at the point of compilation. The types of errors usually depend on the type of language used for programming. For example, compiling Java code with a C++ compiler would cause a compile-time error since the two languages have different syntaxes."
"Classify a set of emails into 'spam' or 'not spam'.Email 1: 
Hello there, I noticed that you have not been making use of our sales offers lately, so I thought I'd remind you about our special offers and discounts for the month. Don't miss out!",not spam
"Given an array of numbers, how would you filter the numbers that are divisible by 3.[1, 6, 7, 8, 10, 15, 18, 18]","[6, 9, 15, 18, 18]"
"Given a list of strings, code a function to remove all duplicate strings.string_list = ['a', 'b', 'c', 'a', 'b', 'c', 'd']","def remove_duplicates(string_list):
    return list(set(string_list))

unique_string_list = remove_duplicates(string_list)
print(unique_string_list)

# Output: ['d', 'b', 'a', 'c']"
Code a function to generate a random string of 10 randomly selected characters.,"import string
import random

def generate_random_string():
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(10))

random_string = generate_random_string()"
"Write a python regex pattern to filter the following list of strings.string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']","import re 
  
string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']
filtered_list = list(filter(lambda x: re.search('^[A-Z]{3}[0-9]$',x), string_list)) 

print(filtered_list) 
 
# Output: ['ABC1', 'DEF2', 'GHI3']"
"Write a function that takes a list of numbers and a target number. Print the numbers in the list that are closest to the target.number_list = [7, 11, 13, 14, 40]
target = 16","def closest_numbers(number_list, target):
    closest_numbers = min(map(lambda x : (x , abs(x - target)), number_list))
    return closest_numbers[0]

closest_num = closest_numbers(number_list, target)
print(closest_num)

# Output: 14"
"Convert the following list of URLs to strings without the protocol portions.url_list = ['http://example.com/index', 'https://example.net/contact', 
            'http://example.org/about']","def convert_urls(url_list):
    return list(map(lambda x : x.split('://')[1] , url_list))
 
converted_urls = convert_urls(url_list)
print(converted_urls)

# Output: ['example.com/index', 'example.net/contact', 'example.org/about']"
"Generate code to find the mean of the following list of numbers.number_list = [3, 7, 4, 8, 5, 9]","def mean(number_list):
    return sum(number_list) / len(number_list)
 
average = mean(number_list)
print(average)

# Output: 6.166666666666667"
"Reorder the following array in decreasing order.[21, 12, 8, 36, 33]","[36, 33, 21, 12, 8]"
"Construct a single list from the following list of lists.[[1, 2], [3, 4]]","final_list = [1, 2, 3, 4]"
"Create a class, Car, with the following instance variables that store information about a carNumber of doors, colour, model_year, speed","class Car:
	def __init__(self, num_doors, color, model_year, speed):
		self.num_doors = num_doors
		self.color = color
		self.model_year = model_year
		self.speed = speed"
What is a regular expression?,"A regular expression (regex) is a sequence of characters that define a search pattern used to match strings or pieces of text. It can be used for searching, validating and manipulating text."
"Write a code to get the sum of all the unique values in a dictionary.d = {'a': 2, 'b': 3, 'c': 4, 'd': 5}","total_sum  = 0
for key in d:
    total_sum += d[key]
    
print(total_sum)"
Edit the text below and print a new sentence using the same words.The moon is bright and beautiful.,"Beautiful and bright, the moon shines."
"Write a Python function that takes two strings and returns the longest common subsequence.str1 = ""AGGTAB""
str2 = ""GXTXAYB""","def LongestCommonSubsequence(str1, str2):
    n = len(str1)
    m = len(str2)
    t = [[0 for j in range(m+1)] for i in range(n+1)]
    
    for i in range(1, n+1): 
        for j in range(1, m+1):  
            if str1[i-1] == str2[j-1]: 
                t[i][j] = 1 + t[i-1][j-1] 
            else: 
                t[i][j] = max(t[i-1][j], t[i][j-1])   
    return t[n][m]"
"Write a function to replace the Kth smallest number in integer array with 0.nums = [2, 9, 8, 11, 5]
K = 3","def replace_kth_smallest(nums, k):
    min_num = min(nums)
    min_count = nums.count(min_num)
    if k > min_count:
        k -= min_count
        nums.remove(min_num)
    nums[k-1] = 0
    return nums"
"Write a function that can split an array into two equally-sized subarrays.arr = [1, 2, 3, 4, 5, 6]","def split_array(arr):
    if len(arr) % 2 != 0:
        return False

    mid = len(arr)// 2
    left_arr = arr[:mid]
    right_arr = arr[mid:]

    return [left_arr, right_arr]"
"Write a function that can generate all permutations of a given string.string = ""ABC""","def permute(string):
    if len(string) == 1:
        return [string] 

    prevList = permute(string[1:]) 

    nextList = [] 
    for i in range(len(prevList)): 
        for j in range(len(string)): 
            newString = prevList[i][:j] + string[0:1] + prevList[i][j:] 
            if newString not in nextList: 
                nextList.append(newString) 
    return nextList"
"Irrespective of the value of the input array, always print 1111111.arr = [6,2,3,4]","for x in arr:
    print(1111111)"
"Cut all the letters off the end of a given word.word = ""Hello""","new_word = word[:len(word)-1]
print(new_word)  # Output: Hell"
Create a class that represents a circleradius = 5.5,"class Circle:
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return self.radius * self.radius * 3.14

c = Circle(radius) 
print(c.area())  # Output: 95.033"
"Create a function in Python which takes a list and finds the second highest number in it.arr = [2, 3, 1, 5, 4]","def second_highest_num(arr):
  arr.sort()
  return arr[-2]"
"Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise.","def is_vowel(char):
    vowels = 'aeiou'
    return char in vowels"
Build a function to detect if a provided number is prime.,"def is_prime(num):
    if num <= 1: 
        return False
    for i in range(2, num): 
        if num % i == 0: 
            return False
    return True"
"Write a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd.","def is_even(x):
   return x%2 == 0"
Create a Python program which takes a sentence and prints back the words in reverse order,"def reverse_words(sentence):
  words = sentence.split()
  words.reverse()
  return ' '.join(words)"
Generate a function in Python which takes a list and sorts the list elements in ascending order,"def sort_ascending(nums):
  return sorted(nums)"
Write a Python program to print the calendar of a given month and year,"import calendar

def get_calendar(month, year):
  return calendar.month(year, month)"
"Define a class ""Car"" with two data attributes ""top speed"" and ""model year"".","class Car:
    def __init__(self, top_speed, model_year):
        self.top_speed = top_speed
        self.model_year = model_year"
Write code to search for a number in a sorted array.,"def binary_search(list, target):
    low = 0
    high = len(list)-1
    while low <= high:
        mid = (low + high) // 2
        if list[mid] == target:
            return mid
        if list[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1"
Create a BST with two data elements 10 and 15.,"class Node:
    def __init__(self, data):
        self.data = data 
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None
  
  
    def insert(self, value):
        if self.root is None:
            self.root = Node(value)
        else:
            self._insert(value, self.root)
  
    def _insert(self, value, cur_node):
        if value < cur_node.data:
            if cur_node.left is None:
                cur_node.left = Node(value)
            else:
                self._insert(value, cur_node.left)
        elif value >= cur_node.data:
            if cur_node.right is None:
                cur_node.right = Node(value)
            else:
                self._insert(value, cur_node.right)
        else:
            pass 

bst = BST()
bst.insert(10)
bst.insert(15)"
"Write a function to print out all possible permutations of a list of numbers.list = [1, 2, 3]","def permutations(list): 
    if len(list) == 0: 
        return [] 
    if len(list) == 1: 
        return [list]
    l = [] #empty list 
  
    for i in range(len(list)): 
        m = list[i] 
        remList = list[:i] + list[i+1:] 
        for p in permutations(remList): 
            l.append([m] + p) 
    return l"
"Calculate the total of the numbers in the array below.[5, 10, 15]",30
"Write a Python code snippet that checks if all elements in the input list are equal.[10, 10, 10]","all_equal = all(x == 10 for x in [10, 10, 10])"
"Generate a hash for the string ""AutomatedAssistant""",d3eb3504653eba66b47a82f3cb5279ae9133f2584e00cbc56434a3d877f7b284
"Calculate the median of the following numbers: 14, 30, 5, 10.",10
Calculate the cube root of 533.,7.777314028068125
Identify the correct code to execute an API call with the python requests library.,"import requests
 
response = requests.get('http://example.com/api')"
"Modify the following code to add a new item to the list at a specific index.lst = [""a"", ""b"", ""c"", ""d""]","lst = [""a"", ""b"", ""c"", ""d""]

lst.insert(2, ""e"")

print(lst) # output ['a', 'b', 'e', 'c', 'd']"
"Write a Python program to calculate the frequency of each element in a given list.mylist = [2, 3, 4, 2, 3, 5, 6, 7]","def frequency_count(mylist):
    freq = {}
    for element in mylist:
        if element in freq:
            freq[element] += 1
        else:
            freq[element] = 1
    return freq
    
print(frequency_count(mylist)) # output {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}"
"Rewrite the following code in a more efficient way, keeping the same logic:for i in range(len(lst)-1):
    for j in range(i+1, len(lst)):
        if lst[i]==lst[j]:
            return True","def find_duplicate(lst):
    seen = set()
    for elem in lst:
        if elem in seen:
            return True
        seen.add(elem)
    return False"
Generate a list of prime numbers,"def generate_primes(n):
    prime_list = []
    for num in range(2, n + 1): 
        if all(num % i != 0 for i in range(2, num)): # check if num is prime
            prime_list.append(num)
    return prime_list"
Determine whether a given number is an armstrong number or not153,"def is_armstrong_number(num):
  digits = [int(x) for x in str(num)]
  sum_ = 0
  for digit in digits:
    sum_ += pow(digit, len(digits))
  return num == sum_

print(is_armstrong_number(153))
# Output: True"
"You need to write a function to find the index of a value in an array[1, 2, 3, 4], 3","def find_index(arr, val):
    for index, elem in enumerate(arr):
        if val == elem:
            return index
    return -1

print(find_index([1, 2, 3, 4], 3))
# Output: 2"
"Output the following array in a column[1, 2, 3, 4]","for x in [1,2,3,4]:
    print(x)
    
# Output:
1
2
3
4"
"Sort a given array according to the given criteria[1, 20, 12, 15, 5], 'desc'","def sort_array(arr, order):
    if order == 'asc': 
        arr.sort() 
    else: 
        arr.sort(reverse=True) 
    return arr 

arr = [1, 20, 12, 15, 5] 
order = 'desc'

print(sort_array(arr, order))
# Output: [20, 15, 12, 5, 1]"
"Write a comment for the following codedef convert_to_timestamp(date): 
    # convert date to timestamp
    time_converted = time.strptime(date, ""%Y-%m-%d %H:%M:%S"")
    timestamp = time.mktime(time_converted)
    return timestamp","# This function takes a date in string format ""%Y-%m-%d %H:%M:%S"" and returns the corresponding timestamp in seconds."
"Edit the code to fix the following bug: The code doesn't return the expected output.def sum(numbers):
    x = 0
    for n in numbers:
        x += n
    return x","def sum(numbers):
    x = 0
    for n in numbers:
        x += n
    return int(x)"
"Create a graphical representation of the input data.Apple : 48 
Orange : 32 
Banana : 68","<img src=""output-graph.png"" width=""400"" height=""200"" />"
"Combine the input arrays into a single array.Array1 = [3, 4, 9, 6]
Array2 = [2, 6, 8, 7]","Array = [3, 4, 9, 6, 2, 6, 8, 7]"
Write a python code snippet to square the number 12.,"x = 12
y = x**2
print(y)"
Write a python code to check for a number being prime or not.num = 11,"# Initialize a boolean no_prime
no_prime = False

# Check all numbers lower than num
for i in range(2, num):
    if num % i == 0: 
        no_prime = True
        break 

# Print the appropriate output
if no_prime:
    print(num, 'is not prime')
else:
    print(num, 'is prime')"
"Write a Python code to find the number of vowels in a provided string.string = ""Hello, World!""","# Count the number of vowels in the string
num_vowels = 0
for char in string:
    if char in 'aeiouAEIOU':
        num_vowels += 1

print(""Number of vowels:"", num_vowels)"
"Create a class called ""IDgenerator"" that generates a list of unique random numbers between a given range.","import random

class IDGenerator:
    def __init__(self, min_val, max_val):
        self.min_val = min_val
        self.max_val = max_val
        self.ids = []

    def generate(self):
        rand_int = random.randint(self.min_val, self.max_val)
        while rand_int in self.ids:
            rand_int = random.randint(self.min_val, self.max_val)
        self.ids.append(rand_int)
        return rand_int"
How do I create a function that sums two integers in Python?,"def add_two_ints(a, b):
    return a + b"
Create a function for converting text to an all-uppercase string.,"function toUpperCase(str) {
  return str.toUpperCase();
}"
"Create an array of strings for the given string and return only the strings with a length equal to or greater than 5.""This is a string of words to test""","[""This"", ""string"", ""words"", ""test""]"
"Write a code snippet to find all combinations of 3 numbers in the array that sum to zero.[3, 5, -2, 1, -1, 0, 4]","[[3, -2, 1], [5, -1, -4], [5, 1, -4], [-2, 0, 2]]"
"Create a class in Python to represent a rectangle with the attributes width, height, and area.","class Rectangle:
  def __init__(self, width, height):
    self.width = width
    self.height = height
    self.area = width * height"
Create a machine learning classifier that can classify the sentiment of a text.Text: This product is really bad,"# import required libraries
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# Read the data into a Pandas DataFrame
data = pd.read_csv('data.csv')

# Convert the Labels (Positive/Negative) to numbers
data['Sentiment'] = [1 if sentiment == 'Positive' else 0 for sentiment in data['Sentiment']]

# Create the feature matrix
count_vectorizer = CountVectorizer()
X = count_vectorizer.fit_transform(data['Text'])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, data['Sentiment'], test_size=0.20, random_state=42)

# Train a Multinomial Naive Bayes Classifier
clf = MultinomialNB().fit(X_train, y_train)

# Use the Classifier to predict the label of the input text
prediction = clf.predict(count_vectorizer.transform([""This product is really bad""]))[0]

if prediction == 1:
    print(""Positive"")
else:
    print(""Negative"")"
"Use the NumPy package to multiply two matrices.Matrix1: [[1, 2], [3, 4]]
Matrix2: [[2, 3], [4, 5]]","import numpy as np
 
matrix1 = np.array([[1, 2], [3, 4]])
matrix2 = np.array([[2, 3], [4, 5]])
 
product = np.matmul(matrix1, matrix2)
print(product)

# Output
# array([[10, 13],
#        [22, 29]])"
"Find all substring of a string.String: ""abcdefg""","# function to find all the substrings of a given string  
def substr(string):  
    length = len(string) 
  
    # Weighted Index of the string  
    w_index = 0
      
    list_substr = [] 
  
    # Run a loop from 0 to n-1 
    while w_index < length: 
  
        # Run inner loop from w_index + 1 to n  
        s_index = w_index + 1
        while s_index < length + 1: 
            list_substr.append(string[w_index:s_index])
            s_index += 1
          
        w_index += 1
          
    return list_substr

# Test program 
s = ""abcdefg""
print(substr(s)) 

# Output
# ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']"
"Convert a string to its inverse form.String: ""Hello World!""","def string_inverse(string): 
    inverse_string = """"
    for i in range(len(string)-1, -1, -1):
        inverse_string += string[i]
    return inverse_string

# Test program
string = ""Hello World!""
inverse_string = string_inverse(string)

print(""Original String: %s"" % string)
print(""Inverse String: %s"" % inverse_string)

# Output
# Original String: Hello World!
# Inverse String: !dlroW olleH"
"Perform arithmetic operations on two numbers.Num1: 4
Num2: 2","# Add the numbers
sum = 4 + 2

# Subtract the numbers
difference = 4 - 2

# Multiplication
product = 4 * 2

# Exponent
power = 4**2

# Division
quotient = 4 / 2

# Integer Division
div = 4 // 2

# Remainder
remainder = 4 % 2

# Print the results
print(""Sum is %s\nDifference is %s\nProduct is %s\nPower is %s\nQuotient is %s\nDivision is %s\nRemainder is %s""
      %(str(sum),str(difference),str(product),str(power),str(quotient),str(div),str(remainder)))

# Output:
# Sum is 6
# Difference is 2
# Product is 8
# Power is 16
# Quotient is 2.0
# Division is 2
# Remainder is 0"
"Convert a string of numbers from one base to another.String: ""101111""
From Base: 2
To Base: 10","# Get the numerical value of the string in the from base
num = int(str(101111), 2)

# Convert the numerical value to the to base
converted_num = ""{0:b}"".format(num)

print(converted_num)

# Output
# 47"
Create a function that can detect if a word is a palindrome.Word: racecar,"def isPalindrome(string): 
    left = 0
    right = len(string) - 1
  
    while right >= left:
        if not string[left] == string[right]:
            return False
        left += 1
        right -= 1
    return True

# Test program
isPalindrome(""racecar"")

# Output
# True"
Write a regular expression that can detect emails.,"import re

# Regular expression
regex = r""(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)""

# Search for any emails that match the regular expression
matches = re.findall(regex, string)

# Print out the emails that were found
for match in matches:
    print(match)"
"Print the third element in this array.[1,2,3,4,5]",3
"Using regular expression, write a pattern to match a string of any length which ends with ""oo"".",.*oo$
"Generate a random number between 0 and 10 and store it in a variable called ""randNum"".",let randNum = Math.floor(Math.random() * 11);
"Create a function to retrieve the last three elements in an array and store them in a new array.let array = [1, 2, 3, 4, 5, 6, 7]","const lastThreeElements = (arr) => {
    const newArray = [];

    for (let i = arr.length - 3; i < arr.length; i++) {
        newArray.push(arr[i]);
    }

    return newArray;
};

let lastThree = lastThreeElements(array);
console.log(lastThree); // Output: [5, 6, 7]"
"Separate odd numbers from an array and store them in a different array.let array = [1,2,3,4,5,6,7,8,9]","const oddNumbers = (arr) => {
    const odd = [];

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 !== 0) {
            odd.push(arr[i]);
        }
    }

    return odd;
};

let odds = oddNumbers(array);
console.log(odds); // Output: [1, 3, 5, 7, 9]"
"Create an array of the words in a given string and sort them alphabetically.""Hello World How Are You""","const alphabetize = (str) => {
    const words = str.split(' ');
    words.sort();
    return words;
};

let sortedWords = alphabetize('Hello World How Are You');
console.log(sortedWords); // Output: ['Are', 'Hello', 'How', 'You', 'World']"
"Calculate the length of each word in a given string and store them in an array.""Hello World How Are You""","const wordLength = (str) => {
    const words = str.split(' ');
    const lengthArray = [];
    
    for (let i = 0; i < words.length; i++) {
        lengthArray.push(words[i].length);
    }
    
    return lengthArray;
};

let wordLengths = wordLength('Hello World How Are You');
console.log(wordLengths); // Output: [5, 5, 3, 3, 3]"
"Create a selector for a page element with the id ""main-heading"".",const mainHeading = document.getElementById('main-heading');
"Compare two strings and returns ""yes"" if they are equal, otherwise returns ""no"".""Apple"", ""apple""","const stringCompare = (str1, str2) => {
    if (str1.toLowerCase() === str2.toLowerCase()) {
        return 'yes';
    } else {
        return 'no';
    }
};

let compResult = stringCompare('Apple', 'apple');
console.log(compResult); // Output: 'yes'"
"Check whether or not an input is a palindrome using a regular expression.""race car""","const isPalindromeRegEx = (str) => {
    let regEx = /[\W_]/g;
    let lowStr = str.toLowerCase().replace(regEx, '');
    let reverseStr = lowStr.split('').reverse().join('');
    
    if (lowStr === reverseStr) {
        return true;
    } else {
        return false;
    }
};

let isPalindromeCheckRegEx = isPalindromeRegEx('race car');
console.log(isPalindromeCheckRegEx); // Output: true"
Create a validation function to check if the inputed string contains any numbers.,"import re

def validate_string(input_str):
    pattern = r""\d""
    if re.search(pattern, input_str):
        return False
    else:
        return True"
"Rewrite the code below to remove the repetition in the code using a loop.names = [""John"", ""Sam"", ""Paul""]

print(names[0])
print(names[1])
print(names[2])","names = [""John"", ""Sam"", ""Paul""]

for name in names:
    print(name)"
"How can the given list be sorted according to the age?data = [('John', 20), ('Vikram', 25), ('Bob', 21), ('David', 23)]","data.sort(key=lambda x: x[1]) 

# Output
[('John', 20), ('Bob', 21), ('David', 23), ('Vikram', 25)]"
Name one benefit of using a function in Python.,"One of the key benefits of using functions in Python is code reusability. Functions help reduce the code duplication and promote code readability by allowing us to store and reuse code in a single place. This makes it easier for us to debug and modify existing code. Furthermore, functions can help reduce the cognitive load and effort required to understand the code. As functions encapsulate related code blocks, we can focus on the logic contained within the function instead of worrying about unrelated code."
What could be a use case of a 'while' loop in Python?,"A while loop can be used to iterate over a sequence or perform a computation until a specific condition is met. For example, it can be used to generate a list of prime numbers, where it would check if the current number is a prime number by checking if its divisible by any of the already discovered primes before it."
Suggest a data structure in Python to store a list of countries and their capitals.,"A dictionary can be used to store a list of countries and their respective capitals. The key for each country should be the name of the country and the value should be its capital city. For example: 

dict = {
    'India': 'New Delhi',
    'China': 'Beijing', 
    'UK': 'London'
}"
Construct a Django model field for storing a user's age.,age = models.IntegerField()
What could be a use case of applying an algorithm such as the K-Means Clustering Algorithm?,"The K-Means Clustering Algorithm can be used to partition a data set into k distinct clusters of samples such that each sample belongs to the cluster with the nearest mean. It can be used for tasks such as data segmentation, anomaly detection, customer segmentation and image compression."
"Write a Python program to create a nested dictionary from two lists.l1 = ['a', 'b', 'c'] 
l2 = [1, 2, 3]","{'a': 1, 'b': 2, 'c': 3}"
"Create a random sequence of 100 numbers between 1 and 10, both inclusive, and print them on the screen.","2, 6, 7, 1, 5, 4, 4, 7, 1, 6, 8, 9, 4, 1, 3, 4, 5, 10, 3, 7, 1, 8, 10, 8, 8, 2, 10, 7, 5, 10, 8, 7, 5, 6, 1, 7, 8, 2, 8, 7, 5, 1, 3, 7, 10, 2, 10, 7, 5, 6, 9, 2, 4, 2, 1, 2, 5, 2, 4, 7, 6, 2, 4, 7, 1, 2, 7, 10, 4, 6, 7, 4, 1, 5, 7, 3, 8, 4, 7, 10, 6, 8, 2, 9, 2, 5, 2, 3, 6, 4, 9, 4, 2, 6, 7"
Implement a function that prints n asterisk characters in a row.,"def print_asterisks(n):
  for i in range(n): 
    print(""*"", end="""")
  print()"
Create a function that takes a string of brackets and checks if they are correctly matched or not.,"def check_brackets(bracket_string):
    """"""
    Function that checks if bracket string is correctly matched.
    """"""
    stack = []
    open_brackets = {'[', '{', '('}
    close_brackets = {']', '}', ')'}
    
    for bracket in bracket_string:
        if bracket in open_brackets:
            stack.append(bracket)
        elif bracket in close_brackets:
            if not stack or close_brackets[bracket] != stack.pop():
                return False
        
    return not stack"
"Write a function to delete redundant items from a list.[3, 2, 1, 3, 5, 6, 3, 2]","def delete_redundant_items(list_param):
    """"""
    Function to delete redundant items from a list
    """"""
    result_list = []
    for item in list_param:
        if item not in result_list:
            result_list.append(item)
    return result_list"
Construct a for loop which adds up numbers.,"nums = [3, 4, 5, 6]
total = 0

for num in nums:
    total += num 

print(total) # prints 18"
"Given a string of length N, provide an algorithm to determine if there is a substring in the string that repeats itself.","The algorithm starts by comparing the first N characters to the next N characters in the string. If the characters match, then the algorithm returns true. If the characters do not match, the algorithm moves to the next set of N characters and compares them. If no match is found, the algorithm returns false. The time complexity of this algorithm is O(N^2)."
Convert the following epoch time to a human-readable format.1599462722,"August 28, 2020, 9:48:42 PM UTC"
Suggest a data structure to store and retrieve a large amount of text data.,"A hash table is an ideal data structure for storing and retrieving large amounts of textual data, as it provides an efficient way to map and access data using a key-value pair. Hash tables use a hashing algorithm to efficiently map each key-value pair to a specific location within the table, making it much easier and faster to access any element."
How would you optimize a loop which runs over an array?,"Loop optimization techniques can be applied in order to improve the efficiency of a loop which runs over an array. The most common techniques include avoiding unnecessary computations, using pre-computation, using memoization to store intermediate results, using loop unrolling and different ways of loop indexing. In addition, using the right data structures can greatly improve the performance of a loop, as certain data structures are more efficient when dealing with large arrays."
"Rearrange the items in the array in ascending order.[3, 6, 5, 1, 4, 2]","[1, 2, 3, 4, 5, 6]"
"Sort the following list by the third element of the sublists in ascending order.[[1,2,3], [0,0,1], [7,8,9], [8,7,2]]","[[0,0,1], [1,2,3], [8,7,2], [7,8,9]]"
Convert a given time in 24 hour format to 12 hour format.19:45,7:45 PM
"Compute the big-O time complexity for this algorithm.def factorial(n):
    if n == 0: 
        return 1
    else: 
        return n*factorial(n-1)",The time complexity for this algorithm is O(n).
"Analyze the runtime complexity of this algorithm.def factorial2(n):
    fact = 1
    for i in range(1, n + 1):
        fact *= i
    return fact",The runtime complexity of this algorithm is O(n).
"Using the class group, create an instance of the StudentClass and print out its name attribute.class StudentClass:
    def __init__(self, name):
        self.name = name","# create an instance of the StudentClass
student_class = StudentClass(""Statistics"")

#print out its name attribute
print(student_class.name)  # Output: Statistics"
"Sort the data using heap sort.data = [12, 11, 15, 10, 9, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8]","def heap_sort(data):  
    # Create an empty Max Heap
    max_heap = MaxHeap() 
    # Add elements to the Max Heap
    for element in data:
        max_heap.insert(element)
    
    sorted_data = []
    while max_heap.count > 0:
        # Pop the Maximum element from the Max Heap
        maximum = max_heap.extract_max()
        sorted_data.append(maximum)
 
    return sorted_data

sorted_data = heap_sort(data)
print(sorted_data) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
Play a C-major chord using the scikit-learn MIDI library.,"# play a C-major chord using the scikit-learn MIDI library
from sklearn.datasets import load_sample_file
from sklearn.feature_extraction.io import MidiDispatcher

# use MidiDispatcher to create a new sequence
dispatcher = MidiDispatcher()
notes = [60, 64, 67]  # C-major notes
velocities = [127, 127, 127]  # maximum amplitude
dispatcher.add_chords([(0, notes, velocities)])

# play the sequence
player = MidiPlayer(dispatcher.io)
player.play()"
"Sum the numbers in the given array using reduce.numbers = [1, 2, 3, 4, 5]","# Sum the numbers in the given array using reduce
from functools import reduce

sum = reduce(lambda x, y: x + y, numbers)

print(sum) # Output: 15"
Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.x = 12,"# Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.
from scipy.stats import norm

prob = norm.pdf(x, 10, 2)

print(prob) # Output: 0.17603266338214976"
"Group the given list of names into 3 different categories based on the first letter of the name.names = [""Adam"", ""Bill"", ""Brian"", ""Clarence"", ""Doug"", ""Emily"", ""Fred"", ""George"", ""Henry""]","# Group the given list of names into 3 different categories based on the first letter of the name

group1 = [name for name in names if name[0] in ['A', 'B', 'C']]
group2 = [name for name in names if name[0] in ['D', 'E', 'F']]
group3 = [name for name in names if name[0] in ['G', 'H']]

print(group1) # Output: ['Adam', 'Bill', 'Brian', 'Clarence']
print(group2) # Output: ['Doug', 'Emily', 'Fred'] 
print(group3) # Output: ['George', 'Henry']"
"Extract the list of urls using the beautifulsoup library.html_text = '''<html>
  <body>
    <h1>List Of URLs</h1>
    <p>Here is a list of URLs:</p>
    <ul>
      <li><a href=""http://example.com"">Example</a></li>
      <li><a href=""http://example2.com"">Example2</a></li>
    </ul>
  </body>
</html>'''","# Extract the list of urls using the beautifulsoup library
from bs4 import BeautifulSoup

soup = BeautifulSoup(html_text, 'html.parser')
urls = [link.get('href') for link in soup.find_all('a')]

print(urls) # Output: ['http://example.com', 'http://example2.com']"
Evaluate the expression 200 + 400 / 2.,"# Evaluate the expression 200 + 400 / 2

result = 200 + 400 / 2

print(result) # Output: 300.0"
"Change the code using decorator to log how long the function runs.def sum_function(a, b):
    return a + b","import time

def log_time(func):
    def inner(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()

        print(f'Function {func.__name__} took {end-start} sec to run')

        return result
    return inner

@log_time
def sum_function(a, b):
    return a + b"
"Remove all the elements in an array using filter function.items = [1, 2, 3, 4, 5]","# Remove all the elements in an array using filter function
items = [1, 2, 3, 4, 5]

filterend_items = list(filter(lambda x: False, items))

print(filterend_items) # Output: []"
"Using a for loop, calculate the distance between one point to every other point in the given list.points = [
    (10, 20),
    (12, 22),
    (14, 24)
]","# Using a for loop, calculate the distance between one point to every other point in the given list
from math import sqrt

distances = []
for i in range(len(points)):
    for j in range(len(points)):
        if i != j:
            x1, y1 = points[i]
            x2, y2 = points[j]
            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)
            distances.append(distance)

print(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]"
"Find all the even numbers in the given range.min_num = 4
max_num = 17","# Find all the even numbers in the given range
even_nums = [num for num in range(min_num, max_num + 1) if num % 2 == 0]

print(even_nums) # Output: [4, 6, 8, 10, 12, 14, 16]"
"Create a function to select the kth smallest item from a list.lst = [3, 6, 8, 2, 10, 11]","# Create a function to select the kth smallest item from a list
def kth_smallest(lst, k):
    sorted_lst = sorted(lst)

    return sorted_lst[k - 1]

# test the function
item = kth_smallest(lst, 4)
print(item) # Output: 8"
Write pseudocode for the merge sort algorithm.,"Mergesort(A):
  if A has 1 item : 
      return A
  else
      divide A into two parts (left and right) of roughly equal size
      B = Mergesort(left)
      C = Mergesort(right)
      D = Merge(B,C)
      return D

Merge(B,C):
  create an empty list D
  while B and C are not empty:
      if B[0] ≤ C[0]:
          add the first item of B to the end of D
          remove the first item of B
      else:
          add the first item of C to the end of D
          remove the first item of C
  while B is not empty:
      add the first item of B to the end of D
      remove the first item of B
  while C is not empty:
      add the first item of C to the end of D
      remove the first item of C
  return D"
"Identify the output of the following code snippet written in Scala.var number = 42 
val message = if (number > 10) ""This number is greater than 10"" else ""This number is not greater than 10""",This number is greater than 10
"Create a function in Python that takes two parameters, x and y, and prints out all numbers between x and y.","def display_numbers(x, y):
  for i in range(x,y+1):
    print(i)"
"Given an array of integers and an integer target, find all unique combinations of elements from the array that sum up to the target.arr = [1,2,3,4], target = 7","List<List<Integer>> result = new ArrayList<>();
combinations(arr, target, 0, new ArrayList<Integer>(), result);

private static void combinations(int[] arr, int target, int start_index, ArrayList<Integer> curr, List<List<Integer>> result) {
    if (target < 0 || start_index >= arr.length)
        return;

    if (target == 0) {
        result.add(new ArrayList<>(curr));
        return;
    }

    for (int i = start_index; i < arr.length; i++) {
        curr.add(arr[i]);
        combinations(arr, target - arr[i], i+1, curr, result);
        curr.remove(curr.size() - 1);
    }
}"
Construct a MongoDB query to sort all documents based on the price in the collection.,"db.collection.find().sort({""price"":1})"
Create a function in R that returns the common elements in two given vectors.,"CommonElements <- function(x, y) {
  intersection(x, y)
}"
What is a multithreaded application and how does it work?,"A multithreaded application is an application that creates multiple concurrent threads to execute tasks in parallel. These threads can communicate with each other and work together to accomplish a task faster than if they were executed sequentially. A multithreaded application makes use of modern computer hardware which has multiple core processors, each with its own thread. The threads then share access to a pool of memory and hardware resources which can be accessed and manipulated simultaneously. By working together, the threads can work faster and complete the task before any single thread working alone."
Write a Python program to get the volume of a sphere with a given radius.,"import math

def sphere_volume(radius):
    return (4*math.pi*radius*radius*radius)/3"
"Design an algorithm to retrieve the longest word from an array of strings.[‘Hello’, ‘World’, ‘This’, ‘is’, ‘a’, ‘code’]","def get_longest_word(strings):
    longest_word = ''
    for s in strings:
        if len(s) > len(longest_word):
            longest_word = s
    return longest_word"
"Construct a code to print elements of a given list in reverse order.[1, 2, 3, 4, 5]","def reverse_list(numbers):
    return numbers[::-1]"
Write a statement that adds an element to a linked list.,"newNode = Node(data)
newNode.next = head
head = newNode"
Reverse an input string.,"def reverse_string(s):
    return s[::-1]"
"Edit the following code for optimal performance.def sum_nums():
    result = 0 
    for i in range(10):
        result += i
    return result","def sum_nums():
    result = 0
    n = 10
    while n > 0:
        result += (n - 1)
        n -= 1
    return result"
"Compute the sum of two give two-dimensional arrays.array1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
array2 = [[1, 3, 5], [2, 4, 6], [7, 8, 9]]","def matrix_sum(a, b):
    result = [[0 for d in range(len(a))] for d in range(len(a[0]))]
    for i in range(len(a)):
        for j in range(len(a[0])):
            result[i][j] = a[i][j] + b[i][j]
    return result"
Are ternary operators fast in Python?,"Ternary operators are often faster than if/else statements in Python, as they can reduce the amount of code and conditionals needed. However, there are some cases where an if/else statement may be faster, such as when there are multiple conditions that need to be checked."
Format a string by adding the required punctuations in order to make it a valid sentencethis is the string,This is the string.
"From a given string, count the number of unique characters","def count_unique_chars(s):
    chars = set()
    for char in s:
        chars.add(char)
    return len(chars)"
Create a function that identifies the type of a value,"def identify_value_type(val):
    if type(val) is int:
        return 'int'
    elif type(val) is float:
        return 'float'
    elif type(val) is str:
        return 'str'
    elif type(val) is list:
        return 'list'
    elif type(val) is dict:
        return 'dict'"
"Create an array of objects with the following properties: firstname, lastname, age, gender.[
  { firstname: 'John', lastname: 'Doe', age: 25, gender: 'Male' },
  { firstname: 'Jane', lastname: 'Doe', age: 28, gender: 'Female' }
]","[
  { firstname: 'John', lastname: 'Doe', age: 25, gender: 'Male' },
  { firstname: 'Jane', lastname: 'Doe', age: 28, gender: 'Female' }
]"
Create a class in Python named 'Car' and implement a method that shows the current speed of the car.,"class Car():
    def __init__(self, speed):
        self.speed = speed

    def show_speed(self):
        print(""The current speed is:"", self.speed)"
"Create an Angular component that displays a posts feed with the given input data.[
  {
    user: 'John',
    message: 'Hello world!'
  },
  {
    user: 'Jane',
    message: 'Hi everyone!'
  }
]","<div *ngFor=""let post of posts"">
  <h1>{{ post.user }}</h1>
  <p>{{ post.message }}</p>
</div>"
Create a UUID in Python.,"import uuid

print(uuid.uuid4())"
"Design a python class for a dog to print its name and age when given.Ginger, 3","class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age

dog = Dog('Ginger', 3)
print(dog.get_name())
print(dog.get_age())"
"Edit the following function to allow editing of existing key-value pairs in the object.let myObj = {
    name: 'Gabe', 
    age: 33
}

function addPair(obj, key, value) {
    obj[key] = value;
}","let myObj = {
    name: 'Gabe', 
    age: 33
}

function addPair(obj, key, value) {
    if(obj.hasOwnProperty(key)){
        obj[key] = value;
    } else {
        obj[key] = value;
    }
}"
Design an algorithm to generate N random numbers from 1 to 1000.N=5,"Let N be the number of random numbers to create.

Initialize an array randomNumbers to empty

For i from 1 to N:
  Generate a random number from 1 to 1000
  Add this random number to randomNumbers
  
Print randomNumbers"
Complete the following code to print a 2D array passed as parameter.def print2Dlist (list) :,"def print2Dlist (list) :
	for row in list:
		for element in row:
			print (element, end="" "") 
		print ()"
Complete the following code to find the longest word in the given string.def longest_word(sentence):,"def longest_word(sentence):
    words = sentence.split()
    longest_word = ''
    max_length = 0
    for word in words:
        if len(word) > max_length:
            max_length = len(word)
            longest_word = word
    return longest_word"
"Create a function to remove all the characters in a string except a-z, A-Z and 0-9.","def remove_non_alphanumeric(string):
    filtered_string = """"
    for char in string:
        if char.isalnum():
            filtered_string += char
    return filtered_string"
"Create a function to filter out any strings containing the word ""the"" from a list of strings.","def filter_the(string_list):
    filtered_list = []
    for string in string_list:
        if ""the"" not in string:
            filtered_list.append(string)
    return filtered_list"
Compute the total number of words in the given sentence.This is a test sentence,"def count_words(sentence):
    words = sentence.split()
    return len(words)"
Write a function to reverse the elements of a list without creating a new list.,"def reverse_inplace(numbers):
    start = 0
    end = len(numbers) - 1
    while start < end:
        numbers[start], numbers[end] = numbers[end], numbers[start]
        start += 1
        end -= 1"
"Create a program that takes in a list of numbers and returns the product of all the elements in the list.[2, 4, 10, 5]","def product(nums):
  total = 1
  for num in nums:
    total *= num
  return total"
Give a few examples of when to use a Stack data structure.,"A stack data structure can be used for a variety of tasks, such as for traversal of a recursive object, storing and retrieving data from a history buffer, expression evaluation, and undo and redo operations. Another common use case is storage of a continuous stream of data, such as a rolling list of recent purchases."
"Write a test case for a function that adds two numbers.Function: addTwoNumbers (a, b)","@Test
public void testAddTwoNumbers(){
    int a = 1;
    int b = 2;
    assertEquals(3, addTwoNumbers(a, b));
}"
Create an Angular Directive for a text box that alerts when its contents change.,"import { Directive, ElementRef, HostListener } from '@angular/core';

@Directive({
 selector: '[appNotifyOnChange]'
})
export class NotifyOnChangeDirective {
 constructor(private el: ElementRef) { }

@HostListener('input', ['$event'])
onChange(event) {
 alert('Value changed to: ' + event.target.value);
}
}"
Name a few use cases of Convolutional Neural Networks.,"Convolutional Neural Networks are widely used in domains such as computer vision, natural language processing, pattern recognition, time series analysis, audio processing, object recognition and classification, and for other tasks such as image segmentation, automated image captioning, image deblurring, object detection and tracking."
"How can you create a function in MATLAB that adds two vectors?Vectors: A=[1,2,3] and B=[4,5,6]","function [C]=addVectors(A,B)
    C=A+B;
end"
Describe the Heap Sort algorithm.,"Heap Sort is a comparison-based sorting algorithm in which the data is organized into a heap data structure. The heap is then sorted increasingly by repeatedly removing the root element, swapping it with the last element in the heap, and heapifying the remaining elements. It has an average complexity of O(n log n)."
"Create an Angular component to display an ""about us"" page.","@Component({
 selector: ""app-about-us"",
 templateUrl: ""./about-us.component.html""
})
export class AboutUsComponent{

}"
Write an algorithm to check whether a given word is palindrome or not.,"def is_palindrome(str):
    # reverse the string 
    rev_str = str[::-1] 
  
    # if string is equal then return true 
    if rev_str == str: 
        return True
    return False"
"Calculate the number of anagrams present in a given string.string = ""listen""","def calculateAnagrams(string): 
   
    # Create a list of all permutations 
    all_permutations = [''.join(i) for i in permutations(string)] 
   
    # Return the count of all permutations 
    return len(all_permutations) 
  
# Driver code 
print(calculateAnagrams('listen'))"
"For a given array of integers, write a function to find the mean.arr = [1, 2, 3, 4, 5]","def calculate_mean(arr):
    return sum(arr) / len(arr)
    
# Driver Code 
if __name__ == '__main__': 
    arr = [1, 2, 3, 4, 5]
    mean = calculate_mean(arr)
    print(""Mean for given array is:"", mean)"
"Create a function which takes a string and invokes all the print statements within the string.string = ""Hello, World!
Hello, Python!""","def invoke_print_statements(string):
    exec(string) 
    
# Driver Code 
if __name__ == '__main__': 
    string = ""print('Hello, World!')\nprint('Hello, Python!')""
    invoke_print_statements(string)"
Write code to return a list of prime numbers in the given range.Start: 10. End: 15,"def get_prime_numbers(start, end):
    prime_numbers = []
    for num in range(start, end + 1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                prime_numbers.append(num)
    return prime_numbers
    
# print list of prime numbers
print(get_prime_numbers(10, 15))  
# Output: [11, 13, 15]"
Write code to convert a given hexadecimal string to a binary string.Hexadecimal string: 7468,"def hex_to_bin(hexadecimal_str):
    return bin(int(hexadecimal_str, 16))[2:] # [2:] removes 0b from the start"
Create a function to print out a FizzBuzz pattern for a given number range.Number range: 5-20,"def fizzbuzz_pattern(n):
    for num in range(n, n+16):
        if num % 3 == 0 and num % 5 == 0:
            print(""FizzBuzz"")
        elif num % 3 == 0:
            print(""Fizz"")
        elif num % 5 == 0:
            print(""Buzz"")
        else:
            print(num)"
"Write a function to generate the next line of Pascal's Triangle given the parent line.Parent line: [1, 2, 1]","def next_pascals_triangle(parent):
    next_line = [1]
    for i in range(len(parent)-1):
        next_line.append(parent[i] + parent[i+1])
    next_line.append(1)
    return next_line"
Write code to parse a given IP address into its octets.IP address: 10.23.6.17,"def parse_ip_address(ip):
    octets = ip.split(""."")
    return octets"
Write a function to encode a given string using ROT13 cipher.String: Hello world,"def rot13(string):
    encoded = """"
    for char in string:
        if char.isalpha():
            ascii_val = ord(char)
            ascii_val += 13
            if ascii_val > ord('z'):
                ascii_val -= 26
            encoded += chr(ascii_val)
        else:
            encoded += char
    return encoded"
Code a program to display the prime factors of a number.30,"def find_prime_factors(n):
 prime_factors = []
 for i in range(2, n + 1):
 if n % i == 0:
 if is_prime(i):
 prime_factors.append(i)
 return prime_factors

def is_prime(n):
 if n <= 1:
 return False
 for i in range(2, int(n**0.5) + 1):
 if n % i == 0:
 return False
 return True"
"Develop a code to check if a given array is sorted or not.[1, 2, 4, 3]","def is_sorted(array):
 for i in range(len(array)-1):
 if array[i] > array[i+1]:
 return False
 return True"
Design a program to find the fibonacci number at the given position in the sequence.,"def fibonacci(n):
 if n == 0 or n == 1:
 return n
 else:
 return fibonacci(n-1) + fibonacci(n-2)"
"Code a program to delete a given element from an array.[1, 3, 5, 7], {element: 3}","def delete_element(array, element):
 element_index = array.index(element)
 del array[element_index]
 return array"
Find the most frequent word in the following paragraph.The quick brown fox jumps over the lazy dog.,the
"Split the sentence into individual words using Python.sentence = ""This sentence needs to be split.""","words = sentence.split(' ')
print(words)
# Output: ['This', 'sentence', 'needs', 'to', 'be', 'split.']"
"Based on the following list, create a dictionary of each name and their corresponding birth date.names = [""John"", ""Mary"", ""James"", ""Susan""]
birth_dates = [""1992-12-24"", ""1979-05-17"", ""1995-08-15"", ""1985-04-10""]","name_birthdate_dict = dict(zip(names, birth_dates))
print(name_birthdate_dict)
# Output: {'John': '1992-12-24', 'Mary': '1979-05-17', 'James': '1995-08-15', 'Susan': '1985-04-10'}"
"Using the given list of numbers, find the sum of the numbers.numbers = [1, 2, 3, 4, 5]","total = 0
for num in numbers:
    total += num
print('The sum of the numbers is:', total)
# Output: The sum of the numbers is: 15"
"Create a while loop that prints each element in the list from the end.numbers = [1, 2, 3, 4, 5]","i = len(numbers) 
while i > 0: 
    print(numbers[i-1]) 
    i -= 1"
"Suggest a way to identify and remove duplicate elements from the list.numbers = [2, 3, 2, 5, 8, 3, 10]","# Method 1 - Using Set
numbers_set = set(numbers)
numbers_set = list(numbers_set)
print(numbers_set)
# Output: [2, 3, 5, 8, 10]

# Method 2 - Using Loop
no_duplicate = [] 
for num in numbers: 
    if num not in no_duplicate: 
        no_duplicate.append(num) 
print(no_duplicate)
# Output: [2, 3, 5, 8, 10]"
"Suggest a way to count the number of occurrences of each element in the list.numbers = [2, 3, 2, 5, 8, 3, 10]","# Method 1 - Using Dictionary
number_dict = dict()
for num in numbers:
    if num in number_dict:
        number_dict[num] += 1
    else:
        number_dict[num] = 1
print(number_dict)
# Output: {2: 2, 3: 2, 5: 1, 8: 1, 10: 1}

# Method 2 - Using Counter
from collections import Counter
number_count = Counter(numbers)
print(number_count)
# Output: Counter({2: 2, 3: 2, 5: 1, 8: 1, 10: 1})"
"Create a function that sorts a list of dictionaries using the values.animals = [{""name"": ""Dog"", ""age"": 5}, {""name"": ""Cat"", ""age"": 3}, 
           {""name"": ""Fish"", ""age"": 1}, {""name"": ""Deer"", ""age"": 8}]","def sort_dict_list(animals):
    sorted_animals = sorted(animals, key=lambda k: k['age'])  
    return sorted_animals

result = sort_dict_list(animals)
print(result)
# Output: [{'name': 'Fish', 'age': 1}, {'name': 'Cat', 'age': 3}, {'name': 'Dog', 'age': 5}, {'name': 'Deer', 'age': 8}]"
"Return how many characters are in the following string.word = ""Hello""","length = len(word)
print(length)
# Output: 5"
Convert this expression in to postfix notation.A + B * C,ABC*+
"Calculate the sum of these two numbers in assembly language.x = 27, y = 11","mov ax, 27    ; put x = 27 in ax
mov bx, 11    ; put y = 11 in bx
add ax, bx    ; add ax and bx, sum is stored in ax
; ax = 38"
"Edit this method to return an array of palindromes.public static String[] findPalindromes(String[] words) {
    ArrayList<String> result = new ArrayList<>();
    for (String word : words) {
        if (word.length() >= 2) {
            result.add(word);
        }
    }
    return result.toArray(new String[result.size()]);
}","public static String[] findPalindromes(String[] words) {
    ArrayList<String> result = new ArrayList<>();
    for (String word : words) {
        if (word.length() >= 2 && isPalindrome(word)) {
            result.add(word);
        }
    }
    return result.toArray(new String[result.size()]);
}  

public static boolean isPalindrome(String str) {
    int left = 0;
    int right = str.length()-1;
    
     while (left < right) { 
        if (str.charAt(left) != str.charAt(right)) 
            return false; 
  
        left++; 
        right--; 
    } 
  
    return true; 
}"
"Generate a new class from the given prototype.class Prototype {
	public String name;
	public int age;
	public String gender;
	
	public Prototype(String name, int age, String gender) {
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
}","class Person extends Prototype {
	public String address;
	public String phone;
	
	public Person(String name, int age, String gender, String address, String phone) {
		super(name, age, gender);
		this.address = address;
		this.phone = phone;
	}
}"
"Use the function ""randint()"" to generate a random number between 1 and 10 in Python.","from random import randint
random_num = randint(1,10)
print(random_num)"
Develop a program to encode and decode a given string.Input a string s to be encoded.,"def encode(s): 
    encoded_str = """" 
    for i in s: 
        encoded_str += str(ord(i)) 
  
    return encoded_str 
  
def decode(s): 
    decoded_str = """" 
    for i in range(0, len(s), 2): 
        decoded_str += chr(int(s[i:i+2])) 
  
    return decoded_str"
"Create a neural network in Python using the given input and output.Input a set of 3 input values (x1, x2, x3) and two output values (y1, y2).","import numpy as np 
import tensorflow as tf

# Create the model 
model = tf.keras.models.Sequential([
  tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,))
]) 

# Compile the model 
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) 

# Create the input and output data 
input_data = np.array([[x1, x2, x3]])
output_data = np.array([[y1, y2]])

# Train the model 
model.fit(input_data, output_data, epochs=100)"
"Design an algorithm in Python to detect anomalies in the given data.Input a dataset containing two columns, temperature and pressure.","def detect_anomaly(data): 
    # Step 1: Calculate mean 
    mean_1 = np.mean(data['temperature']) 
    mean_2 = np.mean(data['pressure']) 
  
    # Step 2: Calculate the standard deviation 
    sd_1 = np.std(data['temperature']) 
    sd_2 = np.std(data['pressure']) 
  
    # Step 3: Calculate the threshold
    cutoff = sd_1 * 3
  
    # Step 4: Apply threshold and mark anomalies 
    lower_limit_temperature = mean_1 - cutoff 
    upper_limit_temperature = mean_1 + cutoff 
  
    lower_limit_pressure = mean_2 - cutoff 
    upper_limit_pressure = mean_2 + cutoff 
  
    # Mark the anomalies by setting the value as 1 
    data['anomaly'] = 0 
    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  
    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  
    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  
    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  
  
    # Return the dataframe 
    return data"
"Tell us the outputs of the following code block.a = 5
b = 10

if a > b:
    print(""a is greater than b"")
elif a == b:
    print(""a is equal to b"")
else:
    print('a is lesser than b')",a is lesser than b
"Determine whether the following statement returns true or false.[1, 2, 3] > [4, 5, 6]",False
Write a regular expression pattern to match a string starting with 'hello' and with two numbers after it.,^hello[0-9]{2}$
"Rewrite the following function to optimize its performance.def indexString(listStr, s):
    output = []
    for i in listStr:
        if s in i:
            output.append(i)
    return output","def indexString(listStr, s):
    output = []
    for i in listStr:
        if i.find(s) != -1 :
            output.append(i)
    return output"
"Generate a string array of length 10, containing only alphabets in lower case containing 10 random characters.","import random
def gen_string_arr(n):
    output = []
    for i in range(n):
        output.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10)))
    return output"
Write a factorial program without using the inbuilt factorial function in Python.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
Create a software program that encrypts a text message.,"def encrypt(msg):
    change = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 's': '5'}
    encrypted = """"
    for c in msg:
        if c in change:
            encrypted += change[c]
        else:
            encrypted += c
    return encrypted"
Generate an array of length n with random numbers in the range 0 - 100,"import random
def gen_num_arr(n):
    output = []
    for i in range(n):
        output.append(random.randint(0, 101))
    return output"
"Given a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum.[2, 7, 5, 1, 8]","def find_target_sum(nums, target_sum):
    for i in range(0, len(nums) - 2):
        for j in range(i+1, len(nums) - 1):
            for k in range(j+1, len(nums)):
                if nums[i] + nums[j] + nums[k] == target_sum:
                    return True
    return False"
Write a function to start a timer with the specified duration.,"def start_timer(duration):
    start_time = time.time()
    end_time = start_time + duration
    while time.time() < end_time:
        time.sleep(1)
    print(""Timer finished!"")"
How would you write a program to determine the greatest common divisor (GCD) of two non-negative integers?,"def gcd(a, b):
    # Base case
    if a == 0:
        return b
    if b == 0:
        return a

    # Calculate the greatest common divisor using Euclid's algorithm
    while b != 0:
        a %= b
        a, b = b, a
        
    return a"
How would you sort an array of integers using Merge Sort algorithm?,"def merge_sort(arr): 
    # Base case: if the list has 0 or 1 elements it is already sorted 
    if len(arr) > 1: 
        mid = len(arr)//2 
        # Split the array 
        left = arr[:mid]  
        right = arr[mid:]  
  
        # Recursively call merge_sort on left and right half
        merge_sort(left) 
        merge_sort(right) 
  
        # Set up variables to help track merges
        i = 0 # left array index 
        j = 0 # right array index 
        k = 0 # result array index 
  
        # Merge the two halves 
        while i < len(left) and j < len(right): 
            if left[i] < right[j]: 
                arr[k] = left[i] 
                i+=1 
            else: 
                arr[k] = right[j] 
                j+=1 
            k+=1
          
        # Copy the rest of the left half and right half 
        while i < len(left): 
            arr[k] = left[i] 
            i+=1
            k+=1
          
        while j < len(right): 
            arr[k] = right[j] 
            j+=1
            k+=1"
Generate a list of 10 random numbers between 0 and 500 in Python.,"import random
numbers = [random.randint(0,500) for i in range(10)]
print(numbers)"
"Generate a hash value for the given string using an MD5 algorithm.string = ""Hello, World!""","using System;
using System.Security.Cryptography;

MD5 md5 = MD5.Create();
byte[] hashValue = md5.ComputeHash(Encoding.UTF8.GetBytes(string));
string hashString = BitConverter.ToString(hashValue).Replace(""-"", """");
Console.WriteLine(hashString);

// Output: 65a8e27d8879283831b664bd8b7f0ad4"
"Create a Python function to remove duplicates in a given list.list_of_numbers = [2, 3, 3, 5, 5]","def remove_duplicates(list_of_numbers):
  result = []
  for number in list_of_numbers:
    if number not in result:
      result.append(number)
  return result"
What is the value of the expression '2 ** 4' ?,16
Print the results of the following arithmetic expression using python.6/3+3*2,15.0
"Write a lambda expression to select all records from a list of dictionaries with the name ""John"".","selected_records = list(filter(lambda x:x['name']=='John', records))"
"Remove duplicates from the list.list = [1,2,3,2,5,6,5]",new_list = list(set(list))
Write a predicate to check for valid email syntax.,"def is_valid_email(string):
    return re.match(""[^@]+@[^@]+\.[^@]+"", string) != None"
"Edit the code to extract the data from the given dictionary.data = {
'name': 'John',
'age': 23,
'address': {
  'street': '123 Main Street',
  'city': 'Los Angeles'
  }
}","name = data['name']
age = data['age']
street = data['address']['street']
city = data['address']['city']"
"Modify the code to create an AI model to classify the given dataset.dataset = {
    'x1': ['apple', 'banana'],
    'x2': ['red', 'yellow'],
    'label': ['fruit', 'fruit']
}","class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.fc1 = nn.Linear(2, 32)
        self.fc2 = nn.Linear(32, 32)
        self.fc3 = nn.Linear(32, 2)

    def forward(self, x):
        x = x.view(-1, 2)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        x = F.softmax(x, dim=-1)
        return x

model = Model()
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.005)"
"Generate Python code to retrieve a list of tuples in the given string.String: ""[('test1',1), ('test2',2)]""","list_items = [item.replace(""'"", """").replace(""("", """").replace("")"", """").split("","") for item in s[1:-1].split(""), ("")]
list_of_tuples = [(item[0], int(item[1])) for item in list_items]"
"How can we optimize the performance of the given code?myList = [1, 2, 3]
for item in myList:
    print(item)","Use list comprehension to reduce the amount of code used, such as:

print([item for item in myList])"
"Find the total cost of the given items.items: [('apple', 2.5), ('mango', 3.5)}","total_cost = 0

for item in items:
    price = item[1]
    total_cost += price
    
print(total_cost)"
"Create a class to represent the given data structure.Data Structure:
Student: 
  Id: Integer
  Name: String
  Age: Integer","class Student:
    def __init__(self, id, name, age):
        self.id = id
        self.name = name
        self.age = age"
"Generate Python code to extract only the keys from the given dictionary.d = {'name': 'John', 'age': 24, 'city': 'New York'}",keys = list(d.keys())
"Using the below Python code, Write a code snippet to index all the values of an array.arr = [3, 8, 2, 5, 1]","for i, val in enumerate(arr):
    print(f""arr[{i}] = {val}"")"
"Given two strings, write a function to check if one string is a rotation of the other.str1 = ""beans""
str2 = ""esban""","def is_rotation(str1, str2):
    if len(str1) != len(str2):
        return False
        
    temp = str1 + str1
    return str2 in temp"
"Write a code snippet to sum up the length of each individual element in an array.arr = ['apple', 'banana', 'cherry']","const sum = arr.reduce((acc, curr) => acc + curr.length, 0)"
"Given the following code, write a function to find the sum of all the numbers between 0 and n.n = 5","function findSum(n){
    let sum = 0;
    for(let i = 0; i <= n; i++){
        sum += i;
    }
    return sum;
}"
"Given the below array, find all the elements that are greater than 6.arr = [3, 5, 8, 1, 9, 6]","let result = arr.filter(el => el > 6); 
// result is [8, 9]"
"Write a code snippet to check if the following text contains the word 'hello'.text = ""This is a test message""","if (text.includes(""hello"")) {
  console.log(""The text contains the word 'hello'"");
} else {
  console.log(""The text does not contain the word 'hello'"");
}"
"Answer the following true/false question""Every program executes instructions sequentially""",true
"Edit the following code to sort the list of numbers in ascending orderlet numbers = [3, 1, 2, 5, 4]","let numbers = [3, 1, 2, 5, 4]

numbers.sort(by: {$0 < $1})"
Create an API using Python which returns the number of words in a given string.,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route(""/get_words_count"", methods=[""GET""])
def get_words_count():
    sentence = request.args.get(""sentence"")
    words = sentence.split("" "")
    return jsonify({""words_count"": len(words)})

if __name__ == ""__main__"":
    app.run()"
Construct an R script that sorts given numbers in ascending order.,"nums <- c(3, 8, 5, 7, 2, 6)
sorted_nums <- sort(nums)
print(sorted_nums)"
Utilize Python to implement an algorithm which finds the largest number in an array.,"def largestNumber(arr): 
    max = arr[0] 
    for i in range(1, len(arr)): 
        if arr[i] > max: 
            max = arr[i] 
    return max"
"Create a new array called 'arr2' by combining the elements of two existing arrays 'arr1' and 'arr2'. Both arrays should be of the same size.arr1 = [1, 2, 3]
arr2 = [4, 5, 6]","arr2 = []

for i in range(len(arr1)):
    arr2.append(arr1[i] + arr2[i])

print(arr2)"
Why should you use functions in programming?,"Using functions in programming helps to break down complex tasks into more manageable pieces, which makes code easier to read and maintain. Functions also allow for the reuse of code, which can help to reduce overall development time and resources. Additionally, functions improve code organization and enable functions to be tested independently, making debugging easier."
What are the advantages of using MapReduce over Hadoop?,"The advantages of using MapReduce over Hadoop include: 

1. Charges less money due to its parallel processing capabilities. 
2. Can handle much larger data sets than Hadoop since it uses distributed computing paradigm. 
3. Increases in scalability and performance due to its ability to horizontally scale computing nodes. 
4. MapReduce jobs are easy to use and can handle various types of data. 
5. Allows for faster development of data processing applications."
What is the difference between an interface and an abstract class?,"The main difference between an interface and an abstract class is that an interface can only contain abstract methods while an abstract class can include both abstract and non-abstract methods. Additionally, an interface can be implemented by multiple classes while a class can only extend a single abstract class. Interfaces are also limited to public methods while an abstract class can contain any type of access modifiers."
"In Python, how can we calculate the mean of a numerical data set?","def mean(data):
    return sum(data) / len(data)"
Write a query to find users with a given age in MongoDB.given_age = 20,db.users.find({age: given_age})
"How can we use the list comprehension method in Python to reverse a given list of string?list_of_strings = [""cat"", ""dog"", ""rabbit""]",reversed_list_of_strings = [string[::-1] for string in list_of_strings]
How to create an empty data frame in Pandas?,"import pandas as pd

df = pd.DataFrame()"
"Given a list of integers, find the numbers which are greatest than the given number X.List: [-3, 0, 3, 5, 9], X = 4","function greaterThan(list, x) 
{ 
    let result = []; 
      
    for (let i=0; i<list.length; i++) 
        if (list[i] > x) 
            result.push(list[i]); 
              
    return result; 
}"
"Implement a function in Python to find the maximum number from a list of integers.[3, 5, 1, 6, 10]","def findMax(list): 
    max = list[0] 
  
    for i in list: 
        if i > max: 
            max = i 
  
    return max"
"Rewrite the following Python program to sort the numbers in an array in ascending order.list = [5, 1, 0, 4, 7]","def sort(list): 
    for i in range(len(list)-1): 
        for j in range(0, len(list)-i-1): 
            if list[j] > list[j+1] : 
                list[j], list[j+1] = list[j+1], list[j] 
                
list = [5, 1, 0, 4, 7]
sort(list) 

print (""Sorted list is:"") 
print(list)"
Develop a logic to generate Fibonacci Series till n terms.n = 6,"def fibonacci(n):
    a = 0
    b = 1
    print(a)
    print(b)
    for i in range (2,n):
        c = a+b
        a = b
        b = c
        print(c)
fibonacci(6)"
Create a program to tokenize a given string into a list of strings.'Hello! My name is Bob.',"import nltk

def tokenize(string):
    tokens = nltk.word_tokenize(string)
    return tokens

print(tokenize('Hello! My name is Bob.')) # prints [""Hello"", ""!"", ""My"", ""name"", ""is"", ""Bob"", "".""]"
"Develop a program to apply a given operation (addition or subtraction) on two numbers.operation: 'addition', a: 4, b:20","def operate(operation, a, b):
    if operation == 'addition':
        return a + b
    elif operation == 'subtraction':
        return a - b
    else:
        return 'Invalid operation.'

print(operate('addition', 4, 20)) # prints 24"
"Write a Python program to fill a dictionary with key as a number and value as a string for square with {1: ""1"", 2: ""4"", 3: ""9"", ...}.","dic = {}
for i in range (1,11):
    dic[i] = str(i ** 2)
print(dic)"
"Read the following XML structure and print the value of the ""name"" attribute.<root>
  <item name=""Apple"">
    <price>$2.50</price>
  </item>
</root>","root = ET.fromstring(inputString) 
print(root.find('item').attrib['name']) #output: Apple"
"Using the given three arrays, classify each array element as either prime numbers or not prime numbers.arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
arr2 = [4, 6, 9, 10, 12, 15, 18, 20];
arr3 = [11, 13, 17, 19, 23, 27, 37, 41];","function classifyPrime(arr1,arr2,arr3) {
    let result = {
        arr1: [],
        arr2: [],
        arr3: []
    };
    for(let i = 0; i < arr1.length; i++){
        if (isPrime(arr1[i])){
            result.arr1.push(""prime"");
        } else {
            result.arr1.push(""not prime"");
        }
    }
    for(let i = 0; i < arr2.length; i++){
        if (isPrime(arr2[i])){
            result.arr2.push(""prime"");
        } else {
            result.arr2.push(""not prime"");
        }
    }
    for(let i = 0; i < arr3.length; i++){
        if (isPrime(arr3[i])){
            result.arr3.push(""prime"");
        } else {
            result.arr3.push(""not prime"");
        }
    }
    return result;
}

function isPrime(num){
    let prime = true;
    for(let i = 2; i <= Math.sqrt(num); i++){
        if ( num % i === 0 ){
            prime = false;
        }
    }
    return prime;
}

arr1Result = classifyPrime(arr1,arr2,arr3);"
Create a Python program to find all the perfect squares between 1 and n.,"def perfect_squares(n):
    result = []
    for i in range(1, n+1):
        if is_perfect_square(i):
            result.append(i)
    return result

def is_perfect_square(n):
    sqrt = int(n**.5)
    return sqrt**2 == n

if __name__ == '__main__':
    n = 25
    result = perfect_squares(n)
    print(result)"
"Change the syntax of the code so that it prints the smallest and largest numbers from a given array.list1 = [2, 5, 3, 1]  
print(list1)","list1 = [2, 5, 3, 1]  
print(min(list1), max(list1))"
"Rearrange the code so that the output is ""Hi, world!"".world = ""Hi""
print(world)","world = ""Hi""
print(world + "", world!"")"
"Replace the ""TODO"" comment in the code with the proper code to print the length of a given List.list1 = [1, 2, 3, 4, 5]

# TODO","list1 = [1, 2, 3, 4, 5]

print(len(list1))"
"Using a list comprehension, create a filtered list which contains numbers that are divisible by 2.nums = [1, 2, 3, 4, 5, 6]",filtered_list = [num for num in nums if num % 2 == 0]
Create a function to determine if a given string is an anagram of another. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.,"def is_anagram(str1, str2):
   sorted_str1 = """".join(sorted(str1))
   sorted_str2 = """".join(sorted(str2))
   
   if sorted_str1 == sorted_str2: 
       return True 
   return False"
"Compare two strings and return the longest one.string1 = ""Hello""
string2 = ""World""","def compare_strings(string1, string2): 
    if len(string1) > len(string2): 
        return string1 
    return string2"
"Write a code snippet to append a new element 'Giraffe' to list xx = [""Elephant"", ""Tiger"", ""Lion""]","x.append(""Giraffe"")"
Write a python program to convert a number from base 10 to base 8.,"def convert_base_10_to_base_8(number):
   binary_number = bin(number)[2:]
   octal_number = oct(int(binary_number, 2))[2:]
   return octal_number"
Create a class named 'Animal' with one private data member 'numberOfLegs'.,"public class Animal {
  private int numberOfLegs;
}"
"Summarize the following passage in five sentences.Machine learning is the scientific study of algorithms and statistical models that computer systems use in order to perform a specific task without using explicit instructions, relying on patterns and inference instead. It is seen as a subset of artificial intelligence. Machine learning algorithms build a mathematical model of sample data, known as “training data”, in order to make predictions or decisions without being explicitly programmed to do so.","Machine learning is a scientific field of study which uses algorithms and statistical models to allow computers to complete tasks without direct instructions or programming. It is a subset of artificial intelligence, using training data to form a mathematical model and make predictions. Machine learning algorithms can make decisions without explicit programming and rely on patterns and inference. It is an invaluable tool for data analysis and can be used for a wide variety of tasks such as image recognition and natural language processing."
"Write a regular expression to search for a string in a text.The given text is: ""Yahoo! is a popular search engine.""

To search for ""Yahoo"":",/Yahoo/
Create a Python class for circles with radius and color as its properties.,"class Circle:
 
    # Constructor
    def __init__(self, radius, color):
        self.radius = radius
        self.color = color
 
    # To get radius
    def getRadius(self):
        return self.radius
 
    # To get color
    def getColor(self):
        return self.color"
"Write a Python script to print the current day, month and year.","from datetime import datetime

now = datetime.now()

print(""Today is"", now.day, now.month, now.year)"
Calculate the surface area of a sphere with radius 6m.,The surface area of a sphere with radius 6m is 113.1 m2.
"Create a Redux reducer to handle a state named ""counter"" with an initial value of 0.","const initialState = {
  counter: 0
};

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case ""INCREMENT"":
      return {
        ...state,
        counter: state.counter + 1
      };
    case ""DECREMENT"":
      return {
        ...state,
        counter: state.counter - 1
      };
    default:
      return state;
  }
};

export default reducer;"
Write an Angular component to update the value of a variable every second.,"import { Component } from '@angular/core';

@Component({
  selector: 'app-timer',
  template: `
  {{ counter }}
  `
})
export class TimerComponent {
  counter = 0;

  constructor() {
    setInterval(() => {
      this.counter++;
    }, 1000);
  }
}"
Create an Objective-C function to print out an array of numbers.,"void printArray(int arr[], int size)
{
  for (int i=0; i < size; i++)
    printf(""%d "", arr[i]);
  printf(""\n"");
}"
"Create a Python program to return the longest word in a sentence""The dog likes to run around the yard""","def longest_word(sentence):
    words = sentence.split()
    longest = 0
    for word in words:
        if len(word) > longest:
            longest = len(word)
            longest_word = word

    return longest_word

print(longest_word(""The dog likes to run around the yard""))"
"Create a Python function to print out a string in reverse order.""This is a string""","def reverse_string(input_str):
    return input_str[::-1]
 
print(reverse_string(""This is a string""))"
What is the most efficient way to find the maximum value in a Python list?,The most efficient way to find the maximum value in a Python list is to use the built-in max() function. For example: max(list).
"Complete a code to detect the type of triangle from its three side lengths.// Given triangle side lengths
float side1 = 4;
float side2 = 4;
float side3 = 4;","// Given triangle side lengths
float side1 = 4;
float side2 = 4;
float side3 = 4;

if (side1 == side2 && side2 == side3) {
  // Equilateral Triangle
  print(""This triangle is an equilateral triangle."");
} 
else if (side1 == side2 || side2 == side3 || side1 == side3) {
  // Isosceles Triangle
  print(""This triangle is an isosceles triangle."");
} 
else {
  // Scalene Triangle
  print(""This triangle is a scalene triangle."");
}"
"Create a function in Python to delete an element from a given list at a specified index.list = [1, 2, 3, 4, 5]
index = 2","def deleteElement(list, index): 
   del list[index] 
   return list
  
list = [1, 2, 3, 4, 5] 
index = 2
  
print(deleteElement(list, index))"
"Produce a function which can take two strings as input and check if they are anagrams.'silent', 'listen'","def is_anagram(str1, str2): 
    # convert strings to lowercase
    str1_lower = str1.lower()
    str2_lower = str2.lower()

    # sort the strings 
    str1_sorted = ''.join(sorted(str1_lower))  
    str2_sorted = ''.join(sorted(str2_lower)) 

    # compare the sorted strings 
    if(str1_sorted == str2_sorted):  
        return True
    else: 
        return False"
Create a program which can take a sentence as an input and split it into a list of words.'The quick brown fox',"def split_sentence(sentence): 
    lst = sentence.split("" "")
    return lst"
Generate a correct program to sum the even numbers from 0 to n.,"def sum_even(n):
    sum = 0
    for i in range(0,n+1):
        if i % 2 == 0:
            sum += i
    return sum"
"Code a program to delete a specified item from a list.Delete item ""Apple"" from the list [""Banana"", ""Apple"", ""Orange""]","def delete_item(lst, item): 
    if item in lst: 
        lst.remove(item)
    return lst"
Design a program to convert an integer to a binary string.42,"def int_to_bin(num): 
    return bin(num).replace(""0b"","""")"
Create a program to create a new string where the first and last occurrence of each character is removed.'Hello World',"def strip_string(s): 
    new_str = """"
    counts = {}
    
    # Create a dictionary to record the number of occurrences of each character
    for letter in s: 
        if letter not in counts:
            counts[letter] = 1
        else: 
            counts[letter] += 1
    
    for char in s: 
        if counts[char] > 1: 
            new_str += char
        counts[char] -= 1
    return new_str"
"Design a program which can take an array of integers and output the index of the maximum element.[10, 4, 15, 6, 20]","def max_index(lst): 
    max = 0
    max_index = 0
    for i in range(len(lst)): 
        if lst[i] > max: 
            max = lst[i]
            max_index = i
    return max_index"
"In a given array of integers, find the number of even elements that appear before any odd elements.[3,5,2,5,1]",1
Create a function that takes a string of characters and returns the minimal number of division/multiplication operations needed to make all characters within the string the same.acdc,"def operations(string):
    char_set = set(string)
    while len(char_set) > 1:
        char_arr = list(char_set)
        x = char_arr[0]
        y = char_arr[1]
        if x == y:
            break
        elif x > y:
            new_val = x/y
            for i in range(len(string)):
                if string[i] == x:
                    string[i] = new_val
        else:
            new_val = y/x
            for i in range(len(string)):
                if string[i] == x:
                    string[i] = new_val
        char_set = set(string)
    return len(char_set)-1"
"Write a Python code that detects if a given character is uppercase, lowercase, or something else.","def is_type(character):
  if ord(character) >= 65 and ord(character) <= 90:
    return ""uppercase""
  elif ord(character) >= 97 and ord(character) <= 122:
    return ""lowercase""
  else:
    return ""something else"""
"Create a new function that takes two lists as input and returns a new list consisting of elements which are not in the other list.list1 = [1, 2, 3, 4]
 list2 = [3, 4, 5, 6]","def non_shared(list1, list2):
    non_shared_elements = [element for element in list1 if element not in list2]
    return non_shared_elements"
"Create a function to invert the keys and values of a given dictionary.my_dict = { ""name"": ""John"", ""age"": 22 }","def invert_dict(dictionary):
    inv_dict = {v: k for k, v in dictionary.items()}
    return inv_dict"
"Find a code that returns the union set of two given sets.s1 = {1,2,3,4}
 s2 = {3,4,5,6}","def union_sets(s1, s2):
    return s1 | s2"
Create a function to convert a given decimal number to its corresponding hexadecimal value.,"def dec2hex(n):
    return hex(n)[2:]"
You need to check if a variable is an integer or not.,"def is_integer(variable):
    return isinstance(variable, int)"
"Create a function that takes a dictionary, a key and a value as parameters and adds the key and value to the given dictionary.my_dict = { 'fruit': 'apple' }","def add_dict_entry(d, key, value):
    d[key] = value
    return d"
How could you loop through the elements of a list in Python?,"for element in my_list:
    # do something with the element"
"Increase a string by one characterstring = ""hello""","string += '_' # to add a space
string += 'a' # to increment the last character by one"
Write a code to generate a random string of length n with lowercase alphabets and numbers.,"function randomString(n) {
  const possibleCharacters = ""abcdefghijklmnopqrstuvwxyz0123456789"";
  const possibleLength = possibleCharacters.length;
  let generatedString = '';
  
  for (let i = 0; i < n; i++) {
    let randomIndex = Math.floor(Math.random() * possibleLength);
    let randomCharacter = possibleCharacters.charAt(randomIndex);
    generatedString += randomCharacter;
  }
  
  return generatedString;
}

console.log(randomString(8));"
"Implement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.","class Vector(object):
 
  def __init__(self, components):
    self.components = components
 
  def add(self, vector):
    if len(self.components) != len(vector.components):
      return None
    components = [x + y for x, y in zip(self.components, vector.components)]
    return Vector(components)
 
  def sub(self, vector):
    if len(self.components) != len(vector.components):
      return None
    components = [x - y for x, y in zip(self.components, vector.components)]
    return Vector(components)
 
  def scalar_mul(self, scalar):
    components = [x * scalar for x in self.components]
    return Vector(components)"
"Derive the Hamming distance between two strings using the edit distance algorithm.s1 = 'saturday', s2 = 'sunday'","The Hamming distance between the two strings 'saturday' and 'sunday' is 3. The edit distance algorithm is used to calculate the minimum number of substitution, deletion, and insertion operations required to make two strings identical. In this example, 3 substitution operations are required, making the Hamming distance 3."
"Create two classes, Dog and Cat, that extend the Animal class.class Animal:
    def __init__(self, name):
        self.name = name
        self.health = 100","class Animal:
    def __init__(self, name):
        self.name = name
        self.health = 100

class Dog(Animal):
    def bark(self):
        print(""Woof!"")

class Cat(Animal):
    def meow(self):
        print(""Meow!"")"
"Modify the given code to debug 'NameError: name 'x' is not defined'.nums = range(20)
for x in nums:
    if x % 2 == 0:
        print(square(x))","nums = range(20)
for x in nums:
    if x % 2 == 0:
        print(x**2)"
"Fill in the blank with appropriate generic function to complete the code.def foo():
    value = ____","def foo():
    value = input()"
"Create a new array containing the result of applying a given function to each element of an original array.Array: [1, 2, 3, 4]
Function: x * 2","new_arr = [i*2 for i in [1, 2, 3, 4]]"
Create a function that takes three parameters and adds them together.No input.,"def my_func(a, b, c):
    return a + b + c"
Write a Python class that implements a sorted list.No input.,"class SortedList:
    def __init__(self):
        self.items = []

    def add(self, item):
        i = 0
        while i < len(self.items) and self.items[i] < item:
            i += 1
        self.items.insert(i, item)

    def remove(self, item):
        i = 0
        while i < len(self.items) and self.items[i] != item:
            i += 1
        if i < len(self.items):
            del self.items[i]

    def remove_at(self, index):
        del self.items[index]"
"Extract a portion of a string.String: Python is a great programming language
Substring: 'programming'",programming_str = 'Python is a great programming language'[17:]
"Reorder the items in an array according to their length.Array: ['this', 'is', 'a', 'test']","sorted_array = sorted(['this', 'is', 'a', 'test'], key=len)"
"Create a new array by combining the elements of 2 given arrays.Array 1: [1, 2, 3]
Array 2: [4, 5, 6]","merged_array = [1, 2, 3] + [4, 5, 6]"
Create classes to represent a credit card and account holder.No input.,"class CreditCard:
    def __init__(self, card_number):
        self.card_number = card_number

class AccountHolder:
    def __init__(self):
        self.cards = []
    def add_card(self, card):
        self.cards.append(card)"
"Complete the missing line of code to iterate through a list of dictionaries.items = [{'name': 'John', 'age': 20}, {'name': 'Eric', 'age': 25}]
for ____:",for item in items:
"Convert a given array of strings to an array of numbers.Array: ['1', '2', '3']","nums = list(map(int, ['1', '2', '3']))"
Suggest a variable name for the following equation: 1 + 2 - 3 x 4,result = 1 + 2 - 3 * 4
Print all the odd numbers from 1 to 10 (inclusive),"for num in range(1, 11):
    if num % 2 == 1:
        print(num)"
"Create a boolean function called ""is_num_even"" which takes in a number and returns true if the number is even.","def is_num_even(number):
    if number % 2 == 0:
        return True
    else:
        return False"
"Create a function to process the following data and return the average temperature for the last five days.days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
temps = [27, 28, 29, 20, 21]","def get_avg_temp(days, temps):
    total = 0
    for i in range(len(days)):
        total += temps[i]
        
    avg = total / len(days)
    
    return avg"
Compute the Fibonacci series up to the following number n.,"def fibonacci(n):
  a = 0 
  b = 1
  arr = []
  arr.append(a)
  arr.append(b)
  for i in range(2,n):
      c = a + b
      a = b
      b = c
      arr.append(c)
  return arr"
Create an array of all the prime numbers up to 50.,"def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
    
prime_array = []
for i in range(2, 51):
    if is_prime(i):
        prime_array.append(i)"
"Edit the code to make sure the output error messages are informative.def myfunc(param):
 if type(param) != str:
     print(f""{param} is not valid input type"")","def myfunc(param):
 if not isinstance(param, str):
     print(f""Expected a string for parameter 'param' but received type '{type(param).__name__}'"")"
"Using the variable names, create a dictionary with the provided entries.key1 = ""item1""
val1 = ""00001""
key2 = ""item2""
val2 = ""00002""","dict = {key1:val1, key2:val2}"
"Using the given list and dictionary, write the Python code to remove duplicate objects from the list.list_one = [{""Name"": ""John"", ""Lastname"": ""Smith""}, {""Name"": ""John"", ""Lastname"": ""Smith""}, {""Name"": ""Janet"", ""Lastname"": ""Wise""}]
dict_one = {""John"": ""Smith"", ""Janet"": ""Wise""}","new_list = []

for item in list_one: 
    if item['Name'] + item['Lastname'] not in new_list: 
        new_list.append(item['Name'] + item['Lastname']) 
    if item['Name'] + dict_one[item['Name']] not in new_list: 
        new_list.append(item['Name'] + dict_one[item['Name']])

final_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]"
"Write code to organize the provided list in ascending order.list_two = [7, 4, 2, 3, 1, 8, 5]",list_two.sort()
"Write a code to convert the provided string into an array of numbers.string_two = ""01,2,3,4,5,6""","arr = list(map(int, string_two.split("","")))"
"Write a code that finds all the prime numbers in a given range of numbers.start_num = 1
end_num = 100","primes = []
for num in range(start_num, end_num + 1):
  if num > 1:
    for i in range(2, num):
      if num % i == 0:
        break
    else:
      primes.append(num)

print(primes)"
"Classify each of the provided words as either a noun, verb, or adjective.words = [""run"", ""sleep"", ""grass"", ""study"", ""loud""]","Noun: sleep, grass, study
Verb: run, loud
Adjective: None"
"Compare the two values, output the greater one.val1 = ""dog""
val2 = ""cat""","if val1 > val2:
  print(val1)
else:
  print(val2)"
"Write a code that iterates over the provided list of dictionaries and prints the value of ""name"" in each dictionary.list_three = [{""Name"": ""John"", ""Lastname"": ""Smith""}, {""Name"": ""Janet"", ""Lastname"": ""Wise""}]","for item in list_three:
  print(item[""Name""])"
Determine the best data structure to store the following information.The information is a list of people and their corresponding email addresses.,"The best data structure for storing this information is a dictionary, where the keys are the names of the people and the values are their email addresses."
"Write a code to find the maximum length of the longest consecutive increasing subsequence in the given array.arr = [2, 3, 1, 10, 5, 6, 8, 7]","def max_length(arr): 
    ans = 1
    j = 0

    for i in range(len(arr)): 
        if (arr[i+1] - arr[i] > 0): 
            j += 1
            ans = max(ans, j+1)
        else:  
            j = 0
    return ans

print(max_length(arr))"
"Write a Python script to check if an email address is valid depending on the given conditions.Email address: johnsmith@example.com
Check the following conditions:
1. Must contain an ""@"" symbol
2. Must contain a "".""
3. Must have at least 6 characters","import re

def is_valid_email(email):
    regex = r""^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,6}$""
    if re.search(regex, email) is not None:
        return True
    else:
        return False

email = 'johnsmith@example.com'
if is_valid_email(email):
    print(""Valid email"")
else:
    print(""Invalid email"")"
"At which index should the following element be inserted so that the array is sorted in ascending order?Array: [2, 3, 4, 5, 7]
Element to be inserted: 6",4
"Create a function which checks if a certain element is present in a given array.arr = [2, 8, 3, 5]
element = 8","const arr = [2, 8, 3, 5];
const element = 8;

const checkElementInArray = (arr, element) => {
    return arr.includes(element);
}

console.log(checkElementInArray(arr, element)); // true"
"Make the following code thread-safe by implementing mutex locks.#include <pthread.h>
int global_int = 0;

void* inc_func(void* arg) {
   global_int++;
   return NULL;
}

int main() {
   pthread thread_a, thread_b; 
   ...
   return 0;
}","#include <pthread.h>
#include <mutex>

int global_int = 0;
std::mutex mtx;

void* inc_func(void* arg) {
   mtx.lock();
   global_int++;
   mtx.unlock();
   return NULL;
}

int main() {
   pthread thread_a, thread_b; 
   std::unique_lock<std::mutex> lock(mtx);
   ...
   lock.unlock();
   return 0;
}"
Implement a reverse for loop in Python.,"for i in reversed(range(0, 10)):
   print(i)"
"Create a function to evaluate a mathematical expression like ""3 + 5 * 4"".","def evaluate(expression):
    result = None
    try:
        result = eval(expression)
    except:
        pass
    return result"
Develop a code to identify the most commonly used words in a given text.The quick brown fox jumps over the lazy dog,"from collections import Counter 
  
def most_common_words(text): 
    words = text.split() 
    counter = Counter(words) 
    high_occur = counter.most_common(3) 
    return high_occur

if __name__ == ""__main__"":
    text = ""The quick brown fox jumps over the lazy dog""
    most_common_words(text)"
"Create an efficient matrix multiplication of two given matrices.matrix1 = [[1, 2], [3, 4]]
matrix2 = [[5, 6], [7, 8]]","def matrix_multiply(matrix1, matrix2):
    if len(matrix1[0]) != len(matrix2):
        return ""Matrices should have the same size for multiplication""
    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]
    for i in range(len(matrix1)):
        for j in range(len(matrix2[0])):
            for k in range(len(matrix2)):
                result[i][j] += matrix1[i][k] * matrix2[k][j]
    return result

if __name__ == ""__main__"":
    matrix1 = [[1, 2], [3, 4]]
    matrix2 = [[5, 6], [7, 8]]
    print(matrix_multiply(matrix1, matrix2))"
Become an algorithm to check if a linked list is empty.,"def is_list_empty(head):
    if head == None:
        return True
    else:
        return False"
Compose a function to generate a palette of random colors.,"import random

def generate_palette(n): 
    palette = [] 
    for i in range(n): 
        rgb = [] 
        for j in range(3): 
            rgb.append(random.randint(1, 255)) 
        palette.append(rgb) 
          
    return palette

if __name__ == ""__main__"": 
    n = 10
    palette = generate_palette(n) 
    print(palette)"
"Design an algorithm to produce a binary tree from given inorder and preorder traversals.inorder: [4,2,5,1,3,6]
preorder: [1,2,4,5,3,6]","class Node: 
    # A constructor to create a  
    # new linked node  
    def __init__(self, data):  
        self.data = data  
        self.left = None
        self.right = None

def binary_tree_from_inorder_preorder(inorder, preorder): 
    if len(inorder) in [0, 1]: 
        return Node(inorder[0]) if inorder else None
              
    root_val = preorder[0]
    root = Node(root_val) 
  
    i_index = inorder.index(root_val) 
  
    root.left = binary_tree_from_inorder_preorder(inorder[:i_index],
                                      preorder[1:i_index + 1]) 
  
    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],  
                                       preorder[i_index + 1:]) 
  
    return root

if __name__ == ""__main__"":
    inorder=[4,2,5,1,3,6]
    preorder=[1,2,4,5,3,6]
    root = binary_tree_from_inorder_preorder(inorder, preorder)"
Create a code to generate a Mulberry Tree of height n levels.,"def get_mulberry_tree(n):
    spaces = n - 1
    for i in range(1, n+1):
        for j in range(spaces):
            print(end = "" "") 
        spaces = spaces - 1
        for j in range(i):
            print(""* "", end = """")
        print() 

if __name__ == ""__main__"": 
    n = 5
    get_mulberry_tree(n)"
Generate a program to remove duplicates from an unsorted linked list.,"class Node: 
  
    def __init__(self, data): 
        self.data = data  
        self.next = None
  
def remove_duplicates(head): 
    h = {} 
  
    temp = head 
    prev = None
    while(temp): 
        if temp.data in h: 
            prev.next = temp.next
            temp = None
        else: 
            h[temp.data] = True
            prev = temp 
        temp = prev.next

if __name__ == ""__main__"":
    pass"
Create a Python program to take a float input and output its binary equivalent.25.68,"def floatToBin(num):
    whole, decimal = str(num).split(""."")   
    whole = int(whole)
    decimal = int (decimal) 
    res = bin(whole).lstrip(""0b"")+"".""
    for x in range(10):
        decimal *= 2
        res += str(decimal//1)
        decimal %= 1
    return res 
 
# Driver code  
number = 25.68
print(floatToBin(number)) # returns '11001.1011'"
Describe what a condition in a while loop does in Python.,"A condition in a while loop in Python allows code to be executed repeatedly until a certain condition is met. While the condition is true, the code inside the loop is executed and if the condition is false, the loop is exited. This allows for a loop to continue running until a certain condition is met."
Write a method to constitute a Hashmap with the following parameters: key (String) and value (Integer).,"public static HashMap<String, Integer> constructMap(String key, Integer value) 
{ 

    // Create an empty HashMap 
    HashMap<String, Integer> myMap = new HashMap<>(); 
  
    // Add key-value pairs to the HashMap 
    myMap.put(key, value); 
  
    // Return the HashMap 
    return myMap; 
}"
Name three software design principles.,"The three software design principles are: 
1. Separation of Concerns 
2. DRY Principle 
3. KISS Principle."
Create an object that uses constructor overloading in Python.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

p1 = Person('John Doe', 25)
p2 = Person('Jane Doe', 30, 'Software Engineer')"
"Create an if statement that prints ""Number is negative"" if the value of x is below zero.x = -2","if x<0:
    print(""Number is negative"")"
Create a for loop that prints all even numbers from 0 to 10 (inclusive).,"for i in range(0, 11):
    if (i % 2 == 0):
        print(i)"
"Write a function called ""power"" that takes two numbers a and b as arguments, and returns a to the power of b.","def power(a, b):
    return a**b"
Create a function to round a number to the nearest integer.,"def round_number(x):
    return round(x)"
"Create a variable called ""counter"" and increment it by one in a loop that runs 10 times.","counter = 0
for i in range(10):
    counter += 1"
"Write a regular expression to match any word that starts with ""cat"" and contains only lowercase letters.",^cat[a-z]*$
Design a class for representing a person in Python.,"class Person:
    """"""
    Class to represent a person
    """"""
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address
    
    def birthday(self):
        """"""
        Increments the age of the person
        """"""
        self.age += 1"
Create a list comprehension to generate the multiples of a number up to a limit.multiples of 7 until 50,"multiples_list = [n * 7 for n in range(0, 51) if n * 7 <= 50]"
"Using regex, find all the words that have a specific character at the start.the words that start with 'a'","import re

words = [""amazing"", ""apple"", ""banana"", ""cherry"", ""desert"", ""encounter""]

result = [word for word in words if re.search(""^a"", word)]
print(result)"
"Using the input set the value of the variable.value = ""hello world""","value = ""hello world"""
"Use conditionals to decide what to print using the input array.arr = [""hamburger"", ""hot dog"", ""cheese""]","if len(arr) == 0:
   print(""No food available"")
elif len(arr) == 1:
   print(arr[0] + "" is available"")
elif len(arr) == 2:
   print(arr[0] + "" and ""+ arr[1] + "" are available"")
else:
   print(""Multiple items are avaiable: "" + ', '.join(arr))"
"Merge two arrays using the given lists.arr1 = [1, 2, 3]
arr2 = [""a"", ""b"", ""c""]","arr = arr1 + arr2
#Merge two arrays
arr = arr1 + arr2"
"Create a function that takes a given string and encodes it with a specified cipher.encoding_cipher = {""a"" : ""x"", ""b"" : ""y"", ""c"": ""z""}
string = ""abc""","def encode_string(encoding_cipher, string):
    result = """"
    for char in string:
        result += encoding_cipher[char]
    return result"
"Create a function to decode a given string using the provided cipher.decoding_cipher = { ""x"" : ""a"", ""y"": ""b"", ""z"" : ""c"" }
string = ""xyz""","def decode_string(decoding_cipher, string):
    result = """"
    for char in string:
        result += decoding_cipher[char]
    return result"
"Using a while loop, write a program to delete all duplicate elements from an array.arr = [1, 2, 3, 2, 3, 4, 3]","def remove_duplicates(arr):
    i = 0
    while i < len(arr):
        if arr.count(arr[i]) > 1:
            arr.remove(arr[i])
        else:
            i += 1
    return arr"
Find the Fibonacci number for a given number using a for loop.,"def fibonacci(n):
    fibonacci_numbers = [0,1]
    for i in range(2, n+1):
        fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])
    return fibonacci_numbers[n]"
"Using a list comprehension, create a function to give only the even numbers in a given list.arr = [1, 2, 3, 4, 5, 6, 7, 8]","def only_even(arr):
    return [ num for num in arr if num % 2 == 0 ]"
"Using a dictionary, store the given student's name and marks as key value pairs.name = ""John Doe""
marks = { ""maths"" : 90, ""physics"" : 80, ""chemistry"" : 85 }","student_data = {}
student_data[name] = marks"
Compute the largest common denominator of 4 and 12,The LCM of 4 and 12 is 12.
"Design a program to convert an array of characters to its equivalent string.array = [ 'A', 'B', 'C', 'D' ]","public class ArrayToString { 
    public static String convert(char[] arr) 
    { 
        StringBuilder sb = new StringBuilder(); 
        for (char c : arr) 
            sb.append(c); 
        return sb.toString(); 
    } 
  
    public static void main(String[] args) 
    { 
        char[] arr = { 'A', 'B', 'C', 'D' }; 
        System.out.println(convert(arr)); 
    } 
}"
Create a program that determines whether a given numbers is a prime.,"public class PrimeNumber {

	public static boolean isPrime(int n) {

		if (n < 2)
			return false;

		for (int i = 2; i <= Math.sqrt(n); i++) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {

		for (int i = 0; i < 20; i++) {
			if (isPrime(i)) {
				System.out.println(i + "" is a Prime Number"");
			}
		}

	}
}"
Create a program in python that sorts a given list.,"def bubbleSort(arr):
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above 
arr = [64, 34, 25, 12, 22, 11, 90] 
  
bubbleSort(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
"Develop a program that performs basic arithmetic operations (+, -, /, *)","def add(x, y):
   return x + y

def subtract(x, y):
   return x - y

def multiply(x, y):
   return x * y

def divide(x, y):
   return x / y"
Create a program to evaluate a postfix expression.,"# Python program to evaluate value of a postfix expression 
  
# Class to convert the expression 
class Conversion: 
       
    # Constructor to initialize the class variables 
    def __init__(self, capacity): 
        self.top = -1
        self.capacity = capacity 
        # This array is used a stack 
        self.array = [] 
        # Precedence setting 
        self.output = [] 
        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}
       
    # check if the stack is empty 
    def isEmpty(self): 
        return True if self.top == -1 else False
       
    # Return the value of the top of the stack 
    def peek(self): 
        return self.array[-1] 
       
    # Pop the element from the stack 
    def pop(self): 
        if not self.isEmpty(): 
            self.top -= 1
            return self.array.pop() 
        else: 
            return ""$""
       
    # Push the element to the stack 
    def push(self, op): 
        self.top += 1
        self.array.append(op)  
   
    # A utility function to check is the given character 
    # is operand  
    def isOperand(self, ch): 
        return ch.isalpha() 
   
    # Check if the precedence of operator is strictly 
    # less than top of stack or not 
    def notGreater(self, i): 
        try: 
            a = self.precedence[i] 
            b = self.precedence[self.peek()] 
            return True if a  <= b else False
        except KeyError:  
            return False
              
    # The main function that converts given infix expression 
    # to postfix expression  
    def infixToPostfix(self, exp): 
           
        # Iterate over the expression for conversion 
        for i in exp: 
            # If the character is an operand,  
            # add it to output 
            if self.isOperand(i): 
                self.output.append(i) 
              
            # If the character is an '(', push it to stack 
            elif i  == '(': 
                self.push(i) 
   
            # If the scanned character is an ')', pop and  
            # output from the stack until and '(' is found 
            elif i == ')': 
                while( (not self.isEmpty()) and self.peek() != '('): 
                    a = self.pop() 
                    self.output.append(a) 
                if (not self.isEmpty() and self.peek() != '('): 
                    return -1
                else: 
                    self.pop() 
   
            # An operator is encountered 
            else: 
                while(not self.isEmpty() and self.notGreater(i)): 
                    self.output.append(self.pop()) 
                self.push(i) 
   
        # pop all the operator from the stack 
        while not self.isEmpty(): 
            self.output.append(self.pop()) 
   
        return """".join(self.output) 
   
count = 0

# Driver program to test above function 
exp = ""a+b*(c^d-e)^(f+g*h)-i""
obj = Conversion(len(exp)) 
ans = obj.infixToPostfix(exp) 
print(ans)

# This function evaluates value of a postfix expression 
def evaluatePostfix(exp): 
	
	# Create a stack 
	stack = [] 
	
	# Scan all characters one by one 
	for i in exp: 
		
		# If the character is a number, push it to the stack 
		if i.isdigit(): 
			stack.append(int(i)) 

		# If the character is an operator, pop two 
		# elements from stack apply the operator 
		else: 
			val1 = stack.pop() 
			val2 = stack.pop() 
			if i == '+': 
				stack.append(val2 + val1) 
			elif i == '-': 
				stack.append(val2 - val1) 
			elif i == '*': 
				stack.append(val2 * val1) 
			else: 
				stack.append(val2 / val1) 

	return stack.pop() 

# Driver Program to test above function 
#exp = ""231*+9-""
#exp = ans
#print(exp)

#print('postfix evaluation: %d' %(evaluatePostfix(exp) ))"
"Use the split method to split a string based on the given delimiter.str = ""apple,banana,orange""","str = ""apple,banana,orange""
list = str.split("","")
print(list) 
# Output: ['apple', 'banana', 'orange']"
"Use a loop to find the average of all given numbers.[1, 2, 3, 4, 5]","def find_avg(nums):
 total = 0
 for num in nums:
  total += num

return total / len(nums)

list = [1, 2, 3, 4, 5]
print(find_avg(list))
# Output: 3.0"
"Compare two given strings and return true if they are the same.str1 = ""Hello world""
str2 = ""Hello world""","def compare_str(str1, str2): 
 return str1 == str2

str1 = ""Hello world""
str2 = ""Hello world""

print(compare_str(str1, str2))
# Output: True"
"Parse the following XML data using Python.<students>
    <student>
        <name>John</name>
        <age>24</age>
    </student>
    <student>
        <name>Jack</name>
        <age>22</age>
    </student>
    <student>
        <name>Sam</name>
        <age>25</age>
    </student>
</students>","import xml.etree.ElementTree as ET

root = ET.fromstring('<students>  <student>    <name>John</name>    <age>24</age>  </student>  <student>    <name>Jack</name>    <age>22</age>  </student>  <student>    <name>Sam</name>    <age>25</age>  </student></students>')

students = root.findall('student')
for student in students:
    name = student.find('name').text
    age = student.find('age').text
    print(name, age)"
Write a function to create a list with all the prime numbers in the range of 0 to 100.,"def create_prime_list(upper_limit):
    prime_list = []
    for num in range(2,upper_limit+1):
        flag=0
        for i in range(2,num):
            if num % i == 0:
                flag=1
        if flag==0:
            prime_list.append(num)
    return prime_list"
Create a program to find out the most frequent letter in a sentence.The quick brown fox jumps over the lazy dog.,"def most_frequent_letter(sentence):
    freq_dict = {}
    for letter in sentence:
        if letter in freq_dict:
            freq_dict[letter] += 1
        else:
            freq_dict[letter] = 1
    
    most_freq_letter = max(freq_dict, key = freq_dict.get)
    return most_freq_letter"
Create a program to output 'Hello World' in the console.,print('Hello World')
"You will be given a list of numbers as input. Write a program to remove the duplicates and return only the distinct values.[1, 1, 2, 3, 4, 4, 5]","def remove_duplicates(arr):
    no_duplicates = []
    for i in arr:
        if i not in no_duplicates:
            no_duplicates.append(i)
    return no_duplicates"
"You will be given a list of strings as input. Write a program to print out the longest string in the list.['Hello', 'World', 'I', 'Am', 'Here']","def get_longest_str(str_list):
    longest_str = str_list[0]
    for str in str_list:
        if len(str) > len(longest_str):
            longest_str = str
    
    return longest_str"
"Implement a function that takes two numbers as parameters and returns their difference.17, 10","int difference(int a, int b)
{
 return a - b;
}"
Allocate an array of size 10 and store the numbers from 1 to 10 in it.,"int[] arr = new int[10];

for (int i = 0; i < 10; i++) {
 arr[i] = i + 1;
}"
"Create a function that adds two matrices of the same size.[[1, 2], [3, 4]], [[5, 6], [7, 8]]","int[][] addMatrix(int[][] a, int[][] b) {
 int[][] c = new int[a.length][a[0].length];
  
 for (int i = 0; i < a.length; i++) {
  for (int j = 0; j < a[i].length; j++) {
   c[i][j] = a[i][j] + b[i][j];
  }
 }
 
 return c;
}"
"Create a code snippet that parses a sentence into individual words and returns the words sorted alphabetically.sentence = ""This is a sample sentence""","def parse_sentence(sentence):
    words = sentence.split()
    words.sort()
    return words"
"Using the provided data, train a decision tree to predict whether a given house should be classified as a ""small"" or ""large"" house.house_size = [1000, 1100, 1250, 1300, 1400, 1500]
 house_label = [""small"", ""small"", ""small"", ""large"", ""large"", ""large""]","from sklearn import tree

# Our features are house_size
X = [[1000], [1100], [1250], [1300], [1400], [1500]]

# Labels are house_label
y = [""small"", ""small"", ""small"", ""large"", ""large"", ""large""]

# Create and train the decision tree
clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)"
"Given a matrix of X, Y coordinates, write a Python function that returns the angle between the two points.X1 = 2
Y1 = 3
X2 = 7
Y2 = 10","import math

def calculate_angle(X1, Y1, X2, Y2):
    deltaY = Y2 - Y1
    deltaX = X2 - X1
    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi
    return angleInDegrees"
"Create a Python function that takes an array of numbers and returns a string that represent the mean and median of the numbers.[1, 2, 3, 4, 5]","def get_mean_and_median(numbers):
    mean = sum(numbers)/len(numbers)
    sorted_numbers = sorted(numbers)
    index = int(len(sorted_numbers) / 2)
    median = sorted_numbers[index]
    return ""Mean: {}, Median: {}"".format(mean, median)"
Design an algorithm to reverse a singly linked list in O(n) time.,"// Algorithm to reverse a singly linked list in O(n) time
//
//
// INPUT:  A singly Linked List
//
// OUTPUT: A reversed singly Linked List

// Initialize three pointers

Node* prev = NULL; 
Node* curr = head;
Node* next = NULL;

// Iterate through the linked list, reversing the links as we go

while (curr != NULL) {
    // Store the next node
    next = curr->next;

    // Reverse the current node's pointer
    curr->next = prev;

    // Advance the pointers one position
    prev = curr;
    curr = next;
}

// Return the reversed linked list
return prev;"
Write a code to find the Kth smallest element from a given array of N elements.,"// A function to find kth smallest element
int kthSmallest(int arr[], int n, int k)
{
    //Sort the given array
    sort(arr, arr+n);
 
    // Return k'th element
    return arr[k-1];
}"
Design a Python program to find the longest increasing subsequence in a given array.,"def long_increasing_subsequence(arr):
    # Number of items in given array
    n = len(arr)
 
    # Initialize 'lengths' values for all indices
    lengths = [1]*n
 
    # Find the longest increasing subsequence
    for i in range(1, n):
        for j in range(i):
            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:
                lengths[i] = lengths[j] + 1
 
    return lengths"
"Rewrite the following code so that it is easier to read and understand.def is_string_palindrome(str):
    revstr=str[::-1] 
    if revstr==str: 
            return true 
    else: 
            return false","def is_string_palindrome(str):
    reverse_str = str[::-1] 
    if reverse_str == str:
        return True
    else:
        return False"
Generate a string representation of a binary tree.,"def tree_str(root):
    if root is None:
        return ''

    left_str = tree_str(root.left)
    right_str = tree_str(root.right)

    if left_str != '' and right_str != '':
        return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'
    if left_str != '' and right_str == '':
        return '(' + left_str + ')' + str(root.val)
    if left_str == '' and right_str != '':
        return  str(root.val) + '(' + right_str + ')'
    else:
        return str(root.val)"
Write a TensorFlow code snippet to build a convolutional neural network and display the results of the training process.,"import tensorflow as tf

# define a convolutional neural network
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# compile and fit model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5)

# display results
model.evaluate(x_test, y_test)
['loss', 'accuracy']
[0.32971992206192017, 0.8856600217819214]"
Create a Python code snippet to identify the root cause of a Software Bug.,"def find_causes(data):
    # identify the root cause of the bug

    causes = set()
    for line in data:
        for cause in line.get('causes', []):
            causes.add(cause)

    # filter insignificant causes
    causes = [cause for cause in causes if cause not in insignificant_causes]

    return causes"
"Rewrite the following code in a more descriptive style and make it easier to read.for i in range(1, n):
    for j in range(1, n):
        if i + j == n:
            print(i, j)","for i in range(1, n):
    for j in range(1, n):
        # check if the sum of i and j is equal to n
        if (i + j) == n:
            print(i, j)"
"Write a code snippet to find all the elements in a list that are greater than a specified number.lst = [1, 5, 10, 15, 27]
k = 10","# Initializing an empty list
new_lst = []

# Iterating over the given list
for elem in lst:
  # Appending elements that are greater than 10
  if elem > k:
    new_lst.append(elem)

# Printing corresponding result 
print(new_lst) # Output: [15, 27]"
"Determine if the word ""hello"" is present in the provided list.words = [""hi"", ""goodbye"", ""apple"", ""orange""]","if ""hello"" in words:
  print(""Yes, the word hello is present in the provided list."")
else:
  print(""No, the word hello is not present in the provided list."")"
"Generate a random letter from the string provided.string = ""Hello World""","import random

random_letter = random.choice(string) # Output: a randomly generated letter from the string"
"Print the total number of keys present in a given dictionary.phone_numbers = {
    ""John"" : ""123-456-7890"",
    ""Jane"" : ""890-567-1234"",
    ""Jack"" : ""345-678-9012""
}",print(len(phone_numbers)) # Output: 3
"Write a Python program to insert a given string into another string at a certain index.Variable String = ""The quick brown fox"" 
String To Insert = ""jumps over""
Index = 16",The quick brown jumps over fox
"Create a script that filters the list of strings and returns only the strings that contain the specific, user-specified character.User Character: 'a'
List: ['apple','peach','pear','tangerine','plum','grape','banana']","def filter_string(strings, char):
  result = []
  for string in strings:
    if char in string:
      result.append(string)
  return result

print(filter_string(['apple','peach','pear','tangerine','plum','grape','banana'], 'a'))"
"Generate a random 2D array with the given dimensions.Rows: 5 
Columns: 3","import numpy as np

rows = 5
columns = 3

arr = np.random.randint(0, 11, size=(rows, columns)) 

print(arr)"
Change the color of the text to blue.Text: The quick brown fox,"<span style=""color:blue;"">The quick brown fox</span>"
"Find the length of a Python list.List = [1,2,3]","List = [1,2,3]

length = len(List)
print(length)

# Output
3"
"Use the input to write a loop in Python to print each product details.products = [
  { ""name"": ""iPhone XS"", ""price"": 1000 },
  { ""name"": ""iPhone XR"", ""price"": 800 },
  { ""name"": ""iPad Air"", ""price"": 600 }
]","for product in products:
    print(""Product name: "" + product['name'] + "", Price: "" + str(product['price']))

# Output
# Product name: iPhone XS, Price: 1000
# Product name: iPhone XR, Price: 800
# Product name: iPad Air, Price: 600"
"Write a function in Python to remove the element with the value of ‘apple’ from the list.fruits =[""banana"", ""apple"", ""mango"", ""orange""]","def removeValue(fruits, elem):
    for e in fruits:
        if e == elem:
            fruits.remove(e)
            break

removeValue(fruits, ""apple"")

print(fruits) # ['banana', 'mango', 'orange']"
Return the names of the customers that contain the string “ali”.,"SELECT name 
FROM customers 
WHERE name LIKE '%ali%';"
Write a function in Python to generate a list with the numbers from 0 to the provided number.num = 10,"def generateList(n):
    list = []
    for i in range(n+1):
        list.append(i)
    return list

print(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Rewrite the following linear equation into the standard form y = mx + c: x + 2y = 5,"y = - x/2 + 5/2 
This equation can be written in standard form as y = -0.5x + 2.5"
"Given an array of objects, sort them in descending order according to their age.array = [ {name: 'John', age: 25}, {name: 'Peter', age: 32}, {name: 'Alex', age: 21} ]","import java.util.Arrays; 
import java.util.Comparator; 

public class SortByAge { 

    public static void main(String[] args) 
    {
        // Array of objects 
        object[] array = { {name: 'John', age: 25},
         {name: 'Peter', age: 32}, {name: 'Alex', age: 21} }; 

        // Sorting array of objects by age in descending order 
        Arrays.sort(array, Comparator.comparing(o -> o.age, Comparator.reverseOrder())); 

        // Printing the sorted array of objects 
        System.out.println(""Sorted objects array in descending order of age:""); 
        Arrays.stream(array)
            .forEach(e -> System.out.println(e.name + "" "" + e.age)); 
    } 
}"
"Create an algorithm to find the median of a given list of numbers.[2, 5, 7, 4, 3]","def find_median(list_of_numbers):
    sorted_list = sorted(list_of_numbers)
    length = len(sorted_list)
    if length % 2 == 0:
        median1 = sorted_list[length // 2]
        median2 = sorted_list[(length // 2) - 1]
        median = (median1 + median2) / 2
    else:
        median = sorted_list[length // 2]
    return median"
Write a method that produces a random password with the specified number of characters.,"import string
import random

def generate_password(characters):
  password = ''

  for _ in range(characters):
    password += random.choice(string.ascii_letters + string.digits)

  return password"
"Generate a list of all pairwise combinations of the numbers in the given list.[1,2,3,4]","def combinations(list_of_numbers):
  result = []

  for i in range(len(list_of_numbers)):
    for j in range(len(list_of_numbers)):
      if i != j:
        result.append([list_of_numbers[i], list_of_numbers[j]])
  
  return result"
Design a Python program to read string inputs and print out the reverse of the same,"def reverse_string(string):
  string = string[::-1]
  return string"
"Generate a valid python loop to print out the elements of a list.List = [1,2,3,4,5]","for element in List:
    print(element)"
"Using this list, write a Python program to print out all the duplicate elementsmy_list = [1, 2, 3, 2, 4, 3]","duplicate = []

for value in my_list:
    if my_list.count(value) > 1:
        if value not in duplicate:
            duplicate.append(value)

print(duplicate)"
Create a program in Python which takes any string as an input and prints the number of each of its charactershello,"character_count = {'h':1, 'e':1, 'l':2, 'o':1}"
"Write a snippet of code to swap two variables without using the third variablea = 5
b = 10","a, b = b, a"
Generate a valid syntax to remove the last element of a list,my_list.pop()
Construct a program to find the result of the following equation(x-1)^2,"def equation(x):
    return (x-1)**2"
"Design a Python program which prints the elements in reverse ordermy_list = [1,2,3,4,5]","def print_reverse(my_list):
    for i in range(len(my_list)-1, -1, -1):
        print(my_list[i])

print_reverse(my_list)"
"Input an array and remove all duplicates from the given array.arr = [1, 2, 3, 1, 2]","def remove_duplicates(arr): 
    result = [] 
    for item in arr: 
        if item not in result: 
            result.append(item) 
    return result

print(remove_duplicates(arr)) 
# Output: [1, 2, 3]"
Input a sentence with repeated words and write a Python code to remove all the repeated words.sentence = 'The the cat cat sat sat on on the the mat',"def remove_repeated_words(sentence):
    words = sentence.split("" "")
    result = []

    for word in words:
        if word not in result:
            result.append(word)
    return "" "".join(result)

print(remove_repeated_words(sentence))
# Output: The cat sat on the mat"
"Input two arrays and write a program to merge the two given sorted arrays into one sorted array.arr1 = [3, 5, 7]
arr2 = [2, 4]","def merge_arrays(arr1, arr2):
    # creating a new list to store the result
    merged_arr = []
    # looping over the two arrays
    for i in range(len(arr1)):
        merged_arr.append(arr1[i])
    for i in range(len(arr2)):
        merged_arr.append(arr2[i])
    # sorting function to sort the merged array
    merged_arr.sort()
    return merged_arr

# Driver code
new_arr = merge_arrays(arr1, arr2)

# to print the sorted merged array
print(new_arr)
# Output: [2, 3, 4, 5, 7]"
"Write a function to check if the given string `str1` is a permutation of the string `str2`str1 = 'program'
str2 = 'gramopr'","def is_permutation(str1, str2): 
    """"""
    Function to check if the given string str1 is a permutation of the string str2 
    
    Parameters: 
    str1 (str): first string 
    str2 (str): second string 
    
    Returns: 
    bool: True if str1 is a permutation of str2, False otherwise
    """"""
    if (len(str1) != len(str2)): 
        return False
    else: 
        count = [0] * 128
        for i in range(len(str1)):
            count[ord(str1[i])] +=1
            count[ord(str2[i])] -=1
        for i in range(128):
            if count[i] != 0: 
                return False
        return True"
What is the most efficient way to insert a new element into an existing unsorted array?,The most efficient way to insert a new element into an existing unsorted array is to append it to the end of the array. This is the fastest way since no shifting of elements is required. This is O(1) time complexity.
"Format the following array of numbers using Python.arr = [3, 1, 4, 5, 9, 8]","arr = [3, 1, 4, 5, 9, 8]

# sorting the array
arr.sort()

# print the array
print(arr)

# Output:
[1, 3, 4, 5, 8, 9]"
Construct a basic data structure to store a dictionary of words and their definitions.,"class WordDictionary(object): 
    def __init__(self): 
        self.words = {} 

    def add_definition(self, word, definition): 
        self.words[word] = definition

    def lookup_definition(self, word): 
        if word in self.words: 
            return self.words[word]
        else: 
            return None

    def delete_word(self, word): 
        del self.words[word]"
"Reverse an array of integers using Python.arr = [1, 2, 3, 4, 5]","arr = [1, 2, 3, 4, 5]
 
# reversing the array
arr.reverse()
 
# print the reversed array
print(arr)
 
# Output:
[5, 4, 3, 2, 1]"
What is a common use case for a ternary operator?,"A common use case for a ternary operator is to use it as a shortcut for an if/else statement. A ternary operator can be used to quickly assign the result of a boolean expression to a variable. For example, the following code is similar to an if/else statement:

a = 5
b = 10
result = a if a > b else b

In this example, if a is greater than b, then result will be assigned the value of a. Otherwise, it will be assigned the value of b."
"Rewrite the following Python function so it returns the opposite of the original output.def returnsThree() :
 return 3","def returnsThree():
    return -3"
Generate a theta join query to find companies located in a given zip code.Zip Code: 45112,"SELECT * 
FROM companies c
INNER JOIN locations l
ON c.company_id = l.company_id 
WHERE l.zip_code = '45112'"
Describe the basics of programming for a beginner.,"Programming is the process of writing computer code to create programs that can perform specific tasks or operations. It involves using a programming language to give instructions to a computer to carry out a specific task. A program can involve calculations, data processing, and more complex tasks such as simulation, game-playing, and artificial intelligence. A programmer typically communicates their code in a language that can be understood by the computer, such as HTML, Python, or Java. Programming can be a rewarding and challenging experience, as programmers are often creating something that did not previously exist."
How can you create a for loop in Python to loop through a list?,"# loop through a list
list = [1, 2, 3, 4, 5]
for item in list:
    print(item)"
"Write a code to reverse a stack and return the new stack.Stack: [1, 2, 3, 4, 5]","#include<stack>
#include<iostream>

using namespace std;

stack<int> reverseStack(stack<int> s) {
    stack<int> tempStack;
    while (!s.empty()) {
        int temp = s.top();
        tempStack.push(temp);
        s.pop();
    }
    return tempStack;
}

int main() {
    stack<int> s;
    s.push(1); s.push(2);
    s.push(3); s.push(4);
    s.push(5);

    stack<int> revStack = reverseStack(s);
    while (!revStack.empty()) {
        cout << revStack.top() << "" "";
        revStack.pop();
    }
    return 0;
}"
How can you represent an integer in binary?,"Integers can be represented in binary using a series of ones and zeroes. In a binary system, the position of a bit (binary digit) indicates its place value in the number. For example, the rightmost bit has the value of 1, the second-rightmost bit has the value of 2, the third-rightmost bit has the value of 4, and so on."
"Find the 5th element of the list in Python.list = [12, 34, 87, 90, 80, 21]","element = list[4]
print(element) # 80"
"Extract a numeric value from the following string in Python.myString = ""The length of the tree is 25 meters""","import re

newString = re.findall(r""[\d.]+"", myString)
print(newString[0]) # 25"
Create a tuple containing user data about a person.,"user_data = (""John Doe"", 29, ""Male"", ""New York"")"
Find the middle element of a given linked list.1 -> 2 -> 3 -> 4 -> 5,The middle element of the linked list is 3.
"Write a regex pattern to find all words that start with 'a' in a sentence.Sentence: ""All animals are amazing""","""""""
Find all words that start with 'a' in a sentence
""""""

import re

def find_words_with_a(sentence):
    pattern = r""\b[aA]\w+\b""
    matches = re.findall(pattern, sentence)
    return matches

if __name__ == '__main__':
    sentence = ""All animals are amazing""
    print(find_words_with_a(sentence))"
"Write a function to convert a 3 letter acronym to its full form.Acronym: ""GDP""","""""""
Convert a 3 letter acronym to its full form
""""""

def acronym_to_full_form(acronym):
    acronyms = {
        'GDP': 'Gross Domestic Product',
        'CIA': 'Central Intelligence Agency',
        'NASA': 'National Aeronautics and Space Administration'
    }

    return acronyms[acronym]

if __name__ == '__main__':
    acronym = ""GDP""
    print(acronym_to_full_form(acronym))"
"Generate a random password using a given string of characters.String: ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()""","""""""
Generate a random password using a given string of characters
""""""

import random 

def generate_password(string):
    password = ''
    for _ in range(16):
        password += random.choice(string)
    return password

if __name__ == '__main__':
    string = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()""
    print(generate_password(string))"
"Given a list of student's grades, write a program to calculate their average.Grades = [90, 95, 80, 75]","""""""
Calculate the average of a given list of grades
""""""

def average(grades):
    sum = 0
    for grade in grades:
        sum += grade
    
    return sum / len(grades)

if __name__ == '__main__':
    grades = [90, 95, 80, 75]
    print(average(grades))"
"Assign a numerical value to a given string.""Apple""","""Apple"" = 1"
Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data.<100 rows of bank transaction data>,"#import necessary models
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

#split data into train and test sets
x_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)

#create the machine learning model
lr_model = LogisticRegression()

#train the model
lr_model.fit(x_train, y_train)"
"Write a class in Scala to define dog characteristics such as color, breed, and size.","class Dog(color:String, breed:String, size:String){
  def description = s""This dog is a $color $breed, and is $size."" 
}"
"Create a regex pattern in Python that can extract URL from a text string.text = ""Visit http://www.example.com for more information.""","import re

pattern = re.compile(r'(https?://\S+)')
urls = re.findall(pattern, text)"
"Write a method that takes a parameter, text, and returns the words in the text in reverse order.text = ""Hello world!""","def reverse_words(text):
  words = text.split("" "");
  reversedWords = words[::-1];
  return "" "".join(reversedWords);"
"Analyze the following code and answer the following question: Is there a bug in this code?def foo(num):
  if num == 0:
    return 1
  else:
    return foo(num - 1)","Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`."
Create a method to convert a given number to Roman numeral format.num = 2020,"def int_to_roman(num):
  roman_numerals = {
    1: 'I',
    4: 'IV',
    5: 'V',
    9: 'IX',
    10: 'X',
    40: 'XL',
    50: 'L',
    90: 'XC',
    100: 'C',
    400: 'CD',
    500: 'D',
    900: 'CM',
    1000: 'M'
  }
  result = ''
  for n in sorted(roman_numerals.keys(), reverse=True):
    count = num // n
    result += roman_numerals[n] * count
    num %= n
  return result

if __name__ == '__main__':
  num = 2020
  print(int_to_roman(num))"
"Create an algorithm that takes two integers and returns the smallest common multiple of the two numbers.x = 12
y = 24","def smallest_common_multiple(x, y):
  for i in range(1, y+1):
    if (i % x == 0) and (i % y == 0):
      return i

if __name__ == '__main__':
  x = 12
  y = 24
  print(smallest_common_multiple(x, y))"
Create a Python program to calculate the square root of a number provided by the user.,"def square_root(number):
    """"""This program takes a number and calculates its square root.""""""
    return number**0.5

num = int(input(""Enter a number: ""))
print(""The square root of "", num, "" is "", square_root(num))"
"Create a function that takes an array and prints out the biggest number in it.[1, 7, 2, 11, 4]","def find_max_num(nums_list):
    """"""This function takes an array and prints out the biggest number in it.""""""
    max_num = nums_list[0]
    for num in nums_list:
        if num > max_num:
            max_num = num
    return max_num

nums_list = [1, 7, 2, 11, 4]
print(find_max_num(nums_list))"
"Given the following array, delete all occurrences of the number 4.list1 = [4, 3, 4, 2, 3, 4, 4]","list1 = [4, 3, 4, 2, 3, 4, 4]

def delete_four(arr):
    """"""This function deletes all occurrences of the number 4 in the given array""""""
    for i in range(len(arr)):
        if arr[i] == 4:
            arr.pop(i)
            i -= 1
    return arr

print(delete_four(list1))"
"Analyze the following code and suggest a modificationdef hello():
    print('Hello!')","# This code prints out ""Hello!"" when called.
# A modification to include a parameter for a name would be as follows:
def hello(name):
    print('Hello, ' + name + '!')"
"Write a function to take a list of strings and return true if any element in the list starts with the letter ""t""['dog', 'turtle', 'car', 'cat']",true
"Create a function that processes an array to remove all the duplicated elements[1, 1, 2, 5, 6, 6, 10]","def remove_duplicates(arr):
  new_arr = []
  
  for i in arr:
    if i not in new_arr:
      new_arr.append(i)
  
  return new_arr
  
remove_duplicates([1, 1, 2, 5, 6, 6, 10])
# returns [1, 2, 5, 6, 10]"
Generate a Python code snippet to print the list of numbers from 0 to 9.,"for i in range(0,10):
    print(i)"
"Devise a Python code snippet to return the last character of a given string.string = ""stackoverflow""","last_char = string[-1]
print(last_char)"
"Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication and division.","class Calculator:
    def __init__(self):
        pass

    def add(self, a, b):
        return a + b
    
    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        return a / b"
Write a function to create a matrix NxN with values of 0 filled in.,"def generate_matrix(n):
    matrix = []
    for _ in range(n):
        matrix.append([0 for _ in range(n)])
    return matrix"
Design a function to input an array and sort it using QuickSort algorithm.,"def quicksort(arr): 
    if len(arr) <= 1:
        return arr
  
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)"
Create a program for calculating the surface area of a cube.,"def cube_area(length):
    # Surface area of a cube = 6* (length)^2 
    return 6* (length**2)"
Write a function for finding the minimum value in a given array.,"def find_min(arr):
    min_value = arr[0]
    for element in arr:
        if (element < min_value):
            min_value = element
    return min_value"
Write a REGEX pattern to match strings consisting of three numbers separated by a dash.,"^\d{1,3}-\d{1,3}-\d{1,3}$"
Design a function to calculate the GCD (greatest common divisor) of two given integers.,"def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a"
Construct a script that takes inputs from the user and prints out the Fibonacci sequence up to a given number.,"def fibonacci_seq(n):
    # Start and endpoints for the Fibonacci sequence
    num1 = 0 
    num2 = 1
  
    # List to store the sequence 
    Fibonacci_seq = [num1, num2]
  
    while num2 < n:
        num3 = num1 + num2 
        num1 = num2 
        num2 = num3
        Fibonacci_seq.append(num2)
  
    print(Fibonacci_seq)"
Generate a function in Python to compute the area of a rectangle.,"def area_rectangle(length, breadth): 
    return length * breadth"
"Modify the given line of code to print the message ""Hello World!""print(""Good Luck!"")","print(""Hello World!"")"
"Create a method to filter out odd numbers from an array.array = [6, 5, 9, 10, 11, 8]","def filter_odd_numbers(array): 
    result = [] 
    for i in array: 
        if i % 2 == 0: 
            result.append(i) 
    return result

# Driver code
array = [6, 5, 9, 10, 11, 8] 
print(filter_odd_numbers(array))"
Write a Python program to calculate the number of bits needed to represent an integer in binary form.,"def num_of_bits(num):
    return len(bin(num)[2:])

if __name__ == '__main__':
    print(num_of_bits(50))"
"Take the following list of temperatures in Celsius and convert them to Fahrenheit.[10, 15, 20, 25, 30]","def celsius_to_fahrenheit(celsius):
    return (celsius * (9/5)) + 32

if __name__ == '__main__':
    temperatures = [10, 15, 20, 25, 30]
    fahrenheit_temperatures = []
    for temp in temperatures:
        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))
    
    print(fahrenheit_temperatures)"
"Write a Python code to generate random numbers from the given list.[10, 20, 30, 40]","import random

numbers = [10, 20, 30, 40]

random_number = random.choice(numbers)

print(random_number)"
Find the number of occurrences of ‘Python’ in the given string.Python is a great language. Python is easy to learn.,"def count_occurences(str, word):
    return str.count(word)

if __name__ == '__main__':
    str = 'Python is a great language. Python is easy to learn.'
    print(count_occurences(str, 'Python'))"
"Remove any element from an array that is greater than 10[3, 5, 10, 20, 7]","def removeGreaterThanTen(arr): 
	# Create a new_arr array
    new_arr = [] 

    # Iterate each element in array
    for i in range(len(arr)):

        # Check if the element is greater than 10
        if arr[i] <= 10: 
            # Add the element to the new_arr
            new_arr.append(arr[i]) 

    return new_arr"
"Find the largest key in a dictionary{'a':1, 'b':5, 'c':6, 'd':9}","def findLargestKey(d): 
	# Initialize largest_key and largest_val
    largest_key = None
    largest_val = -1
	
    # Iterate each key-value in dictionary
    for key, value in d.items():
		# Initialize largest_key and largest_val
        if value > largest_val: 
            largest_val = value
            largest_key = key
  
    return largest_key"
"Create a function to get the intersection of two sorted arraysarr1 = [1, 3, 4, 5, 6] 
arr2 = [3, 5, 7, 8]","def intersection(arr1, arr2):
    # Initialize a result array
    res = [] 

    # Iterate each element of the first array and find in second array
    for i in range(len(arr1)): 
        for j in range(len(arr2)):
            # If element is present then append it to result array
            if arr1[i] == arr2[j]: 
                res.append(arr1[i])
  
    return res"
"Create a function that takes a list and returns a tuple containing the maximum and minimum values of the list.[1, 4, 7, 3, 8]","def maxMin(arr):
    # Initialize the maximum and the minimum value
    maxi = arr[0] 
    mini = arr[0] 
  
    # Iterate each element in arr to find the maximum and minimum
    for i in range(1, len(arr)): 
        if arr[i] > maxi: 
            maxi = arr[i] 
        elif arr[i] < mini: 
            mini = arr[i]
  
    return (maxi, mini)"
"Write a multi-line comment in Python describing what the following program does.def hello():
    print(""Hello World"")","""""""
This program prints ""Hello World"" when executed. 
It defines a function called ""hello"" that does not take any parameters 
and simply prints out ""Hello World"" when it is called.
"""""""
Create a Python Exception to handle Nonetype Error.,"try:
    my_list = [1, 2, 3]
    my_list[3]
except TypeError:
    print(""Error: Nonetype Found"")"
Create a variable in Python to store 10 multidimensional arrays.,"arrays = [[[1,2], [3,4]],
          [[5,6], [7,8]],
          [[9,10], [11,12]],
          [[13,14], [15,16]],
          [[17,18], [19,20]],
          [[21,22], [23,24]],
          [[25,26], [27,28]],
          [[29,30], [31,32]],
          [[33,34], [35,36]],
          [[37,38], [39,40]]]"
"Convert the Python code using the range function in the for loop to a list comprehension statement.my_list = []
for i in range(10):
    my_list.append(i)",my_list = [i for i in range(10)]
"Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer.","def generateFib(n): 
    fib = [0, 1] 
    while len(fib) < n : 
        fib.append(fib[-1] + fib[-2]) 
          
    return fib[:n]"
"Replace the ""TODO"" comment in the following Python statement with an appropriate value.count = 0
# TODO: add 1 to count","count = 0
count += 1"
Identify the class of the given IP address.IP Address: 192.168.1.1,Class C.
"Are these two strings equal?String 1: Hi
String 2: Hi","Yes, the two strings are equal."
"What is the http status code for ""Not Found""?",404.
"Find the slope of this line.Point 1 (3, 2)
Point 2 (6, 4)",The slope of the line is 0.5.
Write an angular directive to highlight the selected word in a text.,"myApp.directive('highlight', function() {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      attrs.$observe('highlight', function(word) {
        var text = element[0].innerHTML;
        if (word) {
          var regex = new RegExp('('+ word +'\\b)', 'gi');
          var replacedText = text.replace(regex, '<span class=""highlighted"">$1</span>');
          element[0].innerHTML = replacedText;
        } else {
          element[0].innerHTML = text;
        }
      });
    }
  };
});"
"Identify the wrong statement about the recursive function in the given code.def recursive(lr):
    # base case
    if lr is None:
        return
    
    for i in lr:
        recursive(i)
    # recursive call
    recursive(lr)","The function makes a recurrent call at the end of the function, which is redundant."
"Trace the output of the given program.def foo(x, y):
    if y > 0:
        return x + y
    else:
        return x * y

a = foo(2, 3)
b = foo(2, -2)

print(a, b)",5 -4
"Rewrite the following if-elif-else statement using the ternary operator.if x > y:
    result = ""x is greater than y""
elif x < y:
    result = ""x is less than y""
else:
    result = ""x is equal to y""","result =  x > y ? ""x is greater than y"" : ( x < y ? ""x is less than y"" : ""x is equal to y"" )"
Write an AppleScript program to open Calculator app.,"tell application ""Calculator""
    launch
end tell"
Find the number of prime numbers between 1 and 100.,25
"Edit the provided code so that it prints 10 rows and 10 columns of stars.for row in range(5):
    for col in range(5):
        print(""*"")","for row in range(10):
    for col in range(10):
        print(""*"", end="""")
    print()"
Develop a high-level algorithm for pathfinding.,"def find_path(start, end):
    # Create an empty list to store the path
    path = []

    # Create a dictionary to store visited nodes
    visited = {start: None}

    # Create a queue and add the initial space to it
    queue = [start]

    # Keep looping until the queue is empty
    while len(queue) > 0:
        # Get the first element in the queue
        curr = queue.pop(0)

        # Add the current node to the path
        path.append(curr)

        # Check if we reached the end of the path
        if curr == end:
            return path

        # Explore all neighbours of the current node
        for neighbour in get_neighbours(curr):
            # Check if the neighbour is not visited previously
            if neighbour not in visited:
                # Add the neighbour to the queue and mark it as visited
                queue.append(neighbour)
                visited[neighbour] = curr
    # If the queue is empty, there is no path
    return None"
Create a regular expression to match a string that contains a number followed by a letter.,/\d[a-zA-Z]/
Write a Python script to convert a given number of minutes into hours and minutes.,"def minutes_to_hours(minutes):
  hours = minutes // 60
  minutes = minutes % 60
  return hours, minutes"
"Look at the given code and find the bug in it.def add_numbers(x,y):
    return x + y + 1","The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y."
"Given a string, find the number of times a given character appears in the string.String: ""Hello World""
Character: ""l""","The given character 'l' appears 3 times in the given string ""Hello World""."
Write a Python code to sort a given list into descending order.,"def sortDescending(nums):
  nums.sort(reverse=True)
  return nums"
"Solve the following problem. Given an array of integers, return an array with the elements multiplied by two.arr = [2, 8, 10, 9]","def doubleElements(arr):
  return [num * 2 for num in arr]
  
arr = [2, 8, 10, 9]
print(doubleElements(arr)) // [4, 16, 20, 18]"
Calculate the value of PI using the Leibniz formula.,"def calculatePi():
    pi = 0.0
    N = 10000
    sign = 1
    for i in range(N):
        pi += 4.0 * sign / (2.0 * i + 1.0)
        sign *= -1
    return pi

print(""π = "", calculatePi()) # 3.141592653589793"
How do you define and call a function in Python?,"In Python, a function is defined using the `def` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called `myfunc` with an argument `x`:

def myfunc(x):
    # function implementation

myfunc(x)  # call the function with argument x"
In what languages can the TensorFlow library be used?,"The TensorFlow library can be used in Python, C++, JavaScript, Java, Go, Swift, and R. It is also supported in different platforms such as iOS, Android, and web browsers."
Create a GraphQL query that returns all the top five countries in terms of population.,"query {
  countries(first: 5) {
    name
    population
  }
}"
"Implement a bubble sort on the given array of integers.[4, 8, 1, 3, 9]","def bubble_sort(arr):
  for _ in range(len(arr) -1): 
    for i in range(len(arr)-1):
      if arr[i] > arr[i+1]:
        arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr
print(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]"
"Create a Python script that inputs an integer and prints ""odd"" if the number is odd, or ""even"" if the number is even.","def check_even_or_odd(num):
  if num % 2 == 0:
    print(""even"")
  else:
    print(""odd"")
  
check_even_or_odd(5) # odd"
"Re-implement the same program in a different language of your choice.def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)","def quick sort(arr):
    if len(arr) < 2:
        return arr
    else: 
        pivot = arr[0]
        left = [x for x in arr[1:] if x <= pivot]
        right = [x for x in arr[1:] if x > pivot]
        return quick_sort(left) + [pivot] + quick_sort(right)"
"Create a Python class for a movie instance with name, director, and year fields.","class Movie:
    def __init__(self, name, director, year):
        self.name = name
        self.director = director
        self.year = year"
"Create an algorithm to compute the greatest common divisor between two numbers.m = 8, n = 20","def gcd(m, n):
    # base case 
    if m == 0:
        return n
    
    # recursive case
    return gcd(n % m, m)

print(gcd(8, 20)) # Output: 4"
"Given a list of integers, determine the sum of all of elements in the list.[3, 4, 5, 6]","def get_sum(nums):
    total_sum = 0
    for num in nums:
        total_sum += num
    return total_sum"
Create a program that will guess a number between 0 and 10.,"import random

def guessing_game():
    secret_number = random.randint(0, 10)
    guess = int(input(""Guess a number between 0 and 10: ""))
    while guess != secret_number:
        print(""Incorrect! Try again."")
        guess = int(input(""Guess a number between 0 and 10: "")) 
    print(""Correct!"")"
Write an algorithm that takes in two integers and returns true if they are evenly divisible.,"def is_evenly_divisible(x, y):
    return x % y == 0"
Read a code that prints out the Fibonacci Series.,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
Create a code that recognizes if an inputted string is a palindrome or not.,"def is_palindrome(input_string):
    rev_input = input_string[::-1]
    return input_string == rev_input"
"You are given a list of integers and need to calculate the maximum number in the list.[3, 4, 7, 1]","def get_max(numbers):
    max_value = numbers[0]
    for number in numbers:
        if (number > max_value):
            max_value = number
    return max_value"
Write an algorithm that takes in two numbers and returns the remainder of the first number divided by the second number.,"def get_remainder(x, y):
    return x % y"
"Read a given code and determine if it contains any errors or not.def factorial(n):
    product = 1
    for i in range(2, 3):
        product *= i
    return product",true
"Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum.def getRange(min, max):","def getRange(min, max):
  return [i for i in range(min, max+1)]"
Create a function in Python that prints out all prime numbers between two given numbers.,"def print_primes(start, end):
    for num in range(start, end):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                print(num)"
"Generate the output given the following input to the Python function you wrote in  task 11.print_primes(5, 15)","5
7
11
13"
What is the difference between supervised learning and unsupervised learning?,"Supervised learning is a type of machine learning where the algorithm is given a labelled dataset and its goal is to learn a mapping between the given input and the given output. The labels in the dataset act as a supervisor to guide the algorithm towards its learning path.
Unsupervised learning is a type of machine learning where the algorithm is given an unlabelled dataset and its goal is to learn from the data and discover patterns and insights from the data without being given any explicit guidance. The algorithm must learn by itself how to organize the data and extract useful information from it."
"Write a code to find the day of the week corresponding to a given date using the calendar module?Day: 25
Month: December
Year: 2020","""""""
Find the day of the week corresponding to a given date using calendar module
""""""

import calendar

def get_day_of_week(day, month, year):
    dayNumber = calendar.weekday(year,month,day)
    dayName = calendar.day_name[dayNumber] 
    return dayName
    
if __name__ == '__main__':
    day = 25
    month = 12
    year = 2020
    print(get_day_of_week(day, month, year))"
What does a negative index signify in a Python array?,"A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1."
"Edit the following code to remove the syntax error so that the program will run correctly.def double(x):
return x * 2","def double(x):
    return x * 2"
"Change the following code to accept multiple arguments.func add(a, b) {
  return a + b;
}","func add(...args) {
  let result = 0;
  for (const arg of args) {
    result += arg;
  }
  return result;
}"
Generate a function `recursive_sum` that computes the sum of a list of integers recursively.,"def recursive_sum(lst): 
    # Base case
    if not len(lst): 
        return 0
    return lst[0] + recursive_sum(lst[1:])"
"Calculate the total sum of a given list using an accumulator pattern.numbers = [2, 3, 4]","numbers = [2, 3, 4]
total_sum = 0

# iterate through the list and add each element to the total sum
for n in numbers: 
    total_sum += n 
    
print(total_sum)"
"Using a while loop, print all numbers between 0 and a given number, 10.","i = 0
while i <= 10: 
    print(i)
    i+=1"
"Using list comprehension, create a list of all even numbers from 0 to 10.",even_numbers = [num for num in range(11) if num % 2 == 0]
"Extend the given list of numbers by adding all odd numbers from 0 to 10.my_list = [0, 2, 4, 6, 8, 10]","my_list = [0, 2, 4, 6, 8, 10]
my_list.extend([num for num in range(11) if num % 2 != 0])"
"Create a generator expression to print the square of a list of numbers.numbers = [1, 2, 3, 4, 5]","numbers = [1, 2, 3, 4, 5]

# generator expression
squares = (num ** 2 for num in numbers)

for square in squares: 
    print(square)"
"Utilize regular expressions to parse and return a list of words from a sentence.sentence = ""The quick brown fox jumps over the lazy dog""","sentence = ""The quick brown fox jumps over the lazy dog""

# regular expression
import re
words = re.findall(r'\w+', sentence)

print(words)"
"Sort a given dictionary of strings alphabetically.my_dict = {'a':""apple"", 'c':""cat"", 'b':""banana""}","my_dict = {'a':""apple"", 'c':""cat"", 'b':""banana""}

# sort the dictionary
sorted_dict = {key: my_dict[key] for key in sorted(my_dict.keys())}

print(sorted_dict)"
"Compare two arrays for equality[1, 2, 3]
[1, 2, 4]",False
"Write a for loop that iterates through a list of numbers and prints only the even numbers.[1, 2, 3, 4, 5, 6]","for i in [1,2,3,4,5,6]:
    if i % 2 == 0:
        print(i)"
"Create a class Person with a name, age and gender attributes.","class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender"
Write a lambda expression to deduct 10 from a number.,lambda x: x-10
"Create a dictionary with the item and their corresponding prices.Apple - $2.99
Banana - $0.99","d = {'Apple': 2.99, 'Banana': 0.99}"
Construct an appropriate list of even numbers between 0 and 10.,"[0, 2, 4, 6, 8, 10]"
"Remove the first element in a list using slicing.[1, 2, 3, 4, 5]",list[1:]
"Write a class to define a car object with the attribute of brand, model and year.","class Car:
    def __init__(self, brand, model, year):
        self.brand = brand
        self.model = model
        self.year = year"
"Using the .sort() method, sort an array in ascending order.[5, 3, 9, 1]",arr.sort()
"Write a for loop to print out the squared value of each element in the list.[1, 2, 3, 4]","for i in [1,2,3,4]:
    print(i*i)"
Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided.num = 10,"def generate_square_list(num):
    result = []
    for i in range(1, num+1):
        result.append(i*i)
    return result"
"Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line.sentences = [""Hello"", ""My name is"", ""John"", ""Nice to meet you!""]","for sentence in sentences:
    print(sentence)"
"In the following Python function, insert code to check if the given number is even or odd.def check_num(num):
    # TODO
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")","def check_num(num):
    assert isinstance(num, int), ""num must be an integer value""
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")"
Output the binary representation of a given number.14,1110
"Identify any typos or grammatical errors in this sentence.Emmm, it seemms so.","typos: ""seemms"" 
grammatical errors: none"
"Fix the bug in this code.def calculate_area(length, width):
area = (length * width)
if area > 20:
    return 'Area too large'","def calculate_area(length, width):
area = (length * width)
if area > 20:
    return 'Area too large'
else:
    return area"
"Convert the given date into the ISO 8601 date format.April 15th, 2020",
"Find the simplest possible way to print ""Welcome to Tech World!"" five times.","for _ in range(5):
    print(""Welcome to Tech World!"")"
"Calculate the mean of the following list of numbers: 4, 6, 8, 10.",mean = (4 + 6 + 8 + 10) / 4 = 7.5
"Add try-catch block for the code below.x = 1
y = 0
print(x / y)","try:
    x = 1
    y = 0
    print(x / y)
except ZeroDivisionError:
    print(""Cannot divide by zero!"")"
Write a function that prints Fibonacci numbers up to N (N>1).,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2, n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Create an array of 5 students and output their names.var students = [
  {name: 'John', age: 19},
  {name: 'Amy', age: 22},
  {name: 'Luke', age: 17},
  {name: 'Alex', age: 18},
  {name: 'Tom', age: 20}
];","names = [students[0].name, students[1].name, students[2].name, students[3].name, students[4].name];
console.log(names);
// output: ['John', 'Amy', 'Luke', 'Alex', 'Tom']"
"Create a for loop that reads an array of strings and prints each stringvar strings = [""Hello"", ""world"", ""how"", ""are"", ""you""];","for(var i=0; i < strings.length ;i++){
   console.log(strings[i]);
}
//output:
//Hello
//world
//how
//are
//you"
"Create an object with two fields, a name and an id.","var obj = {
   name: 'John', 
   id: '12345'
};"
"Write a script that sorts an array of numbers from smallest to largest.var numbers = [3, 7, 4, 2, 9, 1];","numbers.sort(function(a, b){
    return a-b
});
console.log(numbers); //output: [1, 2, 3, 4, 7, 9]"
Write a function that takes a string and turns it into all uppercase.var string = 'Hello World';,"function toUpperCase(string) {
   let upperCaseString = string.toUpperCase();
   return upperCaseString;
}

toUpperCase(string); //output: HELLO WORLD"
"Write a Python function to sort the given array of dictionaries by key value.arr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}]","def sort_by_key(arr):
 return sorted(arr, key=lambda i: i['name'])"
Specify a type for the following variable in C.char c = '&';,char c = '&'; //Type is char.
Compress the following data using RLE algorithm.AABBCC,AABBCC --> A2B2C2
"Create a function to calculate the Euclidean distance from (x, y) to (a, b).","def euclidean_distance(x, y, a, b):
     return np.sqrt((x-a)**2 + (y-b)**2)"
Provide a solution for displaying another message if the user's input is invalid.name = input('What's your name? '),"name = input('What's your name? ')
if not name.isalpha():
    print('Error: Invalid input.')"
"Create a program that outputs the results of an election.votes = [(""A"", 55), (""B"", 43), (""C"", 21)]","votes = [(""A"", 55), (""B"", 43), (""C"", 21)]

total = 0
for name, count in votes:
    total += count

for name, count in votes:
    print(""{}: {:.2f}%"".format(name, count/total*100))

# Output: 
# A: 59.77%
# B: 47.60%
# C: 23.63%"
"Find the running time of this code snippet.list = [2, 5, 1, 6, 9]
x = 0

for item in list:
    x += item","The running time of this code snippet is O(n), where n is the length of the list."
Create a Visual Studio Code extension that provides auto-complete features for a specific language.,"This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly."
Provide the logic for sorting an array of strings alphabetically.,"for i in range(len(arr)):
    for j in range(i + 1, len(arr)):
        if arr[i] > arr[j]:
            arr[i], arr[j] = arr[j], arr[i]"
"Replace the character at the second index with ""X"".s = ""Hello!""","s = ""Hello!""
new_str = s[:1] + ""X"" + s[2:]
print(new_str) # Output: HXllo!"
Suggest a possible numpy code to normalize a data in the following manner.Normalize the data such that the values lie in the range 0-1.,"import numpy as np

def normalize(arr):
    arr = np.array(arr)
    return (arr - arr.min()) / (arr.max() - arr.min())"
"Suggest a code to sort the following array of strings.[""dinosaur"", ""cat"", ""dog"", ""elephant"", ""tiger""]","arr = [""dinosaur"", ""cat"", ""dog"", ""elephant"", ""tiger""]
arr.sort()"
"Fill in the __ in the following code to print the reversed string.original_string = ""Hello World""
 
reversed_string = original_string[ __ : __ ]

print(reversed_string)","original_string = ""Hello World""
 
reversed_string = original_string[::-1]

print(reversed_string)"
"Construct a code to add a new item to the end of the list.list_of_items = [""apple"", ""orange"", ""cherry""]","list_of_items = [""apple"", ""orange"", ""cherry""]
list_of_items.append(""banana"")"
"Suggest a python code to print all the even numbers from the given list.list_of_numbers = [11, 22, 31, 37, 44]","list_of_numbers = [11, 22, 31, 37, 44]
for num in list_of_numbers:
    if num % 2 == 0:
        print(num)"
Construct an algorithm to check for palindrome in a given string.,"def is_palindrome(text):
	rev = ''.join(reversed(text)) 
	return rev == text"
"Suggest a code to iterate a list of numbers and add them to a variable.list_of_numbers = [10, 20, 30, 40]","list_of_numbers = [10, 20, 30, 40]

total = 0
for num in list_of_numbers:
  total += num"
"Suggest a code to print the last two elements of a list.list_of_items = [""apple"", ""banana"", ""cherry"", ""orange""]","list_of_items = [""apple"", ""banana"", ""cherry"", ""orange""]

last_two = list_of_items[-2:]
print(last_two)"
"Suggest a code to insert an element at the nth position of a given list.list_of_items = [""apple"", ""banana"", ""grapes"", ""mango""]","list_of_items = [""apple"", ""banana"", ""grapes"", ""mango""]

list_of_items.insert(2, ""pineapple"")"
"Suggest a code to remove the third element of a list.list_of_items = [""apple"", ""banana"", ""cherry"", ""orange""]","list_of_items = [""apple"", ""banana"", ""cherry"", ""orange""]

list_of_items.pop(2)"
"Create a pandas DataFrame based on the given input CSV.EmployeeID,EmployeeName,Salary
1,John,12345
2,David,23456
3,Steve,34567","import pandas as pd

df = pd.read_csv(""input.csv"")
print(df)"
Propose a fast sorting algorithm for a list of integers,"The QuickSort algorithm is a fast sorting algorithm for a list of integers. QuickSort is a divide and conquer algorithm, meaning it divides a list into smaller lists and then sorts and combines the lists. It starts by partitioning the input list around a pivot element, then recursively sorts the two partitions and recombines them. Its average time complexity is O(n log n) with a space complexity of O(n)."
Design a function to generate the random password,"import random

def generate_password():
    #Declare a string of all possible characters
    all_chars = ""1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-`'""
    #Declare the length of password
    password_len = 8
    #Create empty string
    password = """"
    for i in range(password_len):
        #Generate a random index
        rand_index = random.randint(0, len(all_chars)-1)
        #Append character at the index to password
        password += all_chars[rand_index]
    return password"
"Inside a Python program, how would you convert a float number to a string?",str_number = str(float_number)
"Develop a Python function that returns the first two characters of a string.string = ""GPT-3""","def first_two_chars(string):
  return string[:2]"
Reverse a string using a stack.string: hello,"def reverse_string_using_stack(string): 
    stack = []
    for char in string:
        stack.append(char)
    reversed_string = ''
    while len(stack) > 0: 
        reversed_string += stack.pop()
    return reversed_string"
"Calculate the distance between two points using Pythagoras theorem.Point A: (3, 4) Point B: (7, 8)","distance = sqrt((7-3)^2 + (8-4)^2)
= sqrt(16 + 16)
= sqrt(32)
= 5.657"
Create an RNN model to classify emails into spam and not spam.,"#imports
import tensorflow as tf 
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout 
#Model
model = tf.keras.models.Sequential([
    Embedding(vocab_size, embedding_dim, input_length = max_len),
    LSTM(128),
    Dense(64, activation = 'relu'),
    Dropout(0.25),
    Dense(1, activation = 'sigmoid')
])"
"Write an algorithm for sorting a given array of numbers.array: [2, 5, 3, 4, 1]","function sort(array) { 
  for (let i = 0; i < array.length - 1; i++) { 
    for (let j = 0; j < array.length - i - 1; j++) { 
      if (array[j] > array[j+1]) { 
        let temp = array[j]; 
        array[j] = array[j+1]; 
        array[j+1] = temp; 
      } 
    } 
  } 
  return array; 
}"
"Develop a solution to this algorithm problem.Given an int array A, find the min absolute difference between any two of its elements.","def minAbsDifference(arr):
    min_difference = float(""inf"")
    for i in range(len(arr)):
        for j in range(i+1,len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff < min_difference:
                min_difference = diff
    return min_difference"
"Design a program that produces the following output: 
 . . . . . . . . . . . . . . . . . . . . .","#include <iostream>

int main() 
{
    for (int i=0; i<17; i++) {
        std::cout << ""."";
    }

    std::cout << std::endl;

    return 0;
}"
"Write a Python code to print the following output:
day     temperature
Monday    20
Tuesday   25","print(""day     temperature"")
print(""Monday    20"")
print(""Tuesday   25"")"
"Write a code to flatten a two-dimensional list into one-dimensional list in Python.Two-dimensional List: [[1,2], [3,4], [5,6]]","def flatten_2d_list(lst):
  flat_list = []
  for elem in lst:
    for item in elem:
      flat_list.append(item)
  return flat_list

test_list = [[1,2], [3,4], [5,6]] 
print(flatten_2d_list(test_list))"
How can we dynamically add an element to a set in Python?,"In Python, we can dynamically add an element to a set using the add() method. For example, 

s = set()
s.add(4)
print(s)"
"Change the following list of strings to uppercase in Python.List: ['one', 'two', 'three']","list_strings = [""one"", ""two"", ""three""]

list_strings = [string.upper() for string in list_strings]

print(list_strings)"
Create a python function that computes the area of a rectangle given the length and width.,"def calculateRectangleArea(length, width):
  area = length * width
  return area"
"Create a regular expression that matches strings that start with a certain prefix, followed by two or more numbers, and ending with two or more alphabet characters.prefix = ""ABC""","import re
 
prefix = ""ABC""
pattern = re.compile('^' + prefix + '\d{2,}[A-Za-z]{2,}$')"
"Edit the program below to print out the square root of a number.#include <iostream> 
 
int main() 
{ 
    int number; 
  
    std::cout << ""Enter an integer: ""; 
    std::cin >> number; 
  
    // Add code to print square root of the number 
  
    return 0;
}","#include <iostream> 
#include <cmath>
 
int main() 
{ 
    int number; 
  
    std::cout << ""Enter an integer: ""; 
    std::cin >> number; 
  
    // Add code to print square root of the number 
    std::cout << ""Square root of "" << number << "" is: "" << sqrt(number) << std::endl;
  
    return 0;
}"
Create an algorithm to classify a given set of data into three classes.,"from sklearn.neighbors import KNeighborsClassifier
import numpy as np

# X is the training data
X = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]])

# y is the labels of the classes
y = np.array([0, 0, 1, 1, 2, 2, 2])

# Create the model
model = KNeighborsClassifier(n_neighbors=3)

# Fit the model using the training data
model.fit(X, y)

# Use the model to make predictions 
prediction = model.predict([[2, 3]])

print(prediction)"
"Create a query to find all unique combinations of size two in a given list.[1, 2, 3, 4]","SELECT DISTINCT a.val AS val1, b.val AS val2
FROM myTable a
JOIN myTable b
ON a.id <> b.id
WHERE a.val IN (1,2,3,4)
AND b.val IN (1,2,3,4)
ORDER BY a.val, b.val;"
"Create an algorithm to calculate the mean, mode and median in a given set of numbers.","def mean(nums):
    return sum(nums)/len(nums)

def mode(nums):
    countDict = {}
    for num in nums:
        if num in countDict:
            countDict[num] += 1
        else:
            countDict[num] = 1
    maxValue = 0
    maxKey = -1
    for key, value in countDict.items():
        if value > maxValue:
            maxValue = value
            maxKey = key
    return maxKey

def median(nums):
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2
    else:
        return nums[(len(nums)-1)//2]

if __name__ == '__main__':
    nums = [1,2,2,2,3,4,5]
    print(""Mean: "", mean(nums))
    print(""Mode: "", mode(nums))
    print(""Median: "", median(nums))"
"In Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*).","def replace_vowels(string):
	vowels = ""aeiou""
	result = """"
	for char in string:
		if char in vowels:
			char = ""*""
		result += char
	return result"
"In Python, write a function to print out a sequence of numbers from 1 to 10.","def print_sequence():
  for i in range(1, 11):
    print(i)

print_sequence() # Output: 1 2 3 4 5 6 7 8 9 10"
How can you generate a random number in the range of 1 to 10 in Python?,"import random
random_number = random.randint(1, 10)"
"Convert the following 10 bytes data into a string.b""\x00\x0f\x14\x03\x11\x07\x08\x13\x05\x10""","data = b""\x00\x0f\x14\x03\x11\x07\x08\x13\x05\x10""
output_string = data.decode()
print(output_string) # Output: ""ؐءؔ؃ؗ؈ؓ"""
What is a MongoDB document?,A MongoDB document is a record in a NoSQL database that is represented in the form of a JSON-like structure. It contains a set of key-value pairs where each key is associated with a specific value. Documents can also be nested and can contain arrays and other documents.
"Write a function to split a string of words by comma.string = 'apple,orange,banana,grapes'","def split_by_comma(string):
    return string.split("","")"
"Calculate the maximum element in the given list.my_list = [2, 1, 7, 5, 3]","def max_element(my_list): 
    max_num = my_list[0] 
    for num in my_list: 
        if num > max_num: 
            max_num = num
    return max_num"
Modify the code below to pull data from the API endpoint provided.Endpoint: https://jsonplaceholder.typicode.com/posts,"import requests

url = 'https://jsonplaceholder.typicode.com/posts'

response = requests.get(url)
data = response.json()

for post in data:
    title = post['title']
    body = post['body']
    
    print('Title: ', title)
    print('Body: ', body)"
Create a report in PDF format that displays the most frequent words used in the New York Times articles.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from textblob import TextBlob
from nltk.tokenize import word_tokenize 
from nltk.tokenize import sent_tokenize
from nltk.probability import FreqDist
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

def get_top_words(string):
 tokenized_words = word_tokenize(string)
 freqdist = FreqDist(tokenized_words)
 return freqdist.most_common(15)

# Download nltk dependencies
# nltk.download('punkt')
# nltk.download('vader_lexicon')

# Scrape news articles
articles = scrape_nyt()

# Get top words
top_words = []
for article in articles:
 top_words.append(get_top_words(article))

# Create PDF report
pp = PdfPages('nyt_word_freq.pdf')
plt.figure(figsize=(15,10))
plt.bar(*zip(*top_words))
plt.xticks(rotation=90)
pp.savefig()
pp.close()"
"Construct an algorithm to predict the next 3 days' stock market movements given the stock prices from the past 5 days.[69.04, 67.07, 68.3, 68.91, 70.09]","def predict_stock_movements(data):
# Initialize empty list to store predicted values
predictions = []

# Iterate over the given data
for i in range(len(data)-2):
 # Calculate the average of the 5 days
 avg = sum(data[i:i+3])/3
 # Calculate the current and past day market movement
 curr_mov = data[i+2] - data[i+1]
 past_mov = data[i+1] - data[i]
 # Predict the next day
 prediction = avg + curr_mov + past_mov
 predictions.append(prediction)

return predictions"
"Create a program to determine whether a given sequence is an arithmetic progression or not.[-6, -2, 2, 6]","def is_arithmetic_progression(arr):
 # Check if the given array is empty
 if len(arr) == 0:
  return False
 # Initialize the common difference and the first element
 commonDifference = arr[1] - arr[0]
 firstElement = arr[0]
 # Iterate over the array
 for i in range(len(arr)):
  if arr[i] != firstElement + (i * commonDifference):
   return False
 # If all elements are in an arithmetic progression
 return True"
"Construct a classifier to identify which programming language a given code snippet belongs to.def foo(x, y):
 return x + y","from sklearn.feature_extraction.text import CountVectorizer 
from sklearn.naive_bayes import MultinomialNB

def get_features(code):
 # Count the words in the code
 vectorizer = CountVectorizer(token_pattern=r""(?u)\b\w+\b"")
 count_vectors = vectorizer.fit_transform([code])
 return count_vectors.toarray()

def classify_language(code):
 # Training data
 data = [(""Python"", ""def foo(x, y):\n return x + y""),
 (""Java"", ""public int foo(int x, int y) {\n return x + y;\n }""),
 (""C++"", ""int foo(int x, int y) {\n return x + y;\n }""),
 (""JavaScript"", ""function foo(x, y) {\n return x + y;\n }"")]
 languages, codes = zip(*data)
 
 # Extract features from the code
 X_train = [get_features(c) for c in codes]
 # Train a classifier
 clf = MultinomialNB().fit(X_train, languages)
 # Extract features from the given code
 X_input = get_features(code)
 # Predict the language
 return clf.predict([X_input])[0]"
"Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.""cats"", ""dogs""","def levenshtein_distance(str1, str2):
 # Create a matrix for storing the distances
 m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]
 # Mark the first Edit Distance value as 0
 m[0][0] = 0
 
 # Iterate over the matrix 
 for i in range(0, len(str1) + 1):
  for j in range(0, len(str2) + 1):
   # If we are at the first row or first col, mark the cells with corresponding numbers
   if i == 0:
    m[i][j] = j
   elif j == 0:
    m[i][j] = i
   # Otherwise, calculate the distance according to the  formula
   else:
    if str1[i-1] == str2[j-1]:
     m[i][j] = m[i-1][j-1]
    else:
     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1
  
 # Return the last element in the matrix, which is the Levenshtein Distance
 return m[-1][-1]"
Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not.,"import re

def is_valid_url(url):
 # Check if the URL is valid using a regex
 regex = re.compile(r""^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$"")
 if regex.match(url):
  return True
 return False"
"Write a function to remove duplicate elements from a list keeping only the first occurrence of each element.[1, 2, 3, 3, 3, 4, 4, 5]","def remove_duplicates(nums):
 # Create a list to store the first occurrence of each number
 seen = []
 # Iterate over the list
 for num in nums:
  # If the number is not in the seen list, add it
  if num not in seen:
   seen.append(num)
 return seen"
"Create a function that takes a list of strings as input and returns a string of the list sorted in the alphabetical order.[""apple"", ""banana"", ""cherry""]","def sort_strings_alphabetically(words):
# Use the built-in sorted() function to sort the list of strings
sorted_words = sorted(words)
# Join the sorted list of words separated by spaces
return "" "".join(sorted_words)"
"Modify the following code so that it prints the reversed version of a list.list1 = [1, 2, 3, 4, 5]

def print_reverse_list(my_list):","list1 = [1, 2, 3, 4, 5]

def print_reverse_list(my_list):
    my_list.reverse()
    print(my_list)"
Suggest a method to run a python program from an interactive terminal session.,"The simplest way to run a python program from an interactive terminal session is to use the ""python"" command. For example, if you have a file called ""myprog.py"", you can type ""python myprog.py"" at the command line and the program will be executed. Alternately, you can use the ""execfile"" command, which takes a file name as an argument and executes it."
Create a class representing a car,"class Car:
    def __init__(self, make, model, year, engine_size):
        self.make = make
        self.model = model
        self.year = year
        self.engine_size = engine_size"
Suggest a way to check if a given string contains alphanumeric characters,"The simplest way to check if a given string contains alphanumeric characters is to use the built-in isalnum() method which will return True if the string contains at least one alphanumeric character and False otherwise. Example:

my_string = 'Hello123'

if my_string.isalnum():
    print('Contains alphanumeric characters')
else:
    print('Does not contain alphanumeric characters')"
"Modify the following code to insert the element 'x' into the list at position 'index'list1 = [1, 2, 3, 4, 5]
x = 6
index = 3","list1 = [1, 2, 3, 4, 5]
x = 6
index = 3

list1.insert(index, x)"
Create a regex expression to match with a specific format of email address.,"/([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/"
"Retrieve unique values from a list of integers.List: [3, 5, 7, 3, 4, 6, 7, 8]","[3, 5, 7, 4, 6, 8]"
Perform sentiment analysis on the following sentence and indicate if it is positive or negative.Sentence: I had a really bad experience at the shop.,Negative sentiment.
Create a matrix in R and fill it with random numbers.Size: 4 x 5,"matrix2 <- matrix(runif(n = 20, min = 0, max = 10), nrow = 4, ncol = 5)"
Convert the following hex color to RGB.Hex Color: #4286f4,"RGB(66, 134, 244)"
Implement a constructor to create an accountclass Account:,"def __init__(self, name, balance):
  self.name = name
  self.balance = balance"
Generate a regular expression to match the following patternswxyz - w:[a-c] x:[0-9] y:[a-z] z:[A-Z],^[a-c][0-9][a-z][A-Z]$
"Identify the time complexity for the following piece of codearr = [5, 2, 4, 8, 1]
for i in range (len(arr)):
   for j in range (len(arr)):",O(n^2)
Implement a function to remove all occurrences of an element in a given list,"def remove_element(list, element): 
    return [x for x in list if x != element]"
"Recognize the type of error in the given code and provide which line of code is causing the error.def divide(numerator, denominator):
    return numerator / denominator

number = int(input(""Enter a number: ""))
    result = divide(100, number)",Line 4 is causing a syntax error due to improper indentation.
"Retrieve all the values from the nested dictionary.data_dict = {
'key1': {
  'inner_key1': ""1"",
  'inner_key2': ""2""
},
'key2': {
  'inner_key1': ""3"",
  'inner_key2': ""4""
}
}","for key1_value in data_dict.values():
  for (inner_key1, inner_key2) in key1_value.items():
    print(inner_key1, inner_key2)"
Grant access to content by creating a function that takes in an age and returns a boolean.Age: 20,"def check_age(age):
  if age < 18:
    return False
  else:
    return True"
"Fix any code errors in the given function.def addToList list: num
  list.append(num)
  return list","def addToList(List, num):
  List.append(num);
  return List"
Construct a lambda expression to multiply the numbers by 2.,x = lambda n : n * 2
"Create a class to store a given list of strings.List: ['hello', 'world', 'hi']","class StrList:
 def __init__(self, str_list):
    self.str_list = str_list
   
  def get_list(self):
    return self.str_list"
"Get the name and message property from the given dictionary.data = {
'name': 'John',
'message': 'Hello World!',
'city': 'New York'
}","name = data['name']
message = data['message']"
"Find the most commonly used element in a given list.List: [8, 1, 7, 7, 4, 8, 8, 7]","from collections import Counter

list = [8, 1, 7, 7, 4, 8, 8, 7]

most_common = Counter(list).most_common(1)[0]

print(""Most common element is {}"".format(most_common[0]))"
"Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target.numbers = [2, 4, 8, 9, 5, 7], target = 15","def sublist_sum(numbers, target) : 
    n = len(numbers) 
  
    # Consider all sublists of arr[] and return 
    # true if given sum is present in any of them 
    for i in range(n) : 
        curr_sum = numbers[i] 
  
        # Try different endpoints for current subarray 
        j = i+1
        while j<=n : 
  
            if curr_sum == target : 
                return True
  
            if curr_sum > target or j == n: 
                break
  
            curr_sum = curr_sum + numbers[j] 
            j += 1
  
    return False"
"Write a Python script to calculate the total of all the elements in a nested list.nested_list = [[1,2,3], [4,5,6], [7,8,9]]","def sum_of_nested_list(nested_list):
    total = 0
    for internal_list in nested_list:
        for num in internal_list:
            total += num
    return total"
"Change all the character in a given string to its corresponding upper case.string = ""I love programming.""",string.upper()
"Write a Python script to find the maximum depth of a given nested list.nested_list = [[1,2], [3,4], [5,6,7]]","def max_depth_of_nested_list(nested_list):
    max_depth = 1
    for inner_list in nested_list:
        depth = 1
        if type(inner_list) == list:
            depth += max_depth_of_nested_list(inner_list)
        max_depth=max(depth, max_depth)
    return max_depth"
"Modify the following script to format the output to just two decimal places.original_script.py

import math

a = math.pi
print(a)","import math

a = math.pi
print(""{:.2f}"".format(a))"
"Given a list of integers, write a Python code to return the most frequent item.num_list = [3, 7, 8, 8, 5, 7, 8, 6, 8]","ModeElement = max(set(num_list), key = num_list.count) 
print(""Most Frequent Element : "", ModeElement)"
Generate a random list of 20 unique numbers from 0 to 30.,"[3, 5, 12, 11, 14, 0, 22, 19, 10, 6, 1, 25, 18, 27, 24, 16, 17, 21, 20, 15]"
Create a function to calculate the factorial of 5 using Python.,"def factorial(n): 
   if n == 0: 
       return 1
   else: 
       return n * factorial(n-1) 
print(factorial(5)) # Output: 120"
"Given an array of integers, write an algorithm to sort them in an ascending order.arr = [23, 32, 19, 17, -5, 3]","let arrLength = arr.length;
let temp;

for(i = 0; i < arrLength; i++){
   for(j = 0; j < (arrLength - i - 1); j++){
	   // Compare two adjacent elements
       if(arr[j] > arr[j+1]){
          // Swap them
          temp = arr[j];
          arr[j] = arr[j+1];
          arr[j+1] = temp;
       }
    }
}

console.log(arr); // Output: [-5, 3, 17, 19, 23, 32]"
"Create a function to check if two strings are an anagram of one another using Python.str1 = 'cat'
str2 = 'tac'","def anagram_checker(str1, str2): 
    if (len(str1)==len(str2)): 
        if ("""".join(sorted(str1.lower())) == """".join(sorted(str2.lower()))): 
            return True
        else: 
            return False"
"Build a Lambda function using Python to calculate the sum of two numbers.n1 = 5
n2 = 8","def add_two_numbers(n1, n2):
 return n1 + n2"
What is the capital of Spain?,The capital of Spain is Madrid.
"Utilize a regular expression to match all words that begin with 'b' in a given text.text = ""The quick brown fox jumps over the lazy dog.""","import re

text = ""The quick brown fox jumps over the lazy dog.""
word_list = re.findall(r""\b[bB]\w+"", text)

print(word_list)
# output: ['brown', 'fox', 'b jumps', 'b lazy']"
Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7.,"numbers = []
for i in range(51):
  if i % 7 == 0:
    numbers.append(i)
print(numbers)
# output: [0, 7, 14, 21, 28, 35, 42, 49]"
Build a TensorFlow model to perform sentiment analysis on text.,"import tensorflow as tf

# Get the data
dataset = tf.keras.utils.get_file(
  'aclImdb_v1.tar.gz', 
  'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')

# Load the data and prepare it for the model
reviews_train, reviews_test, labels_train, labels_test \
  = tf.keras.datasets.imdb.load_data(
    path=str(dataset)[:-7] + ""/aclImdb/train/"")

# Convert the integers back to words
word2id = tf.keras.datasets.imdb.get_word_index()
word2id = {k:(v+3) for k,v in word2id.items()}
word2id[""<PAD>""] = 0
word2id[""<START>""] = 1
word2id[""<UNK>""] = 2 
word2id[""<UNUSED>""] = 3

id2word = {value:key for key,value in word2id.items()}

# Model for sentiment analysis
model = tf.keras.Sequential([
  tf.keras.layers.Embedding(input_dim=len(word2id)+1, output_dim=256),
  tf.keras.layers.GlobalAveragePooling1D(),
  tf.keras.layers.Dense(256, activation=tf.nn.relu),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)
])

model.compile(
  optimizer='adam', 
  loss='binary_crossentropy', 
  metrics=['accuracy']
)

model.fit(
  reviews_train, 
  labels_train, 
  epochs=10,
  validation_data=(reviews_test, labels_test)
)"
"Create a program to sum numbers in a given range m to n inclusive.m = 4, n = 8","def sum_in_range(m, n):
    sum = 0
    for i in range(m, n+1):
        sum+=i
    return sum"
Write a Python code snippet to get the first 1000 prime numbers.,"primes = []
n = 2
while len(primes) < 1000:
 if is_prime(n):
 primes.append(n)
 n += 1

print(primes)"
"Write a Python code snippet to sum up all the elements in a given dictionary.{
  'a': 10,
  'b': 15,
  'c': 20
}","d = {'a': 10, 'b': 15, 'c': 20} 

print(sum(d.values())) # Output: 45"
"Create a function to flatten a 2D array.[[1, 2], [3, 4], [5, 6]]","def flatten_2D_array(arr):
    """"""
    A function to flatten a 2D array.
    Input: A 2D array.
    Output: A 1D array.
    """"""
    flattened_arr = []
    for sub_arr in arr:
        flattened_arr += sub_arr
    return flattened_arr"
"Write a code to take in a string and determine if the string is a palindrome or not.string = ""civic""","def is_palindrome(string):
    """"""
    Return True is the input string is a Palindrome, False if not.
    Input: string
    Output: Boolean
    """"""
    # Cast input to string
    if not isinstance(string, str):
        string = str(string)
    
    # Reverse the string
    rev_string = string[::-1]
    
    #Compare original string with reversed string
    if string == rev_string:
        return True
    else:
        return False"
"Create a code to search a given string for a specific keyword and return the index of the keyword.text = ""Report on the COVID-19 pandemic""
keyword = ""COVID-19""","def search_string(text, keyword):
    """"""
    A function to search a given string for a specific keyword and return the index of the keyword.
    Input: string, keyword
    Output: integer or None
    """"""
    # Use the find() method to search the string
    index = text.find(keyword)
    
    # Return None if the keyword was not found
    if index == -1:
        return None
    # Return the index if the keyword was found
    else:
        return index"
"Create a code to format the given text using a given indentation level.text = ""This is a sample text to format.""
indentation = 4","def indent_text(text, indentation):
    """"""
    A function to format the given text using a given indentation level.
    Input: string, integer
    Output: string
    """"""
    # Split the text into lines
    lines = text.splitlines()
    # Iterate through each line of the text
    for i in range(len(lines)):
        # Add the indentation to each line
        lines[i] = "" "" * indentation + lines[i]
    # Join all the lines
    indented_text = ""\n"".join(lines)
    
    return indented_text"
"Develop a code to rotate a given list by a given value.my_list = [1, 2, 3, 4, 5]
k = 3","def rotate_list(my_list, k):
    """"""
    A function to rotate a given list by a given value.
    Input: list, integer
    Output: list
    """"""
    # Get the length of list
    length = len(my_list)
    
    # Rotate the list
    rotated = my_list[-k % length:] + my_list[:-k % length]
    
    return rotated"
"What's the output of this program in Python given the following input?input_string = ""Hello, World!""   
list_of_chars = list(input_string)

for current_char in list_of_chars:
 print(current_char)","H
e
l
l
o
,
 
W
o
r
l
d
!"
Think of a situation where you would use recursion.,"Recursion can be used when performing a task that can be broken down into smaller, simpler parts. For example, performing a Depth-First Search on a Graph. It can also be used when implementing algorithms to solve complex problems such as finding the largest number in a list or creating a binary search tree."
Create a program in Haskell that multiplies any given number by 2.x = 10,"multiplyByTwo x = x * 2

main = do
  let x = 10
  let result = multiplyByTwo x
  print result"
"Suppose you have a list of integers. Write a program in R language to compute the minimum of the list.list_of_integers <- c(5,9,7,8,2,1)","min_val <- min(list_of_integers)
print(min_val)"
"Write a code to collect the name, email address, and phone number from the user.","name = input(""What is your name? "")
email = input(""What is your email address? "")
phone = input(""What is your phone number? "")"
"You need to tell the assistant which language is this code written in.#include <iostream>
using namespace std;
int main()
{
    int a = 10, b= 15;
    int c = a + b;
    cout << ""The sum of "" << a << "" and "" << b << "" is: "" << c << endl; 
    return 0;
}",C++
Describe in one sentence how a given neural network model works.A convolutional neural network,"The convolutional neural network utilizes convolutional filters to learn features in an input, followed by layers of non-linear processing to produce an output."
"Edit the following Python code to make it error-free.a = 33
ab = a +","a = 33
ab = a + b"
"Convert the following recursive function to an iterative one.def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n - 1)","def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result = result * i
    return result"
"Sanitize the following user input.""user' OR '1'='1""","String sanitizedInput = input.replaceAll(""[\""\']"","""");"
"Generate a Python class definition for a pig object that includes the following properties.name: string
color: string
age: integer","class Pig(object):
    def __init__(self, name, color, age):
        self.name = name
        self.color = color
        self.age = age
    
    def set_name(self, name):
        self.name = name
    
    def set_color(self, color):
        self.color = color
    
    def set_age(self, age):
        self.age = age"
"Delete the elements at indices 2 and 4 in the following list.['a', 'b', 'c', 'd', 'e', 'f']","l = ['a', 'b', 'c', 'd', 'e', 'f']
del l[2:4]"
"Extract the value ""qux"" in the following dictionary.d = {
    'foo': 'bar',
    'baz': {
        'qux': 12
    }
}","d = {
    'foo': 'bar',
    'baz': {
        'qux': 12
    }
}
qux = d['baz']['qux']"
"Complete the following function so that all strings in the list have a length of 5 characters.lst = [""aaa"", ""bb"", ""ccccc"", ""dddddd""]","def make_length_five(lst):
    '''This function will ensure that all strings in the list have a length of 5 characters.'''
    for i in range(len(lst)):
        if len(lst[i]) < 5:
            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))
        elif len(lst[i]) > 5:
            lst[i] = lst[i][:5]
    return lst"
"Format the following list of numbers as strings, with 3 decimal places.[123.4567, 678.9012, 789.3456]","lst = [123.4567, 678.9012, 789.3456]
lst = [format(num, '.3f') for num in lst]"
"Sort the following dictionary objects by the value of the ""age"" field.[{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}]","lst = [{'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 28}, {'name': 'Alex', 'age': 24}]
lst.sort(key = lambda k: k['age'])"
"Create a function that will return the total number of specific items in a list.[1, 1, 2, 3, 3, 3]","def count_items(lst, item):
    '''This function will return the total number of specific items in a list.'''
    return len([x for x in lst if x == item])"
"Create a function that will calculate the cumulative sum of a list.[1, 2, 3, 4, 5]","def cumulative_sum(lst):
    '''This function will calculate the cumulative sum of a list.'''
    result = []
    s = 0
    for item in lst:
        s += item
        result.append(s)
    return result"
"Create a new dictionary that contains the intersection between the following two dictionaries.d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'b': 2, 'c': 4, 'd': 5}","d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'b': 2, 'c': 4, 'd': 5}
d3 = { k:v for k,v in d1.items() if k in d2.keys() }"
Solve the following programming puzzle using Python.A rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut?,"def closest_cutting_distance(total_rope_length):
    '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''
    if total_rope_length <= 10:
        return total_rope_length
    else:
        return total_rope_length - 10"
Create an array in Python that contains numbers from 1 to 5.,"my_array = [1, 2, 3, 4, 5]"
Write a code in Python that returns an inversion of a given string.tea,"def reverseStr(s): 
    return s[::-1] 
  
s = ""tea""
print(reverseStr(s))"
"Write an XML tag which will display a hyperlink.https://www.example.com, Example","<a href=""https://www.example.com"">Example</a>"
"What is the complexity class of the below Python code snippet for adding an item to a list?list = [1, 2, 3]
list.append(4)",The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity.
Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def print_values(self):
        print(""Name:"", self.name)
        print(""Age:"", self.age)"
"Given the following code in C, modify it to increment `num` by 1.int num = 0;","int num = 0;
num++;"
"Write a Python code to calculate the total price of a given list of items including taxes.items = [
  {""name"": ""apple"", ""price"": 10},
  {""name"": ""orange"", ""price"": 20},
  {""name"": ""banana"", ""price"": 5}
]
tax_rate = 5","#Calculate total price of a given list of items including taxes

items = [
  {""name"": ""apple"", ""price"": 10},
  {""name"": ""orange"", ""price"": 20},
  {""name"": ""banana"", ""price"": 5}
]
tax_rate = 5

total_price = 0

for item in items:
  total_price += item['price']

total_price = total_price + (total_price * (tax_rate/100))

print(total_price)"
"Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12].","#Function to print out the common elements of two lists
def commonElements(l1, l2):
    result = [value for value in l1 if value in l2]
    return result

# Lists to compare
list1 = [2, 4, 6, 8] 
list2 = [3, 6, 9, 12] 

# Output  
print(commonElements(list1, list2)) 

# Output: [6]"
"Parse a user input in the following format and print it out.x - 10, y - 20","int x = 10;
int y = 20;
System.out.println(""x = "" + x + "" y = "" + y);"
Create a function in R to generate a random number between the given range.,"random_number <- function(min, max) {
   return(runif(1, min=min, max=max))
}"
"Check this code and add an if statement to print out “even” if the number is divisible by 2 and “odd” if not.for n in range (1,10):
	print(n)","for n in range (1, 10):
    if n % 2 == 0:
        print(n, ""even"")
    else:
        print(n, ""odd"")"
"Fix the code by making changes with the appropriate syntax.def add_two_numbers(a, b)
	return a + b","def add_two_numbers(a, b):
    return a + b"
Deploy the following ML model on the Cloud.,"1. Prepare the model:
- Download, install and configure Cloud platform with the required SDKs.
- Upload the ML model on the Cloud.
- Perform necessary pre-processing steps.

2. Deploy the model:
- Use a deployment framework to deploy the model on the Cloud. 
- containerize the model using Docker. 
- provide appropriate access for the model for it to be queried.

3. Test the model:
- Run test cases for the model and assess the accuracy and performance of the model.
- Set up a monitoring system for the model."
Perform sentiment analysis on the given text using NLTK library in Python.The food here is amazing.,"from nltk.sentiment.vader import SentimentIntensityAnalyzer

sentences = [""The food here is amazing!""]

sid = SentimentIntensityAnalyzer()

for sentence in sentences:
    ss = sid.polarity_scores(sentence)
    print(""for sentence: {}, sentiment analysis: {}"".format(sentence, ss))

# Output
# for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}"
"Construct a regex expression to match strings of the form ""123-456"".",^[0-9]{3}-[0-9]{3}$
Come up with a Scala code snippet to print the powers of 2.,"(0 to 8).foreach( x => {
    println(Math.pow(2,x))
  }
)"
Generate a regex to validate the following format of email address: name@domain.extension,"^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$"
"Create a Python dictionary which contains the student name and their grade for the course.{
 ""John"": 85, 
 ""Alice"": 91,
 ""Bob"": 74
}","student_grades = {
 ""John"": 85, 
 ""Alice"": 91,
 ""Bob"": 74
}"
"Create a function which takes an array and removes all duplicates using a set.[1, 2, 3, 3, 4, 4, 5]","# Create a function which takes an array and removes all duplicates using a set

def remove_duplicates(arr): 
 return list(set(arr)) 

arr = [1, 2, 3, 3, 4, 4, 5] 
new_arr = remove_duplicates(arr) 
print(new_arr) # [1, 2, 3, 4, 5]"
"Find the smallest missing positive number in an array.[-2, 0, 1, 3]","# Find the smallest missing positive number
def smallest_positive(arr): 
 s = set(arr) 
 i = 1 
 while i in s: 
 i += 1
 return i

arr = [-2, 0, 1, 3] 
smallest = smallest_positive(arr)
print(smallest) # 2"
"Create a Python class with the following attributes: firstname, lastname and address.","# Define a python class 
class Person: 
 def __init__(self, firstname, lastname, address): 
  self.firstname = firstname
  self.lastname = lastname
  self.address = address"
Add a constructor to the above class to make sure that firstname and lastname are provided when creating a new instance.,"# Define a python class 
class Person: 
 def __init__(self, firstname, lastname, address): 
  # make sure that firstname and lastname are provided when creating a new instance
  if (firstname == """" or lastname == """"): 
   raise ValueError(""firstname and lastname can't be empty"")
  self.firstname = firstname
  self.lastname = lastname
  self.address = address"
"Create a class for a bike which has a color, make and description as attributes.","# Define a class for a bike
class Bike:
 def __init__(self, color, make, description): 
  self.color = color
  self.make = make
  self.description = description"
Modify the 'Bike' class so that when instances are created they are assigned a unique ID.,"# Define a class for a bike
class Bike:
 _id = 0

 def __init__(self, color, make, description): 
  Bike._id += 1
  self.id = Bike._id
  self.color = color
  self.make = make
  self.description = description"
Write a Python program to find all the factors of an integer.number = 16,"def find_factors(number):
    factors = []
    for i in range(1, number + 1):
        if number % i == 0:
            factors.append(i)
    return factors"
Write a function to convert a Roman numeral to an integer.,"def roman_to_integer(numeral):
  romans = {""I"": 1,
            ""V"": 5,
            ""X"": 10,
            ""L"": 50,
            ""C"": 100,
            ""D"": 500,
            ""M"": 1000
            }
  num = 0
  i = 0
  while i < len(numeral):
    if i+1 < len(numeral):
      if romans[numeral[i]] >= romans[numeral[i+1]]:
        num = num + romans[numeral[i]]
      else :
        num = num + romans[numeral[i+1]] - romans[numeral[i]]
        i+=1
    else:
      num = num + romans[numeral[i]]
    i+=1
  return num"
"Write a Python function to compare two lists and return the elements that are in both of them.list1 = [3, 5, 7, 8]
list2 = [3, 5, 10, 12]","def compare_lists(list1, list2):
    return [x for x in list1 if x in list2]"
Edit this code so it can classify whether a number is even or odd.def classify_number(num):,"def classify_number(num):
    if num % 2 == 0:
        return ""even""
    else:
        return ""odd"""
"Given an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array.[5, 2, 4, 7, 15]","def maxDifference(arr):
  # Initialize max difference
  max_difference = 0

  # Traverse the array
  for i in range(len(arr) - 1):
    for j in range(i + 1, len(arr)):
      # Find the difference between two elements
      diff = arr[j] - arr[i]

      # Check if the difference is the maximum
      if diff > max_difference:
        max_difference = diff

  return max_difference

# Output
maxDifference([5, 2, 4, 7, 15]) # 13"
"Write a function that takes a list of words and detects if they are anagrams.a_list=[""potato"",""tomato""]","def is_anagram(a_list):
    
    l1 = [''.join(sorted(word)) for word in a_list[0]]
    l2 = [''.join(sorted(word)) for word in a_list[1]]
    return l1 == l2"
"Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists.list1=[1,2,3,4]
list2=[3,4,5,6]","def unique_from_two_lists(list1,list2):
  return list(set(list1 + list2))"
Create a Python program to analyze a given list of URL requests and count the number of unique requests.,"def count_unique_requests(url_list):
    return len(set(url_list))"
Write a function that takes a two-dimensional array and flattens it into an one-dimensional array.,"def flatten(arr):
    return [item for row in arr for item in row]"
"Using Python, parse a given XML document and output the names of all elements with the “class” attribute.","from xml.etree import ElementTree

def find_elements(tree):
    elements = []
    for elem in tree.iter():
        if 'class' in elem.attrib:
            elements.append(elem.tag)
    return elements"
"Write a Python function to convert a given number of days into weeks, days.","def convert_days(days):
  weeks = days // 7
  days = days % 7
  return (weeks, days)"
Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length.,"def sort_by_length(lst):
  return sorted(lst, key=len)"
Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less.,"def find_longest_at_length(lst, k):
    longest_str = lst[0]
    for s in lst[1:]:
        if len(s) <= k and len(s) > len(longest_str):
            longest_str = s
    return longest_str"
"Implement a sorting algorithm in Python to arrange the given array in descending order.[10, 80, 40, 20, 60]","def descendingOrder(arr): 
    arr.sort(reverse = True) 
    return arr 
  
# Driver code 
arr = [10, 80, 40, 20, 60] 
output = descendingOrder(arr) 
print(output)"
"Create a Python class named ""Bicycle"" which has two attributes named ""color"" and ""wheels"".","class Bicycle: 
  def __init__(self, color, wheels):
      self.color = color
      self.wheels = wheels"
Make a copy of a given dictionary in Python.,"import copy

original_dict = {1: 'a', 2: 'b', 3: 'c'}
new_dict = copy.deepcopy(original_dict)"
Create an array of strings containing the names of the seven days of the week.,"let daysOfWeek = [""Monday"", ""Tuesday"", ""Wednesday"", 
                  ""Thursday"", ""Friday"", ""Saturday"", 
                  ""Sunday""];"
"Develop a Python script to count the number of characters, words, and sentences present in a given string.This is a sample sentence to test the program.","string = 'This is a sample sentence to test the program.'
character_count = len(string)
word_count = len(string.split())
sentence_count = len(string.split('.'))

print('Number of characters: ', character_count)
print('Number of words: ', word_count)
print('Number of sentences: ', sentence_count)

Output:
Number of characters: 45
Number of words: 8
Number of sentences: 1"
Develop a solution for the classic pattern recognition problem - the Towers of Hanoi.,"// function to solve the Tower of Hanoi problem
def solveTowerOfHanoi(n, source, auxillary, destination): 
  if n==1: 
    print(""Move disk 1 from source"",source,""to destination"",destination) 
    return 
  solveTowerOfHanoi(n-1, source, destination, auxillary) 
  print(""Move disk"",n,""from source"",source,""to destination"",destination) 
  solveTowerOfHanoi(n-1, auxillary, source, destination) 

# Driver code 
n = 3
solveTowerOfHanoi(n, 'A', 'B', 'C') 

Output:
Move disk 1 from source A to destination C
Move disk 2 from source A to destination B
Move disk 1 from source C to destination B
Move disk 3 from source A to destination C
Move disk 1 from source B to destination A
Move disk 2 from source B to destination C
Move disk 1 from source A to destination C"
Create a function sumToN that takes a single argument and returns the sum of the numbers from 1 to the argument.,"def sumToN(n):
  sum = 0
  for i in range(1, n+1):
    sum += i
  return sum"
"Given a string s = 'Hello, World!' create a function that takes a string as an input and returns its length.s = 'Hello, World!'","def getStringLength(s):
  return len(s)"
"Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line.[1, 2, 3, 4]","arr = [1, 2, 3, 4]
print(*arr, sep="", "") // 1, 2, 3, 4"
Write a class for a shopping cart in Python.,"class ShoppingCart:
    def __init__(self):
        self.cart = {}

    def add_item(self, item, price):
        self.cart[item] = price

    def get_cart_total(self):
        return sum(self.cart.values())"
How to use the reduce function in Python for computing the sum of elements in a list?,"from functools import reduce

def my_sum(list):
  return reduce((lambda x, y: x + y), list)"
Write an if else statement in Python for checking if a given number is positive or negative.,"if x > 0:
  print(""The number is positive"")
else:
  print(""The number is negative"")"
Write a loop in Python for printing all even numbers between 1 and 10.,"for i in range(1, 11):
    if i % 2 == 0:
        print(i)"
"Write a MATLAB code to find the maximum value for an array of 10 elements.A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]","max_val = max(A);
fprintf('Max value is %d\n', max_val);"
"Write an R code to find the length of the longest string in an array.strings = c('this', 'is', 'a', 'test')","strings <- c('this', 'is', 'a', 'test')

longest <- max(nchar(strings))

cat('The longest string length is: ', longest) ## Output: The longest string length is: 4"
Write an R code to return the first 10 rows of a data frame.states-data.csv,"# Load the data
states_data <- read.csv(""states-data.csv"")

# Get the first 10 rows
head(states_data, 10)"
Design an algorithm that computes the Fibonacci numbers.,"A Fibonacci algorithm can be written using a simple recursive function:

int fibonacci(int n) {
    if (n == 0 || n == 1) {
        return n;
    }
    else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}"
Rewrite the following Python code without using the 'list comprehension' syntax.[x * x for x in range(5)],"list_result = []
for x in range(5):
    list_result.append(x*x)"
"Write a regular expression that extracts all numbers from the given text.Text:  ""The total number of students is 50 and the average score is 78 out of 100.""",\d+
Describe the purpose of using an Array in programming.,"An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists."
"Write a Python program to sort a list of tuples using Lambda.list = [(3, 4), (5, 1), (2, 0)]","sorted_list = sorted(list, key=lambda x: x[1])"
"Create a function that takes a string and converts the string to CamelCase.string = ""this_is_a_string""","def toCamelCase(string):
    s = string.split('_')
    return s[0] + ''.join(x.title() for x in s[1:])"
"Using the code provided, create an algorithm in Python to print the numbers from 1 to 10.","for i in range(1, 11): 
    print(i)"
"Modify the program to make sure that only integers are accepted as input.name = input(""Enter your name: "")
print(""Hello, "" + name)","name = input(""Enter your name: "")
try:
    name = int(name)
    print(""Hello, "" + str(name))
except ValueError:
    print(""Error: That was not an integer."")"
"Using the code provided, modify the program to output ""I like cats"" instead of ""I love cats"".print(""I love cats"")","print(""I like cats"")"
How do you insert a given element in a balanced AVL tree?,"The process of insertion in a balanced AVL tree is similar to the process in a binary search tree, with two additional steps. First, the tree is checked to see if it needs to be rebalanced. If it does, the tree is rebalanced according to the AVL rules. Second, any newly inserted node is checked against its siblings to see if it is in balance or not. If it's not, the tree is rotated to balance it. In order to insert an element in a balanced AVL tree, the following steps must be taken:

1. Start by searching the tree to see if the node to be inserted already exists in the tree.
2. If the node does not exist, insert it in the same fashion as in a binary search tree.
3. Perform post-insertion balancing. This involves checking the newly inserted node's balance factors and rotation if either one is unequal.
4. Update the current node's balance factor as well as the ancestors' balance factors until the root is reached.
5. Once all nodes that need to be balanced have been updated, the insertion is complete."
Create a cURL request for getting the response from an API endpoint.,"$curl = curl_init();

curl_setopt_array($curl, array(
    CURLOPT_URL => ""https://api.example.com/endpoint"",
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => """",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 0,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => ""GET"",
));

$response = curl_exec($curl);

curl_close($curl);
echo $response;"
"Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.","""""""
Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.
""""""

import random

def generate_password():
    charset = ""01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?""
    password = """"
    for _ in range(8):
        password += random.choice(charset)
    return password
    
if __name__ == '__main__':
    print(generate_password())"
"Count the number of occurrences of a given number in a list of numbers.numbers = [1,1,2,3,4,4,4,5]
number = 4","""""""
Count the number of occurrences of a given number in a list of numbers.
""""""

numbers = [1,1,2,3,4,4,4,5]
number = 4

def count_occurrences(numbers, number):
    count = 0
    for num in numbers:
        if num == number:
            count += 1
    return count

print(count_occurrences(numbers, number))"
Describe the advantages and disadvantages of using recursion.,"Recursion has many advantages including that it is often easier to understand, it eliminates the need for loops, and it can make for concise code when addressing complex problems. However, recursion also has disadvantages such as the potential for infinite loops and excessive memory consumption due to the overhead of function calls. Additionally, recursion can be slower than using loops in some cases."
"Determine whether a given string is a palindrome using stack data structure.string = ""racecar""","""""""
Determine whether a given string is a palindrome using stack data structure.
""""""

def is_palindrome(string):
    # reverse the string
    stack = []
    for char in string:
        stack.append(char)

    rev_string = """"
    while stack:
        rev_string = rev_string + stack.pop()

    # compare reversed string with original string
    if rev_string == string:
        return True
    else:
        return False

if __name__ == '__main__':
    string = ""racecar""
    print(is_palindrome(string))"
"Create a class named 'Stack' with the following methods:  push, pop, peek, isEmpty.","""""""
Create a class named 'Stack' with the following methods: push, pop, peek, isEmpty.
""""""

class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop()
    
    def peek(self):
        return self.items[-1]
    
    def isEmpty(self):
        return self.items == []"
"Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.d = {'John': 15, 'Anna': 20, 'Bob': 10}","""""""
Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.
""""""

def reorder_dict(d):
    sorted_dict = {}
    sorted_values = sorted(d.values())

    while sorted_values:
        key = sorted(d, key=lambda k: d[k] == sorted_values[0])[0]
        sorted_dict[key] = d[key]
        sorted_values.remove(d[key])

    return sorted_dict

if __name__ == '__main__':
    d = {'John': 15, 'Anna': 20, 'Bob': 10}
    print(reorder_dict(d))"
"Sum up all the values in a 2D list.list = [[1,2,3],[4,5,6],[7,8,9]]","""""""
Sum up all the values in a 2D list.
""""""

def sum_2d_list(list_2d):
    sum = 0
    for l in list_2d:
        for n in l:
            sum += n
    return sum

if __name__ == '__main__':
    list_2d = [[1,2,3],[4,5,6],[7,8,9]]
    print(sum_2d_list(list_2d))"
Use a Linked List structure to implement a stack data structure.,"""""""
Use a Linked List structure to implement a stack data structure.
""""""

class Node:
    def __init__(self, val):
        self.value = val
        self.next = None

class Stack:
    def __init__(self):
        self.top = None
        self.size = 0

    def push(self, val):
        new_node = Node(val)
        new_node.next = self.top
        self.top = new_node
        self.size += 1
    
    def pop(self):
        if self.top == None:
            return None
        else:
            pop_node = self.top
            self.top = self.top.next
            self.size -= 1
            return pop_node.value"
Write a code snippet in Python to generate a random float with up to 4 decimal places.,"import random
def random_float(a,b):
  return round(random.uniform(a,b), 4)"
"What is the value of variable ""a"" at the end of the code?a = 0
for i in range (10):
    a += i",45
"Below is a simple function, improve it for efficiency and readability:def get_sum(x, y):
    m = max(x, y)
    n = min(x, y)
    z = 0
    while n <= m:
        z += n
        n += 1
    return z","def get_sum(x, y):
    # get the lower bound and upper bound
    lower, upper = min(x, y), max(x, y)

    # apply the arithmetic series formula
    return (upper * (upper + 1) - lower * (lower - 1)) // 2"
Insert the missing symbol which will make the code syntactically correct.if x 0,if x == 0
"Combine the two objects with the same property value.obj1 = {
  ""name"": ""John"",
  ""age"": 22
}

obj2 = {
  ""name"": ""John"",
  ""location"": ""New York""
}","obj3 = {
  ""name"": ""John"",
  ""age"": 22,
  ""location"": ""New York""
}"
"Complete the code to slice the list up to index 4.my_list = [1, 2, 3, 4, 5, 6, 7]","my_list = my_list[:4] # my_list is now [1, 2, 3, 4]"
"Construct a regex pattern to match the following words.words = [""cat"", ""bat"", ""rat""]","pattern = r""(cat|bat|rat)"""
"Given the following list of strings, return a new list with only the strings that contain the letter ""e""[""hello"", ""world"", ""foo"", ""bar"", ""elephant"", ""cat""]","[""hello"", ""elephant""]"
"Convert the following list of numbers from decimal notation to binary notation.[45, 11, 80, 12]","[101101, 1011, 1010000, 1100]"
"Sort the following array of objects based on the 'name' key in descending order.arr = [ 
  { name: ‘Bill’, age: 25 }, 
  { name: ‘Bob’, age: 21 },
  { name: ‘Adam’, age: 20 } 
]","arr.sort((a, b) => (a.name < b.name) ? 1 : -1);"
Create a regex expression to extract all words that contain 3 consonants in a row.,[a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{3}[a-zA-Z]*
Write an algorithm in pseudocode to convert a temperature given in Celsius to its equivalent value in Fahrenheit.,"// Algorithm to convert Celsius to Fahrenheit

// Input: numeric value in Celsius (c)
// Output: numeric value in Fahrenheit (f)

// Step 1: Multiply c by 9
// Step 2: Divide the result 9 by 5
// Step 3: Add 32 to the result
// Step 4: Output f

f = ( 9 / 5 ) * c + 32"
Construct a regex expression to identify all numbers within a given string.,\d+
"Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.list_1 = [9, 4, 2, 1, 5]
list_2 = [4, 6, 2]","def difference_array(list_1, list_2):
  new_list = []
  for i in list_1:
    if i not in list_2:
      new_list.append(i)
  return new_list"
Create a script that prints the prime numbers up to a given integer n.,"def printPrimesUpTo_n(n):

    while n > 1:
        if not (n % 2 and n > 2):
            flag = False
            for i in range(2, int(n**0.5) +1):
                if not n % i:
                    flag = True
                    break
            if not flag:
                print(n)
        n -= 1"
"Implement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list.s=[1,2,3,4]","def multiply_by_3(s):
    result = []
    for x in s:
        if x*3 <len(s):
            result.append(x * 3)
    return result"
Write an algorithm in Python to count how many words a given string contains.,"def count_words(string):
	words = string.split()
	return len(words)"
"Create a schema for a collection in MongoDB to store product data.Collection name: products
Schema should include: name, type (string), description (string), price (integer), availability (boolean)","const ProductSchema = new Schema({
  name: { type: String },
  type: { type: String },
  description: { type: String },
  price: { type: Number },
  availability: { type: Boolean },
});"
"Update a MongoDB document with the following information.Database name: products
Collection name: items
Document ID: 5e9697d50a5173c078b5306b
Field to update: description
Value: This item is now available in 3 sizes","db.items.updateOne(
   { _id: ObjectId(""5e9697d50a5173c078b5306b"") },
   { $set: { description: ""This item is now available in 3 sizes"" } }
)"
"Develop an algorithm to return all possible permutations of a given string.String: ""abc""","const permute = str => {
  let results = [];
  
  const permutations = (subStr, rest) => {
    if (!rest.length) {
      results.push(subStr);
    } else {
      for (let i = 0; i < rest.length; i++) {
        let newSubStr = subStr + rest[i];
        let newRest = rest.substring(0, i) + rest.substring(i + 1);
        permutations(newSubStr, newRest);
      }
    }
  }

  permutations('', str);
  return results;
}"
"Write a Python script to remove all the values that are greater than 30 from the listlist_of_num = [25, 12, 36, 118, 200, 30]",new_list = [num for num in list_of_num if num <= 30]
Write a user defined function to print the sum of two numbers,"def add_two_numbers(a, b):
    return a + b"
Create a new method “listItems” which returns a list of strings,"def listItems():
    list_items = [""item1"", ""item2"", ""item3""]
    return list_items"
"Write a function to print the four elements in the given list in reverse orderlist = [""a"", ""b"", ""c"", ""d""]","def print_reverse_order(lst):
    for item in reversed(lst):
        print(item)

print_reverse_order(list)"
"Write a code snippet that returns the root of a given binary tree.tree = 
        3
      /   \
    4      5
  /    \    \
3       6    7","def root(tree):
    if not tree:
        return None
    return tree.val"
"Edit the following for loop to add a comment before each iteration.for i in range(10):
    print(i)","for i in range(10):
    # loop iteration: i =
    print(i)"
"Edit the following Python code to add error handling for invalid inputs.def area_triangle(base,height):
    pass","def area_triangle(base,height):
    if base == 0 or height == 0:
        raise ValueError(""Base and height should not be zero."")
    else:
        return 0.5 * base * height"
Create a function that prints out the Pythagorean theorem in Python.,"def pythagoras_theorem():
    """"""Print the Pythagorean theorem in Python.""""""
    print(""The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse."")"
Create an array that contains the numbers from 0 to 10 in Python.,"arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Create a new div element and add it to the DOM with id ""main-container"".","let myDiv = document.createElement('div');
myDiv.id = ""main-container"";
document.body.appendChild(myDiv);"
"Create a function in Python that takes an input list of strings and returns the longest string in the list.list = [""cat"", ""dog"", ""elephant""]","def longest_string(list):
  longest_word = """"
  for word in list:
    if len(word) > len(longest_word):
      longest_word = word
  return longest_word"
"Categorize a given dataset into three classes[1, 2, 3, 4, 5]","Class 1: [1]
Class 2: [2, 3]
Class 3: [4, 5]"
"Edit the following class to make sure any variables created as part of the class cannot be modified by the programclass Example:
    def __init__(self, x, y):
        self.x = x
        self.y = y","class Example:
    def __init__(self, x, y):
        self.__x = x
        self.__y = y
    @property
    def x(self):
        return self.__x
    @x.setter
    def x(self, val):
        raise AttributeError(""Cannot modify x"")
    @property
    def y(self):
        return self.__y
    @y.setter
    def y(self, val):
        raise AttributeError(""Cannot modify y"")"
"Given a function, create a program to identify whether the output is equal to 1, 0 or -1.def func(x):
    if x < 0:
        return -1
    elif x == 0:
        return 0
    else:
        return 1","def func_val(x):
    result = func(x)
    if result == -1:
        return -1
    elif result == 0:
        return 0
    else:
        return 1"
"Sort the following array in reversed order: [3, 2, 1, 5, 4, 6][3, 2, 1, 5, 4, 6]","[6, 5, 4, 3, 2, 1]"
"Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not.string1 = ""Hello""
string2 = ""World""","def is_equal(str1, str2):
    if str1 == str2:
        return True
    else:
        return False"
"Create a program to replace a given string with new text.Old Text: ""Hello World"" 
New Text: ""Hello Universe""","public static String replaceText(String old, String newText) {
  return old.replace(old, newText);
}"
"Use the given data to print out the average of the numbers.[1, 7, 8, 10]","def calculateAverage(nums):
    average = 0
    for num in nums:
        average += num
    return average / len(nums)

print(calculateAverage([1,7,8,10]))
# Output: 6.5"
"You are given a string, output a new string with its vowels removed.""Hello World""","def removeVowels(s):
    vowels = 'aeiouAEIOU'
    s_without_vowel = ''
    for c in s:
        if c not in vowels:
            s_without_vowel += c
    return s_without_vowel

print(removeVowels(""Hello World""))
# Output: Hll Wld"
"Implement a basic calculator that takes an equation and outputs the result.""3+3""","def calculator(equation):
    result = eval(equation)
    return result

print(calculator(""3+3""))
# Output: 6"
Implement a stack to store and retrieve items in last-in first-out order.,"class Stack:
    def __init__(self):
        self.items = []
    
    def push(self, item):
        self.items.append(item)
    
    def pop(self):
        return self.items.pop()
    
    def peek(self):
        return self.items[len(self.items)-1]
    
    def size(self):
        return len(self.items)"
Construct a machine learning model in Python for the given dataset.The dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics.,"import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# load dataset
dataframe = pd.read_csv('student_income_data.csv')

# split into input X and output y
X = dataframe.iloc[:,:-1]
y = dataframe.iloc[:,-1]

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)

# create model
model = LinearRegression()

# train model
model.fit(X_train,y_train)

# test model
predictions = model.predict(X_test)"
Compare the performance of two different neural network architectures.Two convolutional neural networks (CNNs) with different depth of layers have been trained on the MNIST dataset.,"# evaluate the performance on the test dataset
from sklearn.metrics import accuracy_score

# load the test dataset
X_test, y_test = load_dataset()

# evaluate each model
y_pred_1 = model_1.predict(X_test)
acc_1 = accuracy_score(y_test, y_pred_1)

y_pred_2 = model_2.predict(X_test)
acc_2 = accuracy_score(y_test, y_pred_2)

# compare the performance
if acc_1 > acc_2:
    print('Model 1 has better performance than Model 2.')
elif acc_2 > acc_1:
    print('Model 2 has better performance than Model 1.')
else:
    print('The performances of the two models are equal.')"
"Construct an algorithm in pseudocode to sort a given array of numbers.[3, 1, 4, 5, 7, 2]","sort(array A[]):
  for i = 1 to n-1
  begin
    min = i
    for j = (i + 1) to n
      if A[j] < A[min]
        min = j
    swap the value at index min and index i
  end
  return A[]"
"Create a function in R that calculates the mean of a given dataset[4.6, 8.9, 5.4, 7.2]","mean <- function(data) {
  sum = 0
  for (i in data) {
    sum = sum + i
  }
  mean = sum / length(data)
  return(mean)
}"
"Compute the cross-entropy loss of a given classification problemGround truth: [0, 0, 0, 1, 1]
Predicted: [0, 0, 0, 0.6, 0.8]",-1.2885609570312778
Write a sample program that performs text classification,"import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# load dataset
dataframe = pd.read_csv('text_classification_data.csv')

# convert to vectors
vectorizer = TfidfVectorizer()
vectors = vectorizer.fit_transform(dataframe['text'])

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25)

# create model
model = LogisticRegression()

# train model
model.fit(X_train,y_train)

# test model
predictions = model.predict(X_test)"
"Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years.p = 1000
r = 0.10
n = 3","def calc_comp_int(principal, rate, num_years):
    return principal * (1 + rate) ** num_years - principal

print(calc_comp_int(p, r, n))"
Suggest a more descriptive name for the following method.def get_data():,def retrieve_data_from_database():
"Given a list of numbers and a search value, check if the value is present in the list and return a boolean value.nums = [2, 4, 6, 8, 10]
value = 6","def search_list(nums, value):
    for num in nums:
        if num == value:
            return True
    return False

nums = [2, 4, 6, 8, 10]
value = 6

result = search_list(nums, value)
print(result) # Output: True"
"Design a function to calculate the distance between two points in a 3-D space.p1 = (3, 2, 1)
p2 = (5, 4, 6)","def get_distance(p1, p2):
    (x1, y1, z1) = p1
    (x2, y2, z2) = p2
    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5
    return dist

p1 = (3, 2, 1)
p2 = (5, 4, 6)
distance = get_distance(p1, p2)
print(distance) # Output: 5.196152422706632"
Create a class that can be used to generate random numbers between a given range.,"class RandomNumberGenerator:
    def __init__(self, min_num, max_num):
        self.min_num = min_num
        self.max_num = max_num
    
    def get_random_number(self):
        return random.randint(self.min_num, self.max_num)"
Write a type annotation for a function that takes an integer as an input and returns a boolean.,"def func(num: int) -> bool:
    ..."
"Create a class for a Rectangle with attributes for its length and width, and methods to calculate its area, perimeter and diagonal.","class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    
    def area(self):
        return self.length * self.width
    
    def perimeter(self):
        return (2*self.length) + (2*self.width)
    
    def diagonal(self):
        return (self.length**2 + self.width**2)**0.5"
"Write an R code to identify DNA motifs of a given gene sequence.sequence <- c(""AAATACTAGCTGAGTTTGTACGTATGGGCC"")","motifs <- findMotifs(sequence)
print(motifs)"
Generate a Perl script to check for palindromes.,"sub check_palindrome {
  my ($str) = @_;
  my $reverse = reverse $str;
  if($str eq $reverse){
    return 1;  
  }
  else{
    return 0;
  }
}"
"Reorganize the following code in a more efficient way using Python.def get_student_avg(students):
    for student in students:
        sum = 0
        for grade in student['grades']:
            sum += grade
        avg = sum / len(student['grades'])
        student['avg'] = avg","def get_student_avg(students):
    for student in students:
        student['avg'] = sum(student['grades']) / len(student['grades'])"
"Correct any errors in the following code.def get_student_avg (studentss):
    for stdent in studentss:
        sum = 0
        for grade in stdent['grades']:
            sum += grade
        avg = sum // len studnet['grades']
        stdent['avg']= avg","def get_student_avg (studentss):
    for student in studentss:
        sum = 0
        for grade in student['grades']:
            sum += grade
        avg = sum // len(student['grades'])
        student['avg']= avg"
"Suggest a sorting algorithm to sort a list in ascending order.my_list = [3, 8, 5, 4, 1, 9, 7]","The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted."
"Suggest a linear search algorithm for the following task.Given a list of numbers, search for the number 6 in the list and return its position.","The best linear search algorithm to use for this task is the linear search algorithm. In the linear search algorithm, the list is looped through and each element is compared to the target. If the item is found, its position is returned."
"Sort the given list using the quicksort algorithm.my_list = [8, 5, 3, 9, 6, 1]","def quick_sort(arr):
  if len(arr) <= 1:
    return arr
  else:
    pivot = arr[0]
    left, right = [], []
    # pivot
    for x in arr[1:]:
      if x > pivot:
        right.append(x)
      else:
        left.append(x)
    # concatenate
    return quick_sort(left) + [pivot] + quick_sort(right)

quick_sort(my_list)"
Print the numbers in a Fibonacci series with a loop.,"# Fibonacci Series using a loop
# the first two numbers of the Fibonacci series is 0 and 1

a = 0
b = 1

print(a)
print(b)

for i in range(10):
    c = a + b
    a = b
    b = c
    print(c)"
Implement a function to solve a given equation.4x + 2y = 32,"def solve_equation(x, y):
    A = 4
    B = 2
    C = 32
    
    y = (C - A*x)/B
    return y"
"Edit the given code to fix the bugdef calculate_tax(price):
tax_rate = 0.20
total = price + (price * tax_rate)
return total","def calculate_tax(price):
    tax_rate = 0.20
    total = price + (price * tax_rate)
    return round(total, 2)"
Generate a 5-dimensional array using the numpy library,"import numpy as np

arr = np.zeros((5,5,5,5,5))"
"Generate an appropriate python code snippet to capitalize all elements of an array called A.A = ['welcome', 'to', 'my', 'website']","A = ['welcome', 'to', 'my', 'website']

A = [x.capitalize() for x in A]

print(A)"
"Write a code snippet to count the occurrence of number 4 in an array called arr.arr = [1, 4, 2, 4, 5]","arr = [1, 4, 2, 4, 5]

count = 0
for num in arr:
    if num == 4:
        count += 1

print(count)"
"Generate a Pandas code snippet to calculate the averages of the elements of each row in the given dataframe?dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])","import pandas as pd
  
dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])
 
dataframe['avg'] = dataframe.mean(axis=1)

print(dataframe)"
"Edit the following code snippet to make it calculate the median instead of the average?x = [1,2 ,3, 4, 5]","x = [1,2 ,3, 4, 5]

import statistics

median = statistics.median(x)
print(median)"
"Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B.A = [1,2,3]
B = [4,5,6]","import numpy as np
 
A = np.array([1,2,3])
B = np.array([4,5,6])
 
C = np.multiply(A, B)
print(C)"
"Generate a code snippet to print out the top 3 highest numbers from an array A.A = [9, 4, 18, 24, 7, 22, 11]","A = [9, 4, 18, 24, 7, 22, 11]
 
A.sort(reverse=True)
 
top_3 = A[:3]

print(top_3)"
"Subtract two matrices named A and B and store the result in matrix C?A = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]
  
B = [[10, 11, 12],
     [13, 14, 15],
     [16, 17, 18]]","import numpy as np
 
A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])
 
B = np.array([[10, 11, 12],
              [13, 14, 15],
              [16, 17, 18]])
 
C = A - B

print(C)"
"Generate a code snippet to sort the students alphabetically by their last name in the following list?students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]","students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]

students.sort(key= lambda x: x[1])

print(students)"
Suggest the best way to implement an AI system for user authentication.,Using a combination of facial recognition and voice recognition.
Suggest the most appropriate approach to train a neural network model with a large dataset.,Using mini-batch gradient descent.
"Suggest a way to edit the following text data using NLP techniquestext = ""This is an exmaple""","Using NLP techniques, the text can be edited in various ways such as lemmatisation, stemming and tokenisation. For example, the text can be tokenized and lemmatized so that the words ""example"" and ""exmaple"" are both converted to the root word ""example""."
"Write a Python program to exchange the values of two different variables.x = 10 
y = 20","x, y = y, x"
Select the best approach to process large amount of data in parallel.,Using MapReduce.
Create an array in Python with 6 elements and print the last three elements.,"my_array = [1, 2, 3, 4, 5, 6] 
#Print the last three elements
print (my_array[-3:]) 
#Output:[4, 5, 6]"
Create a random matrix using NumPy where the elements have 2 decimal places.,"import numpy as np 

# Create a 2×2 matrix 
random_matrix = np.random.rand(2,2) 

# Round to two decimal places 
np.around(random_matrix, decimals=2)"
"Determine the fraction of numbers in this list that are multiples of 3: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",fraction = 3/10 = 0.3
"Classify the following sentence as positive, negative, or neutral: ""I am so happy to be here.""",Positive
Build a function in Python that takes a string as the input and prints each letter of the string on a separate line.,"def print_letters(string): 
    for letter in string: 
        print(letter)"
How does the break statement work in a for loop?,"The break statement is used to break out of a loop, including a for loop. When a break statement is encountered inside a loop, it causes the loop to stop executing and control to be transferred outside the loop. For example, in a for loop, if the break statement is encountered, the loop is terminated immediately, and the program control will be transferred outside the loop."
Generate a timestamp based on the current date.,"import time

timestamp = int(time.time())
print(timestamp) # 1598059584"
"Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included).","result = []
for i in range(1500, 2701):
  if i % 5 == 0 and i % 7 != 0:
    result.append(i)

print(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]"
Generate a Python dictionary that contains student information.Name: John; Age: 22; Grade: A;,"{
 ""name"": ""John"",
 ""age"": 22,
 ""grade"": ""A""
}"
Classify the given sentence into either declarative or interrogative sentence.John is getting ready for the test.,Declarative sentence.
"Generate XML code for the following.Student Name: John
Student ID: 123456
Course: Computer Science","<studentName>John</studentName>
<studentID>123456</studentID>
<course>Computer Science</course>"
"Evaluate the given value for the expression ""3 * 5 + 4 / 2"".",17.
"Convert a given list into a dictionary in Python[""apple"", ""banana"", ""cherry""]","dict = {
    ""apple"": 0,
    ""banana"": 1,
    ""cherry"": 2
}"
"Define a function to search for a specific element in an array[5, 10, 2, 4, 7]","def search(arr, e):
    for i in range(len(arr)):
        if (arr[i] == e):
            return i
    return -1"
What are the two basic components of a computer system?,The two basic components of a computer system are hardware and software.
"Rewrite the following code using the try-catch statementif (num!=0)
  result = 1/num;
else
  result = 0;","try {
  result = 1 / num;
} catch (err) {
  result = 0;
}"
"You are given a string s, output the longest substring with no repeating characters.s = ""abcabcbb""","def longest_substring(s):
    length = len(s)
    current_length = 1
    last_occur= {s[0]:0 }
    max_length = 0
    i = 0 
    while i < length:
        if(s[i] in last_occur):
            current_length = i - last_occur[s[i]]
            if(current_length > max_length):
                max_length = current_length
            last_occur[s[i]] = i
        else:
            last_occur[s[i]] = i
            current_length += 1
            if(current_length > max_length):
                max_length = current_length
        i += 1
    return max_length

longest_substring(s)
3"
"Calculate the distance between two points (x1, y1) and (x2, y2).x1 = 5, x2 = 8
y1 = 3, y2 = 12","def calculate_distance(x1, x2, y1, y2):
    return ((x2-x1)**2 + (y2-y1)**2)**0.5
    
calculate_distance(x1, x2, y1, y2)
7.615773105863909"
"You are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array.array = [1, -3, 4, 5, 7, 8, -2, 9, -1]
k=3","def max_sum_k_elements(array, k):
    max_sum = array[0]
    for i in range(len(array)-k+1):
        sum_temp = 0
        for j in range(k):
            sum_temp += array[i+j]
        if sum_temp > max_sum:
            max_sum = sum_temp
    return max_sum

max_sum_k_elements(array, k)"
"Fix the bug in the following Python script:def is_odd(x):
  if x % 2 == 1
    return True

is_odd(5)","def is_odd(x):
  if x % 2 == 1:
    return True
  else:
    return False

is_odd(5)"
Write a function to create a Nim game board with size n.,"def create_game_board(n):
    # Create an empty list
    game_board = []
    # Loop based on number of rows
    for i in range(n):
        # Create an empty row
        row = []
        # Loop based on number of columns
        for j in range(n):
            # Add value 0 at each position
            row.append(0)
        # Add the row in empty list
        game_board.append(row)
    # Return the game board
    return game_board"
"Create a dictionary with the keys of the students' IDs and their corresponding grades as the values.student_ids = [1000, 1001, 1002, 1003] 
grades = [90, 80, 60, 50]","def create_grade_dict(student_ids, grades):
    # Create an empty dictionary
    grade_dict = {} 
    # Loop based on length of student ids 
    for i in range(len(student_ids)):  
         # Add id as key and grade as value
        grade_dict[student_ids[i]] = grades[i] 
    # Return the grade dictionary    
    return grade_dict"
"In the given snippet of code, insert a line of code to display the sum of two numbers.int a = 10;
int b = 20;","int a = 10;
int b = 20;
System.out.println(""Sum of two numbers is "" + (a + b));"
"Write a function in Python for sorting a given list of numbers.[29, 11, 46, 7, 248, 1724]","def sort_list(numbers):
  return sorted(numbers)"
Create a function in R for converting a string into uppercase.,"upperCase <- function(string){
  return(toupper(string))
}"
"Sort the numbers in an ascending order in the given array.[4, 2, 9, 10, 5]","[2, 4, 5, 9, 10]"
"Design a recursive algorithm in Python to calculate the sum of all elements in the given array[1, 3, 7, 9, 11]","def recursive_sum(arr):
    if len(arr) == 1:
        return arr[0]
    else:
        return arr[0] + recursive_sum(arr[1:])

arr = [1, 3, 7, 9, 11]
print(recursive_sum(arr))"
Estimate the storage space of the given data type.Integer,4 bytes
Write a JSP code snippet to instantiate an array object,"<% 
    int [] arr = new int[3]; 
%>"
"Compare the given two strings and return true if the strings match.String 1: hello
String 2: hello","if (str1 == str2)
    return true;
else
    return false;"
Output the list of all prime numbers in the range of 2 to 50.,"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
"Parse the following string to get the server name.url = ""https://my.example.com/api/user""","server_name = url.split(""/"")[2]"
"Find the elements at even indexes in a given list.list = [1,3,4,7,10,21]","[list[i] for i in range(0,len(list),2)]"
Construct a while loop to print out the numbers 5 to 15.,"num = 5

while num <= 15:
  print(num)
  num += 1"
"Suggest a LINQ query to retrieve fields ""name"" and ""date"" from an array of objects.[
   {
      ""name"":""John Doe"",
      ""date"":""1/1/2020""
   },
   {
      ""name"":""Jane Doe"",
      ""date"":""1/2/2020""
   },
   {
      ""name"":""John Smith"",
      ""date"":""1/3/2020""
   }
]","var data = array.Select(x => new { x.name, x.date });"
"Write a loop to extract the first three characters from each string in the list.letters = [""abcde"", ""fghij"", ""klmno""]","extracted_letters = []

for letter in letters:
    extracted_letters.append(letter[0:3])"
"Create a mapping of keys and values from a given dictionary.dict = {""a"":1, ""b"":2, ""c"":3}","mapping = {k:v for (k,v) in dict.items()}"
"Write a method in Python to append a given list to another list.list_1 = [1,2,3]
list_2 = [4,5,6]",list_1.extend(list_2)
Construct an IF-ELSE statement that test for a given condition and prints result based on that.to_test = 5,"if to_test < 10: 
  print(""Less than 10"")
else:
  print(""Greater than 10"")"
"Suggest an algorithm to sum values of pairs in an array.arr = [2, 3, 5, 7]","def array_sum(arr):
    sum = 0
    for i in range(0, len(arr)-1, 2):
        sum += arr[i] + arr[i+1]
    return sum"
"Get the output from the given code snippet on an array of integers.int[] numbers = {1,2,3,4,5,6,7,8,9};
int result = 0;
for (int number : numbers) {
result += number; 
}",45
"Given a string of words, calculate the number of unique words.String str = ""This is a test to see how many unique words are in this string"";",13
"Place the missing parenthesis in the given algorithm.for i = 1 to n 
  if (A[i] == x)
     start = i;
     end = i + k – 1;","for (i = 1; i <= n; i++) 
  if (A[i] == x)
     start = i;
     end = i + k - 1;"
"Read the code and figure out what will be the output of the program.int a = 15; 
int b = 10; 
int result = 0; 
if(a == b){
   result = a + b; 
} else {
 result = a * b; 
}",150
"Generate the output for this simple algorithm with the given input.Input: array = [5, 4, 1, 2, 6]
Output:
8",The output of the algorithm is 8.
"Given an array of integers and an integer value, figure out whether the given value is present in the array or not.Array: [1, 2, 3, 4, 5, 6]
Value: 7",False
"Create a Python program that takes two strings as input and finds their longest common subsequence.x = “ABCBDAB”
 y = “BDCABA”","def longestSubsequence(x, y): 
    m = len(x) 
    n = len(y) 
  
    L = [[None]*(n+1) for i in range(m+1)] 
   
    for i in range(m + 1): 
        for j in range(n + 1): 
            if i == 0 or j == 0 : 
                L[i][j] = 0
            elif x[i-1] == y[j-1]: 
                L[i][j] = L[i-1][j-1]+1
            else: 
                L[i][j] = max(L[i-1][j] , L[i][j-1]) 
  
    index = L[m][n] 
  
    lcs = [""""] * (index+1) 
    lcs[index] = ""\0"" 
  
    i = m 
    j = n 
    while i > 0 and j > 0: 
  
        if x[i-1] == y[j-1]: 
            lcs[index-1] = x[i-1] 
            i-=1
            j-=1
            index-=1
  
        elif L[i-1][j] > L[i][j-1]: 
            i-=1
        else: 
            j-=1
  
    print(""Longest common subsequence of "" + x + "" and "" + y + "" is \"""" + """".join(lcs) + ""\"""")"
"Write a Python function that accepts a list and returns the sum of the numbers present in the list.list = [1, 2, 3, 4, 5]","def list_sum(lst):
    result = 0
    for num in lst:
        result += num
    return result"
Determine the accuracy of a model trained on a given dataset.,"Accuracy of a model can be determined by computing its predictions against the actual values of the dataset, and then comparing the number of correct predictions with the total number of predictions. The accuracy of the model is then calculated as the proportion of correct predictions to the total number of predictions."
Compare and contrast HTTP and HTTPS.,"HTTP (Hypertext Transfer Protocol) and HTTPS (Hypertext Transfer Protocol Secure) are both protocols used to transfer data over the internet. The main difference between them is that HTTPS is a secure connection, using encryption technology to protect and authenticate data exchanged over the connection. HTTP on the other hand is a plain text protocol and does not provide secure communication. Thus, HTTPS is much more secure and is preferred when sending and receiving sensitive data such as passwords and credit card information."
Create an endpoint in Express.js which prints out the request path when hit by a POST request.,"app.post(""/"", (req, res) => {
    console.log(""Request path: "" + req.path);
    res.send("""");
});"
"Convert the following NFA (Non-Deterministic Finite Automaton) to DFA (Deterministic Finite Automaton).State S0, S1, S2 
Transition Function:
S0 - a -> S1
S0 - b -> S2
S1 - b -> S0
S1 - a -> S2
S2 - a -> S2
S2 - b -> S1
Start State S0, Final States S1 and S2","State Q0, Q1, Q2 
Transition Function:
Q0 - a -> Q1
Q0 - b -> Q2
Q1 - a -> Q2
Q1 - b -> Q0
Q2 - a -> Q2
Q2 - b -> Q1
Start State Q0, Final States Q0 and Q2"
"Find the number of days in a month given the year and month.Year: 2020
Month: April","Given the year 2020 and month April, the number of days in April is 30."
Generate a correct assembly language code to execution the followingAdd two numbers and store the result in memory address 2000,"MOV R1, #3000 
 MOV R2, #3001 
 ADD R3, R1, R2 
 MOV 2000, R3"
"Convert the following array of strings into a decimal number.[""3"", ""14"", ""5""]","Number(""3.145"")"
"Create a function in Python that executes the below pseudocode.Input: A list of integers

For each integer:
    If the integer is even, add 1 to the list
    If the integer is odd, subtract 1 from the list

Output: A new list of integers","def modify_list(int_list):
    for i in range(len(int_list)):
        if int_list[i] % 2 == 0:
            int_list[i] += 1
        else:
            int_list[i] -= 1
    return int_list"
"Construct an for loop in R for reading in a csv of an dataset.file_name = ""mydata.csv""","d <- read.csv(file_name)
for (i in 1:nrow(d)) {
    # do something with each row of data
}"
"Ask a natural language question with the intent ""What is the population of India?"".",What is the population of India?
"Using regular expressions, separate the below string into three parts.""a=1,b=2,c=3""","regex = ""\w=(\d+)""
a, b, c = re.findall(regex, ""a=1,b=2,c=3"")"
Extract all characters from the following text and store them in a new string.Hello world!,"characters = ""Helloworld!"""
"Identify all person names in the following text using python.John, Paul, and George went to the park.","import re
text = ""John, Paul, and George went to the park.""
persons = re.findall(r""\w+"", text)
print(persons) # [""John"", ""Paul"", ""and"", ""George""]"
"Rewrite the following Python function without using an elif statement.def find_type(x):
    if x == ""a"":
        print(""alpha"")
    elif x == ""b"":
        print(""beta"")
    elif x == ""c"":
        print(""gamma"")","def find_type(x):
    type_map = {""a"": ""alpha"", ""b"": ""beta"", ""c"": ""gamma""}
    if x in type_map:
        print(type_map[x])"
"Arrange in order of increasing magnitude the elements in an integer array.arr = [4, 23, 1, 7, 10]","arr.sort(); // arr is now [1, 4, 7, 10, 23]"
Reverse the characters in the following string: “Hello World”,"""dlroW olleH"""
"Identify the data type (int, string, list, etc.) of the following expression in Python""hello world""",string
"Write Python code which changes a string to all lowercase characters.String: ""This is a string in Uppercase!!!""","text = ""This is a string in Uppercase!!!""
text = text.lower()
print(text)"
"Given an array of integers, write a function that returns the index of the smallest number in the array.array = [3, 1, 9, 6, 17]","def findSmallest(arr):
    
    smallest_index = 0
    for i in range(1, len(arr)):
        if arr[i] < arr[smallest_index]:
            smallest_index = i
    
    return smallest_index

index_of_smallest = findSmallest(array)
print(index_of_smallest) #prints 1"
Generate a random string 10 characters in length using the given Python code.import random,"import random

def generate_random_string(length):
    """"""Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.""""""
    chars = ""abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\|;:'"""",./<>?""
    result = """"
    for i in range(length):
        result += random.choice(chars)
    return result

random_string = generate_random_string(10)
print(random_string) #eg. 7O?1Y%%&_K"
"Search for the string ""tutorials"" in the given text and replace it with the word ""lessons"".text = ""This site provides many Python tutorials""","text = text.replace(""tutorials"", ""lessons"");
console.log(text); // prints ""This site provides many Python lessons"""
"Generate the code to append the item ""banana"" to the end of the list called fruits.fruits = ['apple', 'orange', 'grapes']",fruits.append('banana')
"Generate Python code to find the compound interest for a given principal amount, rate, and time period.","# Python program to find compound interest

def compound_interest(p,r,t):
    # p is the principal amount 
    # r is the rate 
    # t is the time period 
  
    # Calculating compound interest 
    CI = p * (pow((1 + r / 100), t))
    print(""Compound interest is"", CI) 

p=1000
r=10
t=2
compound_interest(p,r,t)"
Design an algorithm to detect whether two given strings are permutations of each other.,"Algorithm:

// Take two strings, str1 and str2

// Step 1:
// Start

// Step 2:
// Run a loop over the length of the strings

// Step 3:
// For each character in str1, check if it also exists in str2. If it does, continue to next character. 

// Step 4:
// If a character does not have a corresponding character in the other string, return False. 

// Step 5:
// If all the characters are found, return True. 

// Step 6:
// Stop"
"Determine how many characters are in a given string.my_string = ""Hello, world!""","length = len(my_string)
print(length) # 13"
"Convert the elements of a given array of strings to integers.arr = [""1"", ""2"", ""3"", ""4"", ""5""]","arr = list(map(int,arr))"
Clone a given repository and create a pull request.https://github.com/myusername/myrepo,"git clone https://github.com/myusername/myrepo
git checkout -b my-new-feature
git commit -am ""Added new feature""
git push origin my-new-feature
git pull-request -m ""New feature added"""
"Build an array of objects from a given array of numbers.arr = [1, 2, 3, 4, 5]","arr = [
 {
  num: 1 
 }, 
 {
  num: 2
 }, 
 {
  num: 3
 }, 
 {
  num: 4
 }, 
 {
  num: 5
 }
]"
Generate a simple Flask route to handle a GET request.,"from flask import Flask

app = Flask(__name__)

@app.route(""/myroute"", methods=[""GET""])
def myfunc():
  # write code here

if __name__ == '__main__':
 app.run()"
"Calculate the difference between two given dates in terms of days.date1 = ""2020-5-15""
date2 = ""2020-6-20""","from datetime import datetime

date1 = datetime.strptime(date1, ""%Y-%m-%d"")
date2 = datetime.strptime(date2, ""%Y-%m-%d"")

difference = date2 - date1  
print(difference.days) # 36"
Create a list of 10 strings in Python and print each string in a separate line.,"mylist = ['string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10']
for item in mylist:
  print(item)"
Create a class in Python with one method called talk that prints a string when invoked.,"class MyClass:
  def talk(self):
    print(""Hello, world!"")"
Construct a query to find all movies released since a given year.year: 2000,"SELECT * FROM movies
WHERE year > 2000;"
"Write a function to extract the elements from a given list and add them to a new list.given_list = [0, 2, 4, 6, 8]","def extract_and_add_elements(given_list):
    new_list = []
    for x in given_list:
        new_list.append(x)
    return new_list"
"Write an Objective-C code to create a loop that iterates 10 times, printing out the iteration number each time.","for(int i = 1; i <= 10; i++) {
  NSLog(@""Current Iteration: %d"", i);
 }"
Create a Python class for a user object that includes a name and email field.,"class User:
    def __init__(self, name, email):
        self.name = name
        self.email = email"
"Create a Flask endpoint that displays a ""Hello World!"" message.","@app.route(""/"", methods=['GET'])
def hello_world():
    return ""Hello World!"""
"Create a Mongoose schema for a blog post with the following fields: title (String), body (String), and isPublished (Boolean).","const blogPostSchema = new mongoose.Schema({
  title: { type: String, required: true },
  body:  { type: String, required: true },
  isPublished: { type: Boolean, default: false}
});"
Produce an R code snippet to randomly sample 10 elements from vector x.,"sample(x, size = 10, replace = FALSE)"
"Summarize the following article in one sentence.The article is about the rise of artificial intelligence, and how it is impacting the job market and our lives in general.",Artificial intelligence is rapidly transforming the job market and our lives as a whole.
"Using recursion, write a Python program to find the factorial of a given number.Number: 5","def factorial(num): 
    if num == 1: 
        return 1
    else: 
        return num * factorial(num-1)

ans = factorial(5)
print(ans)"
"Using the given regular expression, find all the email addresses in the text provided.Regular Expression: /\S+@\S+\.\S+/
Text: Please contact support@example.com for assistance.",support@example.com
"Create a Python dictionary with customer details provided.Name: John
Age: 25
Gender: Male
Occupation: Chef","customer = { 
'name': 'John',
'age': 25,
'gender': 'Male',
'occupation': 'Chef'
}"
"Compare the two strings using the given regular expression.Regular Expression: /^[a-z]+$/
Strings: string1 and string2","import re

regex = re.compile(r""^[a-z]+$"")

string1 = ""string1""
string2 = ""string2""

if regex.match(string1) and regex.match(string2):
    if string1 == string2:
        print(""The strings are equal"")
    else:
        print(""The strings are not equal"")"
"With the provided data, find the correlation coefficient between the two variables.x: [4, 5, 7, 8]
y: [6, 7, 8, 10]","x = [4, 5, 7, 8]
y = [6, 7, 8, 10]

def find_correlation_coefficient(x, y):
    n = len(x)
    # Calculate the sums
    sum_x = sum(x)
    sum_y = sum(y)
    # Calculate the sum of the squares
    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])
    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])
    # Calculate the sum of the products
    product_sum = sum([x[i]*y[i] for i in range(n)])
    # Calculate the correlation coefficient
    num = product_sum - (sum_x * sum_y/n)
    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5
    r = num/den
    return r

print("" The correlation coefficient is: "" + str(find_correlation_coefficient(x, y))) # 0.9"
"Parse the given string and return a list of words.string = ""this is a test string""","def parse_string(string):
    words = string.split()
    return words"
"Create a program to calculate the mean of the following list.myList = [4, 8, 10, 15]","def mean(myList):
    sum = 0
    for num in myList:
        sum += num
    average = round(sum/len(myList), 2)
    return average

mean_result = mean(myList)"
"Return the number of elements in a dictionary.myDict = {'a':1, 'b':2, 'c':3}","def count_dict_elements(myDict):
    count = 0
    for key in myDict:
        count += 1
    return count
        
element_nums = count_dict_elements(myDict)"
"Given two strings, s1 and s2, write a program to return the longest common substring between them.s1 = 'abcdef'
s2 = 'fghijk'","def longest_common_substring(s1, s2):
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
            if s1[x - 1] == s2[y - 1]:
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else:
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]

longest_substring = longest_common_substring(s1, s2)"
"Edit the code to create a program to print all the leap years between 1900 and 2000.for year in range(1900, 2001):
    # TODO","for year in range(1900, 2001):
    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
        print(year)"
Name two methods of sorting a list in Python.,The two methods of sorting a list in Python are the sorted() function and the .sort() method.
What is the difference between higher order functions and first class functions?,"Higher order functions are functions that can take other functions as arguments or return other functions as output. First class functions are functions that can be passed as arguments to other functions, returned from other functions, assigned to variables, or used in any other way that a value can be used."
Construct a function with two parameters to return the sum of the squares of the parameters.,"def sum_squares(x, y):
    return x*x + y*y"
"Given a string of text, write a python script to remove all non-alphanumeric characters.","def remove_non_alphanumeric_chars(input_string):
  return ''.join(c for c in input_string if c.isalnum())"
"Use the given array to find distinct values.arr = [1, 2, 3, 3, 4, 5]","def find_distinct(arr):
    distinct_list = []
    for num in arr:
        if num not in distinct_list:
            distinct_list.append(num)

    return distinct_list

arr = [1, 2, 3, 3, 4, 5]
print(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]"
"Replace the character ‘_’ with the underscore symbol in a string.sample_string = ""this__is_a_sample_string""","def replace_underscore_char(sample_string):
    return sample_string.replace('_', '\_')

sample_string = ""this__is_a_sample_string""

print(replace_underscore_char(sample_string))  # Output: this\_\_is\_a\_sample\_string"
"Write an expression to select the first element from a list.list = [1, 2, 3, 4]","list[0]
 or 
list[-4]"
Create a tuple of strings.,"my_tuple = (""Apple"", ""Banana"", ""Orange"")"
"Extract the last four characters from a text string.text = ""This is a sample text""","text[-4:]  # Output: ""text"""
"Create a dictionary with two given lists.list1 = [""John"", ""Adam""]
list2 = [25, 30]","def create_dict(list1, list2):
    dictionary = dict(zip(list1, list2))
    return dictionary

list1 = [""John"", ""Adam""]
list2 = [25, 30]

print(create_dict(list1, list2))  # Output: {'John': 25, 'Adam': 30}"
"You have been given a list of user details (Names, Addresses etc). Write a code to filter out the users whose age is more than 21.user_details = [
 {'name': 'John Doe', 'age': 34, 'address': '123 Main Street'},
 {'name': 'Jane Doe', 'age': 18, 'address': '456 Wallaby Way'},
 {'name': 'Bob Smith', 'age': 21, 'address': '789 Ocean View'},
]","def filter_users(user_details):
  users_over_21 = []
  for user in user_details:
    if user['age'] > 21:
      users_over_21.append(user)
  return users_over_21

if __name__ == ""__main__"":
  print(""Users over 21:"", filter_users(user_details))"
Write a code to generate fibonacci series for first n numbers.,"def generate_fibonacci(n):
  fibonacci = [0, 1]
  for i in range(2, n):
    fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])
  return fibonacci[:n]

if __name__ == ""__main__"":
  print(generate_fibonacci(n))"
"You have been given a list containing both words and numbers. You need to write a code to generate a new list containing only words in the original list and to calculate the average length of the words.mixed_list = ['cat', 1, 'dog', 2, 'rabbit', 3]","def get_words(mixed_list):
  words = []
  for item in mixed_list:
    if type(item) == str:
      words.append(item)
  return words

def get_average_word_length(words):
  total_length = 0
  for word in words:
    total_length += len(word)
  return total_length/len(words)

if __name__ == ""__main__"":
  words = get_words(mixed_list)
  print(""Words in original list:"", words)
  print(""Average length of the words:"", get_average_word_length(words))"
"You have been given a list of numbers. Write a code to generate a new list of numbers containing only the even numbers from the original list.numbers = [2, 3, 5, 6, 8, 9, 10]","def get_even_numbers(numbers):
  even_numbers = []
  for num in numbers:
    if num % 2 == 0:
      even_numbers.append(num)
  return even_numbers

if __name__ == ""__main__"":
  print(""Even numbers from original list:"", get_even_numbers(numbers))"
"You have been given a list of strings. Write a code to generate a new list containing only the strings with length less than 6 characters.strings = ['Ready', 'Set', 'Go', 'Hello', 'Pizza', 'Book']","def get_shorter_strings(strings):
  shorter_strings = []
  for string in strings:
    if len(string) < 6:
      shorter_strings.append(string)
  return shorter_strings

if __name__ == ""__main__"":
  print(""strings with length less than 6:"", get_shorter_strings(strings))"
"Write a code to count the occurrences of a particular element in a given list.list1 = [1, 2, 3, 3, 3, 4, 5]
element = 3","def count_occurrences(list1, element):
  count = 0
  for elem in list1:
    if elem == element:
      count += 1
  return count

if __name__ == ""__main__"":
  print(""Number of occurrences of"", element, ""in the list:"", count_occurrences(list1, element))"
"Assign a value to each of the variables, x = ? and y = ?, such that x + y = 7.","int x = 3;
int y = 4; // x + y = 7"
"Modify the code snippet below to insert the element 'z' into the end of an array.arr = ['a', 'b', 'c', 'd', 'e']","arr = ['a', 'b', 'c', 'd', 'e'] 
arr.append('z') 
print(arr)"
Create a function to convert a given integer to a string in Python.,"def intToStr(n): 
	return str(n)

# Driver Program 
intNum = 55
  
# Print the output 
print(intToStr(intNum))"
"Write a regular expression to match the string ""123 Main Street"".","regex = r""^\d{3}\s[A-Za-z]+\s[A-Za-z]+$"""
Write a Python program to identify whether or not a given number is prime.,"def is_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True"
"Write a code to detect all possible anagrams of a given word in Python.word = ""cat""","def all_anagrams(word):
 
    if len(word) ==0:
        return [word]
    else:
        temp = []
        for anagram in all_anagrams(word[1:]):
            for i in range(len(word)):
                temp.append(anagram[:i] + word[0:1] + anagram[i:])
        return temp

all_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']"
"Edit a piece of code to fix a syntax error.def loopList(list) 
  for i in range(5) 
    sum += list i
  
  return sum","def loopList(list): 
  sum = 0
  for i in range(5):
    sum += list[i] 
  
  return sum"
"Debug the following for loop for computing the sum of numbers from 0 to 10.for num in range(0:11)
  sum = sum + num","sum = 0
for num in range(0, 11):
    sum = sum + num"
What is a bot?,"A bot is a software application that automates simple tasks such as sending messages, responding to questions, or performing other tasks. It is often used to create interactive experiences with users, such as chatbots or virtual assistants. It can also be used to automate online activities such as web browsing and data entry."
"Given a 2-dimensional array, print the elements across each row.arr = [[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]]","for row in arr:
    for col in row:
        print(col, end="" "")
    print("""")
# Output
1 2 3
4 5 6
7 8 9"
"Evaluate the following expression:  2x + 3y - 7z.x = 5, y = -1, z = 8",2 * 5 + 3 * -1 - 7 * 8 = -31
"Write a code snippet to take in 2 integers and generate the minimum of the 2 numbersint x = 5
int y = 9","min = min(x, y)
print(min) # Output: 5"
"Output the string ""Programming is Fun"" when you run the code?",print('Programming is Fun')
"Read an array of numbers and output an array with all the even numbersarray = [2, 3, 4, 5, 6, 7, 8]","even_array = [i for i in array if i % 2 == 0] 
print(even_array) # Output: [2, 4, 6, 8]"
"Write code that validates a given number is within a given rangenum = 5
min = 0
max = 10","def in_range(num, min, max):
    if num in range(min, max):
        print(f'{num} is in range')
    else:
        print(f'{num} is not in range')
in_range(num, min, max) # Output: 5 is in range"
"When given a list of words, output the longest word.['cat', 'elephant', 'apple', 'banana']",elephant
"Given a list of words and numbers, create a program to print out the unique words and unique numbers.['cat', 'elephant', 'dog', '15', '20', 'elephant', '8']","Words: ['cat', 'dog', 'elephant']
Numbers: [15, 20, 8]"
"Using a given array of numbers, create a function to display the frequency of each number.","def frequency(array):
    count = {}
    # Count the number of occurances
    for element in array:
        if element not in count:
            count[element] = 1
        else:
            count[element] += 1

    # Display the count
    for element in count:
        print(""Number {} occurs {} times"".format(element, count[element]))"
"Create a for loop in Python that iterates over every element in a list named 'nums'.nums = [1, 4, 6, 8, 10]","for num in nums:
    # Do something with num"
Write a Python program to find the longest substring in a given string which has no repeating characters.,"def longest_substring_without_repeating_characters(str):
    start, max_len = 0, 0
    used_char = {}

    for i, char in enumerate(str):
        if char in used_char and start <= used_char[char]:
            start = used_char[char] + 1
        else:
            max_len = max(max_len, i - start + 1)

        used_char[char] = i
        
    return max_len"
"Print out the 3rd element in the list.list_to_print = ['foo', 'bar', 'baz']",baz
Perform the following calculation without using the multiplication operator.2*3,2 + 2 + 2
Replace all 'e' characters with asterisks in the following sentence.The elephant is walking,Th* appl*phant is walking
Write a function to detect if the given integer is even or odd.number = 3,"def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False"
Compute the value of the expression given below.(2^3) + 5,21
"Find all local maxima in the given list.list_vals = [1, 2, 3, 4, 5, 2, 1]","[3, 4, 5]"
"Write a class and its constructor in Python for a vehicle object that has the fields 'type', 'make', 'model' and 'color'.Car, Toyota, Camry, Red","class Vehicle:
    def __init__(self, vehicle_type, make, model, color):
        self.type = vehicle_type
        self.make = make
        self.model = model
        self.color = color

car = Vehicle(""Car"", ""Toyota"", ""Camry"", ""Red"")"
Create a script to find the longest palindrome in a given sentence.This is a level sentence.,"function findLongestPalindrome(str) {
    let longestPalindrome = '';

    for (let i = 0; i < str.length; i++) {
        for (let j = i + 1; j < str.length + 1; j++) {
            let currentSubstr = str.substring(i, j);

            if (currentSubstr === currentSubstr.split("""").reverse().join("""") && currentSubstr.length > longestPalindrome.length) {
                longestPalindrome = currentSubstr;
            }
        }
    }

    return longestPalindrome; 
}
  
console.log(findLongestPalindrome(""This is a level sentence."")); // Outputs: ""level"""
Write a condition in an if-statement that checks whether a number is within a range of 5 to 10.number = 7,"if (number > 5 && number < 10) {
  // do something
}"
"Design a data structure to store a list of names of the student with their respective grades in a class.Student names and grades

[
    ['John', 90], 
    ['Tom', 80],
    ['Jill', 95],
    ['Stacy', 75]
]","class StudentGrades:
    def __init__(self, names, grades):
        self.names = names
        self.grades = grades
    
    def add_entry(self, name, grade):
        self.names.append(name)
        self.grades.append(grade)
        
    def get_grade(self, name):
        for i in range(len(self.names)):
            if self.names[i] == name:
               return self.grades[i]"
"Compose a code to find the mean and median of a given list[1, 6, 4, 9, 5, 8, 2]","def get_mean_median(nums):
    num_count = len(nums) 
    num_sum = 0.0
    for num in nums: 
        num_sum += num
  
    mean = num_sum / num_count 
  
    nums.sort() 
    if num_count % 2 == 0: 
        median1 = nums[num_count//2] 
        median2 = nums[num_count//2 - 1] 
        median = (median1 + median2)/2
    else: 
        median = nums[num_count//2] 
  
    return mean, median"
"Design a code to arrange an array of numbers such that all odd numbers come before even numbers.[2, 8, 3, 4, 9]","def rearrange_arr(arr): 
    odd_list, even_list = [], [] 
    for num in arr: 
        if num & 1: 
            odd_list.append(num) 
        else: 
            even_list.append(num) 
  
    return odd_list + even_list"
"Construct a code to remove all numbers greater than specified value from a given list.[1, 6, 4, 9, 5, 8, 2], 7","def remove_greater(arr, value):
    new_arr = []
    for num in arr:
        if num <= value:
            new_arr.append(num)
    return new_arr"
"Design a code to divide two integers without using division operator.38, 4","def divide_without_operator(x, y):
    if x == 0:
        return 0 
  
    sign = 1
    if x * y < 0:
        sign = -1
  
    x = abs(x) 
    y = abs(y) 
  
    result = 0
  
    while (x >= y): 
  
        temp = y 
        i = 1
  
        while (x >= temp): 
            x -= temp 
            result += i 
            i <<= 1 
            temp <<= 1 
  
    return result * sign"
"Build a code to print out all permutations of the characters in a given string.""ABC""","def permute(s): 
    if len(s) == 0: 
        return [''] 
    prev_permutation_list = permute(s[1:len(s)])  
    next_list = [] 
    for p in prev_permutation_list: 
        for j in range(len(p) + 1): 
            next_list.append(p[0:j] + s[0] + p[j:len(p)])  
    return next_list"
Generate a random string of 10 characters that contains only lowercase letters.,hcuqwhvqme
"Given an array of integers, return the sum of the elements.[1, 2, 3, 4]",10
"Given a string of text, print the count of all the words.","def word_count(string):
    count = 0
    for word in string.split():
        count += 1
    return count"
"Rearrange the following code segments to sort an array of integers in descending order.array = [3, 5, 7, 1, 2];

A. for(let i=1; i<array.length; i++)
B. for(let j=i+1; j<array.length; j++)
C. if(array[i] < array[j])
D. [array[i], array[j]] = [array[j], array[i]];","for(let i=0; i<array.length; i++) {
    for(let j=i+1; j<array.length; j++) {
        if(array[i] < array[j]) {
            [array[i], array[j]] = [array[j], array[i]];
        }
    }
}"
Write an algorithm to find the longest sub string without repeating characters.string = 'abcabcbb',"def length_longest_substring(string):
    start = 0
    max_length = 0
    seen = {}
    for end in range(len(string)):
        # Check if the character has been previously seen.
        if string[end] in seen:
            # Move the starting point of the substring to the index after the last seen character of this character.
            start = max(start, seen[string[end]] + 1)
        # Update the index value of the last seen character.
        seen[string[end]] = end
        # Calculate the length of the current substring.
        max_length = max(max_length, end - start + 1)
    # Return the maximum length of the substring.
    return max_length"
"Summarize the text into a few sentences.The United Nations (UN) is an intergovernmental organization that aims to maintain international peace and security, develop friendly relations among nations, achieve international co-operation and be a centre for harmonizing the actions of nations. It is the largest, most familiar, most internationally represented and most powerful intergovernmental organization in the world.","The United Nations is a global intergovernmental organization that works to maintain peace and security, foster friendly relations between nations, and promote international cooperation. It is the world's largest and most internationally represented organization, and is capable of powerful action to promote global harmony."
"Create an array containing 5 records of emplyee data, including name, age and city.","let employeeData = [
  {
    ""name"": ""John"",
    ""age"": 24,
    ""city"": ""New York""
  },
  {
    ""name"": ""Jane"",
    ""age"": 28,
    ""city"": ""London""
  },
  {
    ""name"": ""Bob"",
    ""age"": 32,
    ""city"": ""Los Angeles""
  },
  {
    ""name"": ""Alice"",
    ""age"": 25,
    ""city"": ""San Francisco""
  },
  {
    ""name"": ""Greg"",
    ""age"": 30,
    ""city"": ""Paris""
  }
]"
Generate a random probability distribution with mean 0 and standard deviation 1 in Python.,"import numpy as np

dist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples"
Provide an example of a query to find all users whose age is 16 or over.,"SELECT * FROM Users
WHERE age >= 16;"
Create a function in R which returns the number of rows in a dataframe.,"number_of_rows <- function(dataframe) {
  return (nrow(dataframe))
}"
"Filter a given list of numbers in Python to find all the even numbers.list1 = [3, 4, 5, 6, 7, 8, 9]","list2 = [number for number in list1 if number % 2 == 0]
print(list2) #[4, 6, 8]"
"Sort a given list of strings in ascending order by length in Python.list1 = [""cat"", ""apple"", ""dog"", ""banana""]","list2 = sorted(list1, key=len)
print(list2) #['cat', 'dog', 'apple', 'banana']"
Create a function in R to get the last seven characters of a string.,"substr_last7 <- function(string) {
  return (substr(string, nchar(string)-6, nchar(string)))
}"
"Write a function to decode a string encoded using Base64.encoded_s = ""TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgdGluY2lkdXJlIGV4c2VlIGRlc2VydW50IG1vbGxpdCBhbmltIGlwc3VtIHRlbXBvcmUgYSBjb25zZXF1YXQgcXVpcyBkb2xvcmVtIG5pc2ku","import base64 
def decode_base64(encoded_s):
   decoded_s = base64.b64decode(encoded_s).decode('utf-8') 
   return decoded_s"
"Write a function to classify a text as positive or negative.text = ""This is an amazing product.""","def classify_text(text):
  score = 0
  words = text.split("" "")
  for word in words:
    if word in positive_words:
      score += 1
    elif word in negative_words:
      score -= 1
  if score > 0:
    return ""positive""
  elif score == 0:
    return ""neutral""
  else:
    return ""negative"""
"Clone a given array.arr = [1,2,3,4,5]","def clone(arr):
  new_arr = arr.copy()
  return new_arr"
Provide a function to read a single line of user input in Python.,"def read_input():
    """"""Reads a single line of user input.""""""
    return input()"
"Retrieve the value of an item in a given array.arr = [1, 2, 3, 4, 5]","def get_item_val(arr, idx):
	""""""Retrieves the value of an item from the given array at a given index.""""""
	if idx < 0 or idx > len(arr):
		return None
	return arr[idx]"
Generate an array with all the numbers from 1 to 100,"nums = [i for i in range(1,101)]"
Perform sentiment analysis on this text.It was a wonderful experience staying at the hotel,The sentiment of the text is positive.
Define a function called find_sum that takes a list of numbers and adds them all together.,"def find_sum(seq): 
    s = 0 
      
    # iterate over the sequence 
    for i in seq: 
        s += i 
      
    return s"
"Suggest a way to debug these lines of code.// code
int i = 0;
while (i<10)
{
	i++;
	System.out.println(""Something is wrong!"");
}","One way to debug these lines of code is to add print statements before and after the loop to print the value of ""i"" both before and after the loop. Then, inside the loop, you can print out the value of ""i"" just before the ``println`` statement and you can also print out the value of ``i`` after the loop is exited. This will help you see which iteration is causing the issues."
Create a python function that will convert a string to all uppercase.,"def toUpperCase(str):
  return str.upper()"
"Suggest a way to find the number of occurrences of a time value in a given array.array = [10:00, 11:30, 10:00, 8:30, 10:00]","We can use the reduce method to count the number of occurrences of a certain time value in the array.

var array = [10:00, 11:30, 10:00, 8:30, 10:00];
var desiredTime = '10:00';

var count = array.reduce((n, val) => {
    return n + (val === desiredTime);
}, 0);

console.log(count); // output: 3"
Construct a function that can generate a unique identifier.,"function generateId() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}"
Create an array of random integers between 1 to 10 using the function **np.random.randint**.,"# Create array of random integers between 1 to 10
import numpy as np
random_integers = np.random.randint(low=1, high=10, size=10)"
"Write a function in Python which can generate a random string consisting of lowercase letters, numbers and symbols.","import string
import random

def random_string(stringLength=10):
  lettersAndDigits = string.ascii_letters + string.digits + string.punctuation
  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))"
"Generate XML tags for the given list of strings.list = [""string1"",""string2"",""string3""]","<?xml version=""1.0"" encoding=""UTF-8""?>
<root>
  <string1></string1>
  <string2></string2>
  <string3></string3>
</root>"
Create two classes in Python which inherits from a parent class called **Shape**.,"class Shape(object):
  pass
  
class Square(Shape):
  def __init__(self, side):
    self.side = side
    
class Circle(Shape):
  def __init__(self, radius):
    self.radius = radius"
Create a function in Python for sending an email using the SMTP protocol.,"import smtplib

def send_email(sender, recipient, message): 
  smtp_server = smtplib.SMTP(""smtp.example.com"")
  smtp_server.sendmail(sender, recipient, message)
  smtp_server.quit()"
"Find the number at the given index in an array.array = [1,2,3,4,5], index = 3","def find_number(arr, index):
  return arr[index]"
"Given the data structure below, write a function to print out all the elements in the array.const arr = [1, 2, 3, 4, 5];","function printArray(arr){
  for (let i = 0; i < arr.length; i++){
    console.log(arr[i]);
  }
}

printArray(arr);"
Implement a function that check if a number is prime.,"function isPrime(num) {
    for (let i = 2; i < num; i++) {
        if (num % i === 0) {
            return false;
        }
    }
    return num > 1;
}"
Write a function to calculate the power of two number (base^exp).,"function power(base, exp) {
  if (exp == 0) return 1; 
  return base * power(base, exp-1)
}

power(5, 3);"
"Identify and implement a sorting algorithm for the following arrayint[] array = {23, 10, 4, 15, 66, 28, 11};","int[] array = {23, 10, 4, 15, 66, 28, 11}; 
 
// Insertion sort
for (int i = 1; i < array.length; i++) {
    int key = array[i];
    int j = i-1;
 
    while (j >= 0 && array[j] > key) {
        array[j + 1] = array[j];
        j = j - 1;
    }
    array[j + 1] = key;
}

System.out.println(""Sorted array: "");
for (int i = 0; i < array.length; i++) {
    System.out.print(array[i] + "" "");
}"
"Given a string, change the spaces between words to underscoresString: ""This is a string""","String str = ""This is a string"";
String newStr = str.replaceAll(""\\s"", ""_"");
System.out.println(newStr);  // This_is_a_string"
Create a function in Python to identify if the inputted number is odd or even.,"def is_odd_or_even(num): 
  return ""even"" if num % 2 == 0 else ""odd"""
"Using an array, write a Python script that prints the sum of the numbers from 0 to 10.","arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
sum = 0
  
# Iterate to find the sum 
for i in range (0, len(arr)): 
    sum = sum + arr[i] 
      
# Print the sum  
print(sum)"
"Convert the following array of integers to a string: [1, 2, 3, 4, 5][1, 2, 3, 4, 5]","""1 2 3 4 5"""
"How can you ensure that a button element with the ID of ""submit-btn"" is not clickable?","You can ensure that a button element with the ID of ""submit-btn"" is not clickable by adding this code to the CSS file: 

#submit-btn{
  pointer-events: none;
}"
Create a list comprehension in Python to generate odd numbers between 1 and 10,"odd_numbers = [x for x in range(1, 11) if x % 2 != 0]"
"Change the following code to create a new string without spaces.string = ""Hello World""","string = string.replace(' ', '') # new string is ""HelloWorld"""
"Make a valid http request call with the following parametersurl = 'www.example.com'
Method = 'GET'
Header = 'Content-Type:application/json'","import requests

url = 'www.example.com'
headers = {'Content-Type':'application/json'}
r = requests.get(url, headers=headers)"
"How many lines of code does the following function contain?def f(x):
    s = 0
    for j in range(1,x+1):
        for k in range(1,x+2):
            if j % k == 0:
                s = s + 1
    return s",This function contains 8 lines of code.
Classify the following sentence as offensive or non-offensive.Sentence: Your work is terrible!,Offensive.
"Generate a list of 10 items from the given array.myArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Create an efficient algorithm that finds the intersection between two sorted arrays.arr1 = [1, 2, 6, 8, 9]
arr2 = [2, 3, 5, 6, 7]","def intersection(arr1, arr2): 

    result = []
    
    i = 0
    j = 0
  
    while i < len(arr1) and j < len(arr2): 
        if arr1[i] < arr2[j]: 
            i += 1
        elif arr2[j] < arr1[i]: 
            j += 1
        else: 
            result.append(arr2[j]) 
            j += 1
            i += 1
  
    return result"
Write a Dockerfile for an Nginx server.,"FROM nginx:alpine

COPY www/ /usr/share/nginx/html/

EXPOSE 80

CMD [""nginx"", ""-g"", ""daemon off;""]"
Write a code to extract data from a PDF document.,"# install the required package
pip install pdfminer.six

# importing all the required modules 
from pdfminer.pdfparser import PDFParser 
from pdfminer.pdfdocument import PDFDocument 

# open the pdf file 
fp = open('sample_form.pdf', 'rb') 

# create parser object 
parser = PDFParser(fp) 

# create pdf document object 
doc = PDFDocument(parser) 

# get the text data from pdf file 
data = doc.get_data() 

# print the text extracted 
print(data)"
"Create a program to search for a word in a document.document = ""This is a sample document with some words.""
word = ""words""","def search(document, word):
    if word in document:
        print(""The word '{}' was found in the document"".format(word))
    else:
        print(""The word '{}' was not found in the document"".format(word))

search(document, word) # output = ""The word 'words' was found in the document."""
Create a dictionary of 10 words and their meanings.,"words_dict = {
    'Piano': 'A musical instrument with keys and strings',
    'Cello': 'A string instrument played with a bow',
    'Drums': 'A percussion instrument',
    'Guitar': 'A plucked stringed instrument',
    'Harp': 'A stringed instrument played with the hands',
    'Trumpet': 'A brass instrument',
    'Violin': 'A bowed string instrument',
    'Oboe': 'A double-reed wind instrument',
    'Clarinet': 'A single-reed wind instrument',
    'Flute': 'A wind instrument with a metal or wooden tube'
    }"
"Parse a string containing the date in the format: ""YYYY-MM-DD""date = ""2021-10-15""","def parse_date(date):
    year, month, day = date.split('-')
    return (year, month, day)

date_tuple = parse_date(date)
print(date_tuple) # output = ('2021', '10', '15')"
"Create a program to generate random passwords of 8 characters consisting of letters, numbers and special characters.","import random
import string

def generate_password(length):
    letters_and_digits = string.ascii_letters + string.digits 
    special_characters = '!@#$%^&*()'
    chars = letters_and_digits + special_characters
    return ''.join(random.choice(chars) for i in range(length))

print(generate_password(8)) # output = xT@lo6Sw"
"Edit the following code to return a Promise in the getMessage() functionfunction getMessage() {
    const fullName = getName();
    // TODO: return a Promise
}","function getMessage() {
    const fullName = getName();
    // return a Promise
    return new Promise ((resolve, reject) => {
       resolve(fullName);
    });
}"
We want to display a random number between 1 and 10 using Python. Write a program for that.,"import random
randomNumber = random.randint(1, 10)
print(randomNumber)"
"Construct a multi-threaded application in Python to read and calculate the sum of a list of numbers.List of numbers:[25, 10, 5, 20]","import threading 
  
# function to read the numbers 
def read_sum(list_of_numbers): 
    total = 0
    for number in list_of_numbers: 
        total += number  
  
    print(""Sum of the list of numbers is: {}"".format(total)) 
  
# Driver code 
list_of_numbers = [25, 10, 5, 20] 
start = 0
end = len(list_of_numbers) 
  
# creating thread 
t1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],)) 
  
# starting thread 1 
t1.start() 
# wait until thread 1 is completely executed 
t1.join() 
  
# both threads completely executed 
print(""Done!"")"
"Create a UI Automation test that validates the text field is populated with the value ""Hello World!"".","describe('Populated Text Field Test', () => { 
    it('Should validate the text field has the value of ""Hello World!""', () => {
        const value = textField.getAttribute('value');
        expect(value).toEqual('Hello World!');
    }); 
});"
Design an algorithm in Python to detect palindrome strings.,"def is_palindrome(s):
    rev = ''.join(reversed(s))
    if (s == rev): 
        return True
    return False"
"Code a function that prints out the characters of a string one by one.str = ""Hello World!""","function printCharByChar(str) {
    for (let i=0; i<str.length; i++) { 
        console.log(str.charAt(i)); 
    } 
} 
printCharByChar(str);"
"Your job is to generate random numbers within a given range.min = 20, max = 40","function getRandomNumber(min, max){
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
console.log(getRandomNumber(min, max));"
"You are expected to calculate the average of the elements in an array.arr: [4, 7, 13, 33]","function calculateAverage(arr){
    let sum = 0;
    for(let i=0; i<arr.length;i++){
        sum+=arr[i];
    }
    return sum/arr.length;
}
console.log(calculateAverage(arr));"
"Find the greatest number from an array.arr = [41, 77, 56, 99]","function greatestNumber(arr) { 
    return Math.max(...arr); 
} 
console.log(greatestNumber(arr));"
"Code a function to compute the difference between two dates.date1 = ""02/26/2019"";
date2 = ""10/25/2020"";","function dateDifference(date1, date2){
    let date1Moment = moment(date1, ""MM/DD/YYYY"");
    let date2Moment = moment(date2, ""MM/DD/YYYY"");
    let diffInDays = date2Moment.diff(date1Moment, 'days');
    return diffInDays;
}
console.log(dateDifference(date1, date2));"
Deploy a Keras model to Google App Engine.,"1. Create a Google Cloud Platform project and enable the App Engine API.
2. Create an app for your project on App Engine.
3. Install the Google Cloud SDK and authentication into your machine.
4. Initialize your project and configure the App Engine.
5. Follow the instructions to deploy the model with Google Cloud Endpoints.
6. Copy the URL from the Cloud Endpoint and use it to access the model from the App Engine."
Formulate a plan to automate a login process.,"1. Identify the website that requires the login process.
2. Connect to the website using the appropriate library/API.
3. Get the username and password credentials from a secure database (or a file).
4. Use the credentials to create a login request.
5. Capture the response and analyze the outcome.
6. Extract any key elements of the response that are required to perform other activities (if required).
7. Log details from the login request in the database (or a file).
8. Handle any error cases appropriately."
Create a class for a basketball team.,"class BasketballTeam:

    def __init__(self, name, players):
        self.name = name
        self.players = players
    
    def get_name(self):
        return self.name
    
    def get_players(self):
        return self.players
    
    def add_player(self, player):
        self.players.append(player)
        return self.players"
Implement a queue data structure.,"class Queue:
    def __init__(self):
        self.data = []

    def is_empty(self):
        return not self.data 

    def enqueue(self, element):
        self.data.append(element)

    def dequeue(self):
        return self.data.pop(0)
        
    def peek(self):
        if not self.is_empty():
            return self.data[0]"
Run a sentiment analysis of the following sentence using Python.The food was really good but the service was terrible.,"""""""
Run a sentiment analysis of the sentence using Python
""""""
import nltk 
from textblob import TextBlob 

text = 'The food was really good but the service was terrible.'
blob = TextBlob(text) 
for sentence in blob.sentences:
    print(sentence.sentiment)

# Output
Sentiment(polarity=0.05, subjectivity=0.6)"
"Given a data set, calculate the average using Python.[1, 2, 3, 4, 5]","nums = [1,2,3,4,5]
sum = 0

for num in nums:
  sum +=num

average =sum / len(nums)

print(average) // output is 3.0"
"Using Python, create a program that prints out the numbers 0 to 100.","for i in range(101):
    print(i)"
How many islands of Scotland are there?,"There are over 700 islands in Scotland, with approximately 150 of them being inhabited."
Develop an API that returns a list of students and their ages.,"import flask

app = flask.Flask(__name__)

students = {
    'John': 20,
    'Jane': 19,
    'Bob': 22
}

@app.route(""/get_student_ages"", methods = [""GET""])
def get_student_ages():
    return flask.jsonify(students)
  
if __name__ == ""__main__"":
    app.run()"
"Identify which of these strings is a valid email address?name@example.com,lily.flower@example.net,www@example.org",name@example.com is a valid email address.
"Choose the correct output of the following program.x = 3
y = 4
z = 5

if x < y and y < z:
    print(x + y + z)",12
"Create a program to detect a negative number in an array of numbers.numbers = [10, -5, 4, 20]","def detect_negative_number(numbers):
    flag = False
    for num in numbers:
        if num < 0:
            flag = True
            break
    return flag"
"Generate permutations of the given array of numbers.numbers = [1, 2, 3]","def permutations(arr):
    # base case:
    if len(arr) == 0:
        return []
 
    # base case: 
    if len(arr) == 1:
        return [arr]
 
    # find all permutations for arr of size n-1
    smaller_permutations = permutations(arr[1:])
 
    # find permutations for element at the index 0
    current_element = arr[0]
    permutations_for_current_element = []
 
    # iterate smaller permutations
    for per in smaller_permutations:
        # create new permutation
        for i in range(len(per)+1):
            # copy original values
            new_permutation = per[:]
            # insert current element
            new_permutation.insert(i, current_element)
            permutations_for_current_element.append(new_permutation)
 
    return permutations_for_current_element"
Write a function to calculate the triangular number of a given number n.,"def getTriangularNumber(n):
    return int(n * (n + 1) / 2)"
"Design algorithm for the below use caseGiven two arrays A and B of the same length, determine whether there is a pair of indices (i, j) such that A[i] == B[j].","def check_if_pair_exists(arr_a, arr_b):
    for i in range(len(arr_a)): 
        for j in range(len(arr_b)): 
            if arr_a[i] == arr_b[j]: 
                return True
    return False"
Write the pseudo-code algorithm that implements the following polynomial equation3x^3 + 4x - 2,"def polynomial_eqn(x):
    y = 3 * x**3 + 4 * x - 2
    return y"
Design the algorithm to perform a depth-first search on given binary tree,"def DFS(root):
    s = Stack()
    s.push(root)
    while (s.size() > 0):
        node = s.pop()
        # Do something with the node
        if (node.left != NULL):
            s.push(node.left)
        if (node.right != NULL):
            s.push(node.right)"
Write the code to calculate a factorial recursively,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)"
Create a sorting algorithm for an array that only needs 1 iteration,"def one_iteration_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]"
Create a program to detect a loop in a linked list,"def detect_loop(head): 
    slow_p = head 
    fast_p = head 

    while(slow_p and fast_p and fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
        if slow_p == fast_p: 
            return 1
    return 0"
Design an algorithm to add two given binary numbers,"def add_binary(b1, b2):
    # initalize result
    result = """"
    carry = 0
    # iterate over the bits
    for i in range(max(len(b1), len(b2))):
        a = int(b1[-i-1]) if i < len(b1) else 0
        b = int(b2[-i-1]) if i < len(b2) else 0
        #calculate sum
        sum = carry ^ a ^ b
        result = str(sum) + result
        # calculate the carry
        carry = (carry&a) | (carry&b) | (a&b)
    #append the carry to the result
    if carry:
        result = '1' + result
    return result"
Classify the given sentence using the Bag-of-Words approach.Sentence: She felt so excited that her application got approval.,"She - Noun
Felt - Verb
So - Adverb
Excited - Adjective
That - Conjunction
Her - Determiner
Application - Noun
Got - Verb
Approval - Noun"
What is the difference between procedural and object-oriented programming?,"The main difference between procedural and object-oriented programming is that object-oriented programming focuses on the objects and how they interact with each other, while procedural programming focuses on executing a sequence of steps. In object-oriented programming, data and functions are encapsulated into objects that can interact with each other, while procedural programming relies on the execution of a sequence of instructions. In addition, object-oriented programming encourages code reusability, while procedural programming does not."
"Given a string, write a code that counts the number of alphabets in it.input_string = ""Hello World!""","input_string = ""Hello World!""

# Count the number of alphabets
num_alphabets = sum(c.isalpha() for c in input_string) 

print(""Number of alphabets in the string:"", num_alphabets)"
"Debug the following code for finding the median of three numbers.def find_median(a, b, c):
    if a > b: 
        if b > c:
            return b 
        elif a > c:
            return c
        else:
            return a
    elif b > c:
        return b
    elif a > c:
        return a
    else:
        return c","def find_median(a, b, c):
    # Calculate the maximum of the three numbers
    max_num = max(a, b, c)
    # Calculate the minimum of the three numbers
    min_num = min(a, b, c)
    # Calculate the median value as the sum of the three numbers minus the maximum and minimum
    median = a + b + c - max_num - min_num
    return median

median_value = find_median(2, 3, 5)
print(median_value) # 3"
"Create a class with two methods ""get_sum"" and ""get_product"" for calculating the sum and product of two numbers respectively.","class Calculator:
    """"""Class for calculating the sum and product of two numbers.""""""

    # Method for calculating sum of two numbers
    def get_sum(self, num1, num2):
        return num1 + num2
    
    # Method for calculating product of two numbers
    def get_product(self, num1, num2):
        return num1 * num2

# Create an instance of the class
calc = Calculator()

# Calculate the sum
sum_value = calc.get_sum(3, 4)
print(""Sum:"", sum_value) # 7

# Calculate the product
product_value = calc.get_product(3, 4)
print(""Product:"", product_value) # 12"
Use regular expression to remove special characters from any given string.my_string = 'Hi There! Welcome.@',"import re

# The given string
my_string = 'Hi There! Welcome.@'

# Remove special characters using regular expressions
clean_string = re.sub('[^a-zA-Z0-9\s]', '', my_string)
print(clean_string) # Hi There Welcome"
Create an array of 10 random integers between 1 to 50 and print them.,"# Create an array of 10 random integers
import random
array = []
for i in range(10):
    array.append(random.randint(1, 50))

print(array) # [33, 22, 34, 18, 28, 22, 17, 11, 26, 45]"
"Given a string, return the length of the longest run of characters.string = ""aaaabbccdd""",4
"Change the following code to a yield statement so that it can be used as a generator.def fibonacci():
  a, b = 0, 1
  while True:
    yield a
    a, b = b, a + b","def fibonacci(): 
  a, b = 0, 1
  while True: 
    a, b = b, a + b 
    yield a"
"Write a Python statement to print out the common items between two lists.list1 = [1, 2, 3, 4]
list2 = [2, 4, 6 , 8]","for i in list1:
  if i in list2:
    print(i)"
"Using the comments as a guide, implement a function that takes as input a list of integers and returns the maximum value.nums = [2, 8, 9, 10]","def find_max(nums): 
    # initialise the max to the first element of the list 
    max = nums[0]
    # loop over the list
    for i in range(1, len(nums)): 
       # if the current element is greater than the max, 
       # update the max 
        if nums[i] > max: 
            max = nums[i]
    # return the maximum value
    return max"
"Create a function that takes in an array of strings and a search term and returns an array of indices of strings that match the search term.array = [""I love dogs"",""I hate cats"",""Dogs are the best""] 
search_term = ""dogs""","def search_indices(array, search_term):
    # initialise an empty list 
    indices_list = [] 
    # loop over the array
    for index, s in enumerate(array): 
        # if the search term is in the string 
        if search_term in s.lower(): 
            # append the index to the list 
            indices_list.append(index)
    # return the list of indices 
    return indices_list"
"Create a function to insert a given character at every odd index in a given string.string = ""Hello""
character = 'z'","def insert_character(string, character): 
    # initialise a new string
    new_string = """"
    # loop over the string
    for i in range(len(string)):
        # if the index is odd 
        if i % 2 != 0:
            # add the character
            new_string += character
        # add the current character
        new_string += string[i]
    # return the new string
    return new_string"
"Implement a function that takes in a number n and deletes all the even numbers in an array of integers first n numbers.arr = [2, 3, 4, 5, 6, 7]
n = 6","def delete_even(arr, n): 
    # initialise a list 
    odd_list =[]
    # loop over the array
    for i in range(n): 
        # if the number is odd 
        if arr[i] % 2 != 0:
            # add it to the list 
            odd_list.append(arr[i])
    # return the list of odd numbers
    return odd_list"
"Create a MongoDB query that returns all documents that contain the string ""query"".","db.collection.find({ $text: { $search: ""query"" } })"
"Write an R program to print out the numbers from 0-50, in steps of 4.","x <- seq(from = 0, to = 50, by = 4)
print(x)"
Write an R program to generate 5 random numbers between 0 and 1.,"set.seed(1234)
runif(5, min = 0, max = 1)"
Create a valid regular expression that matches a valid U.S. phone number?,^\d{10}$|(^\d{3}\-\d{3}\-\d{4}$)|(^\(\d{3}\) \d{3}\-\d{4}$)
Write a function that calculates the Fibonacci numbers to the nth number,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Write a code to identify the longest palindrome in a given stringString: kayakracecar,"def get_longest_palindrome(s):
    longest_palindrome = ''
    s_length = len(s)
    for i in range(s_length):
        for j in range(i, s_length):
            substring = s[i:j + 1]
            if len(substring) > len(longest_palindrome) and substring == substring[::-1]:
                longest_palindrome = substring
    return longest_palindrome

# Verify it works
print(get_longest_palindrome('kayakracecar'))"
Write a code to extract the length of the longest sentence in a given textText: The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.,"def get_longest_sentence(text):
    sentences = text.split('. ')
    longest_sent_len = 0
    longest_sent = ''
    for sentence in sentences:
        if len(sentence) > longest_sent_len:
            longest_sent_len = len(sentence)
            longest_sent = sentence
    return longest_sent_len

# Verify it works
text = 'The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.'
print(get_longest_sentence(text))"
Create a function that returns the sum of the Fibonacci sequence to the nth number,"def FibonacciSum(n): 
    fib1 = 0
    fib2 = 1
    if n < 0: 
        return ""Incorrect input""
    elif n == 0:
        return 0
    elif n == 1: 
        return 0
    else: 
        sum = 0
        for i in range(2,n+1): 
            fib_n = fib1 + fib2
            fib1 = fib2
            fib2 = fib_n
            sum = sum + fib_n
        return sum"
"Use recursion to construct a list of the first 10 powers of two (1, 2, 4, 8, ...).","[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]"
"Using the given sentence, design a regular expression which will match the given word.Word: apple
Sentence: I bought an apple from the store.",regex: \bapple\b
"Find the 4th element in the given expression.list x=[1,3,5,7,9,8]",Element: 7
"Sort the given array of strings by their length.Array: ['hello', 'hi', 'howdy']","Sorted Array: ['hi', 'hello', 'howdy']"
"Invert the given dictionary.Dictionary: {'a': 1, 'b': 2, 'c':3}","Inverted dictionary: {1: 'a', 2: 'b', 3: 'c'}"
Extract the username and domain name from the given email address.Email address: johnsmith@example.com,"Username: johnsmith
Domain name: example.com"
Construct a class that takes a string and capitalizes the first letter.,"class CapitalizedWord:
    def __init__(self, word):
        self.word = word
    
    def get_capitalized_word(self):
        return self.word[0].upper() + self.word[1:]"
Design a class named Circle that can store information about a circle and perform calculations on it.,"class Circle:
    
    def __init__(self, radius):
        self.radius = radius
    
    def calculate_area(self):
        return 3.14 * self.radius * self.radius
    
    def calculate_circumference(self):
        return 2 * 3.14 * self.radius"
"Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list.words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']
given_string = 'hello'","def find_words(words, given_string):
    count = 0
    for word in words:
        if word == given_string:
            count += 1
    return count

if __name__ == '__main__':
    words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']
    given_string = 'hello'
    print(find_words(words, given_string))"
"Write a code that takes in two strings that are anagrams of each other and determines whether they are anagrams.str1 = 'martha'
str2 = 'hartma'","def is_anagram(str1, str2):
    if (sorted(str1)== sorted(str2)):
        return True
    else:
        return False

if __name__ == '__main__':
    str1 = 'martha'
    str2 = 'hartma'
    print(is_anagram(str1, str2))"
"Create a program which takes two strings and checks if they are anagrams of one another.Input string 1: eats
Input string 2: seat","def is_anagram(str1, str2):
    if (sorted(str1)== sorted(str2)):
        return True
    else:
        return False

if __name__ == '__main__':
    str1 = input(""Input string 1: "")
    str2 = input(""Input string 2: "")
    print(is_anagram(str1, str2))"
"Create a Python function that takes a string and prints out its reverse.string = ""Hello world!""","def reverseString(string):
  return string[::-1]

print(reverseString(string)) # Output: !dlrow olleH"
Create a python dictionary of two elements 'name' and 'age' with the corresponding values John and 25.,"my_dict = {'name': 'John', 'age': 25}"
"Implement a recursive function to calculate the factorial of a number, given by the user as an argument.","def calculate_factorial(num):
    if num == 0 or num == 1:
        return 1
    else:
        return num * calculate_factorial(num-1)"
"Edit the following code to use a dictionary instead of a list.list = [1, 3, 5]
total = 0
for num in list:
    total += num","dict = {1:1, 3:3, 5:5}
total = 0
for num in dict.values():
    total += num"
"Create a code to display all unique pairs from the following list.[1,2,3,4,5,6]","pairs = []
for i in range(len(list)):
    for j in range(i+1, len(list)):
        pairs.append((list[i], list[j])) 

print(pairs)"
Write code to create a list of length 10 with random integers.,"import random 

myList = [] 
for i in range(10): 
     myList.append(random.randint(0,10)) 

print(myList)"
Generate a sequence of strings according to the following pattern:,"my_list = []
for i in range(1, 10):
    my_list.append(str(i) + ""abc"")

print(my_list)"
"Format the following list in descending order of number of characters in each string.list = ['Hello', 'World', 'Technology']","def sort_list(list):
    for i in range(len(list)):
        for j in range(0, len(list)-i-1):
            if len(list[j]) < len(list[j+1]):
                list[j], list[j+1] = list[j+1], list[j]
    return list

sort_list([""Hello"", ""World"", ""Technology""])"
"Generate a dictionary with the following entries[('a',1),('b',2)]","my_dict = dict([('a', 1), ('b', 2)])

print(my_dict)"
Write a regular expression which can validate a given email address.,^[a-z0-9_.]+@[a-z0-9_.]+[.]+[a-z]+$
What is the maximum value an int type can hold?,The maximum value an int type can hold is 2147483647.
Take a sentence and tokenize it into separate words.The quick brown fox jumps over the lazy dog.,"['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog.']"
Calculate the result of 3 \* 5 + 7.,22
Write a function that outputs the exact same output as its input.,"def same_output(input): 
 return input"
"Use a dictionary to store the names of 5 people and their contact numbers.Alice - 0123456789, Bob - 0987654321, Cara - 0345567890, Dave - 0412356789, Ed - 0999888777","dict = {
 'Alice':'0123456789',
 'Bob' : '0987654321',
 'Cara' : '0345567890',
 'Dave' : '0412356789',
 'Ed' : '0999888777'
}"
"Write a function to multiply an array of 3 numbers by their sum.[4, 5, 6]","def multiply_array(arr): 
  sum_of_arr = sum(arr)
  for i in range(len(arr)): 
    arr[i] = arr[i] * sum_of_arr 
  return arr"
How many distinct prime numbers are there less than 100?,There are 25 distinct prime numbers less than 100.
How would you convert an integer to a float in Python?,"You can convert an integer to a float in Python using the float() function. For example, float(4) would return 4.0."
"Design a class to represent a car with member variables for the make, model, and year.","class Car: 
  def __init__(self, make, model, year): 
    self.make = make
    self.model = model
    self.year = year"
"Take two strings and concatenate them.""Hello "" and ""World""","""Hello World"""
Create a while loop that runs while a number is less than or equal to 10.,"number = 0 
while number <= 10: 
  print(number)
  number += 1"
Find and list all the prime numbers between 0-100,"2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97."
"Assuming all operations in the code are O(1), find the Big O complexity of the code.for (int i = 0; i < n; i++)
    for (int j = 0; j < i ; j++)
        sum += a[i] + b[j];",O(n^2).
"Create and run a Python script that prints ""Hello, World!""","# A simple python script
print(""Hello, World!"")"
"Find all instances of the given symbol in the text.text = ""The company has a $1 billion budget""
symbol = ""$""","The symbol ""$"" occurs 1 time in the given text."
"Using the provided data, generate a heatmap that contains the temperature readings for each hour.data = [[7,15,22], [2,7,23], [9,12,25]]","from matplotlib.pyplot import imshow
from matplotlib import pyplot as plt
from numpy import array

# Convert data to numpy array
data_array = array(data)

# Plot heatmap
fig, ax = plt.subplots()
im = ax.imshow(data_array)
fig.colorbar(im)
plt.show()"
Find the sum of all odd numbers between 1-100.,The sum of all odd numbers between 1-100 is 2500.
"Update the given array to replace all the zeroes with ones.my_array = [1, 0, 2, 0, 3, 0]","my_array = [1, 1, 2, 1, 3, 1]"
"Find the output of the following code when input is 3.def get_result(n):
    fib = [0, 1] 
    for i in range(2, n): 
        fib.append(fib[i-2] + fib[i-1]) 
    return fib","The output of the code when input is 3 is [0, 1, 1]."
Write a regular expression that accepts a string with one or more spaces.,^\S(.*\S)?$
"Using the given array, create a function to find the index of the second ""a"" in the array.let arr = [1, 'a', 2, 'b', 3, 'a'];","function findSecondA(arr){
   let count=0;
   let index;
   for(let i=0; i<arr.length; i++){
       if(arr[i] == 'a'){
           count++;
       }
       if(count == 2){
           index = i;
           break;
       }
   }
   return index;
}"
"Write a Python code snippet for printing the items in a given set.my_set = {1, 3, 5, 7, 9}","for item in my_set:
    print(item)"
Create a list of numbers from 1 to 10 using list comprehension.,"my_list = [number for number in range(1, 11)]"
How to open a new terminal window in Linux?,"In Linux, you can open a new terminal window using the command line by using the ""xterm"" command or using the shortcut ""Ctrl + Alt + T""."
"Write code to remove the first item from a list of integers in Python.numbers = [2, 3, 4, 5]",numbers.pop(0)
Write a method to parse a URL query string.url: https://www.example.com/?sort=alphabetical&order=asc&search=something,"def parse_query_string(url):
    # extracting the query string
    query_str = url.split(""?"")[1]
    query_param = query_str.split(""&"")

    # create dictionary from query string
    result_dict = {}
    for q in query_param:
        key, value = q.split('=')
        result_dict[key] = value

    return result_dict"
"How do you calculate the hamming distance between two strings?str1 = ""abc""
str2 = ""abd""","def hamming_distance(str1, str2):
    # length of the strings must be equal
    if len(str1) != len(str2):
        return -1
    
    distance = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            distance += 1
    
    return distance"
"Change all the values in a list to lowercase.mylist = ['Dog', 'Cat', 'Rabbit']","mylist = [x.lower() for x in mylist]
print(mylist)"
"How would you find the union of two sets?set1 = {1,2,3,4}
set2 = {3,4,5,6}","set3 = set1.union(set2)
print(set3)"
Develop a code to generate a random port number in the range of 1 to 65535.,"import random

def get_random_port():
    return random.randint(1, 65535)

random_port = get_random_port()
print(random_port)"
"Program a function to get the next element of a list.mylist = [1,3,5,7]","def get_next(mylist):
    for i in range(len(mylist)-1):
        return mylist[i+1]

print(get_next(mylist))"
"Write a function that takes in two strings(s1, s2) and returns a string. The output should be ""s1s2"".","def join_strings(s1, s2):
  return s1 + s2"
"Debug the following piece of code so that the program functions properly.def sub_array(array, num):
    for i in range(len(array) - 1, 0, -1):
        if array[i] == num:
            del array[i]","def sub_array(array, num):
    for i in range(len(array) - 1, 0, -1):
        if array[i] == num:
            del array[i]
        else:
            break"
"Create an algorithm to find out the longest common sub-sequence between two string inputs.""AGGTAB""
""GXTXAYB""","def LCSubStr(Str1, Str2): 
    n = len(Str1)
    m = len(Str2)
    LCSuff = [0] * (n + 1)
    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   
    result = 0    
    for i in range(n): 
        for j in range(m):  
            if (Str1[i] == Str2[j]): 
                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1
                if (LCSuff[i + 1][j + 1] > result): 
                    result = LCSuff[i + 1][j + 1]
    return result"
"Create a function to return the subset of an array which has the lengths of its elements smaller than the given threshold.[1, 5, 2, 8], threshold = 5","def filter_length(arr, th):
  subset = []
  for el in arr:
    if len(el) <= th:
      subset.append(el)
  return subset"
"Write an Objective-C code snippet to print the phrase ""Hello World!"" to the terminal/console.","NSLog(@""Hello World!"");"
"Create a function in Python to generate n permutations of a given array.arr = [1, 2, 3]
n = 6","import itertools 

# Function to generate 
# n permutations of the given array 
def permutation(arr, n): 
	
	# Get all permutations 
	permList = list(itertools.permutations(arr, n)) 
	
	# Converting each tuple in the 
	# list of tuples to list 
	res = [list(ele) for ele in permList] 

	# Returning the list of lists 
	return res"
"Create a python class ""Car"" with fields ""make"" and ""model"".","class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model"
"Create an array of three strings: ""red"", ""blue"", and ""green"".","const colors = [""red"", ""blue"", ""green""];"
"Generate a Python code that flattens a two-dimensional array.[[1, 2], [3, 4]]","def flatten_2d_array(arr):
    flat_arr = []
    for subarr in arr:
        flat_arr += subarr
    return flat_arr

# Driver code
input_list = [[1, 2], [3, 4]]
print(flatten_2d_array(input_list))"
"Create a function that concatenates two strings and prints them out.a = ""Hello ""
b = ""world!""","def concat_strings(a, b):
    print(a + b)
    
concat_strings(""Hello "", ""world!"")"
"Implement a function in Python that takes a list of strings as parameter and prints out the longest string.strings = [""Hello"", ""world"", ""Welcome"",""to"", ""my"", ""programming"", ""challenge""]","def print_longest_string(strings):
  longest_string = """"
  for string in strings:
    if len(string) > len(longest_string):
      longest_string = string
  print(longest_string)

print_longest_string(strings)"
"Using the input, write a function that prints out the Nth Fibonacci number.","def Fibonacci(n): 
    if n < 0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n == 0: 
        return 0
    # Second Fibonacci number is 1 
    elif n == 1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
"Given a Python function, edit the function such that it correctly prints the second highest value of the list.def getSecondMax(a):
    print(max(a))","def getSecondMax(a):
    s = sorted(a)[-2]
    print(s)"
Generate a valid regular expression to catch URLs in strings.,"r""(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})"""
"Create a Python script to output the sum of the elements in a given 2-D array.X = [[11, 18], [20, 1], [12, 16]]","def sum_elements(X):
    sums = 0
    for i in range(len(X)):
        for j in range(len(X[i])):
            sums+=X[i][j]
    return sums

print(sum_elements(X))"
"Modify the input so that the following Python program returns 'Yes'num = 10

if num > 5:
    print('No')","num = 10

if num > 5:
    print('Yes')"
"Given the input list of size N, write a code to print out the sum of the first N-1 elements.X = [10, 20, 30, 40, 50]","def sum_firstN_minusOne(X):
    total = 0
    for i in range(len(X)-1):
        total += X[i]
    return total

print(sum_firstN_minusOne(X))"
"Output a list of each element in the input increase twice.[1,10,20]","def double_each(lst):
    return [x*2 for x in lst]

print(double_each([1,10,20]))"
Write a code to print out the list of the numbers from 0 to 10 in descending order.,"for n in range(10, -1, -1): 
    print(n)"
"Edit the following Python class 'Foo' to accept a list of numbers upon instantiation.class Foo():
    def __init__(self):
        self.lst = []","class Foo():
    def __init__(self, lst):
        self.lst = lst"
Generate a code to perform a Merge Sort on an unsorted array of numbers.,"def mergeSort(arr): 
    if len(arr) >1: 
        mid = len(arr)//2 
        L = arr[:mid] 
        R = arr[mid:] 
  
        mergeSort(L) 
        mergeSort(R) 
  
        i = j = k = 0
          
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                arr[k] = L[i] 
                i+=1
            else: 
                arr[k] = R[j] 
                j+=1
            k+=1
          
        while i < len(L): 
            arr[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            arr[k] = R[j] 
            j+=1
            k+=1"
"Create a function to find the number of elements in the list which have a value larger than the given number 'k'.[10, 15, 20, 25], k = 15","def count_larger(lst, k):
    count = 0
    for i in lst:
        if i > k:
            count += 1
    return count
        
print(count_larger([10, 15, 20, 25], 15))"
Write a code to print out the union of two sets using Python.,"def find_union(A, B):
    return list(set(A).union(set(B)))

A = [1, 2, 3, 4] 
B = [4, 5, 6, 7] 
print(find_union(A, B))"
"Write a function that takes in a string and a character and returns the first index at which the character appears.str = 'Hello World'
char = 'o'","def firstIndex(str, char): 
    index = -1
    for i in range(len(str)):  
        if (str[i] == char):  
            index = i 
            break
    return index 

result = firstIndex(str, char) 
print(result) # prints 4"
"Write a function to create a retail price tag given a cost, taxes and discounts.cost = 5
tax = 0.08
discount = 0.2","def price_tag(cost, tax, discount):
  tax_amount = cost * tax 
  discounted_price = cost + tax_amount - (discount * cost)
  return ""Retail Price: $"" + str(round(discounted_price, 2))

price_tag(cost, tax, discount) # returns ""Retail Price: $7.20"""
"Write a TensorFlow program to compute the sum of two tensors.x = [[1,2],[3,4]] 
y = [[5,6],[7,8]]","import tensorflow as tf

x = tf.constant([[1,2],[3,4]], dtype=tf.int32) 
y = tf.constant([[5,6],[7,8]], dtype=tf.int32)

#Sum operation
z = tf.add(x, y)

#Run in session
with tf.Session() as session:
  print(session.run(z))

# Output: 
# [[ 6  8]
#  [10 12]]"
Name the four programming paradigms.,"The four main programming paradigms are procedural, object-oriented, functional, and logical."
Write the code for the following sorting algorithm.Bubble Sort,"def bubbleSort(arr): 
  
    # Traverse through all array elements 
    for i in range(len(arr)): 
  
        # Last i elements are already in place 
        for j in range(0, len(arr)-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above 
arr = [64, 34, 25, 12, 22, 11, 90] 
  
bubbleSort(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
Initialize a 2D array with all elements set to 0 in C.,int arr[N][M] = {0};
Calculate the area of a square with side length 4.,Area = 4 x 4 = 16
Generate a Fibonacci sequence up until 50.,"0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55"
"What is the output of the following code?

def check_even(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""

print(check_even(3))",Odd
"Classify the given code as ""correct"" or ""incorrect"".def extract_file_name(file_path):
    dot_index = file_path.find('.')
    slash_index = file_path.find('/')",correct
"Convert the following code from if/else to a ternary operator and output the result as a string.if age > 18:
    verdict = ""Adult""
    
else:
    verdict = ""Minor""","verdict = ""Adult"" if age > 18 else ""Minor"""
"Take the input list and transform it to a dictionary where the keys are the elements of the list and the values equal to True.my_list = [""apple"", ""banana"", ""strawberry""]","my_dict = { ""apple"": True, ""banana"": True, ""strawberry"": True }"
"Output the sum of all the elements in the two-dimensional array.arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",45
Create a function that takes two strings as inputs and outputs their concatenation.,"def concat_strings(string1, string2):
    return string1 + string2"
"Change the code so that it swaps the contents of two variables in one line.a = 5
b = 10","a, b = b, a"
"Detect if the given code is a loop or not and output true if it is a loop or false if it is not.x = 0
while (x < 10):
    x += 1",True
"prompt the user to enter a number, then output it in a sentence","number = int(input(""Enter a number: ""))
print(""You entered: "", number)"
"Use the following input to write a python code for calculating the area of a triangleBase = 6cm, Height = 4.5cm","# calculate the area of a triangle
# define the constant base and height
base = 6.0
height = 4.5
# calculate the area
area = 0.5 * base * height
# print the result
print('The area of the triangle is: %0.2f cm^2' %area)"
"Using the given input, modify the code to remove all occurences of ""abcd""string s = ""abcd abcd abcd abcd"";","string s = "" "";
s = s.replaceAll(""abcd"", """");"
What type of function is needed to solve the following problemCompute the average age of a given list of numbers,"A reduction function is needed in order to solve the given problem, which will iterate through the list of numbers and compute the average age. The function could take the form of a loop or other type of iterator."
What is the name of the following component of a computer systemA component that can perform data processing and calculations,The component in question is known as the Central Processing Unit (CPU).
"Implement Binary Search in Python[2, 3, 4, 5, 11, 19, 20]","# function to do binary search
def binarySearch(array, x): 
    l, r = 0, len(array)-1 
    while l <= r: 
  
        mid = l + (r - l)//2; 
          
        # Check if x is present at mid 
        if array[mid] == x: 
            return mid 
  
        # If x is greater, ignore left half 
        elif array[mid] < x: 
            l = mid + 1
  
        # If x is smaller, ignore right half 
        else: 
            r = mid - 1
      
    # If we reach here, then the element 
    # was not present 
    return -1
  
array = [2, 3, 4, 5, 11, 19, 20] 
x = 11

result = binarySearch(array, x) 
if result != -1: 
    print (""Element is present at index"", 
            result) 
else: 
    print (""Element is not present in array"")"
"Using the comment as a guide, edit the code that prints ""X out of 10"" to print ""X out of Y"".x = 5
print(""x out of 10"")
#TODO: replace 10 with the correct variable","x = 5
print(""x out of "" + str(x))"
Create a function in Python that adds two numbers.,"def add(x, y):
    """"""Return the sum of x and y.""""""
    return x + y"
Name a built-in function that rounds off a given number to the nearest whole number.,The built-in function to round off a given number to the nearest whole number is the round() function.
Write a regular expression that returns “Hello World” if found in the provided text.Text: This example will show you how to print Hello World using Regular Expressions.,/Hello World/
Use a while loop to print a message 5 times.Message: Hello!,"var i = 0;

while (i < 5) {
    console.log('Hello!');
    i++;
}"
Create a quick calculator in Python based on the user input.2 * 3 + 5,"def quick_calc(string):
    result = 0 
    calculation = string.split("" "")
    for item in calculation:
        try:
            result += int(item)
        except:
            if item.lower() == ""*"":
                result *= int(calculation[calculation.index(item) + 1])
    return result

print(quick_calc(""2 * 3 + 5""))
11"
"You are presented with a string which contains a code snippet. Extract the variable types from this string.let myVariable1 = 5; 
let myVariable2 = true; 
let myVariable3 = ""Hello"";","let myVariable1: number, myVariable2: boolean, myVariable3: string"
"Edit this code snippet to reverse a string in Python.def reverse_string(s):
    # Edit here
    return reversed_string","def reverse_string(s):
    reversed_string = """"
    for char in s:
        reversed_string = char + reversed_string
    return reversed_string"
"Create a Drupal 8 theme that implements a 3 column layout with a header, side bar, content and footer.","<html>
    <head>
        <title>{{ site.name }}</title>
        <style>
            body {
                display: flex; 
                flex-direction: column;
            }

            header, footer {
                flex-basis: 10%;
            }

            main {
                flex-basis: 80%;
                display: flex;
            }

            #sidebar {
                flex-basis: 20%;
            }

            #content {
                flex-basis: 80%;
            }
        </style>
    </head>
    <body>
        <header>
            {% include 'head.html.twig' %}
        </header>
        <main>
            <div id=""#sidebar"">
                {% include 'sidebar.html.twig' %}
            </div>
            <div id=""content"">
                {% block content %}
                {% endblock %}
            </div>
        </main>
        <footer>
            {% include 'footer.html.twig' %}
        </footer>
    </body>
</html>"
"Can you code a solution to Bubble Sort an array of integers?[5, 4, 3, 2, 1]","def bubbleSort(arr): 
    n = len(arr)
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above 
arr = [5, 4, 3, 2, 1] 
  
bubbleSort(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
"Write a function to check whether two lists are equal.list1=[1,2,3,4,5]
list2=[1,2,3,4,5]","def equal(list1, list2):
    if len(list1) != len(list2):
        return False
    
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    return True"
"Implement a function to return the element that appears most frequently in a list.[5,5,5,5,6,6,7,7,7]","def find_most_frequent_element(arr):
    d = {}
    for num in arr:
        if num in d: 
            d[num] += 1
        else:
            d[num] = 1
    
    max_freq = 0
    most_frequent_element = None
    for num in d:
        if d[num] > max_freq:
            max_freq = d[num]
            most_frequent_element = num

    return most_frequent_element"
"Identify the type of a variable in a Python program.x = [1, 2, 3]",type(x) # List
"Choose the correct output for following code snippet.x = ""hello world""
y = x
y[0] = ""H""","x = ""Hello world"""
"Create a program that takes two parameters and print out the result of the larger one.param1 = 20
param2 = 50","def largest_param(param1, param2):
    if param1 > param2:
        return param1
    else:
        return param2"
"Take two strings and a separator as inputs and join the two strings using the separator and output the resulting string.str1=""Hello""
str2=""World""
separator=""-""","def join_strings(str1, str2, separator):
    return str1 + separator + str2"
"Write a Python program to sort the given list of dictionary elements by the score valuelst = [{""score"":1},{""score"":5},{""score"":8}]","def sort_by_score(lst):
    lst.sort(key=lambda item: item['score'])
    return lst"
"Edit the code below to calculate minimum of 3 numbers.def min(a, b):
    if a < b:
        return a
    else:
        return b","def min(a, b, c):
    if a < b and a < c:
        return a
    elif b < a and b < c:
        return b
    else:
        return c"
"Convert the given list of dictionaries to a tuple of tuples.lst = [{""name"":""John"", ""age"":21}, {""name"":""Bill"", ""age"":30}]","def convert_to_tuple(lst):
    tup = [(x['name'], x['age']) for x in lst]
    return tuple(tup)"
"Code a solution to remove any element from given list if it appears more than 3 times.[1,2,3,1,1,1,2]","def remove_excess_lst(lst): 
    # Count the frequency of each element in the list 
    cnt = Counter(lst)

    # Return the list with elements appearing more than 3 times removed 
    return list(filter(lambda x: cnt[x] <= 3, lst))"
Create a loop that will print out numbers from 0 to 12.,"for (let i = 0; i <= 12; i++) {
  console.log(i);
}"
"Develop a program that finds the maximum number of overlapping events within a given time period.[[1, 7], [2, 5], [3, 6], [8, 10]]","function maxOverlapping(arr) {
  let max = 0;
  let curr = 0;
  const timeline = {};
  for (let i = 0; i < arr.length; i++) {
    const start = arr[i][0];
    const end = arr[i][1];
    timeline[start] = (timeline[start] || 0) + 1;
    timeline[end] = (timeline[end] || 0) - 1;
  }
  for (const key in timeline) {
    curr += timeline[key];
    max = Math.max(max, curr);
  }
  return max;
}

console.log(maxOverlapping([[1, 7], [2, 5], [3, 6], [8, 10]])); // output: 3"
"Create a program that takes a string and returns an object with the count of all the characters in the string.""Hello World""","function charCount(str) {
  let result = {};
  for (let i = 0; i < str.length; i++) {
    let char = str[i].toLowerCase();
    result[char] = (result[char] || 0) + 1;
  }
  return result;
}

console.log(charCount('Hello World')); // output: {h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}"
"Create a variables in Python to store the following information.Name: John, Age: 35","name = ""John""
age = 35"
Write a Python program to print a random integer between 0 and 5.,"import random 
  
# Print random integer  
print(random.randint(0, 5))"
"Write a function that takes two strings and determines whether one string is an anagram of the other.string1 = 'listen';
string2 = 'silent'","function isAnagram(string1, string2) {
  const s1 = string1.split('').sort().join('');
  const s2 = string2.split('').sort().join('');
  return s1 === s2;
}"
Generate a random 5-element list of integers between 0 and 10.,"import random

random_list = [random.randint(0, 10) for _ in range(5)]"
Write a class definition for a Box class.,"class Box:
    def __init__(self, width, length, height):
        self.width = width
        self.length = length
        self.height = height

    def calculate_volume(self):
        return self.width * self.length * self.height"
Run the program located in 'helloworld.py',python helloworld.py
"Convert this CSV data into a Pandas DataFrame.name,age
John,20
James,31","import pandas as pd

data = pd.read_csv('data.csv')

df = pd.DataFrame(data)"
Find the lowest integer that can not be represented as the sum of two prime numbers.,The lowest integer that can not be represented as the sum of two prime numbers is 45.
What data structure would be best to store key-value pairs?,A hash table (or a dictionary in Python) is the best data structure to store key-value pairs.
"Write a function to move all zeros in an array to the end.[1, 2, 0, 3, 4, 0, 5]","def moveZeroes(nums):
    zeros = 0
    for i in range(len(nums)):
        if nums[i] == 0:
            zeros += 1
        else:
            nums[i-zeros] = nums[i]
    nums[len(nums)-zeros:] = [0] * zeros"
"Create a new list filled with the same values as the existing list but with the values multiplied by 5.[1, 2, 3, 4, 5]","new_list = [i * 5 for i in [1, 2, 3, 4, 5]]"
"Write a method to compare two unsorted arrays of integers and find the number of mismatches.[1, 3, 2, 5], [2, 4, 1, 5]","def get_mismatches(arr1, arr2):
    mismatches = 0
    if len(arr1) != len(arr2):
        return -1
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            mismatches += 1
    return mismatches"
"Write a VBA macro to convert a sequence of text to uppercase.The text is: ""Hello World"".","Sub upperCase()
    
    Dim myText As String
    myText = ""Hello World""
    
    ActiveCell.Value = UCase(myText)
    
End Sub"
"Given an input list of integers, sort the list in ascending order","def sortAsc(lst): 
    for i in range(len(lst)): 
        for j in range(i+1, len(lst)): 
            if lst[i] > lst[j]: 
                lst[i], lst[j] = lst[j], lst[i] 
    return lst"
Create a formula that calculates the total cost of an item given the item price and tax rate,Total Cost = Item Price + (Item Price * (Tax Rate/100))
"Input two numbers and output the maximum one in Python3, 5","a = 3
b = 5

if a > b:
    print(a)
else:
    print(b)"
"Sort the list using Quick Sort[2, 3, 5, 6, 1, 4]","def quick_sort(arr): 
	if len(arr) <= 1:
		return arr
	pivot = arr[len(arr) // 2]
	left = [x for x in arr if x < pivot]
	right = [x for x in arr if x > pivot]
	return quick_sort(left) + [pivot] + quick_sort(right)"
Construct an if-else statement to determine if a given number is divisible by 4,"if (number % 4 == 0) 
    System.out.println(""The number is divisible by 4""); 
else 
    System.out.println(""The number is not divisible by 4"");"
Write a Python function to check if a given string is a palindrome and has all the vowels in it.,"def all_vowels_palindrome(word):
    vowels = ['a', 'e', 'i', 'o', 'u']
    if not word == word[::-1]:
        return False
    for char in vowels:
        if char not in word:
            return False
    return True"
"Writing a Python function which takes a 2D array as an argument and transposes it.arr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]]","def transpose_(arr):
  transposedarr = []
  for i in range(len(arr[0])):
    row = []
    for j in range(len(arr)):
      row.append(arr[j][i])
    transposedarr.append(row)
  return transposedarr"
What is polymorphism and how it is used in object-oriented programming?,"Polymorphism is the ability of an object to be interpreted and used differently in different contexts. In object-oriented programming, it allows operations to be performed on objects despite different underlying data types. For example, it allows functions to take multiple types of arguments and still be able to process them, without requiring different lines of code for each data type. Polymorphism also allows for code reuse through the concept of inheritance, where subclasses can inherit all the methods and properties of their parent class. As a result, objects can be written more efficiently and with less repetition."
"Compute the average age of the following ages: 18, 20, 17, 19, 15.",Average age = 17.8
"Construct a for loop in Python to iterate through the items in the list and print their corresponding index.lst = [1,2,3]","for i, num in enumerate(lst):
    print(i, num)"
Write a code snippet to get the name of the planet which is the fifth planet from the sun.,"name_planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
fifth_planet = name_planets[4]
print(fifth_planet)"
"Write code to delete all elements in a given Python list which are NOT integer type.lst = [1, ""a"", 2.3, False, 4, ""abc""]","for item in lst[:]:
    if not isinstance(item, int):
        lst.remove(item)"
"Write code to create a dictionary from a list of tuples, where each tuple consists of a color name and its value.items = [(""red"", ""#FF0000""), (""blue"", ""#0000FF"")]",colors = dict(items)
Create a python anonymous function that squares an input number.,square_num = lambda x: x ** 2
"Suggest a type of join to use to find all customers with an order total greater than $100.Table: Customers
Columns: customer_id, name 
Table: Orders
Columns: order_id, customer_id, total","SELECT c.customer_id, c.name 
FROM Customers c INNER JOIN Orders o 
ON c.customer_id = o.customer_id
WHERE o.total > 100;"
Write a python loop to print all the even numbers between 2 and 15 (inclusive).,"for i in range(2, 16):
    if i % 2 == 0:
        print(i)"
Write a python statement to calculate the factorial of 6.,"import math

factorial = math.factorial(6)"
"Print all the elements in the following array in descending order.[4, 2, 6, 8, 5, 9, 1]",9 8 6 5 4 2 1
"Design a data structure to store the details of a student (Name, Age, Course).","struct Student {
  name: String,
  age: u32,
  course: String,
}"
Create a method to transform a string from lowercase to title case.,"def to_title_case(string):
    return string.title()"
"Modify the following block of code to set a maximum length of the listlist = [1, 2, 3, 4, 5, 6]","list = [1, 2, 3, 4, 5, 6][:5]"
Write an algorithm to swap two elements a[i] and a[j] in a given array a.,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp"
"Update the strings stored in a dictionary, so that all strings have the same length.d = {
  'apple': 'small',
  'orange': 'medium size'
}","d = {
  'apple': 'small  ',
  'orange': 'medium size'
  }"
"Create an object to store the variables that are necessary for the following code snippet.x = 10
y = 20
z = 30","class Coordinates:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

coordinates = Coordinates(x=10, y=20, z=30)"
"Make a program to determine if the elements of the array are in increasing order[3, 5, 7]","def isIncreasing(arr):
    for i in range(len(arr)-1):
        if arr[i] >= arr[i+1]:
            return False
    return True"
Suggest a code snippet to detect a cycle in a linked list,"def contains_cycle(head):
    slow = head
    fast = head
    while fast is not None and fast.next is not None:
        fast = fast.next.next
        slow = slow.next
        if slow is fast:
            return True
    return False"
"Given a list of integers, write a function in Python to sort and reverse the list.input_list = [3, 8, 10, 1, 9]","def sort_and_reverse(list): 
  res_list = sorted(list, reverse=True) 
  return res_list 
  
sort_and_reverse(input_list) 

# Output 
[10, 9, 8, 3, 1]"
Generate a unique ID string of length 12 using a Python function.,"import string, random
def generate_unique_id(stringLength=12):
  lettersAndDigits = string.ascii_letters + string.digits
  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))

unique_string = generate_unique_id()
print(""unique string: "",unique_string)"
Convert a given number to its corresponding Roman numeral.,"def convertToRoman(num): 
  val = [ 
            1000, 900, 500, 400, 
            100, 90, 50, 40, 
            10, 9, 5, 4, 
            1 
        ] 
  syb = [ 
            ""M"", ""CM"", ""D"", ""CD"", 
            ""C"", ""XC"", ""L"", ""XL"", 
            ""X"", ""IX"", ""V"", ""IV"", 
            ""I""
        ]

        roman_num = '' 
        i = 0
        while  num > 0: 
            for _ in range(num // val[i]): 
                roman_num += syb[i] 
                num -= val[i] 
            i += 1
        return roman_num

# Driver Code
num = 13 
print(convertToRoman(num)) 

# Output: XIII"
Generate a list of all even numbers between 20 and 40.,"even_numbers = []
for num in range(20, 41): 
  if num % 2 == 0: 
    even_numbers.append(num) 
  
print(even_numbers) 

# Output: [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]"
"Find the reverse of an array in Python.arr = [1, 2, 3, 4, 5]","arr = [5, 4, 3, 2, 1]"
"Write Python code to extract the title from a URL.url = ""https://www.google.com/search?q=gpt-3&oq=GPT+3""","def get_title(url): 
    url_parsed = urlparse(url)
    query_parsed = parse_qs(url_parsed.query)
    title = query_parsed['q'][0]
    return title

print(get_title(url))

# Output: GPT 3"
"In Python, how can you iterate a list in reverse order?","We can use the reversed() function to iterate a list in reverse order in Python. For example:

my_list = [1, 2, 3, 4]

for element in reversed(my_list):
    print(element)"
How can you create a dictionary in Python with 3 key-value pairs?,"We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:

my_dict = {
    ""key1"": ""value1"",
    ""key2"": ""value2"",
    ""key3"": ""value3""
}"
"Given a list, write a Python code snippet to print the elements of the list in reverse order.my_list = [""one"", ""two"", ""three"", ""four"", ""five""]","for element in reversed(my_list):
    print(element)"
"Run the given code and determine the result.a = 3
b = 5
c = a + b",c = 8
"Using Python, reverse a given string ""Hello World!"".","""!dlroW olleH"""
"Train a machine learning model without using any frameworks with the folowing input and output data.Input Data: A, B, C, D
Output Data: 0, 1, 0, 1","model = Model()
model.fit(x=[A, B, C, D], y=[0, 1, 0, 1])"
"Create a function in Python that can compute the area of a rectangular room in square feet.length = 20
width = 15","def findArea(length, width):
  area = length * width
  return area

# Call the function
area = findArea(20, 15)
print(""The area of the room is: "" + str(area) + ""sq.ft"")"
Design a data structure in Python to store customer contact details.,"#Create a class to store customer information
class ContactData:
    def __init__(self, name, email, phone):
        self.name = name
        self.email = email
        self.phone = phone

#Create a dictionary to store the customer contact details
customer_details = {}

# function to add customer details in the dictionary
def add_customer_details(name, email, phone):
    customer_details[name] = ContactData(name, email, phone)

#Function to display customer details
def display_customer_details():
    for key in customer_details.keys():
        customer = customer_details[key]
        print(""Name: {}, Email: {}, Phone: {}"".format( 
            customer.name, customer.email, customer.phone))"
"Suggest the missing line of code in the following Python program.nums = [1, 2, 3]
for n in nums:
    print(n)","nums = [1, 2, 3]
for n in nums:
    print(n)

#Print the sum of the list
print(sum(nums))"
"Merge the following two linked lists.Linked List 1: 1->3->5
Linked List 2: 2->4","def merge(head1, head2):
    # If either is empty
    if not head1 or not head2:
        return head1 or head2
    # if first linked list is smaller 
    if head1.data < head2.data:
        head1.next = merge(head1.next, head2)
        return head1
    else: # if second linked list is smaller or equal
        head2.next = merge(head1, head2.next)
        return head2"
Classify the type of the expression 5 + 4 * 3 - 7,The expression 5 + 4 * 3 - 7 is a mathematical expression of arithmetic operations.
"Write a code that takes a list as input and returns a list of every permutation of that list[1, 2, 3]","def get_permutations(input_list): 
    result = [] 
    if len(input_list) == 0: 
        return [] 
    if len(input_list) == 1: 
        return [input_list] 
    for i in range(len(input_list)): 
        x = input_list[i] 
        xs = input_list[:i] + input_list[i+1:] 
        for p in get_permutations(xs): 
            result.append([x] + p) 
    return result"
"Write a code that takes a string and a character as an argument and counts the number of occurrences of that character in the stringAvengers: ""He brought the team together""
Character: t","def count_character(input_string, character):
    count = 0
    for char in input_string:
        if char == character:
            count +=1
    return count"
"Create a code that edits a list by adding two to each element[1, 2, 3]","def add_two(input_list):
    new_list = []
    for num in input_list:
        new_list.append(num + 2)
    return new_list"
Write a code that takes a numeric value and returns the factorial of that number3,"def factorial(n):
    result = 1
    for i in range(1,n+1):
        result *= i
    return result"
"Write a code that takes a list as an input and returns the elements in reverse order['apple', 'banana', 'cherry']","def reverse_list(input_list):
    reversed_list = []
    for i in range(len(input_list)-1,-1,-1):
        reversed_list.append(input_list[i])
    return reversed_list"
"Create a program to determine the type of triangle given 3 side lengths[5, 4, 3]","def determine_triangle_type(triangle_sides):
    if triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:
        return 'equilateral'
    elif triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:
        return 'isosceles'
    else:
        return 'scalene'"
Construct a regex statement to select all words starting with a capital letter.,\b[A-Z]\w+
"Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.fromCurrency = ""USD""
toCurrency = ""GBP""","""""""
Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.

Input: fromCurrency = ""USD""
        toCurrency = ""GBP""
""""""

import requests
import json

def get_exchange_rate(fromCurrency, toCurrency):
    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'
    response = requests.get(baseUrl)
    data = json.loads(response.text)
    rates = data['rates']
    fromRate = rates[fromCurrency]
    toRate = rates[toCurrency]
    return (toRate/fromRate)
            
if __name__ == '__main__':
    print(get_exchange_rate(""USD"", ""GBP""))"
"Create a method which receives a list of names and outputs the name which occurs the most in that list.list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']","""""""
Create a method which receives a list of names and outputs the name which occurs the most in that list.

Input: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']
""""""

def getMostFrequent(list):
    frequency = dict()
    holder = None
    max_count = 0

    for name in list:
        if name in frequency: 
            frequency[name] += 1
        else: 
            frequency[name] = 1

        if frequency[name] > max_count: 
            max_count = frequency[name] 
            holder = name

    return holder 

list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']
print(getMostFrequent(list))"
"Create a code in Python to get the current stock price of a company from yahoo finance.ticker = ""AAPL""","""""""
Create a code in Python to get the current stock price of a company from yahoo finance.

Input: ticker = ""AAPL""
""""""

import requests

def get_stock_price(ticker):
    url = 'https://finance.yahoo.com/quote/' + ticker
    response = requests.get(url)
    data = response.text.split('""regularMarketPrice"":{""raw"":')[1].split(',""fmt""')[0]
    return float(data)

print(get_stock_price('AAPL'))"
"Create a method to join an array of strings together.arr = ['one', 'two', 'three']","""""""
Create a method to join an array of strings together.

Input: arr = ['one', 'two', 'three']
""""""

function joinStrings(arr) {
  let joinedStr = '';
  
  for (let i = 0; i < arr.length; i++) {
    joinedStr += arr[i]
    if (i < arr.length - 1) {
      joinedStr += ' ';
    }
  }
  
  return joinedStr;
}

console.log(joinStrings(['one', 'two', 'three']));"
"Edit the code so it displays the numbers 1 to 5.for i in range(2, 10):
    print(i)","for i in range(1, 6):
    print(i)"
Calculate the factorial of n using a recursive function.,"def factorial(n): 
    if n == 0: 
        return 1
    else: 
        return n * factorial(n-1)"
"Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k.arr = [1, 2, 3, 4, 5]
k = 7","def has_pair_with_sum(arr, k): 
    temp_set = set() 
  
    for i in range(len(arr)): 
        temp = k - arr[i] 
        if temp in temp_set: 
            return True
        temp_set.add(arr[i]) 
  
    return False"
"Summarize the following text using an algorithm.The average daily temperature in Chicago during the month of January is usually below zero degrees Celsius. As such, the streets become icy and treacherous for the residents.",Chicago residents face treacherous icy streets during the month of January due to average daily temperatures below zero degrees Celsius.
Write the definition of function to calculate the perimeter of a triangle.,"def perimeter(a, b, c):
    return a + b + c"
How could Big data analysis be used to provide better services and products ?,"Big data analysis can provide companies with data-driven insights that can be used to improve services and products. By accurately analyzing customer trends, companies can build targeted marketing campaigns and make decisions on which services and products to focus on, helping them reach their desired market more efficiently. Additionally, it can help organizations create better customer experiences by identifying areas of improvement in customer support and services."
Describe your approach to sorting a variety of data with a single sorting algorithm.,"My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well."
"Edit a program to show the area of the rectangle#include <stdio.h>
 
int main()
{
    int length, width;
    printf(""Enter the length : "");
    scanf(""%d"", &length);
 
    printf(""Enter the width : "");
    scanf(""%d"", &width);
   
    printf(""The Perimeter of rectangle is : %d \n"", 2*(length + width));
 
    return 0;
}","#include <stdio.h>
 
int main()
{
    int length, width;
    printf(""Enter the length : "");
    scanf(""%d"", &length);
 
    printf(""Enter the width : "");
    scanf(""%d"", &width);
   
    printf(""The Perimeter of rectangle is : %d \n"", 2*(length + width));
    printf(""The Area of rectangle is : %d \n"", length * width);
 
    return 0;
}"
Create a custom exception class for a restaurant that has no menu items.,"class NoMenuItemsError(Exception): 
    def __init__(self, message): 
        super().__init__(message)
        self.message = message 

def raise_error():
    raise NoMenuItemsError(""No menu items are available"")"
"Create a dictionary in which keys are characters and values are the occurences of that character in a given string.string = ""apple""","def get_char_count(string):
    char_count = {}
    for char in string:
        if char not in char_count:
            char_count[char] = 1
        else:
            char_count[char] += 1
    return char_count"
Write a function to calculate all the possible paths for a N x N matrix.,"def calculate_paths(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
  
    dp = [[0 for _ in range(cols)] for _ in range(rows)] 
  
    dp[0][0] = 1
  
    for i in range(rows):
        for j in range(cols): 
            if i-1 >= 0: 
                dp[i][j] = dp[i][j] + dp[i-1][j]
            if j-1 >= 0:
                dp[i][j] = dp[i][j] + dp [i][j-1]
  
    return dp[rows-1][cols-1]"
Write a Python code to initialize a 10 x 10 matrix with random values.,"import random

def init_matrix():
    matrix = [[0 for _ in range(10)] for _ in range(10)]
    for i in range(len(matrix)):
        for j in range(len(matrix[0])):
            matrix[i][j] = random.randint(0,100)
    return matrix"
Describe the recursive approach for solving a problem.,"Recursive approach is an approach wherein a problem is broken down into multiple subproblems until the base case is reached. Once the base case is reached, the results of each sub-problem are combined to obtain a solution to the original problem. It is used when the problem exhibits the self-similarity property."
"Using python, create two variables that are equal to each other.","x = 5
y = 5"
"Write a regex expression that matches sentences with the word ""cat"" followed by any number of characters except the letter ""z"".",/cat[^z]*/
Write a code snippet to loop over the characters in a string and add them to an array in Python.,"def loop_over_string(s):
    arr = []
    for c in s:
        arr.append(c)
    return arr"
"Change the function to eliminate passing by referencedef f(arr):
    arr.remove(arr[0])","def f(arr):
    arr_copy = arr[::]
    arr_copy.remove(arr_copy[0])
    return arr_copy"
"Given an array of positive numbers, write a function to return the maximum number of adjacent numbers with the same sign.arr = [5, 2, 3, -2, 4, -5, 2, 3]","def maxAdjSameSign(arr): 
    """"""
    This function returns the maximum number of adjacent numbers with the same sign.
    """"""
    max_count = 0
    count = 1
  
    for i in range(0, len(arr)-1):
        # If current element and the next element
        # have the same sign 
        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):
            count += 1
        else: 
            max_count = max(max_count, count) 
  
        # Reset count to 1
        count = 1
  
    return max(max_count, count)"
"Print the longest palindrome from the given strings = ""abbaba""","def longestPalindrome(s):
    """"""
    This function prints the longest palindrome from the given string.
    """"""
    longest_str = """"
    n = len(s) 
  
    for i in range(n): 
        # check for odd conditions
        middle = s[i] 
        left = i-1
        right = i+1
        while (left >= 0 and right < n and s[left] == s[right]): 
            middle = s[left] + middle + s[right] 
            left -= 1
            right += 1
  
        longest_str = middle if len(middle) > len(longest_str) else longest_str
        # check for even conditions
        middle = ''
        left = i 
        right = i+1
        while (left >= 0 and right < n and s[left] == s[right]): 
            middle = s[left] + middle + s[right] 
            left -= 1
            right += 1
  
        longest_str = middle if len(middle) > len(longest_str) else longest_str
  
    return longest_str"
"Count the number of quadruples that sum up to zeroarr = [-2, -1, 0, 1, 2]","def countQuadruplesSumZero(arr):
    """"""
    This function returns the number of quadruples that sum up to zero.
    """"""
    quad = 0
           
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                for l in range(k+1, len(arr)):
                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:
                        quad += 1
                            
    return quad"
Write a Spark program to count the number of words for a given text.Text: This is a test text.,"val data = Array(""This is a test text."") 
val wordsRDD = sc.parallelize(data).flatMap(x => x.split("" "")) 
val wordCounts = wordsRDD.countByValue() 
for ((word, count) <- wordCounts) println(word + "" : "" + count)"
Create a matrix of size 3 x 3 in Python.,"# 3x3 matrix 
matrix3x3 = [[10, 20, 30],  
             [15, 25, 35],  
             [27, 29, 37]]"
Fill in the blanks to correctly identify the type of the following variableThe variable x is an __________.,The variable x is an integer.
Compute the modulo of following two numbers56 % 7,0
Construct a python list comprehensionList of numbers from 2 to 8,"list_nums = [x for x in range(2, 9)]"
"Write a function to remove the value x from a list lx = 2
l = [1, 2, 3, 4, 5]","def remove_x(x, l):
    l.remove(x)
    return l"
"Name the type of data structure used in the following algorithm.In this algorithm, we iterate through an array of elements, and perform an action on each of these elements:

for element in array:
    performAction(element)",This algorithm uses an array as its data structure.
Generate a programming workflow for analyzing a large text dataset.Dataset size: 1 million words,"1. Pre-process the input text dataset to remove punctuation and special characters. 
2. Split the dataset into equal chunks for easier parallel processing 
3. Use a language model such as BERT or GPT-2 to tokenize the chunks 
4. Use embeddings to represent words in the dataset 
5. Perform descriptive analytics such as identifying highest frequency words, collocations, etc. 
6. Perform prediction tasks such as sentiment analysis, parts-of-speech analysis, topic modeling, etc. 
7. Pattern recognition tasks such as document classification and clustering. 
8. Generate visualizations such as word clouds, topic maps, etc."
"Suggest an algorithm to search for a matching string in a large textText: “This is a long piece of text with a searching string”
Searching string: “searching string”","The most efficient algorithm for this task would be the KMP (Knuth-Morris-Pratt) algorithm. This is an efficient string matching algorithm that is used to match a pattern string in a given text string. The KMP algorithm is more efficient than traditional string matching algorithms as it pre-processes the pattern string to generate a lps (longest proper prefix which is also a suffix) array, which is then used to compare characters in the text string with characters in the pattern string."
Write a short python script to determine whether a given number is divisible by 5.,"def is_divisible_by_5(number):
    """"""Check whether a given number is divisible by 5 or not.""""""
    if number % 5 == 0:
        return True
    return False"
"Create a for loop which prints the first 5 numbers in a given list.list_numbers = [1, 2, 3, 4, 5, 6, 7]","for i in range(0, 5):
    print(list_numbers[i])"
Which sorting algorithm is the best for linked lists?,"The best sorting algorithm for linked lists is Merge Sort. Merge Sort is more efficient than other sorting algorithms such as Quicksort or Insertion Sort because it does not require extra space. Furthermore, it is an in-place sorting algorithm, which means that resources are used to sort the linked list without the need to use extra space."
"Format the following code according to PEP 8 style guidelines.def function1(  a,  b,  c):
	d = a+b*c
	return d","def function1(a, b, c):
    d = a + b * c
    return d"
What data type is returned by the Python function pow()?,The Python function pow() returns a float data type.
"Create a try/except block which checks that the input is a valid integerinput_text = input(""Enter a number: "")","try:
    input_text = int(input(""Enter a number: ""))
except ValueError:
    print(""Invalid input"")"
What is the GIL in Python and what is its purpose?,The Global Interpreter Lock (GIL) is a mechanism used by Python to manage and control access to shared data and resources. It prevents multiple threads from accessing the same data or using shared resources at the same time. The purpose of the GIL is to prevent the Python interpreter from crashing due to race conditions.
Write a code to print out an array of the first ten positive even numbers.,"def printEvenNumbers():
    my_list = []
    for item in range(2,21,2):
        my_list.append(item) 
    print(my_list)

printEvenNumbers() # prints [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
Compute the square root of a number without using the square root function.number = 4,"def sqrt(number):
    x = number
    y = 1
    epsilon = 0.000001
    while x-y > epsilon:
        x = (x + y)/2
        y = number/x
    return x

sqrt(number) # returns 2.0"
"Create a function to check if a given triangle is an equilateral triangle.a = 5, b = 5, c = 5","def isEquilateral(a, b, c):
    if (a == b == c): 
        return True
    else: 
        return False
  
isEquilateral(a, b, c) # returns True"
"Is the following code valid Python?if bool == true:
    print(""True"")",False
What data type should the following expression evaluate to?3 + 4 * 5,"The expression 3 + 4 * 5 will evaluate to 23, which is a number data type."
"Write a code to process a given array and add 10 to each value stored in the array.arr = [1, 2, 3, 4, 5]","#Process a given array and add 10 to each value
arr = [1, 2, 3, 4, 5]

#Loop through the array
for i in range(len(arr)):
    #Add 10 to the current element
    arr[i] = arr[i] + 10

#Print the modified array
print(arr)

""""""
Output:
[11, 12, 13, 14, 15]
"""""""
"Format a given date in the following format: ""Month Day, Year""date = '2020-10-25'","#Format a given date
date = '2020-10-25'

#Split the date
month, day, year = date.split('-')

#Format the date
formatted_date = month + ' ' + day + ', ' + year

#Print the formatted date
print(formatted_date)

""""""
Output:
October 25, 2020
"""""""
How can you check if a given key exists in a dictionary?,"You can check if a given key exists in a dictionary using the `in` keyword. For example:

my_dict = {
    'name': 'John',
    'age': 20
}
if 'name' in my_dict:
    print('Key found')"
"Construct a list of integers from m to n.m = 3
n = 8","lst = []
for i in range(m, n+1):
    lst.append(i)"
Find the greatest common divisor (GCD) of 24 and 32.,The greatest common divisor (GCD) of 24 and 32 is 8.
"Compare two objects and return 0 if they are equal, -1 if the first is less than the second, and 1 if the first is greater than the second.object1 = 7
object2 = 8","def compare(object1, object2):
    if object1 == object2:
        return 0
    elif object1 < object2:
        return -1
    else:
        return 1"
Write a regular expression to match only words containing a single 'a' character.,"pattern = r""\b[^a]*a[^a]*\b"""
"Capitalize the letters A - Z in the given string.text = ""We are learning natural language processing""","text = ""We Are Learning Natural Language Processing"""
Identify the type of a given functionf(x)=2^x,Exponential function.
Write a Regex expression to extract all numbers larger than 0 in a string,\b[1-9][0-9]*
Construct a for loop to print the integer from 0 to 50.,"for i in range(51):
    print(i)"
Which boolean value will be returned if the expression 5 is not equal to 10 is evaluated?,True
"How many parameters does the following function require?def multiply(a, b):
    return a * b","Two, 2."
"Replace all the x in the given list with y.list = [1, 2, 'x', 'x', 1]","list = [1, 2, 'y', 'y', 1]"
"Generate a list of dictionary keys from the given dictionary.my_dict = {'Name':'John','Age':24,'City':'New York'}","list_keys = list(my_dict.keys()) 
print(list_keys)

Output:
['Name', 'Age', 'City']"
Make a list of numbers from 0 to 20 that are divisible by 3.,numbers = [x for x in range(21) if x % 3 == 0]
Generate a random hex color in Python.,"import random 
  
def random_hex_colour_code(): 
    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) 
  
print (""Random Hex Color Code:"", random_hex_colour_code())"
Write a function in Python that takes a list of integers as an argument and calculates the mean average.,"def calculate_mean(numbers):
    total_sum = 0; 
    for num in numbers:
        total_sum += num
    
    mean_average = total_sum / len(numbers)
    return mean_average"
Write a function in Python to split a given string into the words in the string.,"def split_string(string):
    return string.split()"
"Reverse this array in-place using Python.arr = [4, 2, 8, 6]","arr.reverse() # arr is now [6, 8, 2, 4]"
"Using the following code snippet, generate a list containing numbers from 1 to n.n = 5","nums = list(range(1, n+1)) # nums is now [1, 2, 3, 4, 5]"
"Convert this list of strings to a single string without using the ""join"" method.str_list = [""I"", ""am"", ""a"", ""list"", ""of"", ""strings""]","result = ''
for string in str_list:
    result += string
# result is now ""Iamalistofstrings"""
"Determine the code complexity for the following codse sample.def get_sum(list):
   sum = 0
   for num in list:
       sum += num
   return sum","The code complexity of the given function is O(n), where n is the length of the list."
use regular expression to determine the number of words in a string.This is a string of text,"import re

def get_num_words(inp_str):
    words = re.findall(r'\w+', inp_str)
    return len(words)

if __name__ == '__main__':
    inp_str = 'This is a string of text'
    print(get_num_words(inp_str)) # Output: 4 words"
"Convert the following data into Excel Format.[
    {'name': 'John', 'age': 20},
    {'name': 'Paul', 'age': 22},
    {'name': 'Ringo', 'age': 19}
]","""""""
Convert data into Excel format
""""""

import csv

def to_excel(data):
    with open('data.csv', 'w', newline='') as csvfile:
        fieldnames = ['name', 'age']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        for row in data:
            writer.writerow(row)

if __name__ == '__main__':
    data = [
        {'name': 'John', 'age': 20},
        {'name': 'Paul', 'age': 22},
        {'name': 'Ringo', 'age': 19}
    ]

    to_excel(data)"
Design a data structure to model the evolution of a population.,"""""""
Model the evolution of a population
""""""

class Population:
    def __init__(self):
        self.population = []
        self.generation = 0

    def add_member(self, member):
        self.population.append(member)

    def next_generation(self):
        self.generation += 1
        self.population = self.population.create_next_generation()

class Member:
    def __init__(self, data):
        self.data = data


    def create_next_generation(self):
        next_gen_data = []
        # perform population evolution algorithm
        # ...
        return [Member(g) for g in next_gen_data]"
"Given a list of numbers, implement a quick sort algorithm.[7, 4, 5, 9, 1]","def quick_sort(arr):
    if len(arr) < 2:
        return arr
 
    pivot = arr[0]
    less = [i for i in arr[1:] if i <= pivot]
    greater = [i for i in arr[1:] if i > pivot]
 
    return quick_sort(less) + [pivot] + quick_sort(greater)

if __name__ == '__main__':
    arr = [7, 4, 5, 9, 1]
    print(quick_sort(arr)) # Output:[1, 4, 5, 7, 9]"
"Write a Python program that reads a list of words and prints the most frequently used one.['apple', 'banana', 'orange', 'apple']","""""""
Program to read a list of words and print the most frequently used one

Input: List of words
Output: Most frequently used word
""""""

def most_freq_word(words): 
    # Create an empty dictionary 
    freq = {} 
  
    # Iterate over the list of words 
    for word in words: 
        # Check if word is already present in the freq dictionary 
        if (word in freq): 
            #Increment the count of word 
            freq[word] += 1
        else: 
            # Add it to the dictionary with a count of one 
            freq[word] = 1
  
    # Get the count of most frequent word 
    max_count = max(freq.values()) 
  
    # Loop over words and return the most frequent one 
    for key, value in freq.items(): 
        if value == max_count: 
            return key 


if __name__ == '__main__': 
    # Input
    words = ['apple', 'banana', 'orange', 'apple']

    # Result
    print(most_freq_word(words))"
Edit the following code to return a length 5 array of zeros.int[] array = new int[10];,"int[] array = new int[5];
for(int i=0; i<array.length; i++){
    array[i] = 0;
}"
"Output a string which is the reverse of the input string.""Hello World""","""""""
Function to reverse a given string 

Input: String
Output: Reversed string
""""""

def reverse_string(string): 
    # Create an empty string to store the reversed string 
    reversed_string = """"

    # Iterate over the string from the last character 
    for i in range(len(string)-1, -1, -1): 
        reversed_string += string[i] 
  
    return reversed_string


if __name__ == '__main__': 
    # Input 
    string = ""Hello World""
  
    # Result 
    print(reverse_string(string))"
"Write a function to output the maximum value possible from a given array.[-1, 2, 4, 6, -3, 5]","def max_val(arr):
    maximum = arr[0]
    for i in arr:
        if i > maximum:
            maximum = i
    return maximum

max_val([-1, 2, 4, 6, -3, 5])  # Output: 6"
Construct a for loop that calculates the sum of the numbers from 0 to n.,"n = 5
total = 0
for i in range(n+1): 
    total += i
   
print(total) # Output: 15"
Create a text classifier using supervised learning.,"import scikit-learn as sklearn

# Load the data
X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.2, random_state = 0)

# Train the classifier
classifier = sklearn.naive_bayes.MultinomialNB()
classifier.fit(X_train, y_train)

# Test the classifier
y_predicted = classifier.predict(X_test)

# Check the accuracy
accuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) 
print(""Accuracy score: {:.2f}"".format(accuracy)) # Output: Accuracy score: 0.89"
Create a machine learning model that predicts whether an email is spam or not.,"import scikit-learn as sklearn

# Load the data
X = dataset[['email_body', 'send_from', 'subject', 'num_links']]
y = dataset['is_spam']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify=y)

# Train the model
classifier = sklearn.linear_model.LogisticRegression()
classifier.fit(X_train, y_train)

# Test the model
y_predicted = classifier.predict(X_test)

# Check the accuracy
accuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) 
print(""Accuracy score: {:.2f}"".format(accuracy)) # Output: Accuracy score: 0.95"
"Generate a numpy array of shape (3,3) with random values between 0 and 10.","import numpy as np

array = np.random.randint(0, 10, size=(3, 3))
print(array)

# Output: 
[[5 4 9]
 [6 8 5]
 [4 7 6]]"
Find the sum of factors of a given number.,"def sum_factors(n):
    total = 0
    for i in range(1, n + 1):
        if n % i == 0:
            total += i
    return total

sum_factors(12) # Output: 28"
"Create a function that returns true if a given set is a subset of another set.set1 = {1,2,3}
set2 = {1,2,3,4,5,6}","def is_subset(s1, s2):
    for e in s1:
        if e not in s2:
            return False
    return True

is_subset({1,2,3}, {1,2,3,4,5,6}) # Output: True"
"Design a function that takes in a matrix and finds its number of rows and columns.matrix = [[1, 2, 3, 4], 
          [5, 6, 7, 8], 
          [9, 10, 11, 12]]","def matrix_dimensions(matrix):
    num_rows = len(matrix)
    num_columns = len(matrix[0])
    return num_rows, num_columns

matrix = [[1, 2, 3, 4], 
          [5, 6, 7, 8], 
          [9, 10, 11, 12]]

num_rows, num_columns = matrix_dimensions(matrix)
print(num_rows) # Output will be 3
print(num_columns) # Output will be 4"
"Create a class definition in Python for a vehicle with attributes like make, model, year.","class Vehicle:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
 
    # Other methods..."
"Design a program to select the names of the students who have secured more than 80% marks in a given exam.students = [(""John"", 75), (""Mary"", 90), (""Simon"", 80), (""Rose"", 80)]","def get_high_scorers(students):
    # Get the names of students with marks greater than 80
    high_scorers = []
    for student in students:
        if student[1] > 80:
            high_scorers.append(student[0])
    return high_scorers

students = [(""John"", 75), (""Mary"", 90), (""Simon"", 80), (""Rose"", 80)]
print(get_high_scorers(students)) # Output will be [""Mary""]"
"Write Python code to fill missing values in a Pandas dataframe with a given value.import pandas as pd

df = pd.DataFrame([
    [8, 'B', 'G'],
    [28, 'B', np.nan],
    [22, np.nan, 'G'],
    [2, 'A', np.nan] 
])","import pandas as pd

df = pd.DataFrame([
    [8, 'B', 'G'],
    [28, 'B', np.nan],
    [22, np.nan, 'G'],
    [2, 'A', np.nan] 
])

df.fillna(value='NA', inplace=True)"
"Define the term ""polymorphism"" in programming.",Polymorphism is a feature in object-oriented programming that allows objects to behave differently depending on the context. It is used to reduce the amount of code needed for different operations and to increase the code's maintainability. Polymorphism allows objects to be defined from a common class in which each instance can be used in a different way based on its particular context. This enables a code to work in multiple forms depending on the data input. It simplifies the coding process by allowing for a single interface to access multiple objects at the same time.
Create a select query to fetch all the customers with a name starting with 'A'.,"SELECT * FROM customers
WHERE name LIKE 'A%';"
Create a function 'greet' that takes a string parameter 'name' and returns the string 'Hello name!',"function greet(name) {
  return 'Hello ' + name + '!';
}"
Create an array of 5 increasing numbers starting from 10.,"var arr = [10, 11, 12, 13, 14];"
Write a function in Python that takes four strings as parameters and returns a single string with all strings concatenated together.,"def concatenate(str1, str2, str3, str4):
  return str1 + str2 + str3 + str4"
Create a function 'subStr' that takes a string and a start and end index and returns a substring between the start and end index.,"def subStr(str, start, end):
  return str.substring(start, end)"
"Categorize a given tweet.""This new software program is supposed to make life so much easier!""",positive
"Identify the type of bug for the following code snippet.def print_message(messsage):
    print(""My message is: "" + message)","Syntax error. The function name is missing a single letter ""s"", it should be ""print_message""."
"Suggest an additional function needed to complete the following programme.class Node:
    def __init__(self, data):
        self.data = data
        self.next = None","class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
    
    def getData(self):
        return self.data"
Describe in one sentence what a variable declaration statement is.,A variable declaration statement is a line of code that assigns a value to a variable name.
"Suggest a solution to the following problem: Write a program to sort a list of strings in alphabetical order.list_of_strings = ['banana', 'apple', 'orange', 'kiwi']",list_of_strings.sort()   # Sorts the list in alphabetical order
Create a function to find cube of any number,"def cube(n):
    return n**3"
"Extract the unique elements from a given list of numberslist_of_nums = [5, 2, 5, 3, 7, 8, 2]","unique_nums = set(list_of_nums)  # {2, 3, 5, 7, 8}"
Define a function to compare two strings,"def compareStrings(string1, string2):  
    if(string1 == string2): 
        return 0
    elif(string1 > string2): 
        return 1
    else: 
        return -1"
Write a pseudocode to compare two strings and determine which is longer.,"Function CompareStrings(str1, str2)
  if Length(str1) > Length(str2)
    return str1
  else
    return str2
End Function"
Implement a function to generate the Fibonacci series upto 'n' terms.n = 10,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Parse the given markup language to extract out the attributes and their corresponding values.<html>
    <head>
        <title>My Amazing Website</title>
    </head>
</html>",title: My Amazing Website
"Modify the given code to accept input in Celsius and convert it to Fahrenheit.def c2f():
  return ((9/5)*temp + 32)","def c2f(temp):
  return ((9/5)*temp + 32)"
Write code to times the number entered by the user by 3.,"num = int(input('Enter a number:'))
print(num*3)"
Find the square root of the given number using the Newton-Raphson method.Number: 100,"x_n+1 = x_n - f(x_n) / f'(x_n)
x_0 = 100

x_1 = 50 - (50*50 - 100) / (2*50)
   = 50 - (2500 - 100) / 100 
   = 50 - 24 / 100 
   = 26

x_2 = 26 - (26*26 - 100) / (2*26)
   = 26 - (676 - 100) / 52 
   = 26 - 576 / 52 
   = 10

x_3 = 10 - (10*10 - 100) / (2*10)
   = 10 - (100 - 100) / 20 
   = 10 - 0 / 20 
   = 10

The square root of 100 is 10."
Identify the byte sequence that produces the following output.Hello World!,48 65 6c 6c 6f 20 57 6f 72 6c 64 21
Create a Regular Expression to match URLs,"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$"
"Modify the given code snippet to make all elements of the list uppercase.list = [""hello"", ""world""]",list = [x.upper() for x in list]
What is deadlock in operating system?,Deadlock is a situation in an operating system where two or more processes are unable to move forward due to the resources already being used by some of the other processes. This is a state of equilibrium where no progress can be made in executing the processes due to a circular wait for resources. A process might be waiting indefinitely for an event that will never occur. This can cause a system to become unresponsive as no progress can be made in execution. It is important for operating system designers to identify potential deadlocks and manage them effectively.
"Classify the following sentence according to the type of speech it is.John said: ""Let's go to the zoo.""",Direct speech.
"Write a Regular Expression to identify all words that end with ""ing"".",\w+ing$
"Erase the duplicated elements of a list.list1 = [13, 15, 16, 18, 15, 20, 17]",list1 = list(set(list1))
"Convert the following code snippet into a function.num1 = 4
num2 = 6
result = num1 + num2","def add(num1, num2):
    result = num1 + num2
    return result"
What data structure do you choose to represent a sparse matrix in programming?,"A sparse matrix can be represented using a hashmap (dictionary) data structure. The hashmap will contain the non-zero elements of the matrix, where each entry will include the row index, column index and the value at that location. This helps in storing and retrieving massive amounts of data in an efficient manner."
Create a function to test if an integer is prime or not.,"def is_prime(x):
    if x < 2: 
        return False
    for n in range(2, x - 1):
        if x % n == 0: 
            return False
    return True"
Generate a classification network in a deep learning framework.,"import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation

model = Sequential()

model.add(Dense(64, input_dim = 8))
model.add(Activation('relu'))
model.add(Dense(16))
model.add(Activation('sigmoid'))
model.add(Dense(2))
model.add(Activation('softmax'))

model.compile(loss = 'categorical_crossentropy',
              optimizer = 'adam',
              metrics = ['accuracy'])"
"You are given a list of numbers and you need to calculate the standard deviation of the numbers.[1, 2, 3, 4, 5]","import statistics

def calculate_std_dev(nums):
 return statistics.stdev(nums)"
"Read the code and determine all the variables that have been declared or used.def func(x, y, z):
    a = x + y + z
    b = x * y * z
    c = a / b","The variables are x, y, z, a, b, and c."
"We need to find all unique combinations of elements from a given list of items.[1, 2, 3, 4]","def find_unique_combinations(items):
 result = []
 for i in range(1, len(items) + 1):
 for combination in itertools.combinations(items, i):
 result.append(list(combination))
 return result"
We need to write a program to generate all permutations of a given string.,"def generate_permutations(s):
 results = []
 if len(s) == 1:
 results.append(s)
 else:
 for i, c in enumerate(s):
 for perm in generate_permutations(s[:i] + s[i + 1:]):
 results.append(c + perm)
 return results"
"You are given a string and you need to clear the line breaks.""This is a 
test
string""","def clear_line_breaks(s):
 return s.replace(""\n"", """")"
"We need to build a function to compute the product of the elements of a given array.[1, 2, 3, 4, 5]","def product_of_array(arr):
 prod = 1
 for i in arr:
 prod *= i
 return prod"
"We need to find the maximum element in a given array of numbers.[1, 2, 3, 4, 5]","def find_max(arr):
 maximum = arr[0]
 for i in arr[1:]:
 if i > maximum:
 maximum = i
 return maximum"
"Create a python function which finds the intersection of two listslist1=[2, 5, 8, 10]
list2=[3, 5, 8, 10]","def intersect(list1,list2):
    return [i for i in list1 if i in list2]"
"Write a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4.astring = ""Python""","def character_at_index(astring):
    if len(astring) > 4:
        print(astring[4])"
"Create a python class that stores the name of the student, their total marks and return the student name with their total marks.name = 'John'
marks = 75","class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks

    def get_details(self):
        return self.name + "": "" + str(self.marks)"
"Write an if statement that checks if an integer, num, is less than 10.num = 7","if num < 10:
    print(""num is less than 10"")"
"Create a program to take a string of words and return the count of each word.word_string = ""This is a sentence of words""","def countWords(word_string):
    words = word_string.split()
    count_dict = {}
    for word in words:
        count_dict[word] = words.count(word)
    return count_dict"
"Create a function that takes two strings's, two string length's and returns true if the second string is a rotation of the first.string1 = ""Hello World""
string2 = ""WorldHello""
length1 = 11
length2 = 11","def isRotation(string1, string2, length1, length2):
    if length1 == length2 and len(string1)>0:
        string1string1 = string1 + string1
        return string2 in string1string1"
"Create a function that takes a string and a number n, then return n characters from the end of the string.string = ""Hello World""
n = 3","def getCharactersFromEnd(string, n):
    return string[-n:]"
List all the methods available in axelrod python library,"Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method."
"Compute P(A | B) given that  P(B | A) = 0.8, P(A) = 0.4, and P(B) = 0.7","P(A|B) = P(B|A) * P(A) / P(B)
     = 0.8 * 0.4 / 0.7
     = 0.5714286"
Prompt a clarification from the user when the reply provided is unclearInput Reply: I don't know,"Can you please explain what you mean when you say ""I don't know""?"
Solve the quadratic equation 3x^2 + 8x + 4 = 0,"x = (-8 ± √-112) / (2 × 3)
   = (-8 ± 4√7) / 6
   = (-2 ± 2√7) / 3"
"Given an array of integers, write a recursive program to merge two sorted subarrays ar1 and ar2ar1 = [1, 4, 7, 9]
ar2 = [2, 5, 6, 8]","def mergeSortedSubarrays(ar1, ar2): 
    # if ar1 is empty 
    if len(ar1) == 0: 
        return ar2   
    # if ar2 is empty 
    if len(ar2) == 0: 
        return ar1 
  
    # compare the first elements of each array
    if ar1[0] < ar2[0]: 
        # add the smaller element to the result
        result = [ar1[0]] 
        # remove the element from the first array 
        ar1.remove(ar1[0]) 
    else: 
        result = [ar2[0]] 
        ar2.remove(ar2[0]) 
  
    # call the same function over the remaining elements in the both arrays
    result = result + mergeSortedSubarrays(ar1, ar2) 
    return result"
Calculate the sum of all characters in a string using a for loopString: Python,"total = 0
for ch in 'Python':
    total += ord(ch)
print(total)

# Output: 686"
"Construct a binary search tree from a list of given itemsItems: [1, 5, 7, 9, 11, 16]","9
    /   \  
   5    11
  /    /  \
 1    7    16"
Implement an algorithm to generate the permutations of a string,"def permutations(string):
    if len(string) <= 1:
        return set([string])

    # get the last character
    last_char = string[-1]

    # get all permutations for the remaining characters
    all_permutations = permutations(string[:-1])

    # create permutations for including the last character
    permutations_with_last_char = set()
    for permutation in all_permutations:
        for idx in range(len(string)):
            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]
            permutations_with_last_char.add(permutation_with_last_char)

    return permutations_with_last_char"
"Suggest a completion for the following code that generates a sequence of integers.def generate_sequence(starting_number, step):","def generate_sequence(starting_number, step):
 num = starting_number
 while True: 
  yield num
  num += step"
Write a function to obtain the result of a given mathematical expression.2 + 3 - 5,"def calculate_expression(expression):
 return eval(expression)"
Suggest a solution to convert a given number from one base to another.,"def base_conversion(num, base_from, base_to):
 if base_from == 10:
  num = int(num, base_to)
 elif base_to == 10:
  num = int(str(num), base_from)
 else:
  num = int(str(int(str(num), base_from)), base_to) 
 return num"
Develop a code to perform linear regression in R,"fit <- lm(y ~ x,data)
summary(fit)"
Generate a code in Lua to find the maximum number in a given array.,"function findMax(arr)
    local maxValue = -math.huge
    for i = 1, #arr do
        if arr[i] > maxValue then
            maxValue = arr[i]
        end
    end
    return maxValue
end"
"Use the information provided to initialize a dictionary in Python.keys = [""name"", ""age"", ""gender""]
values = [""John Doe"", 25, ""Male""]","my_dict = dict(zip(keys, values))"
"Compute the sum of two integers without using the ""+"" operator.x = 5
y = 7",sum = x ^ y + (x & y) << 1 # using bitwise operators
"Update the dictionary values using the same keys.my_dict = {""key1"": 3, ""key2"": 6}","my_dict.update({""key1"": 4, ""key2"": 8})"
"Calculate the total of all the elements in the list using a loop.my_list = [2, 5, 9, 4]","total = 0
for num in my_list:
    total += num
print(total) # 20"
"Create a list of students which contains a nested list of the student’s name and age.students = [""Sam"", 19], [""Alice"", 20], [""Linda"", 21]","student_list = [[student[0], student[1]] for student in students]"
"Change the following if-else expression to a ternary operatora = 10
b = 5

if a > b:
    c = a
else:
    c = b",c = a if a > b else b
Define an absolute difference function in Python to find the difference between two numbers.,"def absolute_difference(x, y):
    return abs(x - y)"
Classify the following sentence as a declaration or an instructionBe careful while crossing the street.,Instruction
"Given two lists, write a Python code to find the common elements in both the listslist1 = [3, 7, 14, 19]
list2 = [6, 8, 14, 17]","common_elements = [element for element in list1 if element in list2]

print(common_elements) #[14]"
"Using the following data, generate a random string in Pythondata = [“H”, “e”, “l”, “l”, “o”]","import random

random_string = """".join(random.choices(data, k=5))

print(random_string) #helll or olleh or leloh or any other combination"
"Generate a unit test for the following bubble sort algorithmdef bubble_sort(arr): 
    n = len(arr) 
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]","import unittest

class TestBubbleSort(unittest.TestCase):
    def test_sort(self):
        arr = [5, 2, 3, 7, 1]
        bubble_sort(arr)
        self.assertEqual(arr, [1, 2, 3, 5, 7])

if __name__ == '__main__':
    unittest.main()"
Write a Python code to classify the following sentenceIt's raining cats and dogs,"import nltk
from nltk.tokenize import word_tokenize

sentence = ""It's raining cats and dogs""
tokens = word_tokenize(sentence)
tagged = nltk.pos_tag(tokens)

print(tagged) #[('It', 'PRP'), (""'s"", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]"
"Construct a 2-dimensional array, A, of size M*N, filled with all zeroes.M=4, N=5","A = [[0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0]]"
"Given a course consisting of 5 lessons, write a program to display the first lesson.Lessons = [""Python Basics"", ""Javascript Basics"", ""C++ Basics"", ""Data Structures"", ""Object-Oriented Programming""]","def display_first_lesson(lessons):
    print(""The first lesson is: "" + lessons[0])

Lessons = [""Python Basics"", ""Javascript Basics"", ""C++ Basics"", ""Data Structures"", ""Object-Oriented Programming""]

display_first_lesson(Lessons)"
Assign a value to a given key in a dictionary.dictionary = {'key': 'value'},dictionary['key'] = 'updated value'
"Translate the text ""Hello"" to Spanish.","""Hola"""
"Find the smallest number in the array using the reduce method.array = [2, 7, 3, 8, 5]","import functools

array = [2, 7, 3, 8, 5]

smallest = functools.reduce(lambda x,y: x if x < y else y, array)

print(smallest)"
"Print a string in reverse.string = ""Hello World!""",print(string[::-1])
Create a class named Square and create a method to calculate the area.,"class Square:
    def __init__(self, side):
        self.side = side
 
    def area(self):
        return self.side * self.side"
"Find the sum of all elements in a matrix using C.int A[2][2] = { {1, 2}, 
                {3, 4} };","// Find the sum of all elements of the matrix
int sum = 0; 
for (int i = 0; i < 2; i++)
   for (int j = 0; j < 2; j++)
      sum = sum + A[i][j];"
"Check whether all elements in the array are equal using Python.arr = [2,2,2]","# Check whether all elements in the array are equal
if all(x == arr[0] for x in arr):
    print(""All elements are equal"")
else:
    print(""Elements are not equal"")"
"Perform a linear search to find if a key exists in an array using C.int arr[] = {4, 3, 2, 10, 40}; 
int key = 40;","// Perform linear search 
int flag = 0; 
for (int i = 0; i < 5; i++) { 
   if (arr[i] == key) { 
      flag = 1; 
      break; 
   } 
} 
if (flag == 1) 
    printf(""Present""); 
else
    printf(""Not Present"");"
"Use the provided text to generate a python ``dict``.KEY1:VALUE1,KEY2:VALUE2,KEY3:VALUE3","{'KEY1': 'VALUE1', 'KEY2': 'VALUE2', 'KEY3': 'VALUE3'}"
"Implement a search algorithm with the given data structure.def searchTree(T, k):
    """"""
    Tree T is either empty or a node with two subtrees, left and right. 
    The value at the root is a[0]
    """"""","def searchTree(T, k):
    if not T:
        return False

    if k == T[0]:
        return True
    elif k < T[0]:
        return searchTree(T[1], k)
    else:
        return searchTree(T[2], k)"
"Classify the given input text into one of the 4 categories (""sports"", ""weather"", ""finance"", ""technology"").Apple Inc. reported earnings today",technology
"Write a function that takes two inputs, a list and a target number, and prints only the list items whose total add up to the target number.list = [1, 5, 9, 10], target = 10","def sum_of_list(lst, target):
    """"""
    This function takes a list and a target number as inputs, and prints only the list items whose total add up to the target number.
    """"""
    for i in range(len(lst)-1):
        for j in range(i+1, len(lst)):
            if lst[i] + lst[j] == target:
                print (lst[i], lst[j])

sum_of_list(list, target)"
"Find and replace all occurrences of ""cat"" with ""dog"" in the given string.I have a cat and two cats",I have a dog and two dogs
"Write a regex expression to match strings that start with ""abc"" and end with ""xyz"".",^abc.*xyz$
"How can you create a dictionairy from the following two lists in Python?list1 = [""a"", ""b"", ""c""]
list2 = [1, 2, 3]","dict_from_lists = dict(zip(list1, list2))"
"Write a function that takes an array and removes all duplicates in place, returning the length of the new array.[1, 2, 3, 2, 4, 3]","int removeDuplicates(int *arr, int size) {
 int index = 0, i;
 for(i=0; i<size; i++) {
  if (arr[i] != arr[index]) {
   index++;
   arr[index] = arr[i];
  }
 }
 return index + 1;
}"
"Classifying whether an email is a spam or not.This email contains the message ""Try our latest offers - discount up to 50%""",notspam
"Change this code to print the reversed version of a string.string s = ""Hello World!"";","string s = ""Hello World!""; 
reverse(s.begin(), s.end()); 
cout << s; 
// Outputs: !dlroW olleH"
"Given a string s, determine if it is an isogram.""isogram""","bool isIsogram(string s) 
{ 
    int count[256] = {0}; 
    int length = s.length(); 
  
    for (int i=0; i<length; i++) { 
        if (count[s[i]] == 0)
            count[s[i]]++;
        else
            return false;
    } 
  
    return true;
}"
"Write a code that checks if two String are anagrams.s1 = ""listen"", s2 = ""silent""","def areAnagrams(s1, s2): 
  
    if (len(s1) != len(s2)): 
        return False
  
    s1 = sorted(s1) 
    s2 = sorted(s2) 
  
    for i in range(len(s1)): 
        if (s1[i] != s2[i]):
          return False
  
    return True"
"Write a function to check if an array is sorted according to given constraints.arr = [2, 3, 15, 9, 5]","def isSorted(arr) : 
	n = len(arr) 
	for i in range(0,n-1): 
		if arr[i] > arr[i+1]:
			return False
	return True"
"Write a query that returns the word and the number of times it appears in the string.""The quick brown fox jumps over the lazy dog""","SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(str, ' ', n), ' ', -1) as word, COUNT(*)
FROM (
SELECT SUBSTRING_INDEX(str, ' ', n)
FROM (SELECT TRIM(BOTH ' ' FROM 'The quick brown fox jumps over the lazy dog') as str) t
CROSS JOIN
(
SELECT 0 AS n UNION ALL SELECT 1 AS n UNION ALL SELECT 2 AS n
UNION ALL SELECT 3 AS n UNION ALL SELECT 4 AS n UNION ALL SELECT 5 AS n
UNION ALL SELECT 6 AS n UNION ALL SELECT 7 AS n UNION ALL SELECT 8 AS n
UNION ALL SELECT 9 AS n UNION ALL SELECT 10 AS n
) n1
WHERE LENGTH(SUBSTRING_INDEX(str, ' ', n)) > 0
) t
GROUP BY word"
Discuss the potential performance impacts of using a Numpy array for a given task,"Using a Numpy array for a given task can potentially have a positive performance impact in terms of memory usage and computation speed. Numpy arrays are stored contiguously in memory, making them much faster to access than an array stored in traditional Python lists whose elements are stored separately. Additionally, when performing element-wise operations, such as mathematical computations across arrays, Numpy arrays can be much faster than using regular Python loops. Since they are stored contiguosly, they benefit from the processor's usage of cache coherency. Therefore, using Numpy arrays can greatly reduce latency and increase the computational performance of a task."
How can we use try…except blocks in Python to handle errors?,"Try...except blocks are used in Python to handle errors gracefully. They provide a way for Python to execute a code block and gracefully handle any errors that may occur. The code block inside the try is executed first and if an error occurs, it will be caught by the except block and handled. For example, if we have a function that might generate an error, we can use a try...except block to gracefully handle the error and prevent the program from crashing. The try...except block allows us to execute the code and gracefully handle any errors that may occur."
Why is it important to document each step of the code development process?,"It is important to document each step of the code development process to ensure that all of the code is easily understandable and maintainable. Documentation can explain how the code works, which can be useful for other developers that may need to modify or debug the code. Additionally, it can explain the logic and any decisions that were made while writing the code, as well as provide any additional information that may be useful. Ultimately, documenting each step of the code development process helps to ensure that the code can be easily understood and maintained."
Design a series of methods that would be used to implement a card game,"The methods that could be used to implement a card game would include the following: 

- drawCard(): To retrieve a card from the deck. 
- shuffleDeck(): To mix up the cards in the deck. 
- getValue(): To get the numerical value of a card. 
- compareCards(): To compare two cards. 
- checkForWinner(): To check if a player has won or not. 
- dealCards(): To distribute the cards to players. 
- removeCard(): To remove a card from the deck. 
- printScore(): To print out the scores of a player."
Summarize the concept of content-based filtering,"Content-based filtering is a method for recommending items to users based on the content of those items. It looks at the content associated with each item such as text, images, and videos and matches users with items that contain similar content. This type of filtering is based on the idea that users who like certain items are likely to like similar items. It is an efficient way of recommending items to users by using the content of items to predict user preferences."
"Compile a program to check whether an array is a subset of another arrayexample1 = [4, 5, 6]
example2 = [5, 6, 7]","def is_subset(a, b): 
    for i in a: 
        if i not in b: 
            return False 
    return True"
"Edit the following code to find the maximum of three numbersa = 3
b = 5
c = 7","a = 3
b = 5 
c = 7

maximum = max(a, b, c)
print(""The maximum of three numbers is: "", maximum)"
"Change the following code so that it can reverse a list without modifying the original list[1, 2, 3]","def reverse(lst): 
    return lst[::-1] 
  
lst = [1, 2, 3]
print(reverse(lst))"
Extract the URL from the given text.The website can be accessed at https://www.website.com,https://www.website.com
"Given a list, sort it in descending order without using the built-in sort function.list = [2, 7, 3, 4, 9, 1]","[ 9, 7, 4, 3, 2, 1]"
Generate a function that swaps two given numbers.,"def swap(x, y):
    temp = x
    x = y
    y = temp
    return x, y"
"Rewrite the given recursive Python program as a loop.def factorial(n): 
   if (n == 1): 
       return n
   else: 
       return n * factorial(n-1)","def factorial(n): 
    result = 1
    for i in range(n): 
        result = result * (i + 1)
    return result"
"Determine if the given string matches the given regular expression pattern.String: this is a sample string
Pattern: (.*) sample (.*)","Yes, the string matches the given regular expression pattern."
Name the string method that searches a string for a specified value and returns the position of the match.,The string method is called indexOf()
Suggest an appropriate return data type of the following function that takes an integer array as input.def find_max(arr):,int
Create a python function that takes a string as input and returns a boolean if the string contains only upper case letters.,"def all_upper(s):
        return s.isupper()"
Create code to check if the number is a power of three.num = 8,"def is_power_of_3(num):
  if num == 1:
    return True
  elif num % 3 != 0:
    return False
  else:
    return is_power_of_3(num / 3)"
"Design a program to reverse a string without using the built-in 'reverse' method.string = ""Hello World""","def reverseStr(str):
    revStr = """" 
    i = len(str) - 1
    while i >= 0: 
        revStr += str[i] 
        i = i - 1
    return revStr"
"Create a method to calculate the sum of the cubes of the elements in an array.arr = [1,2,3,4]","def sumCubes(arr):
  sum = 0
  for i in arr:
    sum += i**3
  return sum"
"Produce a code to change the case of a given string.string = ""Hello World""","def changeCase(string):
  return string.swapcase()"
"Create a code to insert an item in a given position in a linked list.Insert ""Hello"" at position 2 in the list {1->2->3->4->5}","def insertAtPos(head, pos, data): 
    if head is None: 
        return
    else:
        temp = head
        newNode = Node(data)
        count = 0
        while (count < pos-1) : 
            temp = temp.next
            count += 1
        newNode.next = temp.next
        temp.next = newNode"
"Write a function that takes a string as an input and returns a list of all the substring of the given string.string = ""hello""","def substrings(string):
    substrings_list = []
    for i in range(len(string)+1):
        for j in range(i+1, len(string)+1):
            substrings_list.append(string[i:j])
    return substrings_list"
"Take a list of numbers and remove the numbers that are greater than 10.numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]","def remove_greater_than_10(numbers):
    return [x for x in numbers if x <= 10]"
"Wirte a function that takes a string as input and returns the number of times the character 'a' appears in it.string = ""abacadaba""","def count_a(string):
    count = 0
    for char in string:
        if char == 'a':
            count += 1
    return count"
Modify the code to add a class called Animal that accepts a name and an age as arguments.class Animal:,"class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Take a list of objects as input and return a list with removed duplicates.objects = [1, 2, 3, 4, 5, 1, 2, 3]","def remove_duplicates(objects):
    new_list = []
    for obj in objects:
        if obj not in new_list:
            new_list.append(obj)
    return new_list"
"Write a function that takes a numerical string as input and returns an integer.string = ""12345""","def string_to_int(string):
    return int(string)"
Create a hash function that assigns a unique number to each character of the input string.Hello World,"// Create a Hash Table 
let hashTable = {};
 
// Create a hash function 
function createHash(str) {
 
    for (let i = 0; i < str.length; i++) {
        // Assign a unique number to each character present in the string 
        hashTable[str.charAt(i)] = i; 
    }
    // Return the hash table 
    return hashTable; 
}"
Design a function that encrypts a string using the Caesar CipherHello World,"function encryptCaesarCipher(str, key) {
  let encryptedStr = """";
  for (i = 0; i < str.length; i++) {
    let charCode = str.charCodeAt(i);
    let encryptedCharCode = charCode + key;
    let encryptedChar = String.fromCharCode(encryptedCharCode);
    encryptedStr += encryptedChar;
  }
  return encryptedStr;
}"
Determine the most frequent character in the provided stringHello World,"function maxFrequencyChar(str) {
  let maxChar = '';
  let maxFrequency = 0;
  let hashTable = {};
 
  for(let char of str) {
    if (hashTable[char]) {
      hashTable[char] += 1;
    } else {
      hashTable[char] = 1;
    }
  }
 
  for(let char in hashTable) {
    if(hashTable[char] > maxFrequency) {
      maxFrequency = hashTable[char];
      maxChar = char;
    }
  }
 
  return maxChar;
}"
"Fetch data from the internet using an API call in Python""https://api.example.com/v1/search""","import requests

url = ""https://api.example.com/v1/search""

response = requests.get(url)
data = response.json()
print(data)"
"Rewrite this function to reverse the order of the elements in the array.list = [1,2,3,4,5]","def reverse_list(list): 
    mid = len(list)//2
    for i in range(mid): 
        tmp = list[i]
        list[i] = list[len(list)-i-1] 
        list[len(list)-i-1]=tmp 
    return list"
Create a function that calculates the length of a linked list.Linked List: 10 -> 20 -> 30 -> 40 -> 50,"def list_length(head):
    count = 0
    while head is not None:
        count += 1
        head = head.next
    return count"
"Construct a class that can be used to check if the braces in an expression are balanced.expression = ""[(}{)]""","class BalancedBraces: 
    
    def checkBalanced(self, expression):
        s = []
        for i in expression:
            if i == '(' or i == '[' or i == '{': 
                s.append(i)
            elif i == ')' or i == ']' or i == '}':
                if len(s) > 0 and (
                (i == ')' and s[len(s)-1] == '(')or 
                (i == ']' and s[len(s)-1] == '[')or 
                (i == '}' and s[len(s)-1] == '{')):
                    s.pop()
                else:
                    return False
        return len(s) == 0"
Write a class to implement a stack using an array.,"class Stack: 
    
    def __init__(self): 
        self.stack = [] 
  
    def isEmpty(self): 
        return self.stack == [] 
  
    def push(self, data): 
        self.stack.append(data) 
    
    def pop(self): 
        data = self.stack[-1] 
        del self.stack[-1] 
        return data 
  
    def peek(self): 
        return self.stack[-1] 
  
    def sizeStack(self): 
        return len(self.stack)"
"Create a function in Python which takes two strings as arguments and returns true if the first string contains the second string, false otherwise.","def contains(string1, string2):
    return string2 in string1"
Calculate the Fibonacci sequence of the number 12.,144
Evaluate the following arithmetic expression with Python.15 * (2 + 7),195
"Merge the two following dictionaries into one with Python.dict1 = {'a':1, 'b':2}
dict2 = {'c':3, 'd':4};","dict1 = {'a':1, 'b':2}
dict2 = {'c':3, 'd':4};

merged_dict = {**dict1, **dict2}

print(merged_dict) // returns {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
Write a Regular Expression that matches all strings starting with a lowercase 'a' and ending with an uppercase 'Z'.,^a.*Z$
How would you define a Python decorator called ``logger`` to log the functions being called?,"from functools import wraps

def logger(func):
    @wraps(func)
    def log_function(*args, **kwargs):
        print('Running ""{}"" with arguments {}, {}'.format(func.__name__, args, kwargs))
        return func(*args, **kwargs)
    return log_function"
Write a class in Python to represent an entry in a contact book.,"class ContactEntry:
    def __init__(self, name, phone_number, email):
        self.name = name
        self.phone_number = phone_number
        self.email = email"
Using the standard library to construct a generator that returns the first n prime numbers.,"from math import sqrt

def prime_numbers(n):
    primes = []
    i = 2
    while len(primes) < n:
        for number in range(2, int(sqrt(i)) + 1):
            if i % number == 0:
                break
        else:
            primes.append(i)
        i += 1
    yield from primes"
Compose a regular expression to match the words 'beginning' and 'starting'.,"reg_expr = r""\b(beginning|starting)\b"""
Find the maximum and minimum values of a given list of integers in Python.,"int_list = [3, 5, 2, 4, 1]
max_value = max(int_list)
min_value = min(int_list)"
Reduce the 3-dimensional numpy array to a 2-dimensional numpy array.,"import numpy as np

a_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])

a_2d_array = a_3d_array.reshape(4,2)"
Create a Python script to print the following output.,"for x in range(10):
    for y in range(10):
        print(""*"" if (x + y) % 2 == 0 else "" "", end="""")
    print("""")"
"Find all words that contain the string ""ed"" in the provided text.She's a very dedicated person, who always tries to get the job done.","dedicated, tried"
Write Python code to create a list of numbers from 1 to 10 (including 10).,"list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Create a dictionary containing the keys ""name"" and ""age"".","my_dict = {""name"": """", ""age"": 0}"
"Create a class named ""Person"" containing the data members ""name"", ""age"", and ""address"".","class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address"
"Given a string, find the longest substring containing no repeated characters.""abcabcbb""","def longest_substring(str): 
    seen = {} 
    start = 0 
    maxlen = 0 
  
    for i, char in enumerate(str): 
        if char in seen: 
            start = max(start, seen[char] + 1) 
        seen[char] = i 
        maxlen = max(maxlen, i - start + 1) 
  
    return maxlen 
  
print(longest_substring(""abcabcbb"")) 
# Output: 3"
Make an API request to fetch the top 3 trending topics from Twitter.,"import requests 

trends_url = ""https://api.twitter.com/1.1/trends/place.json?id=1""

headers = {
    'Authorization': '"
"Given two sets, A and B, write a program to find the union of the two.A = {1, 2, 3, 4, 5}
B = {3, 4, 5, 6, 7}","def union(A, B):
    union_set = set()
    for item in A:        
        union_set.add(item)
    
    for item in B:
        union_set.add(item)
    return union_set"
"Given a number n, write a program to find the nth prime number.","def nth_prime(n):
    if n == 0:
        return None
    
    primeCount = 0
    checkNum = 2
    while(primeCount < n):
        isPrime = True
        for i in range(2, checkNum):
            if checkNum % i == 0:
                isPrime = False
        
        if isPrime == True:
            primeCount += 1
        
        if primeCount == n:
            return checkNum
        else:
            checkNum += 1"
"Given a starting number, write a program to generate the Fibonacci sequence up to nth number.","def fibonacci(n):
    if n <= 0:
        return None 
    
    first = 0
    second = 1
    sequence = [first, second]
    for i in range(2, n):
        next_term = first + second
        sequence.append(next_term)
        first = second
        second = next_term
    return sequence"
"In the accompanying array containing movie ratings, print out only the movies with ratings 8 or greater.movies = [
    {""title"": ""Toy Story 4"", ""rating"": 8},
    {""title"": ""Joker"", ""rating"": 9},
    {""title"": ""The Lion King"", ""rating"": 7},
    {""title"": ""Avengers: Endgame"", ""rating"": 8},
]","for (const movie of movies) {
  if (movie[""rating""] >= 8) {
    std::cout << movie[""title""] << std::endl;
  }
}

// Output:
// Toy Story 4
// Joker
// Avengers: Endgame"
"Write a code that uses a for-loop to print out the elements of the following array:my_list = [1,2,3,4]","for element in my_list:
    print(element)"
"Write a code to filter the even numbers from the following array:my_array = [1,2,3,4,5,6]","even_numbers = []
for number in my_array:
    if number % 2 == 0:
        even_numbers.append(number)

print(even_numbers)"
"Enhance the following code to find the average of all the even numbers in the array:my_array = [1,2,3,4,5,6]","even_numbers = []
for number in my_array:
    if number % 2 == 0:
        even_numbers.append(number)

average = sum(even_numbers) / len(even_numbers)
print(average)"
Use expand tabs to replace all the tabs in the following text with four spaces.text = '\thello \tworld \t',"import re
text = '\thello \tworld \t'
text = re.sub('\t', '    ', text)
print(text)"
"Analyze the following sentence and determine whether the dependent clause is restrictive or nonrestrictive.The elderly woman, who was once young and strong, works every day.","The dependent clause ""who was once young and strong"" is restrictive as it limits the definition of the noun phrase to a specific group. This particular group is elderly women who were once young and strong."
"Rewrite the following code snippet using a switch-case statement.if (a == 0) {
    result = b * c;
} else if (a == 1) {
    result = b + c;
} else {
    result = b - c;
}","int result;
switch (a) {
    case 0:
        result = b * c;
        break;
    case 1:
        result = b + c;
        break;
    case 2:
        result = b - c;
        break;
    default:
        break;
}"
"Identify the type of object-oriented programming pattern used in the following code snippet.public class Animal {
    public void eat() {
        // eat logic
    }
    public void move() {
        // move logic
    }
    public void sleep() {
        // sleep logic
    }
}","The code snippet is an example of the Template Method pattern. It provides a template method (eat, move, and sleep) that can be used by subclasses. The template method is defined in a superclass and the subclasses can override the methods to provide custom implementations."
Analyze the following sentence to determine the type of verb phrase involved.We have met several times.,"The verb phrase in this sentence is a perfect verb phrase, as it indicates an action that has been completed in the past and has a continuing result in the present. The verb in the phrase is ""have met""."
"Process this CSV string into an array of objects.name, age 
John, 20 
Ken, 30","const csvInput = `name, age
John, 20
Ken, 30`;

const lines = csvInput.split('\n');

const header = lines[0].split(', ');

const rows = lines.slice(1);

const objects = [];

rows.forEach(row => {
    const entries = row.split(', ');
    const obj = {};
    header.forEach((key, i) => {
      obj[key] = entries[i];
    });
    objects.push(obj);
});

// [
//   { name: 'John', age: '20' },
//   { name: 'Ken', age: '30' }
// ]"
"Read two strings from the user and check if they are anagrams.string1 = 'listen', string2 = 'silent'","def isAnagram(string1, string2): 
    # get lengths of strings 
    string1_length = len(string1) 
    string2_length = len(string2) 
  
    # if length dont match
    if string1_length != string2_length: 
        return False
  
    # sorting both strings
    string1 = sorted(string1) 
    string2 = sorted(string2) 
  
    # compare the sorted strings 
    for i in range(0, string1_length): 
        if string1[i] != string2[i]: 
            return False
  
    return True

# testing
string1 = 'listen'
string2 = 'silent'
print(isAnagram(string1, string2)) # Output: True"
"Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.list1 = [1,2,2,4,4,4,5]","def unique_list(list1):
    unique_list = []
    for x in list1:  
        if x not in unique_list: 
            unique_list.append(x) 
      
    return unique_list

# testing
list1 = [1,2,2,4,4,4,5]
print(unique_list(list1)) # Output: [1, 2, 4, 5]"
"Write code that takes in two numeric variables x and y, and if x is divisible by y, it should print ""x is divisible by y""Otherwise it should print ""x is not divisible by y"".x = 9, y = 3","def is_divisible(x, y):
    if x % y == 0:
        print(""x is divisible by y"")
    else:
        print(""x is not divisible by y"")

# testing
x = 9
y = 3
print(is_divisible(x ,y)) # Output: x is divisible by y"
"Create a list comprehension that outputs a list of odd numbers from a given list of numbers.numbers = [1,2,3,4,5,6,7,8,9,10]","odd = [x for x in numbers if x % 2 != 0]
print(odd) # Output: [1, 3, 5, 7, 9]"
"Write a function that creates a new array from a given array of integers, leaving out the negative ones.list1 = [-1, 1, 2, -2, 3, -3]","def removeNegative(list1):
    outputArray = [x for x in list1 if x >= 0]
    return outputArray

# testing
list1 = [-1, 1, 2, -2, 3, -3]
print(removeNegative(list1)) # Output: [1,2,3]"
"Identify the dependent clause in the given sentence.Sentence: Although he was sad, he still managed to go to the party.",Although he was sad.
Draft a while loop to print the numbers up to and including 5.,"i = 1
while i <= 5:
    print(i)
    i += 1"
Summarize the given article using the Gensim summarizer.[Article about Gensim summarizer](https://gensim.readthedocs.io/en/latest/summarization.html),"Gensim summarizer uses text preprocessing, tokenization, and summarization to generate extracted summaries from the given text. It supports manual summarization, latent semantic analysis, Latent Dirichlet Allocation, baseline summarization, and phrases-based summarization. Gensim summarizer provides a variety of ways to summarize text documents including manual summarization and auto summarization techniques."
Formulate a regular expression to identify even numbers up to 100.,^([02468]|[13579][0-9]?)$
Create a function which returns the factorial of a given number.,"""""""
Function which returns factorial of a given number
""""""

def factorial(num):
    if (num == 0):
        return 1
    else:
        return num * factorial(num-1)
    
if __name__ == '__main__':
    print(factorial(5))"
"Find the type of an object for the given object.Object: ""Hello World""",str
Identify the Python statement used for looping.,for
"Write a code snippet to cut the first 10 characters from a string.String: ""Hello World!""","```
string = ""Hello World!""
string = string[10:]
print(string)
```"
"How do you access the first element of the given list?List = [6, 7, 8]",list[0]
Write a code to validate an email entered by the user.,"""""""
Validate an email entered by the user
""""""

import re

def validate_email(email):
 regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
 if(re.search(regex, email)):
  return True
 else:
  return False
  
if __name__ == '__main__':
 email = input('Enter email address: ')
 if validate_email(email):
  print('Valid email address')
 else:
  print('Invalid email address')"
Generate a regex that detects an email,"^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$"
"Print the contents of the provided dictonaryDictonary: {'name': 'John', 'age': 23, 'address': '123 Main Street'}","print('Name:', d['name'])
print('Age:', d['age'])
print('Address:', d['address'])"
"Output the smallest and greatest number from the provided listList: [53, 78, 25, 63, 23, 39]","Minimum: 23 
Maximum: 78"
Format the following string using the str.format() method.String: The name of the person is {} and his age is {},"print(""The name of the person is {name} and his age is {age}"".format(name=""John Doe"", age=23))"
"Raise an error with the message ""Invalid value"" when the following function is called and the value of ""n"" is below 0.def check_value(n):
    # TODO","def check_value(n):
    if n < 0:
        raise ValueError(""Invalid value"")"
"Classify and label the outputs from a logistic regression.[-1, 0.1, 0.6, 1.8]","The outputs from the logistic regression are [-1, 0.1, 0.6, 1.8]. 
The labels for these outputs are: -1 = ""Negative Class"", 0.1 = ""Close to Negative Class"", 0.6 = ""Neutral Class"", 1.8 = ""Positive Class""."
"Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.[1, 2, 2, 2, 3, 3, 4, 4, 5]","def group_list(list): 
  result = {} 
  for element in list: 
    if element in result: 
      result[element] += 1 
    else: 
      result[element] = 1 
  
  return result 

list = [1, 2, 2, 2, 3, 3, 4, 4, 5] 
result = group_list(list) 
print(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}"
"Generate a function to convert an infix expression to a postfix expression.""A + B * C""","def infix_to_postfix(exp):
  stack = []
  postfix_exp = """"
  # Convert the expression to a list
  exp_list = exp.split()

  for char in exp_list:
    # If the character is an operand, append it 
    if char in ['A', 'B', 'C']:
      postfix_exp += char
    # If the character is an operator, push it to the stack
    elif char in ['+', '-', '*', '/']:
      stack.append(char)
    # When the closing parentheses is encountered, pop all the operators from the stack
    elif char == ')':
      while stack[-1] != '(': 
        postfix_exp += stack.pop() 
      stack.pop() #pop the opening parentheses

  # Pop all the operators in the stack
  while stack:
    postfix_exp += stack.pop()
  
  return postfix_exp

exp = ""A + B * C"" 
result = infix_to_postfix(exp) 
print(result) #ABC*+"
"Read the integers in a given list and return the sum of the squares of the list elements.arr = [1, 2, 3]","def squares_sum(arr):
    sum = 0
    for i in range(len(arr)):
        sum += arr[i] ** 2
    return sum"
"Create a format string in Python to output the sentence “Hello, my name is John Doe.”name = ""John Doe""","print(f""Hello, my name is {name}."")"
"Split the following sentence into three words using regular expression.sentence = ""Meeting is at 4 pm""","import re

words = re.split(r'\s', sentence)
print(words)

# Output: ['Meeting', 'is', 'at', '4', 'pm']"
"Write a Python script to create a dictionary of key - value pairs from a list.list = [""apple"", ""banana"", ""cherry""]","dictionary = dict.fromkeys(list, 0)

print(dictionary)

# Output: {'apple': 0, 'banana': 0, 'cherry': 0}"
"Read an array of integers and sort it in increasing order.arr = [3, 1, 4, 5, 2]","def sortArray(arr): 
    n = len(arr) 
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

sortArray(arr) 
print(arr)

# Output: [1, 2, 3, 4, 5]"
Create a loop in Python to print odd numbers between 10 and 25.,"for i in range(11, 25, 2):
    print(i)"
Edit this code to create a function which prints the Fibonacci series.,"def Fibonacci(n): 
    if n==0: 
        return 0
    elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
for n in range(10):
    print(Fibonacci(n))"
"Read a list of strings and return a list which contains only the strings with length at least 3.list = [""Apple"", ""cat"", ""dog"", ""banana"", ""mouse""]","newList = [i for i in list if len(i) >= 3]
print(newList)

# Output: ['Apple', 'banana', 'mouse']"
"Given a 2D array, transpose the array.matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","transpose_matrix = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]"
"Format the given list of numbers in such a way that element at i'th index is the product of all elements in the list except the i'th element.numbers = [1, 2, 3, 4]","def format_list(numbers):
    result = []
    prod = 1
    for i in range(0, len(numbers)):
        prod = prod * numbers[i]
    for i in range(0, len(numbers)):
        result.append(prod // numbers[i])
    return result"
Create a function to compute the depth of a binary tree.,"def tree_depth(root): 
    # Base case 
    if root is None: 
        return 0 ;  
  
    # If tree is not empty then height = 1 + max of left  
    # height and right heights  
    return 1 + max(tree_depth(root.left),  
                    tree_depth(root.right))"
"Create a function to find a pair of elements in an array whose sum matches the given target.numbers = [1, 2, 3, 4, 5], target = 6","def find_pair(numbers, target):
  nums_set = set(numbers)
  for num in nums_set:
    if target - num in nums_set:
      return [num, target-num]"
"Write a function in Python that takes a list of integer as input and return the most frequent value in the list.[3, 9, 5, 6, 3, 9, 5]","def most_frequent_value(list):
    return max(set(list), key = list.count)"
"Create an object in Python that has three properties, ""Color"", ""Height"" and ""Weight"".","myObject = { 
    'color': '',
    'height': 0,
    'weight': 0
}"
"Compute the sum of all the numbers in the following array: [1, 2, 3, 4, 5].",15
"List all the items in an associative array named ‘inventory’.inventory = {
    ""fruits"": [""Apple"", ""Banana"", ""Orange""],
    ""vegetables"": [""Carrot"", ""Cucumber"", ""Spinach""] 
}","[""Apple"", ""Banana"", ""Orange"", ""Carrot"", ""Cucumber"", ""Spinach""]"
"Edit the following code to use more efficient algorithms to improve its performance.for (int i = 0; i < n; i++)
{
    sum += i;
}","int sum = 0; 
for (int i = 0; i < n; i++) 
    sum += i;
sum = n * (n + 1) / 2;"
"Observe the given piece of code and suggest the possible data structure to use.for (int i = 0; i < input.length; i++)
{
    if (input[i] == 0)
    {
       output[output_index] = i;
       output_index++;
    }
}",An array or a list should be used to store the positions of the numbers that are equal to 0 in the input. The output array should be used to store the positions. The output index should be used to keep track of the current position in the output array.
How would you go about sorting a million numbers in memory?,"A common approach would be to use an efficient sorting algorithm, such as Quicksort, Merge Sort, or Heapsort. These algorithms typically take time proportional to n log n, where n is the number of elements being sorted."
"Edit the Python code to reverse a linked list.# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None","# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def reverse_list(head):
    prev = None
    while head != None:
        next = head.next
        head.next = prev
        prev = head
        head = next
    return prev"
"Change the Python code to output the product of two numbers.def multiply(a, b): 
    return a + b","def multiply(a, b): 
    return a * b"
"Change the Python code to find the occurrences of an item in a listdef count(list_of_items, item): 
    return len(list_of_items)","def count(list_of_items, item): 
    count = 0
    for i in list_of_items:
        if i == item:
            count += 1
    return count"
"Create a program to generate all subsets of a set.input_set = {1, 2, 3}","def all_subsets(input_set):
    res = [[]]
    for ele in input_set:
        res += [i + [ele] for i in res]
    return res"
Generate a Python program to generate the square of a number.,"def square(n):
    return n*n"
Output the first 10 Fibonacci numbers.,0 1 1 2 3 5 8 13 21 34
"Create discrete buckets in a given array using the following algorithm.[2, 3, 6, 7, 8]","def create_buckets(arr):
    buckets = []
    x = arr[0]
    for i in range(1, len(arr)):
        if arr[i] != x + 1:
            buckets.append(arr[i-1])
            x = arr[i]
    buckets.append(arr[-1])
    return buckets

create_buckets([2, 3, 6, 7, 8])
# Output: [2, 3, 6, 8]"
"Fix the following code so it outputs the correct result.def string_formatter(string):
    new_str = string.split()
    return new_str

print(string_formatter('This is a string'))","def string_formatter(string):
    new_str = string.split()
    return ' '.join(new_str)

print(string_formatter('This is a string'))
# Output: This is a string"
"Find the minimum, maximum, and the average of a list of numbers.[1, 2, 3, 4, 5]","min = 1
max = 5
average = 3"
"How would you convert this list of strings to integers in Python?str_list = ['1', '2', '3', '4']","int_list = [int(i) for i in str_list]
# Output: [1, 2, 3, 4]"
"Find the position of an element in an array.arr = [1, 4, 7, 9]
target = 4","def find_index(arr, target):
    for i, num in enumerate(arr):
        if num == target:
            return i

find_index(arr, target)
# Output: 1"
"Debug the following code to print out the result of the polynomial.polynomial equation: f(x) = x³ + 5x - 62
x = 9","""""""
Debug the following code to print out the result of the polynomial.
""""""

def evaluate_polynomial(coefficients, x):
    result = 0
    for i in range(len(coefficients)):
        result += coefficients[i] * (x ** (len(coefficients) - i - 1))
    return result

coefficients = [1, 5, -62]
x = 9

print(evaluate_polynomial(coefficients, x)) # 390"
"Detect and output any phone numbers in the give text.Text: 
Hello, my name is John and my phone number is (123) 456-7890.",(123) 456-7890
"Write a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.Address: 1234 Main Street, San Francisco, CA","""""""
Write a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.
""""""

import requests

def get_top_10_restaurants(address):
    endpoint = 'https://api.yelp.com/v3/businesses/search'
    headers = {'Authorization': 'Bearer your_api_key'} 
    params = {
        'term': 'restaurants',
        'location': address,
        'limit': 10
    }

    response = requests.get(endpoint, headers=headers, params=params)
    data = response.json()['businesses']

    restaurants = []
    for restaurant in data:
        restaurants.append(restaurant['name'])
    return restaurants

if __name__ == '__main__':
    print(get_top_10_restaurants('1234 Main Street, San Francisco, CA'))"
"Write code to print out the numbers up to and including the provided number, starting at 1.number = 10","""""""
Write code to print out the numbers up to and including the provided number, starting at 1.
""""""

def print_numbers_up_to(n):
 for i in range(1, n+1):
 print(i)

if __name__ == '__main__':
 print_numbers_up_to(10)"
Create a Python function to generate a random hex color code.,"import random

def generate_random_hex_color_code():
  hex_code = ""#""
  for i in range(6):
    random_digit = random.choice(""0123456789ABCDEF"")
    hex_code += random_digit
  return hex_code

if __name__ == '__main__':
  print(generate_random_hex_color_code())"
Train a classification model to classify the sentiment of the given sentence.Sentence: I love this new book!,"""""""
Train a classification model to classify the sentiment of the given sentence.
""""""

import numpy as np
import tensorflow as tf

# Create the model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),
    tf.keras.layers.Dense(embedding_dim, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

# Compile the model
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

# Train the model
model.fit(train_input_data, train_labels, epochs=num_epochs)

# Make prediction
pred = model.predict([np.array([sentence])])

# Print prediction result
if pred[0][0] > pred[0][1]:
  print(""Negative sentiment"")
else:
  print(""Positive sentiment"")"
Generate code for a for loop to iterate through the numbers from 0 to n-1.n = 5,"for i in range(0, n):
    print(i)"
"Write code to delete the given key from the given dictionary.Dictionary: 
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
Key: 'd'",my_dict.pop('d')
What is an example of an algorithm for solving Sudoku?,"One example algorithm for solving Sudoku is called 'Backtracking'. This algorithm works by first filling in possible solutions for the empty cells, then using a series of rules to determine the correct answer. The algorithm starts with each cell of the Sudoku and tries different numbers for it until a solution is found. If a solution is not found, it backtracks and tries a different number. This process is repeated until all cells have been filled in with the correct numbers, or there is no solution."
What is a heuristic for solving the traveling salesman problem?,"A heuristic for the traveling salesman problem is to make use of the nearest neighbor algorithm or the brute-force algorithm. The nearest neighbor algorithm works by starting at a random node and visiting its nearest unvisited neighbor, then repeating the process until all nodes have been visited. The brute-force algorithm works by trying all possible combinations of nodes and finding the shortest route that visits all nodes."
"Design an algorithm to find the longest substring with no repeating characters in a given string.""abcabcbb""","def longest_no_repeat(s):
    max_length = 0
    length = 0
    seen = dict() 
    
    for i in range(len(s)):
        if s[i] not in seen:
            length += 1
            seen[s[i]] = i 
        else:
            if length > max_length:
                max_length = length
            length = i - seen[s[i]]
            for j in seen:
                if seen[j] < seen[s[i]]:
                    del seen[j]
            seen[s[i]] = i
  
    if length > max_length:
        max_length = length
  
    return max_length

if __name__ == '__main__':
    s = ""abcabcbb""
    print(longest_no_repeat(s))"
Create a function to calculate the network's throughput given a data rate and a size of the packets.Data Rate = 10 Mbps; Packet size = 1000 bits,"def calculate_throughput(data_rate, packet_size):
    return data_rate / (packet_size / 8)  # converting bits to bytes

if __name__ == '__main__':
    data_rate = 10 # Mbps
    packet_size = 1000 # bits
    throughput = calculate_throughput(data_rate, packet_size)
    print(throughput) # 125000.0"
Print “Hello World” using the print() function.,"print(""Hello World"")"
"Create a function that takes in two strings and returns the number of times the first string is found within the second string.string1 = ""ab""
string2 = ""abcabcabc""","def count_substring(string1, string2):
  count = 0
  for i in range(len(string2)-len(string1)+1):
    if string2[i:i+len(string1)] == string1:
      count += 1
  return count"
"Create an algorithm to sort the given list of integers.[5, 7, 2, 4, 9]","def sort(lst):
    for i in range(len(lst)):
        min_index = i
        for j in range(i+1, len(lst)):
            if lst[j] < lst[min_index]:
                min_index = j
        lst[i], lst[min_index] = lst[min_index], lst[i]
    return lst"
"Using any programming language, write a program which takes a number as an input and outputs the first two prime numbers after it.7","def find_next_prime_numbers(num):
    """"""This function takes a number as an input
    and returns the first two prime numbers after it""""""
    prime_numbers = []
    # Increment num to the first prime number
    while not is_prime(num):
        num += 1
    # Append num to prime_numbers (first prime after input)
    prime_numbers.append(num)
    # Increment num to the second prime number
    num += 1
    while not is_prime(num):
        num += 1
    # Append num to prime_numbers (second prime after input)
    prime_numbers.append(num)
    # Return the list of prime numbers
    return prime_numbers

def is_prime(num): 
    """"""Returns True if number is prime""""""
    if num <= 1: 
        return False
    for i in range(2, num): 
        if num % i == 0: 
            return False  
    return True

print(find_next_prime_numbers(7)) # Output: [11, 13]"
"Replace the following comma-separated values with tabs.boats,cars,planes",boats\tcars\tplanes
"Design a function in Python which takes a list of characters and returns the frequency of each character as a dictionary.[""a"", ""b"", ""c"", ""a"", ""a"", ""b"", ""d""]","def character_frequency(lst):
    """"""Function to count the frequency of each character in a list""""""
    frequencies = {}
    for c in lst:
        if c in frequencies:
            frequencies[c] += 1
        else:
            frequencies[c] = 1
    return frequencies

print(character_frequency([""a"", ""b"", ""c"", ""a"", ""a"", ""b"", ""d""]))
# Output: {'a': 3, 'b': 2, 'c': 1, 'd': 1}"
"Create a program which takes a string and replaces all instances of the letter ""e"" with ""X"".""Hello world""","def replace_e_with_x(s):
    """"""Function to replace all instances of the letter ""e"" with ""X""""""
    return s.replace('e', 'X')

print(replace_e_with_x(""Hello world"")) # Output: ""HXllo world"""
"Modify the following array to output the sum of the second and third items in the array.const array = [1, 2, 3, 4];","const array = [1, 2, 3, 4];
const sum = array[1] + array[2];
console.log(sum); // 5"
Write a function to check if an integer is a multiple of another integer.,"def is_multiple_of(num, multiple):
    if num % multiple == 0:
        return True
    return False"
"Write an R program to check if an array is in ascending order.x <- c(2, 4, 8, 10, 15)","is_ascending <- function(x) {
    sorted_x <- sort(x)
    if (sorted_x == x) {
        return TRUE
    }
    else {
        return FALSE
    }
}"
"Determine what header is needed for the following function.def split_list(a_list):
    mid_point = int(len(a_list) / 2)
    first_half = a_list[:mid_point]
    second_half = a_list[mid_point:]
    return first_half, second_half","import math
def split_list(a_list):
    mid_point = int(math.floor(len(a_list) / 2))
    first_half = a_list[:mid_point]
    second_half = a_list[mid_point:]
    return first_half, second_half"
Express the following in a for loopPrint the squares of all the numbers from 1 to 10,"for i in range(1, 11):
    print(i**2)"
Write a function which takes a number and returns the Fibonacci sequence up to that number.n = 10,"def fibonacci(n):
    fib_list = [1]
    if n == 1:
        return fib_list
    else:
        fib_list.append(1)
        while len(fib_list) < n:
            fib_list.append(fib_list[-1] + fib_list[-2])
        return fib_list"
"Develop a program to remove an element from a list at the specified index.my_list = [4, 5, 6, 7]
index = 2","def remove_at_index(my_list, index):
    del my_list[index]
    return my_list"
"Create a function which swaps the values of two list elements at a specific index.my_list = [1, 2, 3] 
index1 = 0
index2 = 2","def swap_elements(my_list, index1, index2):
    my_list[index1], my_list[index2] = my_list[index2], my_list[index1]
    return my_list"
"Create an algorithm to determine the maximum element in a given list.my_list = [3, 6, 4, 1]","def find_max(my_list):
    max_num = 0
    for num in my_list:
        if num > max_num:
            max_num = num
    return max_num"
"Generate a program to perform string formatting on a given string.my_string = ""Hello, World!""","def string_format(my_string):
    my_string = my_string.lower()
    my_string = my_string.capitalize()
    return my_string"
"Develop a function which returns the position of a given element in a list.my_list = [1, 2, 3, 4]
element = 3","def find_index(my_list, element):
    for i in range(len(my_list)):
        if my_list[i] == element:
            return i"
Create a program to return all the prime numbers under the nth number.n = 10,"def find_primes(n):
    primes = []
    for num in range(2, n + 1):
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            primes.append(num)
    return primes"
How would you create a function to calculate factorial of a given number in Python?,"def factorial(n):
    if n == 0: 
        return 1
    return n * factorial(n-1)"
"Delete all comments that start with the string '#' from the given text.The following program writes ""Hello World!"" to the screen. # This is a comment","The following program writes ""Hello World!"" to the screen."
What is the best way to format a large number such that it is easy to read?,"The best way to format a large number is to add separator characters such as comma, underscore, period or space. This makes it easier to read and understand the large number."
Create a function to raise a given number to the Nth power.,"def power(n, x):
    if x == 0:
        return 1
    return n * power(n, x-1)"
Print the number of days in the month of January 2021.,31 days.
Create a program to output the squares of all numbers between 1 and 100.,"for i in range(1, 101):
    print(i**2)"
How do you set up a yaml list with a specific size?,"You can set up a yaml list with a specific size by declaring the list and adding the required number of elements to it, like so:

my_list:
- Element 1
- Element 2
- Element 3
- Element 4"
"Generate prime numbers between two given numbersstart = 8 
end = 20","The prime numbers between 8 and 20 are

11, 13, 17, 19"
"Split a list into two partsmylist = [1, 2, 3, 4, 5, 6]","The two parts of the list will be [1, 2, 3, 4] and [5, 6]."
"Extend the following code to ensure that the array of numbers is sorted using insertion sort.arr = [9, 5, 7, 3]","def insertionSort(arr): 
    for i in range(1, len(arr)): 
        temp = arr[i] 
        j = i - 1
        while j >= 0 and temp < arr[j]: 
            arr[j + 1] = arr[j] 
            j -= 1
        arr[j + 1] = temp"
"Debug the following code snippet in Python to find the maximum number accross a list of integers.lst = [-1, 5, 10, 0, -9]","def find_maximum(lst):
  max_value = float('-inf')
  for i in lst:
    if i > max_value:
      max_value = i
  return max_value

print(find_maximum(lst))"
Create a regex expression in Python that finds all numbers from 1 to 100 inclusive.,"import re

regex = re.compile('[1-9]|[1-9][0-9]|100')"
Create a regex expression that matches all strings with four alphabetic characters.,^[a-zA-Z]{4}$
Create a function to find the sum of the squares of all natural numbers up to a certain number.n = 10,"def sumOfSquares(n): 
    sum = 0
    for i in range(1, n+1): 
        sum += i*i
    return sum"
Train a model in PyTorch to classify the following dataset into 4 classes.,"import torch

# Load the dataset
train_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))

# Build the model
model = torch.nn.Sequential(
    torch.nn.Linear(7, 15), 
    torch.nn.ReLU(), 
    torch.nn.Linear(15, 4), 
    torch.nn.Softmax()
)

# Compile the model
criterion = torch.nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Train the model
model.train()
for epoch in range(10):
    loss = 0
    for data, target in train_loader:
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss += criterion(output, target).item()
        loss.backward()
        optimizer.step()
    
    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')"
Delete all duplicated characters in a string.String: abcabcabc,abc
What is Naive Bayes classification?,"Naive Bayes classification is a supervised machine learning technique used for classification tasks which is based on the Bayes Theorem. It assumes that each input feature is independent of each other, which is called the assumption of ""naive"" Bayes. The algorithm uses prior knowledge of the data set and determines the probability of each class, given the data. Based on these probabilities it then assigns a class to the input, using a decision rule (usually the maximum a posteriori likelihood), to maximize the overall accuracy of the model."
Write a code snippet to print a right aligned triangle of asterisks.Length: 5,"*
**
***
****
*****"
What is the significance of a long identifier name in programming?,"A long identifier name is important for programming as it clearly and accurately describes the purpose of the identifier. It is easier for another programmer to understand what a specific code does if the identifier names are descriptive of their purpose. Long and descriptive names also make the code more organized and help to preserve the syntax. In addition, it allows for better debugging and easier maintenance in the long run."
How can a programmer optimize a code to improve its performance?,"A programmer can optimize a code to improve its performance by using techniques like loop optimization, code refactoring, resource optimization, cache optimization, and parallel computing. Loop optimization involves reducing the number of iterations in loops, using variables instead of literals, removing redundant loops, debugging errors, and choosing the most efficient looping techniques. Code refactoring involves restructuring the code to make it more concise, readable, and maintainable. Resource optimization involves using efficient data structures, such as hash tables and balanced trees, to reduce computational resources as well as using optimized algorithms. Cache optimization involves designing well-crafted caches to store frequently accessed data, while parallel computing allows multiple tasks to be completed simultaneously on different CPU cores."
What is the purpose of using an exception handler?,"The purpose of an exception handler is to catch and handle any unexpected errors that may occur while code is executing. It is a code block which is used to detect and handle runtime errors when they occur. This allows the code to immediately handle the error, thus avoiding a crash and providing the user with meaningful feedback."
How does debugging help a programmer?,"Debugging helps a programmer by identifying the source of errors or bugs in the program. Through debugging, a programmer can pinpoint exactly where the issue is, rather than having to spend time searching through lines of code trying to find the problem. Debugging also allows a programmer to make well-informed decisions when trying to resolve the issue. By understanding the issue in detail and being able to trace the code line by line, the programmer can better assess which possible solutions will be most effective."
"Build a function to convert an adjacency matrix into an adjacency list.A = 
[[0, 1, 0, 0], 
 [1, 0, 1, 1], 
 [0, 1, 0, 0], 
 [0, 1, 0, 0]]","def adjacency_matrix_to_list(A):
    """"""
    Convert an adjacency matrix to an adjacency list
    
    Parameters
    ----------
    A: 2D list representing an adjacency matrix
    
    Returns
    -------
    adj_list: Adjacency list
    """"""
    n = len(A)
    adj_list = [[] for i in range(n)]
        
    for i in range(n):
        for j in range(n):
            if A[i][j] == 1:
                adj_list[i].append(j)
                
    return adj_list"
Write a Regular Expression to match any line with vowels followed by numbers,\w[aeiouAEIOU]\d+
"Find the number of unique subsets of a given setgiven_set = {1, 2, 3}","def unique_subsets_count(given_set): 
    """"""
    Find the number of unique subsets of a given set
    
    Parameters
    ----------
    given_set: Set of elements
    
    Returns
    -------
    count: Number of unique subsets
    """"""
             
    count = 1 << len(given_set)
    
    return count"
"Parse the given XML document.<?xml version=""1.0"" encoding=""UTF-8""?>
<bookstore>
    <book>
    <title>A Game of Thrones</title>
    <author>George R. R. Martin</author>
    <price>9.99</price>
    </book>
    <book>
    <title>A Clash of Kings</title>
    <author>George R. R. Martin</author>
    <price>12.99</price>
    </book>
</bookstore>","#import the required modules 
import xml.etree.ElementTree as ET 
  
# parse the given xml document 
tree = ET.parse('document.xml') 
root = tree.getroot() 
  
# iterate over all the elements in the document 
for book in root.findall('book'): 
    title = book.find('title').text 
    author = book.find('author').text 
    price = book.find('price').text 
  
    # print the element and its attribute 
    print('Title:', title, ', Author:', author, ', Price:', price)"
"Generate a bar chart in R using the given dataset.Number of Movies Watched in the Last 6 Months
Month 	Number
January 	5
February	7
March	9
April	8
May	12
June	11","# install packages 
install.packages(""ggplot2"")
  
# import required libraries 
library(ggplot2) 
  
# data 
movies <- c(5, 7, 9, 8, 12, 11)
months <- c(""January"", ""February"", ""March"", ""April"", ""May"", ""June"")
  
# create dataframe object 
data <- data.frame(months, movies) 
  
# plot 
ggplot(data, aes(x = months, y = movies)) + 
    geom_bar(stat = ""identity"", fill = ""#0066FF"")"
Write code to find the powers of two in a given range.Range:  0 to 20,"def powers_of_two(start, end):
    powers = []
    current_power = 1
    while current_power < end:
        if current_power >= start: 
            powers.append(current_power)
        current_power *= 2
    return powers"
Design a class for a grocery store inventory management system.,"class GroceryInventory:
    def __init__(self):
        self.inventory = {}

    def add_item(self, item, quantity):
        if item not in self.inventory:
            self.inventory[item] = quantity
        else:
            self.inventory[item] += quantity
            
    def remove_item(self, item, quantity):
        if item in self.inventory:
            self.inventory[item] -= quantity
            if self.inventory[item] <= 0:
                del self.inventory[item]
    
    def get_inventory(self):
        return self.inventory"
"Write a function that returns the number of times an element appears in a sorted array.Array = [3, 8, 10, 10, 10, 13, 15]
Element = 10","def get_count(arr, element):
    left_index = bisect.bisect_left(arr, element) 
    right_index = bisect.bisect_right(arr, element)
    return right_index - left_index"
"Given two strings, find the minimum number of operations required to convert one string to the other.String 1 = ""horse""
String 2 = ""ros""","def find_edit_distance(str1, str2):
    len_str1 = len(str1)
    len_str2 = len(str2)

    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]
    for i in range(len_str1+1):
        matrix[i][0] = i
    for j in range(len_str2+1):
        matrix[0][j] = j

    for i in range(1, len_str1+1):
        for j in range(1, len_str2+1):
            if str1[i-1] == str2[j-1]:
                matrix[i][j] = matrix[i-1][j-1]
            else:
                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)

    return matrix[len_str1][len_str2]"
"Implement a function to perform in-place array rotation.arr = [1, 2, 3, 4, 5]
rotation = 2","def rotate_in_place(arr, rotation):
    rotation %= len(arr)
    
    start = 0
    count = 0
    while count < len(arr):
        current_index = start
        current_value = arr[start]
        next_index = (current_index + rotation) % len(arr)
        while next_index != start:
            next_value = arr[next_index]
            arr[next_index] = current_value
            current_index = next_index
            current_value = next_value
            next_index = (current_index + rotation) % len(arr)
            count += 1
        arr[start] = current_value
        start += 1
        count += 1"
"Given an array of numbers, find the longest increasing sequence in the array.Array = [2, 3, 5, 4, 7, 9, 6, 8]","def longest_increasing_sequence(arr):
    lengths = [1]*len(arr)
    
    for i in range(1, len(arr)):
        for j in range(i):
            if arr[i] > arr[j]:
                lengths[i] = max(lengths[i], lengths[j] + 1)
    
    max_length_index = 0
    for i in range(len(lengths)):
        if lengths[i] > lengths[max_length_index]:
            max_length_index = i
    
    current_index = max_length_index
    sequence = [arr[max_length_index]]
    for i in range(max_length_index-1, -1, -1):
        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:
            sequence.append(arr[i])
            current_index = i
    sequence.reverse()
    return sequence"
"Write a function that takes two strings and determines if the first string is one character away from the second string.String 1 = ""cat"", String 2 = ""cot""","def oneAway(str1, str2): 
    len1 = len(str1) 
    len2 = len(str2) 
    if abs(len1 - len2) > 1: 
        return False
    i = 0
    j = 0 
    count = 0 
    while i < len1 and j < len2: 
        if str1[i] != str2[j]: 
            if count == 1: 
                return False
            count = 1
            if len1 > len2: 
                i += 1
            elif len1 < len2: 
                j += 1 
            else: 
                i +=1
                j += 1 
        else: 
            i += 1
            j += 1
    if i < len1 or j < len2: 
        count += 1 
    return count == 1"
Create a while loop in Python to increment a counter by 1 until it reaches 10.counter = 0,"while counter < 10:
    counter += 1"
"Assign the variable ""age"" with the value 18.",int age = 18;
"Suppose a set of n numbers and write a program to calculate the medianint[] numbers = {3,7,5,14,15,17};","int n = numbers.length;

if (n % 2 == 0) {
    // if n is even
    int m = n/2;
    double median = (numbers[m-1] + numbers[m]) / 2.0
} else {
    // if n is odd
    int m = (n+1) / 2;
    double median = numbers[m-1];
}"
How would you test a Turing machine?,"A Turing machine can be tested by providing sample inputs that cover various cases and examining the output. An ideal test would consist of input strings that cover all possible scenarios, such as inputs with no computation, inputs with long computations, inputs that flip a single bit, etc. Additionally, Turing machine implementations should be tested for edge cases, such as providing inputs with invalid syntax or supplying an input of exceptional size."
Construct an algorithm to detect a cycle in a linked list,"A cycle can be detected in a linked list using the Floyd's Algorithm. This algorithm works by using two pointers; a slow pointer and a fast pointer. The slow pointer moves one node of the list at a time, while the fast pointer moves two nodes at a time. If the two pointers point to the same node, then a cycle exists in the list."
"Create a function that takes an array of integers and prints out their product.array = [1,2,3,4,5]","def product(arr): 
    product = 1
    for x in arr: 
        product *= x 
    return product 
  
# Driver Code 
array = [1,2,3,4,5]
print(product(array))"
"Write a function to determine the largest integer in an unordered array.array = [6, 8, 1, 3, 4]","def largest_int(arr): 
    largest_int = arr[0] 
    for i in range(1, len(arr)): 
        if arr[i] > largest_int: 
            largest_int = arr[i] 
    return largest_int 
  
# Driver Code
array = [6, 8, 1, 3, 4]
print(largest_int(array))"
Write a code to generate a random password using random library of Python.length = 8,"import string 
import random 

def generate_password(length): 
    # Generate a random string of characters 
    letters = string.ascii_letters + string.digits 
    password = ''.join(random.choice(letters) for i in range(length)) 
  
    return password
  
# Driver Code
length = 8
print(generate_password(length))"
"Build a program to print the frequency of characters in an input string.input_string = ""abcabcabcabc""","def frequency_chart(input_string): 
    # Dictionary to store character frequency 
    freq = {} 
  
    # Loop over the input string 
    for char in input_string: 
        if char in freq: 
            freq[char] += 1
        else: 
            freq[char] = 1
  
    return freq 
  
# Driver Code 
input_string = ""abcabcabcabc""
print(frequency_chart(input_string))"
"Write a function to get a string made of the first and last two characters of a given string.input_string = ""spring""","def string_two_characters(input_string): 
    # Get the length of the string 
    n = len(input_string) 
  
    # Return the string which is made of the first and last two characters 
    return input_string[0:2] + input_string[n-2:n] 
  
# Driver Code 
input_string = ""spring""
print(string_two_characters(input_string))"
Return the maximum number of 256-bit numbers that fit in a 1GB RAM.,The maximum number of 256-bit numbers that fit in a 1GB RAM is 134217728.
"Convert a string to its corresponding integer value.String: ""123""","def string_to_int(s):
    res = 0
    for char in s:
        res = res * 10 + int(char)
    return res"
"Remove all duplicates from an array.[1, 1, 2, 3, 4, 5, 3, 4]","def remove_duplicates(arr):
    res = []
    seen = set()
    for element in arr:
        if element not in seen:
            res.append(element)
            seen.add(element)
    return res"
Create a new vector of size 5 filled with zeros.,"vec = [ 0., 0., 0., 0., 0. ]"
Implement the Euclidean distance formula using a def function in Python.,"def euclidean_dist(x, y):
    # write function here
    dist = 0
    # iterate through each coordinate of the points
    for i in range(len(x)):
        # calculate the distance between corresponding coordinates
        dist += (x[i]-y[i])**2
    return (dist**0.5)"
"Create a switch statement that prints ""Yay!"" if input is 1 and ""Nay!"" if input is 2.","switch(input){
  case 1:
    console.log(""Yay!"");
    break;
  case 2:
    console.log(""Nay!"");
    break;
  default:
    console.log(""Invalid Input"")
    break;
}"
Write a for loop for printing the first 10 powers of 2.,"for(let i = 0; i <= 10; i++){
  console.log(2**i);
}"
Create a tower of stars made up of 10 lines of increasing star lengths.,"starString = ""*"";
for (let i = 1; i <= 10; i++){
  console.log(starString);
  starString += ""*"";
}"
"Change the background color of all element with the class ""container"" to blue.","document.querySelectorAll("".container"").forEach(function(container){
  container.style.backgroundColor = ""blue"";
});"
"Print out the sum of each row of a given 2 dimensional array.arr = [
  [1, 1, 1],
  [2, 2, 2],
  [3, 3, 3]
]","// Total sum of each row
for(let row of arr){
  let total = 0
  for(let col of row){
    total += col
  }
  console.log(total)
}"
"Using conditional statements, print out whether a given number is odd or even.number = 7","if(number % 2 == 0){
  console.log('`number` is even')
} else {
  console.log('`number` is odd')
}"
Write a function for removing duplicate values from an array.,"function removeDuplicates(arr){
  let result = [];
  arr.forEach(function(element){
    if(!result.includes(element)){
      result.push(element);
    }
  });
  return result;
}"
"Refactor this function to be less complex and more readable.def calculate_price(products):
  total_price=0
  for p in products:
    total_price+=p[0]*p[1]
  return total_price","def calculate_price(products):
  total_price = 0
  for price, quantity in products: 
    total_price += price * quantity
  return total_price"
Write a regular expression to match emails with domain example.com,/[a-zA-Z0-9_\-\.]+@example\.com$/
"Compare the following two strings and print out which one is bigger.str1=""Hello""
str2=""World""","let str1=""Hello"";
let str2=""World"";

if(str1 > str2){
 console.log(str1 + "" is bigger than "" + str2);
}
else{
 console.log(str2 + "" is bigger than "" + str1);
}"
"Given an array of strings, generate an object with the strings as keys and the length of each string as values.let arr = [""Hello"", ""World"", ""Foo"", ""Bar""]","let arr = [""Hello"", ""World"", ""Foo"", ""Bar""];

let obj = {};

for(let i=0; i<arr.length; i++){
 obj[arr[i]] = arr[i].length;
}

console.log(obj); // {Hello: 5, World: 5, Foo: 3, Bar: 3}"
"Update the following code to add a method to retrieve elements from the list.class MyList
  def initialize
    @list = []
  end
end","class MyList
  def initialize
    @list = []
  end

  def get(index)
    @list[index]
  end

end"
"Given an array of numbers, calculate the average.let arr=[5,7,8,9]","let arr=[5,7,8,9];

let sum=0;
for(let i=0; i<arr.length; i++){
 sum+=arr[i];
}
let average=sum/arr.length;

console.log(average); // 7.5"
"Write an algorithm to search for numbers in an array and replace them with their square roots.[1,2,3,4,5]","Function searchAndReplace(nums):
  for i in range(len(nums)):
    if nums[i] >= 0:
      nums[i] = math.sqrt(nums[i])
  return nums"
Identify the correct loop structure to traverse through a list of numbers.,for number in list_of_numbers:
"Create a 2D array with n columns and m rows and fill it with random numbers.Rows: 6, Columns: 8","import random

def create2DArray(row, col):
  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]
  return arr"
Create a stack and add two elements to it.,"class Stack():
  def __init__(self):
    self.items = []
  
  def push(self, item):
    self.items.append(item)
  
  def pop(self):
    return self.items.pop()

stack = Stack()
stack.push(5)
stack.push(7)"
Design a program to detect an infinite loop in a given program.,"def detectInfiniteLoop(program):
  setOfInstructions = set()
  for line in program.split('\n'):
    if line in setOfInstructions:
      return True
    setOfInstructions.add(line)
  return False"
Describe a good object oriented design approach for the following problem statement:Design an application that provides a way for users to store and access their banking records.,"An object oriented design approach for the problem statement would involve the following: creating a base class for the banking records which has properties to store user details and banking information, providing a way to create a savings account and checking account class that can be derived from the base class and a set of methods which can add, delete, update, retrieve and access information from the banking records. Additionally, methods which securely store and access the data should be implemented to ensure the safety of the users' data."
"Acquire the necessary data to apply linear regression on the following problem statementPredict the average property value in a particular city given population density, housing costs and average income.","The necessary data to apply linear regression on the problem statement would include population density, housing costs and average income of the particular city. Additionally, the average property value should also be collected as the target variable to be predicted. The data could be collected from public sources like census websites or through primary data collection methods such as surveys."
Create a Django application to serve an API endpointThe API endpoint should take an ID and return a user's name and age.,"The output would involve creating a Django application with an API view that takes in the ID as the parameter and returns a dictionary containing the user's name and age. The Django application should also include the necessary models and associated functions, a URL configuration, and a core application to be used in the root project directory."
Design an algorithm to help a user navigate through a maze,"A possible algorithm to navigate through a maze could involve a Depth-First search approach. This approach involves finding a vertex within the maze, marking it as visited and then exploring all of its unvisited neighbors. After all of the neighbors are explored, the algorithm continues to explore the closest unvisited neighbor which is found on the same level of depth. This process continues until the user reaches the end of the maze."
Design a data structure for a deck of cards,"A data structure for a deck of cards could involve creating an array of objects or associative arrays, where each object or associative array corresponds to a card in the deck. The object or associative array should include properties such as suit, rank, and value to store information about the card. Additionally, the data structure should also include functions to manipulate the deck such as shuffle, draw, and sort."
Create a Tkinter window with a label that says “Hello World!”,"import tkinter

root = tkinter.Tk()
label = tkinter.Label(root, text=""Hello World!"")
label.pack()
root.mainloop()"
Write a code to generate a random float between -5 and 5.,"import random

random_float = random.uniform(-5, 5)
print(random_float)"
"Write a code to find the most frequently occurring item in the list.[17, 25, 6, 30, 14, 28, 6, 20, 13, 25]","def most_frequent(data):
    freq = {}
    for x in data:
        if x in freq:
            freq[x] += 1
        else:
            freq[x] = 1
    max_freq = 0
    for x in freq.values():
        if x > max_freq:
            max_freq = x
    most_frequent_item = []
    for x in freq.keys():
        if freq[x] == max_freq:
            most_frequent_item.append(x)
    return most_frequent_item

data = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]

print(most_frequent(data))"
Create a class to illustrate the concept of encapsulation in Python.,"class Car:
    def __init__(self, brand, model, year):
        self.__brand = brand
        self.__model = model
        self.__year = year
    
    def get_brand(self):
        return self.__brand
    
    def get_model(self):
        return self.__model
    
    def get_year(self):
        return self.__year"
"Create a function that takes two strings as parameters, compares them, and returns 0 if they are equal, 1 if the first string is greater, and -1 if the second string is greater.","def compare_strings(str1, str2):
    if str1 == str2:
        return 0
    elif str1 > str2:
        return 1
    else:
        return -1"
"Using the given context and dataframe ""df"", write code to select the targets and features.Context: We are building a logistic regression model.

DataFrame ""df"": 
 
Index  | Temp (C) | Humidity  | Rain (mm)  | Rainfall (yes/no)
0      |     15   |    80     |    0       |     No
1      |     16   |    75     |    0       |     No
2      |     17   |    64     |    10      |     Yes","targets = df['Rainfall (yes/no)']
features = df[['Temp (C)', 'Humidity', 'Rain (mm)']]"
"Write code to calculate the cosine similarity between the two given sentencesSentences: ""this is a great day"" and ""this is a superb day""","from sklearn.metrics.pairwise import cosine_similarity
sentence1 = ""this is a great day""
sentence2 = ""this is a superb day""
vector1 = sentence1.split()
vector2 = sentence2.split()
cos_sim = cosine_similarity([vector1], [vector2])
print(cos_sim[0][0])"
"Using ""dictionary"" as the input, write code to print out the frequency of the words in the dictionary.dictionary = {'apple':2, 'banana':3, 'cherry':1}","for key, value in dictionary.items():
    print(""The frequency of {} is {}"".format(key, value))"
"What is the value of ""c"" after the code is executed?a = 10
b = 20
c = a + b",30.
"Sort the list in Ascending order of the second element of each element in the list.list = [(-5, 2), (1, 0), (1, 3), (3, 4), (-3, -9), (-10, -2)]","sorted_list = sorted(list, key=lambda x: x[1])
print(sorted_list)

# Output: [(-3, -9), (1, 0), (-10, -2), (-5, 2), (1, 3), (3, 4)]"
What is the data type of the given expression?expression = 10 + 20,Integer.
"Using the given code, extract the year from the given dateTime object.import datetime 
  
dateTime = datetime.date.today()","year = dateTime.year
print(year)

# Output: 2021"
How do you develop a software application through agile?,"Developing a software application through agile is a process that systematically focuses on small, incremental changes that are then tested on a regular basis to ensure their effectiveness. This type of development conflicts with traditional linear development approaches that focus on big, planned and predetermined changes. Agile development cycles include iterative sprints and frequent collaboration between stakeholders to ensure the project is proceeding in the right direction. In agile, software development proceeds in a cyclic and iterative manner, which involves planning, designing, coding, and testing. During the sprints, stakeholders review and discuss software progress to ensure continued progress is being made and to help with decision making. Agile development typically involves using automated tools and technologies such as configuration management software and integrated development environments to facilitate quicker development cycles."
How is AI used in finance?,"AI is being increasingly used in finance to improve the accuracy and speed of processes, make better-informed decisions, and streamline customer service. Financial institutions use AI to automate and speed up operations such as accounts payable and receivable, loans underwriting, money management, fraud detection, and decision-making in stock markets. AI can also be used to help manage large amounts of data and detect patterns in the data. For example, AI can be used to perform sentiment analysis on large amounts of customer data or to detect potential fraudulent activity. It can also provide insights into customer behavior and preferences that can be used to personalize services and create targeted product offerings."
"Create an array with the following numbers: 3,2,4,5,8.","let myArray = [3, 2, 4, 5, 8];"
How can you use recurrent neural networks for sequence prediction?,"Recurrent neural networks (RNNs) can be used for sequence prediction tasks. RNNs are powerful models that are able to capture patterns from sequences of data and can remember information from previous inputs. The network is comprised of layers and nodes, and each layer contains nodes that are connected to the previous layer. When a sequence is fed into the network, the nodes of the first layer are activated based on the input. The output of the first layer serves as the input for the next layer, and so on. As the sequence progresses, the internal state of the network is updated and used to make predictions. The output of the RNN is then a prediction of the next element in the sequence."
"Design a memory efficient algorithm for a given problem.Given a list of integers, find the average of all the elements.","def find_average(nums):
    length = len(nums)
    total = 0
    
    for i in range(length):
        total += nums[i]
        
    return total / length"
How would you code a basic spell-checker,"def spell_checker(input_text):
    correct_words = []
    wrong_words = []
    
    for word in input_text.split():
        if is_correct(word):
            correct_words.append(word)
        else:
            wrong_words.append(word)
            
    return correct_words, wrong_words

# where is_correct() is an appropriate function to determine if the word is spelled correctly or not"
What data structure would you use to store a matrix in Python,The best data structure to store a matrix in Python is a two-dimensional list. A two-dimensional list is a list of lists where each sub-list represents a row in the matrix. This makes it easy to access and modify values in the matrix.
Find the angle between two given vectors,"The angle between two vectors can be found using the following formula: theta = arccos(v1.v2 / (||v1||*||v2||)), where v1 and v2 represent the two given vectors and ||v1|| and ||v2|| are the magnitudes of the vectors."
Sort a given array of integers using Quick Sort,"def quickSort(arr): 
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quickSort(left) + middle + quickSort(right)"
What is the difference between static binding and dynamic binding,"Static binding is the process of linking a procedure call to the code to be executed during compile-time. This link is done by compiler at the compile-time and is fixed for the life of the program. On the other hand, dynamic binding is the process of linking a procedure call to the code to be executed during run-time. This link is done by the program at the run-time and can be changed during the life of the program."
"Alter the following given code so that it will implement the Bubble Sort Algorithmdef mySort(arr): 
	n = len(arr) 

	for i in range(n-1): 
		for j in range(0, n-i-1): 
			if arr[j] > arr[j+1] : 
				arr[j], arr[j+1] = arr[j+1], arr[j]","def bubbleSort(arr):
    n = len(arr) 

    for i in range(n): 
  
        for j in range(0, n-i-1): 
  
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]"
"Read in a string of comma-separated integers and create an array of the integers.""1,2,3,4,5""","int[] arr = {1,2,3,4,5};"
"Create a virtual environment in Python using the ""virtualenv"" tool.","python -m pip install virtualenv
virtualenv envname
source envname/bin/activate"
Write a function that takes in a max number and returns the sum of all numbers between 0 and the max number.10,"def sumFromZeroToMax(n):
  sum = 0
  for x in range(n+1):
    sum += x
  return sum

print(sumFromZeroToMax(10))"
"Fix the logic of the function to print out the element in the array.let nums = [1, 2, 3, 4];","let nums = [1, 2, 3, 4];

function printArrElement(arr){
    for(let i = 0; i < arr.length; i++){
        console.log(arr[i]);
    } 
}

printArrElement(nums);"
Make an API call to get the current weather in a given city.,"import requests

api_key = ""<Enter API key here>""
city = ""London""
url = ""http://api.openweathermap.org/data/2.5/weather?q={}&appid={}"".format(city, api_key)

res = requests.get(url)
data = res.json()
 
print(""Current temperature in {} is {}°F"".format(city, data[""main""][""temp""]-273.15 * 9/5 + 32))"
"Write code to calculate the total number of votes for a candidate in an election.candidates = [""AJ Bascombe"", ""Maya Mathews"", ""Toby White""]
votes = [2000, 4000, 3000]","total_votes = 0
for candidate in range(len(candidates)):
 total_votes+=votes[candidate]
print(total_votes)"
"Write a statement to print a formatted string.Name: Joe
Age: 31","print(""My name is {}, and I'm {} years old."".format(""Joe"",31))"
"Implement a simple search engine using recursion.query = ""computer""
data = [""mobile"",""computer"",""laptop"",""tablet""]","def search(query, data):
  # base case
  if len(data) == 0:
    return False
  # recursive step
  else:
    if data[0] == query:
      return True
    else:
      return search(query, data[1:])

query = ""computer""
data = [""mobile"",""computer"",""laptop"",""tablet""]

print(search(query, data))"
"Edit the given list to only include even numbers.list = [2,3,4,5,6,7,8]","for i in list:
  if i % 2 != 0:
    list.remove(i)

print(list)"
"Edit this code to print out the square of a given number, using '#' as a marker.num = 8","num = 8 
#
#
#
#
#
#
#
# # # # # # # # # #"
Write a code snippet to find all the Pythagorean triplets which sum up to the given number.,"def find_triplet(n):
    """"""
    @brief: Finds all Pythagorean triplets which sum upto the given number n
    @param n: the sum which is the given number 
    @return: a list of all Pythagorean triplets which might sum upto n, or an empty list if none are found
    """"""
    triplets = []
    for a in range(1, n):
        for b in range(a + 1, n - a):
            c = int(n - a - b)
            if (a*a) + (b*b) == (c*c):
                triplets.append((a, b, c))
    return triplets"
Design a program to find all prime numbers up to a given limit n.,"def find_primes(limit):
    """"""
    @brief: Finds all prime numbers up to a given limit n
    @param limit: the upper limit to find prime numbers
    @return: a list of all prime numbers found
    """"""
    primes = []
    for n in range(2, limit + 1):
        is_prime = True
        for prime in primes:
            if n % prime == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(n)
    return primes"
"Modify the following code to swap the values of two variables without using a third variable.a = 5
b = 3","a = 5
b = 3

a, b = b, a"
Write a code snippet to determine the number of odd numbers in a given array.,"def count_odds(arr):
    """"""
    @brief: Counts the number of odd numbers in a given array
    @param arr: array whose odd numbers are to be counted
    @return: the number of odd numbers in the given array
    """"""
    count = 0
    for num in arr:
        if num % 2 == 1:
            count += 1
    return count"
"Given a list of integers and a target value, calculate two integers in the list that add up to the target value.target = 6
list = [1, 2, 3, 4, 5]","(1, 5)"
Create an array in Python that contains five different values.,"arr = [1, 2, 3, 4, 5]"
Write a SELECT query to identify the names of authors who have published books with the topic ‘Artificial Intelligence’.,SELECT name FROM Author WHERE topic = 'Artificial Intelligence';
"Create a bar chart in Python, plotting the following integer data set.[1, 2, 4, 8, 16, 32]","import matplotlib.pyplot as plt
 
data_set = [1, 2, 4, 8, 16, 32]
 
plt.bar(range(len(data_set)), data_set)
plt.show()"
Create a python script to determine whether a number is odd or even.15,"number = 15 
if (number % 2 == 0): 
    print(""even"") 
else: 
    print(""odd"")"
"Convert the following array of strings to a set of tuples in Python.['Python', 'Java', 'JavaScript']","arr =  ['Python', 'Java', 'JavaScript']
arr_tuple = tuple(arr)
print(arr_tuple)"
"From the given data set, calculate the mean and print it out.[1, 2, 3, 4, 5]","data_set = [1, 2, 3, 4, 5]
mean = sum(data_set) / len(data_set)
print(""The mean is {}"".format(mean))"
Make a prediction using the following machine learning model in Python.,"svm_model = SVC()
svm_model.fit(X_train, y_train)
predictions = svm_model.predict(X_test)"
Write a regex pattern to check if the given string is a US phone number.,"regex = r""^\(?[2-9]{3}\)?[-. ]?[2-9]{3}[-. ]?[0-9]{4}$"""
Create a random list of 10 numbers in the range of -10 to 10 in Python.,"import random
 
random_list = [random.randint(-10, 10) for i in range(10)] 
print(random_list)"
"Scan the given array and find the second largest number.[13, 54, 78, 54, 3, 87]",78
Write an Apache VTL code to check if the user is logged in or not.,"#if(${user.loggedIn})
  You are logged in.
#else
  You are not logged in.
#end"
"What is the argument type of the function ""len()"" in Python?","The argument type of the function ""len()"" in Python is an object."
"Modify the code below to create a new function called ""addSquares()"" that adds the squares of two numbers and returns the result.def add(x, y):
   return x + y","def add(x, y):
   return x + y

def addSquares(x, y):
   return x*x + y*y"
"Create a function to register a new user using a given username, email and password.username: angelina 
email: angelina@example.com
password: abc12345","""""""
Function register: Registers a new user using a given username, email and password
""""""

def register(username, email, password):
    # initialize user database
    user_db = {}
    # add user info to database
    user_db[username] = {
        'email': email,
        'password': password
    }
    # return user database
    return user_db

if __name__ == '__main__':
    username = 'angelina'
    email = 'angelina@example.com'
    password = 'abc12345'
    print(register(username, email, password))"
"Compute the maximum amount of money X which can be obtained using two given coins of denomination A and B.A = 5 
B = 7
X = 31","""""""
Function max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.
""""""

def max_money(A, B, X):
    max_A = X // A # maximum coins A can be used
    max_B = X // B # maximum coins B can be used
    
    # Try all possible combinations between coins of A and B
    max_money = 0
    for a in range(max_A + 1):
        for b in range(max_B + 1):
            money = a * A + b * B
            if money <= X:
                max_money = max(max_money, money)
  
    return max_money

if __name__ == '__main__':
    A = 5
    B = 7
    X = 31
    print(max_money(A, B, X))"
Classify the given news title into two categories: Positive andNegativeThe stock market bounces back,Positive.
"Create a function to group a given set of numbers into a continuous rangeSet of numbers: [1, 3, 4, 6, 7, 8, 10]","""""""
Function group_numbers: Groups a given set of numbers into a continuous range.
""""""

def group_numbers(nums):
    # Initialize left and right pointers
    l = 0
    r = 1
    # Initialize ranges list
    ranges = []
    
    while r < len(nums):
        # If the end of the range is not same as the 
        # start of the next range, append the current range 
        if nums[r - 1] + 1 != nums[r]:
            ranges.append(str(nums[l]) + ""->"" + str(nums[r - 1]))
            l = r

        r += 1

    # Append the last range
    ranges.append(str(nums[l]) + '->' + str(nums[r - 1]))

    return ranges

if __name__ == '__main__':
    nums = [1, 3, 4, 6, 7, 8, 10]
    print(group_numbers(nums))"
Write a MongoDB query to find documents where a given field contains a substring.,"db.collection.find({$where: ""return this.field.includes('substring')""})"
Create classes and interfaces to represent an online news system.,"class NewsSystem {
    public string title;
    public string content;
    
    public NewsSystem(string title, string content) {
        this.title = title;
        this.content = content;
    }
}

interface INewsActions {
    void PostNewArticle(NewsSystem article);
    void EditArticle(NewsSystem article);
    void DeleteArticle(NewsSystem article);
}"
"Design a data structure that will store name, phone number and address of a person.","class PersonData {
    String name;
    String phoneNumber;
    String address;

    PersonData(String name, String phoneNumber, String address) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.address = address;
    }
}"
Convert this ES6 code to ES5.let newList = myList.map(num => num * 2),"var newList = myList.map(function(num) {
    return num * 2;
});"
Create a function that converts an arbitrary number from any base between 2 and 16 to its decimal representation.int value = 0xFE;,"public static int ConvertToDecimal (int value, int base) 
{ 
    int decimalValue = 0; 
      
    int i = 0; 
    while (value != 0 && i++ < 8) 
    { 
        int remainder = value % 10; 
        value /= 10; 
          
        decimalValue += remainder * (int)Math.Pow(base, i); 
    }
    return decimalValue;
}"
Describe the purpose of Asynchronous programming.,"Asynchronous programming is a method of concurrent programming in which a unit of work runs separately from the main application thread and notifies the calling thread of its completion, failure or progress. It enables programs to run multiple operations at the same time without blocking other operations. This helps improve the performance of applications by allowing them to do work in parallel."
"Edit the following function to only accept lowercase parameters.def greeting(name):
    print('Hello, ' + name + '!')","def greeting(name):
    name = name.lower()
    print('Hello, ' + name + '!')"
"How can you access the last element of the following Python array?arr = [""A"",""B"",""C"",""D"",""E""]",arr[-1]
How can you check if the given word is a palindrome in Python?,"word = ""madam""

if word == word[::-1]:
  print(""It is a palindrome"")
else:
  print(""It is not a palindrome"")"
Create a data structure to store records of students' attendance.,"struct StudentAttendance
{
    int studentId;  // Unique identifier for each student
    int classId;    // Unique identifier for each class
    int year;       // Year of the class
    string month;   // Month of the class
    int attendance; // Number of attendances
};"
"Read the provided string and print the number of vowels in it.""GPT-3 is an advanced language model""",7
"Create an array of numbers and check if a given number exists in the array. Output true if it exists, output false if it does not.arr = [1,2,3,4,5]
n = 4",true
"You receive an array of numbers as input and you need to calculate the median number.arr = [3, 2, 4, 1, 5]",3.0
"Read the provided code and determine whether it is using object-oriented programming or not. Output true if it is and false if it is not.function displayName(name) {
  console.log(name);
}",false
"You need to write a function that validates a given password. It should only be valid if it contains at least one lowercase letter, one uppercase letter, one number, and one special character.","function validatePassword(password) {
  if(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(password))
  {
      return true;
  }
  else
  {
      return false;
  }

}"
Devise a data structure to store an inventory of items in a store.,"struct StoreInventory {
    char itemName;  //Name of the item
    int itemCode;   //Unique identifier for each item 
    float itemPrice; //Price of the item 
    int itemQuantity; //Quantity of the item 
};"
"Reverse a given array without using a loop.arr = [1,2,3,4]","[4, 3, 2, 1]"
Write a code to generate 1000 random numbers and print the mean of these random numbers.,"# Import the random module
import random

# Generate 1000 random numbers 
random_numbers = [random.randint(1, 1000) for i in range(1000)]

# Calculate mean of the random numbers
mean = sum(random_numbers)/len(random_numbers)

# Print mean of random numbers
print(""The mean of 1000 random numbers is: "", mean)"
Create a code to raise a number to a given power p.2,"# Define the function to raise a number to a given power
def power(x, p):
 
 # The base case is when power is 0 
 if p == 0:
  return 1
  
 # if power is not 0, then recursively call the function power 
 return x * power(x, p-1)

# Get the number
x = 2

# Get the power
p = 3

# Calculate the result
result = power(x, p)

# Print the result
print(""The result is: "", result)"
"Create a code to print the items from a given array in reverse.[1,2,3,4]","# Define the function to print array in reverse
def print_reverse(arr):
 
 # Base case
 if len(arr) == 0 :
  return

 # Print the last value
 print(arr.pop())

 # Recursive call with array - 1 
 return print_reverse(arr)

# Get the array
arr = [1,2,3,4]

# Print the array in reverse
print(""The array in reverse is: "")
print_reverse(arr)"
"Given a two-dimensional array, write a code to print the elements column-wise.[[1, 2], [3, 4], [5, 6]]","# Define a function to print elements column-wise 
def print_columnwise(arr):

 # Get the number of rows and columns
 num_rows = len(arr)
 num_cols = len(arr[0])
 
 # Initialize the columns 
 k = 0

 # Iterate through the rows
 while k < num_cols :
  # Iterate through the columns
  for i in range(num_rows):
   # Print the element
   print(arr[i][k], end="" "")
  
  # Update the column
  k = k + 1
  print()

# Get the array
arr = [[1, 2], [3, 4], [5, 6]]

# Print the elements column-wise 
print_columnwise(arr)"
Change the following text from uppercase to lowercase.MY NAME IS JOHN,my name is john
"Convert the given list of integers to a string of comma separated values.[1, 2, 3, 4, 5]","""1,2,3,4,5"""
"Create a function to find the total number of vowels in a series of strings.string1: ""Hello""
string2: ""World""","public static int countVowels(String... strings) {
    int count = 0;
    
    for (String str : strings) {
        for (char c : str.toCharArray()) {
            switch (c) {
                case 'a':
                case 'e':
                case 'i':
                case 'o':
                case 'u':
                    count++;
            }
        }
    }
    
    return count;
}"
Write an algorithm to calculate the average of a list of integers given as input.,"def average(nums):
    """"""
    Takes a list of numbers and returns the average.
    """"""
    
    total = 0
    for num in nums:
        total += num
    
    return total / len(nums)"
Split the given string into words and remove any words that have less than 4 characters.string = 'This is a test string',"string = 'This is a test string'
words = string.split()
filtered_words = []
for word in words:
    if len(word) >= 4:
        filtered_words.append(word)

print(filtered_words)

# Output:
# ['This', 'test', 'string']"
Write a function that takes in a list of strings and returns True if any of the strings contains the letter `a`.,"def contains_A(strings):
    for string in strings:
        if 'a' in string:
            return True
    return False"
"Write a loop to iterate through the following array and prints each element.arr = [1, 2, 3, 4, 5]","arr = [1, 2, 3, 4, 5];

for (let i = 0; i < arr.length; i++) {
    console.log(arr[i]);
}"
"Filter the array based on the given condition and return a new array of elements that satisfy the condition.arr = [1, 2, 3, 4, 5]","arr = [1, 2, 3, 4, 5];

const filteredArray = arr.filter(item => item % 2 === 0);

console.log(filteredArray);

# Output:
# [2, 4]"
"Create a MongoDB query to find all documents that have an array ""items"" with a field ""name"" equal to ""pen"".","db.collection.find( { ""items"": { $elemMatch: { ""name"": ""pen"" } } } )"
"Refactor the following condition to use the ternary operator instead of an if-else statement.if (x < 0) {
   y = -1;
} else {
   y = 1;
}",y = x < 0 ? -1 : 1;
Design an algorithm to check if a given string can be converted to a palindrome.,"We can use a two pointer approach to traverse the string and compare the leftmost and rightmost characters. If the characters are not equal, then the string cannot be a palindrome. We can move the left pointer one character to the right, and move the right pointer one character to the left, and compare the characters again. We keep repeating this until either the left pointer is equal to the right pointer, or the left and right pointers have crossed each other. If one of the comparisons does not result in equality, then the string cannot be converted to a palindrome. If the left pointer is equal to the right pointer, or if the two pointers have crossed each other, then the string can be converted to a palindrome."
Describe a machine learning algorithm that uses supervised learning.,"One popular supervised machine learning algorithm is the Support Vector Machine (SVM). It uses labelled data points to infer the best decision boundary between different classes. It uses an optimization function to maximize the margin between the support vectors (data points) and the decision boundary. The support vectors are the data points which are the closest to the hyperplane and the decision boundary is the one that best separates the different classes. The SVM could also be tweaked to use different kernels, such as the Gaussian Kernel which is commonly used for non-linear classification."
You are given an array of integers and you need to find the maximum sum of any subarray of the given array.,"The maximum sum of any subarray of a given array of integers can be found with the Kadane's algorithm. This algorithm works by keeping track of the maximum sum seen so far and the current sum running. Whenever the current sum running is negative, the current sum running is reset to 0 and the maximum sum seen is compared with the current sum. Whenever the current sum running is positive, it is added to the maximum sum seen so far. This way, the maximum sum of any subarray of the given array can be found in one pass."
Suggest a way to search for a target element in a binary search tree in less than O(n) time.,"The binary search tree can be traversed in a depth-first manner to search for the target element in a time complexity of O(log n), where n is the number of nodes in the binary search tree. In a depth-first search, the target node is compared with each node in the tree and if it does not match, the left or right subtree is recursively searched depending on whether the target element is smaller or bigger than the current node. This way, the target element can be searched in less than O(n) time."
Design an algorithm to check if two given binary trees are identical.,"We can use a recursive approach to compare two binary trees. We can start by a root node comparison and if the values of the two root nodes are not equal, the trees are not equivalent. Otherwise, we can move on to compare the left subtree and the right subtree of each tree for equality. To do so, we can recursively call the algorithm on the left nodes of each tree and the right nodes of each tree. If at any point, any of the nodes are not equal, the two trees are not identical. If all nodes are equal, the two binary trees are identical."
Design a function in Python to sort a list of tuples based on the first element.,"def sort_list_of_tuples(my_list):
    my_list.sort(key=lambda x: x[0])
    return my_list"
"Format the strings given in the list so that only the first letter of each word is in upper case.[""Hello world"", ""Wonderful DAY""]","[""Hello World"", ""Wonderful Day""]"
"Write a function to sum values stored in a dictonary using for loop.mydict = {‘a’:1, ‘b’:2, ‘c’:3}","def sum_dict_values(mydict):
  ans = 0
  for key,val in mydict.items():
    ans += val
  return ans"
Create an Angular 10 service to fetch data from a remote API and print the results to the console.address: 'www.example.com/api/v1/data'.,"import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable()
export class DataService {
  constructor(private http: HttpClient) {

  }

  async getData() {
    const data = await this.http.get(address).toPromise();
    console.log(data);
  }
}"
Create a Python script to generate random numbers from 1 to 10 in a given range.,"import random

def random_num_gen(start, end):
  
  random_nums = []
  
  for _ in range(start, end + 1):
    random_nums.append(random.randint(1, 10))
  
  return random_nums"
"Create a Python program to extract the URLs from a given list of strings.['https://stackoverflow.com/questions/42063887/how-to-extract-urls-from-a-list-of-strings-in-python',
 'This is an example of a string without a URL']","import re

def extract_urls(strings):
  urls = []
  for s in strings:
    urls += re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)
  return urls"
Check if an integer is a power of two.,"public static boolean isPowerOfTwo(int n) { 
   return (n > 0) && ((n & (n - 1)) == 0); 
}"
"Change the following code to use for-loops instead of while-loops.x = 0
while x < 5:
    print(x) 
    x += 1","for x in range(5):
  print(x)"
"Edit the following code so that it prints out a right triangle of size nint n = 5;
for (int i = 0; i < n; i++) {
  for (int j = 0; j <= i; j++) {
    System.out.print(""*"");
  }
  System.out.println();
}","int n = 5;
for (int i = n; i > 0; i--) {
  for(int j = 0; j < i; j++) {
    System.out.print(""*"");
  }
  System.out.println();
}"
Write a Python program to convert a given binary string to its equivalent hexadecimal representation.,"def bin_to_hex(binary_string):
    dec = int(binary_string, 2)
    hex_string = hex(dec).replace('x', '')
    return hex_string"
"Write Python code to merge two given dictionaries into a single dictionary.Dictionary 1: {'A':1, 'B':2} 
Dictionary 2: {'C':3, 'D':4}","def merge_dicts(dic1, dic2): 
    res = {**dic1, **dic2} 
    return res"
"Find the largest integer in this list?[1, 4, 9, 3, 5]","largest_integer = max([1, 4, 9, 3, 5])
print(largest_integer)  # Output: 9"
Write a Spring Boot Rest Controller to list all products in an online store.,"@RestController
public class ProductController {
 
    @Autowired
    private ProductService productService;
 
    @GetMapping(""/products"")
    public List<Product> getProducts(){
        return productService.listProducts();
    }
}"
"Find all words that start with the letter 'R' in a string.string = ""hello world""","def findAllWordsStartingWith(string,letter):
    words = string.split(' ')
    allWordsStartingWithLetter = [] 
    for word in words:
        if word[0] == letter:
            allWordsStartingWithLetter.append(word)
    return allWordsStartingWithLetter

print(findAllWordsStartingWith('hello world', 'R')) # Output: []"
"Explode a string with a given delimiter.given_str = ""apple,banana,orange""","def explode_string(given_str):
  return given_str.split("","")

given_str = ""apple,banana,orange"" 

exploded_str = explode_string(given_str)
print(exploded_str)
# Output: ['apple', 'banana', 'orange']"
Construct a Python class for a camera object.,"class Camera:
    """"""Class representing a camera""""""
    
    def __init__(self, brand, model):
        """"""""""""
        self.brand = brand 
        self.model = model 
    
    def get_brand(self):
        """"""""""""
        return self.brand
    
    def get_model(self):
        """"""""""""
        return self.model"
"Program a binary search algorithm.data: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
  target: 16","def binary_search(data, target):
    low = 0
    high = len(data) - 1
    
    while low <= high:
        index = (low + high) // 2
        value = data[index]

        if value == target:
            return index

        if target < value:
            high = index - 1
        else:
            low = index + 1

    return -1

data = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
target = 16

index = binary_search(data, target)
if index != -1:
    print(""Target is at index: {}"".format(index))
else: 
    print(""Target not found"")"
"Replace the ""TODO"" comment in this code with logic to calculate the mean of a list of numbers.numbers = [1, 2, 3, 4, 5]
# TODO: calculate the mean","numbers = [1, 2, 3, 4, 5]

# calculate the mean
mean = sum(numbers)/len(numbers)

print('The mean of the list of numbers is {}.'.format(mean))"
"Construct an if-else statement to compare two variables.variable1: 5
  variable2: 10","variable1 = 5
variable2 = 10

if variable1 > variable2:
  print(""variable1 is greater than variable2"")
elif variable1 < variable2:
  print(""variable1 is less than variable2"")
else:
  print(""variable1 is equal to variable2"")"
"Debug the following code and update the list ""result"" accordingly.def foo(nums):
    result = []
    for val in nums:
        val += 2
        result.append(val)
        return result

nums = [1, 2, 3, 4]","def foo(nums):
    result = []
    for val in nums:
        val += 2
        result.append(val)
    return result

nums = [1, 2, 3, 4]

result = foo(nums)"
Consider the formula z=(x1n+x2+x3)(2x2+3x3)? find the value of yx1 = 2; x2 = 4; x3 = 6,y = 28
"Summarize the given codedef sumOfTwo(a, b):
    """"""Returns the sum of two integers.""""""
    c = a + b
    return c",This function takes two integers as input and returns their sum.
"Modify the program to work with any datasetdef sum_values(data):
    """"""Returns the sum of values in the given dataset.""""""
    sum = 0
    # TODO: Your code here
    return sum","def sum_values(data):
    """"""Returns the sum of values in the given dataset.""""""
    sum = 0
    for val in data:
        sum += val
    return sum"
"Output the 5th element in an array[1, 5, 9, 17, 24, 42, 50]",24
"Read the comment in the code and update the code accordingly.def get_multiples(n, limit):
    """"""Return list of n's multiples for all numbers up to limit""""""
    multiples = []
    # TODO: Your code here
    return multiples","def get_multiples(n, limit):
    """"""Return list of n's multiples for all numbers up to limit""""""
    multiples = []
    for i in range(limit + 1):
        if i % n == 0:
            multiples.append(i)  
    return multiples"
"Perform a selection sort on the given array[4, 1, 10, 8, 5]","def selection_sort(arr): 
    for i in range(len(arr)): 
        min_idx = i 
        for j in range(i+1, len(arr)): 
            if arr[min_idx] > arr[j]: 
                min_idx = j        
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

print(selection_sort([4, 1, 10, 8, 5]))"
What will be the ouptut of below operation?print(4 >> 2),1
"Insert the missing code in the function below to sort an array of strings:arr = [""hello"", ""apple"", ""cat""]

def sort_str(arr):
  # Insert code here","def sort_str(arr):
  # Insert code here
  arr.sort()
  return arr"
"Write a Python program to read a list of numbers and print them as a single string without any space.[34, 32, 67, 85]","my_list = [34, 32, 67, 85] 
  
# using join() 
print(''.join(str(n) for n in my_list))"
Create a class to represent a blog post in Python.,"class BlogPost:
    def __init__(self, title, content, author):
        self.title = title
        self.content = content
        self.author = author

    def edit_post(self, new_title, new_content):
        self.title = new_title
        self.content = new_content"
"Create a regex expression to find a date format of ""yyyy-mm-dd"".",\d{4}-\d{2}-\d{2}
Compare and contrast AJAX and XMLHttpRequest.,"AJAX (Asynchronous JavaScript and XML) is a technology that enables web developers to send and receive data asynchronously between the browser and the server without needing to make changes to the existing pages. It works by sending a request to the server using the XMLHttpRequest object, which then processes the request and sends back a response. XMLHttpRequests are used in AJAX, but they can also be used independently of AJAX to send and receive data. The main difference between AJAX and XMLHttpRequest is that AJAX can be used to send and receive multiple requests and responses at once, whereas XMLHttpRequest is limited to one request at a time."
Write a long-running Python script with a while loop?,"while True:
    # perform a long-running task
    pass # or perform an action"
Create a regex expression to match the numbers from 0 to 9.,[0-9]
Create an array of five integers with any values.,"int[] nums = {12, 24, 49, 37, 54};"
Calculate the sum of angles in an octagon.,The sum of angles in an octagon is 1080° (360° × 3).
"Calculate the area of a triangle given the following lengths of its sides a, b, and c.a = 5, b = 6, c = 8",double area = 0.25*sqrt((a + b + c)*(b + c - a)*(c + a - b)*(a + b - c));
Generate a regular expression that can detect if the length of given strings is above 10.,"re.compile(r"".{10,}"")"
Categorize this sentence as either an imperative instruction or a question.Write a program to count the number of times a specific word appears in a given string.,Imperative instruction
Generate the ternary operator for the following expression: x > 0 ? 10 : 5.,x > 0 ? 10 : 5
"Edit the following code so that it prints the given value to the console.System.out.println(""Hello World"");
5",System.out.println(5);
"Change the if-else statement to a switch statement.if (x == 0) {
 Console.WriteLine(""Zero"");
}
else if (x == 1) {
 Console.WriteLine(""One"");
}","switch (x) {
  case 0:
       Console.WriteLine(""Zero"");
       break;
  case 1:
       Console.WriteLine(""One"");
       break;
}"
Write an algorithm that reverses a string.Hello World,"def reverse_string(string):
  reversed_string = """"
  for char in string:
    reversed_string = char + reversed_string
  return reversed_string"
"Generate the syntax for initializing an array of integers with the given elements.[1, 2, 3]","int[] arr = {1, 2, 3};"
"Modify the following code so that it prints out the characters from the given string one at a time.String str = ""Hello World"";","String str = ""Hello World"";
for (int i = 0; i < str.length(); i++) {
  System.out.println(str.charAt(i));
}"
"Create a function that takes two arguments (n and m) and returns a randomly shuffled array of length n and containing only elements from 0 to m.n = 5
m = 10","def shuffle_array(n, m):
    arr = []
    for i in range(n):
        arr.append(random.randint(0,m))
    random.shuffle(arr)
    return arr"
"Using the heapsort algorithm, sort the following array of numbers in ascending order.[97,54,67,8,2,22,5,47]","[2, 5, 8, 22, 47, 54, 67, 97]"
"Determine which of the following two strings is a palindrome.""kite""
""racecar""","""racecar"" is a palindrome."
"Implement the Caesar Cipher algorithm that shifts the characters in a string by a specified number of spaces.String: ""Hello World!""
Shift by: 3",Khoor Zruog!
Implement a function that takes an integer n as input and returns a matrix of size nxn consisting of the natural numbers from 1 to n^2 in row major order.n = 5,"[[1, 2, 3, 4, 5],
[6, 7, 8, 9, 10], 
[11, 12, 13, 14, 15], 
[16, 17, 18, 19, 20],
[21, 22, 23, 24, 25]]"
"Write a function that takes in 2 lists, reverses the elements of each list and combines the elements to output a single list.list1 = [1,2,3]
list2 = [4,5,6]","[6, 5, 4, 3, 2, 1]"
"Compute the probability of each string from the below list.['apple', 'banana', 'watermelon', 'mango']","The probability of 'apple' is 0.25,
The probability of 'banana' is 0.25, 
The probability of 'watermelon' is 0.25, 
The probability of 'mango' is 0.25."
"Take a string as an input and determine the number of times the letter 'a' appears in the string.String: ""The quick brown fox jumps over the lazy dog""",The letter 'a' appears 1 time in the string.
"In the following code, what is the purpose of the 'if' statement?words = [""apple"", ""pie"", ""make""]

for word in words:
  if len(word) > 4:
    print(word)","The 'if' statement is used to check if the length of the current word is greater than 4, and if it is, the word is printed."
"Suggest an alternative data representation for the following code.ages = {""Alice"": 24, ""Bob"": 3, ""Carol"": 15}","ages = [('Alice', 24), ('Bob', 3), ('Carol', 15)]"
"Write a function that takes two parameters, an array of integers and an integer value, and returns the number of occurrences of the given value in the array.input_array = [1, 2, 3, 2, 1]
input_value = 2","def count_occurrences(input_array, input_value):
    return len([item for item in input_array if item == input_value])"
"Write function to encrypt the text with Caesar Cipher.text = ""hello""
shift = 3","def caesar_cipher(text, shift):
    ciphered = ''
    for char in text:
        ciphered += chr(ord(char) + shift)
    return ciphered"
"Suggest an alternative way of writing the following code using list slicing.a = [1,2,3,4,5]

b = []

for i in range(len(a)):
    if (i+1) % 2 == 0:
        b.append(a[i])","a = [1,2,3,4,5]
b = a[1::2]"
"Construct a class which inherits from the parent class by implementing the abstract method.class Parent:
  def __init__(self):
    pass
  
  def parent_func(self):
    print('Parent Function')
    
class Child(Parent):
 # TODO: implement abstract method","class Parent:
  def __init__(self):
    pass
  
  def parent_func(self):
    print('Parent Function')
    
class Child(Parent):
  def abstract_method(self):
    pass"
Output the fifth letter of the given string.Apple,e
Create a regex to detect URL.,"\b(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]"
Change the given string to list.Data Science,"['Data', 'Science']"
Change the comparison operator in the given line to its equivalent.x != y,x <> y
Make a HTTP request to get the content of the given URL.https://example.com,"import requests

response = requests.get(""https://example.com"")
print(response.content)"
Format the given date and time as DD-MM-YYYY HH:MM19-03-2020 17:30,19-03-2020 17:30
Use the given string to find the number of occurrences of each letter.Hello World,"occurrences = {
 'H': 1,
 'e': 1,
 'l': 3,
 'o': 2, 
 ' ': 1, 
 'W': 1,
 'r': 1,
 'd': 1
}"
"Update the code to print out the first five elements of the given list.[3, 4, 1, 6, 8, 9]","for i in range(5): 
 print(arr[i])"
"Sort the given list with size constraint N in increasing order.N = 4
arr = [8, 7, 6, 5, 4, 1]","arr = [1, 4, 5, 6, 7, 8]"
Use the given string and convert it to hexadecimal representation.Python,0x50797468
"Modify the code below to filter out negative numbers from the given array.var arr = [2, -4, -6, 0, 1];","var arr = [2, 0, 1]; 
arr = arr.filter(element => element >= 0);"
How many jokes can you write in Python?,"There is no definite answer to this question. It depends on the creativity and programming skills of the individual. It is possible to write an infinite number of jokes, but writing a joke that is funny and unique will require more effort and expertise."
Implement a function that takes in three string parameters and prints out the longest one.,"def longest_string(str1, str2, str3):
    if len(str1) >= len(str2) and len(str1) >= len(str3):
        print(str1)
    elif len(str2) >= len(str1) and len(str2) >= len(str3):
        print(str2)
    else:
        print(str3)"
"Create a class called ""BankAccount"" with two instance variables ""accountNumber"" and ""balance"".","class BankAccount():
    
    def __init__(self, accountNumber, balance):
        self.accountNumber = accountNumber 
        self.balance = balance"
"Complete the function definition so that it takes in two parameters ""x"" and ""y"" and returns the sum of x and y.def sum(x, y):","def sum(x, y):
    return x + y"
"Calculate the value of ""x"" in the equation ""5x - 12 = 8"".",x = 4
"Convert the code from OOP to a functional programming style.class Employee:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def print_details(self):
        print(f""Name: {self.name}, age: {self.age}"")","def Employee(name, age):
    return (name, age)

def print_details(employee):
    name, age = employee
    print(f""Name: {name}, age: {age}"")"
Generate code that implements a method to compare two strings.,"def compare_strings(str1, str2):
    if len(str1) != len(str2):
        return False

    for i in range(len(str1)):
        if str1[i] != str2[i]:
            return False

    return True"
"Categorize the following string as either a palindrome or not.Input: ""racecar""",This string is a palindrome.
What is the fifth prime number?,The fifth prime number is 11.
Create a randomized password of 10 characters.,F8a_3q4*f2
"Edit the code so that it produces the desired output.answer = n
if answer % 2 == 0:
    print('even')
else:
    print('odd')
Output:""","answer = n
if answer % 2 == 0:
    print('even')
elif answer % 2 == 1:
    print('odd')"
"Write a function that takes two strings and returns True if one of the strings is the other string reversed.string_1 = ""abcde""
string_2 = ""edcba""","def isReverse(string_1, string_2):
    if len(string_1) != len(string_2):
        return False
    for i in range(len(string_1)):
        if string_1[i] != string_2[len(string_2)-i-1]:
            return False
    return True"
"Write a code that returns the longest substring of the given string without repeating characters.string = ""abcabcbb""","def longestSubstring(s): 
    length = len(s) 
    longest_string = 0
    i = 0
       
    while (i < length): 
   
        # Store the last index of the current character 
        last_char_index = -1
        string_set = set() 
        current_string = 0
          
        for j in range(i, length): 
  
            # If the character is already in string_set 
            if s[j] in string_set: 
                # Update the last index 
                last_char_index = j 
                break
  
            else: 
                # Add the character to string_set 
                string_set.add(s[j]) 
  
                # Increase its length by 1 
                current_string += 1
              
        if longest_string < current_string: 
            longest_string = current_string 
  
        # Move ahead until the last index 
        i = last_char_index + 1 
  
    return longest_string"
"Identify what type of error the code hasx = 10
y = ""10""
z = x + y",This code produces a TypeError as it is attempting to add an integer to a string.
"Given a string containing a comma-separated list of integers, write code to print all the even numbers.string = ""23, 2, 5, 16, 1, 9, 8""","#Split the string into a list of integers
numbers = [int(x) for x in string.split(',')]

#Iterate through the list, if the integer is even, print it
for number in numbers:
    if number % 2 == 0:
        print(number)"
"Create a function that takes two parameters, a string and an integer, and prints the string the given number of times.string = ""Hello""
number = 3","def printString(string, number):
    for i in range(number):
        print(string)

printString(string, number)"
"Given a list of lists, generate a single flattened list.lst = [[1, 2], [3, 4], [5, 6]]","lst = [[1, 2], [3, 4], [5, 6]]
flattened = [item for sublist in lst for item in sublist]
print(flattened)"
Write a function to reverse a linked list in O(n) time complexity.,"def reverse(head):
    prev = None
    curr = head
    while curr is not None:
        next_node = curr.next
        curr.next = prev
        prev = curr
        curr = next_node
    head = prev
    return head"
Design a Spring Boot class that provides a bean of type String to the application.,"@Configuration
public class StringBeanProvider {

    @Bean
    public String provideString() {
        return ""Hello World!"";
    }

}"
Tell me how to print an IMDB movie rating using Python,"import imdb

# create an instance of the IMDb class
ia = imdb.IMDb()

# get the movie
movie = ia.get_movie('tt0111161') # The Shawshank Redemption

# get the rating
rating = movie['rating']

# print the rating
print(f""Rating for the movie 'The Shawshank Redemption': {rating}"")"
Generate a pseudocode for an algorithm to check if an array is a palindrome.,"FUNCTION isPalindrome(arr[], size)
    START 
        i <- 0 
        j <- size-1 
 
        WHILE i < j DO
            IF arr[i] != arr[j] 
                RETURN false
            END IF 
            i <- i + 1
            j <- j - 1
        END WHILE 
        RETURN true
    END"
Name some of the important data types in Python.,"The important data types in Python are integers, floats, strings, booleans, lists, tuples, dictionaries and sets."
Create a condition statement to check if all elements in a list are the same.,all_same = len(list) > 0 and all(x == list[0] for x in list)
"Create a while loop to print all elements of an array.arr = [1, 2, 3, 4, 5]","i = 0
while i < len(arr):
  print(arr[i])
  i += 1"
"Create a loop to go through all elements of a dictionary.d = {'name':'John', 'age': 27, 'job': 'Programmer'}","for key, val in d.items():
    print(f""{key} : {val}"")"
"Write code to produce the output mentioned.Input Array: [3, 4, 5, 7, 8]
Output Array: [7, 8, 5, 4, 3]","int[] input_arr = { 3, 4, 5, 7, 8 };
int[] output_arr = new int[input_arr.length];
for (int i = 0; i < input_arr.length; i++) {
    output_arr[i] = input_arr[input_arr.length - 1 - i];
}"
"Edit the given code in Python to produce the desired output.lst = [3, 8, 9]

for i in lst:
    print(i)

Expected Output:
3
8
9","lst = [3, 8, 9]

for i in lst:
    print(str(i))

# Output
3
8
9"
Create a function in python to print all values between two given values. Do not include the two given values in the output.,"def print_range(start, end): 
    for value in range(start + 1, end): 
        print(value, end = "" "")"
Insert 15 random numbers between 0 and 10 in a list.,"import random

numbers = []
for i in range(15):
    numbers.append(random.randrange(0, 10))
print(numbers)"
Write a Python program to parse a text string given a regular expression and return the matches.,"import re

def parse(expression, string):
  matches = re.finditer(expression, string)
  return [match.group(0) for match in matches]"
Create a TensorFlow neural network model to classify animals into 4 categories.,"import tensorflow as tf

# Define the model
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(4, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])"
"Create a MongoDB query to find all the documents containing the string ""Apple"" in the field ""Company"".",db.collection.find({Company: { $regex: /Apple/ }});
"Edit the following code to add a sharing feature that posts to Facebook.def share(message):
    #code here","def share(message):
    import facebook
    graph = facebook.GraphAPI(access_token=<ACCESS_TOKEN>)
    graph.put_object(parent_object='me', connection_name='feed', message=message)"
"Create a class that represents a student that contains the following information: name, email, age and type of degree.","class Student:
    def __init__(self, name, email, age, degree_type):
        self.name = name
        self.email = email
        self.age = age
        self.degree_type = degree_type"
"Create a program that takes in a numeric value, X, and prints all the positive divisors of that number.X = 8","def print_divisors(x):
    divisors = []
    for i in range(1, x + 1):
        if(x % i == 0):
            divisors.append(i)
    print(divisors)"
Create a function that takes in an integer and returns true if the number is prime or false if the number is not prime.,"def is_prime(num):
    for n in range(2, num):
        if(num % n == 0):
            return False
    else:
        return True"
"Create a function that takes an array of numbers, calculates the sum of the numbers across all the arrays, and returns the average of those sums.arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def get_average_sum(arr):
    total = 0
    count = 0
    for sub_arr in arr:
        total += sum(sub_arr)
        count += len(sub_arr)
    return total / count"
"What type of optimization algorithm is used in the following snippet of code?weights = np.random.rand(2, 1)
for epoch in range(50):
     predictions = predict(x, weights)
     gradients = calcluate_gradients(x, predictions, y)
     weights -= gradients * learning_rate",Stochastic Gradient Descent optimization algorithm is used in the given snippet of code.
"Rewrite the following code to use loop instead of recursion.def longest_substring(input_string):
    if len(input_string) <= 1:
        return input_string
    else:
        first_letter = input_string[0]
        rest_substring = input_string[1:]
        sub_string = longest_substring(rest_substring)
        if first_letter in sub_string:
            return sub_string
        else:
            return first_letter + sub_string","def longest_substring(input_string):
    longest_substring = """"
    for i in range(len(input_string)):
        current_substring = """"
        for j in range(i, len(input_string)):
            if input_string[j] not in current_substring:
                current_substring += input_string[j]
            else:
                break
        if len(current_substring) > len(longest_substring):
            longest_substring = current_substring
    return longest_substring"
"Write a function which will print out a given pattern.*
**
***
****","def print_pattern(n):
    for i in range(1, n+1):
        print(""*"" * i)

print_pattern(4)"
Write a class that implements an arithmetic operator.None,"class ArithmeticOperator:
    def __init__(self, operator, left, right):
        self.operator = operator
        self.left = left
        self.right = right

    def operate(self):
        if self.operator == ""+"":
            return self.left + self.right
        elif self.operator == ""-"":
            return self.left - self.right
        elif self.operator == ""*"":
            return self.left * self.right
        elif self.operator == ""/"":
            return self.left / self.right
        else:
            raise ValueError('Not a valid operator')"
Print out the Fibonacci series up to a given number.n = 5,"def print_fibonacci_series(n):
    a = 0
    b = 1
    print(a, end = "" "")
    print(b, end = "" "")
    for _ in range(2, n):
        c = a + b
        a = b
        b = c
        print(c, end = "" "")
    print()

print_fibonacci_series(5)"
"Given the following code, find the output.def f(x):
        if x == 0 or x == 1:
            return 1
        return f(x-1) + f(x-2)

print(f(4))",The output of the following code is 3.
"Edit the given code to use dynamic programming to solve the problem.def rod_cutting(arr, n):
    if n <= 0:
        return 0
    max_val = 0
    for i in range(0, n):
        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))
    return max_val","def rod_cutting(arr, n):
    dp = [-1 for _ in range(n+1)]
    dp[0] = 0
    for i in range(1, n+1):
        for j in range(i):
            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])
    return dp[n]"
Create an array of random integers from 0-10 and print the sum of all elements in the array.,"import random

# generate random integers
int_list = [random.randint(0, 10) for i in range(10)]

# calculate the sum
total = 0
for e in int_list:
    total += e

# print the sum
print(total)"
Use Python to reverse the order of a string input.I love coding,"def reverse_string(string): 
    return string[::-1]

string_input = 'I love coding'

reverse_string(string_input)"
"Design a program to count the total number of even numbers in a given array.[1, 2, 3, 4, 5, 6]","def count_evens(arr):
    count = 0
    for i in arr:
        if (i % 2)  == 0:
            count+=1
    return count

arr = [1, 2, 3, 4, 5, 6]
count = count_evens(arr)

print(count)"
"Create an array with 3 elements, first element is 5, the second element is 17 and the third element is identical to the first element","[5, 17, 5]"
"Given the following data structure, write a function that takes two arguments and returns the value of the specified property from the objectconst data = {
  id: 1,
  name: 'John'
}","function getValue(data, key) {
    return data[key];
}"
Create a dictionary with three items of your choice,"{
    'apple': 'fruit',
    'carrot': 'vegetable',
    'sugar': 'sweetener'
}"
"Using the same array, write a function that returns the largest number[3, 5, 22, 11, 16, 9]","function getMaxNumber(nums) {
    let maxNum = nums[0];
  
    for (let i = 1; i < nums.length; i++) {
        if (nums[i] > maxNum) {
            maxNum = nums[i];
        }
    }
  
    return maxNum;
}"
"Retrieve the company name from the following objectconst user = {
    name: 'John Doe',
    company: 'Google'
}",user.company
Round the number 3.1415 to the nearest hundredth,Math.round(3.1415 * 100) / 100;
"Edit the given python code to execute the arithmetic operation.a = 8
b = a+2","a = 8
b = a + 2
c = a * b
print(c)"
"Use Predicate logic for representing the following statement.""An elephant only lives in an African safari.""","∀x(Elephant (x) ∧ Lives_in(x, African_safari))"
Create a function in Python which checks if an input value is positive or negative.,"def check_sign(x):
  if x < 0:
    print(""The number is negative."")
  elif x > 0:
    print(""The number is positive."")
  else:
    print(""The number is 0."")"
"Convert the given context free grammar to Chomsky Normal Form.S --> AaBb
A --> aA | b
B --> bB | a","S --> AaBb
A --> aA | bB
B --> bBB | bA | aB | aA"
Define a function in R which takes two arguments and finds their average.,"find_average <- function(x, y){
    avg <- (x + y) / 2
    return(avg)
}"
Edit this text to make it more concise without losing any information.The research assisted in understanding the ways in which we can better optimize our data structures. We discovered many new ways of more efficiently using the resources that we were given.,"Research revealed ways to optimize data structures more efficiently, leading to new resource-saving techniques."
"Write a Python function that takes a list of numbers and returns the mean and standard deviation of that list.list = [1, 2, 3, 4, 5]","import statistics

def get_stats(list):
 mean = statistics.mean(list)
 stdev = statistics.stdev(list)
 return mean, stdev

mean, stdev = get_stats(list)
print(""Mean:"", mean)
print(""Standard Deviation:"", stdev)"
Create a Python program that prints out all even numbers between 0 and the given number n.,"def print_even_numbers(n):
  for i in range (0, n+1):
    if i % 2 == 0:
      print (i)

print_even_numbers(20)"
"Write a Python function to create a dictionary with the given list as its keys and values.list = [""a"", ""b"", ""c""]","def create_dict(list):
  return dict(zip(list, list))

dict = create_dict(list)
print(dict)
# Output: {'a': 'a', 'b': 'b', 'c': 'c'}"
"Create a new list which contains even elements from the existing list A.A = [1, 4, 5, 12, 3, 7, 16]","A = [1, 4, 5, 12, 3, 7, 16]
even_list = [x for x in A if x % 2 == 0 ]"
"Create a dictionary which contains the product of keys and their individual values from another dictionary.d = {'X': 4, 'Y': 5}","d = {'X': 4, 'Y': 5}
d2 = {k:v*v for k,v in d.items()}"
When would you use a while-loop in Python?,"A while-loop in Python is used when we need to iterate through a set of instructions or code block until a condition is met or false. It allows us to perform an operation multiple times until the condition is met. For example, we can use a while-loop to iterate and check if a certain number is prime or not."
How would you create a function in Python to add two numbers?,"def add(a, b):
	return a + b 

# Usage 
print(add(3,4)) # output: 7"
Rewrite the following instruction to print the binary value it holds.int n = 12;,System.out.println(Integer.toBinaryString(n));
Design a class for a user profile.,"class UserProfile:
  def __init__(self, username, password, email, full_name, date_of_birth, address):
    self.username = username
    self.password = password
    self.email = email
    self.full_name = full_name
    self.date_of_birth = date_of_birth
    self.address = address
 
  def update_phone_number(self, phone_number):
    self.phone_number = phone_number"
"Use the comment as a guide, replace its content with the proper code.char array1[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
char array2[10];
// TODO: copy the content of array1 to array2","char array1[10] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
char array2[10];

for (int i = 0; i < 10; i++) {
 array2[i] = array1[i];
}"
"Edit the code to create a class for a profile.class Profile {

}","class Profile {
  constructor(name, email, avatar_url) {
    this.name = name;
    this.email = email;
    this.avatar_url = avatar_url;
  }

  updateName(name) {
    // update the profile's name
    this.name = name;
  }
  
  updateEmail(email) {
    // update the profile's email address
    this.email = email;
  }
  
  updateAvatar(url) {
    // update the profile's avatar url
    this.avatar_url = url;
  }
  
  getName() {
    // return the profile's name
    return this.name;
  }
  
  getEmail() {
    // return the profile's email
    return this.email;
  }
  
  getAvatarUrl() {
    // return the profile's avatar url
    return this.avatar_url;
  }
}"
Design an algorithm to determine if an integer is even or odd.,"def is_even(num):
    if num % 2 == 0:
        return True
    else:
        return False"
Create an algorithm which is able to sort a given array of integers in descending order.,"def sort_descending(nums):
    for i in range(len(nums)):
        for j in range(len(nums)):
            if nums[i] > nums[j]:
                nums[i],nums[j] = nums[j],nums[i]
    return nums"
"Compute the average of the following three numbers: 5, 10, and 15.",10.0
Create a for loop that prints the following output:,"for i in range(10):
    print(i)"
"Using the given array, create a function that takes in two arguments, the array and a number, and returns the position of the number in the array.let arr = [1, 7, 9, 8, 5]","function findIndexOf(array, num) {
   return array.indexOf(num);
}"
"Create an if statement that prints ""Fizz"" if a number is divisible by 3 and ""Buzz"" if a number is divisible by 5.","if (num % 3 == 0 && num % 5 == 0) {
    console.log(""FizzBuzz"");
} else if (num % 3 == 0) {
    console.log(""Fizz"");
} else if (num % 5 == 0) {
    console.log(""Buzz"");
}"
"Reverse this sentence: ""I can do coding.""","""coding do can I"""
"Using the given object, create a function to print out the value of the property ""age"" within the object.let obj = {
    name: 'John',
    age: 20,
    printDetails: () => {
        console.log(`The name is ${name} and age is ${age}`);
    }
}","function printAge(obj) {
    console.log(obj.age);
}"
"Edit the code below to sort the list of integers given in the input.list_in = [40, 32, 12, 19]","list_in = [40, 32, 12, 19]
list_in.sort()
print(list_in) #output: [12, 19, 32, 40]"
"Substitute the correct data type for each variable in the code below.name = <data_type>
age = <data_type>
if_married = <data_type>","name = str
age = int
if_married = bool"
"Create a Python program to take the input and print the output as shown in the example below.list1 = [10, 20, 30, [40, 50], [60, 70], 80]","print(list1[3][1])
print(list1[4][0])

print(list1[3][1]) # output: 50
print(list1[4][0]) # output: 60"
Let's try a different sort algorithm. Generate a Python code snippet to implement merge sort.,"# Merges two subarrays of arr[]. 
# First subarray is arr[l..m] 
# Second subarray is arr[m+1..r] 
def merge(arr, l, m, r): 
    n1 = m - l + 1
    n2 = r- m 
  
    # create temp arrays 
    L = [0] * (n1) 
    R = [0] * (n2) 
  
    # Copy data to temp arrays L[] and R[] 
    for i in range(0 , n1): 
        L[i] = arr[l + i] 
  
    for j in range(0 , n2): 
        R[j] = arr[m + 1 + j] 
  
    # Merge the temp arrays back into arr[l..r] 
    i = 0     # Initial index of first subarray 
    j = 0     # Initial index of second subarray 
    k = l     # Initial index of merged subarray 
  
    while i < n1 and j < n2 : 
        if L[i] <= R[j]: 
            arr[k] = L[i] 
            i += 1
        else: 
            arr[k] = R[j] 
            j += 1
        k += 1
  
    # Copy the remaining elements of L[], if there 
    # are any 
    while i < n1: 
        arr[k] = L[i] 
        i += 1
        k += 1
  
    # Copy the remaining elements of R[], if there 
    # are any 
    while j < n2: 
        arr[k] = R[j] 
        j += 1
        k += 1
  
# l is for left index and r is right index of the 
# sub-array of arr to be sorted 
def mergeSort(arr,l,r): 
    if l < r: 
  
        # Same as (l+r)//2, but avoids overflow for 
        # large l and h 
        m = (l+(r-1))//2
  
        # Sort first and second halves 
        mergeSort(arr, l, m) 
        mergeSort(arr, m+1, r) 
        merge(arr, l, m, r)"
Create an input validation function in Python which checks that the input is an integer between 2-6.,"def input_validation(input):
    try:
        input = int(input)
        if input >= 2 and input <= 6:
            return True
        else:
            return False
    except ValueError:
        return False"
"Make a function in Python that sorts a list of integers in increasing order.[50, 2, 8, 7, 19, 29]","def sortInt(nums):
    for i in range(len(nums)-1):
        for j in range(i+1,len(nums)):
            if nums[i] > nums[j]:
                #Swap
                nums[i],nums[j] = nums[j],nums[i]
    return nums"
"Create a MongoDB query to find all records with a ""quantity"" field greater than 5.","db.collection.find({ ""quantity"": { $gt: 5 } })"
"Create a function that prints out the List of tuples.t = [(1, 5), (0, 1), (10, 20)]","def print_list_tuple(t):
    for item in t:
        print(item)"
Suggest a name for the variable that represents a temperature value in Fahrenheit,fahrenheit_temperature
"Update the following code to create a valid URLurl = ""www.example.com:port/path?query=blah""","url = ""http://www.example.com:port/path?query=blah"""
Create a function to encrypt a string using the XOR operator.key = 'ABCDEFG',"def xor_encrypt(string, key):
    encrypted_string = """"
    for i, letter in enumerate(string):
        encrypted_string += chr(ord(letter) ^ ord(key[i % len(key)]))
    return encrypted_string"
Create a class definition for a Car object with attributes of HP and speed.,"class Car:
    def __init__(self, hp, speed):
        self.hp = hp
        self.speed = speed"
"Change the case of all characters in a string.string = ""Hello World!""","def change_case(string):
    return string.swapcase()"
"Create an XML document with a root element ""<name>"".","<?xml version=""1.0"" encoding=""UTF-8""?>
<name> </name>"
What algorithm should be used for predicting the output for a given input?,"The type of algorithm to be used for predicting the output for a given input depends on the complexity of the task. Common algorithms used for prediction tasks include Support Vector Machines, Random Forests, k-Nearest Neighbors and Artificial Neural Networks."
List the layers of an artificial neural network.,"The layers of an artificial neural network typically include an input layer, one or more hidden layers and an output layer. In addition, some ANNs also include a convolutional layer and/or a pooling layer."
"Analyze the following two functions to determine which one will be faster for executing a given operation.Function 1:

def f1(x):
    for i in range(1, x):
        print(i)

Function 2:

def f2(x):
    i = 1
    while i < x:
        print(i)
        i += 1","Function 2 will be faster than Function 1 for executing a given operation. This is because Function 2 uses a while loop, which checks the condition before executing the loop body, while Function 1 uses a for loop, which executes the loop body before checking the condition."
Differentiate between a compiler and an interpreter.,"A compiler takes a source code and converts it into an executable program, while an interpreter takes the same source code and executes it directly. Compilers produce a single output file and are usually faster than interpreters. Interpreters take source code as input and produce output directly, and tend to be slower than compilers."
What is the advantage of using linear regression for predicting the output?,"The advantage of using linear regression for predicting the output is that it can capture important relationship between input variables and the outcome. It is easy to interpret and explain, can produce easily interpretable results, and can also be used to optimize parameters for a given problem."
Create a class with two methods to generate a random Integer and String,"import random

class randomGenerator:
  
    def __init__(self):
        pass
    
    def generate_random_int(self):
        return random.randint(0,100)
    
    def generate_random_string(self):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

randomGenerator = randomGenerator()"
"In Python, create a function that reverses a list.","def reverse_list(list): 
    return list[::-1] 
  
list = [10, 16, 1, 5] 
  
print(""Original List"", list) 
print(""Reversed List"", reverse_list(list))"
"Sort the following arrayarr = [4, 2, 3, 5, 1]","arr.sort()
print(arr)"
"Write a generic function to split an array into n equal slices.arr = [1, 2, 3, 4, 5]","def splitArr(arr, n):
    if n > len(arr):
        return -1
    result = []
    for i in range(0, len(arr), n):
        result.append(arr[i:i+n])
    return result"
"Create a function that returns the last element of an array.arr = [1, 3, 6, 7, 12]","def lastElement(arr):
    return arr[-1]"
"Given a string, remove any duplicate characters.input_string = ""aaabbbccc""","def removeDupChars(input_string): 
    string_set = set(input_string) 
    new_string = """". join(string_set)
    return new_string"
"Write a function to sort a stack in ascending order.stack = [4, 7, 2, 1]","def sortStackAsc(stack):
    sorted_stack = []

    while stack:
        current_element = stack.pop()
        while sorted_stack and current_element < sorted_stack[-1]:
            stack.append(sorted_stack.pop())
        sorted_stack.append(current_element)

    return sorted_stack"
"Generate a random number between the two numbers provided.min = 5
max = 10","import random

def randomNumber(min, max):
    return random.randint(min, max)"
"From the array of integers given below, write a Python code snippet to select all even numbers.array = [1, 9, 4, 10, 5, 12];",even_numbers = [num for num in array if num % 2 == 0]
"What is the Big O complexity of this following code snippet?def find_duplicates(nums):
    duplicates = []
    for num in nums:
        if num in duplicates:
            yield num
        else:
            duplicates.append(num)","The Big O complexity of this code snippet is O(n), since it takes linear time to loop through the array and check if the element has appeared before."
Generate random numbers in the range of 1 to 100 using a for loop in Python.,"import random

for i in range(100):
	rand_num = random.randint(1, 100)
	print(rand_num)"
Classify the following sentences into either a question or an instruction: “Please write a script to print all the prime numbers up to 50.”,Instruction: Please write a script to print all the prime numbers up to 50.
Write a Python script that prints out the Fibonacci sequence up to the nth number.10,"""""""
Print out the Fibonacci sequence up to the nth number
""""""
def printFibSequence(n): 
    
    # Initialize first two terms 
    a = 0
    b = 1
	
    # Add the first two terms 
    print(a, end="" "") 
    print(b, end="" "") 
	
    # Loop up to the n-2th number
    for i in range(2, n): 
        c = a + b 
        print(c, end="" "") 
        a = b 
        b = c 

# Main program
if __name__ == '__main__':
    n = 10 
    printFibSequence(n)"
Suggest a way to solve the following problem in Python: extracting the last element from a given list.,"A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list ""my_list"": 

my_last_element = my_list[-1]"
"Create a model in scikit-learn to predict the label of a given input data.Input Data: [3.0, -4.0, 2.0, 0.8]
Label: Positive","from sklearn import svm 

# define model 
model = svm.SVC(kernel='linear', C=1.0) 

# define inputs 
X = [[3.0, -4.0, 2.0, 0.8]] 
y = ['Positive'] 

# fit model 
model.fit(X, y)"
"Construct an IPython code cell to display the content of a given pandas DataFrame.DataFrame:
Name      Age
Alice      26
Bob        32
Carol      12","import pandas as pd

df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],
                   'Age': [26, 32, 12]})

df"
"Fix the bug in the following code to sort a given list of numbers in descending order.nums = [2, 3, 1, 4]","nums = [2, 3, 1, 4]
nums.sort(reverse=True)
print(nums) # Output: [4, 3, 2, 1]"
Take the string ‘hello world’ and convert it to uppercase.,"string = 'hello world'
print(string.upper()) # Output: 'HELLO WORLD'"
"Parse the given XML code and extract the value of the first attribute of the first element.<root>
    <item attr1=""value1"" attr2=""value2"">
        <value>Logged</value>
    </item>
</root>","import xml.etree.ElementTree as ET

tree = ET.parse('test.xml') 
root = tree.getroot() 

first_attr = root[0].attrib['attr1']
print(first_attr) # Output: 'value1'"
"Create a function which converts a string representation of number in English to a numerical value.""one thousand two hundred and thirty four""","""""""
Create a function which converts a string representation of number in English to a numerical value.
""""""

def convert_english_number(number_string):
    word_values = {""one"":1,""two"":2,""three"":3,""four"":4,""five"":5,""six"":6,""seven"":7,""eight"":8,""nine"":9,""ten"":10,""eleven"":11,""twelve"":12,""thirteen"":13,""fourteen"":14,""fifteen"":15,""sixteen"":16,""seventeen"":17,""eighteen"":18,""nineteen"":19,""twenty"":20,""thirty"":30,""forty"":40,""fifty"":50,""sixty"":60,""seventy"":70,""eighty"":80,""ninety"":90}
    word_list = number_string.split()

    final_num = 0
    i=0
    while i<len(word_list): 
        if word_list[i] in word_values.keys():
            final_num += word_values[word_list[i]]
        elif word_list[i]==""hundred"":
            final_num = final_num*100
            
        if(i+1<len(word_list) and word_list[i+1]==""hundred""):
            final_num += word_values[word_list[i]]*100
        i+=1
    return final_num

if __name__ == '__main__':
    print(convert_english_number(""one thousand two hundred and thirty four""))"
"Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.Target: 10
Numbers: [1,4,5,3,6]","""""""
Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.
""""""
def optimal_sum(target, numbers): 
    if (target == 0): 
        return True
    n = len(numbers) 
    subset = [True] + [False]*target 
      
    for i in range(n): 
        for j in range(target,numbers[i]-1,-1): 
            subset[j] = subset[j] or subset[j-numbers[i]] 
  
    return subset[target] 

if __name__ == '__main__': 
    target = 10
    numbers = [1,4,5,3,6]
    print(optimal_sum(target, numbers))"
"Generate a loop to read each word from a given sentence and display them as a list.Sentence: ""Python is a great programming language""","""""""
Generate a loop to read each word from a given sentence and display them as a list.
""""""
sentence = ""Python is a great programming language""
words = sentence.split()

word_list= []
for word in words:
    word_list.append(word)

print(word_list)"
"Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.String 1: ""Hello World"" 
String 2: ""World Hello""","""""""
Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.
""""""
def check_order(str1,str2): 
    stack=[]
    j=0
    for i in range(len(str2)): 
        if str2[i]==str1[j]: 
            stack.append(str2[i]) 
            j+=1
            if stack==str1: 
                return True
                
    return False

if __name__ == '__main__': 
    str1 = ""Hello World""
    str2 = ""World Hello""
    print(check_order(str1,str2))"
"Use features of the Python language to implement 3-way partitioning of a given array.Array: [9,6,7,4,1,6,3]","""""""
Use features of the Python language to implement 3-way partitioning of a given array.
""""""
def threeWayPartition(array, pivot): 
    less = [] 
    equal = [] 
    greater = [] 
    for i in array: 
        if i < pivot: 
            less.append(i) 
        elif i == pivot: 
            equal.append(i) 
        else: 
            greater.append(i)   
    return less + equal + greater 

if __name__ == '__main__': 
    array = [9,6,7,4,1,6,3]
    pivot = 6
    print(threeWayPartition(array, pivot))"
Create a data structure to store all of the prime numbers up to 1 million.,"""""""
Create a data structure to store all of the prime numbers up to 1 million.
""""""
import math

def sieveOfEratosthenes(n):
    prime_numbers = [True]*(n+1) 
    prime_numbers[0] = False
    prime_numbers[1] = False
      
    for i in range(2, int(math.sqrt(n)+1)): 
        if (prime_numbers[i]): 
            for j in range(i*i, n+1, i): 
                prime_numbers[j] = False
      
    prime_numbers_list = []
    for k in range(n+1): 
        if prime_numbers[k]: 
            prime_numbers_list.append(k)
      
    return prime_numbers_list

if __name__ == '__main__':
    n = 1000000
    prime_numbers_list = sieveOfEratosthenes(n)
    print(prime_numbers_list)"
"Create a function to edit a given string, replacing all the vowels with a given character.String: ""Hello world""
Character: 'x'","""""""
Create a function to edit a given string, replacing all the vowels with a given character.
""""""
def replace_vowels(string, replacement_character):
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_str = """"
    for char in string:
        if char in vowels:
            new_str += replacement_character
        else:
            new_str += char
    return new_str

if __name__ == '__main__':
    string = ""Hello world""
    replacement_character = 'x' 
    print(replace_vowels(string, replacement_character))"
"Generate a loop to find the largest sub-array in a given array with contiguous elements and its sum.Array: [-2, 6, -3, 5, -2, 3, 4, -2]","""""""
Generate a loop to find the largest sub-array in a given array with contiguous elements and its sum.
""""""

def largest_subarray_sum(array):
    best_sum = 0
    current_sum = 0
    current_start_index = 0
    best_start_index = -1
    best_end_index = -1
    for i in range(len(array)):
        current_sum += array[i]
        if current_sum > best_sum:
            best_sum = current_sum
            best_start_index = current_start_index
            best_end_index = i
        if current_sum < 0:
            current_sum = 0
            current_start_index = i + 1
    return (best_sum, best_start_index, best_end_index)

if __name__ == '__main__':
    array = [-2, 6, -3, 5, -2, 3, 4, -2]
    print(largest_subarray_sum(array))"
Print the Fibonacci sequence up to the 5th element.,"0, 1, 1, 2, 3"
Create a function that takes a string and checks if the string contains any special characters.Hello World,"def has_special_characters(s):
    return not all(char.isalnum() for char in s)"
"We have a list of numbers and a given sum. Write a program to determine if any two numbers from the list sum up to the given sum.[1,2,3,4], 6","def two_sum(nums, target):
    for i in range(len(nums) - 1):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == target:
                return (i, j)
    return -1"
"Create a function that takes in a string and returns an array of the words which are longer than 5 characters.""Welcome to the world of programming""","def get_long_words(s):
    words = s.split("" "")
    result = []
    for word in words:
        if len(word) > 5:
            result.append(word)
    return result"
Describe two ways to insert elements into a hashmap in Python.,"1. The simplest way is to use the Square Bracket ([]) Notation. For example, hashmap[key] = value allows you to insert key-value pair into a hashmap. 
2. The other way to insert elements into a hashmap is by using the update() method. This method takes in a dictionary object as an argument and updates the existing hashmap with values from the dictionary."
Describe the features of the K Nearest Neighbors (KNN) classification algorithm.,"K Nearest Neighbors (KNN) classification is a supervised machine learning algorithm used for solving classification problems. The main feature of the KNN algorithm is that it defines the class of a data sample based on the classes of its closest K neighbors, determined using a distance measure. It is a non-parametric and lazy learner algorithm, meaning it does not make any assumptions about the data distribution and is not prone to overfitting. It is also easy to implement and not computationally expensive."
How could you use Machine learning to classify the sentiment of a given text?,One way to use Machine learning to classify the sentiment of a given text is to use a supervised Machine learning algorithm such as Support Vector Machines to build a classifier. The classifier can be trained on a labeled dataset which contains texts with corresponding labels like 'positive' or 'negative'. The trained classifier can then be used to predict the sentiment of a new text.
"Write a function in Python to format a given date according to the format ""Day-Name, Month Name, Day, Year"".""2019-06-27""","def format_date(date): 
    date_list = date.split('-') 
    formatted_date = date_list[2] + '-' + calendar.month_name[int(date_list[1])] + '-' + date_list[0] 
    return formatted_date"
Write a class in Python to store the objects of student and their grades.,"# Class to store student and grades

class StudentGrades:
    def __init__(self, student_name):
        self.student_name = student_name
        self.grades = {}
     
    def add_grade(self, course_name, grade):
        self.grades[course_name] = grade
    
    def get_total_grade(self):
        total_grade = 0
        for grade in self.grades.values():
            total_grade += grade
        return total_grade"
Identify the language into which the given text is translated.Text: いつもありがとう。,The given text is translated into Japanese language.
"Classify the following words as noun, verb, adverb or adjective.Words: slowly, frog, kick","Adverb: slowly 
Noun: frog 
Verb: kick"
Generate an array of 5 random hexadecimal numbers.,"import random

hex_arr = []
for i in range(5):
 rand_hex = random.randint(0, 255)
 hex_arr.append(hex(rand_hex))

print(hex_arr)"
"Count the number of lines of code in the following code snippet.def add(num1, num2):
    return num1 + num2",3
"Find the sum of three numbers and add five to it.a = 4, b = 7, c = 10","sum = a + b + c
result = sum + 5"
Create a 2D array with three rows and two columns and assign different value to each element.,"arr = [[1,2], [3,4], [5,6]]"
"Compare the values of x and y, and print out ""x is greater than y"" if x is greater.x = 5, y = 3","if x > y:
    print(""x is greater than y"")"
Calculate the base-2 logarithm of 32.,log2(32) = 5
"Find the count of words in the following string.text = ""This is a sample text""",len(text.split()) # 4
"Check if the input string contains both number and alphabets and return true if it does.str = ""hello123""","if re.search('[a-zA-Z]', str) and re.search('[0-9]', str): 
    print(True) 
else: 
    print(False)"
"Create an API endpoint in ExpressJS that receives a username and returns the user’s information.User with the username ""johnsmith""","app.get('/user/:username', async (req, res) => {
  let username = req.params.username;
  let userInfo = await User.findOne({ username });
  res.json(userInfo);
});"
"Sort an array of integers using a heapsort algorithm.[3, 6, 2, 9, 1]","def heapsort(A):
    # step 1: create the heap
    heapify(A)

    # step 2: sort the heap
    for size in range(len(A), 1, -1):
        A[0], A[size - 1] = A[size - 1], A[0]
        sift_down(A, 0, size - 1)

    # step 3: return the sorted result
    return A"
Generate a program in Python that prints all days of the week,"#list of Weekdays
weekdays = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", 
            ""Saturday"", ""Sunday""]

#print Weekdays
for weekday in weekdays:
    print(weekday)"
"Write a code to count the number of occurrences of a given word in an array of strings.words = ['apple', 'banana', 'apple', 'kiwi', 'apple']
target_word = 'apple'","def count_word(words, target_word):
    counter = 0
    for word in words:
        if word == target_word:
            counter += 1
    return counter"
"Create a code to swap two elements in a given array.array = [1, 4, 5, 8]","def swap_elements(array, index1, index2):
    temp = array[index1]
    array[index1] = array[index2]
    array[index2] = temp"
"Create a new array that is a copy of the given input array, consisting of all elements smaller than 5.[4, 8, 9, 7, 5, 1, 10]","new_array = [item for item in given_array if item < 5]  # [4, 1]"
"Create a recursive function that takes two parameters, a number and a base and returns the result as a string.14, 16","def convert_to_base(num, base): 
    """""" 
    Function to convert num to a given base 
    """"""
    converted_string = """" 

    # Base Case 
    if num < base: 
        if num < 10: 
            return str(num) 
        else: 
            return chr(num - 10 + ord('A')) 

    rem = num % base 
    if rem < 10: 
        converted_string = str(rem) + converted_string 
    else: 
        converted_string = chr(rem - 10 + ord('A')) + converted_string 
    num = num // base 
    return convert_to_base(num, base) + converted_string"
Design a machine learning algorithm to classify the given dataset.Dataset of images of cats and dogs,"""""""
Design a machine learning algorithm to classify the given dataset
""""""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Prepare data
data = pd.read_csv('path/to/dataset') 

#Preprocess data
X = data.drop('label', axis=1)
y = data['label']

#Split into training and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

#Feature scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#Train the model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)

#Evaluate the model
from sklearn.metrics import accuracy_score
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(accuracy)"
"Create a Rails application with a user sign up with name, email and password.","rails new AppName

cd AppName

# Add devise for user auth
rails g devise:install

# Generate a model for the user
rails g devise user username email password

# Create a database and migrate
rake db:create db:migrate

# Add routes for the login & signup
Rails.application.routes.draw do
  devise_for :users
end"
"Create a method called `combineName` that takes in two strings and combines them together into a full name.firstName = 'John'
lastName = 'Smith'","def combineName(firstName, lastName):
    """"""
    A method that takes in two strings and combines them into a full name.
    Args: 
     firstName (str): first name 
     lastName (str): last name
    Returns:
     fullName (str): combined full name 
    """""" 
    fullName = firstName + "" "" + lastName
    return fullName
    
if __name__ == '__main__':
    firstName = 'John'
    lastName = 'Smith'
    print(combineName(firstName, lastName))"
"Fix the following code to prevent errors from crashing the program.def foo(a):
    print(a)
foo(""hi"")
foo(1)","def foo(a):
    """"""
    A function that prints a value.
    Args:
     a (any): value to print
    Returns:
     nothing
    """"""
    if isinstance(a, (int, float, str)): 
        print(a)
    else:
        print(""Error: must be a string, int, or float"")

if __name__ == '__main__':
    foo(""hi"")
    foo(1)"
Describe what a software bug is.,"A software bug is a mistake, error or an unexpected behavior or result in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. It is generally caused by errors in the source code or the semantic understanding of the code that is written. A software bug can occur at any level of the software development process, from the design stage to the compilation stage, and can be caused by incorrect specifications, poor coding, incorrect debugging or incorrect implementation."
Use regex to extract the domain from a URL.url = 'https://www.example.com/blog/post/1',"import re

def extract_domain(url):
    """"""
    A function to extract the domain from a URL using regex.
    Args: 
     url (str): a URL.
    Returns:
     domain (str): the domain of the URL.
    """"""
    regex = r""http[s]?://(www\.)?([^/]+)/.*""
    matches = re.search(regex, url)
    return matches.group(2)
    
if __name__ == '__main__':
    url = 'https://www.example.com/blog/post/1'
    print(extract_domain(url))"
"Create a function that returns a randomly selected element from a list.list = [1, 2, 3, 4, 5]","import random

def get_random_element(list):
    """"""
    A function to return a randomly selected element from a list.
    Args: 
     list (list): a list
    Returns:
     element (int): a randomly selected element
    """"""
    index = random.randint(0, len(list)-1)
    element = list[index]
    return element

if __name__ == '__main__':
    list = [1, 2, 3, 4, 5]
    print(get_random_element(list))"
Generate a random string of length 10 made up of characters ‘a’ to ‘d’.,"import random

rand_string = ''
for i in range(10):
    rand_string += random.choice(['a', 'b', 'c', 'd'])
    
print(rand_string)"
"Code a function to flatten a dictionary.{""a"": 1, ""b"": {""c"": 2, ""d"": 3}}","def flatten_dict(d):
	flattened_dict = {}

	for key, val in d.items():
		if type(val) is dict: # if val is a dict
			for k, v in val.items():
				flattened_dict[key + ""_"" + k] = v
		else:
			flattened_dict[key] = val

	return flattened_dict

if __name__ == '__main__':
	d = {""a"": 1, ""b"": {""c"": 2, ""d"": 3}}
	print(flatten_dict(d))"
"Code an algorithm to implement merge sort[5, 2, 4, 6, 1, 7, 8]","def merge_sort(arr):
    if len(arr) >1:
        mid = len(arr) // 2 
        left_half = arr[:mid]  
        right_half = arr[mid:] 

        merge_sort(left_half) 
        merge_sort(right_half) 

        i = 0
        j = 0
        k = 0
  
        while i < len(left_half) and j < len(right_half):  
            if left_half[i] < right_half[j]:  
                arr[k] = left_half[i]  
                i += 1

            else:  
                arr[k] = right_half[j]  
                j += 1
            k += 1
      
        while i < len(left_half):  
            arr[k] = left_half[i]  
            i += 1
            k += 1
          
        while j < len(right_half):  
            arr[k] = right_half[j]  
            j += 1
            k += 1

if __name__ == '__main__':
	arr = [5, 2, 4, 6, 1, 7, 8]
	merge_sort(arr)
	print(arr)"
"Find out the biggest number from the list[7, 9, 1, 3, 4]","my_list = [7, 9, 1, 3, 4]
max = max(my_list)
print(max)"
"Given a list of strings, write a Python function to expand each element into a set of characters.['hello', 'world']","def expand_list(strings): 
    new_list = []
    for string in strings: 
        for character in string: 
            new_list.append(character) 
    return new_list"
Design a Bubble Sort algorithm for a list of numbers.,"def bubbleSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr"
Design a Greedy Algorithm to solve the sum-subset problem.,"def subsetsum(arr, target):
  arr.sort() 
  n = len(arr) 
  sum = 0
  result = [] 
  
  for i in range(n):
    if ( sum + arr[i] <= target):
      result.append(arr[i])
      sum = sum + arr[i]
  
  return result"
"Output the result of a line of code snippet.list_1 = [1, 2, 3]
list_2 = [4, 5, 6]
list_1 + list_2","[1, 2, 3, 4, 5, 6]"
Transform the given code snippet into a different programming language.let x = 3,x = 3
"Remove duplicates from the given list and sort it in ascending orderlst = [1, 2, 3, 1, 4, 2]","sorted(set(lst))  # Output: [1, 2, 3, 4]"
"Create a function to remove all non alphabetical characters from thestringstring = ""Hello, world!""","def clean_string(string):
    output = """"
    for char in string:
        if char.isalpha():
            output += char
    return output
    
clean_string(string) # Output: Helloworld"
"Separate the given list into two lists for even and odd numberslst = [1, 2, 3, 4, 5]","even_lst = []
odd_lst = []
for num in lst:
    if num % 2 == 0:
        even_lst.append(num)
    else:
        odd_lst.append(num)"
"Generate all possible combinations of strings that can be formed using the given characterschars = [""a"", ""b"", ""c""]","import itertools

combinations = [''.join(i) for i in itertools.product(chars)]

# Output: [""a"", ""b"", ""c"", ""ab"", ""ac"", ""ba"", ""bc"", ""ca"", ""cb"", ""abc"", ""acb"", ""bac"", ""bca"", ""cab"", ""cba""]"
"Replace all characters in the given string with the given characterstring = ""Hello World""
char = ""x""","def replace_chars(string, char):
    output = """"
    for c in string:
        output += char
    return output

replace_chars(string, char)  # Output: xxxxx xxxxx"
"Modify the given program so that it can output the average of numbers a,b, and c.a = 2
 b = 5
 c = 7","def average(a, b, c):
  return (a + b + c) / 3

a = 2
b = 5
c = 7
average = average(a, b, c)
print(""Average of a, b and c is:"", average)"
"Create an algorithm to print out the unique characters in a given string.word = ""Hello World""","def unique_chars(word):
  unique_characters = set()
  for char in word:
    if char not in unique_characters:
      unique_characters.add(char)
  return unique_characters

word = ""Hello World""
unique_characters = unique_chars(word)
print(""Unique characters in "", word, ""are:"", unique_characters)"
Create an ios app to display the content of a given RSS feedUrl: https://www.nytimes.com/svc/collections/v1/publish/https://www.nytimes.com/section/world/rss.xml,"You will need to use an API like RSS API which can help you fetch the contents of the given URL. The API can be used for displaying the content of the RSS feed in a UI. Once you have setup the API, you will then need to create a UI which uses the API and display the RSS feed content on the iOS app."
"Build a function to identify a duplicate element in a listlist = [2,4,8,7,2,5]","def find_duplicate(list):
	visited = set()
	for num in list:
		if num in visited:
			return num
		else:
			visited.add(num)
	return None

list = [2,4,8,7,2,5]
print(find_duplicate(list)) # Output: 2"
"Combine the two strings into one and save it as a variable called full_name.first_name = 'John'
last_name = 'Smith'","first_name = 'John'
last_name = 'Smith'

full_name = first_name + ' ' + last_name"
"Calculate the number of days from January 1, 2021 to June 30, 2021.","The number of days from January 1, 2021 to June 30, 2021 is 152 days."
"Given the function, predict the output.def foo(a, b):
    return a + b

print(foo(3, 5))",The output of the function will be 8.
Create a for loop that prints the square of each number from 1 to 5.,"for num in range(1, 6):
    print(num**2)"
"Using regular expressions, remove any duplicate words from the following sentence.sentence = ""I I am going to the the store""","import re

sentence = ""I I am going to the the store""
result = re.sub(r'\b(\w+)( \1\b)+', r'\1', sentence)
print(result) # I am going to the store"
Output a list with all the numbers from 0 to 100 that are divisible by 8.,"result = [x for x in range(101) if x % 8 == 0]
print(result)# [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]"
"Create an R program to find the intersecting element of two lists.x = c(14,5,13)
y = c(5,11,9)","#Function for finding common element between two lists
common_element <- function(x, y){
  intersect_list <- intersect(x, y)
  return(intersect_list)
}

x <- c(14,5,13)
y <- c(5,11,9)

#Calling the above function
common_element(x, y) #5"
"Generate an Objective-C code to check if a given string is palindrome or not.""racecar""","#import<Foundation/Foundation.h>

@implementation CheckString

-(BOOL)isStringPalindrome:(NSString*)inputString {
    BOOL isPalindrome = true;
    int lastIndex = [inputString length] - 1;  
 
    for (int i = 0; i < [inputString length]/2; i++) {
        //compare character one by one
        if ([inputString characterAtIndex:i] != [inputString characterAtIndex:lastIndex]) {
            isPalindrome = false;
            break;
        }
        // decrement lastIndex for next iteration
        lastIndex--;
    }
    return isPalindrome;
}

@end

CheckString *cs = [[CheckString alloc]init];
NSString *sampleString = @""racecar"";

if ([cs isStringPalindrome:sampleString]) {
    NSLog(@""String is Palindrome"");
}else{
    NSLog(@""String is not a Palindrome"");
}"
"Write a Haskell program to calculate the sum of list elements.[2,3,7,9]","sumlist :: [Integer] -> Integer
sumlist [] = 0
sumlist (x:xs) = x + sumlist xs 

-- Driver Code
main = do
  print (sumlist [2,3,7,9]) -- Output: 21"
Write an Object-Oriented Python program to find the area of a triangle given the base and the height.,"class Triangle:
    def __init__(self, base, height):
        self.base = base
        self.height = height

    def calculate_area(self):
        area = (self.base * self.height) / 2
        return area

# Create triangle
triangle = Triangle(10, 5)

# Find the area
area = triangle.calculate_area()

# Print the area
print(area)"
"Edit the code to print “Welcome to Python Programming” five times.print(""Hello Python"")","for i in range(5):
  print(""Welcome to Python Programming"")"
Design a function that uses a for loop to print all odd numbers from 1 to 10.,"def print_odd_numbers():
    for i in range(1, 11):
        if i % 2 != 0:
            print(i)

print_odd_numbers()"
Design a program in Python that will count the words in a sentence.This is a sample sentence.,"def word_count(sentence):
    words = sentence.split(' ')
    return len(words)

print(word_count('This is a sample sentence.'))"
"How can you create a Pandas DataFrame using a given list of dictionaries?[{""animal"": ""cat""}, {""animal"": ""dog""}, {""animal"": ""fish""}]","import pandas as pd
data = [{""animal"": ""cat""}, {""animal"": ""dog""}, {""animal"": ""fish""}]
df = pd.DataFrame(data)
print(df)"
How would you use Recursion to solve the Fibonacci Sequence in Python?,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))
    
print(fibonacci(10))"
Develop a program in Python to implement a Simple Linear Regression model.,"import numpy as np
import matplotlib.pyplot as plt

# generate dataset
x = np.random.rand(100, 1)
y = 4 + 3 * x + np.random.rand(100, 1)

# linear regression
x_b = np.c_[np.ones((100, 1)), x]
theta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)

# prediction
x_new = np.array([[0], [1]])
x_new_b = np.c_[np.ones((2, 1)), x_new]
y_predict = x_new_b.dot(theta_best)

# plot
plt.plot(x, y, ""b."")
plt.plot(x_new, y_predict, ""r-"")
plt.axis([0, 1, 0, 15])
plt.show()"
"Write a function to swap the entries in a list.[10, 20, 30, 40]","def swap(List): 
    temp = List[0] 
    List[0] = List[3] 
    List[3] = temp
    return List 
  
List = [10, 20, 30, 40]
print(swap(List))"
"Change the following program to use a try/except/finally block to handle errors.def read_file(file):
    with open(file) as f:
        for line in f:
            print(line)","try:
    def read_file(file):
        with open(file) as f:
            for line in f:
                print(line)
except IOError:
    print(""Error: Could not read file"")
finally:
    print(""Closing file"")
    f.close()"
"What data structure should be used to store a customer’s name, address, and phone number?","A dictionary or set can be used to store a customer’s name, address, and phone number. The customer's name would be used as the key and the associated customer information such as address and phone number would be stored as the value."
"Suggest a function to find the second highest element in a list.[10, 20, 30, 40]","def second_highest(List): 
    List.sort()
    return List[-2] 
  
List = [10, 20, 30, 40]
print(second_highest(List))"
"Suggest a sorting algorithm for an array that contains both duplicates and unique elements.[8, 4, 3, 5, 9, 8, 10]","A radix sort would be an appropriate sorting algorithm for an array that contains both duplicates and unique elements. Radix sorts start by sorting the array based on the least significant digit, and then sort based on the next digit, and so on."
Select all rows in a pandas dataframe where at least one value exists in the column named ‘name’.,selected_rows = df[df.name.notnull()]
"Create a function that returns the longest substring of the string given.string = ""Hello world!""","def longest_substring(string):
    curr_len = 1
    max_len = 1
    prev_index = 0
    n = len(string)
    visited = [-1] * 256
    visited[ord(string[0])] = 0
    for i in range(1,n):
        prev_index = visited[ord(string[i])]
        if prev_index == -1 or (i - curr_len > prev_index):
            curr_len+=1
        else:
            if curr_len > max_len:
                max_len = curr_len
            curr_len = i - prev_index
        visited[ord(string[i])] = i
    if curr_len > max_len:
        max_len = curr_len
    return max_len"
"Write a Python program to create a copy of a given set.my_set = {1, 2, 3, 4, 5}","def clone_set(my_set):
    new_set = set()
    for item in my_set:
        new_set.add(item)
    return new_set"
"Create a function to search the given list to find a key value and return its position.arr = ['a', 'b', 'c', 'd']
key = 'a'","def search(arr, key): 
    for i in range(len(arr)):
	    if arr[i] == key:
            return i 
    return -1"
"Given a list of integers, write a program to convert it into a list of strings.integers = [1, 2, 3, 4]","def convert_to_string(integers):
    string_list = []
    for item in integers:
        string_list.append(str(item))
    return string_list"
"Edit the Python code snippet to remove the syntax error.def calculate_area(length, width):
    area = length * width
    return “The area is” + area","def calculate_area(length, width):
    area = length * width
    return ""The area is "" + str(area)"
"Write a Python program to randomly sample a list without replacement.list = [30, 40, 50, 60, 70, 80]","import random

def sample_list(list):
    list_copy = list.copy()
    sampled_list = []
    while list_copy:
        element = random.choice(list_copy)
        sampled_list.append(element)
        list_copy.remove(element)
    return sampled_list"
You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10.,"for i in range(1, 11):
    square = i * i
    print(square)"
"Create a data structure in Python that stores the details of a shoe product.Name: ""Nike Air Max 720""
Price: $219.99
Size: 8
Color: White","class ShoeProduct:
    def __init__(self, name, price, size, color):
        self.name = name
        self.price = price
        self.size = size
        self.color = color"
"Given the following array, remove all duplicates and return a new array with the remaining elements.arr = [1, 2, 4, 3, 3, 2]","new_arr = list(set(arr))  # [1, 2, 3, 4]"
"Find the number of triplets in this array which sum up to zero.arr = [-1, 0, 1, 2, 3, 4]","The number of triplets in this array which sum up to zero is 1. The triplets are [-1, 0, 1]."
"Bring the following two variables into the same formatVariable one: 12,34
Variable Two: 21.103","Variable one: 12.34
Variable two: 21.103"
"Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values.Input: ['a',""a"",'b',1,1,1,'c']","my_list = ['a',""a"",'b',1,1,1,'c']
my_dict = {}
for i in my_list:
    my_dict[i] = my_dict.get(i, 0) + 1

print(my_dict) 
# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}"
"Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements.// Array A
import numpy as np
A = np.array([1, 4, 5, -3])","def max_difference(A):
    return max(abs(np.max(A) - np.min(A)), abs(A[-1] - A[0]))"
"Create a function in Python to modify the given list and remove all strings with length less than three.mylist = ['Apple', 'Cat', 'Hello', 'Hi']","def remove_short(mylist):
    mylist = [x for x in mylist if len(x) >= 3]
    return mylist
    
print(remove_short(mylist))
# Output: ['Apple', 'Hello']"
"Given an array of strings, sort the strings alphabetically.array = [""Banana"", ""Apple"", ""Orange""]","def sort_strings(array):
    return sorted(array)"
Describe a way to implement quicksort.,"Quicksort is an efficient sorting algorithm that works by selecting a ""pivot"" element from the array and partitioning the other elements into two sub-arrays based on whether they are less than or greater than the pivot element. Quicksort then recursively sorts the sub-arrays in the same way. The algorithm runs in O(nlog(n)) time and is one of the most widely used sorting algorithms."
"Generate a code to throttle a stream of messages that exceeds a set limit of messages within a certain time window.limit = 100
time_window = 5 seconds","import time

def throttle_messages(limit, window):
    count = 0
    start = time.time()
 
    while count < limit:
        next_message = yield
        count += 1
         
        end = time.time()
        if (end - start) > window: 
            count = 0
            start = end
            
    yield"
"Generate a code to find the kth smallest number in an unsorted list given three inputs (list, k and n).list = [12, 3, 5, 7, 19] 
k = 3
n = len(list)","def find_kth_smallest_number(list, n, k): 
  
    list.sort()

    # kth smallest element 
    return list[k-1]"
Create a python generator that prints fibonacci numbers from n to 2*n-1.n = 10,"def fibonacci_generator(n):
    a, b = 0, 1
    while a < 2 * n - 1:
        yield a
        a, b = b, a + b"
Generate a code to implement a binary search in an array with upto 1 million elements.,"def binary_search(arr, x): 
    l = 0
    r = len(arr) - 1

    while l <= r: 
        mid = l + (r - l) // 2
        if arr[mid] == x: 
            return mid 
        elif arr[mid] < x: 
            l = mid + 1
        else: 
            r = mid - 1
  
    return -1"
"Find the sum of two integers without using + or - signs.a = 7
b = 5","def add(a, b): 
    # Iterate till there is no carry  
    while (b != 0): 
          
        # Carry now contains common  
        # set bits of x and y 
        carry = a & b 
  
        # Sum of bits of x and y where at  
        # least one of the bits is not set 
        a = a ^ b 
  
        # Carry is shifted by one so that  
        # adding it to x gives the required sum 
        b = carry << 1
          
    return a"
"Given an array of integers, find the maximum possible sum of a subarray within the array.","def maxSubArraySum(arr):
    maxsum = arr[0] 
    for i in range(len(arr)):
        newSum = 0
        for j in range(1, len(arr)):
            newSum += arr[j]
            if(newSum > maxsum):
                maxsum = newSum
    return maxsum"
What does the 'break' keyword do in a loop structure in Python and how is it used?,"The 'break' keyword is used to break out of a loop prematurely. It causes an immediate exit from the loop, bypassing any remaining code in the loop. It is generally used inside a conditional statement, such as an 'if' statement, as it can be used to stop the loop from executing when a certain condition is satisfied. For example:

for number in range(10):
 if number == 5:
  break
 print(number)

This code will print the numbers 0 through 4 and will exit the loop once it reaches the number 5. If the 'break' statement is not used the loop will continue and print all the numbers up to 9."
"Code an algorithm to find the closest pair of elements in a given array with respect to a given target number.arr = [10, 22, 28, 29, 30, 40], target = 44","def closest_pair(arr, target): 
    min_difference = 999999
    min_pair = (-1, -1)
      
    # Iterate through all elements 
    for i in range(len(arr)): 
          
        # Loop through rest of elements 
        for j in range(i + 1, len(arr)): 
            diff = abs(arr[i] + arr[j] - target) 
          
            # Check for maximum difference 
            if diff < min_difference: 
                min_difference = diff 
                min_pair = (i, j) 
      
    return min_pair"
"Create a function in Python that takes a list and returns the first two elements that adds up to 0.[1, 5, 2, -7, 3]","def zero_sum_pair(list):
    # loop through the list 
    for i in range(len(list)): 
        for j in range(i + 1, len(list)): 
            if list[i] + list[j] == 0: 
                return [list[i], list[j]] 
    return None"
"How can you optimized the following program's runtime?def my_function(my_list):
    output = []
    for i in range(len(my_list)):
        output.append(my_list[i] * 2)
    return output","def my_function(my_list):
    output = []
    for i in range(0, len(my_list), 2):
        output.append(my_list[i] * 2)
    return output
By looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime."
"Given a Dataframe, select the two columns as specified and store into a new separate Dataframe.import pandas as pd 
  
data = {'Name':['Tom', 'nick', 'krish', 'jack'], 
        'Age':[20, 21, 19, 18] 
       } 

df = pd.DataFrame(data)  

cols = ['Name', 'Age']","import pandas as pd 
  
data = {'Name':['Tom', 'nick', 'krish', 'jack'], 
        'Age':[20, 21, 19, 18] 
       } 

df = pd.DataFrame(data)  

cols = ['Name', 'Age']

# Creating new Dataframe  
df_new = df[cols] 

print(df_new)"
"Create a for loop for the list.my_list = [1, 2, 3, 4]","my_list = [1, 2, 3, 4]

for item in my_list:
    print(item)"
Construct a syntax tree representing the following sentence.Bob likes apples.,"S
                      ┌───┴───┐
                      NP VP
                    ┌─┴─┐   │
                   Bob V  NP
                         │  │
                         V  N 
                         │ ┌─┴─┐ 
                         likes apples"
"Write a for loop for the following dictionary.my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}","my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}

for key, value in my_dict.items():
    print(key, value)"
"How can you combine these two lists without duplication?list_one = ['a', 'b', 'c']
list_two = ['c', 'd', 'e']","combined_list = set(list_one + list_two)
print(list(combined_list))  # ['a', 'b', 'c', 'd', 'e']"
"Create a new array containing the square of each element in the given array.my_array = [2, 3, 4, 5]","new_array = [] 
  
for x in my_array: 
   new_array.append(x * x) 
  
print(new_array) # [4, 9, 16, 25]"
"Print the following sentence in reverse order.""This is a coding challenge.""","print(""challenge. coding a is This"")"
Write a code that prints each word in a given string on a separate line.,"""""""
Write a code that prints each word in a given string on a separate line
""""""

def print_words(string):
    words = string.split() 
    for word in words:
        print(word)

if __name__ == '__main__':
    string = ""This is a coding challenge""
    print_words(string)"
"Complete the following code to delete the item at a given index from a list.index = 4
list_items = [2, 3, 4, 5, 6, 7, 8]","""""""
Complete the following code to delete the item at a given index from a list
""""""

index = 4
list_items = [2, 3, 4, 5, 6, 7, 8]

# remove the item at index 4
del list_items[index]

# print the list
print(list_items)"
"Print only the odd numbers from the given list.list_items = [2, 3, 4, 5, 6, 7, 8]","""""""
Print only the odd numbers from the given list
""""""

list_items = [2, 3, 4, 5, 6, 7, 8]

for item in list_items:
    if item % 2 != 0:
        print(item)"
"Classify the following object as having either a simple, complex or a composite data type.Dictionary",Complex data type.
"Create a for loop to iterate through a given list and print the list elements.list_items = [2, 3, 4, 5, 6, 7, 8]","""""""
Create a for loop to iterate through a given list and print the list elements
""""""

list_items = [2, 3, 4, 5, 6, 7, 8]

for item in list_items:
    print(item)"
"Identify a code snippet from the following four options.def calculate_sum(numbers):
    result = 0
    for num in numbers:
        result += num
    return result

for option in ['A', 'B', 'C', 'D']:
    print(option)","A is not a valid code snippet.

B is not a valid code snippet.

C is not a valid code snippet.

D is not a valid code snippet.

The correct code snippet is:

def calculate_sum(numbers):
    result = 0
    for num in numbers:
        result += num
    return result"
"Given two strings, find out if one is a permutation of the other.string1 = ""cat""
string2 = ""act""","def check_permutation(string1, string2):
    if len(string1) != len(string2):
        # The strings can't be permutations if they are different lengths
        return False
    
    # Convert the strings to lists
    list1 = list(string1)
    list2 = list(string2)
    
    # Sort the lists to make comparison easier
    list1.sort()
    list2.sort()
    
    # Compare the elements in the sorted lists
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    
    return True

# Example
print(check_permutation(""cat"", ""act"")) # Output: True"
"Using the following list of countries and their population, write a program that prints the name and population of the most populous country.countries = [{'name': 'India', 'population': 1367030000}, {'name': 'China', 'population': 1406918015}, {'name': 'United States', 'population': 327000000}]","def find_most_populous_country(countries):
    max_population = 0
    most_populous_country = None
    for country in countries:
        if country['population'] > max_population:
            max_population = country['population']
            most_populous_country = country
    return f'The most populous country is {most_populous_country[""name""]} with a population of {most_populous_country[""population""]}'

print(find_most_populous_country(countries)) # Output: The most populous country is China with a population of 1406918015"
Print a pyramid of stars that has 5 levels.,"for i in range(5):
    for j in range(i+1):
        print(""*"", end="" "")
    print("""")"
"Use the following code to print each letter of the string ""Hello World"" on a separate line.string = ""Hello World""","string = ""Hello World""
for letter in string:
    print(letter)"
"Edit the existing Python code to convert Fahrenheit (F) degrees to Celsius (C) degrees.def convert(F):
 return F + 32","def convert(F):
 return (F-32)*5/9"
Write an R code to get the names of all uncorrelated columns in a data frame.,"# Get all column names
all_columns <- names(data_frame)

# Create an empty vector
uncorrelated_columns <- c()
# Iterate each column name in the data_frame
for(column_name in all_columns) {
  # Store the correlations of each column in a vector
  correlations <- cor(data_frame[column_name], data_frame[-column_name])
  # If the value of a correlation it is below 0.8
  if(any(correlations < 0.8)) {
    # Add column name to empty vector
    uncorrelated_columns <- c(uncorrelated_columns, column_name)
  }
}"
Train a machine learning model to predict the stock price of a company based on historical data.Historical data for the company Apple Inc.,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression

# Read the dataset
dataset = pd.read_csv('Apple_Historical_Data.csv')

# Get target and predictors
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Train the Linear Regression model
lr_model = LinearRegression()
lr_model.fit(X, y)

# Predict stock price 
prediction = lr_model.predict(X)"
Create a GPT-2 model to generate text given a seed phrase.,"from transformers import GPT2Tokenizer, GPT2LMHeadModel
 
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')
 
def generate_text(seed_phrase):
    input_ids = torch.tensor(tokenizer.encode(seed_phrase)).unsqueeze(0)
    output_ids = model.generate(
        input_ids=input_ids, 
        max_length=100, 
        do_sample=True
    )
    return tokenizer.decode(output_ids[0])"
"Write a function in Python that takes in a list and returns the second largest elementlist_of_numbers = [5, 10, 15, 20]","def second_largest(list_of_numbers):
    max_num = max(list_of_numbers)
    sec_max_num = None
    for num in list_of_numbers:
        if num != max_num and (sec_max_num is None or sec_max_num < num):
            sec_max_num = num
    return sec_max_num"
Encrypt the following string using a substitution cipherthisisasupersecurestring,dnklkfaxvgpsvpytjimnzt
"Write an algorithm to calculate the maximum subarray sumlist_of_numbers = [-2, 3, 1, -4]","def max_subarray_sum(list_of_numbers): 
 
    max_so_far = 0
    max_ending_here = 0
 
    for i in range(0,len(list_of_numbers)): 
        max_ending_here = max_ending_here + list_of_numbers[i] 
        if (max_ending_here < 0): 
            max_ending_here = 0
  
        elif (max_so_far < max_ending_here): 
            max_so_far = max_ending_here 
              
    return max_so_far"
"Construct a code to replace all instances of 'A' with 'Z' in a given string.string = ""This is a string A with multiple A's""","def replace_letter_A(string):
    string = string.replace('A', 'Z')
    return string

print(replace_letter_A(string))"
"Rewrite the following code using List Comprehension to print the maximum number from a list of integers.numbers = [3, 2, 5, 4, 6]","max_num = max([num for num in numbers])
print(max_num)"
"Write a code to detect if a string is a palindrome or not. Output true if it is a palindrome, output false if it is not.""racecar""",true
"Write a code to accept a string and return the last character.""Hello World""",return string[string.length-1]
"You are given the following code. Write an 'assert' statement that checks if the email address is all lowercase or not.email = ""THIS_IS_TEST@EMAIL.COM""","assert email.lower() == email, ""Email address should be all lowercase"""
"Edit the following code to check if the resulting output of the division is an integer.a = 15
b = 4
output = a/b","if b != 0:
    output = a/b
    assert output.is_integer(), ""Result of division is not an integer"""
"Create a class in Python that implements an algorithm for sorting a list of numbers.list = [3, 2, 5, 1, 4]","class SortNum():
    def selection_sort(self, list):
        for i in range(len(list)):
            min_idx = i
            for j in range(i + 1, len(list)):
                if list[min_idx] > list[j]:
                    min_idx = j
            list[i], list[min_idx] = list[min_idx], list[i]
        return list"
"Sum the numbers in the following array and print the result.array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","total = 0
for row in array:
    for element in row:
        total += element
print(total)"
"Create a list of objects of the following class and print the objects as dictionary.class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year","cars = []
cars.append(Car(""Ford"", ""Mustang"", 2019))
cars.append(Car(""Toyota"", ""Corolla"", 2020))

for car in cars:
    print(car.__dict__)"
"Create a Django view to handle GET requests for displaying a list of products.appname/models.py

class Product(models.Model):
    name = models.CharField(max_length=200)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)","# Create a Django view to handle GET requests.
def product_list_view(request):
    # Get the list of products
    products = Product.objects.all()

    # Return the list of products
    context = {
        'products': products
    }
    return render(request, 'product_list.html', context)"
"Return the index of the first occurrence of an element in the given array.arr = [2, 3, 3, 1, 5, 2]","def first_occurrence(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1"
"Print the first element that occurs in the list and is divisible by 5.list = [2, 3, 5, 10, 15, 30]","for element in list:
    if element % 5 == 0:
        print(element)
        break"
"You need to program a function to calculate the dot product of two arrays.array1=[1, 2, 3]
array2=[-1, 0, 4]",7
"You need to write a function to remove all the elements with a given value from a given array.array1=[1, 1, 2, 3, 4, 5, 1]
value=1","[2, 3, 4, 5]"
"You need to write a program that takes a list of words as an input and returns the longest word in the list.word_list=[""cat"", ""dog"", ""elephant"", ""ants""]",elephant
"You need to write a program that takes a given string and checks if it is a valid IP address.string1=""255.255.0.10""",true
"You need to write a program to print out the prime numbers between a given range of numbers.start=1 
end=50","2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47"
Execute this line of code and tell me what is the value of `y`?int x = 5; int y = 3*x+2;,y = 17
"What am I trying to do with this code?i = 0
while i < 5:
    print(i)
    i += 1",You are trying to print the numbers 0 to 4 (inclusive) by using a while loop.
"What is wrong with this code?str1 = 'This is a string'
str2 = str1
str2 += ' with a suffix'",The variable str1 is not updated and remains as 'This is a string' when you add a suffix to str2. This means that the values of str1 and str2 are no longer the same.
"What should I add in this function to generate a random number?def generate_random():
    # Your code here","import random
def generate_random():
    return random.randint(0,100)"
"Using Python, write code to check if a list contains duplicates or not.list = [10, 20, 30, 40, 50]","def has_duplicates(list): 
    seen = set() 
    for item in list: 
        if item in seen: 
            return True 
        seen.add(item) 
    return False"
"How can I get the last element of this list?list = [1, 2, 3, 4, 5]","The last element of the list can be accessed using the index -1 or using the list method pop(): 

last_element = list[-1] 

or 

last_element = list.pop()"
Construct a URL to search for a given query on Googlequery = 'Python programming',"url = 'https://www.google.com/search?q=' + query.replace(' ', '+')"
"What is the time complexity for this for loop?nums = [1,2,3,4,5]
for num in nums:
    print(num)",The time complexity for this loop is O(n) where n is the length of the list.
Describe the difference between lists and tuples,"The main difference between lists and tuples is that lists are mutable, meaning they can be changed, while tuples are immutable and cannot be changed. Lists are used when the data is expected to change, while tuples are used when the data is expected to stay the same. In addition, a list can contain any type of data, while a tuple can only contain one type of data. Lastly, a list uses square brackets, while a tuple uses parentheses."
"Using the following list of prime numbers, calculate their sum.[2, 3, 5, 7, 11, 13]",The sum of the numbers in the list is 51.
"Using the given data, find the average monthly temperature in Fahrenheit.June: 78.1, July: 87.8, August: 90",The average monthly temperature in Fahrenheit is 84.9.
Construct a class in Python that can calculate the volume of a cube given its side length.,"class Cube(object):
    
    def __init__(self, side_length):
        self.side_length = side_length
    
    
    def calculate_volume(self):
        return self.side_length * self.side_length * self.side_length"
"Using the given array of objects, find the object with the highest age.[{name: ""John"", age: 25}, {name: ""Jack"", age: 50}, {name: ""Jill"", age: 30}]","The object with the highest age is {name: ""Jack"", age: 50}."
"Turn the statement into a valid predicate in first-order logic.""All animals are mammals""",∀x(Animal(x) → Mammal(x))
Generate pseudocode to solve the Fibonacci sequence.,"Function Fibonacci(n)
  Declare f0, f1, fn
  f0 = 0
  f1 = 1

  if n = 0
    fn = f0
  else if n = 1
    fn = f1
  else
    for i = 2 to n
      fn = f0 + f1
      f0 = f1
      f1 = fn
    end for

    return fn
End Function"
"Edit the following function to allow it to accept negative numbers.function isPositive(num) {
  return num >= 0;
}","function isPositive(num) {
  return num > 0;
}"
Write a Python program to find all numbers from 1 to the given number n which are divisible by 6.,"def findDivisibleBySix(n):
  result = []
  for i in range(1, n+1):
    if i % 6 == 0:
      result.append(i)
  return result"
"Convert a date in the format ""MM/dd/yyyy"" to a timestamp.04/23/2021","import time
def convert_date_to_timestamp(d):
    return time.mktime(time.strptime(d, ""%m/%d/%Y""))"
"Find all the prime numbers within a given range.2, 20","def get_primes_in_range(a, b):
    primes = []
    for num in range(a, b + 1):
        if all(num % i != 0 for i in range(2, num)):
            primes.append(num)
    return primes"
Design a recursanve function in Python that prints a given string in reverse.hello,"def print_string_reverse(str):
    if not str:
        return
    else:
        print_string_reverse(str[1:])
        print(str[0], end='')"
"Find the string between two substrings.String: This is a string
Start substring: is 
End substring: a",""" is """
"Parse the following XML data and print the value of the 'id' key as a string.<root>
    <id>123</id>
    <name>John Doe</name>
</root>",String value = '123'
Determine the syntactic structure of the following sentence.Sentence: She felt so excited that her application got approval.,Subject (she) + Verb (felt) + Adverb (so) + Adjective (excited) + Conjunction (that) + Subject (her application) + Verb (got) + Object (approval).
"Use the regular expression to extract the words ending with 'sion'.String: fusion, explosion, elision",(fusion|explosion|elision)$
"Construct an array from the given set of numbers.Set of numbers: [4, 8, 12, 16, 20]","int [] arr = {4, 8, 12, 16, 20};"
"Edit the given code to add a new element to the list.list = [1, 2, 3]","list = [1, 2, 3]
list.append(4) # Adding new element"
"Create a class called ""Animal"" containing three attributes - name, type and age.","class Animal:
    def __init__(self, name, type, age):
        self.name = name
        self.type = type
        self.age = age"
Write VBA for a search interface to pull information from one tab of an excel sheet to a different tab,"Sub search_interface()
 Dim sh As Worksheet, sh2 As Worksheet
 Set sh = ThisWorkbook.Sheets(""Sheet1"")
 Set sh2 = ThisWorkbook.Sheets(""Sheet2"")

 For Each row In sh.Rows
   If row.Cells(1, 1) = ""Search Term"" Then
     Exit For
   End If
  
   If row.Cells(1, 1) = sh2.Cells(1, 2) Then
     For col = 1 To 4
       sh2.Cells(2, col).Value = row.Cells(1, col).Value
     Next col
   End If 
 Next row 
End Sub"
"Generate code to calculate the average age of a group of people.[[""Person"", ""Age""],
[""Jim"",26],
[""John"", 39],
[""Tracy"",19]]","def average_age(people):
    total_age = 0
    for p, a in people:
        total_age += a
    return total_age/len(people)"
Create a Matlab program to find the sum a given seriesThe given series is 1 + 1/4 + 1/9 + ...,"sum_series = 0;
for i = 1:100
    sum_series = sum_series + 1/i^2;
end

fprintf('The sum if the series is: %f\n',sum_series);"
Define an iterator class in Python.,"class myIterator:
    def __init__(self, data):
        self.data = data
        self.index = 0
        
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.index >= len(self.data):
            raise StopIteration
        item = self.data[self.index]
        self.index += 1
        return item"
Create a class in Python that can be used as a context manager.,"class myContextManager:
    def __init__(self, name):
        self.name = name
        print(""Context Manager initialized."")
        
    def __enter__(self):
        print(""Entering context."")
        return self
        
    def __exit__(self, type, value, traceback):
        print(f""Exiting context: {self.name}"")"
Write a function to check whether a linked list contains a given value.,"def contains(value, head):
    current_node = head
    while current_node is not None:
        if current_node.value == value:
            return True
        current_node = current_node.next
    return False"
"Consolidate the following array into a dictionaryarr = [(""apple"", 1), (""banana"", 2), (""orange"", 3)]","dict(arr)
# Result: {'apple': 1, 'banana': 2, 'orange': 3}"
"Write a Python program to implement Find-Max algorithm.arr = [10, 7, 8, 11, 15]","def FindMax(arr):
    curr_max = arr[0]
    curr_index = 0
    for i in range(len(arr)):
        if arr[i] > curr_max:
            curr_max = arr[i]
            curr_index = i
    return curr_max, curr_index

if __name__ == ""__main__"":
    arr = [10, 7, 8, 11, 15]
    curr_max, curr_index = FindMax(arr)
    print(""Max element:"", curr_max)
    print(""Index of max element:"", curr_index)"
Define a function in Python that calculates the sum of the sum of the elements of a nested list.,"def nestedListSum(nested_list):
    total = 0
    for sub_list in nested_list:
        total += sum(sub_list)
    return total"
Write a Python program to compare two dictionaries by key.,"def compare_dicts_by_key(dic1, dic2):
    if len(dic1) != len(dic2):
        return False
    for key in dic1:
        if key not in dic2 or dic1[key] != dic2[key]:
            return False
    return True"
Generate a list of random alphanumeric strings of length 25.,"import random
import string

def random_strings_list(length):
    alphanumeric_chars = string.ascii_letters + string.digits
    strings_list = []
    for _ in range(length):
        random_string = ''.join(random.choices(alphanumeric_chars, k=25))
        strings_list.append(random_string)
    return strings_list"
"Write a Python program to format the following list of IP addresses.ip_addresses = [""192.168.1.1"", ""255.255.255.255"",""8.8.8.8""]","def format_IP_addresses(ip_addresses):
    return [str(IPAddress(ip)) for ip in ip_addresses]"
Create a list in Python that contains the first 10 multiples of 3.,"multiples_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]"
What is the difference between a string in Python and a list?,"In Python, strings are immutable which means they can not be changed once created. On the other hand, a list is mutable, meaning the elements can be altered after the list is created. Additionally, strings are sequences of characters, whereas lists are sequences of any type of data."
"Write a TypeScript script to sort an array of names in alphabetical order.The following array of names: [""John"", ""James"", ""Karl"", ""Jane"", ""Jill""]","let sortArrayByName = (array: string[]) => {
  array.sort(function (x, y) {
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  });
  return array;
};

let names = [""John"", ""James"", ""Karl"", ""Jane"", ""Jill""];

sortArrayByName(names);
console.log(names);"
Create a function to generate random numbers from 0-99.,"import random

def random_number():
    return random.randint(0,99)"
"Create a function to check whether a given value is in an array.arr = [1,2,3,4]
x = 2","def is_value_in_arr(arr, x):
    if x in arr:
        return True
    else:
        return False"
Create a function to generate Fibonacci numbers less than 100.,"def generateFibonacci(num):
    a = 0
    b = 1
    fib_sequence = []
    while a < num:
        fib_sequence.append(a)
        a, b = b, a + b
    return fib_sequence"
Suggest a way to create a linked list in python.,"class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return

        current = self.head
        while current.next:
            current = current.next

        current.next = new_node"
"Create a class that prints out the following message: ""Welcome to the world of programming!""","class WelcomeMessage:
    def __init__(self):
        print(""Welcome to the world of programming!"")"
How would you create an API endpoint that returns a list of users?,"import flask

app = flask.Flask(__name__)

@app.route(""/users"", methods=(""GET"",))
def get_users():
    users = [
        {""name"": ""John Smith"", ""age"": 45},
        {""name"": ""Tim Jones"", ""age"": 34},
        {""name"": ""Alice Jackson"", ""age"": 24}
    ]
    return flask.jsonify(users)"
Write code to output the sum of the numbers 1-100.,"def sum_nums(n):
    total = 0
    for i in range(1,n+1):
        total += i
    return total

print(sum_nums(100))"
"Write a script that inputs a list and converts the list of strings into a dictionary.list = [""ABC"", ""XYZ"", ""PQR""]","dict = {
     ""ABC"": ""ABC"", 
     ""XYZ"": ""XYZ"", 
     ""PQR"": ""PQR""}"
Generate a link of the page given below.Page URL: www.example.com/product/apple,"<a href=""www.example.com/product/apple"">www.example.com/product/apple</a>"
"Extract all instances of a specific word in the given text.Text: The quick brown fox jumps over the lazy dog.
Word: j","[""jump"", ""jumps""]"
"Write a Python function that generates a key-value pair for the given array.arr = [1, 2, 3, 4]","def generate_key_value(arr):
    key_val_pairs = {k:v for k,v in enumerate(arr)}
    return key_val_pairs

print(generate_key_value(arr))

Output:
{0: 1, 1: 2, 2: 3, 3: 4}"
Create a MongoDB query that retrieves all the documents whose 'name' field contains the given string.String: Hi,db.collection.find({name: /.*Hi.*/})
You are given a text and the task is to output each individual word in the text along with its character count.Text: How are you doing?,"How: 3
are: 3
you: 3
doing: 6
? :1"
Develop an Angular application that displays the current date and time.,"import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
  <h1>{{ dateTime | date:'dd/MM/yyyy HH:mm:ss' }}</h1>
  `
})
export class AppComponent {
  dateTime = new Date();
}"
"Compute the sum of a given array using a Python function.arr = [1, 2, 3, 4]","def compute_sum(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum

print(compute_sum(arr))

Output:
10"
"Write a code to print the largest element of an array if the array contains all negative numbers.arr = [-10, -20, -50, -30]","def largest_negative_number(arr): 
    largest = float('-inf')
    for i in range(len(arr)): 
        if arr[i] > largest: 
            largest = arr[i] 
    return largest 
  
# Driver Code 
arr = [-10, -20, -50, -30] 
  
print(largest_negative_number(arr))"
"Write a function to merge two sorted lists into one sorted list.list1 = [3, 5, 7]
list2 = [1, 4, 6]","def merge_lists(list1, list2):
    final_list = []
    i, j = 0, 0
    
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            final_list.append(list1[i])
            i += 1
        else:
            final_list.append(list2[j])
            j += 1
    
    while i < len(list1):
        final_list.append(list1[i])
        i += 1

    while j < len(list2):
        final_list.append(list2[j])
        j += 1
    
    return final_list

print(merge_lists(list1, list2))"
"Given an input of numbers, sort the numbers in descending order.arr = [6, 2, 5, 3, 9]","def sort_numbers_desc(arr): 
    for i in range(len(arr)): 
  
        max_element = arr[i] 
        max_index = i 
  
        for j in range(i+1, len(arr)): 
            if arr[j] > max_element: 
                max_element = arr[j] 
                max_index = j  
  
        arr[i], arr[max_index] = arr[max_index], arr[i] 
    return arr

print(sort_numbers_desc(arr))"
Create a function that prints the binary representation of a number.number = 5,"def print_binary(number): 
    binary_string = """"
    while number != 0: 
        remainder = number % 2
        binary_string = str(remainder) + binary_string
        number = number // 2
    return binary_string 

print(print_binary(number))"
"Write code to remove duplicates and maintain the order of elements in a given list.list = [3, 1, 7, 5, 3, 8, 7]","def remove_duplicates(list): 
    new_list = []
    for element in list:
        if element not in new_list:
            new_list.append(element)
    return new_list

print(remove_duplicates(list))"
"Write a regular expression to extract the city names from the following string.address: #38 number street, new york city, san jose, CA","import re

address_string = ""#38 number street, new york city, san jose, CA""

pattern = r'(?:,|^)([\s\w]*)(?:,|$)'

result = re.findall(pattern, address_string)
print(result) // ['new york city', 'san jose']"
Suggest a better algorithm than Bubble sort for sorting a large array.,"Merge sort is an efficient sorting algorithm that uses divide and conquer approach. It divides the array into two halves, recursively sorts them and then merges them. Merge sort has a time complexity of O(nlog(n)) and is efficient for large arrays."
"Identify the error in the code given below.# Sum of elements in a list

my_list = [1, 2, 3]

sum = 0

for i in range(my_list):
    sum += i

print(sum)","The error is in line 6 while using the range function. The range function expects the start and end parameters to be int type, but in this case the parameter passed to the range function is a list. This should be changed to range(len(my_list)) so that the code will iterate over the elements of the list instead."
Write a code to shuffle a list randomly in Python,"import random

my_list = [1, 2, 3, 4, 5]

random.shuffle(my_list)

print(my_list)"
"Given two string, how would you find the longest common substring?","The longest common substring can be found by traversing the two strings simultaneously and comparing the characters. If the characters match, we will increase the substring length by 1 and check for the next characters. In the case of a mismatch, the substring length is set back to 0. We will find the largest value of the substring length at the end of traversal and that value gives us the longest common substring."
Suggest a data structure for storing a collection of countries and their corresponding population.,"A dictionary would be a suitable data structure to store a collection of countries and their corresponding population. The country name could be used as the key and the population could be used as the value. For example:

countries_population = {
    'United States': 329_467_000,
    'Canada': 36_323_167,
    'China': 1_393_783_836,
    'India': 1_380_004_385
    }"
Classify whether the following statement is an input or an output.Print the sum of the two numbers.,Input
Create a Python script that calculates the surface area of a cylinder.,"def surface_area_cylinder(radius, height):
    pi = 3.14
    return 2*pi*radius*(radius + height)"
"Suggest improvements to the following code to optimize its performance.requests = []
for i in range(100000000):
    requests.append(i)","requests = []
for i in range(100000000):
    requests.append(i)

# use list comprehension to generate the list in one line
requests = [i for i in range(100000000)]"
Suggest a better data structure that can be used to store a large amount of data in a way that querying data is fast.,"A better data structure to store a large amount of data in a way that querying is fast would be a Hash Table. Hash Tables store data in an associative array, allowing for fast searches and retrieval of data."
"Write a code to delete the 4th element from the list.mylist = [1, 2, 3, 4, 5]","mylist = [1, 2, 3, 4, 5]
del mylist[3]
print(mylist)"
"Write a code to append a character at the start and end of a given string.word = ""hello""","word = ""hello""
word = '$' + word + '$'
print(word)"
What is the time complexity of inserting a value into a singly linked list?,"The time complexity of inserting a value into a singly linked list is O(1), as it is a constant time operation."
Suggest a method to convert a given array into a min-heap.,Heapify is one of the methods to convert a given array into a min-heap. This process involves repeatedly swapping the root element with its smallest child (if it exists) to satisfy the min-heap property.
How would you parse a URL into its individual components?,"A URL can be parsed into its individual components by using string manipulation and built-in methods such as ``split()`` and ``replace()``. The components generally include the protocol, host name, path, query string and fragment."
"Modify the following code to return the product of all numbers in a given list.def product_list(numbers):
    # Initialize the result
    result = 1
    # Iterate over the input numbers
    for x in numbers:
        result = result * x
    # Return the result
    return result","def product_list(numbers):
    # Initialize the result
    result = 1
    # Iterate over the input numbers
    for x in numbers:
        result *= x
    # Return the result
    return result"
Change the following code to make it easier to reada=3;b='aa';b*=a;print(b),"a = 3
b = 'aa'
b = b * a
print(b)"
"Change the following code to reduce its running timefor i in range(0, len(nums)):
    if nums[i] == target:
        return i","def find_target(nums, target): 
    for i, num in enumerate(nums):
        if num == target:
            return i
    return -1

if __name__ == '__main__':
    nums = [2, 3, 5, 7]
    target = 5
    index = -1
    for i in range(0, len(nums)):
        if nums[i] == target:
            index = i
            break
    if (index == -1):
        print(""Target not found!"")
    else:
        print(""Target found at index:"", index)"
"Can you modify the program so that it prints out all words in the sentence along with their count?""The quick brown fox jumped over the lazy dog.""","def print_words_with_count(sentence):
  word_count = {}
  words = sentence.split()
  
  for word in words:
    if word not in word_count:
      word_count[word] = 1
    else:
      word_count[word] += 1
  
  for word, count in word_count.items():
    print(""Word: %s  Count: %d"" % (word, count))"
Modify the program to support calculating Fibonacci numbers up to the nth number.,"def FibonacciSeries(n):
    if n <= 0:
        return [0]
    elif n == 1:
        return [0,1]
    else:
        series = [0,1]
        for i in range(2, n):
            curr_num = series[i-1] + series[i-2]
            series.append(curr_num)
        return series"
"Generate a program to reverse a string and remove all the white spaces from the string.""  The  quick  brown  fox  jumped  over  the  lazy  dog.  ""","def reverse_and_trim(s): 
    s = s.strip() 
    s = s.replace("" "", """") 
    return s[::-1]"
"Generate a code to capitalize the first letter of each word of a given sentence.text = ""This is a sample sentence.""","def capitalize_first_letter(text):
    words = text.split(' ')
    capitalized_words = [word[0].upper() + word[1:] for word in words]
    return ' '.join(capitalized_words)

text = ""This is a sample sentence.""
capitalized_text = capitalize_first_letter(text)
print(capitalized_text) # Output: This Is A Sample Sentence."
"Implement a function to insert an element into a binary search tree.tree = 
    5
   / \
  2   8","def insert(self,val): 
	if not self.root: 
		self.root = Node(val) 
	else: 
		current = self.root
		while True: 
			if val < current.val: 
				if current.left: 
					current = current.left 
				else: 
					current.left = Node(val) 
					break
			elif val > current.val: 
				if current.right: 
					current = current.right 
				else: 
					current.right = Node(val) 
					break
			else: 
				break"
Write code to count the number of times a given pattern has occured in a given string.Text: “This is a test string to practice coding. This string contains the pattern “is”,"def countOccurrence(txt, pattern):
  count = 0
  for i in range(len(txt)):
    if txt[i:i+len(pattern)] == pattern:
      count += 1
  return count"
"You need to read a text and detect if the sentence contains any curse words or not. Output true if there is a curse word, output false if there is not.When I saw the movie, I was so angry that I wanted to scream.",false
"You have to read a set of numbers and report the number of positive numbers.[-1, -43, 2, 6, 0, 18]","int count_positive(int arr[], int size) 
{ 
  
    int count = 0; 
    for (int i = 0; i < size; i++) 
        if (arr[i] > 0) 
            count++; 
  
    return count; 
} 

int arr[] = {-1,-43,2,6,0,18}; 
int n = sizeof(arr)/sizeof(arr[0]); 
count_positive(arr, n);"
Generate random numbers 0 to 1000.,"import random

for i in range(10):
    print(random.randint(0, 1000))"
"Match the strings ""string1"" and ""string2"" using regex.string1=""Hello World""
string2=""Hello*World""","import re

string1 = ""Hello World""
string2 = ""Hello*World""

pattern = re.compile(string2.replace('*', '.'))
match = pattern.search(string1)

if match:
    print('Matched!')"
"Create a linked list with the following elements: 5, 6, 7, 8.","class Node: 
    def __init__(self, data): 
        self.data = data
        self.next = None

class LinkedList:

    def __init__(self):  
        self.head = None

    def append(self, data):
        new_node = Node(data)

        if self.head == None:
            self.head = new_node
        else:
            curr = self.head
            while curr.next != None:
                curr = curr.next
            curr.next = new_node

list = LinkedList() 
list.append(5) 
list.append(6) 
list.append(7) 
list.append(8)"
Implement a search() function that uses binary search to find a given element in an array.,"def search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1"
Generate a random sample with size n from a given pandas DataFrame.,"import pandas as pd

def sample_df(df,n):
    return df.sample(n)"
Create a Flask application to redirect the user to a given URL when the user input is valid.,"from flask import Flask, redirect, request

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if request.form['userInput']:
            url = 'https://www.example.com'
            return redirect(url)
    return '''
    <form method=""POST"">
        <input type=""text"" name=""userInput"" placeholder=""Type something.."" />
        <input type=""submit"" value=""Submit"" />
    </form>
    '''

if __name__ == ""__main__"":
    app.run()"
"Write a Python program to add the items of two given lists and create a new list.[1, 2, 3], [4, 5, 6]","newList = [x + y for x, y in zip([1, 2, 3], [4, 5, 6])]"
Write a regex expression to match the given input.abbccd,^(a|b|c){2}d$
"Create an array with 3 strings, ""John"", ""Sam"" and ""Anna"".","string names[] = {""John"", ""Sam"", ""Anna""};"
"Develop an algorithm in Python to find the average of four numbers.[2, 4, 8, 5]","def avg(numbers):
 sum = 0
 for num in numbers:
  sum += num
 return sum/len(numbers)

average = avg([2, 4, 8, 5])
print(average)"
"Modify the code to convert any temperature from Celsius to Fahrenheitdef CtoF(x):
    #TODO","def CtoF(x):
    F = (9/5 * x) + 32
    return F"
"Write a function that switches the odd elements and the even elements in a listdef switch_list(mylist):
    #TODO","def switch_list(mylist):
    for i in range(0, len(mylist), 2):
        temp = mylist[i]
        mylist[i] = mylist[i + 1]
        mylist[i + 1] = temp
    return mylist"
Create a function that join two strings into one,"def join_strings(string1, string2):
    return string1 + string2"
"Given a list of strings, remove all strings in the listmyList = [""item1"", ""item2"", ""item3""]","def remove_all_strings(myList):
    myList.clear()
    return myList"
"Update the code to return a different string depending on the value of the variable testvar test = 3
def change(test):
  #TODO","def change(test):
    if test==1:
        return ""One""
    elif test==2:
        return ""Two""
    elif test==3:
        return ""Three""
    else:
        return ""Not Found"""
"Edit the code to add an if statement that returns the string ""even"" if the value of the variable is even, or the string ""odd"" if the value of the variable is odd.var number = 5
def even_odd(number):
  #TODO","def even_odd(number):
    if number % 2 == 0:
        return ""even""
    else:
        return ""odd"""
"What type of complexity will the following two sorting algorithms have?selection sort: O(n^2) 
bubble sort: O(n^2)",The selection sort algorithm will have a complexity of O(n^2). The bubble sort algorithm will also have a complexity of O(n^2).
"Design and implement a function that takes two lists of integers as parameters and returns the minimum difference between two elements of the two lists.list1 = [2, 4, 7, 13] 
list2 = [3, 8, 9, 14]","def min_difference(list1, list2):
    # Initialize the minimum difference to a large number
    min_diff = float('inf')

    for a in list1:
        for b in list2:
            # Update min_diff only if the difference 
            # between a and b is smaller than min_diff 
            min_diff = min(min_diff, abs(a - b))
    
    return min_diff"
Find the longest substring with non-repeating characters,"def longest_substring(string):
    # Initialize the max length and the substring
    max_length = 0
    substring = ''

    # Create an empty set to store previously seen characters
    char_set = set()

    # Iterate over the string
    for char in string:
        # If the character hasn't already been seen,
        if char not in char_set:
            # add it to the set
            char_set.add(char)
            # and extend the substring
            substring += char
        else:
            # if the character has already been seen
            # check whether the current substring is longer than the current max length
            if len(substring) > max_length:
                max_length = len(substring)
            # Clear the set and the substring
            char_set.clear()
            substring = ''

    # Check the last substring
    if len(substring) > max_length:
        max_length = len(substring)
    
    return max_length"
"Create a for loop in Python to iterate over all items in a list.my_list = [1, 2, 3, 4, 5]","for item in my_list:
    print(item)"
Describe in code what is supervised learning.,"Supervised learning is a type of machine learning that uses labeled data to train algorithms to predict outcomes. It involves using labeled data points as input and output to teach the machine how to predict outcomes. The algorithm is “supervised” because it has a pre-defined set of examples to learn from, making it easier to predict future outcomes."
Construct a function convert a given number to binary format.Input Number: 15,"def convert_to_binary(num):
    binary = ""{0:b}"".format(num)
    return binary
 
# Convert 15 to binary
binary_value = convert_to_binary(15)
print(binary_value) # prints ""1111"""
"Design a program to partition an array into two subarrays such that the difference between the sum of the two subarrays is minimum.Input Array: [1, 6, 5, 11, 3]","def min_partition_array(arr):
    total = 0
    for i in arr:
        total += i
    sum1, sum2 = 0, total
    n = len(arr)
    flag = [[False for i in range(total + 1)] for j in range(n + 1)]
    flag[0][0] = True
    for i in range(1, n + 1):
        for j in range(total + 1):
            if arr[i - 1] <= j:
                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]
            else:
                flag[i][j] = flag[i - 1][j]
    for j in range(0, int(total / 2) + 1):
        if flag[n][j]:
            sum1 = j
            sum2 = total - j
            break
    return sum1, sum2
 
# Partition [1, 6, 5, 11, 3]
subarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])
print ((subarr1, subarr2)) # prints (8, 9)"
Edit the program such that it prints the elements in a deck of cards in a specific format.,"# Symbols for the different ranks
ranks = [""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""Jack"", ""Queen"", ""King"", ""Ace""]
# Symbols for the different suits
suits = [""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""]

# Create a deck of cards as a 2D array
deck = []
for i in range(len(ranks)):
    for j in range(len(suits)):
        deck.append([ranks[i], suits[j]])

# Print the elements in the deck array
for i in range(len(deck)):
    rank = deck[i][0]
    suit = deck[i][1]
    print(""Card %d: %s of %s"" % (i+1, rank, suit))"
Suggest a method to remove the pair of parentheses ( ) and the words inside them from the following python string.my_string = 'This is (a sample) string with (parentheses)',"import re

my_string = 'This is (a sample) string with (parentheses)'
op = re.sub(r'\([^)]*\)', '', my_string)
print(op)"
Create a Python class for a car with two methods.,"class Car:
    def __init__(self, color, model):
        self.color = color
        self.model = model
    
    def start(self):
        print(""Starting car"")

    def stop(self):
        print(""Stopping car"")"
Write a loop in Python to find all numbers below 100 that are divisible by 7.,"for i in range(1,100):
    if i % 7 == 0:
        print(i, end="" "")"
Create a function to divide two numbers and return an integer result.,"def div(x, y):
    if y == 0:
        raise ValueError('Cannot divide by zero')
    else:
        return x // y"
Create a function that will take a string as an input and returns the number of upper case letters in it.,"def countUpperCase(string):
    # Initialize counter variable
    count = 0

    # Loop through characters in string
    for c in string:
        # If character is upper case increment counter
        if c.isupper():
            count += 1

    return count"
Create a list containing the even numbers from #1 to #10.,"[2, 4, 6, 8, 10]"
"Edit the error in this code.def my_function(x, y, z):
    a = x + 5y - z","def my_function(x, y, z):
    a = x + 5*y - z"
"Create a script that prints the duplicate elements from a given list of numbers.my_list = [1, 2, 3, 2, 3, 4, 5]","my_list = [1, 2, 3, 2, 3, 4, 5]

duplicated_nums = []
for i in my_list:
    if my_list.count(i) > 1:
        duplicated_nums.append(i)

print(list(set(duplicated_nums))) # The output will be [2, 3]"
"Change this list of words into a list of strings.my_list = [""apple"", ""banana"", ""orange""]","my_list = [""apple"", ""banana"", ""orange""]

my_list = list(map(str, my_list)) # The output will be['apple', 'banana', 'orange']"
What is the sum of all the even numbers in the range 1-100 inclusive?,2550 # The output will be 2550
What is the Big O notation for a linear search?,"The Big O notation for a linear search is O(n), where n is the number of elements in the given list."
"Given a binary tree, write a function to serialize and deserialize the tree.","def serialize(root):
    if not root:
        return ""None""
 
    serializedTree = root.val
 
    serializedTree += "","" + serialize(root.left)
    serializedTree += "","" + serialize(root.right)
    return serializedTree
 
def deserialize(serializedTree):
    q = deque(serializedTree.split(','))
 
    def recur(q): 
        val = q.popleft()
        if val == 'None':
            return None
        count = TreeNode(val)
        count.left = recur(q)
        count.right = recur(q)
        return count
 
    return recur(q)"
What are the prerequisites for learning Python?,"The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc."
Create a function which takes in a string and returns a dictionary that counts its character frequency.,"def char_frequency(string): 
    counts = {}
    for char in string:
        if counts.get(char) == None: 
            counts[char] = 1
        else: 
            counts[char] += 1
    return counts"
How would you flatten a two dimensional list?,One way to flatten a two dimensional list is to use the itertools.chain() method. This method takes an iterable of iterables and returns a single iterable that contains all the elements of the original iterables.
What is the most efficient way to search for an element in a list?,"The most efficient way to search for an element in a list is by using a binary search, which is a divide and conquer search algorithm that halves the search space after each iteration. Binary search is generally more efficient than linear search, as it has a time complexity of O(log n)."
What do you need to do to print the element at the index 5 in an array?,"To print the element at the index 5 in an array, you need to use the index accessor brackets, passing the index of the element that needs to be printed as an argument. For example, if the array is named `arr`, you can print the element at index 5 by writing `cout << arr[5]`;."
"Name a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end.","A doubly-linked list is a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end. It consists of nodes, which contain data and two references (or links) each pointing to the previous and/or next node in the linked list. By traversing the list via these links it is possible to insert and delete elements anywhere in the list in constant time."
How can a mathematical function be represented in programming?,"A mathematical function can be represented in programming by defining a function that takes in relevant inputs and returns the output of the mathematical function. For example, the Pythagorean theorem can be represented by a function that takes two parameters, the length of the two sides of a right triangle, and returns the length of the hypotenuse of the triangle."
How can you find the maximum element in an array using the reduce() method?,The reduce() method can be used to find the maximum element in an array by applying a function to each element of the array that checks if the current element is greater than the previously seen maximum. This function can be used as the argument to the reduce() method and it will return the maximum value seen in the array.
Name a function in Python which can be used to convert a list to a dictionary.,The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values.
"Implement a function in Python that makes a copy of a list.my_list = [1, 2, 3, 4]","def copy_list(lst):
    new_lst = lst[:]
    return new_lst

my_list = [1, 2, 3, 4]
print(copy_list(my_list))"
"Implement a function in Python that sorts a list in ascending order using Bubble Sort algorithm.my_list = [4, 6, 3, 9, 1]","def bubble_sort(list):
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            if list[i] > list[j]:
                list[i], list[j] = list[j], list[i]
    return list

my_list = [4, 6, 3, 9, 1]
print(bubble_sort(my_list))"
"Create a function that takes in two numbers, a numerator and a denominator, and returns the result of the division expressed as a float.Numerator = 10, Denominator = 20","def float_division(num, denom):
    return float(num)/denom

print float_division(Numerator, Denominator)

Output: 0.5"
"Clean up the following function so that there are no redundant parentheses:def foo ( ( a ) ,  (b) ):
return a + b","def foo(a,b):
    return a + b"
"Analyze the following code and tell us what it does.def my_function(x):
     while x > 10:
        x += 1
    return x","The function takes an integer argument and checks if it is greater than 10. If the argument is greater than 10, the function increments the argument by 1. Finally, the function returns the modified argument."
"You need to design a calculator class with methods to perform basic calculations (add, subtract, multiply, divide, etc.).","class Calculator:
    def __init__(self):
        # initializing the calculator
        pass

    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        return a / b"
"Given an array, arrange the elements in order.arr = [3, 7, 2, 1, 5]","arr.sort()

Output: arr = [1, 2, 3, 5, 7]"
Create a program to print out all prime numbers below 100.,"# Function to print prime numbers 
def prime_numbers_below_100(): 
    for num in range(2, 100): 
        prime = True
        for i in range(2, num//2 + 1): 
            if num % i == 0: 
                prime = False
                break
        if prime: 
            print(num, end="" "") 
  
print(""Prime numbers below 100 are:"") 
prime_numbers_below_100()"
Design a data structure to store an undo history of size k.,"class HistoryDataStruct:
    def __init__(self, k):
        self.history_size = k
        self.history = [] # list of (undo command, state of only that undo command) of size k
        self.current_state = None # Current state of the data structure

    def save_states(self, state):
        self.history.append((state, self.current_state))

        if len(self.history) > self.history_size:
            self.history.pop(0)

        self.current_state = state

    def undo(self):
        command, prev_state = self.history[-1]
        self.history.pop(-1)
        self.current_state = prev_state
        return command"
Construct a for-loop for calculating the factorial of a given number.Number: 5,"def factorial(x): 
    fact = 1

    for i in range(1,x+1):
        fact = fact*i
        
    return fact

print(factorial(5))"
Construct a regular expression for validating that a string only contains the letters a-z and A-Z.,^[a-zA-Z]+$
Create a Fibonacci sequence of 5 numbers using Python.,"fib_sequence = [0, 1, 1, 2, 3]"
Create a linear regression model in R from the given datasets.Datasets: Advertising.csv,"model = lm(sales ~ ., data = Advertising)"
Define a function in Python to print a pattern of right-angled triangles of different sizes,"def rightangle_triangles_pattern(n): 
    pattern = """" 
    
    
    for i in range(1,n+1): 
        for j in range(1,i+1): 
            pattern = pattern + "" * ""
        pattern = pattern + ""\n""
  
   
    print(pattern) 
    
    
rightangle_triangles_pattern(5)"
"Extract the common key words from the given two strings using a Python script.String 1: This programming language is easy to learn
String 2: Comparing to other languages, this language is simpler","common_key_words = [""language"", ""easy"", ""learn"", ""comparing"", ""other"", ""simpler""]"
Construct a for-loop for finding all prime numbers between 1 and 50 in Python.,"for num in range(1, 51):
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)"
Create a switch statement for printing out the day for a given number,"switch (day) { 
    case 1: 
        console.log(""Monday""); 
        break; 
    case 2: 
        console.log(""Tuesday""); 
        break; 
    case 3:
        console.log(""Wednesday""); 
        break; 
   .....  
    case 7:
        console.log(""Sunday""); 
        break; 

    default: 
        console.log(""Invalid input""); 
        break; 
}"
"Create a function in Python to rearrange the characters of each word in a given string.string = ""Welcome to the world of Python""","def rearrangeWord(string): 
     temp_string = string.split("" "") 
     rearranged_string = [word[::-1] for word in temp_string] 
     return "" "".join(rearranged_string) 
print(rearrangeWord(string))"
"Develop a script in Perl to sort an array.arr = (11, 12, 4, 15, 6)","@sorted_arr = sort {$b <=> $a} @arr; 
print ""@sorted_arr\n"";"
"Correct the indentation in the code below.def my_function(num):
    res=num*2
  print(res)","def my_function(num):
    res = num * 2
    print(res)"
"Given a string, remove all consecutive duplicates in the string.string = ""aabbccddeeff""","# Function to remove all consecutive duplicates in the string
def remove_duplicates(string):
    # Empty string to store the result
    result = ''
    
    # Iterate over the string and keep track of the previous character seen
    prev = ''
    for char in string:
        # If the current character is not the same as the previous, then add it to the result
        if char != prev:
            result += char
        # Change the previous character seen to the current character
        prev = char
        
    # Return the result string
    return result

# Test the function by printing the string without consecutive duplicates
print(remove_duplicates(string))"
"Reverse the order of the given array without using inbuilt functions.nums = [12, 23, 34, 45]","# Function to reverse the order of the given array 
def reverse_array(nums):
    # Variable to store the result 
    result = []
    
    # Iterate over the provided array starting from the last element
    for i in range(len(nums) -1, -1, -1):
        # Append each number to the result array
        result.append(nums[i]) 
        
    # Return the result array
    return result

# Test the function by printing the array in reverse order
print(reverse_array(nums))"
"Randomly rearrange the elements of the given array.nums = [12, 23, 34, 45]","# Function to randomly rearrange the elements of the given array
import random 
def shuffle_array(nums):
    # Initialize a result array
    result = nums.copy()
    
    # Iterate over the array
    for i in range(len(nums)): 
        # Generate a random index between 0 and the current index
        j = random.randrange(0, i + 1)
        
        # Swap elements at the current and random indices
        result[i], result[j] = result[j], result[i] 
        
    # Return the result array
    return result

# Test the function by printing the shuffled array
print(shuffle_array(nums))"
"Write a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.string = ""abcdexyeffgghh""","# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters
def find_longest_substring(string):
    # Variable to store the starting index of the substring
    start_index = 0
    
    # Hashset to store characters in string
    visited = set()
    
    # Variables to store the length and the result substring
    length = 0
    result = """"
    
    # Iterate over the string
    for i in range(len(string)):
        # If the character is already in the hashset, then remove characters until this character from the hashset 
        if string[i] in visited:
            visited.remove(string[start_index])
            start_index += 1
            
        # Add the current character to the hashset
        visited.add(string[i])
        
        # Update length and result if length is greater than before
        if length < i - start_index + 1:
            length = i - start_index + 1
            result = string[start_index:i+1]
        
    # Return the result substring
    return result

# Test the function
print(find_longest_substring(string))"
Generate a random user agent string.,"import random

user_agents = [
    'Mozilla/5.0 (Linux; Android 7.0; SM-G935P Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.83 Mobile Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Safari/605.1.15',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'
]

def generate_user_agent():
    return random.choice(user_agents)

if __name__ == '__main__':
    print(generate_user_agent())"
"Convert the Python list below to a nested dictionary of countries and their populations.List = [[""United_Kingdom"", 66_000_000],[""United_States"", 323_000_000]]","countries = {
    ""United_Kingdom"": 66_000_000,
    ""United_States"": 323_000_000
}"
"Write a code to replace all the ""A""s in the string with a ""#"".sentence = ""Hello WAAorld""","def replace_A(sentence):
     return sentence.replace('A','#')

if __name__ == '__main__':
 print(replace_A(sentence))"
"Write a code to add two numbers given as input.a = 1
b = 5","def add(a,b):
    return a + b

if __name__ == '__main__':
    print(add(a,b))"
Find the first 5 numbers in the Fibonacci sequence.,"The first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3."
"Given a string of characters, write a function in Python that returns only the uppercase characters.""Hello, World!""","def get_upper(string):
  """"""Return only uppercase characters from given string.""""""
  return ''.join([c for c in string if c.isupper()])"
"Write a function in Python that takes a sentence and removes all spaces.""Hello, World!""","def remove_spaces(sentence):
  """"""Remove all spaces from a given sentence.""""""
  return sentence.replace("" "", """")"
"Write a function in Python that takes a string and splits it into a list of words.""Hello, World!""","def split_string(text):
  """"""Split a given string into a list of words.""""""
  return text.split()"
"Write a function in Python that takes a 2D array and returns the product of all elements in it.[[1, 2],[3, 4]]","def product_of_elements(arr):
  """"""Return product of all elements in a given 2D array.""""""
  product = 1
  for row in arr:
    for ele in row:
      product *= ele
  return product"
"Write a function in Python that takes two strings and returns a single string with the characters in alternating order.""Hello"", ""World!""","def alternate_string(str1, str2):
  """"""Return a string with characters in alternating order from two given strings.""""""
  result = """"
  for i in range(min(len(str1), len(str2))):
      result += str1[i] + str2[i]
  result += str1[i + 1:] + str2[i + 1:]
  return result"
Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not.9,"def is_prime(num):
  """"""Check if a number is a prime number.""""""
  if num <= 1:
    return False
  for i in range(2,num):
    if num % i == 0:
      return False
  return True"
"Write a function in Python that takes a list of strings and checks whether the list is empty or not.[""Hello"", ""World""]","def is_list_empty(list_str):
  """"""Check if a list is empty or not.""""""
  return len(list_str) == 0"
"Write a function in Python that takes a list of strings and checks if they are all the same length.[""Hello"", ""World""]","def is_all_same_length(list_str):
  """"""Check if all strings in a list are of same length.""""""
  return len(set(map(len, list_str))) == 1"
Write a Python class to implement a linked list.,"class Node:
 def __init__(self, data):
 self.data = data
 self.next = None

class LinkedList:
 def __init__(self):
 self.head = None
 
 def push(self, data):
 node = Node(data)
 node.next = self.head
 self.head = node
 
 def pop(self):
 data = self.head.data
 self.head = self.head.next
 return data"
Write a function that determines if a given substring is present in a string or not.,"def is_substring_present(string, sub_string):
 for i in range(len(string)):
 if string[i : (i + len(sub_string))] == sub_string:
 return True
 return False"
"Edit the following code to return the elements in the reversed order.def reverse_list(lst):
    for i in range(0, len(lst)):
        temp = lst[i]
        lst[i] = lst[len(lst)-1-i]
        lst[len(lst)-1-i] = temp
    return lst","def reverse_list(lst):
    for i in range(0, len(lst)//2):
        temp = lst[i]
        lst[i] = lst[len(lst)-1-i]
        lst[len(lst)-1-i] = temp
    return lst"
"What data structure can be used to convert the following list into a dictionary?[""apple"", ""pear"", ""mango"", 100, 0.25, False]","The data structure that can be used to convert the given list into a dictionary is a list of tuples. The tuples will comprise of the key and the value in the dictionary, e.g. (""apple"", ""pear""), (100, 0.25), (False, True). This can then be converted into a dictionary by using the dict() constructor."
Generate a random password with at least 8 characters that contain both upper and lowercase letters and numbers.,"import string
import random

def generate_password():
    char_set = string.ascii_uppercase + string.ascii_lowercase + string.digits
    return ''.join(random.sample(char_set, 8))"
"Write a function that takes two arguments, a number and a list, and returns the indices in the list that add up the number.","def two_sum(num, lst):
    indices = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] + lst[j] == num:
                indices.append([i,j])
    return indices"
"Given an array of integers, create a program that finds the longest subarray with a sum of 0.","def longest_sum_zero(arr):
    left = 0
    max_len = 0
    sum = 0
    hash_map = dict()
    for right in range(len(arr)):
        sum += arr[right]
        if sum == 0:
            max_len = max(max_len, right - left + 1)
        if sum in hash_map:
            left = max(left, hash_map[sum] + 1)
            max_len = max(max_len, right - left + 1)
        hash_map[sum] = right

    return max_len"
Return the index of the value if it is present in the list or -1 if it is not present.,"def search(lst, val):
    for i in range(len(lst)):
        if lst[i] == val:
            return i
    return -1"
Count the number of characters in a sentence that begin with a consonant.,"def count_consonants(sentence):
    consonants = 'bcdfghjklmnpqrstvwxyz'
    count = 0
    for ch in sentence:
        if ch.lower() in consonants:
            count += 1
    return count"
"Classify the following word as a noun, verb, adjective or adverb.Quickly",Adverb.
"Given a list of numbers, write a program which partitions the list into two parts, such that the sum of the elements in the first part exceeds the sum of the elements in the second part.","def partition(lst):
    left_sum, right_sum = 0, sum(lst)
    for i in range(len(lst)-1):
        left_sum += lst[i]
        right_sum -= lst[i]
        if left_sum > right_sum:
            return lst[:i+1], lst[i+1:]
    return None"
"Calculate the sum of all numbers in the given array that are multiples of the given number.numbers=[2, 4, 6, 8, 10, 12]
num=3","def sum_multiples(lst, n):
    return sum([i for i in lst if i % n == 0])"
How can you sort a list of dictionaries by values of the dictionary in Python?,"def sort_dict_by_values(dict_list):
    return sorted(dict_list, key=lambda k: k['value'])"
Write code to implement a priority queue in Python.,"class PriorityQueue:
    def __init__(self):
        self.queue = []
 
    # Create the enqueue(data) method to add data inside the queue
    def enqueue(self, data):
        self.queue.append(data)
 
    # Create the dequeue() method to remove data from the queue
    def dequeue(self):
        if self.queue:
            min_item = min(self.queue)
            self.queue.remove(min_item)
            return min_item
        else:
            return None"
How can you print a string character by character in Python?,"def char_by_char(string):
    for char in string:
        print(char)"
How can you generate a random array of 10 integers between 1 and 100?,"import random

def generate_random_array():
    array = []
    for i in range(10):
        array.append(random.randint(1,100))
    return array"
Write a code snipplet that computes the sum of numbers between 1 and 100.,"let sum = 0;
for(let i = 1; i <= 100; i++) {
  sum += i;
}"
"Write a Python function to convert a dictionary into a list of tuples.dictionary = {
  ""name"": ""John"",
  ""age"": 36
}","def dict_to_tuple(dictionary): 
  return [(key, value) for key, value in dictionary.items()]"
Write an R script that performs linear regression to predict a response variable.,"# load the data
data <- read.csv(""data.csv"")

# fit the model
model <- lm(formula = response ~ predictor, data = data)

# view the results
summary(model)"
"Convert the following English sentence into a Python function definition: ""Prints a string on the screen"".","def printString(string):
  print(string)"
Describe how the for loop works in Python?,"A for loop in Python is a type of looping construct that is used to iterate over a sequence of objects including strings, lists, tuples, dictionaries, and sets. A for loop has three components, the iterator (variable), sequence, and statements. With each iteration, the iterator is assigned the value of the next element in the sequence and the statements are executed. When all the elements in the sequence have been exhausted, the loop terminates."
"Write a script to delete elements that appear twice or more from a list.[3,6,3,7,2,6]","def delete_duplicate(lst):
    new_lst = [] 
    
    for i in lst: 
        if i not in new_lst: 
            new_lst.append(i) 
  
    return new_lst

lst = [3,6,3,7,2,6]
new_lst = delete_duplicate(lst)
print(new_lst)"
Name a data structure to store a large set of strings efficiently.,"The best data structure to store a large set of strings efficiently is a hash table. A hash table uses a hash function to map a set of strings to unique indices in an array, which allows for constant time lookups and operations."
How can a string be encoded in base64?,"A string can be encoded in base64 by using the string's bytes as input to the base64 encoding algorithm. The base64 encoding algorithm works by taking 3 bytes of input data and converting them into 4 bytes of output data. Each of these 4 bytes represent 6 bits of the original string, which is represented by 4 characters in the base64 string."
"Generate the following string from a list.[1, 2, 3, 4]","def generate_string(lst):
    s = """"
    for i in lst:
        s+=str(i)
    return s

lst = [1, 2, 3, 4]
s = generate_string(lst)
print(s)"
Construct a loop to display each character in a string one at a time.Hello World!,"def display_char(s):
    for char in s:
        print(char)

s = ""Hello World!""
display_char(s)"
Design an algorithm to check for missing numbers in an array of size n.,"def find_missing(nums):
    count = 1
    for num in nums:
        if not count in nums:
            return count
        count += 1
    return None"
"Create an algorithm to find the longest substring of a given string with distinct characters.Given string = ""abcabcabc""","def find_longest_substring(string):
    max_length = 0
    for i in range(len(string)):
        seen_chars = set()
        length = 0
        for j in range(i, len(string)):
            if string[j] not in seen_chars:
                seen_chars.add(string[j])
                length += 1
            else:
                break
        max_length = max(max_length, length)
    return max_length"
Create a regular expression to match a valid phone number (ex. 123-456-7890).,\d{3}-\d{3}-\d{4}
Design a function for creating an array with n elements and each element with the value of 0.,"def createArray(n): 
    return [0] * n"
What is the maximum depth of a binary tree of size n?,The maximum depth of a binary tree of size n is log2(n).
"Convert a given array of numbers into a square matrix.Given array = [1, 2, 3, 4]","def arrayToMatrix(array):
    n = int(len(array)**0.5)
    matrix = []
 
    for i in range(n):
        matrix.append(array[i*n:(i+1)*n])
 
    return matrix"
"Write a code snippet that prints out the number of times each character appears in a given string.Given string = ""welcome""","def char_frequency(string):
    freq = {}
    for c in string:
        if c in freq:
            freq[c] += 1
        else:
            freq[c] = 1
    for c, count in freq.items():
        print('{0} : {1}'.format(c, count))"
Design an algorithm that prints all the permutations of a given string.,"def generate_permutations(string):
    if len(string) == 1:
        return [string]
 
    all_perms = []
    for i, c in enumerate(string):
        other_chars = string[:i] + string[i+1:]
        other_perms = generate_permutations(other_chars)
        for perm in other_perms:
            all_perms.append(c + perm)
    return all_perms"
"Write a function that takes a list as a parameter and returns only the unique elements in the given list.[2, 4, 5, 2, 4, 8]","def get_unique_elements(lst):
    return list(set(lst))

unique_list = get_unique_elements([2, 4, 5, 2, 4, 8])
print(unique_list)   # output the list with only unique elements"
Create a variable that contains a tuple of integers.,"my_tuple = (1, 2, 3, 4, 5)"
Create a matrix of zeros with shape 4x3 using the NumPy library.,"import numpy as np

matrix = np.zeros((4,3))
print(matrix)   # Output the matrix of zeros"
"Write a code to send a message ""Hello World!"" using the Twilio API.","from twilio.rest import Client

# Your Account SID from twilio.com/console
account_sid = ""XXXXXXXXXXXXXXXXXXXXXXX""
# Your Auth Token from twilio.com/console
auth_token  = ""XXXXXXXXXXXXXXXXXXXXXXX""

client = Client(account_sid, auth_token)

message = client.messages.create(
    to=""+123456789"", 
    from_=""+0987654321"",
    body=""Hello World!"")

print(message.sid)   # Output the message id"
"Construct a for loop that prints out every third element of a given array.Array: [1, 2, 3, 4, 5, 6, 7]","for i in range(0, len(array), 3):
   print(array[i])"
"Develop a function to calculate the total amount of the order for an online store.ProductA: 15
ProductB: 10
PriceForProductA: 5
PriceForProductB: 10","def calculate_total_amount(products, prices):
 total_amount = 0 
 for i in range(len(products)):
 total_amount = total_amount + (products[i] * prices[i])
 return total_amount"
"Calculate the roots of a quadratic equation given its coefficients.Coefficients:  4, 3, 1","# Calculate the roots of the given equation
def quadratic_roots(a, b, c):
   # Calculate the discriminant
   discriminant = b**2 - 4*a*c
 
   # Calculate root1 and root2
   root1 = (-b + discriminant**0.5)/(2*a)
   root2 = (-b - discriminant**0.5)/(2*a)
   
   return root1, root2"
Convert the following floating-point number to its binary representation.Number: 12.25,1100.01
Write a code to print all numbers between a given range in the format shown belowStart = 1; End = 8;,"for i in range(1, 9):
    print(i, end=' ')"
"Create a function to perform insertion sortinglist = [5, 3, 8, 7, 1]","def insertion_sort(list):
    for i in range(1, len(list)):
        key = list[i]
        j = i -1
        while j >=0 and list[j] > key:
            list[j+1] = list[j]
            j -= 1
        list[j+1] = key
    return list"
Write a code to compute the XOR of two bitsA = 1; B = 0;,"def xor(A, B):
    if (A == B): 
        return 0  
    else: 
        return 1"
"Write a function to implement the sequential search algorithmarr = [8, 2, 5, 6, 9]","def sequential_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i
    return -1"
"Rewrite this program to use an embedded loop instead of recursion:

def fibonacci(num):
    if num == 0:
        return 0
    elif num == 1:
        return 1
    else:
        return fibonacci(num-1) + fibonacci(num-2)","def fibonacci(num):
    first = 0
    second = 1
    for i in range(num):
        temp = first
        first = second
        second = temp + second
    return first"
You are given a string and you want to sort all characters in the string alphabetically.,sorted_string = ''.join(sorted(string))
You are given a string and you want to count the number of words in it.,"def word_count(str): 
    return len(str.split(' '))"
"Given a matrix of size NxM, make a code that prints the transpose of the matrix.[[12,7],[4,5],[3,8]]","[[12,4,3],[7,5,8]]"
Construct a code to detect if a character is an uppercase letter or not.,"def is_uppercase(char): 
   if (char >= 'A' and char <= 'Z'): 
     return True
   else: 
     return False"
Use regular expression to match two strings.,"import re 
  
def match_strings(string1, string2): 
   
    if re.search(string1, string2): 
        print(""Match Found"") 
    else: 
        print('No Match Found')"
Generate a code to create a Pyramid of stars with the given height.,"def print_pyramid(height):
    for row in range(1, height + 1):
        for col in range(1, row + 1):
            print('*', end="" "")
        print('\n')"
"Implement an algorithm with the input that calculates the greatest common factor of two numbers.8, 32","def greatestCommonFactor(num1, num2):
    while num2 != 0:
        temp = num2
        num2 = num1 % num2
        num1 = temp
 
    return num1
 
gcf = greatestCommonFactor(8, 32) 
print(gcf) 
 
# Output: 8"
Provide the big-O complexity for a binary search Algorithm.,"The big-O complexity of a binary search Algorithm is O(log n). This is because the algorithm halves the input size with every iteration, so it only takes log n iterations to finish."
"Write a function to print the value at a given index in a given Array.testArray = [1, 2, 3, 4, 5]
index = 2","def printIndex(testArray, index):
    print(testArray[index])

testArray = [1, 2, 3, 4, 5]
index = 2

printIndex(testArray, index)
# Output: 3"
Write a function in Python that takes two numbers and swaps the values of the two numbers.,"def swap(x, y): 
    temp = x 
    x = y 
    y = temp 
  
x = 10
y = 5

swap(x, y) 

print(""x ="", x, ""y ="", y)

# Output: x = 5 y = 10"
"Write a MIPS code that adds two numbers and stores the result in a given memory address.num1 = 10
num2 = 15
memory address = $t0","addi $t1, $zero, 10 #store num1 in $t1
addi $t2, $zero, 15 #store num2 in $t2

add $t0, $t1, $t2 #add num1 and num2 and store result in $t0
sw $t0, ($memory address) #store result in specified memory address"
Create the following function that parses a valid IP address from a string and returns the address string without delimiters and periods.String = ‘192.168.137.8’,"def parse_ip_address(ip_string):
    ip_list = ip_string.split(""."")
    ip_str = """".join(ip_list)
    return ip_str

if __name__ == '__main__':
    ip_str = parse_ip_address(""192.168.137.8"")
    print(ip_str)"
Create a function to format a given phone number “(123) 456-7890” and output a string with canonical format of “+11234567890”.Phone number: (123) 456-7890,"def format_phone_number(number):
    parts = number.split('-')
    digits = []
    for part in parts:
        for char in part:
            if char.isdigit():
                digits.append(char)
    return '+1' + ''.join(digits)

if __name__ == '__main__':
    number = '(123) 456-7890'
    canon_number = format_phone_number(number)
    print(canon_number)"
"Create two sets and find the intersection between them.Set A: [1, 2, 3, 4]
Set B: [2, 4, 6, 8]","set_a = set([1, 2, 3, 4])
set_b = set([2, 4, 6, 8])

intersection = set_a.intersection(set_b)
# intersection is the set {2, 4}"
"Given a single linked list, reverse it in place.Head -> 1 -> 2 -> 3 -> 4 -> 5 -> None","Node* reverse(Node* head) 
{ 
    Node* current = head; 
    Node* prev = NULL; 
    Node* next = NULL; 
    if (current == NULL) 
        return NULL; 
    while (current != NULL) { 
        next = current->next; 
        current->next = prev; 
        prev = current; 
        current = next; 
    } 
    head = prev; 
    return head; 
}"
"Using Pandas, count how many rows have a value of ""United States"" in the ""Country"" column.Data: 

Country	State
United States	New York
Canada	Ontario
United Kingdom	London
United States	California","import pandas as pd

df = pd.DataFrame({'Country':['United States', 'Canada', 'United Kingdom', 'United States'],
                   'State':['New York', 'Ontario', 'London', 'California']})

count = df[df['Country'] == 'United States'].shape[0]
print(count)
# Output: 2"
"Extract a list of all the keys from a given dictionary.dict = {'Name': 'John', 'Age': 10, 'Gender': 'Male'}","key_list = list(dict.keys())
# Output: ['Name', 'Age', 'Gender']"
Create a regular expression to match phone numbers in the following format: 0000000000,"import re

regex = '^\d{10}$'"
"Given an array of positive integers, remove all the duplicates.List1 = [1, 2, 3, 3, 4, 4, 2]","List1 = list(set(List1))
# Output: List1 = [1, 2, 3, 4]"
"Create a method to build a dictionary that contains all even numbers from the given list.[2, 3, 7, 8, 10, 11]","def build_even_dict(numbers): 
 even_dict = {key: value for key, value in enumerate(numbers) if value % 2 == 0} 
 return even_dict"
"Make an array containing all elements of the given list that are even.[43,55,12,23,44]","even_array = [i for i in [43, 55, 12, 23, 44] if i % 2 == 0]"
"Make a function in Python which calculates the covariance between two given lists.list1: [1, 2, 3, 4, 5]
list2: [3, 4, 2, 4, 5]","def cov(list1, list2): 
    mean1 = sum(list1)/len(list1) 
    mean2 = sum(list2)/len(list2) 
    total = 0
	for i in range(len(list1)): 
        total += (list1[i] - mean1)*(list2[i] - mean2) 
    return total/len(list1)"
"Write a formula in Excel to calculate the total cost of a trip given the cost and quantity.Cost of hotel: $50
Quantity of rooms: 2",=50*2
Write an assembly language code to find the sum of two values stored in memory.,"LOAD value1
ADD value2
STORE result"
"Modify the following code to return the sum of an arraylet numbers = [1, 2, 3]","let numbers = [1, 2, 3]

function sumArray(arr) {
    let total = 0;
    for(let i = 0; i < arr.length; i++) {
        total += arr[i];
    }
    return total;
} 

console.log(sumArray(numbers));"
"Here's some Python code that finds the smallest number in a list. Edit it
to find the greatest number in a list.# list of numbers
list = [20, 10, 4, 45, 99]

# printing the smallest number
print(min(list))","# list of numbers
list = [20, 10, 4, 45, 99]

# printing the greatest number
print(max(list))"
"Write a for loop that prints out the series: 0, 4, 8, 12","for i in range(0, 13, 4):
    print(i)"
"Modify the following program to print the number of occurrences of the character e in string s.String s = ""Hello World!""","String s = ""Hello World!"";
int count = 0;

for (int i=0; i < s.length(); i++) {
    if (s.charAt(i) == 'e') {
        count++;
    }
}
System.out.println(""The number of occurrences of character 'e' in the string is: "" + count);"
What data structure can be used to store words of the same length?,"A data structure that can be used to store words of the same length is a Trie. A Trie is a tree-based data structure which stores characters of strings as nodes in a tree. The advantage of using a Trie for storing words of the same length is that it is an efficient data structure for retrieving words quickly. Furthermore, its storage space is optimized as it uses only the required amount of memory for storing words, regardless of the length of the words."
So you need to design a class for a Linked List.,"class ListNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        
    def is_empty(self):
        return self.head == None
    
    # Other method implementations go here"
"You need to read a code and check if it uses the best practices for writing code. Output true if it does, false if it does not.def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)",true
"Create a dictionary using comprehension technique in Python.original_dict = {'a':1, 'b':2, 'c':3, 'd':4}","new_dict = {key: value ** 2 for key, value in original_dict.items()}"
Create a list of all numbers that are divisible by 5 between 0 and 25.,"list_divisible_by_5 = [x for x in range(0, 26) if x%5 == 0]"
Generate a random array of size n in Python.Size of array: 5,"import numpy as np

size = 5

# Create an array of size 5
arr = np.random.randint(100, size = (size))
print (arr)"
Create a loop to print the numbers in reverse order from 5 to 2.,"for i in range(5, 1, -1):
    print(i)"
"Given two parameters a and b, return a substring starting from index a and ending at index b.String: ""Neural networks are powerful algorithms""
Parameters: a = 0, b = 7",Neural n
"Using Python, write a piece of code to convert Celsius temperatures to Fahrenheit.Celsius: 20",Fahrenheit = 68
Write a method to print the first n numbers in the Fibonacci series.n = 5,1 1 2 3 5
"Given a string, you need to write a regular expression that finds all the words that start with a caret (^) symbol.String: ""^awesome ^data ^scoring""",\^awesome\s|\^data\s|\^scoring\s
Find the most common word in the following paragraph and replace it with a synonym.The quick brown fox jumps over the lazy dog.,The nimble brown fox leaps over the sluggish dog.
"Compute the GCD of two numbers without using any built-in functions from your language.Number1: 9
Number2: 6",3
"Create a user-defined function that prints out a message when called.message = ""Hello, World""","def print_message(message):
    print(message)

print_message('Hello, World')"
Reduce the following equation by applying the distributive property.3x(y + 4),3xy + 12x
Calculate the result of the following expression: 63 × 42,2646
Create a random password generator in Python that outputs 10 characters of random alphanumeric characters.,"import random
import string

def random_password_generator():
  charsds = string.ascii_letters + string.digits
  password = ''.join(random.choice(charsds) for i in range(10))
  return password

print(random_password_generator())"
"Return the maximum number from a given array of integers.[6,4,7,1,3]","arr = [6,4,7,1,3]

#Find max number
def find_max(arr):
  max_num = arr[0]
  for num in arr:
    if num > max_num:
      max_num = num
  return max_num

result = find_max(arr)
print(""The maximum number is:"", result)"
"Write a code in Python to convert the following string to an integer.""12345""","string = ""12345""

number = int(string)

print(number)"
"Write a Python code to count the number of uppercase characters in the given string.""Hello World""","string = ""Hello World""

count = 0
for char in string:
  if char.isupper():
    count += 1

print(""The number of uppercase characters are:"", count)"
Suggest a better way to compare two strings in Python.,Using Python's Standard Library function `difflib.SequenceMatcher` is a more efficient way to compare two strings. This function uses an algorithm to compute the longest common subsequence between the two strings which is then used to calculate the similarity score of the given strings.
How could we access the third element of a list in Python?,"The third element of a list can be accessed using the index value 2, as Python indexing starts from 0. For example, if x is a list containing the elements [1, 2, 3], x[2] will return the third element of the list i.e. 3."
"Generate a best-fit line for data points {(2,4), (4,7), (6,8), (7,11)} in Python.","""""""
Generate a best fit line for data points in Python
""""""
import numpy as np

data = [(2,4), (4,7), (6,8), (7, 11)]

x = np.array([x[0] for x in data])
y = np.array([y[1] for y in data])

m, c = np.polyfit(x, y, 1)

print(""Best-fit line equation: y = {:.2f}x + {:.2f}"".format(m,c))"
"Develop an algorithm in Python that detects any outliers in an array.A = [1, 5, 2, 10, 8, 5, 9, 15]","""""""
Develop an algorithm in Python that detects any outliers in an array
""""""
#define function to detect outliers
def detect_outliers(data):
  outliers = []
  threshold = 3
  
  mean = sum(data)/len(data)
  std = np.std(data)
  
  for i in data:
    z_score = (i - mean)/std 
    if np.abs(z_score) > threshold:
      outliers.append(i)
  
  return outliers

#call the function to find outliers
A = [1, 5, 2, 10, 8, 5, 9, 15]
print(""outliers: "", detect_outliers(A))"
"Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase.A = [""apple"", ""banana"", ""grapes""]","""""""
Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase
""""""
# create the function
def uppercase_first_letters(list_of_strings):
    for string in list_of_strings:
        print(string[0].upper())

# call the function with the list
A = [""apple"", ""banana"", ""grapes""]
uppercase_first_letters(A)"
"Develop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.Base = 5
Exponent = 3","""""""
Develop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.
""""""
def power(base, exponent):
    result = base**exponent;
    return result;

base = 5
exponent = 3
print(power(base, exponent))"
"Write a code that takes a list of integers and output the frequencies of odd and even numbers within the list.list_of_ints = [7, 21, 22, 23, 24, 25]","def find_odd_even_frequencies(list_of_ints):
    
    count_odd = 0 
    count_even = 0
    
    for num in list_of_ints:
        if num % 2 == 0:
            count_even += 1
        else:
            count_odd += 1
            
    return {""odd"": count_odd, ""even"": count_even}

result = find_odd_even_frequencies(list_of_ints)
print(result)
// Output: {'odd': 3, 'even': 3}"
"Write a function in Python that returns the greatest common divisor (GCD) of two numbers.n1 = 18, n2 = 15","def greatest_common_divisor(n1, n2): 
    while n2 > 0: 
        n1, n2 = n2, n1 % n2 
    return n1 

result = greatest_common_divisor(18, 15)
print(result)
// Output: 3"
"You are given a list of float numbers. Write a code to sort them in ascending order.arr = [2.5, 3.2, 2.1, 4.6, 1.6]","def bubbleSort(arr): 
    n = len(arr)
    for i in range(n): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
    return arr

sorted_arr = bubbleSort(arr) 
print(sorted_arr)
// Output: [1.6, 2.1, 2.5, 3.2, 4.6]"
"Given an array of integers, write a method to return the indices of the two numbers such that they add up to a specific target.nums = [2, 5, 11, 15], target = 9","def twoSum(nums, target): 
    result = []
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i]+nums[j] == target:
                result.append(i)
                result.append(j)
    return result

indices = twoSum(nums, 9)
print(indices)
// Output: [0, 2]"
Write a code that generates a random password of 8 characters including numerical and alphabetic characters.,"import string
import random

def generate_password():
    alpha_list = list(string.ascii_letters) + list(string.digits)
    return ''.join([random.choice(alpha_list) for _ in range(8)])

random_password = generate_password()
print(random_password)
// Output: 4U4K5U6L"
Format the following text using Markdown.The purpose of this project is to create a user-friendly program for calculating the area of a circle.,"# The Purpose of this Project
The purpose of this project is to create a user-friendly program for calculating the **area of a circle**."
Generate a regular expression to check for the presence of word ‘apple’,^(.*\bapple\b.*)$
"Format the following code using a linterfunc multiply(a,b)
{
   return a*b
}","def multiply(a, b):
    """"""Returns the product of the two parameters.""""""
    return a * b"
Generate a correct code to compare two date objects,"def compare_dates(date1, date2):
    if date1 > date2:
        return 1
    elif date1 == date2:
        return 0;
    else:
        return -1"
Write a function to filter a list of strings based on a search term,"def filter_by_search_term(strings, search_term):
    return [string for string in strings if search_term in string]"
"Update the function to print ‘Hello World!’def print_hello():
    print('Hello')","def print_hello():
    print('Hello World!')"
"Update the following code snippet to ensure that the values in the dictionary are unique.mydict = {""a"":1, ""b"":2, ""c"":3, ""d"":4, ""e"":5}","mydict = {}
for key, value in mydict.items():
    if value not in mydict.values():
        mydict[key]=value"
Create a regular expression to match numbers with exactly three decimal places.,^\d*\.\d{3}$
Create a function in Python to convert time from 12 hour to 24 hour format.,"def convert12to24(time12h):
    # Check if last two elements of time is AM and first two are 12
    if time12h[-2:] == ""AM"" and time12h[:2] == ""12"": 
        return ""00"" + time12h[2:-2] 
          
    # If last two elements of time is AM
    elif time12h[-2:] == ""AM"": 
        return time12h[:-2] 
      
    # If last two elements of time is PM and first two are 12    
    elif time12h[-2:] == ""PM"" and time12h[:2] == ""12"": 
        return time12h[:-2] 
          
    else: 
          
        # add 12 to hours and remove AM
        return str(int(time12h[:2]) + 12) + time12h[2:8]"
"Update the following function to only print the even numbers in a given listdef print_list(list):
    for i in list:
            print(i)","def print_list(list):
    for i in list:
        if i%2==0:
            print(i)"
What is the function of the ‘enumerate’ keyword in Python?,"The 'enumerate' keyword is used to iterate over an iterable and keep track of the index along the way. Its syntax is ""enumerate(iterable, start=0)"". Each iteration yields a tuple containing the index of the element and the element itself. This is most commonly used for loops that need to track the index of the elements in the iterable. For example, the loop below will print out all the elements and their respective indices in a list:

my_list = [""A"",""B"",""C""]
for index, element in enumerate(my_list):
    print(index, element)

# Output:
# 0 A
# 1 B
# 2 C"
"Given a n x n matrix where each element is 0 or 1, how can you find the area of the largest square sub-matrix composed of only ‘1s’?","The simplest way to find the area of the largest square sub-matrix composed entirely of '1's is to use a dynamic programming approach. The algorithm works by iterating through all the elements in the matrix. At each cell, it checks if the current element is a '1' and if the other elements around it form a square sub-matrix of size at least one containing '1's, and if so it updates the answer accordingly. The code for finding the area of the largest square sub-matrix composed of only '1's may look like this:

# n is the size of the matrix
def maximum_square_submatrix(matrix, n):
    # answer stores the maximum size of the square
    ans = 0

    # dp array of size n+1 x n+1
    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]

    for i in range(1, n+1):
        for j in range(1, n+1):
            # if the element is 1
            if matrix[i-1][j-1] == 1:
                # find the minimum of the elements on its left, top and diagonal
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])
                # update the answer
                ans = max(ans, dp[i][j])

    # return the answer
    return ans * ans"
"Create a dictionary from the given list that contains unique elements.lst = [1, 2, 3, 3, 3, 4, 5, 6, 6]","mydict = {x: None for x in set(lst)}
print(mydict)

# Output:
# {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}"
What is the difference between deep copy and shallow copy in Python?,"A shallow copy of an object creates a new reference to the existing object, while a deep copy creates a new object with a different reference but with the same values. In a shallow copy, changes made to the copied object will be reflected in the original object, whereas with a deep copy, the changes are independent. For example, if a list is shallow copied, the copied list will share the same elements as the original list, while a deep copy will contain independent copies of the original list's elements."
"Using the following dictionary, print the value for the element 'age'.person = {
    'name': 'John Smith',
    'age': 32,
    'address': '123 Main St.'
}","age = person['age']
print(""The value for the element 'age' is:"", age)

# Output:
The value for the element 'age' is: 32"
Change the following string to an upper case.str = 'this is an example of a string',"str_upper = str.upper()
print(str_upper)

# Output:
THIS IS AN EXAMPLE OF A STRING"
Create a TensorFlow model to recognize handwritten numbers.,"""""""
Create a TensorFlow model to recognize handwritten numbers
""""""

import tensorflow as tf

# Load in the data set
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Pre-process the data 
x_train, x_test = x_train / 255.0, x_test / 255.0

# Create the model
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5)

# Evaluate the model
model.evaluate(x_test,  y_test, verbose=2)"
Write a code to calculate the roots of a quadratic equation in Python.,"import math

def calculate_roots(a, b, c):
  # calculate the discriminant
  d = (b**2) - (4*a*c)
  
  # find two solutions
  sol1 = (-b-math.sqrt(d))/(2*a)
  sol2 = (-b+math.sqrt(d))/(2*a)
  
  print('The solutions are {0} and {1}'.format(sol1,sol2))"
"Using Angular, create a service to get the current date.","import { Injectable } from '@angular/core'; 
import { DatePipe } from '@angular/common'; 

@Injectable({
  providedIn: 'root'
}) 
export class DateService { 
  constructor(private datePipe: DatePipe) { 
  } 

  getCurrentDate(): string { 
    return this.datePipe.transform(new Date(), 'yyyy-MM-dd');  
  } 
}"
"Using Django, create a view to render a template.","from django.shortcuts import render

def view(request):
    return render(request, 'template.html')"
How do you write a for loop in Visual Basic?,"For <variable> = <startValue> to <endValue>
    ' Insert code here
Next <variable>"
"Write a line of code that prints the text ""Hello, World!""","print(""Hello, World!"")"
"Create a function in Python to find all elements of a given list whose sum is equal to a given number.list = [5, 7, 9, 4]
number = 18","def find_elements(list, number): 
    result = [] 
    for i in range(len(list)): 
        for j in range(i + 1, len(list)): 
            if list[i] + list[j] == number: 
                result.append([list[i], list[j]]) 
  
    return result 
  
# Driver code 
list = [5, 7, 9, 4] 
n = 18
print(find_elements(list, n))"
Write a single line of code to convert a string to a date in Python.,"date = datetime.strptime('01/01/2019', '%d/%m/%Y')"
"Write a code to split a string into words and store them into a list.mystring = ""This is a sample string""","mystring = ""This is a sample string""
wordList = mystring.split()"
Write a code snippet to create an object of type Car in Python.,"class Car():
    def __init__(self):
        self.make = """"
        self.model = """"
        self.year = 0
        self.color = """"
 
car = Car()"
"Create a Python script to compact a given list of elements.my_list = [1,1,2,3,3,3,4,4,4,4,5]","def compact_list(lst):
    # Define a new list to hold the compacted elements
    new_list = []
    current = None
    
    # Iterate through lst
    for item in lst:
        if item != current:
            current = item
            new_list.append(current)
    # Return the new list
    return new_list
    
# Call the function with the given list
my_list = [1,1,2,3,3,3,4,4,4,4,5]
print(compact_list(my_list)) # [1,2,3,4,5]"
"Identify any inefficient coding practices used in the following snippet.def find_largest(number_list):
    #Define variable for holding the biggest number
    largest = 0
    for num in number_list:
        if num > largest:
            largest = num
    return largest","The code works, however the variable `largest` is not properly initialized. Instead of setting it to 0, it should be set to the first element in the list - `number_list[0]`. This will improve the efficiency of the code, as it will not have to perform unnecessary comparisons."
"Complete the following snippet with proper code that will return the highest value in a given list.my_list = [1,2,3,4,5]","def find_highest(lst):
    current_max = lst[0]
    # Iterate through list
    for item in lst:
        if item > current_max:
            current_max = item
    # Return the max value
    return current_max 

# Call the function with the given list
my_list = [1,2,3,4,5]
print(find_highest(my_list)) # 5"
Create a class in Python that will allow us to initialize and store a given list of numbers.,"class NumbersList:
    def __init__(self, numbers_list):
        self.numbers_list = numbers_list
    
    def get_list(self):
        return self.numbers_list
    
    def set_list(self, numbers_list):
        self.numbers_list = numbers_list"
"Find the index of the largest element in the array [2, 3, 5, 7, 25, 30].","arr = [2, 3, 5, 7, 25, 30]
largest_element = max(arr)
index = arr.index(largest_element)
print(index) # Output: 4"
"Write a Python function that takes in an argument 'arr' which is an array of integers and prints the arithmetic mean of the array.arr = [2, 8, 10, 22, 4]","def mean(arr):
    sum = 0
    for num in arr:
        sum += num
    mean = sum/len(arr)
    print(mean)
mean(arr) # Output: 10.0"
"Find the most frequent integer in the list: [3, 5, 2, 3, 1, 5, 3, 3, 2].","my_list = [3, 5, 2, 3, 1, 5, 3, 3, 2]
max_freq = 0
max_num = 0
# Use a dictionary to store the frequence of each number
dict = { i : my_list.count(i) for i in my_list }
for num, freq in dict.items():
    if freq > max_freq:
        max_freq = freq
        max_num = num
print(max_num) # Output: 3"
Identify the correct syntax for creating a class with name 'Car' in Python.,"class Car:
  pass"
"Write a Python program to print out the longest word entered by the user.string = ""Happiness is the best thing""","def find_longest_word(string): 
    # split the string 
    word_list = string.split() 
  
    # sort the list 
    word_list.sort(key = len) 
  
    # return the last word 
    # which will be the longest 
    return word_list[-1]
  
# driver code 
string = ""Happiness is the best thing""
 
print(find_longest_word(string)) # Output: Happiness"
"Create a Python function which accepts two numbers then return an array with the Fibonacci sequence starting by the two numbers.start_1: 1
start_2: 2","def fib_array(start_1, start_2):
    arr = [start_1, start_2]
    while True:
        next_num = arr[-1] + arr[-2]
        if next_num > 100:
            break
        arr.append(next_num)
    return arr"
"Write a few lines of code in Python that prints out name followed by age.name: John
age: 25","name = ""John""
age = 25
print(name + "" "" + str(age))"
"You need to write a for loop in Python that takes two arguments, N and K and prints out the numbers from 0 to N which are divisible by K.N: 15
K: 4","for i in range(0, N+1):
    if i % K == 0:
        print(i)"
"Create a GraphQL query for retrieving data about a list of userID's.userIDs: [1, 2, 3, 4, 5]","query getUsers($userIDs: [Int!]!) {
  users(userID_in: $userIDs) {
    userID
    name
    email
    age
  }
}"
"Given the below data, find the sum of all the numbers in the array.data = [5, 15, 7, 20]",Sum = 47
"Implement a function to print each element of a given array in reverse.array = [2, 4, 6, 8]","def print_reversed_array(array):
  for i in range(len(array)-1, -1, -1):
    print(array[i])"
Construct a logic circuit that implements a three input AND gate.,[Logic Circuit for Three Input AND Gate]
Write a script in Python for drawing a rectangle on the screen.,"import pygame 
  
# Initialize the game engine 
pygame.init() 
  
# Define the colors 
BLACK = (0, 0, 0) 
WHITE = (255, 255, 255) 
  
# Set the window size 
size = (400, 500) 
screen = pygame.display.set_mode(size) 
  
# Iterate over the list of rectangles 
rects = [pygame.Rect(75, 150, 150, 50), 
         pygame.Rect(200, 150, 150, 50)] 
  
# Iterate over the list of rectangles 
for rect in rects: 
    pygame.draw.rect(screen, WHITE, rect) 
  
# Update the display 
pygame.display.flip()"
Construct a for loop to print out each character of a given string in a new line.String: Hello world,"for char in ""Hello world"":
    print(char)"
Write a code to get the number of unique elements in a given list.,"def count_unique_elements(lst):
  unique_elements = set(lst)
  return len(unique_elements)

print (count_unique_elements([1,2,3,2,3,4,5]))
# Output: 5"
Create a program to guess a secret number between 1 and 100.,"# secret number
secret_number = 42

# user guess
guess = 0

# guessing loop
while guess != secret_number:
    
    # ask user to enter a guess
    guess = int(input(""Guess a number between 1 and 100: ""))

    # provide hints
    if guess < secret_number:
        print(""Too low. Try something higher."")
    elif guess > secret_number:
        print(""Too high. Try something lower."")
    else:
        print(""You guessed it! The secret number was {}"".format(secret_number))"
Construct a code that finds the area of a given circle.,"def area(radius):
  return 3.14 * radius * radius

print(area(5))
# Output: 78.5"
"Edit the given code to print out the largest even number in the given list.lst = [1, 8, 9, 10, 6]","lst = [1, 8, 9, 10, 6]

even_nums = []

for num in lst:
    if num % 2 == 0:
        even_nums.append(num)

if even_nums:
    print(max(even_nums))
else:
    print(""No even numbers in the list."")
# Output: 10"
Generate a code to convert a given number to its English word equivalent.,"# dictionary to convert numbers to words
number_words = {0 : 'zero', 1: 'one', 2 : 'two',
                3 : 'three', 4 : 'four', 5 : 'five', 
                6 : 'six', 7 : 'seven', 8 : 'eight', 
                9 : 'nine', 10 : 'ten'}

# convert number to string
def convert_to_words(n):
    if n in number_words:
        return number_words[n]
    return """"

# Driver code
print(convert_to_words(5))
# Output: five"
Provide an input to the following code so that it prints out the sum of all numbers between 1 and 5.,"# initialise sum
sum = 0

# loop over given range
for i in range(1, 6):
    sum += i

print(sum)
# Output: 15"
Write a Python function to convert temperatures from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(f):
 return (f - 32) * 5 / 9"
"Create a Python dictionary to store information about a student. The student should have the following attributes: name, age, grades, and graduation year.","student = {
 'name': '',
 'age': 0,
 'grades': [],
 'graduation_year': 0
}"
Write a Python function to add an item to a given list.,"def add_item(items, item):
 items.append(item)
 return items"
"Write a Python function to compute the total amount of a given grocery bill after taxes.items = [('apple', 1.49), ('banana', 0.99), ('bread', 4.99)]","def compute_total_after_taxes(items):
 tax = 0.07
 total = 0
 for item in items:
  price = item[1]
  tax_amount = price * tax
  total += price + tax_amount
 return round(total, 2)"
Write a Python function to create a dictionary from two given lists. The first list should be the keys and the second list should be the values.,"def create_dict(keys, values):
 return dict(zip(keys, values))"
Create a function in Python to calculate the sum of the square of all numbers from 1 to n.,"def sum_squares(n): 
   total = 0
   for x in range(1,n+1): 
      total += x * x
   return total"
Construct an object with 3 properties of different data types.,"object = {""name"": ""John Doe"", ""age"": 18, ""isActive"": False}"
"Write a code to delete all empty values in a given dictionary.my_dict = {'a': '', 'b': False, 'c': 0, 'd': None}","def delete_empty_values(d):
    new_dict = {key: value for key, value in d.items() if value != 0 and value != False and value != None and value != ''}
    return new_dict 

my_dict = delete_empty_values(my_dict)
print(my_dict) # Output -> {'b': False}"
Design a neural network architecture in TensorFlow to predict the sentiment of a movie review,"model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim),
    tf.keras.layers.GlobalAveragePooling1D(),
    tf.keras.layers.Dense(24, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])"
What is the name of the machine learning algorithm used to find patterns in data?,The machine learning algorithm used to find patterns in data is called clustering.
"Write a Regex expression to match a string containing the words ""hello"" and ""world"".",\bhello\b.*\bworld\b
"Identify three patterns in the following list of numbers: 1, 4, 6, 10, the 15.","The three patterns identified in the list of numbers are: an increasing sequence (1, 4, 6, 10, 15), odd numbers (1, 3, 5, 10, 15), and composite numbers (4, 6, 10, 15)."
What is the purpose of a user interface (UI)?,"The purpose of a user interface (UI) is to provide an efficient and user-friendly interface for interacting with a device or application. It includes visual components like forms, menus, buttons and other tools that allow users to input information, perform tasks and receive output."
Generate a simple python function to concatenate two lists.,"def concatenate_lists(list1, list2):
    return list1 + list2"
Query a MongoDB to get all documents with a certain field value.,"def query_mongo(collection, field_name, field_value):
    query = {field_name: field_value}
    documents = collection.find(query)
    return list(documents)"
Write a python function to detect if two lists contain the same items in different order.,"def compare_lists(list1, list2):
    return sorted(list1) == sorted(list2)"
Code a function that takes a dictionary as a parameter and prints out the key-value pairs.,"def print_dict(dictionary):
    for key, value in dictionary.items():
        print(f""{key}: {value}"")"
"Output the second maximum number in a list.[9, 4, 57, 28, 24, 10]",28
"Separate the given array of numbers into two new arrays, where one array contains even numbers and the other array contains odd numbers.[9, 4, 57, 28, 24, 10]","even_array = [4, 28, 24, 10]
odd_array = [9, 57]"
Create a program to print out a given message in reverse.Hello World!,!dlroW olleH
"Print the words in the given string that are longer than 5 characters.""This is a test string for a coding challenge""","This 
string 
challenge"
Count the number of sub strings of length 3 that are present in the sentence.This is an example sentence,7
"Create a program to find the maximum difference between two elements in an array.[9,4,57,28,24,10]",53
Generate the first 8 Fibonacci numbers after a starting number of 0.,"[0, 1, 1, 2, 3, 5, 8, 13]"
Create a function to determine if two strings are symmetrical.,"def is_symmetrical(str1, str2):
    for i in range(0, len(str1)):
        if str1[i] != str2[-i-1]:
            return False
    return True"
Write a code segment that manipulates a Fibonacci sequence until the sum is greater than a given number.10,"def fibonacci_sum(number):
    fib_list = [0,1]
    while True:
        next_number = fib_list[-1] + fib_list[-2]
        if next_number > number:
            break
        fib_list.append(next_number)
    return sum(fib_list[:-1])"
Write a method to calculate the average of three numbers in Python.,"def avg(num1, num2, num3):
 return (num1 + num2 + num3) / 3"
"Code a function in R which concatenates two strings of a given length and returns the resulting string.let string1 = ""Hello"";
let string2 = ""World"";
let length = 10;","concat_strings <- function(string1, string2, length) {
  return( substr(paste0(string1,string2), 1, length) )
}"
"Design a function that takes an array of length n as an argument, and returns an array of the same length, where the output array consists of the elements of the input array in reverse order.[1, 2, 3, 4, 5]","def reverse_array(arr):
    return arr[::-1]"
Design a Python program to print all numbers between 0 and 100 that are divisible by 3 and 5.,"for i in range(101):
    if i % 3 == 0 and i % 5 == 0:
        print(i)"
Create a function to calculate the exponent of a given number x raised to power y.,"def exponent(x,y): 
    if(y == 0): 
        return 1
    elif (int(y % 2) == 0): 
        y = int(y / 2) 
        return exponent(x, y) * exponent(x, y) 
    else: 
        return (x * exponent(x, int(y / 2)) * exponent(x, int(y / 2))) 

exponent(5,3) # Output: 125"
"Compute the number of days since January 1st, 1971 until the given date.May 3rd, 2012","""""""
Calculate the number of days since January 1st, 1971 until the given date
""""""

import datetime as dt

def num_days(date_str):
    datetime_object = dt.datetime.strptime(date_str, ""%B %d, %Y"").date()
    ref_date = dt.datetime(1971, 1, 1).date()
    return (datetime_object - ref_date).days

if __name__ == '__main__':
    print(num_days('May 3rd, 2012'))"
Devise a function that converts a number represented in the binary system to a decimal number.1100,"""""""
Devise a function that converts a number represented in the binary system to a decimal number
""""""

def binary_to_decimal(number):
    decimal = 0
    power = 0
    while number != 0:
        last_digit = number % 10
        decimal += last_digit * pow(2, power)
        power += 1
        number //= 10
    return decimal"
"Find the maximum element in a given array (unsorted) using a linear search approach.[10, 5, 15, 80, 25]","""""""
Find the maximum element in a given array (unsorted) using a linear search approach
""""""

def linear_search_max(arr):
    max_element = arr[0]
    for elem in arr[1:]:
        if elem > max_element:
            max_element = elem
    return max_element

if __name__ == '__main__':
    arr = [10, 5, 15, 80, 25]
    max_element = linear_search_max(arr)
    print(max_element)"
"Rewrite this code in a more efficient way making use of the built-in sort functions.my_list = [3, 2, 1]
for i in range(len(my_list)):
    for j in range(len(my_list)-1):
        if my_list[j] > my_list[j+1]:
            my_list[j], my_list[j+1] = my_list[j+1], my_list[j]","""""""
Rewrite this code in a more efficient way making use of the built-in sort functions
""""""

my_list = [3, 2, 1]
my_list.sort()"
What programming language did Microsoft use to create its Edge browser?,Microsoft used their own programming language called ChakraCore to create the Edge browser. ChakraCore is a JavaScript engine which is optimized for Edge. It is based on the Chakra engine which was originally developed to power Microsoft's Internet Explorer browser.
"Create a Python dictionary with the key-value: ""Alice"": 28",example_dict = {'Alice': 28}
"Find the difference between two given Unix timestamps.1587797520, 1587798320",difference = 1587798320 - 1587797520 = 800 seconds
"Implement an algorithm to find the power of a number.Base: 2, Exponent: 3","def power(base, exponent):
 result = 1
 while exponent > 0:
 result *= base
 exponent -= 1
 return result
result = power(2, 3)
print(result)
# 8"
Write a Pandas code to drop all rows with missing values from a given dataframe.Dataframe name: df,df.dropna(inplace=True)
How do you create a new dataframe from existing two pandas dataframes?,"You can create a new dataframe by using the concat() or merge() functions of pandas.  With concat(), you can create a new dataframe by stacking the existing two dataframes on top/bottom of one another. With merge(), you can combine two dataframes by joining them on a key of your choice."
Define a function that takes a string and prints it in reverse order.,"def print_reverse(str):
    for i in range(len(str)-1, -1, -1):
        print(str[i], end="""")
    print()"
Create a list of the top 5 programming languages currently in use.,"1. Java
2. Python
3. C++
4. JavaScript
5. C#"
Design an algorithm to swap two numbers in Python.Swap 10 and 20,"def swapNumbers(a, b): 
  temp = a 
  a = b 
  b = temp 
 
  print(""After swapping: a ="", a, "" b ="", b) 

# Driver program 
a = 10
b = 20
swapNumbers(a, b)"
How many bytes are there in a megabyte?,"A megabyte is equal to 1,048,576 bytes."
Design a function to calculate the sum of the squares of the numbers between 1 and n.,"def sum_of_squares(n):
    sum_squares = 0
    for i in range(1, n+1):
        sum_squares += i**2
    return sum_squares"
"Suggest a code snippet in Python to delete the dictionary entry with a key called ""name"".sample_dic = {'id': 123, 'name': 'John Doe'}",del sample_dic['name']
Describe the working of a recursive function.,"A recursive function is a function that calls itself until a certain condition is met. It takes in an argument and performs some operation, then calls itself with a modified version of the argument until the condition is satisfied. The result of each call is combined in some fashion to form the final output. This allows the same method to be used to solve several different problems."
Describe linear search algorithm.,"Linear search is a searching algorithm for finding an element within an array or a list. It sequentially checks each item of the list until a match is found or the end of the array is reached. If the key is found, the index position of the element is returned. If the element is not found, then the index is returned as -1."
What are the advantages of using a graphical user interface?,"The advantages of using a graphical user interface (GUI) include improved usability and accessibility, better visual communication of information, easier drag-and-drop capabilities, improved data visualization, and the ability to add graphics, sound and video to enhance user experience. GUI's also facilitate multi-tasking, allowing users to view and manipulate multiple windows and documents simultaneously."
"Write a script in Python for generating a histogram for a given set of data.[3, 5, 8, 1, 9, 12]","import matplotlib.pyplot as plt

data = [3, 5, 8, 1, 9, 12]
plt.hist(data, color='blue', ec='black')

plt.title(""Histogram"")
plt.xlabel(""Values"")
plt.ylabel(""Frequency"")

plt.show()"
"Given the class definition below, write a method to calculate the discount.class DiscountCalculator:
   def __init__(self, price, cash_coupon, percentage_coupon):
       self.price = price
       self.cash_coupon = cash_coupon
       self.percentage_coupon = percentage_coupon","def calculate_discount(self):
    discount = self.price - (self.cash_coupon + (self.price * self.percentage_coupon / 100))
    return discount"
"Write a code to wrap a text in a box, with the given length and padding parameters.text = ""Hello World!"", length = 20, padding = 5","def wrap_in_box(text, length, padding): 
    border = """"
    for i in range(length): 
        border += ""-""
    space = """"
    for i in range(padding):
        space += "" ""
    text = space + text + space 
    if len(text) > length:
        text = text[:length-1]
    text = text.center(length)
    print(border)
    print(text)
    print(border)"
"Create a function that returns the maximum element of a given list.Given List: [3, 12, 2, 6, -9]","def max_val(list):
    max_val = list[0]
    for i in range(len(list)):
        if list[i] > max_val:
            max_val = list[i]
    return max_val"
"Design a code to search a given element x in a vector.vector: [3, 17, 5, 11], x: 5","def search_x(x, vector):
    for i in range(len(vector)):
        if vector[i] == x:
            return i 
    return -1"
"Develop a code to sort a list in ascending or descending order.givenList: [5, -3, 2, 4, 0], sortOrder: ""ascending""","def sort_list(givenList, sortOrder): 
    for i in range(len(givenList)): 
        for j in range(i + 1, len(givenList)):
            if sortOrder == ""ascending"":    
                if givenList[i] > givenList[j]:
                    givenList[i], givenList[j] = givenList[j], givenList[i] 
            elif sortOrder == ""descending"":    
                if givenList[i] < givenList[j]:
                    givenList[i], givenList[j] = givenList[j], givenList[i]
    return givenList"
"Construct a program which takes two numbers as input and returns the multiplication of these numbers.8, 4","def multiplication(num1, num2):
    return num1 * num2"
"Develop a code to delete a given element from a list.[3, 6, 8, 14], element: 14","def delete_element(given_list, element):
    for i in range(len(given_list)):
        if given_list[i] == element:
            del given_list[i]
            break
    return given_list"
"Write a code to create a dictionary containing the frequency of each word in a given string.S = ""hello world""","def word_frequency(S): 
  frequency = dict() 
  words = S.split() 
  
  for word in words: 
    if word in frequency: 
        frequency[word] += 1
    else: 
        frequency[word] = 1
  
  return frequency

print(word_frequency(S))"
"Given a 2 dimensional array, create a code to transpose the array.","def transpose_matrix(matrix): 
	row = len(matrix) 
	col = len(matrix[0]) 
	transpose = [[0 for j in range(row)] for i in range(col)] 
  
	for i in range(row): 
		for j in range(col): 
			transpose[j][i] = matrix[i][j] 
  
	return transpose 

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(transpose_matrix(matrix))"
Write a code to create a function to rotate a given linked list.,"""""""
Create a function to rotate a given linked list
""""""

# Create a class node
class Node: 
	# Create a constructor to initialise the node object 
	def __init__(self, data): 
		self.data = data 
		self.next = None

class LinkedList: 
	# Create a constructor to initialise the linked list 
	def __init__(self): 
		self.head = None
	
	# Create a function to rotate the linked list 
	def rotate(self, index):
		if (index == 0): 
			return
		prev = None            
		curr = self.head
		while (index > 0):
			prev = curr
			curr = curr.next
			index -= 1
		
		prev.next = None
		self.head = curr
		while (curr.next != None):
			curr = curr.next
		curr.next = self.head"
Compress the following string using LZW compression.Input: ‘ABBBCDCDEFFG’,The compressed string would be ‘A1B3C1D1E1F2G1’.
Implement FTP server in Python,"import ftplib

def start_ftp_server(host, port, user, password):
    server = ftplib.FTP()
    server.connect(host, port)
    server.login(user, password)
    print('FTP Server started successfully')

start_ftp_server('localhost', 21, 'testuser', 'testpass')"
Write a method to find duplicate elements in an array of integers.,"We can solve this problem using a HashSet. We traverse the array and insert the elements in the HashSet. If the element already exists in the HashSet, then it is a duplicate.

public static boolean findDuplicate(int[] arr) {
    Set<Integer> set = new HashSet<Integer>();
    
    for(int i = 0; i < arr.length; i++) {
        if(set.contains(arr[i])) {
            return true;
        }
        set.add(arr[i]);
    }
    return false;
}"
Convert the given input string to lower case keeping all other characters same.FEDCbA,fedcba
Generate a random letter between a and z.,p
"There is a string of code. Can you tell me if there are syntax errors in it?def foo():
    print('bar",true
"Write a boolean expression for the statement ""4 is greater than 5"".",4 > 5
"Generate a python statement to print out ""Hello World"".","print(""Hello World"")"
"Given two strings, write a program to find the number of common characters.string_1 = ""computer""
string_2 = ""science""","def num_common_characters(str1, str2):
    char_count = {}
    for c in str1:
        if c in str2:
            if c not in char_count:
                char_count[c] = 1
            else:
                char_count[c] += 1
    return sum(char_count.values())"
"Identify the type of input that is required for this Python function.def get_sum(a, b):
    # return the sum of two numbers","The type of input required for this Python function is two numerical values (for example, integers or floats)."
"Generate a code to take in a list of sentences, totaling no more than 100 words and output the longest sentence.['This sentence is the longest.', 'This sentence is the shortest.']","def get_longest_sentence(lst):
    longest_sentence = ''
    longest_len = 0
    for s in lst:
        s_len = len(s)
        if s_len > longest_len:
            longest_sentence = s
            longest_len = s_len
    return longest_sentence

if __name__ == '__main__':
    lst = ['This sentence is the longest.', 'This sentence is the shortest.']
    longest_sentence = get_longest_sentence(lst)
    print(longest_sentence)"
Write a Python program to calculate the sum of all multiples of 3 and 5 between 1 and a given number.,"def sum_multiples_of_3_and_5(n):
    sum = 0
    for i in range(1, n+1):
        if i % 3 == 0 or i % 5 == 0: 
            sum += i
    return sum"
Suggest a way to classify text documents into a certain number of topics.,"One way to classify text documents into a certain number of topics is to use latent Dirichlet allocation (LDA). LDA is a generative statistical model that allows for documents to be modeled as a mixture of topics. It fits well when documents are short and there is a large number of topics to be identified. The model takes as input a corpus of documents, builds a bag-of-words for each document, and then assigns a probability distribution to each document for the topics present. In this way, documents can be classified according to the respective topic with the highest probability."
Write an algorithm for sorting a single-linked list.,"Algorithm for sorting a single-linked list:
1. Traverse the list and find the minimum value.
2. Save the pointer to this minimum element.
3. Move this minimum element to the start of the list and make it the head node. 
4. Set the pointer to the last minimum element to point to the next element. 
5. Repeat steps 1-4, until the end of the list is reached."
"Write the code for counting the number of occurrences of a character in a given string.String: ""Hello World""
Character: 'l'","public static int countCharacterOccurrences(String s, char c) {
    int count = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == c)
            count++;
    }
    return count;
}"
Suggest an algorithm to implement a stack with two queues.,"Algorithm for implementing a stack with two queues: 
1. Create two queues and enqueue the element to the first queue.
2. Dequeue an element from the first queue, and enqueue it again to the second queue. 
3. Now, enqueue the next element from the first queue to the first queue.
4. Repeat steps 2 and 3, until all the elements are dequeued from the first queue. 
5. Dequeue an element from the second queue, this will be the top of the stack."
Convert a code written in Python 3 into code compatible with Python 2.input = int(input('Enter your number: ')),"import sys
if sys.version_info.major == 3:
 input = int(input('Enter your number: '))
else:
 input = int(raw_input('Enter your number: '))"
"Update the code to handle cases when the two numbers in the array are the same.def add_two_numbers(nums):
 return nums[0] + nums[1]","def add_two_numbers(nums):
 if nums[0] == nums[1]:
 return nums[0]
 else:
 return nums[0] + nums[1]"
"Break down the given code into its individual parts.def square_sum(x, y):
 return x*x + y*y","def square_sum(x, y):
 return x * x + y * y

# Break down code
# part 1
def square_sum(x, y):
# part 2
 return x * x + y * y
# part 3
# return calculated value"
"Write a Python function which takes a number as an argument and print ""even"" if the number is even and print ""odd"" if the number is odd.","def print_even_odd(number):
 if number % 2 == 0:
 print(""even"")
 else:
 print(""odd"")"
"Add a parameter to the function to calculate the area of a triangle.def calculate_area(length, width):
 return length * width","def calculate_area(length, width, height):
 return 0.5 * (length * width + length * height + width * height)"
"Rewrite the code to be more concise and efficient.def find_min(arr):
 min_val = float('inf')
 for i in arr:
 if i < min_val:
 min_val = i
 return min_val","def find_min(arr):
 return min(arr)"
"Update the code so that it only prints out the lines which contain the word “print”.src_code = """"""if x == 1:
 print ""hello""
 if y == 2:
 print ""world""
 print ""!""","src_code = """"""if x == 1:
 print ""hello""
 if y == 2:
 print ""world""
 print ""!""

# updated code
lines = src_code.splitlines()

for line in lines:
 if ""print"" in line:
 print(line)"
"Update the code to ensure that an error is raised if the input is the wrong type.def age_calc(age):
 return age + 5","def age_calc(age):
 if not isinstance(age, int):
 raise TypeError(""Input for age calculation must be int"")
 return age + 5"
Compute a factorial of a given integer.5,"""""""
Compute a factorial of a given integer
""""""

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

if __name__ == '__main__':
    n = int(input())
    print(factorial(n))"
Make a function which takes two numbers as arguments and returns their sum.,"""""""
Function which takes two numbers as arguments and returns their sum
""""""

def add_numbers(x, y):
    return x + y
    
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    print(add_numbers(x, y))"
"Implement a Wiki page title search using Python.Search string: ""Machine Learning""","""""""
Implement a Wiki page title search using Python
""""""

import wikipedia

def search_wiki_title(search_string):
    try:
        wikipedia.set_lang(""en"")
        result = wikipedia.search(search_string)[0]
    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):
        result = None
    return result

if __name__ == '__main__':
    search_string = input('Search string: ')
    result = search_wiki_title(search_string)
    print(result)"
"Write a function to find the average of given numbers using a list.nums = [2, 4, 6, 8]","""""""
Write a function to find the average of given numbers using a list
""""""

def find_average(nums):
    return sum(nums) / len(nums)
    
if __name__ == '__main__':
    nums = [2, 4, 6, 8]
    print(find_average(nums))"
"Create a function to do a binary search on a sorted list of integers.nums = [2, 4, 5, 7, 8, 9, 10, 14]","def binary_search(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1 # target is not found"
Develop a for loop to write a program to print the first 5 prime numbers,"count = 0 # to count the number of prime numbers

for num in range(1,100):  

   # all prime numbers are greater than 1
   if num > 1:
       for i in range(2,num):
           if (num % i) == 0:
               break
       else:
           print(num)
           count += 1
       if count == 5:
           break"
What is a for loop?,"A for loop is a programming structure used to repeat a specific set of instructions for a given number of times or until a specified condition is met. The syntax of a for loop is ""for <variable> in <sequence>:"" and the format is ""for <variable> in range(<start_value>, <end_value>):"" where the start and end value are optional. The code within the loop will be executed until the given condition is met, or the loop is terminated with a break command."
How does a try-except block work in Python?,"A try-except block in Python allows a code block to be tested for errors. The code that could potentially cause an exception is placed in the try clause and the code that handles the exception is put in the except clause. If an error is encountered in the try clause, the program execution is transferred to the except clause for further handling. The except clause can also be used to handle multiple exceptions in the same block of code."
"If a pandas dataframe has five columns and four rows, what is the shape of the dataframe?","The shape of the pandas dataframe would be (4, 5)."
"Develop a class in Python to print the name and age of the user.Name:""John"", Age:""25""","class Hello: 
    def __init__(self,name,age): 
        self.name = name
        self.age = age
    
    def printNameAge(self): 
        print(""Name:"", self.name, ""Age:"", self.age)
  
obj1 = Hello(""John"", 25) 
obj1.printNameAge()"
"Alter the code to include a break statement in the loop.for i in range(0, 10):
    print(""The number is "" + str(i))","for i in range(0, 10):
    print(""The number is "" + str(i))
    if i == 5:
        break"
Find physical address of the code.Code: 0x7fff2ceb5de5,The physical address of the code is 18446744071421161285.
Preprocess a natural language text for text classification.Text: “The food I ate yesterday was really amazing. I loved the entire experience.”,"text = ""The food I ate yesterday was really amazing. I loved the entire experience.""
 
# lowercase 
text = text.lower() 

# remove punctuation 
text = re.sub(r'[^\w\s]','',text) 

# remove digits 
text = re.sub(r'\d+','',text) 

# Tokenization 
tokens = word_tokenize(text) 

# Stopword removal 
filtered_words = [word for word in tokens if word not in stopwords.words('english')] 

# Lemmatization
lemmatizer = WordNetLemmatizer() 
lemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] 

print(lemmatized_word)"
Create a function to find out if a number is even,"def isEven(n): 
    if (n % 2 == 0): 
        return True
    else: 
        return False"
Provide the month that is 6 months after June.,December
Convert the following number from decimal to hexadecimal.243,f3
Shorten the following URL using bitly.https://www.example.com/ohAIbQ,http://bit.ly/3fj3C6U
"Given the following list of strings:

list_str  = [""one"", ""two"", ""three"", ""four"", ""five""]

Write a program that prints out the strings in uppercase.","for i in list_str:
  print(i.upper())"
Generate a random unique ID and store it in a variable.,"import uuid

random_id = uuid.uuid4()"
"Reverse the given list using python.list_to_reverse = [2, 3, 5, 6, 8, 10, 11]","def reverse_list(input_list):
    """"""Return a reversed copy of the list""""""
    return input_list[::-1]"
"Create a string variable from a tuple.tuple_to_string = (""This"", ""is"", ""a"", ""tuple"")","string_from_tuple = "" "".join(tuple_to_string)"
Generate a List Comprehension that returns a list containing the first 5 prime numbers,"[x for x in range(2, 11) if all(x % y != 0 for y in range(2,x))][:5]"
"Write a regular expression that matches the string ""line break"".",line\sbreak
"Write a loop that prints the numbers from 10 to 1, each on its own line.","for i in range(10, 0, -1):
    print(i)"
"Given a list of numbers, remove all duplicated entries.num_list = [12, 24, 12, 5, 8, 24]",no_duplicates = list(set(num_list))
Convert a given integer to its equivalent hexadecimal value.num = 67,hex_val = hex(num)
Design a try/except block that takes in a user-entered number and prints whether it is even or odd.,"try:
    num = int(input(""Enter a number: ""))
    if num % 2 == 0:
        print(str(num) + "" is even."")
    else:
        print(str(num) + "" is odd."")
except ValueError:
    print(""Input must be an integer."")"
"Use PyTorch to write a function that predicts a class label based on five numerical features.X = [[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]]","""""""
A PyTorch function that predicts a class label based on five numerical features.
""""""

import torch
import torch.nn as nn


# Define the model
class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.fc1 = nn.Linear(5, 8)
        self.fc2 = nn.Linear(8, 4)
        self.fc3 = nn.Linear(4, 2)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Instantiate the model
model = Model()

# Input
X = torch.tensor([[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]])

# Get the prediction
prediction = model(X)"
"Given a list of grocery items, write a code to generate 1 list containing only the fruits in the list.items =[""apple"",""banana"",""grapes"",""rice"",""onion""]","def filter_fruits(items):
    """"""This function takes a list of grocery items and generates a list containing only the fruits.""""""
    fruits = []
    for item in items:
        if item in [""apple"", ""banana"", ""grapes""]:
            fruits.append(item)
    return fruits

if __name__ == '__main__':
    items =[""apple"",""banana"",""grapes"",""rice"",""onion""]
    fruits = filter_fruits(items)
    print(fruits)"
Generate a function to identify prime numbers between 0 and n.,"def is_prime(n):
    """"""This function will check if a number is a prime number or not.""""""
    # Corner case 
    if n <= 1: 
        return False

    # Check from 2 to n-1 
    for i in range(2,n): 
        if n % i == 0: 
            return False
    return True

if __name__ == '__main__':
    for n in range(2, 100):
        if is_prime(n):
            print(n)"
Create a function that allows users to sign up for your feature using their username and password.,"def sign_up(username, password):
    """"""This function will allow users to sign up for the feature using their username and password.""""""
    # Implement sign up feature
    # ...

if __name__ == '__main__':
    username = ""JohnDoe""
    password = ""Passw0rd""
    sign_up(username, password)
    print(""Sign up successful!"")"
"Write a code to filter out all even numbers from an array which contains both even and odd numbers.arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]","def filter_even_numbers(arr):
    """"""This function takes an array and filters out all even numbers.""""""
    result = []
    for num in arr:
        if num % 2 != 0:
            result.append(num)
    return result

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    result = filter_even_numbers(arr)
    print(result)"
Create a Python class to work with complex numbers.,"class ComplexNumber:
    """"""This class is used to work with complex numbers.""""""
    def __init__(self, real, imag): 
        self.real = real 
        self.imag = imag 
      
    def __add__(self, other):
        """"""This method overloads the '+' operator to add complex numbers.""""""
        return ComplexNumber(self.real + other.real, self.imag + other.imag) 
      
    def __sub__(self, other):
        """"""This method overloads the '-' operator to subtract complex numbers.""""""
        return ComplexNumber(self.real - other.real, self.imag - other.imag) 
  
    def __mul__(self, other): 
        """"""This method overloads the '*' operator to multiply complex numbers.""""""
        return ComplexNumber(self.real*other.real - self.imag*other.imag, self.real*other.imag + self.imag*other.real) 
  
    def __str__(self): 
        """"""This method overrides the __str__ method to print complex numbers in a readable format.""""""
        return self.real + self.imag + ""i""

if __name__ == '__main__':
    c1 = ComplexNumber(1, 2) 
    c2 = ComplexNumber(2, 3) 
  
    print(""Addition of c1 and c2 ="", c1 + c2) 
    print(""Subtration of c1 and c2 ="", c1 - c2) 
    print(""Multiplication of c1 and c2 ="", c1 * c2)"
Write a regular expression pattern to match all email addresses with the same top-level domain.,"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}"
Implement a factorial function in Python.,"def factorial(n):
 if n == 0:
 return 1
 else:
 return n * factorial(n-1)"
Generate a Fibonacci sequence with a given length.length = 10,"def generate_fibonacci_sequence(length):
 sequence = []
 current_val, next_val = 0,1
 for i in range(length):
   sequence.append(current_val)
   current_val, next_val = next_val, current_val + next_val
 return sequence

print(generate_fibonacci_sequence(length))
#Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Create a class that detects if a String contains a palindrome,"class PalindromeChecker:
  def __init__(self, word):
    self.word = word
 
  def contains_palindrome(self):
    for i in range(len(self.word)):
      if self.word[i] == self.word[len(self.word) - 1 - i]:
        return True
    return False"
"Create a function in Python that adds a new item to the beginning of a list.my_list = [""Cats"", ""Dogs"", ""Fish""]","def insert_beginning(my_list, item):
 my_list = [item] + my_list
 return my_list"
"Write a conditional statement that prints ""Welcome to my house"" when the user enters a positive number and ""Goodbye"" when the user enters a negative number.number = 4","if (number > 0):
 print(""Welcome to my house"")
else:
 print(""Goodbye"")"
"Write a Python code snippet that combines the elements of two lists into a single list.list_1 = [""Cat"", ""Dog"", ""Fish""]
list_2 = [""Monkey"", ""Tiger"", ""Lion""]",single_list = list_1 + list_2
"Design a search system in Python with two methods (or functions) one method ""add"" to add a keyword and value, the other ""search"" to search by a keyword return the corresponding value.","class SearchSystem:

 def __init__(self):
     self.data = {}

def add(self, keyword, value):
 self.data[keyword] = value

def search(self, keyword):
 if keyword in self.data:
 return self.data[keyword]
 return None"
Construct an algorithm to calculate the GCD of two numbers.,"A possible algorithm is the Euclidean algorithm. It works by repeatedly dividing the larger number by the smaller number and replace the larger number with the remainder until the remainder becomes zero and the last non-zero remainder is the GCD.

def gcd(a,b):
  if a == 0:
    return b
  if b == 0:
    return a

  if a > b:
    return gcd(a % b, b)
  else:
    return gcd(a, b % a)"
Write a code that takes a sentence as input and prints the longest word in that sentence.This is a test sentence,"def longest_word(sentence):
 longest_word = """"
 words = sentence.split()
 for word in words:
 if len(word) > len(longest_word):
 longest_word = word
 return longest_word"
"Create a class in Python with methods ""add"" and ""find"" to add a value to a dictionary and find the value in it, respectively.","class Dictionary:
 def __init__(self):
     self.data = {}

def add(self, key, value):
 self.data[key] = value

def find(self, key):
 if key in self.data:
 return self.data[key]
 return None"
Write a function to find the closest pair of points in a given array of points.,"def find_closest_pair(points):
 min_dist = float('inf')
 closest_pair = None

 for i in range(len(points)):
 for j in range(i + 1, len(points)):
 dist = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5
 if dist < min_dist:
 min_dist = dist
 closest_pair = (points[i], points[j])
 
 return closest_pair"
Create a function to delete an item from a linked list given the head and the item.,"def delete_item(head, item):
 curr = head
 prev = None
 while curr:
 if curr.val == item:
 if prev is None:
 head = curr.next
 else:
 prev.next = curr.next
 return head
 prev = curr
 curr = curr.next
 
 return head"
Construct an algorithm to find all possible combinations of a string of characters.,"A possible algorithm is to use a recursive approach. The algorithm would start from the beginning of the string and for each character, generate all possible combinations for the rest of the string. Then, for each combination, the character can either be included or excluded from the combination. Finally, return the list of all possible combinations.

def find_combinations(string):
 if len(string) == 0:
 return []
 
 result = []
 for i in range(len(string)):
 prefix = string[i]
 suffix = string[i+1:]
 combinations = find_combinations(suffix)
 
 if len(combinations) == 0:
 result.append(prefix)
 else:
 for combination in combinations:
 result.append(prefix + combination)
 result.append(combination)
 
 return result"
"How many elements are in list1 after executing the following Python code?list1 = [1, 2, 3]
list2 = [4, 5, 6]
list1.extend(list2)",6
Write a function that finds the largest number in an array of integers.,"def largest(arr): 
    max = arr[0] 
    for i in arr: 
        if i > max: 
            max = i 
    return max"
"How many elements will the array arr have after executing the following Python code?arr = [1, 2, 3]
arr.pop(1)",2
"Implement a function to calculate the total amount of money earned from a given array of stock prices.arr = [5, 7, 15.5, 6, 10, 11]","def calculateTotalEarnings(arr): 
	totalEarnings = 0 
	
	for i in range(1, len(arr)): 
		totalEarnings += max(arr[i] - arr[i - 1], 0) 
		
	return totalEarnings 

arr = [5, 7, 15.5, 6, 10, 11] 

totalEarnings = calculateTotalEarnings(arr) 

print(""Total earnings: "", totalEarnings) 

# Output
# Total earnings:  9.5"
"Create a Python function that generates a random number between two specified numbers.lower_bound = 10
upper_bound = 20","def random_num(lower_bound, upper_bound):
	import random
	return random.randint(lower_bound, upper_bound)

lower_bound = 10
upper_bound = 20

print(random_num(lower_bound, upper_bound))

# Output
# [random number between 10 and 20]"
"Construct a regular expression pattern to match a single word with the format ""XX-XXX-XXX"".","pattern = r""^\w{2}-\w{3}-\w{3}$"""
"Write a function that takes in a list of numbers and creates a new list with only the even numbers from the list.numbers = [2, 3, 4, 5, 6, 7, 8, 9]","def findEvenNumbers(numbers): 
	even_list = []
	for number in numbers: 
		if number % 2 == 0: 
			even_list.append(number)
	return even_list 

numbers = [2, 3, 4, 5, 6, 7, 8, 9]

print(findEvenNumbers(numbers))

# Output
# [2, 4, 6, 8]"
"Assume an array contains elements from 1 to 100. You need to find the missing element.arr = [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15]","def findMissingNumber(arr): 
	n = len(arr) + 1

	total = n * (n+1) / 2
	sum_of_elements = sum(arr) 
	missing_element = total - sum_of_elements 

	return int(missing_element)

arr = [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15]

print(findMissingNumber(arr)) 

# Output
# 3"
"Create a function that takes in a string and returns a new string in which all the characters are reversed.s = ""Hello World""","def reverseString(s): 
	rev = s[::-1] 
	return rev 

s = ""Hello World""

print(reverseString(s))

# Output
# dlroW olleH"
"Produce a function that takes in an array of integers and returns an array with all the prime numbers in it.arr = [2, 11, 9, 5, 4, 7]","def findPrimeNumbers(arr): 
	prime_list = []
	for number in arr: 
		isPrime = True
		for i in range(2, number): 
			if number % i == 0: 
				isPrime = False
		if isPrime: 
			prime_list.append(number)

	return prime_list 

arr = [2, 11, 9, 5, 4, 7]

print(findPrimeNumbers(arr))

# Output
# [2, 11, 5, 7]"
"Create a function that takes an array and returns true if it contains all the elements in an another array.array1 = [1, 2, 3, 4]
array2 = [1, 2, 3]","def checkArray(array1, array2): 
	for element in array2: 
		if element not in array1: 
			return False
	return True

array1 = [1, 2, 3, 4]
array2 = [1, 2, 3]

print(checkArray(array1, array2))

# Output
# True"
"Write a regular expressipon pattern to match the following date format ""DD/MM/YYYY"".","pattern = r""^(0[1-9]|[12][0-9]|3[01])[\/](0[1-9]|1[012])[\/](19[0-9][0-9]|20[0-9][0-9])$"""
Change the given code to allow the user to input a number and print it twice.,"num = int(input(""Enter a number: ""))
print(num * 2)"
"Create an array of integers with values 0, 1, 2, 3, 4.","array = [0, 1, 2, 3, 4]"
"Change the following Python code to convert the list to a dictionary of key-value pairs.mylist  = [1, 2, 3, 4, 5]","mydict = {}
for i in range(len(mylist)):
    mydict[i] = mylist[i]"
Write a Python function to check if an element is present in a given list or not.,"def is_in_list(element, input_list):
    return element in input_list"
"Create a method that returns all elements in an array that are larger than the given value x.[2, 3, 5, 7, 11, 13] and x = 4","def elements_greater_than_x(arr, x):
  result = []

  for el in arr:
    if el > x:
      result.append(el)

  return result"
"Rank the following algorithms based on time complexity: Quick Sort, Binary Search Tree, and Bubble Sort.","Quick Sort > Binary Search Tree > Bubble Sort. 
Quick Sort has the best time complexity of O(nlogn). Binary Search Tree has the time complexity of O(logn) for insertion and searching. Bubble Sort has the worst time complexity of O(n^2)."
Convert the following integers into strings.54 and 32,"str1 = str(54)
str2 = str(32)"
Create an array of 10 non-repeating random integers.,"import random

arr = []
while len(arr) < 10:
    rand = random. randint(0, 10000)
    if rand not in arr:
        arr.append(rand)

arr"
Print the current system date and time in a readable format,"import datetime

date_time = datetime.datetime.now()
print(date_time.strftime(""%A %d %B, %Y, %I:%M %p""))

# Output: Tuesday 12 November, 2019, 11:17 PM"
"Sort the items in the list alphabeticallymy_list = ['bird', 'cat', 'turtle', 'dog']","my_list.sort()
print(my_list)"
"Create a dictionary for the attributes of each object in the list.my_list = [{""name"": ""John"", ""age"": 20}, {""name"": ""Laura"", ""age"": 30}, {""name"": ""Harry"", ""age"": 25}]","my_dict = {}
for item in my_list:
 my_dict[item['name']] = item['age']
 
print(my_dict)"
"Remove the duplicate words in the given stringmy_string = ""this this is a a sentence""","my_words = my_string.split(' ')
my_words = list(dict.fromkeys(my_words))

new_string = "" "".join(my_words)
print(new_string)"
"Create a function which returns a string of the given string in uppercasemy_string = ""this is a string""","def to_uppercase(str):
 return str.upper()

new_string = to_uppercase(my_string)
print(new_string)"
"Create a function which takes two arguments, a string and a list, and prints out the list with each element preceded by the stringmy_string = ""Example: ""
my_list = [""a"", ""b"", ""c""]","def prepend_list_items(str, lst):
  for item in lst:
    print(str + item)

prepend_list_items(my_string, my_list)"
Run a regression on the given dataset and print the coefficients,"import numpy as np
from sklearn.linear_model import LinearRegression

# fit the model
model = LinearRegression()
model.fit(X, y)

# print the coefficients 
coeff = model.coef_
print(coeff)"
"Analyze a given text and generate a dictionary of frequency of each word in the text.text = ""This is a sample text to analyze the frequency of the words""","def analyze_text(text):
    text = text.lower().split()
    freqDict = {}
    for word in text:
        if word in freqDict:
            freqDict[word] += 1
        else:
            freqDict[word] = 1
    return freqDict

if __name__ == '__main__':
    text = ""This is a sample text to analyze the frequency of the words""
    print(analyze_text(text))

Output:
{'this': 1, 'is': 1, 'a': 1, 'sample': 1, 'text': 1, 'to': 1, 'analyze': 1, 'the': 1, 'frequency': 1, 'of': 1, 'words': 1}"
Describe the programming language used for the given projectProject: Building an e-commerce website using Django.,"The programming language used for the project is Python with Django web framework. Django is an open source framework for developing web applications. It uses the Model-View-Template architecture pattern for developing web applications. It provides useful features like built-in admin interface, secure authentication and authorization, support for AJAX and Python libraries."
"How can we improve the following code?def multiply(x, y):
    z = 0
    for i in range(y): 
        z += x
    return z","We can improve the code by adding an additional parameter to multiply() to check for a zero value of y. This additional ""check"" parameter will immediately return 0 if the value of y is 0, reducing the time complexity. Additionally, we can also remove the for loop and replace it with a multiplication operator to speed up the process. The updated code would look like: 

def multiply(x, y, check = False):
    if check and y == 0 : return 0
    return x*y"
"Verify the result of the following algorithmArray: [3, 2, 1]
Algorithm:
Sort the array in ascending order","The result of the algorithm is [1, 2, 3]. This can be verified by manually sorting the array in an ascending order."
"Convert the following pseudocode into code that implements a binary searchInput: Array, Item

Set low to the first index of the array
Set high to the last index of the array

while low is less than or equal to high
  set mid to the average of low and high
  if the item is found at mid, then return mid
  else if the item is less than what is found at mid,
    set high to mid - 1
  else
    set low to mid + 1

return null","def binarySearch(list, item):
    low = 0
    high = len(list) - 1

    while low <= high: 
        mid = (low + high) // 2
        guess = list[mid] 
        if guess == item:
            return mid
        if guess > item:
            high = mid - 1
        else:
            low = mid + 1

    return None"
Generate a function to check if parameter is equal to a specific string.,"def is_equal(parameter, string):
    if parameter == string:
        return True
    else:
        return False"
"Print the number of elements present in a list in C.int list[20] = {1, 4, 6, 8, 9};","int listLength = sizeof(list) / sizeof(list[0]);
printf(""Number of elements in the list: %d \n"", listLength);"
"Implement a function in Python to convert a given RGB color to Hexadecimal format.rgb_color = [255, 232, 154]","def rgb_to_hex(rgb_color):
    hex_code = ''
    for color in rgb_color:
        hex_code += f'{color:02x}'
    return hex_code

hex_code = rgb_to_hex(rgb_color) # hex_code = ""ffe89a"""
Write an assembly language program to check if two given numbers are equal or not.,"MOV AX, 12  ; Move 12 to AX
MOV BX, 12  ; Move 12 to BX
CMP AX, BX  ; Compare AX and BX
JE  Equal   ; Jump if equal
JNE NotEqual ; Jump if not equal

Equal:
  ;Statements

NotEqual:
  ;Statements"
Edit the following snippet of code to make the program print 'Hello World!'print('Hello world),print('Hello World!')
"Write an algorithm to find the number of times a given number appears in an array[5, 2, 4, 2, 5, 2, 5], number: 5","def count_number(arr, number):
    count = 0
    for num in arr:
        if num == number:
            count += 1
    return count"
Reverse a given string without using built-in library functions,"def reverse_string(string):
    rev_string = ''
    for i in range(len(string) - 1, -1, -1):
        rev_string += string[i]
    return rev_string"
"Use the input provided to print out the name of the collection of items provided.my_list = [""apple"", ""banana"", ""orange""]","print(""my_list is a collection of:"", my_list)"
"Write a for loop in Python which prints out the contents of the given stack.sample_stack = [""first"", ""second"", ""third""]","for item in sample_stack:
    print(item)"
Edit the statement to make it a valid expression in Python.x = y =,x = y = 0
"Write a script in Python for printing the given second level sub-dictionary.data = {'first': {'A': 1, 'B': 2}, 'second': {'C': 3, 'D': 4}}","second_dict = data.get('second')
for key, value in second_dict.items():
    print(key, value)"
"Using the input provided, write a code in Python to print the elements of a given dictionary along with the corresponding keys.my_dict = {'one':1, 'two':2, 'three':3}","for key, value in my_dict.items():
    print(key + ':', value)"
"Using TensorFlow, define a neural network for classifying a set of language data as either English or Spanish.Training data of 1000 samples with 500 English sentences and 500 Spanish sentences.","model = tf.keras.Sequential() 
model.add(tf.keras.layers.Input(shape=(1000,))) 
model.add(tf.keras.layers.Dense(units=128, activation='relu')) 
model.add(tf.keras.layers.Dense(units=2, activation='softmax')) 
model.compile(optimizer='Adam', loss = 'categorical_crossentropy',metrics=['accuracy']) 
model.fit(X,y, epochs=10)"
"Using an AI platform, create a sentiment analysis model to predict a sentiment of a given sentence.","model = AIplatform.SentimentAnalysis() 
model.fit(X, y) 
prediction = model.predict(sentence)"
Create an example chatbot dialogue using the given context.Context: You're a pizza maker,"User: Hi, I'm looking for a pizza
Bot: Hi there! What kind of pizza are you looking for?
User: I'd like a pepperoni pizza with extra cheese
Bot: Sure, one pepperoni pizza with extra cheese coming right up! Anything else I can do for you?"
"Write a code to optimize the parsing of a given sentence using CKY parsing.Sentence: ""The cat chased the dog around the corner of the house.""","# Imports
import nltk

# CKY Parsing
def cky_parse(sentence):
  """"""Given a sentence, apply CKY parsing to optimize the parsing of it""""""
  
  words = nltk.word_tokenize(sentence)
  
  # Create tree structure
  table = [[None for i in range(len(words))] for j in range(len(words))]
  for j in range(len(words)):
    for i in reversed(range(j)):
      parts_of_speech = nltk.pos_tag(words[i:j+1])
      part_of_speech = tuple(tag for word,tag in parts_of_speech)
      if part_of_speech in grammar.productions():
        table[i][j] = part_of_speech
        break
  return table"
Create an example Word Cloud from the given text.Text: Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.,"import matplotlib.pyplot as plt
from wordcloud import WordCloud

# Generate a word cloud image
text = ""Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.""
wordcloud = WordCloud().generate(text)

# Show the generated image
plt.imshow(wordcloud, interpolation='bilinear') 
plt.axis(""off"") 
plt.show()"
Create a search engine to process natural language queries.,"# Imports 
import nltk 
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag

# Tokenize the natural language query 
response = input(""What would you like to search for? "")
words = word_tokenize(response)
tagged_words = pos_tag(words)

# Process the query and search for relevant results
search_results = []
for word in tagged_words:
    if word[1] == ""NN"":
        search_results.append(search_for_nn(word))
    elif word[1] == ""VBP"":
        search_results.append(search_for_vbp(word))
    else:
        search_results.append(""No results found."")

# Print the results 
for result in search_results:
    print(result)"
Write a code for sorting the given array of numbers in ascending order.,"def sort_array(numbers):
    # Bubble sort algorithm 
    for i in range(len(numbers)): 
      for j in range(0, len(numbers)-i-1): 
        if numbers[j] > numbers[j+1]: 
          numbers[j], numbers[j+1] = numbers[j+1], numbers[j] 
    return numbers"
Create a program to detect spam emails.,"import nltk
from nltk.tokenize import word_tokenize

# Create a list of ""spammy"" words
spammy_words = ['free', 'discount', 'offer', 'win', 'prize', 'billion', 'million', 'cash']

# Define a function for detecting spam
def detect_spam(email):
    # Tokenize the email
    words = word_tokenize(email)
    spam_score = 0
    for word in words:
        if word.lower() in spammy_words:
            spam_score += 1
    # Return the spam score
    return spam_score"
Design and implement a genetic algorithm for finding the optimal solution for a given problem.,"# Define the population size
POPULATION_SIZE = 100

# Define the parameters for the genetic algorithm 
MUTATION_RATE = 0.2 
CROSSOVER_RATE = 0.7 
MAX_ITERATIONS = 10 

# Create the initial population
population = create_population(POPULATION_SIZE) 

# Run the genetic algorithm
for iteration in range(MAX_ITERATIONS):
  # Select the fittest individuals to reproduce
  selected_pop = select_fittest(population)
  
  # Crossover two individuals to form a new population
  children_pop = crossover(selected_pop, CROSSOVER_RATE)
  
  # Mutate the new population 
  mutate_pop = mutate(children_pop, MUTATION_RATE)
  
  # Replace the population with the mutated population 
  population = mutate_pop 

# Return the optimal solution
return best_solution(population)"
"Create an AI chatbot that can answer questions about the given topic ""Covid-19"".Topic: Covid-19","# Imports 
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer

# Create the AI Chatbot 
bot = ChatBot(""CovidBot"") 

# Train the bot on the corpus 
trainer = ChatterBotCorpusTrainer(bot) 
trainer.train(""chatterbot.corpus.english.covid19"")

# Start the chatbot 
while True:
    user_input = input(""User: "")
    if user_input == 'exit':
        break
    bot_response = bot.get_response(user_input)
    print(""CovidBot:"",bot_response)"
"Suggest a method to optimize the following code.def find_max(arr):
    max = arr[0]
    
    for i in range(1, len(arr)):
        if arr[i] > max:
            max = arr[i]
    
    return max","def find_max(arr):
    max = arr[0]
    
    for i in range(1, len(arr)):
        max = max if max > arr[i] else arr[i]
    
    return max"
"Suggest a better way of writing the following code.a = 10
b = 25

if a > b:
	print(""a is greater than b"")
else:
	print(""b is greater than a"")","a = 10
b = 25

if a < b:
	print(""b is greater than a"")
else:
	print(""a is greater than b"")"
"How would you extend the following code to add the features ""undo"" and ""redo""?def add_item(item, list):
	list.append(item)","def add_item(item, list):
    list.append(item)
    undo_list.append(item)
​
def undo_item(item, list):
    if len(list) > 0:
        last_item = list.pop()
        redo_list.append(last_item)
    
def redo_item(item, list):
    if len(redo_list) > 0:
        last_item = redo_list.pop()
        list.append(last_item)"
"Categorize a piece of code as an imperative or functional programming paradigmsum = 0;

for (i = 0; i < n; i++) {
    sum += arr[i];
}",Imperative programming paradigm.
"Develop a program to join two stringsString1 = ""Hello"";
String2 = ""World"";","public class ConcatenateStrings { 
 
  public static String concat(String s1, String s2) { 
    StringBuilder sb = new StringBuilder(); 
    sb.append(s1); 
    sb.append(s2); 
    return sb.toString(); 
  } 
  
  public static void main(String[] args) { 
    String str1 = ""Hello""; 
    String str2 = ""World""; 
    System.out.println(concat(str1, str2)); 
  } 
}"
Generate a python program to solve the Tower of Hanoi problem with n discs,"def TowerOfHanoi(n, from_rod, to_rod, aux_rod): 
    if n == 1: 
        print(""Move disk 1 from rod"",from_rod,""to rod"",to_rod)
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) 
    print(""Move disk"",n,""from rod"",from_rod,""to rod"",to_rod)
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) 
        
# Driver code 
n = 3
TowerOfHanoi(n, 'A', 'C', 'B')"
"Given an array containing a string with duplicates, output an array with only unique strings.['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana']","def remove_duplicates(arr): 
    unique_arr = []
    for item in arr:
        if item not in unique_arr:
            unique_arr.append(item)
    return unique_arr

# Driver code 
arr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana'] 
print (remove_duplicates(arr))"
"Develop a program to split a string by a specific delimiterString = ""This-is-a-test""
Delimiter = ""-""","def split(string, delimiter): 
    return string.split(delimiter) 
  
# Driver code 
string = ""This-is-a-test""
delimiter = ""-""
print (split(string, delimiter))"
"Create a dataframe in pandasList of 7 employees, each with first name and last name.","import pandas as pd

data = [{""first_name"":""John"", ""last_name"":""Doe""},
        {""first_name"":""Jane"", ""last_name"":""Smith""},
        {""first_name"":""Tom"", ""last_name"":""Johnson""},
        {""first_name"":""Sandy"", ""last_name"":""Robinson""},
        {""first_name"":""Roger"", ""last_name"":""McDonald""},
        {""first_name"":""Linda"", ""last_name"":""Williams""},
        {""first_name"":""David"", ""last_name"":""Miller""}]

df = pd.DataFrame(data)"
"Design a basic calculator that returns the output of two number inputsNumber inputs: 9, 12","def calculator(num1, num2):
  return num1 + num2"
"Modify the given code to sanitize the user input.string = raw_input(""Enter your text here: "")","import re

def sanitize(string):
    string = re.sub(r'[^\w\s]','',string)
    return string

string = sanitize(raw_input(""Enter your text here: ""))"
Write code to print out the numbers from 0 to 10 using a for loop,"for i in range(11):
    print(i)"
"Find the number of times the element 2 appears in the following arrayarr = [2, 3, 5, 7, 2, 6, 2]","count = 0
for num in arr:
    if num == 2:
        count += 1
print(count)"
"Sort this list of tuples in ascending order by the first value of the tupletuple_list = [(3,4),(5,6),(7,1)]","sorted_list = sorted(tuple_list, key=lambda x: x[0])"
Analyze the syntax of the sentenceThis sentence is an example of an imperative statement,"This sentence is an example of an imperative statement, which is an order or command given to someone to do something. The subject of the imperative sentence, ""This sentence"", is in the third person and the verb, ""is"", is in the present tense."
"Design a basic game of rock, paper, scissors","import random

def game():
    options = ['rock', 'paper', 'scissors']

    player1 = random.choice(options)
    player2 = random.choice(options)

    if player1 == 'rock' and player2 == 'scissors':
        print(""Player 1 Wins!"")
    elif player1 == 'paper' and player2 == 'rock':
        print(""Player 1 Wins!"")
    elif player1 == 'scissors' and player2 == 'paper':
        print(""Player 1 Wins!"")
    elif player1 == 'scissors' and player2 == 'rock':
        print(""Player 2 Wins!"")
    elif player1 == 'rock' and player2 == 'paper':
        print(""Player 2 Wins!"")
    elif player1 == 'paper' and player2 == 'scissors':
        print(""Player 2 Wins!"")
    else:
        print(""It's a draw!"")"
Write a Python code that prints out the following patterns:,"# Pattern 1
for i in range(1, 10):
    for j in range(1, i + 1):
        print(""*"", end="" "")
    print("" "")

# Pattern 2
for i in range(10, 0, -1):
    for j in range(i, 0, -1):
        print(""*"", end="" "")
    print("" "")"
Create a Python code for printing the following pattern.,"# Pattern 
for i in range(1,6):
 for j in range(1,i+1):
  print(i,end="""")
 print("""")"
Write a Python function to generate a random integer in the range of 1 to 10.,"import random

def random_int_1_10():
    return random.randint(1, 10)


if __name__ == '__main__':
    print(random_int_1_10())"
Write an algorithm to determine if an input string is a palindrome.racecar,"def is_palindrome(string):
      string = string.lower()
      rev_string = string[::-1]
      if string == rev_string:
          return True
      return False

if __name__ == '__main__':
  print(is_palindrome('racecar'))"
Write a code to print the power of 2 up to the given limit.8,"def power_of_two(n):
    for i in range(0,n):
        print(2**i,end="" "")

if __name__ == '__main__':
    power_of_two(8)"
Create a string parameter with a default value in golang.,"myString := flag.String(""name"", ""Default Value"", ""description"")"
"Train a logistic regression classifier on the given dataset.[Dataset details]

This dataset contains information on Belgian bank customers, including their credit score and risk profile. It consists of 1000 rows and 5 columns. The columns are:
- Age
- Credit Score
- Gender
- Risk Profile
- Status","model = LogisticRegression()
model.fit(X, y)"
"Implement a neural network in Keras to solve the given classification problem.[Problem description]

Given a dataset of images containing cats and dogs, create a neural network in Keras to classify the images into one of the two categories.","model = Sequential() 
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) 
model.add(MaxPooling2D((2, 2))) 
model.add(Conv2D(64, (3, 3), activation='relu')) 
model.add(MaxPooling2D((2, 2))) 
model.add(Conv2D(128, (3, 3), activation='relu')) 
model.add(MaxPooling2D((2, 2))) 
model.add(Conv2D(128, (3, 3), activation='relu')) 
model.add(MaxPooling2D((2, 2))) 
model.add(Flatten()) 
model.add(Dense(512, activation='relu')) 
model.add(Dense(1, activation='sigmoid')) 

model.compile(loss='binary_crossentropy', optimizer=RMSprop(lr=1e-4), metrics=['acc'])"
"Analyze the following data in R and identify the mean, median and mode of the data.[Data]

[2, 3, 5, 6, 4, 1, 3, 6, 4]","The mean of the data is 3.77, the median is 4 and the mode is 3."
"Describe the following heuristic optimization algorithm.[Algorithm Name] 
Hill Climbing Algorithm","Hill climbing is a heuristic optimization algorithm that starts with a random solution and gradually iterates over it to find the best solution. In each iteration, the algorithm looks for its neighbors and checks if they are better than the current solution. If so, then the algorithm moves to its neighbor and repeats the same process iteratively. It will terminate when it reaches the local optimum solution."
Write an assembly language program to check if a given number is least in its sequence.,".model small
.stack 100h
.data

num dw 5 
.code

start:
mov ax, @data
mov ax, num
cmp ax, [num+2] ; compare current number with the next number
jbe least ; if current number is lesser or equal jump to least 

;code to print least number
least:
mov ah, 9
mov dx, offset num
int 21h

mov ah, 4Ch
int 21h
end start"
"Using Haskell, implement a function to calculate the sum of numbers from 1 to the given number.","sumOfNums :: Integer -> Integer
sumOfNums n = sum [1 .. n]"
Generate a HTTP request using Python to send a GET request to https://www.wikihow.com/Main-Page,"import requests

url = 'https://www.wikihow.com/Main-Page'

response = requests.get(url)

print(response)"
"Create a dictionary and explore its functionality by finding the keys in the dictionary.dictionary = {'name': 'John', 'age': 28}","dictionary = {'name': 'John', 'age': 28}

# To find the keys in dictionary
keys_in_dictionary = dictionary.keys()
print(keys_in_dictionary) # Output: dict_keys(['name', 'age'])"
Write a script in Python to take an age as an input and return a boolean which indicates if a person is a minor or not.,"def is_minor(age):
    """"""
    Function to determine if a person is a minor or not
    """"""
    if age < 18:
        return True
    else:
        return False

# Let's test it
age = 18
print(is_minor(age)) # Output: False"
"Cut a string of characters at every fourth character.string = ""Hello World!""","# Create an empty string
cut_string = """"

# Loop over the string
for i in range(0, len(string), 4):
    cut_string += string[i]

print(cut_string) # Output: Hoeo!"
Write a code to classify emails as spam or not-spam using Naive Bayes algorithms.,"# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Loading the dataset
df = pd.read_csv('emails.csv')

# Feature engineering
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['message'])
y = df['label']

# Training the model
nb = MultinomialNB()
nb.fit(X,y)

# Classification 
example_emails = [""You won the lottery!"", ""I need some help with my homework""]
X_example = vectorizer.transform(example_emails)
predicted_labels = nb.predict(X_example)
print(predicted_labels) # Output: [spam, not-spam]"
Create a function that takes two parameters and returns an array with those two numbers in it.,"def create_array(param1, param2):
    """"""A function that takes two parameters and returns an array with those two numbers in it.""""""
    arr = [param1, param2]
    return arr

# Let's test it
arr = create_array(1, 5)
print(arr) # Output: [1, 5]"
Write a code to extract all the hyperlinks from a Wikipedia page.,"# Importing necessary libraries
import bs4
import requests

# Fetching the data
url = ""https://en.wikipedia.org/wiki/Main_Page""
response = requests.get(url)
soup = bs4.BeautifulSoup(response.text)

# Extracting hyperlinks
links = []
for link in soup.find_all('a'):
    links.append(link.get('href'))

# Printing all hyperlinks present in the page
print(links)"
Write a code to check for a valid zip code in US.,"def is_valid_zip_code(zip_code):
    """""" Function to check whether the given zip code is valid in the US """"""
    valid_zip_code_pattern = re.compile(r""^[0-9]{5}(?:-[0-9]{4})?$"")
    if valid_zip_code_pattern.match(zip_code):
        return True
    return False

# Let's test it
zip_code = ""12345""
print(is_valid_zip_code(zip_code)) # Output: True"
Implement the longest common subsequence algorithm in C.,"#include<stdio.h> 
#include<string.h> 

int lcs( char *X, char *Y, int m, int n ) 
{ 
    int L[m + 1][n + 1]; 
    int i, j; 
  
    /* Following steps build L[m + 1][n + 1] in 
       bottom up fashion. Note that L[i][j] 
       contains length of LCS of X[0..i-1] 
       and Y[0..j-1] */
    for (i = 0; i <= m; i++) { 
        for (j = 0; j <= n; j++) { 
            if (i == 0 || j == 0) 
                L[i][j] = 0; 
  
            else if (X[i - 1] == Y[j - 1]) 
                L[i][j] = L[i - 1][j - 1] + 1; 
  
            else
                L[i][j] = max(L[i - 1][j], L[i][j - 1]); 
        } 
    } 
  
    /* L[m][n] contains length of LCS 
    for X[0..n-1] and Y[0..m-1] */
    return L[m][n]; 
} 

/* Driver program to test above function */
int main() 
{ 
    char X[20] = ""ABCDEFG""; 
    char Y[15] = ""ABREGF""; 
  
    int m = strlen(X); 
    int n = strlen(Y); 
  
    printf(""The length of the LCS is %d"", 
      lcs( X, Y, m, n ) ); 
  
    return 0; 
}"
Create a function to represent a decimal number in its binary form.,"def decimal_to_binary(num):

result = """"

while num > 0:
 remainder = num % 2 
 result = str(remainder) + result
 num = num // 2

return result"
"Write a code snippet to loop through an array and check if the element is a number or not.data = [1, 'a', 'b', 2]","for item in data:
    if type(item) == int:
        print(""Element is a number!"")
    else:
        print(""Element is not a number!"")"
Write a Python function that prints the first n even numbers.,"def print_even_numbers(n):
    for i in range(2, n*2, 2): 
        print(i)"
"Given two data sets, one containing the user id (user_id) and first name (firstname) and another data set containing user_id and last name (lastname), write a Python function to join the two sets and create a new data set with firstname, lastname and user_id.user_id: [1,3,4,7] 
firstname: [""John"", ""Alice"", ""Madison"", ""Peter""] 
user_id: [1,2,3,6]
lastname: [""Smith"", ""Jones"", ""Brown"", ""Miller""]","def join_sets(user_id1, firstname, user_id2, lastname):
    user_id = user_id1 + user_id2
    names = firstname + lastname
    result = []
    for id in user_id:
        firstname = [name for id, name in zip(user_id1, firstname) if id == id][0]
        lastname = [name for id, name in zip(user_id2, lastname) if id == id][0]
        result.append({""user_id"": id, ""firstname"": firstname, ""lastname"": lastname})
    return result"
"Using the given list of strings, create a function to count and return the number of capital letters in the list.","def count_capital_letters(string_list):
  count = 0
  for string in string_list:
    for char in string:
      if char.isupper():
        count += 1
  return count"
"Write a Python program to compute and return a list that contains every possible combination of two given lists.list1 = [1,2]
list2 = [3,4]","def combine_lists(list1,list2):
  result = []
  for i in list1:
    for j in list2:
      result.append([i,j])
  return result"
Create a function to return all the indices in a string where a given substring occurs.,"def find_substring(main_string, substring):
  indices = []
  position = -1
  while True:
    position = main_string.find(substring, position + 1)
    if position == -1:
      break
    indices.append(position)
  return indices"
Return an error message when a user inputs a negative number.,"if (number < 0):
  print('Error: Number cannot be negative.')"
Create a function to detect even numbers.,"def is_even(number):
  if (number % 2 == 0):
    return True
  else:
    return False"
Generate a function that computes the sum of the numbers in a given list.,"def compute_sum(numbers):
  total = 0
  for num in numbers:
    total += num
  return total"
"Print out the values in the following dictionary.my_dict = {
  'name': 'John Doe',
  'age': 32,
  'city': 'New York'
}","print('Name:', my_dict['name'])
print('Age:', my_dict['age'])
print('City:', my_dict['city'])"
"Create a class to store student names, ages and grades.","class Student:
  def __init__(self,name,age,grade):
    self.name = name
    self.age = age
    self.grade = grade

  def get_name(self):
    return self.name

  def set_name(self,name):
    self.name = name

  def get_age(self):
    return self.age

  def set_age(self,age):
    self.age = age

  def get_grade(self):
    return self.grade

  def set_grade(self,grade):
    self.grade = grade"
"Write a virtual assistant in Python to gauge the sentiment of a given string.string = ""I had a terrible day""","import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

def sentiment_analyzer(string):
 sid = SentimentIntensityAnalyzer()
 snt = sid.polarity_scores(string)
 return snt[""compound""]

sentiment_analyzer(string)"
Write a Python function to check if a number is perfect or not. A number is said to be a perfect number if its sum of divisors is equal to itself.,"def is_perfect(n):
 s = 0
 for i in range(1, n):
 if n % i == 0:
 s += i
 return s == n"
"Use the Python built-in function filter() to find all numbers divisible by 5.mylist = [10, 21, 32, 45, 56, 77]","list(filter(lambda x: (x % 5 == 0), mylist))"
Calculate the square root of a number using bisection search.number = 9,"low = 0
high = number
answer = (high + low) / 2
#Store the difference between the answer and the number
diff = (answer ** 2) - number
#Loop until the difference is within a very small tolerance
while abs(diff) > 0.00001:
    if diff > 0:
        #the answer is too high
        high = answer
    else:
        #the answer is too low
        low = answer
    #compute a new answer
    answer = (high + low) /2
    #and compute a new diff
    diff = (answer ** 2) - number
print(answer)"
Convert this time to the 12-hour time format.16:47,4:47 PM
Construct a loop to print numbers from 1 to 10 using a while loop in Python.,"i = 1
while i <= 10:
    print(i)
    i += 1"
Change the following regular expression so that it matches terms beginning with 'g'^g,^g\w+
Create a Python script that find the number of occurrences of a specific word in a given sentence.This is a sample sentence.,"sentence_input = ""This is a sample sentence.""

def count_keyword(sentence_input, keyword):
    return sentence_input.lower().count(keyword.lower())

count = count_keyword(sentence_input, ""sentence"")
print(""The word 'sentence' occurs "" + str(count) + "" times."")"
Make a class in Python which will represent a binary search tree.,"class BinarySearchTree:
 
    def __init__(self, value): 
        self.left = None
        self.right = None
        self.value = value
 
    def inorder(self):
        if self.left:
            self.left.inorder()
        print(self.value)
        if self.right:
            self.right.inorder()
 
    def insert(self, value):
        if value <= self.value:
            if self.left is None:
                self.left = BinarySearchTree(value)
            else:
                self.left.insert(value)
        elif value > self.value:
            if self.right is None:
                self.right = BinarySearchTree(value)
            else:
                self.right.insert(value)"
Change the following Python program so that it prints out the palindromic substrings.string = 'mom',"def palindromicSubstrings(string): 
    for start in range(len(string) + 1):
        for end in range(start + 1, len(string) + 1):
            substring = string[start:end]
            if substring == substring[::-1]:
                print(substring) 
palindromicSubstrings(string)"
"Sort a given list of numbers and print the result.myList = [9, 2, 5, 1, 8]","myList.sort()
print(myList)"
"Print the first element of a given array.myArray = [20, 45, 70, 95]",print(myArray[0])
"Sum the elements of a given array and print the result.array = [2, -7, 4, 5]","s = sum(array)
print(s)"
"Write a code to return the list of integers between two given numbers.start = 5
end = 9","def get_integer_between(start, end):
        return list(range(start, end + 1))

print(get_integer_between(start, end))"
"Multiply every element of a list and print the result.myList = [3, 4, 5]","mulp = 1
for i in myList:
    mulp = mulp * i
print(mulp)"
Create a function in Python that takes a number as an argument and displays the corresponding day from Monday to Sunday.,"def getDay(num):
    days = {
        0: 'Monday',
        1: 'Tuesday',
        2: 'Wednesday',
        3: 'Thursday',
        4: 'Friday',
        5: 'Saturday',
        6: 'Sunday',
    }
    return days[num]"
What is the syntax for filtering a DataFrame using an OR condition in Pandas?,df.loc[(condition1) | (condition2)]
How to check for a key in a dictionary in Python?,"if key in dictionary:
    # execute this block of code
else:
    # execute this block of code"
How can we extract the first 2 characters from a string in Perl?,"$substr = substr $string, 0, 2;"
"Write a function in Python that accepts an array as an argument and returns the index of the item with the maximum value.arr = [2, 5, 9, 4, 10]","def find_max_index(arr):
    if len(arr) == 0:
        return None
    max_val = arr[0]
    max_index = 0

    for i in range(1, len(arr)):
        if arr[i] > max_val:
            max_val = arr[i]
            max_index = i
    return max_index

arr = [2, 5, 9, 4, 10]
max_index = find_max_index(arr)
print(max_index)  # Output 4"
"Rewrite the following function so that it returns a tuple instead of two separate values.def random_arr(arr):
    idx = random.randint(0,len(arr)-1)
    return arr[idx], idx","def random_arr(arr):
    idx = random.randint(0, len(arr)-1)
    return (arr[idx], idx)"
"Create a function that takes two integer arguments, subtracts the second one from the first one, and returns the result.num1 = 3, num2 = 2","def subtract(num1, num2):
    return num1 - num2

result = subtract(3, 2)
print(result)  # Output: 1"
"Design a class BankAccount that represents a bank account with the attributes name, balance, and interest_rate.","class BankAccount:
    def __init__(self, name, balance, interest_rate):
        self.name = name
        self.balance = balance
        self.interest_rate = interest_rate

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        self.balance -= amount"
"Write an algorithm that takes a set of numbers and returns the sum of all numbers in the set.my_set = {2, 3, 4, 5}","def sum_set(my_set):
    total = 0 # Initialize total
    for num in my_set: 
        total += num
    return total

my_set = {2, 3, 4, 5}
total = sum_set(my_set)
print(total)  # Output 14"
Create a function to calculate the sum of 2 numbers and return 'None' if both the parameters are not numbers.,"def sum_of_two_numbers(x, y):
    if type(x) is not int or type(y) is not int:
        return None
    return x + y"
"Using a single 'for' loop, iterate through an array and print out the indices and values of each element to the console.[2, 5, 8, 9, 10]","for i in range(len(arr)):
    print(""Index: "" + str(i) + "", Value: "" + str(arr[i]))"
Write a test suite to test an arithmetic function that takes two arguments and returns the sum.,"import unittest

class TestArithmeticFunction(unittest.TestCase):
    def test_sum(self):
        self.assertEqual(arithmetic_function(2, 5), 7)
        self.assertEqual(arithmetic_function(-4, 9), 5)
        self.assertEqual(arithmetic_function(-2, 0), -2)

if __name__ == '__main__':
    unittest.main()"
Create a method that takes a string as a parameter and returns the number of unique characters present in the string.python,"def count_unique_characters(str):
    characters = set()
    for char in str:
        characters.add(char)
    return len(characters)"
"Create a regex pattern to match the following string: ""2019-08-21"".",\d{4}-\d{2}-\d{2}
"Update the given code to sort an array of strings based on their lengths.arr = [""dogs"", ""cat"", ""lion""]","def sort_by_length(arr):
    arr.sort(key=len)
    return arr"
Create a function to generate a random number within the range of 0 and 1000.,"import random

def random_in_range():
    return random.randint(0, 1000)"
"Change the variable names in the given code to comply with the chosen coding standard.x = ""Hello World!""
y = 1","message = ""Hello World!""
value = 1"
"Using the input provided, generate a random string consisting of 8 characters.[a, b, c, d, e, f, g, h]","import random

def random_string(arr):
    return ''.join(random.sample(arr, 8))"
Create a tag cloud to visualize the most frequent words in the following sentence.The quick brown fox jumps over the lazy dog,"<div>
  <span class=""tag"" style=""font-size: 300%;"">The</span>
  <span class=""tag"" style=""font-size: 200%;"">quick</span>
  <span class=""tag"" style=""font-size: 250%;"">brown</span>
  <span class=""tag"" style=""font-size: 150%;"">fox</span>
  <span class=""tag"" style=""font-size: 200%;"">jumps</span>
  <span class=""tag"" style=""font-size: 250%;"">over</span>
  <span class=""tag"" style=""font-size: 100%;"">the</span>
  <span class=""tag"" style=""font-size: 150%;"">lazy</span>
  <span class=""tag"" style=""font-size: 200%;"">dog</span>
</div>"
"What is the average value of all elements in a given array?//Given Array
[1, 8, 4, 5, 9]","total = 0

for i in arr:
    total += i

average = total / len(arr)

print(average) # 5.6"
"Design a function to find the number of common keys between two arrays.let array1 = [""a"", ""b"", ""c"", ""d"", ""e"", ""f""];
let array2 = [""b"", ""d"", ""f"", ""g"", ""h"", ""i""];","function commonKeys(array1, array2) {
  let commonKeys = [];
  for (let i = 0; i < array1.length; i++) {
    if (array2.indexOf(array1[i]) !== -1) {
      commonKeys.push(array1[i]);
    }
  }
  
  return commonKeys.length;
}"
"Write a code to add a new key and value to a given dictionary.Dictionary: {'name': 'John', 'age': 18, 'city': 'New York'}
 New Key: 'profession', Value: 'journalist'","dictionary['profession'] = 'journalist' # add new key and value to dictionary{'name': 'John', 'age': 18, 'city': 'New York', 'profession': 'journalist' }"
Translate the following sentence from Spanish to English.Nuestras ideas eran descabelladas.,Our ideas were outlandish.
"Separate the given words on the basis of their given data types.Words: Yellow, 3.2, purple","String: Yellow
Float: 3.2
String: purple"
Calculate the area of a circle with a radius of 10 cm.,314.16 cm2
"Rewrite the following python code to an equivalent code using lambda and sorted function.def sort_by_length(words):
    return sorted(words, key=lambda x: len(x))","sort_by_length = lambda words: sorted(words, key=len)"
Create a Django application to store and retrieve questions and answers.,"# Project Name
project = 'questions_and_answers'

# Application Name
application = 'qa_app'

# Create the project directory
import os
if not os.path.exists(project):
    os.mkdir(project)

# Create the Django application
from django.core.management import call_command
call_command('startapp', application, project)

# Setup the database
from django.conf import settings

default_db_name = project + '.sqlite3'
settings.configure(
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(project, default_db_name),
        }
    }
)

from django.db import models

# Create the models
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    answer_text = models.CharField(max_length=200)

# Make and apply the migrations
call_command('makemigrations', application)
call_command('migrate')"
Write a code to print the Fibonacci series of n terms.,"def printFibonacciSeries(n):
    a, b = 0, 1
    for i in range(0, n):
        print(a)
        c = a + b
        a = b
        b = c

printFibonacciSeries(10)"
Write a code to find the number of singular and plural words in a given paragraph.This is a pleasant evening. I prefer to stay at home for the evening.,"let paragraph = ""This is a pleasant evening. I prefer to stay at home for the evening."";

let words = paragraph.split(' ');
let countSingularWords = 0;
let countPluralWords = 0;
for (let i = 0; i < words.length; i++) {
  let lastChar = words[i].charAt(words[i].length-1);
  if (lastChar === 's') {
    countPluralWords++;
  } else {
    countSingularWords++;
  }
}

console.log(`Number of singular words = ${countSingularWords}`);
console.log(`Number of plural words = ${countPluralWords}`);"
Create an associative array containing 8 records of student data.,"let studentData = {
  ""1"": {
    ""name"": ""John"",
    ""age"": ""18"",
    ""country"": ""USA""
  },
  ""2"": {
    ""name"": ""Peter"",
    ""age"": ""20"",
    ""country"": ""UK""
  },
  ""3"": {
    ""name"": ""Anna"",
    ""age"": ""19"",
    ""country"": ""USA""
  },
  ""4"": {
    ""name"": ""Steven"",
    ""age"": ""22"",
    ""country"": ""Canada""
  },
  ""5"": {
    ""name"": ""Alex"",
    ""age"": ""21"",
    ""country"": ""Australia""
  },
  ""6"": {
    ""name"": ""David"",
    ""age"": ""25"",
    ""country"": ""UK""
  },
  ""7"": {
    ""name"": ""Dan"",
    ""age"": ""23"",
    ""country"": ""USA""
  },
  ""8"": {
    ""name"": ""Julia"",
    ""age"": ""18"",
    ""country"": ""Germany""
  }
};

console.log(studentData);"
Write a code to identify palindromic numbers between 1 and a given number n.,"def printPalindromicNumbers(n): 
    for num in range(1, n + 1):
        s = str(num)
        if(s == s[::-1]):
            print(num, end="" "")

printPalindromicNumbers(100)"
"Identify which of the given statements is incorrect.- fopen() is a PHP function for opening a file
- fgets() is a JavaScript function for reading contents of a file
- fread() is a PHP function for reading contents of a file",fgets() is a JavaScript function for reading contents of a file is incorrect. The correct statement is fgets() is a PHP function for reading contents of a file.
Write a code to define a function to multiply two numbers passed as arguments.,"def multiply(x, y):
   return x * y"
Create a class and a method to convert an integer to a string.,"class IntToString {
  public static String intToString(int n) {
    String s = String.valueOf(n); 
    return s;
  }
}"
"Create a function that takes a list of strings and returns a new list of strings with the first letter of each string as capital.names = [""mary"", ""john"", ""joseph""]","def capitalize_names(names):
 new_names = []
 for name in names:
    new_name = name[0].capitalize() + name[1:]
    new_names.append(new_name)
 return new_names"
"Create a function that takes a string as an argument and checks if all the characters in the string are unique, and returns a boolean.","def are_all_characters_unique(string):
    seen_characters = set()
    for c in string:
        if c in seen_characters:
            return False
        seen_characters.add(c)
    return True"
"Create a program that prints a given 2D array in a spiral form.a = [[1,2,3],[4,5,6],[7,8,9]]","def spiral_print(a):
    m = len(a)
    n = len(a[0])
 
    t = 0   #top
    b = m-1 #bottom
    l = 0   #left
    r = n-1 #right

    dir = 0
    while l<=r and t<=b:

        if dir == 0:
            for i in range(l, r+1):
                print(a[t][i], end="" "")
            t += 1
        elif dir == 1:
            for i in range(t, b+1):
                print(a[i][r], end="" "")
            r -= 1
        elif dir == 2:
            for i in range(r, l-1, -1):
                print(a[b][i], end="" "")
            b -= 1
        elif dir == 3:
            for i in range(b, t-1, -1):
                print(a[i][l], end="" "")
            l += 1

        dir=(dir+1)%4"
"Write code to create a new array with elements that are the doubled values of each element in the original array.let nums = [1, 2, 3, 4];",let doubledNums = nums.map(x => x * 2);
Replace all punctuation marks in the following sentence with underscores.She looked up at the stars and got lost in thought.,She_looked_up_at_the_stars_and_got_lost_in_thought_
"Compare two objects and return 0 if the objects are equal, greater than 0 if the first object is larger, 
and less than 0 if the second object is larger.Object 1 - [name: John, age: 30]
Object 2 - [name: Jane, age: 28]","int compareObjects(Object obj1, Object obj2) {
    if (obj1.name == obj2.name) {
        return obj1.age - obj2.age;
    } 
    else {
        return obj1.name.compareTo(obj2.name);
    }
}"
"Find the sum of all even numbers in the following list (Python code):[1, 4, 6, 7, 8, 12, 19]","sum_even_num = 0
for num in [1, 4, 6, 7, 8, 12, 19]:
    if num % 2 == 0:
        sum_even_num = sum_even_num + num 
print(sum_even_num)"
"Insert a line into the code to improve its efficiency.def double_list(lst):
    for i in range(len(lst)):
        lst[i] *= 2","def double_list(lst):
    output_list = [x * 2 for x in lst]
    return output_list"
"Create a program to detect whether a given string contains only vowels or not.let str = ""hello""","let containsOnlyVowels = str => {
    let vowels = [""a"", ""e"", ""i"", ""o"", ""u""];
    for (let i = 0; i < str.length; i++) {
        if (!vowels.includes(str[i])) {
            return false;
        }
    }
    return true;
};

let result = containsOnlyVowels(str);
console.log(result); // prints false"
"Create a function to print the multiples of an integer up to a limit.let number = 3 
let limit = 10","let printMultiples = (num, limit) => {
    for (let i = num; i <= limit; i += num) {
        console.log(i);
    }
};

printMultiples(number, limit); // prints 3, 6, 9"
"Create a for loop for copying an array.arr = [1, 2, 3, 4, 5]","arr_copy = []
for i in arr:
    arr_copy.append(i)"
"Format a string for a discounted price.price = 5.99
discount = 0.20",discounted_price = '${:.2f}'.format(price * (1 - discount))
Create a function that takes a user id and returns their name.user_id = 1,"def get_user_name(user_id):
    sql_query = ""SELECT first_name, last_name FROM user_profiles WHERE user_id = ?""
    user = cursor.execute(sql_query, (user_id,))
    return user[0] + "" "" + user[1]"
"Switch the positions of the first and last element in a list.list = [1, 2, 3, 4, 5]","list[0], list[-1] = list[-1], list[0]"
"Create an HTTP request to retrieve data from an API.API_URL = ""https://example.com/api/get_data""","import requests

response = requests.get(API_URL)
data = response.json()"
"Rewrite the following program snippet according to the PEP8 guidelines:def calculate_sum(a,b): return a+b;","def calculate_sum(a, b):
    return a + b"
"Create a function to sort a list of numbers without using python's built-in sort function.[3,5,4,2,1]","# Function to sort a list of numbers without using Python's built-in sort function
def my_sort(numbers):
    n = len(numbers)

    for i in range(n): 
        for j in range(0, n-i-1):
            if numbers[j] > numbers[j+1] :
                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]
                
    return numbers

# Example list
list = [3,5,4,2,1]
print(my_sort(list))"
"Make a program to display the maximum, minimum and average of numbers in a list[1,2,3,4,5]","list = [1,2,3,4,5]
list_length = len(list)
max_val = max(list)
min_val = min(list)
avg_val = sum(list) / list_length

# Display Output
print(""Maximum: "", max_val)
print(""Minimum: "", min_val)
print(""Average: "", avg_val)"
"Create a program to determine the intersecting elements of two listslist1 = [1, 2, 3]
list2 = [3, 4, 5]","def intersection(list1, list2): 
    l1_set = set(list1) 
    l2_set = set(list2) 
  
    commons = l1_set.intersection(l2_set) 
      
    return list(commons) 

# Example 
list1 = [1, 2, 3]
list2 = [3, 4, 5]

print(intersection(list1, list2))"
"Using the given input, print a zero (or cross) pattern using asterisks (*) and underscores (_)3","*_*_*
_*_*_
*_*_*"
"Write a Python function that prints the frequencies of even and odd numbers in a given array.[2, 5, 4, 6, 8, 10]","def frequency_of_odd_and_even(arr):
    freq_even = 0
    freq_odd = 0
    for i in arr:
        if i % 2 == 0:
            freq_even += 1
        else:
            freq_odd += 1
    print(""Frequency of even numbers:"", freq_even)
    print(""Frequency of odd numbers:"", freq_odd)"
"Convert the given API call from cURL to Fetchcurl -X POST https://example.com/api/users -H 'Content-type: application/json' -d '{ ""name"": ""John"" }'","fetch(""https://example.com/api/users"", {
    method: 'POST',
    headers: {
        'Content-type': 'application/json'
    },
    body: JSON.stringify({name: 'John'})
})"
What is the volume of a sphere with radius 7 cm?,The volume of a sphere with radius 7 cm is 1436.755 cm3.
"Suppose you are given two lists A and B and you need to check if B’s elements are all in A.A = [1, 2, 3, 4, 5], B = [2, 3]","def compare_lists(A, B):
    return set(B).issubset(set(A))"
How would you convert a decimal number such as 2.345 to a binary representation?,"2.345 can be converted to binary representation by multiplying 2.345 by 2 repeatedly and taking note of the whole number of each multiplication. 

The binary representation of 2.345 is 10.011111."
"Observe the following code snippet and identify any errors that it containsfor i in range(10):
    print(""Hello world!"")","The code snippet does not contain any errors and will print ""Hello world!"" ten times."
"Describe the action taken by the following code snippet and provide a sample outputdef format_string(x): 
    return ""The output is: {}"".format(x)","The code snippet takes an input string, ``x``, and formats it by adding a prefix of ""The output is: "" to it and returns the formatted string. For example, if the input string is ""Hello"", the output string will be ""The output is: Hello""."
"Suggest a better way to store a series of strings for fast lookupstrings = [""apple"", ""strawberry"", ""banana""]","A better way to store a series of strings for fast lookup is to use a hash table. A hash table is a data structure that uses hashing to store data and allows for efficient lookups. To use a hash table to store the strings, we can create a mapping between each string and a unique key. For example, we can map ""apple"" to 0, ""strawberry"" to 1, and ""banana"" to 2. This allows us to quickly look up a string based on its key."
"Given the following code snippet, write the code to achieve the expected outputdef convert_to_title_case(input):
    # Expected Output:
    # input = ""this is a Title""
    # Output = This Is A Title","def convert_to_title_case(input):
    words = input.split(' ')
    output = []
    for word in words:
        output.append(word.capitalize())
    return ' '.join(output)

# Expected Output:
input = ""this is a title""
# Output = This Is A Title
print(convert_to_title_case(input))"
Suggest a data structure and implementation to store a list of vehiclesA list of cars and buses,"A list of vehicles can be stored in an adjacency list data structure. Each node in the graph represents either a car or a bus. The edges link the respective cars and buses, indicating their connectivity. For example, if we have a list of cars and buses, we can store it as follows: 

graph = {
    'cars': {'car1', 'car2', ...}, 
    'buses': {'bus1', 'bus2', ...}, 
    'edges': { 
        ('car1', 'bus1'), 
        ('car2', 'bus2'), 
        ...
    } 
}"
Suggest an appropriate data structure to store the test scores of a classTest scores of each student in the class,"An appropriate data structure to store the test scores of a class is a nested dictionary. The outer dictionary will have the student's name as the key and the inner dictionary will have the test name as the key and the score as the value. For example, if we have the test scores for three students for two tests, we can store it as follows: 

scores = { 
    'John': { 
        'Test1': 95,
        'Test2': 73
    }, 
    'Adam': { 
        'Test1': 87, 
        'Test2': 86 
    }, 
    'Sarah': { 
        'Test1': 76, 
        'Test2': 75 
    }
}"
Suggest an algorithm to find the longest common sub-string in two stringsTwo strings of length n and m,"A possible algorithm to find the longest common sub-string in two strings is the dynamic programming approach. The algorithm works by comparing the two given strings letter by letter and storing the results in a two-dimensional array. The algorithm checks the characters at each index of the given strings and if they are equal, the value of the corresponding cell is set to 1 plus the previous diagonal cell's value. If the characters are not equal, the cell is set to 0. The longest sub-string is then determined by traversing through the matrix and looking for the maximum value."
"Create a class for a book object with properties for the title, author and pages","class Book:
    def __init__(self, title, author, pages):
        self.title = title
        self.author = author
        self.pages = pages"
Create a function that takes a single argument and returns a string describing the type of argument.,"def get_argument_type(arg):
    if isinstance(arg, str):
        return 'string'
    if isinstance(arg, int):
        return 'integer'
    if isinstance(arg, float):
        return 'float'
    if isinstance(arg, list):
        return 'list'
    if isinstance(arg, dict):
        return 'dictionary'"
"Write a python code snippet to calculate the sum of any number of integers.num1 = 10
num2 = 6 
num3 = 8","sum = num1 + num2 + num3
print(""The sum is"", sum)"
Write an Excel formula to calculate the average of the numbers in cells A1 and A2.,"=AVERAGE(A1,A2)"
"Build a TensorFlow model for classification of a 2-D dataset.X = [[1, 2], [3, 4], [5, 6]]
Y = [0, 1, 1]","""""""
Build a TensorFlow model for classification of a 2-D dataset.

Input:
X = [[1, 2], [3, 4], [5, 6]]
Y = [0, 1, 1]

Output:
import tensorflow as tf

# data
X = tf.constant([[1, 2], [3, 4], [5, 6]], dtype=tf.float32)
Y = tf.constant([0, 1, 1], dtype=tf.float32)

# model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(2, activation='relu'))
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X, Y, epochs=50, batch_size=3)
"""""""
"Rewrite the code so that it can run in Python 3 instead of Python 2.#!/usr/bin/env python
print 'Hello, world!'","#!/usr/bin/env python

print('Hello, world!')"
Modify the code to ensure that the variable ‘str’ not being Nonestr = input(),"str = input()
if str is not None and str != '':
    # do something with the input"
List all the prime numbers less than a specified number ‘n’n = 10,"def is_prime(n):
    """"""Returns True if n is a prime number and False otherwise.""""""
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True
    
def prime_numbers_less_than(n):
    """"""Returns a list of all prime numbers less than n.""""""
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes

n = 10
print(prime_numbers_less_than(n)) # [2, 3, 5, 7]"
Create a class to save data of a user's account.,"class Account:
    def __init__(self, username, password, email):
        self.username = username
        self.password = password
        self.email = email
    
    def get_info(self):
        return (self.username, self.password, self.email)"
Describe the differences between np.array and a list.,"Numpy arrays are more efficient than lists as they are homogeneous in nature. This means that all the items in a numpy array must be of the same data type, while a list can contain items of any data type. Additionally, numpy arrays can be multi-dimensional while lists are only one-dimensional. Numpy arrays can be indexed and sliced the same way as lists. However, operations on numpy arrays are much faster than operations on lists. Lastly, numpy arrays support vectorization which allows for efficient computation."
"Use a loop to print out each element of the list.list = [1, 2, 3, 4]","for element in list:
    print(element)"
Create a Regex pattern to validate mobile phone numbers.,"^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$"
Use NLTK to analyse the sentiment of a given text.The movie is awesome,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
 
sid = SentimentIntensityAnalyzer()
 
text = ""The movie is awesome""
  
scores = sid.polarity_scores(text)
  
print(scores['compound'])

# Output
0.6249"
"Write an assembly language program to print ""Hello, World!""","section .data
msg	 db 'Hello, World!', 10
len	 equ $ - msg
	
section .text
global _start ;must be declared for linker (ld)

_start:		;tells linker entry point

	mov edx,len ;message length
	mov ecx,msg ;message to write
	mov ebx,1	;file descriptor (stdout)
	mov eax,4	;system call number (sys_write)
	int 0x80	;call kernel

	mov eax,1	;system call number (sys_exit)
	int 0x80	;call kernel"
Train an AI model to predict whether an email is spam or not.,"import nltk
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# loading data
data = [('This is an email about about a promotion', 'spam'),
	('We want to transfer money to your account', 'spam'),
	('This email is about programming', 'not_spam'),
	('There is a new version of python', 'not_spam'),
]

# extracting features
X, y = [], []
for feat, lab in data:
	X.append(feat)
	y.append(lab)

cv = CountVectorizer()
X_vect = cv.fit_transform(X)

# training the model
model = MultinomialNB()
model.fit(X_vect, y)

# predicting
prediction = model.predict(cv.transform([""This is an email about a discount sale""]))
print(prediction)

# Output
['spam']"
"Write a Python script to determine how many lowercase letters are in a given string.string = ""Hello World!""","""""""
Python script to determine how many lowercase letters are in a given string 
""""""

# Initialize a variable to count the lowercase letters
lowercase_letter_count = 0

# Loop through each character in the string
for char in string:
    # Check if the character is a lowercase letter
    if char.islower():
        # If yes, then increment the counter
        lowercase_letter_count += 1

# Print the total number of lowercase letters
print(lowercase_letter_count)"
"Generate a graphical representation of a dataset.The following data describes the height of students in grade 8:

X: 155 cm , 159 cm , 166 cm , 165 cm, 186 cm

Y: 50 kg , 60 kg , 55 kg, 45 kg , 75 kg","import matplotlib.pyplot as plt

x_list = [155, 159, 166, 165, 186]
y_list = [50, 60, 55, 45, 75]

plt.scatter(x_list, y_list )

plt.xlabel(""Height (cm)"")
plt.ylabel(""Weight (kg)"")
plt.title(""Height vs Weight of Grade 8 Students"")

plt.show()"
"Modify the following Python code to print the program output unique and ordered.x = [1, 2, 3, 4, 4, 3, 1]
print(x)","x = [1, 2, 3, 4]
y = list(set(x))
y.sort()
print(y)"
Write a Python function that takes a number n as parameter and prints out all even numbers from 2 to n.,"def printEven(n): 
   for i in range(2, n+1): 
      if(i % 2 == 0): 
         print(i, end = "" "")"
"Write a line of code to display a text message in the console saying ""Hello world!"".","console.log(""Hello world!"");"
"Write a code to find the first two numbers in a list that add up to a given number.my_list = [1, 2, 5, 6, 10] 
sum = 8","def find_two_numbers(my_list, sum):
    for i in range(len(my_list)):
        for j in range(i + 1, len(my_list)):
            if my_list[i] + my_list[j] == sum:
                return my_list[i], my_list[j]

find_two_numbers(my_list, sum);"
"Create a script to generate a random password using uppercase, lowercase and numerics.","import string
import random

def generate_password():
    password_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits
    password_length = 16
    return ''.join(random.choice(password_characters) for i in range(password_length))

generate_password()"
"Create an object that holds the property 'name', assigned to the value ""John"".","let john = {
name: 'John',
};"
Take the following input string and remove the punctuation and convert it to lowercase.HELP! Is it me you're looking for??,"let inputString = ""HELP! Is it me you're looking for??"";
let outputString = inputString.replace(/[.,\/#!$%\^&\*;:{}=_`'""<>~]/g,"""").toLowerCase();
console.log(outputString); // help is it me youre looking for"
"Generate a function in python that takes two lists and returns the product of their longest common substrings.list1 = [1, 2, 3, 4, 5]
list2 = [2, 3, 5, 7]","def longest_common_substring(list1, list2):
    longest_substring = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                current_substring = 1
                k, l = i+1, j+1
                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:
                    current_substring += 1
                    k += 1
                    l += 1
                longest_substring = max(longest_substring, current_substring)

    if longest_substring == 0:
        return 0
    else:
        return list1[0] * list2[0] * longest_substring"
Suggest a code in Python that will calculate the area of any given shape.,"def area(shape):
    if shape == ""rectangle"":
        length = float(input(""Please enter the length: ""))
        width = float(input(""Please enter the width: ""))
        return length * width

    elif shape == ""triangle"":
        base = float(input(""Please enter the base: ""))
        height = float(input(""Please enter the height: ""))
        return 0.5 * base * height

    elif shape == ""circle"":
        r = float(input(""Please enter the radius: ""))
        return 3.14 * r * r"
"Write a function to check if the parentheses in given expression are balanced or not.expression = ""((A+B)-C)*D+((E-F)*G""","def is_balanced(expression):
	open_paratheses = 0
	for char in expression:
		if char == '(':
			open_paratheses += 1
		elif char == ')':
			open_paratheses -= 1
		if open_paratheses < 0:
			return False
	return open_paratheses == 0

expression = ""((A+B)-C)*D+((E-F)*G"""
"Generate a list of unique numbers between A and B where both A and B are input parameters.a = 0
b = 5","def create_list(a, b):
	result = []
	for i in range(a, b+1):
		if i not in result:
			result.append(i)
	return result

a = 0
b = 5"
Write a query in MongoDB to find all documents in the 'users' collection that have a field 'name' with the value 'John'.,"db.users.find({""name"": ""John""})"
Create a function in Python to take a positive integer and return its factorial.num = 5,"def factorial(num): 
    """"""Function to return the factorial of a positive integer""""""
    if(num <=1): 
        return 1
    else: 
        return(num*factorial(num-1))"
How can you determine the number of words in a string?,You can determine the number of words in a string by splitting the string into single words using the split() method and using the len() method to find the length of the resulting list.
"Write a regular expression to extract emails from a list of text.text_list = [""contact me at jack@example.com for more information"", ""reach out to jill@example.com for a discussion""]","import re
email_list = []
for text in text_list:
    emails = re.findall(r'[\w\.-]+@[\w\.-]+', text)
    email_list.extend(emails)"
"Create a Python function to find all unique values in a list.L = [1, 2, 4, 2, 1]","def find_unique_values(L):
    """"""
    Function to find all the unique values in a list.
    
    Arguments:
        L {list}: The list to search in.
    
    Returns:
        set: The set of unique values.
    """"""
    unique_values = set()
    for item in L:
        if item not in unique_values:
            unique_values.add(item)
    return unique_values"
"Edit the code to print out a string in reverse order.string = ""Hello World!""","for char in reversed(string):
    print(char, end="""")"
"Create a Python code to print out all the common elements in two lists.list1 = [1, 2, 3, 4, 5]
list2 = [2, 3, 4, 6]","def get_common_elements(list1, list2):
    """"""
    Function to get all the common elements in two lists.
    
    Arguments:
        list1 {list}: The first list.
        list2 {list}: The second list.
    
    Returns:
        list: A list containing all the common elements in both lists.
    """"""
    common_elements = []
    for element in list1:
        if element in list2:
            common_elements.append(element)
    return common_elements"
Generate an algorithm in any language that can find the sum of the numbers in a given array,"Function sumArray (arr[])
{
    sum = 0
    for i = 0 to arr.length - 1
        sum += arr[i]
    end for
    return sum
}"
"Create a class in Python that takes a list of numbers and finds the average.list: [4, 5, 6]","class AverageCalculator:
    def __init__(self, numbers):
        self.numbers = numbers
    
    def calculate_average(self): 
        total = 0
        for item in self.numbers:
            total += item
        return total / len(self.numbers)"
"Write a code in Go that will reverse all the words in a sentence.sentence: ""GPT is a powerful tool""","package main

func reverseWords(sentence string) string {
  words := strings.Split(sentence, "" "")
	var reversedSentence string
	for i:=len(words)-1; i>=0; i-- {
		reversedSentence += words[i] + "" ""
	}
	return strings.TrimSpace(reversedSentence)
}"
"Create an Angular component to display a message and a button.message: ""Hello World""","@Component({
  selector: 'app-hello-world',
  template: `
    <p>{{ message }}</p>
    <button>Show Message</button>
  `
})
export class HelloWorldComponent {
  message = ""Hello World"";
}"
"Generate a code that takes an array of integers and splits them into two equal halvesarr = [1, 2, 3, 4, 5, 6]","def split_array(arr):
    n = len(arr)
    mid = n//2
    left_half = arr[:mid]
    right_half = arr[mid:]
    return left_half, right_half"
"Write a code to print the common elements of two given arraysarr1 = [2, 3, 4, 5]
arr2 = [3, 6, 7, 8]","def common_elements(arr1, arr2):
    common = []
    for i in arr1:
        if i in arr2:
            common.append(i)
    return common"
Design a function that takes a sentence and returns an array with each word in the sentence as an element.,"def sentence_to_array(sentence):
    return sentence.split(' ')"
"Create a Python class named 'Student' that contains the name, age and grade of a student.","class Student:
  def __init__(self, name, age, grade):
    self.name = name
    self.age = age
    self.grade = grade"
Write an algorithm to traverse a binary tree.,"def traverseTree(root): 
   if root != None: 
      traverseTree(root.left) 
      print(root.item) 
      traverseTree(root.right)"
"Output a single string composed of all the characters of the given string, one after the other.This is a string",thisisastring
"Output a list of all even numbers between two given positive integers m and n.m=2, n=10","def evenNumbers(m,n):
    evenNum=[]
    for i in range(m,n+1):
        if i%2 == 0:
            evenNum.append(i)
    return evenNum"
Print out a message for an incorrect guess,"print(""Sorry, that's not correct. Please try again"")"
Analyze the following text and label each tokenRomeo loves Juliet.,"[('Romeo', 'NOUN'), ('loves', 'VERB'), ('Juliet', 'NOUN'), ('.', 'PUNCT')]"
"Extract a specific key-value pair from the given dictionarydic = {""Name"": ""John"", ""age"": ""27"", ""Address"": ""Street 79""}","Age = dic[""age""]"
Write a lambda expression to find the maximum value of two numbers.,"maximum = lambda num1, num2: num1 if num1 > num2 else num2"
"In Python, write code to sort a list of integers in ascending order.[9, 15, 5, 11, 4]","def sort_list(list_of_numbers):
   list_of_numbers.sort()
   return list_of_numbers

print(sort_list([9, 15, 5, 11, 4])) # Output: [4, 5, 9, 11, 15]"
Write a regular expression to detect phone numbers with country code in a string+918327886067,/\+\d{12}/
Calculate the sum of squares of the numbers till 10,385
"Find out the number of odd numbers in an array[2, 9, 0, 5, 3]","def odd_num(arr): 
    count = 0
    for num in arr: 
        if num % 2 != 0: 
            count += 1
    return count 
        
# Test Array 
arr = [2, 9, 0, 5, 3] 
# Function Call 
odd_num(arr)"
"Update the given code to generate the correct outputdef func(x, n):
    s = 0
    for i in range (n):
        s += (x**i)
    return s

Output: The sum of series x^1 + x^2 + x^3 + ... + x^n is","def func(x, n):
    s = 0
    for i in range (n):
        s += (x**i)
    return s

def generateSumString(x, n):
    result = ""The sum of series ""
    for i in range(1, n+1):
        result += x + ""^"" + str(i)
        if(i != n):
            result += "" + ""
        else:
            result += "" is""
    return result

def main():
   x = 4
   n = 5 
   print(generateSumString(x, n), func(x,n))

main()"
"Create a new class named 'Book' with the following fieldsTitle, Author, Publisher, ISBN, Price","public class Book {
    public string Title { get; set; }
    public string Author { get; set; }
    public string Publisher { get; set; }
    public string ISBN { get; set; }
    public double Price { get; set; }
}"
"Write a python function that takes two strings as an argument and returns the True if they are anagrams of each other, else False.""rat"" and ""tar""","def check_anagrams(str1,str2):
    str1_list = list(str1) 
    str1_list.sort() 
    str2_list = list(str2) 
    str2_list.sort() 
    return (str1_list == str2_list) 
  
# Driver code  
str1 = ""rat""
str2 = ""tar""
if check_anagrams(str1, str2): 
    print(""The strings are anagrams."")
else:
    print(""The strings aren't anagrams."")"
"Implement a function to calculate the greatest common divisor42, 56","def gcd(a, b):
    while b > 0:
        a, b = b, a % b
    return a
print(gcd(42, 56))"
Write a code to construct the following rectangle pattern6,"def drawRectangle(size):
    for i in range(size):
        print(""* "" * size) 
drawRectangle(6)"
"Write a Python function that takes a string as an argument and checks if it contains the word “Python”.text = ""This sentence does not contain the word Python""","def contains_python(string): 
  if ""Python"" in string: 
    return True
  else: 
    return False

print(contains_python(text)) # False"
"Create a process to sort an array of numbers from least to greatest.arr = [3, 4, 12, 1, 5, 85]","def sort_array(arr): 
  # Loop through the array, swap each element until it is in order (ascending)
  for i in range(len(arr) - 1): 
    for j in range(i + 1, len(arr)): 
      if arr[i] > arr[j]: 
        temp = arr[i] 
        arr[i] = arr[j] 
        arr[j] = temp 
  
  # Return the sorted array 
  return arr

print(sort_array(arr)) # [1, 3, 4, 5, 12, 85]"
"Create a process to reverse a string without using any built-in functions.string = ""Hello world""","def reverse_string(string): 
  # Create an empty string 
  rev_string = """" 
  
  # Iterate through the string and build the reversed string 
  for char in string: 
    rev_string = char + rev_string 
  
  # Return the reversed string 
  return rev_string 

print(reverse_string(string)) # dlrow olleH"
"Create a program that implements an autocomplete or predictive search feature.words = [""Apple"", ""App"", ""Application"", ""Applications"", ""Apples"", ""Ace"", ""Acer""]","def autocomplete(user_input, words): 
  # Store the output words in a list 
  output = [] 
  
  # Iterate through the words and check if the user input matches the beginning of the word 
  for word in words: 
    if word.startswith(user_input): 
      output.append(word)
  
  # Return the output words 
  return output 

print(autocomplete(""app"", words)) # [""App"", ""Application"", ""Applications"", ""Apples""]"
"Write a function that takes a list of strings and joins them together with a pipe (|).words = [""Apple"", ""App"", ""Application"", ""Applications"", ""Apples"", ""Ace"", ""Acer""]","def join_strings_with_pipe(words): 
  # Join the words with a pipe 
  return ""|"".join(words)

print(join_strings_with_pipe(words)) # Apple|App|Application|Applications|Apples|Ace|Acer"
"Given a list of integers, return a new list with even numbers doubled.lst = [1, 2, 3, 4, 5, 6]","def double_even_numbers(lst): 
  # Iterate through the list and double the even numbers 
  double_lst = [] 
  for num in lst: 
    if num % 2 == 0: 
      double_lst.append(num * 2) 
    else: 
      double_lst.append(num)
  
  # Return the new list 
  return double_lst 

print(double_even_numbers(lst)) # [1, 4, 3, 8, 5, 12]"
"Write a function to identify the most frequent letter in a string.string = ""Hello Universe""","from collections import Counter 

def most_frequent_letter(string): 
  # Count the letter frequency 
  words = Counter(string) 
  
  # Identify the most frequent letter 
  most_common = words.most_common(1)[0][0]
  
  # Return the most frequent letter 
  return most_common

print(most_frequent_letter(string)) # l"
"Generate a script to print out the sum of all even numbers in a given list[2, 4, 5, 6, 7, 8]","def get_sum_of_evens(numbers):
    sum_of_evens = 0
    for num in numbers:
        if num % 2 == 0: 
            sum_of_evens += num
    return sum_of_evens

numbers = [2, 4, 5, 6, 7, 8]
print(get_sum_of_evens(numbers))"
Create a python script to check if a substring exists in a given string,"def is_substring(s1, s2):
    return s2 in s1"
"Use linear regression to predict the price of a car based on its make and model.make = ['Mazda', 'Volkswagen', 'Chevrolet']
 model = ['3', 'PASSAT', 'Malibu']","import pandas as pd
from sklearn.linear_model import LinearRegression

# load data
data = pd.read_csv('cars.csv')

# create feature matrix
X = data[['make', 'model']]

# set target variable
y = data['price']

# one-hot encode categorical make and model data
X = pd.get_dummies(X, columns=['make', 'model'])

# create and fit model
model = LinearRegression()
model.fit(X, y)"
"Create a function to merge two lists and remove duplicates.list1 = [1, 3, 5, 7] 
list2 = [2, 3, 8, 10]","def merge_lists(list1, list2):
  merged_list = list1 + list2
  return list(dict.fromkeys(merged_list))"
"Write an instruction for a GPT model to generate a response when it is given a given an English sentence as input.""How are you today?""","return ""I'm doing great, thank you for asking!"""
"Write a Python function to filter a given list of strings and return the list with the strings having length greater than the given number.list = ['Example', 'cat', 'dog', 'hello', 'word']
length = 4","def filter_list(list, length):
  return [string for string in list if len(string) > length]"
Write a Python function to subtract two given numberss.,"def subtract_numbers(num1, num2):
  return num1 - num2"
"Check the human readable date and convert it to the ISO 8601 format.Monday, April 7th, 2020",
"Read the given list and return the last element.mylist = [1,2,3,4,5]",5
"Create a program in Python that will take in a list of strings and print out each unique string in the list.mylist = [""Hello"", ""World"", ""Hello"", ""WDI"", ""Class""]","uniquelist = []
for string in mylist:
    if string not in uniquelist:
        uniquelist.append(string)

print(uniquelist)"
"Write a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number.Sentence = ""Hello, this is a sentence"";
Number = 3;","def count_words_longer_than_number(text, number):
  words = text.split()
  count = 0
  for word in words:
    if len(word) > number:
      count += 1

  return count

count_words_longer_than_number(Sentence, Number)"
"Create a program in Python that takes a list of numbers as input and sorts it in ascending order.mylist = [3, 2, 5, 4, 1]","def list_sort(list): 
    for i in range(0, len(list)): 
        min_index = i 
        for j in range(i+1, len(list)): 
            if list[min_index] > list[j]: 
                min_index = j             
        list[i], list[min_index] = list[min_index], list[i]
    return list

list_sort(mylist)"
"Read the given list and filter out the odd numbers.mylist = [1,2,3,4,5]","even_list = []
for num in mylist:
    if num % 2 == 0:
        even_list.append(num)

print(even_list)"
"Create a program in Python that will take a list of strings and output a list containing the lengths of each string.mylist = [""Hello"", ""World"", ""WDI"", ""Class""]","length_list = []
for string in mylist:
    length_list.append(len(string))

print(length_list)"
"Read the given list and filter out the elements containing the number '3'.mylist = [13, 23, 32, 31, 14]","filteredlist = []
for num in mylist:
    if '3' not in str(num):
        filteredlist.append(num)

print(filteredlist)"
Enter the necessary code to initiate a MongoDB connection,"from pymongo import MongoClient

#creating the MongoClient
client = MongoClient(""mongodb://localhost:27017/"")

#connecting to the database
db = client[""database_name""]"
Create a class definition in python with one variable and one method,"class Example:
  def __init__(self, variable):
    self.variable = variable

  def method(self):
    return self.variable + 1"
"Insert a try and except block in the following codex = int(input(""Please enter a number: ""))","try:
    x = int(input(""Please enter a number: ""))
except ValueError:
    print(""Input must be an integer!"")"
Define a python function that returns an array of the numbers from 0 to n,"def create_array(n): 
    # create an empty list 
    mylist=[] 
    # add elements to the list by looping n times 
    for i in range(0, n + 1): 
        mylist.append(i) 
    # return the list 
    return mylist"
"Change the comment to a print statement in the code.x = 1
# print the value of x","x = 1
print(x)"
"Write a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list.list = [12, 4, 1, 18, 7, 15, 6, 11, 4]
target = 4","def count_target(lst, target):
    count = 0
    for i in lst:
        if i == target:
            count += 1
    return count

print(count_target(list, target))"
Write a Python script that takes a string as input and outputs a string with the same characters in reverse order.hello,"def reverse_string(str):
  return str[::-1]

print(reverse_string('hello'))"
"Write an Objective-C class to represent a person containing attributes like name, age, and height.","#import <Foundation/Foundation.h>

@interface Person : NSObject

@property NSString *name;
@property NSUInteger age;
@property CGFloat height;

- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age height:(CGFloat)height;

@end

#import ""Person.h""

@implementation Person

- (instancetype)initWithName:(NSString *)name age:(NSUInteger)age height:(CGFloat)height
{
    self = [super init];
    if (self) {
        self.name = name;
        self.age = age;
        self.height = height;
    }
    return self;
}

@end"
What is deadlock and how to prevent it?,"Deadlock is a state in which two or more processes wait for each other to finish, but none of the processes can finish because each is waiting for the other. To prevent deadlock, one can employ the use of a deadlock avoidance algorithm which typically checks for whether a particular set of conditions exist that can lead to deadlock. Additionally, locks can be applied liberally, but with caution, while avoiding circular wait."
"Update the values of the variables x, y and z using the given expression.x=1, y=2, z=3, expression: x+2*y-z","x = 3, y = 2, z = 3"
What is the maximum possible value that can be stored in a single byte?,The maximum possible value that can be stored in a single byte is 255.
Create an array of five elements using the language of your choice.,"my_list = [1, 2, 3, 4, 5]"
What is the difference between the List and the Set data structures?,"The main difference between Lists and Sets are that Lists are ordered and can contain duplicate elements, while Sets are unordered and cannot contain duplicate elements. Additionally, Lists support indexing and iteration, while Sets do not."
"Implement a recursive algorithm to count the number of elements that are divisible by k in an array.[2, 4, 8, 10, 11], k = 3","def countK(arr, k): 
    if len(arr) == 0: 
        return 0
    if arr[0] % k == 0: 
        return 1 + countK(arr[1:], k)
    else: 
        return 0 + countK(arr[1:], k)"
What is the difference between shallow copying and deep copying?,"Shallow copying is the process of creating a copy of the original object which only contains references to the values contained in the original instance. This means that any shallow copy only contains references to the same objects as the original instance, while any changes made to the copy will be reflected in the original object as well. Deep copying on the other hand, is the process of creating a new instance of the original object with all of its values copied over. This means that any changes made to the copy are not reflected in the original object."
Modify the following code so that it takes a list of numbers and calculates their median.def median(data):,"def median(data):
    data.sort()
    length = len(data)
    if length == 0:
        return 0
    if length % 2 == 0:
        return (data[length // 2] + data[length // 2 - 1]) / 2
    elif length % 2 == 1:
        return data[length // 2]"
Create a program that uses a loop to generate 25 random numbers from 0 to 8.,"import random

# Generate 25 random numbers
random_list = []
for i in range(25):
    random_list.append(random.randint(0, 8))

print(random_list)"
"Re-write the following code using only the filter() function.numbers = range(10)
evens = []

for x in numbers:
    if x % 2 == 0:
        evens.append(x)","numbers = range(10)
evens = list(filter(lambda x : x % 2 == 0, numbers))"
"Given an array of strings ""words"", write a code to remove all the words which are greater than 5 characters in length.words = [""Stack"", ""Overflow"", ""Python"", ""Coding""]","words = [""Stack"", ""Overflow"", ""Python"", ""Coding""]

words = list(filter(lambda x : len(x)<=5, words))
print(words)"
Create a program that generates a random integer from 1 to 10.,"import random

random_number = random.randint(1, 10)
print(""A random number between 1 and 10 is: "" + str(random_number))"
"Given an array of strings ""alphabet"", write a code to repeat each element in the array.alphabet = [""a"", ""b"", ""c""]","alphabet = [""a"", ""b"", ""c""]

new_alphabet = []
for letter in alphabet:
    new_alphabet += [letter]*2

print(new_alphabet)"
"Given a list of numbers, write a program that finds all the numbers that are divisible by 3.myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]","myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]

divisible_by_3 = list(filter(lambda x: x % 3 == 0, myList))
print(divisible_by_3)"
Write a method in Python which takes a positive integer and returns the sum of squares of all numbers smaller than the given number.5,"def sum_of_squares(n): 
    if n == 1: 
        return 1
    else: 
        return n*n + sum_of_squares(n-1) 

number = 5
result = sum_of_squares(number)
print('The sum of squares of numbers smaller than {} is {}.'.format(number, result))"
"Debug the code to fix the error.def hi_it(name):
 print(""Hi,"" + name)

hi_it(""John"")","def hi_it(name):
 print(""Hi,"" + str(name))

hi_it(""John"")"
"Given a list of words and a target word, determine if the target word is in the listlist_words = [""apple"", ""banana"", ""orange"", ""mango""]
target_word = ""pineapple""","list_words = [""apple"", ""banana"", ""orange"", ""mango""]
target_word = ""pineapple""

if target_word in list_words:
  print (""Target word is in the list"")
else:
  print (""Target word is not in the list"")"
"Given a collection of email addresses, group them by the domainemails = [""test@example.com"", ""example@example.org"", ""test@test.co.uk""]","emails = [""test@example.com"", ""example@example.org"", ""test@test.co.uk""]

from collections import defaultdict

by_domain = defaultdict(list)

for email in emails:
    domain = email.split(""@"")[-1]
    by_domain[domain].append(email)

print(dict(by_domain))"
"Strip the spaces in the given stringstring = ""Hello World   ""","string = ""Hello World   ""

stripped_string = string.strip()

print (stripped_string)"
"Given a 2D array, return the sums of all columnsarr = [[1,2,3],
       [4,5,6],
       [7,8,9]]","arr = [[1,2,3],
       [4,5,6],
       [7,8,9]]

sums = []

for i in range(len(arr[0])):
    total = 0
    for row in arr:
        total += row[i]
    sums.append(total)

print(sums)"
"Given a collection of strings, sort the strings by their lengthstrings = [""a"", ""abc"", ""defg""]","strings = [""a"", ""abc"", ""defg""]

strings.sort(key=len)

print(strings)"
"Make a program that prints the elements of a given array in reverse orderarr = [1,2,3,4,5]","arr = [1,2,3,4,5]

for index in range(len(arr)-1, -1, -1):
    print(arr[index])"
"Given a list of strings and a target string, return a list of strings which contain the target stringlist_of_strings = [""cat"", ""dog"", ""rat"", ""bat""]
target_string = ""at""","list_of_strings = [""cat"", ""dog"", ""rat"", ""bat""]
target_string = ""at""

result = [string for string in list_of_strings if target_string in string]

print(result)"
"Insert code to reverse a list in place.arr = [1,2,3,4]","arr = [1,2,3,4]
arr.reverse()"
"Sum every second element in an array.arr = [1, 5, 4, 8, 10, 12]","def sum_second_elements(arr):
    sum_num = 0
    for i in range(1, len(arr), 2):
        sum_num += arr[i]
    return sum_num"
Identify if a given integer is odd or even.43,"def identify_odd_even(num):
    if num % 2 == 0:
        return ""even""
    else:
        return ""odd"""
Generate a random code string with each character from A-Z and 0-10.,"import random

def random_code_string(length):
    chars = [chr(i) for i in range(65, 91)] + [str(digit) for digit in range(10)]
    code_string = """"
    for _ in range(length):
        random_char = random.choice(chars)
        code_string += random_char
    return code_string"
"Find all duplicates in an array.arr = [1, 2, 4, 2, 1, 5]","def find_duplicates(arr):
    duplicates = []
    seen = set()
    for elem in arr:
        if elem in seen:
            duplicates.append(elem)
        else:
            seen.add(elem)
    return duplicates"
"Create a function that takes two parameters and merge them into a single object.a = {'a': 1, 'b': 2}
b = {'c': 3, 'd': 4}","def merge_objects(obj_a, obj_b):
    merged = {**obj_a, **obj_b}
    return merged"
"Rewrite the following code using the set module in Pythona = [1, 1, 2, 3, 4, 5, 5, 5]","import set

a = [1, 1, 2, 3, 4, 5, 5, 5]
a_set = set(a)
new_list = list(a_set)
print(new_list)"
Create a program to generate a random password of 10 characters consisting of both alphabets and numbers.,"# Program to generate a random password of 10 characters

import string 
import random 

# Get all the symbols to use in the password 
symbols = string.ascii_letters + string.digits 

# Generate a random password 
password = ''.join(random.choice(symbols) for _ in range(10)) 

print(password)"
"Create a program to encode a message with the Caesar cipher encryption algorithm.message = 'Hello World'
shift = 3","# Program to encode a message with the Caesar cipher encryption algorithm 

# Get the message to encrypt 
message = 'Hello World'

# Set the shift value 
shift = 3

# Create an array to store the encrypted message 
encrypted_message = [] 

for character in message: 
  encrypted_character = chr(ord(character) + shift) 
  encrypted_message.append(encrypted_character) 

# Join the encrypted message to form a string 
encrypted_message = ''.join(encrypted_message)

print(encrypted_message)"
Write a code to simulate a random walk in two-dimensional space.x_steps = 10,"# Program to simulate a random walk in two-dimensional space

import random

x_steps = 10

# Initialize starting positions
x = 0
y = 0

# Take a random step on each iteration
for _ in range(x_steps):
  direction = random.randint(0, 3)
  if direction == 0:
    x += 1
  elif direction == 1:
    x -= 1
  elif direction == 2:
    y += 1
  else:
    y -= 1
  
print(f'Final position is ({x},{y})')"
"Write a code to implement a round-robin scheduling algorithm.processes = [10, 5, 7]
time_slice = 2","# Program to implement a round-robin scheduling algorithm

# Get the list of processes and the time slice 
processes = [10, 5, 7]
time_slice = 2

# Create an empty list to store the remaining burst time 
remaining_burst = []

# Loop through all processes to get the remaining burst time 
for process in processes:
  remaining_burst.append(process)

# Keep track of current time cycle 
time = 0

# Loop through the processes and implement round-robin scheduling
while True:
  done = True
  
  # Iterate through the processes
  for i in range(len(processes)):
    if remaining_burst[i] > 0:
      done = False # Not done yet
      
      if remaining_burst[i] > time_slice:
        # Increment timeline
        time += time_slice
        
        # Reduce the remaining burst time 
        remaining_burst[i] -= time_slice
      else:
        # Increment timeline
        time += remaining_burst[i]
        
        # Set remaining burst to 0 
        remaining_burst[i] = 0

  # Break the loop if all processes are done 
  if done:
    break

print('Total time to schedule the processes is', time)"
Generate a python program to create a n-dimensional array filled with zeros.n = 4,"# Program to create a n-dimensional array filled with zeros 

import numpy as np

# Get the number of dimensions 
n = 4

# Create an array of zeros of given size 
arr = np.zeros((n,n,n,n))

print(arr)"
"You need to compute the Average of all numbers stored in an arrayarr = [3, 2, 5, 9, 6]",average = 5.4
Create a class named 'Circle' which calculates the area and circumference given a radius.,"class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * (self.radius**2)

    def circumference(self):
        return 2 * 3.14 * self.radius"
"Write a function that takes two strings as input,one being a base string and other being a sub-string and returns True if sub-string appears in base string and False otherwise.Base string = ""I am a coding enthusiast""
Sub-string = ""coding""",True
"You need to extract a part of the string from the starting to the 5th character and from 7th to the 25th character.string = ""This is a coding challenge""",thiic ng Chal
"You need to find the number of words in a sentence.sentence = ""The quick brown fox jumps over the lazy dog""",9
Generate a dictionary with five key-value pairs of string.,"dictionary = {
    'Apple': 'Red',
    'Banana': 'Yellow',
    'Strawberry': 'Red',
    'Orange': 'Orange',
    'Grape': 'Purple'
}"
"Sort an array using bubble sort technique.arr = [4, 3, 6, 7, 5, 1, 8]","[1, 3, 4, 5, 6, 7, 8]"
Output a sentence in the following format with 'name' as the user input.name = 'John Doe',"""Hello, my name is John Doe."""
"Take an array and remove all elements except the unique elements.arr = [2, 3, 6, 8, 3, 8, 6, 2]","[2, 3, 6, 8]"
Take user input from the console and output 'Hello [name]'.name = 'John',Hello John.
Take a string and reverse it.string = 'Programming',gnimmargorP
"Create a program that takes in two lists and prints out a new list with the elements from the first list followed by the elements from the second list.list_1 = [1, 2, 3]
list_2 = [4, 5, 6]","# define a function to combine two lists into one
def combine_lists(list_1, list_2):
    # create a new list
    combined_list = []
    
    # append the elements from list 1
    for ele in list_1:
        combined_list.append(ele)

    # append the elements from list 2    
    for ele in list_2:
        combined_list.append(ele)
    
    # return the combined list
    return combined_list

# input two lists
list_1 = [1, 2, 3]
list_2 = [4, 5, 6]

# output the combined list
combined_list = combine_lists(list_1, list_2)
print(""The combined list is "" + str(combined_list))"
Implement a function to solve the following equation: x2+y2=z2,"def solve_eq(x, y, z):
  '''This function will solve the equation: x^2 + y^2 = z^2.'''

  # Use the Pythagorean Theorem
  if x**2 + y**2 == z**2:
    return True
  else:
    return False"
Complete the following function to return the indices at which the binary representation of a given number has no consecutive 1s.num = 12,"def find_indices(num):
    # convert given number to binary
    binary_num = bin(num)[2:]

    # create an empty list to store required indices
    indices_list = []
    
    # iterate over the binary number
    for i in range(len(binary_num)-1):
        if binary_num[i+1] != '1' or binary_num[i] != '1':
            indices_list.append(i)
   
    # return the required indices
    return indices_list

num = 12
result = find_indices(num)
print(""The indices with no consecutive 1s are:"", result)"
"Given a string, write code to remove all the consecutive characters and output the new string.string='AAABBBCCC'","def remove_consecutive_chars(string):
  # create an empty string
  new_string = ''

  # iterate over the characters of the given string
  for i in range(len(string)-1):
    if string[i] != string[i+1]:
      new_string += string[i]
  
  # add the last character of the string to the output
  new_string += string[-1]
  # return the new string
  return new_string

string='AAABBBCCC'
result = remove_consecutive_chars(string)
print(""The new string is:"", result)"
Create a regex to identify valid IPV4 addresses.,"import re

def is_valid_ipv4(ip):
    # pattern to match valid IP addresses
    pattern = r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$""
    if re.match(pattern, ip):
        return True
    else:
        return False"
Write a function to generate an array of all possible permutations of N numbers.,"def generate_permutations(n): 
  
    if n == 0: 
        return [] 
    
    if n == 1: 
        return [[1]] 
  
    permutations = [] 
    for i in range(n): 
        permutations_n_1 = generate_permutations(n - 1) 
  
        for perm in permutations_n_1: 
            for j in range(n): 
                r = perm.copy() 
                r.insert(j, n) 
                permutations.append(r) 
  
    return permutations"
"Write a function to convert an array of strings to an array of floats.string_arr=['1.1', '2.3', '3.4']","def array_to_floats(string_arr):
    # Create an array to store the float values
    float_arr = []
    # Iterate over the given array and convert to float
    for s in string_arr:
        float_arr.append(float(s))
    # Return the new array
    return float_arr

string_arr=['1.1', '2.3', '3.4']
result = array_to_floats(string_arr)
print(""The array as floats is:"", result)"
Generate a random PIN of 8 characters.,"import random

def generate_pin():
    """"""
    This function generates a random PIN of 8 characters.

    Parameters
    ----------
    None

    Returns
    -------
    pin : str
        The generated PIN
    """"""
    characters= ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    pin = """"

    for _ in range(8):
        pin += random.choice(characters)
    
    return pin

print(generate_pin()) # Outputs a random PIN of 8 characters"
"Sort a list of numbers so that the lowest number appears first.n_list = [3, 9, 1, 4, 5]","def sort_list(n_list):
    """"""
    Sort a given list of numbers in ascending order.

    Parameters
    ----------
    n_list: list
        The list of numbers to sort

    Returns
    -------
    sorted_list : list
        The sorted list
    """"""
    sorted_list = sorted(n_list)
    return sorted_list

n_list = [3, 9, 1, 4, 5]
print(sort_list(n_list)) # Outputs [1, 3, 4, 5, 9]"
Compute the number of ways for a host to select 3 items from a list of 8 options.,"def compute_combination(n, r):
    """"""
    Compute the number of ways for a host to select 'r' items from
    a list of 'n' options.

    Parameters
    ----------
    n : int
        The total number of items
    r : int
        The number of items to select

    Returns
    -------
    num : int
        The number of ways to select
    """"""
    num = 1

    # Calculate combination
    for i in range(r):
        num *= n - i
    num //= math.factorial(r)
    
    return num

n = 8
r =  3
print(compute_combination(n, r)) # Outputs 336"
"Search a list to find a string and return its index.string_list = [""apple"", ""banana"", ""orange""]
search_term = ""orange""","def search_list(string_list, search_term):
    """"""
    Search a list for a given string and return its index.

    Parameters
    ----------
    string_list : list
        The list to search
    search_term : str
        The string to search for

    Returns
    -------
    index : int
        The index of the string in the list,
        returns -1 if the string is not found
    """"""
    for i, s in enumerate(string_list):
        if s == search_term:
            return i

    return -1

string_list = [""apple"", ""banana"", ""orange""] 
search_term = ""orange""
print(search_list(string_list, search_term)) # Outputs 2"
"Parse a given string and extract the name from it.string = ""Hi! My name is John Smith""","def extract_name(string):
    """"""
    Parse a given string and extract the name from it.

    Parameters
    ----------
    string : str
        The string to parse

    Returns
    -------
    name : str
        The extracted name
    """"""
    # Split the string by words
    words = string.split()
    
    # The last word is the name
    name = words[-1]

    return name

string = ""Hi! My name is John Smith""
print(extract_name(string)) # Outputs ""John Smith"""
"Create a histogram chart of the given data.dataset = [2, 3, 5, 6, 7, 4]","import matplotlib.pyplot as plt

def create_histogram(dataset):
    """"""
    Create a histogram chart of the given data.

    Parameters
    ----------
    dataset : list
        The data to plot on the chart

    Returns
    -------
    None
    """"""
    plt.hist(dataset, bins=7, facecolor=""blue"", alpha=0.5)
    plt.title(""Histogram"")
    plt.xlabel(""Values"")
    plt.ylabel(""Frequency"")
    plt.show()

dataset = [2, 3, 5, 6, 7, 4]
create_histogram(dataset) # Outputs a histogram chart of the given data"
"Preprocess a given document, removing stopwords and punctuations.document = ""Hello! This is a test document for preprocessing""","from nltk.corpus import stopwords
import string

def preprocess_document(document):
    """"""
    Preprocess a given document, removing stopwords and punctuations.

    Parameters
    ----------
    document : str
        The document to preprocess

    Returns
    -------
    clean_word_list : list
        The preprocessed word list
    """"""
    # Split the document into word list
    word_list = document.split()
    stopwords_list = stopwords.words('english')

    # Remove punctuation
    word_list = [word.strip(string.punctuation) for word in word_list]
    
    # Remove words with 2 or fewer characters
    word_list = [word for word in word_list if len(word) > 2]

    # Remove stopwords
    clean_word_list = [word for word in word_list if word not in stopwords_list]

    return clean_word_list

document = ""Hello! This is a test document for preprocessing""
print(preprocess_document(document)) # Outputs ['Hello', 'test', 'document', 'preprocessing']"
"Design an algorithm to eliminate duplicate elements in a given array.Array: [1, 5, 1, -2, 5]","def remove_duplicates(arr):
    result = [] 
    for el in arr:
        if el not in result:
            result.append(el)
    return result"
"Replace each occurrence of the given character in a string with a space.String: abcde
Character: c",String: ab de
"You are given a string of tasks. Split the string into a list of tasks.Tasks = ""cook breakfast;run errand;pick up kids; feed the dog""","tasks = [""cook breakfast"", ""run errand"", ""pick up kids"", ""feed the dog""]"
Given a number N find the square root of N.,"def sqrt(N): 
    guess = N/2 
    
    while abs(guess*guess - N) >= 0.001: 
        guess = 0.5 * (guess + N/guess) 
          
    return guess"
"Given an array of integers, remove all the duplicated elements from the array and return the distinct array.nums=[3, 4, 5, 5, 6, 6, 6, 7]","def uniq_array(nums):
    distinct_arr = []
    for num in nums:
        if num not in distinct_arr:
            distinct_arr.append(num)
    return distinct_arr"
"You are given a string of words. Count how many words the string contains.words = ""This is a testing string""","def word_count(words):
    count = 0
    for word in words.split():
        count+=1
    return count"
"Given a string of text, find the total number of characters in the string.text = ""You have to do it""","def char_count(text):
    count = 0
    for char in text:
        count += 1
    return count"
You are given a list of numbers. Find the maximum sum of any subsequence in the list.,"def max_sum_subsequence(nums):
    max_sum = 0
    curr_sum = 0
 
    for num in nums:
        curr_sum = max(num + curr_sum, 0)
        max_sum = max(curr_sum, max_sum)
 
    return max_sum"
You are given a string. Count the total number of lowercase letters in the string.,"def count_lowercase(string):
    count = 0
    for char in string:
        if char.islower():
            count += 1
    return count"
"Write a function that takes an array of integers and multiplies them together.arr = [3, 5, 4]","def multiplyArray(arr):
    result = 1
    for x in arr:
        result = result * x
    return result"
What is this coding question asking you to do?Write a Python function to check whether a number is prime or not,This coding question is asking you to write a Python function to check whether a given number is prime or not. The function should take an integer as an argument and return a boolean indicating if the number is prime or not.
"Edit the code such that it prints the same output.str1 = ""python ""
str2 = ""programming""
print(str1 + str2)","str1 = ""python""
str2 = "" programming""
print(str1 + str2)"
"Remove the element with the value “Carrots” from the given list.sample_list = [""Apples"", ""Oranges"", ""Pears"", ""Carrots""]","sample_list = [""Apples"", ""Oranges"", ""Pears""]"
"Determine the returned value of the following function.def my_fun(x):
    if x > 5:
         return x * 2
    else:
        return x * 3","If x = 6, the returned value is 12."
Define the term variable.,"A variable is a named container for storing data values. Variables are usually used in programming to store and access data in a program. It is important to use a descriptive name for the variable, as it can be used to access the data within it."
List out all the sorting algorithms supported in Python.,"The sorting algorithms supported in Python include bubble sort, insertion sort, selection sort, merge sort, quick sort, and heap sort."
"Create a function that removes duplicates from an array and returns an array of the unique values.array = [5,5,5,10,10,15]","def remove_duplicates(array):
 
  new_array = []
  for number in array:
    if number not in new_array:
      new_array.append(number)
 
  return new_array

print(remove_duplicates([5,5,5,10,10,15]))"
"Find all the possible permutations in a string without using any built-in functions.string = ""ABC""","def permute(string):
  
  # base case
  if len(string) == 1:
    return [string]
  
  results = set()
  # iterate through each character in the string
  for i in range(len(string)):
    # select the ith character
    char = string[i]
    # generate all the permutations from the remaining characters
    remaining_characters = string[:i] + string[i+1:]
    permutations = permute(remaining_characters)
    # append the ith character to the beginning of each permutation and add to the result set
    for permutation in permutations:
      results.add(char + permutation)
  
  return list(results)

print(permute(""ABC""))"
"Create a function which detects overlapping dates from a given list.dates_list = [
  (2018,1,1,2018,3,1),
  (2018,12,1,2018,9,30),
  (2018,2,15,2018,5,10)
]","def detect_overlapping_dates(dates_list): 
  overlaps = set()

  for i in range(len(dates_list)-1):
    for j in range(i+1, len(dates_list)):
      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]
      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]
      # check if the two dates overlap
      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):
        # if the two dates overlap, add to the overlapping set
        overlaps.add(dates_list[i])
        overlaps.add(dates_list[j])
  
  return list(overlaps)
 
dates_list = [
  (2018,1,1,2018,3,1),
  (2018,12,1,2018,9,30),
  (2018,2,15,2018,5,10)
]

print(detect_overlapping_dates(dates_list))"
"Given a list of integers, remove all negative numbers.numbers_list = [-2,-3,4,5,-6,7]","def remove_negative_numbers(numbers_list):
  result_list = []
  
  for number in numbers_list:
    if number >= 0:
      result_list.append(number)
  
  return result_list

numbers_list = [-2,-3,4,5,-6,7]
print(remove_negative_numbers(numbers_list))"
"Find the number of negative numbers in a given list.List: [-2, -7, -11, 1, 4, 8, 10]","function countNegatives(list) {
    let count = 0;
    for (let i=0; i<list.length; i++) {
        if (list[i] < 0) {
            count++;
        }
    }
    return count;
}

countNegatives([-2, -7, -11, 1, 4, 8, 10]); // returns 3"
Write a function to perform buble sort.,"public void bubbleSort(int[] array) {
    int n = array.length;
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (array[j] > array[j+1]) {
                int temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
            }
        }
    }
}"
"Using the given list, write a code to get a list of all the words starting with ""T""words_list = ['Meteor', 'Timeline', 'Tablet', 'Timeframe', 'Trophy']",words_starting_with_T = [word for word in words_list if word.startswith('T')]
"Create a function named ""parse_urls"" which takes a single string parameter and returns a dictionary of queries from the URL.url=""https://www.example.com/product?color=red&size=small""","def parse_urls(url): 
    queries = url.split('?')[1]
    queries_dict = {}
    for query in queries.split('&'): 
        key, value = query.split('=') 
        queries_dict[key] = value 
    return queries_dict"
"Create a class named ""Car"" to store information about a car's make, model and year.","class Car:
    def __init__(self, make, model, year):
        self.make = make 
        self.model = model
        self.year = year"
"Using the list of strings, create a new list without any vowels.strings = ['apple', 'ball', 'cat']","def remove_vowels(strings):
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_strings = []
    for string in strings: 
        new_strings.append(''.join([char for char in string if char.lower() not in vowels]))
    
    return new_strings"
"Identify the algorithm used for sorting a given array of 16 elements.[12, 4, 15, 7, 8, 10, 1, 11, 13, 14, 3, 6, 5, 2, 9, 16]",The algorithm used for sorting the given array of 16 elements is Quick Sort.
"Create a data visualization in Python using the given dataset.Dataset: 
The data contains information about the latest coronavirus cases per US state","import pandas as pd
import matplotlib.pyplot as plt
 
# Read the dataset
df = pd.read_csv('data.csv')
 
# Create visualization
fig, ax = plt.subplots(figsize=(10,8))
ax.bar(df['State'], df['Cases'], color='#88e398')
plt.xlabel('States')
plt.ylabel('Coronavirus Cases')
plt.title('Covid-19 Cases per US State')
plt.xticks(rotation=45)
plt.show()"
Train a machine learning algorithm from a given dataset.Dataset: The data contains information about students' results in an exam.,"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Read the dataset
data = pd.read_csv(""data.csv"")

# Split the data into features and labels
X = data.drop(['result'], axis=1)
y = data['result']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, 
                                                    y, 
                                                    test_size=0.2, 
                                                    random_state=0)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)"
"Encrypt a given string using a Caesar cipher.String: ""Hello World""","Encrypted string: ""Khoor Zruog"""
How are objects instantiated in Python?,"Objects are instantiated in Python by using the keyword ""class"". Python then creates a new instance of the class and assigns it a unique object ID. This object is then used as the basis for the object's other attributes and methods, which are defined within the class definition. Object instantiation is usually used to create objects that inherit from other classes, or that contain data that need to be initialized."
How are dictionaries implemented in Python?,"Dictionaries in Python are implemented as hash tables. Each key-value pair is stored as an entry in the hash table, and a hash function is used to map the key to its corresponding index in the table. This allows fast lookups of the associated value of a given key and makes dictionary operations such as insertion, deletion, and retrieval very efficient. Furthermore, dictionaries are mutable, meaning they can be changed after they are created."
"Create a function in Python which takes in a list of numbers and returns the sum of all numbers.[1,2,3,4,5]","def list_sum(num_list): 
 
    # initialize sum
    Sum = 0
 
    # traverse through all numbers
    for num in num_list: 
        Sum += num 
  
    # return Sum
    return Sum 
  
# test the above code
list1 = [1,2,3,4,5] 
print(list_sum(list1)) 

# Output:
15"
"How many elements does the following array contain?Array: [4, 6, 1, 9, 7]",5
"Create a final list of all unique elements in list_1 and list_2.list_1 = [1, 2, 3, 4, 5]
list_2 = [2, 4, 6, 8, 10]","def get_unique_elements(list1, list2):
    unique_elements = []

    for element in list1:
        if element not in list2:
            unique_elements.append(element)

    for element in list2:
        if element not in list1:
            unique_elements.append(element)

    return unique_elements

list1 = [1, 2, 3, 4, 5]
list2 = [2, 4, 6, 8, 10]

unique_list = get_unique_elements(list1, list2)

print(unique_list)  # [1, 3, 5, 6, 8, 10]"
Create a regular expression to select all words starting with 'a'.,\b[Aa]\w+\b
"Write a function to parse a string and return a dictionary where each character in the string is mapped to its frequency.""hello world""","def get_frequency_map(string): 
    frequency_map = {}
    # count the frequency of each character
    for char in string: 
        if char in frequency_map:
            frequency_map[char] += 1
        else:
            frequency_map[char] = 1
    return frequency_map

string = ""hello world""

frequency_map = get_frequency_map(string)
print(frequency_map)  # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"
"Find all the elements in a Python list that correspond to a certain condition using list comprehensionlist = [-3, -2, -1, 0, 1, 2, 3]",[x for x in list if x >= 0]
Evaluate an expression written in reverse Polish notation5 1 2 + 4 * + 3 -,14
"Normalize a dataset of strings[ ""New York City, NY"", 
  ""Washington, D.C."", 
  ""Los Angeles, Ca"", 
  ""Chicago, Il"" ]","[ ""New York City, NY"",
  ""Washington, DC"",
  ""Los Angeles, CA"",
  ""Chicago, IL"" ]"
"Construct a tree which follows the pre-order traversal50, 30, 10, 20, 40, 70, 60, 80","50
/   \
30    70
/ \    / \
10  40  60  80
   /
  20"
Implement a neural network from scratch,"class NeuralNetwork:
  def __init__(self, num_inputs, num_hidden_layers, num_outputs):
    self.num_inputs = num_inputs
    self.num_hidden_layers = num_hidden_layers
    self.num_outputs = num_outputs

    self.weights_input_to_hidden = np.random.randn(num_inputs, num_hidden_layers) 
    self.bias_hidden = np.zeros(num_hidden_layers)
    self.weights_hidden_to_output = np.random.randn(num_hidden_layers, num_outputs)
    self.bias_output = np.zeros(num_outputs)
    
    self.activation_function = lambda x : 1/(1+np.exp(-x))

  def forward_propagation(self, inputs):
    # Compute the inputs to the hidden layer
    hidden_in = np.dot(inputs, self.weights_input_to_hidden) + self.bias_hidden
    # Compute the hidden layer output
    hidden_out = self.activation_function(hidden_in)
    # Compute the inputs to the output layer
    output_in = np.dot(hidden_out, self.weights_hidden_to_output) + self.bias_output
    # Return the output layer output
    return output_in"
Create a regular expression to determine if a word is in the form of a palindrome.,^(.)(?:(.)(?<=\2))?\1?$
"Given the following array, write a program to find the kth largest element.arr = [3, 10, 2, 6, 4], k = 2","#include <algorithm>
#include <iostream>
#include <vector>

int main()
{
    // Create sample array
    std::vector<int> arr = {3, 10, 2, 6, 4};

    // Sort array
    std::sort(arr.begin(), arr.end());
    
    // Get kth largest element
    int kth_largest = arr.end()[-2]; // second to last element
    std::cout << kth_largest << std::endl;

    return 0;
}"
"You've been asked to create a program to determine whether a given string is a palindromestr = ""madam""","#include <iostream> 
#include <string> 

bool is_palindrome(std::string str) 
{ 
    int i = 0; 
    int j = str.length() - 1; 
  
    while (i < j) 
    { 
        if (str[i] != str[j]) 
            return false; 
  
        i++; 
        j--; 
    } 
  
    return true; 
} 

int main() 
{ 
    std::string str = ""madam""; 
    if (is_palindrome(str)) 
        std::cout << str << "" is a palindrome""; 
    else
        std::cout << str << "" is not a palindrome""; 
  
    return 0; 
}"
"Create a program that prints the vowels in a string.str = ""Hello World!""","#include <iostream> 
#include <string> 

void print_vowels(std::string str) 
{ 
    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] =='a' || str[i] =='e' || str[i] =='i'
            || str[i] =='o' || str[i] =='u'||str[i] =='A'
            || str[i] =='E' || str[i] =='I' || str[i] =='O'
            || str[i] =='U') 
            std::cout << str[i] << "" "" ;
    } 
    std::cout << std::endl;
}

int main() 
{ 
    std::string str = ""Hello World!""; 
    print_vowels(str); 
    return 0; 
}"
"You've been asked to edit a string by replacing all occurrences of a certain character with another character.string = ""happy happy"" 
find = ""p"" 
replace = ""s""","#include <iostream>
#include <string>

void replace_chars(std::string& str, char find, char replace) 
{
    for (int i = 0; i < str.size(); i++)
    {
        if (str[i] == find) 
            str[i] = replace; 
    }
}

int main() 
{ 
    std::string str = ""happy happy""; 
    char find = 'p'; 
    char replace = 's';
    replace_chars(str, find, replace); 
    std::cout << str; 
    return 0; 
}"
"Write Python code to store odd numbers from the given list in a separate list.list = [1, 2, 3, 4, 5, 6, 7]","odds = []
for num in list:
    if num % 2 != 0:
        odds.append(num)"
"Rewrite the given Python code snippet using list comprehensions .even_list = []
for x in my_list:
    if x % 2 == 0:
        even_list.append(x)",even_list = [x for x in my_list if x % 2 == 0]
Write a callback function for the following requirementsThis callback should be able to store the input emit it when triggered,"def store_and_emit(data):
    stored_data = data
    def emit_stored_data():
        return stored_data
    return emit_stored_data"
Assign a value to `name` by using the ternary operatorlet name;,name = condition ? value1 : value2;
Suggest a few input parameters for a Machine Learning model,"Some potential input parameters for a Machine Learning model include numeric features, categorical features, text features, external features, and data derived from benchmark datasets."
Suggest an API endpoint for a user profile,A possible API endpoint for a user profile could be `GET /users/:id` which returns the profile information associated with the given user ID.
Edit the code to correctly define the type of `age`const age;,const age: number;
Create a new Python class called Area to calculate the area of different shapes.,"class Area:
    def __init__(self):
        pass

    def calculate_area_rectangle(self, length, width):
        return length * width

    def calculate_area_triangle(self, base, height):
        return 0.5 * base * height

    def calculate_area_circle(self, radius):
        return 3.14 * radius**2"
"Extract the phone numbers from a string of texttext = ""My number is (202) 555-0123 and my friend's number is (703) 555-9876""","import re

def extract_phone_numbers(text): 
    phones = re.findall(""\(\d{3}\) \d{3}\-\d{4}"",text) 
    return phones

print(extract_phone_numbers(text))

# Output
['(202) 555-0123', '(703) 555-9876']"
Implement a in-order traversal of a binary tree in Python.,"class Node: 
    def __init__(self, data): 
        self.data = data  
        self.left = None
        self.right = None

def inOrderTraversal(root):  
    if root is not None: 
        inOrderTraversal(root.left)
        print(root.data)
        inOrderTraversal(root.right)

root = Node(1)
root.left = Node(7)
root.right = Node(9)
root.left.left = Node(4)
root.left.right = Node(8)

inOrderTraversal(root)

# Output
4
7
1
8
9"
"Create a function to generate the weight of a given sequence of DNADNA = ""GTCATCTGAG""","def generate_DNA_weight(DNA):
    
    # Initialize the weights dict
    weights = {
        ""G"": 57.02,
        ""A"": 71.04,
        ""T"": 89.09,
        ""C"": 103.01    
    }

    # Calculate the weight
    weight = 0.0
    for character in DNA:
        weight += weights[character]
    return weight

# Output
generate_DNA_weight(DNA)

# Output
698.22"
Find the minimum number of coins required to make a given amountamount = 93,"def min_coins(amount):
    # list of coin denominations
    coins = [1, 5, 10, 25]
    min_coins = 0
    i = len(coins) - 1
    while(amount > 0):
        if (amount >= coins[i]):
            amount -= coins[i]
            min_coins += 1
        else:
            i -= 1
    return min_coins

# Output
min_coins(amount)

# Output
7"
"Construct a for loop to access each element of the given array.[1, 2, 3, 4]","arr = [1, 2, 3, 4]
for i in range(len(arr)):
    print(arr[i])"
Modify the code below to check if the number is divisible by 2.num = 8,"num = 8
if num % 2 == 0:
    print('The number is divisible by 2.')"
Create an algorithm to check if a binary tree is univalued.,"""""""
def isUnivalTree(root):
    is_uni = True
    if root is None:
        return is_uni
    else:
        val = root.val
        if root.left:
            is_uni &= root.left.val == val
        if root.right:
            is_uni &= root.right.val == val
        is_uni &= isUnivalTree(root.left)
        is_uni &= isUnivalTree(root.right)
    return is_uni
"""""""
Create a class in Python named 'Rectangle' which can compute the area of a rectangle.,"class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
	
    def get_area(self):
        return self.width * self.height"
Design an algorithm to check if a string contains a given substring.,"""""""
def isSubstring(string, sub): 
    l1 = len(string) 
    l2 = len(sub) 

    if l2> l1: 
        return False

    # Sliding window approach
    for i in range(l1): 
        if string[i:i+l2] == sub : 
            return True 

    return False 
"""""""
"Suppose we have a dictionary with keys (1,2,3). Create a function to return the values of the dictionary.d = {1: ""one"", 2: ""two"", 3: ""three""}","def get_values(d):
    return list(d.values())"
Write a function that exchanges the first and last elements of a list.,"def exchange_first_last(lst):
    first_item = lst[0]
    last_item = lst[-1]
    lst[0] = last_item
    lst[-1] = first_item
    return lst"
Reverse a given list without using any predefined functions.,"def reverse_list(lst):
    n = len(lst)
    for i in range(n // 2): 
        lst[i], lst[n-i-1] = lst[n-i-1], lst[i]
    return lst"
Suggest a valid Python code to add two numbers,"def add_two_numbers(a, b):
    return a + b"
Generate an algorithm to multiply two numbers without using multiplication operator,"def multiply_without_operator(a, b): 
    # If either a or b = 0, return 0
    if (a == 0 or b == 0): 
        return 0
  
    # Initialize result 
    result = 0
  
    # Add a, b number of times 
    for i in range(min(a, b)): 
        result = result + max(a, b) 
  
    # Return the multiplication result 
    return result"
Suggest a valid Python code to print unique characters of a given string,"def print_unique(s):
    output = set()
    for char in s:
        if char not in output:
            output.add(char)
            print(char)"
"Create a regex pattern that can match the pattern ""www.somedomain.com/posts/[post_id]"".",^www\.somedomain\.com\/posts\/\d+$
"Fix the following Python code to create a dictionary.dic = {“min”, 10, “max”, 20}","dic = {""min"": 10, ""max"": 20}"
"Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}","def generate_dict():
    """"""Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}""""""
    my_dict = {}
    for i in range(1, 5):
        my_dict[i] = i**2
    return my_dict

generate_dict() # Outputs {1:1, 2:4, 3:9, 4: 16}"
"Remove the duplicates from the list without using built-in methods.[1, 2, 1, 2, 3, 2, 4, 2]","def remove_duplicates(arr):
    """"""Remove the duplicates from the list without using built-in methods.""""""
    # Initialize empty list
    new_list = []
    # Iterate through array
    for num in arr:
        # Check if element is not in list
        if num not in new_list:
            # Add element to list
            new_list.append(num)
    return new_list

remove_duplicates([1, 2, 1, 2, 3, 2, 4, 2]) # Outputs [1, 2, 3, 4]"
"Sort the list in reverse order using insertion sort.[4, 2, 0, 6, 1, 7, 3]","def insertion_sort_reverse(arr):
    """""" Sort the list in reverse order using insertion sort. """"""
    # Iterate over the list
    for i in range(1, len(arr)):
        current_value = arr[i]
        # Keep track of position
        position = i
        # Iterate over the sorted part of the list
        while position > 0 and arr[position - 1] < current_value:
            # Shift one place to the right
            arr[position] = arr[position - 1]
            # Move position back
            position = position - 1
        # Insert current value at the position
        arr[position] = current_value
    return arr

insertion_sort_reverse([4, 2, 0, 6, 1, 7, 3]) # Outputs[7, 6, 4, 3, 2, 1, 0]"
"Write a code to convert a given date string into a timestamp.date_string = ""2020-07-24 14:50:00""","import datetime

def convert_to_timestamp(date_string):
    """"""Write a code to convert a given date string into a timestamp.""""""
    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')
    timestamp = datetime.datetime.timestamp(date_object)
    return timestamp

convert_to_timestamp(""2020-07-24 14:50:00"") # Outputs 1595538200.0"
Create a regular expression which will match numbers divisible by 3.,"import re

pattern = r""^[0-9]*(3|6|9)$""

re.match(pattern, ""6"") # Outputs <re.Match object; span=(0, 1), match='6'>"
"Multiply each element in the given array by 3 and return the new array.[1, 2, 3]","def multiply_by_3(arr):
    """"""Multiply each element in the given array by 3 and return the new array.""""""
    # Initialize empty array
    new_arr = []
    # Iterate over the array
    for num in arr:
        # Multiply by 3
        num *= 3
        # Append to new array
        new_arr.append(num)
    return new_arr

multiply_by_3([1, 2, 3]) # Outputs [3, 6, 9]"
"In the given string, split the words and remove empty strings.string = ""    Hello    World    ""","def split_and_remove(string):
    """"""In the given string, split the words and remove empty strings.""""""
    # Split the string by spaces
    arr = string.split(' ')
    # Initialize empty list
    new_arr = []
    # Iterate over array
    for word in arr:
        # Check if not empty
        if word != '':
            # Append to list
            new_arr.append(word)
    return new_arr

split_and_remove('    Hello    World    ') # Outputs ['Hello', 'World']"
Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.string = 'google',"def create_frequency_dict(string):
    """"""Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.""""""
    # Initialize empty dictionary
    freq_dict = {}
    # Iterate over the string
    for char in string:
        # Check if char is in dictionary
        if char in freq_dict:
            # Increase its frequency
            freq_dict[char] += 1
        else:
            # Add to dictionary
            freq_dict[char] = 1
    return freq_dict

create_frequency_dict('google') # Outputs {'g': 2, 'o': 2, 'l': 1, 'e': 1}"
Give a function to get an array of n-dimensional vectors.,"def get_n_dimensional_vectors(n):
     vectors = [[0 for x in range(n)] for x in range(len(arr))] 
     for vector in vectors:
         for i in range(n):
             vector[i] = arr[i]
     return vectors"
How can you convert a number from one base to another?,"def convert_base(num, from_base, to_base):
    if isinstance(num, str):
        n = int(num, from_base)
    else:
        n = int(num)
    alphabet = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    if n < to_base: 
        return alphabet[(n)]
    else:
        return convert_base(n // to_base, from_base, to_base) + alphabet[n % to_base]"
"Answer this logic programming question: What is the transitive closure of the binary relation ""less than"" on the set of integers?","The transitive closure of the 'less than' relation on the set of integers is defined as: if (x,y) belongs to the set of integers, then for all n, x < n and n < y implies x < y."
"Write a function in Python which takes an array of integers and returns a list of all distinct pairs whose sum is equal to a given value.arr = [1, 2, 3, 4, 5]
value = 7","def pairs_with_sum(arr, value):
    pairs = []
    for i in range(len(arr)-1):
        for j in range(i+1, len(arr)):
            if (arr[i] + arr[j] == value):
                pairs.append((arr[i], arr[j]))
    return pairs"
"Use the Pandas library to find the mean rental price for a property in a particular city in the US.The property is located in Miami, Florida.","""""""
Find the mean rental price for a property in Miami, Florida using the Pandas library.
""""""

import pandas as pd

# read the dataset
df = pd.read_csv('data.csv')

# filter the data by city
df_miami = df[df['city'] == 'Miami, Florida']

# calculate the mean rental price
mean_price = df_miami['rental_price'].mean()

# print the result
print(f'The mean rental price in Miami, Florida is ${mean_price:.2f}')"
How would you find the maximum depth of a tree data structure?,"One way to find the maximum depth of a tree data structure is to start at the root node and then recursively traverse down each branch, keeping track of the maximum depth. This is known as a depth-first search and can be implemented using a recursive algorithm. Alternatively, the maximum depth can also be found using a breadth-first search, where the tree is traversed level-by-level."
"Create a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements in the list.[1, 3, 5, 8, 9, 10, 11, 15]","""""""
Create a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.
""""""

def long_consec_sequence(lst):
    if not lst:
        return 0
    
    # initialize the size of the longest subsequence 
    max_seq_len = 0
    
    # iterate through the list 
    for i in range(len(lst)-1) : 
        
        # create a new sequence 
        curr_seq = 1
    
        j = i+1
        while (j < len(lst)): 
            if (lst[j] - lst[j-1]) == 1 : 
                curr_seq += 1 
            else: 
                break
            j += 1
        
        # update the length of the maximum subsequence
        if curr_seq > max_seq_len: 
            max_seq_len = curr_seq 
    
    # return the length of the maximum consecutive subsequence
    return max_seq_len 

if __name__ == '__main__':
    lst = [1, 3, 5, 8, 9, 10, 11, 15]
    print(long_consec_sequence(lst)) # Output: 4"
Create a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.,"""""""
Create a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.
""""""

def is_prime(n): 
    if n <= 1: 
        return False
  
    # create a list of all numbers from 0 to n
    nums = [True for _ in range(n + 1)] 
  
    p = 2
    while (p * p <= n): 
        # If prime[p] is not changed, it is a prime 
        if nums[p] is True: 

            # Update all multiples of p 
            for i in range(p * 2, n + 1, p): 
                nums[i] = False
        p += 1

    return nums[n]

if __name__ == '__main__':
    n = 37
    print(is_prime(n)) # Output: True"
How would you reverse a singly linked list without using any additional data structures?,"One way to reverse a singly linked list without using any additional data structures is to iterate through the linked list, while keeping track of the current node's predecessor and successor. At each iteration, store the predecessor and successor, remove the link from the predecessor to the current node,and link the current node to the predecessor. Once all the nodes have been iterated through, the predecessor of the head node should be connected to the tail node."
"Edit the code given below to make it print the numbers from 1 to 10 in increasing order.for i in range(10):
    print(i)","for i in range(1, 11):
    print(i)"
"Given a dictionary of words and a set of characters, how would you find the longest word which can be constructed from the given set of characters?","One way to find the longest word which can be constructed from a set of characters is by using a trie data structure. To do this, first create the trie from the given dictionary of words, then traverse it to look for the longest word which can be constructed from the given set of characters. At each node, check if the character at the current node is present in the given set, and if yes, traverse down. If no, then backtrack until a valid character is found."
"Parse the given string and return a dictionary with the keys and corresponding values.s = ""name seth age 30 occupation manager""","d = {'name': 'seth', 'age': '30', 'occupation': 'manager'}"
"Convert a sentence into a list of words using the provided function.str = ""This is a sentence.""","res = list_of_words(str)
res = ['This', 'is', 'a', 'sentence.']"
"Create a loop that prints out the even numbers from the given list.lst = [1, 2, 3, 4, 5]","for i in lst:
  if i % 2 == 0:
    print(i)"
Generate a list of length n containing all numbers from 1 to n.,"def gen_list(n):
    list = []
    for i in range(1, n+1):
        list.append(i)
    return list"
"Using an existing function, update the given array of numbers to contain elements which are the square of each original element.array = [1,2,3,4,5]","array = list(map(lambda x: x**2, array))"
"Print all permutations of an input array.array = [1,2,3]","def permutations(array):
    if len(array) == 0:
        return
    if len(array) == 1:
        return [array]
    perms = []
    for i in range(len(array)):
        elem = array[i]
        rem_perms = permutations(array[:i] + array[i+1:])
        for perm in rem_perms:
            perms.append([elem] + perm)
    return perms"
"Convert a given string into Pig Latin.string = ""Hello""","def pig_latin(string):
    vowels = ""aeiou""
    if string[0].lower() in vowels:
        return string+""way""
    else:
        return string[1:]+string[0]+""ay"""
Construct a for loop in Python to output the numbers from 1 to 5.,"for i in range(1,6):
  print(i)"
Create a class in Python called Math that can calculate the average of two numbers.,"class Math:
    def __init__(self, x, y):
        self.x = x
        self.y = y
 
    def average(self):
        return (self.x + self.y) / 2"
Compare and contrast the difference between static and instance variables.,"Static variables are associated with a class and are shared by all the objects of that class; in other words, they are class-level variables. Instance variables are associated with each object and their values can be different for each object. Static variables exist throughout the execution of the program and do not require instance of the class to exist. On the other hand, instance variables are created and destroyed as the instance of the class is created and destroyed."
Describe how language models can be used in natural language processing.,"Language models are used in natural language processing to enable machines to understand and generate natural language. Language models assign a probability to a sequence of natural language words to improve the accuracy of predictions in language processing tasks. They are used for automatic speech recognition, machine translation, text summarization, essay grading, and natural language understanding."
What is a Python tuple?,"A Python tuple is an immutable sequence of objects which is ordered and indexed. Tuples are usually used to store collections of data that are related, but may be of different data types. Tuples are used instead of lists because they are more memory efficient and can be used as elements of sets and as keys in dictionaries."
"Write an IF ELSE statement in Python to print either ""Number is even"" or ""Number is odd"" depending on the number input.","if (num % 2 == 0):
    print(""Number is even"")
else:
    print(""Number is odd"")"
Create an R function that plots a histogram of a given data set.,"plot_histogram <- function(data) {
  hist(data, main = ""Histogram of given data set"")
}"
design a functions which removes the duplicate elements from a list,"def remove_duplicates(x):
    res = []
    for i in x:
        if i not in res:
            res.append(i)
    return res"
"update the function to return the length of 5def return_length():
    return 0","def return_length():
    return 5"
"print the values of a dictionary in first-in, first-out ordermy_dict = {
 'a': 1,
 'b': 2,
 'c': 3
}","def print_dict(d):
    queue = [key for key in d.keys()]
    while len(queue) > 0:
        key = queue.pop(0)
        print(d[key])
        
if __name__ == '__main__':
    my_dict = {
     'a': 1,
     'b': 2,
     'c': 3
    }
    print_dict(my_dict)"
Identify if the given number is primen = 13,"def is_prime(n):
  for i in range(2, n):
    if n % i == 0:
      return False
  return True

if __name__ == '__main__':
  n = 13
  print(""Is {} prime? {}"".format(n, is_prime(n)))"
Write a postfix expression to an infix expression3 4 + 5 *,"def postfix_to_infix(expression):
    stack = []
    for c in expression.split():
        if c in ""+-*/"":
            operand1 = stack.pop()
            operand2 = stack.pop()
            stack.append(""({} {} {})"".format(operand2, c, operand1))
        else:
            stack.append(c)
    return stack[0]

if __name__ == '__main__':
    expression = '3 4 + 5 *'
    print(postfix_to_infix(expression))"
"Make changes to this code to fix the bug.def example_function(a, b):
    c = 0
    for i in range(a, b+1):
        c -= i
    return c","def example_function(a, b):
    c = 0
    for i in range(a, b+1):
        c += i
    return c"
"Convert this string from snake_case to CamelCase.snake_case_string = ""example_string""",camelCaseString = ''.join(x.capitalize() or '_' for x in snake_case_string.split('_'))
"Add this method to the Person class.class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def intro(self):
        print(""Hi, my name is %s and I am %d years old."" % (self.name, self.age))"
"Create a list comprehension in Python to double each element in the list.list = [1, 2, 3, 4, 5]",result = [x*2 for x in list]
Find the first 10 numbers that are divisible by 4 and 7,"numbers = [] 
num = 0
while len(numbers) < 10:
    num += 1
    if (num % 4 == 0) and (num % 7 == 0):
        numbers.append(num) 
print(numbers)"
"Design a data structure to store user information such as username, password, date of birth and email address.","The information can be stored in a user class using the following structure: 
class User {
  string username;
  string password;
  string dateOfBirth;
  string emailAddress;
}
The information can then be accessed and modified using getter and setter methods."
Simulate a coin toss in Python and get the results in a list.,"import random

results = []
for i in range(10):
    if random.random() < 0.5:
        results.append('heads')
    else:
        results.append('tails')

print(results)"
Design a function to convert Fahrenheit to Celsius in Python.,"def fahrenheit_to_celsius(f):
    celsius = (f - 32) * 5/9
    return celsius"
"Scale a vector of 10 numbers from 0 to 10.[2.5, 3.5, 5.5, 7.5, 1.5, 8.5, 0.5, 4.5, 6.5, 9.5]","def scale(vector): 
    scaled_vector = []
    for i in vector: 
        scaled_vector.append(i/10*10) 
    return scaled_vector"
Create a loop to traverse through a tree using depth-first search.,"def traverse_tree(node): 
    print(node.data) 

    if node.left: 
        traverse_tree(node.left) 
    if node.right: 
        traverse_tree(node.right)"
"Edit the vector below such that all elements are greater than five.[1, 5, 3, 7, 6, 4]","def edit_vec(vec): 
    for i in range(len(vec)): 
        if vec[i] <= 5: 
            vec[i] = 5
    return vec"
"Transform the following function definition so it can be used for all type of datadef calculate(int a, int b):","def calculate(a, b):
    """"""This function can be used to calculate the result of two parameters
    regardless of their type (int, float, etc)""""""
    return a + b"
Capitalize all the words in a stringhello world,Hello World
"Create a new dictionary using the values of two given dictionariesd1 = {1:10, 2:20}
d2 = {3:30, 4:40}","d3 = {**d1, **d2}"
Generate a data set using RandomSample(),"from random import Random

def RandomSample(number_of_samples):
    sample = []
    random_generator = Random()
    for i in range(number_of_samples):
        sample.append(random_generator.random())
    return sample"
"Rearrange the code to print the hierarchy of students in a Python classstudents = [
  {
    ""name"": ""John Smith"",
    ""role"": ""student""
  },
  {
    ""name"": ""Alice Johnson"",
    ""role"": ""student""
  },
  {
    ""name"": ""Bob Williams"",
    ""role"": ""teacher""
  },
  {
    ""name"": ""Cecilia Brown"",
    ""role"": ""teacher""
  }
]","students = [
  {
    ""name"": ""John Smith"",
    ""role"": ""student""
  },
  {
    ""name"": ""Alice Johnson"",
    ""role"": ""student""
  },
  {
    ""name"": ""Bob Williams"",
    ""role"": ""teacher""
  },
  {
    ""name"": ""Cecilia Brown"",
    ""role"": ""teacher""
  }
]

teachers = []
students_list = []

for student in students:
  if student[""role""] == ""teacher"":
    teachers.append(student)
  else:
    students_list.append(student)

print(""Teachers:"")
for teacher in teachers:
  print(teacher[""name""])

print(""Students:"")
for student in students_list:
  print(student[""name""])"
"Reverse the order of the following list: [""Apple"", ""Banana"", ""Cherry""][""Apple"", ""Banana"", ""Cherry""]","[""Cherry"", ""Banana"", ""Apple""]"
Find the sum of all the prime numbers between 45 and 65.,The sum of all the prime numbers between 45 and 65 is 458.
Generate an array of all the multiples of 5 that are less than 40.,"[5, 10, 15, 20, 25, 30, 35]"
"Write a regular expression to search for the pattern ""carrot"" in a given string.","The regular expression to search for ""carrot"" in a given string is /carrot/."
Create a program that takes two strings as arguments and returns true if the two strings contain the same characters.,"def same_characters(str1, str2):
    return sorted(str1) == sorted(str2)"
"Using regex, search for all occurrences of the substring ""cat"" in the following string:The dog ran away, but the cat stayed","The regular expression to search for all occurrences of the substring ""cat"" in the string is /\bcat\b/g."
"Create a script that takes an input variable k, and prints out ""k is true"" if k is true, and ""k is false"" if k is false.k = 2 < 5","if [ $k = true ]; then
  echo ""k is true""
else
  echo ""k is false""
fi"
"Write a method to return the sum of two integers a and b.a = 2, b = 8.","int add(int a, int b) {
    return a + b;
}"
"Modify the following code to print out ""The result is 30"".int a = 10
int b = 20
Console.WriteLine(""The result is "" + a + b)","int a = 10;
int b = 20;
Console.WriteLine(""The result is "" + (a + b).ToString());"
"Create a class to store the number, its square and its cube.","class Number:
  def __init__(self, number):
    self.number = number
    self.square = number * number
    self.cube = number * number * number"
Make a program that takes in a non-empty string and finds its longest palindrome.,"def longest_palindrome(text):
  longest_palindrome = """"
  for i in range(len(text)):
    for j in range(len(text), i, -1):
      substring = text[i:j]
      if substring == substring[::-1] and len(substring) > len(longest_palindrome):
        longest_palindrome = substring
  return longest_palindrome"
Create an algorithm to produce a Fibonacci number.,"def fibonacci(n):
  if n <= 1:
    return n
  else:
    return fibonacci(n-1) + fibonacci(n-2)"
"Create a method to solve a linear equation ax + b = 0.a = 2, b = 4","def solve_linear_equation(a, b):
  return -b/a"
"Parse a given string to create a tree data structure.expr = ""a + b * c""","def parse_string(expr):
  root = Node(expr[0])
  current_node = root
  
  for i in range(1, len(expr), 2):
    node = Node(expr[i])
    current_node.right = node
    node.left = current_node
    current_node = node
  
  return root

class Node:
  def __init__(self, data):
    self.data = data
    self.left = None
    self.right = None"
"Create a Python program to sort of given list of strings in alphabetical order.list_of_strings = [""apple"", ""banana"", ""cherry"", ""dog""]","def sort_words(words):
    return sorted(words)

list_of_strings_sorted = sort_words(list_of_strings)
print(list_of_strings_sorted)"
"Write a Python program to create a new list which contains all even numbers from the given list.list_of_numbers = [1, 2, 3, 4, 5, 6]","def get_even_numbers(numbers):
    even_numbers = []
    for n in numbers:
        if n % 2 == 0:
            even_numbers.append(n)
    return even_numbers

even_numbers = get_even_numbers(list_of_numbers)
print(even_numbers) # prints [2, 4, 6]"
"Create a Python function to remove all elements of the given list that are equal to the given value.list_of_numbers = [1, 2, 3, 4, 2, 3] 
value = 2","def remove_val(numbers, val):
    result = []
    for n in numbers:
        if n != val:
            result.append(n)
    return result

list_without_2 = remove_val(list_of_numbers, value)
print(list_without_2) # prints [1, 3, 4, 3]"
Make a Python program to generate all permutations of a given list.,"def permutations(nums):
    if len(nums) == 0:
        return []

    if len(nums) == 1:
        return [[nums[0]]]
    
    perms = []

    for i, n in enumerate(nums):
        sub_perms = permutations(nums[:i] + nums[i+1:])

        for perm in sub_perms:
            perms.append([n] + perm)

    return perms"
"Create a Python program to remove all whitespace from the given string.text = ""   This is a    sentence    with some whitespace!   ""","def remove_whitespace(text):
    return text.replace("" "", """")

text_without_whitespace = remove_whitespace(text)
print(text_without_whitespace) # prints ""Thisisasentencewithsomewhitespace!"""
"Make a Python program to delete elements from a given list at particular indices.list_of_numbers = [0, 1, 2, 3, 4, 5]
indices = [2, 3, 5]","def remove_elements_at_indices(numbers, indices):
    for index in sorted(indices, reverse=True):
        del numbers[index]
    return numbers

modified_list = remove_elements_at_indices(list_of_numbers, indices)
print(modified_list) # prints [0, 1, 4]"
"Sort an array of numbers in descending order using the bubble sort algorithm.`array = [10, 5, 2, 7, 6]`","def bubble_sort(arr): 
    for i in range(len(arr)): 
        for j in range(0, len(arr)-i-1): 
            if arr[j] < arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]
  
array = [10, 5, 2, 7, 6]
bubble_sort(array)
print(array) # Output: [10, 7, 6, 5, 2]"
Create a GraphQL query to get a list of all the posts in a blog.,"query {
  posts {
    id
    title
    body
    author {
      name
    }
  }
}"
What is an exception handling code in Python?,Exception handling in Python is a process in which errors or exceptions in a program are handled using certain programming construct such as try-except or try-finally blocks so that the program can recover from such exceptions and continue running. Exception handling helps prevent critical errors in the program from crashing the entire program and allows developers to write more robust codes.
"Generate a code that creates a dictionary from two different lists with equal length.list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]","def create_dictionary(list1, list2):
    if len(list1) != len(list2):
        return ""lists have different lengths""
    else:
        my_dict = dict(zip(list1, list2))
        return my_dict

list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]
print(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}"
"Edit the following code to print true if the condition is met, false if not.a = 5
b = 3

if (a > b):
    print(""true"")","a = 5
b = 3

if (a > b):
    print(True)
else:
    print(False)"
"Update the code to get 2 extra lines of output to print the first and last value of the list.list1 = [1, 2, 3, 4, 5]","list1 = [1, 2, 3, 4, 5]

print(""First element:"", list1[0])
print(""Last element:"", list1[-1])

for item in list1:
    print(item) #output: 
    First element: 1
    Last element: 5
    1
    2
    3
    4
    5"
"Add a loop to the following program so that it prints out each item in a list.list1 = [1, 2, 3, 4, 5]","list1 = [1, 2, 3, 4, 5]

for item in list1:
    print(item) #output: 
    1
    2
    3
    4
    5"
"You need to delete an item from a list. Output the modified list.['apple', 'orange', 'banana']","['apple', 'orange']"
"Given a set of numbers, you need to output them in descending order.[30, 50, 10, 40]","[50, 40, 30, 10]"
Modify the following code so that it takes a user input for the numbers for which to calculate the sum.,"def sum_numbers():
    number_list = []
    input_numbers = input(""Please enter the numbers you want to sum up (enter q to exit): "")
    while input_numbers != ""q"":
        number_list.append(int(input_numbers))
        input_numbers = input(""Please enter the numbers you want to sum up (enter q to exit): "")
    return sum(number_list)"
"Consider a list ``a = [1,3,2,2,3,4]``. What would be the output of the following code?a = [1,3,2,2,3,4]

for i in range(len(a)):
    a[i] = a[i -1]","a = [1,3,2,2,3,4]

output = []
for i in range(len(a)):
    output.append(a[i - 1])

print(output) # [3, 2, 2, 3, 4, 1]"
"Write a function that takes two strings as input and returns a join of both strings as a single string, with the second string in the middle.string1 = ""Hello""
string2 = ""World""","def join_string_in_middle(string1 , string2):
    return string1 + string2 + string1

# Usage
result = join_string_in_middle(""Hello"", ""World"")
print(result) # HelloWorldHello"
What type of data structure would you use to store key-value pairs in a Python program?,"The data structure to use for key-value pairs in Python is a dictionary. A dictionary is a data type that consists of key-value pairs, and is denoted by {} in Python. Each key has a unique value associated with it that can be accessed using the key. For example, a dictionary called ""person"" could look like this: 

person = {'name':'John', 'age': 32} 

The value of the key ""name"" can be accessed using person['name'] which returns ""John""."
Generate a recursive function for calculating the factorial of a number.,"def factorial(num):
    # base case
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

# Usage
print(factorial(3)) # 6"
Find all substrings of a string that are palindromes in Python.,"def get_all_palindromes(input_string):
    palindromes = []
    for substring_length in range(len(input_string)):
        for i in range(len(input_string) - substring_length + 1):
            sub_string = input_string[i: i + substring_length]
            if sub_string == sub_string[::-1]:
                palindromes.append(sub_string)
    return palindromes

# Usage
palindromes = get_all_palindromes(""banana"")
print(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']"
Create a NumPy array containing three zeros and three ones.,"np.array([0, 0, 0, 1, 1, 1])"
"Given a dataframe, remove any rows containing missing values.DataFrame:
col1    col2    col3
1       a       3
2       b       4
3       NaN     5
4       c       NaN","DataFrame:
col1    col2    col3
1       a       3
2       b       4"
"Create a dictionary of colors containing the values red, blue and green.","{""red"": ""red"", ""blue"": ""blue"", ""green"": ""green""}"
"Given a list, remove the duplicates from it.[1, 2, 3, 1, 4, 2]","[1, 2, 3, 4]"
"Sort a dictionary by its values.{""a"": 4, ""b"": 2, ""c"": 3, ""d"": 1}","{""d"": 1, ""b"": 2, ""c"": 3, ""a"": 4}"
"Create an application to hide certain words in a text.Text: ""The quick brown fox jumped over the lazy dog.""
Words to hide: [""fox"", ""dog""]","const censoredText = (text, wordsToHide) => {
  const wordsArr = text.split(' ');
  wordsArr.forEach((word, index) => {
    if (wordsToHide.includes(word)) {
        wordsArr[index] = '*'.repeat(word.length)
    }
  });
  return wordsArr.join(' ');
}

censoredText(""The quick brown fox jumped over the lazy dog."", [""fox"", ""dog""]);
// The quick brown *** jumped over the lazy ***."
Write an Angular directive to validate input fields.,"@Directive({ selector: '[validateInput]' })
export class InputValidationDirective {
  @Input() validateInput: string;
  
  constructor(private el: ElementRef) {
  }

  @HostListener('keyup') onKeyup() {
    let value = this.el.nativeElement.value
    if(!this.validateInput || this.validateInput === 'creditcard'){
       //creditcard validation logic
    }
    if(this.validateInput ==='number'){
       //number validation logic
    }
  }
}"
Create an algorithm in Python to calculate the compound interest,"def compound_interest(principal, rate, time): 
  
    # Calculates compound interest
    CI = principal * (pow((1 + rate / 100), time))  
    return CI 
  
# Driver Code 
principal=8000
rate=3
time=5
  
print(""Compound interest is"", compound_interest(principal, rate, time))"
Create a loop in Python that counts down from 10 to 0.,"for i in range(10, 0, -1):
  print(i)"
Add a function to the existing code that takes an integer value as input and prints a square of '*' characters.def print_square(length):,"def print_square(length):
  for i in range(0, length):
    for j in range(0, length):
      print(""*"", end="""")
    print("""")"
"Use a for loop to compute the sum of the list [1, 3, 5, 7, 9].[1, 3, 5, 7, 9]","total = 0
for num in [1, 3, 5, 7, 9]:
  total += num
print(total)"
"Use a for loop to print the characters of the string ""Hello World!"".","for char in “Hello World!”:
  print(char)"
Print the type of the data stored in the variable 'a'.int a = 15,Integer
"Find the index of the string ""the"" in the sentence ""I saw the cat"".",3
Create a set containing the numbers from 1-10 that are divisible by 3.,"my_set = {3, 6, 9}"
Calculate the product of the numbers 87 and 36.,3132
Create a function in python that takes a string and returns a new string with the same letter count but in ascending orderword = “tweet”,"def ascending_order(word):
    list = []
    for letter in word:
        list.append(letter)
    sorted_list = sorted(list)
    return """".join(sorted_list)"
"Generate a shorthand method in Python to replace all 0s with 1.input_list = [1, 0, 1, 0, 0]","def replace_zeros(input_list): 
    output_list = [x if x != 0 else 1 for x in input_list] 
    return output_list"
"Generate a method in Python to sort a given list of dictionaries.list_dict = [{'name': 'a', 'age': 23}, {'name': 'b', 'age': 19}, {'name': 'c','age': 36}]","def dict_sort(list_dict): 
    sorted_dict = sorted(list_dict, key = lambda x: x['age']) 
    return sorted_dict"
"Modify the given Python code to calculate the sum of the given list and print the output.list = [1,2,3,4,5]","def sumList(list): 
    sum = 0
    for i in list:
        sum = sum + i
    return sum

print(sumList(list))"
What is the value of the math expression 100(log_10 10),100
Create a neural network with 5 inputs and 2 outputs,"model = tf.keras.Sequential([
  tf.keras.layers.Dense(10, activation='relu', input_shape=(5,)),
  tf.keras.layers.Dense(2, activation='softmax'),
])"
"Sum up the elements of this array[2,7,1,3]",13
Add a comment to this codefor(int i = 0; i < n; i++),"// loop through all n elements in the array 
for (int i = 0; i < n; i++) 
{
    // code 
}"
"Output the largest number in this array[20, 6, 36, 41, 12, 3]",41
Create a function that takes two String as parameters and return true if one String is substring of the other,"public static boolean isSubstring(String s1, String s2){
        int len1 = s1.length();
        int len2 = s2.length();
        if(len1 < len2){
            if(s2.contains(s1)){
                return true;
            }
        }else{
            if(s1.contains(s2)){
                return true;
            }
        }
        return false;
    }"
"Edit this code to show a message after 2 seconds<script>
    alert(""Hello World!"");
</script>","<script>
    setTimeout(function(){ 
        alert(""Hello World!""); 
    }, 2000);
</script>"
"Write a function to find all distinct permutations of a given list[1,2,3]","def permute(nums):
    # base case when only one element in the list
    if len(nums) == 1:
        return [nums] 
  
    permutations = []
    for i in range(len(nums)): 
        m = nums[i] 
 
        # extract remaining list 
        remain = nums[:i] + nums[i+1:] 
  
        # Iterate over remaining list and 
        # generate all permutations 
        for p in permute(remain): 
            permutations.append([m] + p) 
  
    return permutations"
Construct an algorithm to delete duplicate characters from a string,"def delete_duplicates(string):
    letters = set()
    newstring = """"
    for char in string:
        if char in letters:
            continue
        else:
            letters.add(char)
            newstring += char
    return newstring"
Create a variable called myName and assign your name to it.,"myName = ""John Doe"""
What is the standard indentation size for Python code?,The standard indentation size for Python code is 4 spaces.
Write a code to print out all the even numbers in the range 0 to 10.,"for i in range(0, 11):
    if i%2 == 0:
        print(i)"
Create a dictionary and assign four key-value pairs.,"my_dict = {'apple': 'fruit', 'carrot': 'vegetable', 'house': 'structure', 'dog': 'animal'}"
Create an array and assign four elements to it.,"my_array = [""John"", ""Paul"", ""George"", ""Ringo""]"
Construct an if-else statement to handle a conditional execution.if x is greater than 0,"if x > 0:
    # execute one block of code
else:
    # execute another block of code"
Create a while loop that prints the numbers 1-10,"i = 1
while i <= 10:
    print(i)
    i += 1"
"Construct a for loop to print a user-defined pattern.*
**
***
****","for i in range(1, 5):
    for j in range(0, i):
        print(""*"", end="""")
    print() # add a new line"
"Convert this list into a numpy array and sort it.[3, 5, 1, 9, 6]","import numpy as np

# Convert to numpy array
arr = np.array([3, 5, 1, 9, 6])

# Sort the array
arr.sort()

# Print the sorted array
print(arr)"
"Build a machine learning model using scikit-learn to predict the house prices in Boston.- Number of rooms: 3 
- Average number of rooms per dwelling: 6 
- Proportion of residential land zoned for lots over 25,000 sq.ft: 0.4
- Index of accessibility to radial highways: 4
- Full-valuation property-tax rate per $10,000: 300","import sklearn
from sklearn.linear_model import LinearRegression

# Create feature and label
X = [[3,6,0.4,4,300]]
y = [[BostonHousePrice]]

# Create and fit the linear regression model
reg = LinearRegression().fit(X, y)

# Predict the output
prediction = reg.predict([[3,6,0.4,4,300]])[0][0]"
Why is overflow an issue in computer science?,"In computer science, overflow occurs when the result of a computation exceeds the capacity of its data type, resulting in Loss of accuracy or erroneous answers from a computation. Certain programming errors lead to overflow, such as incrementing a counter past the capacity of its assigned data type, or calculating a value far greater than the data type is designed to handle. Overflow can result in critical errors like stepping off the end of an array or incorrect mathematical expressions. It is important to be aware of overflow and anticipate it in order to be able to prevent it with proper error checking."
"Create a function my_func in Python that accepts three integers x, y and z as parameters and returns the maximum.","def my_func(x, y, z):
  max_num = max(x, y, z)
  return max_num"
How can we detect outliers in a dataset?,"Outliers can be detected by computing simple summary statistics and plotting the data. Common methods for detecting outliers include the use of box plots, scatter plots, and statistical tests such as the Interquartile Range (IQR) test and the Z-score test. The IQR test uses the difference between the 75th and 25th percentiles, and any value further than 1.5 times the IQR is considered an outlier. The Z-score test detects outliers by calculating the z-scores of each data point, and values more than 3 standard deviations away are considered outliers."
What is aHeap data structure?,"A heap is a specialized tree-based data structure in which the root-node key is compared with the keys of its children and arranged accordingly. It is typically used to implement priority queues where the key for each item is based on its priority. Heaps are also used for sorting, representing graphs, and as a data structure for the heapsort sorting algorithm."
"Implement Quicksort in Python to sort this list of integers.[8, 5, 3, 9, 1]","def quicksort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]

    return quicksort(left) + middle + quicksort(right)

sorted_arr = quicksort([8, 5, 3, 9, 1])
 
print(sorted_arr)"
What is computational complexity and how can it affect the performance of a program?,Computational complexity is a measure of the amount of resources (time and memory) needed to execute a given algorithm. It is expressed as a function of the size of the input data. A program that has a high computational complexity will take longer to execute and require more memory as the size of the data increases. Improving the complexity of algorithms can dramatically improve the performance of a program.
Generate a parse tree for the following sentenceAlice likes to swim,"likes
        /     \
    Alice      to
               /
             swim"
What is the best time complexity of QuickSort?,The best time complexity of QuickSort is O(nlog(n)).
Create a class to create a naive bayes model.,"class NaiveBayesModel: 
    def __init__(self): 
        pass 
      
    def train(self, data, labels): 
        self.prior_probability = self.calculatePriorProbabilities(labels)
        self.likelihoods = self.calculateLikelihoods(data, labels)
    
    def calculatePriorProbabilities(self, labels): 
        labels_counts = {} 
        for label in labels: 
            if label not in labels_counts: 
                labels_counts[label] = 0 
            labels_counts[label] += 1 
              
        return {label: count/len(labels)
                for label, count in labels_counts.items()} 

    def calculateLikelihoods(self, data, labels): 
        likelihoods = {} 
        for feature, values in data.items(): 
            likelihoods[feature] = {} 
            for label in labels: 
                for value in values: 
                    pass # complete the calculation
                    
        return likelihoods"
What is the main idea behind Naive Bayes Model?,The main idea behind Naive Bayes Model is to use the probability of each data point to make a prediction by calculating the probability of a certain outcome given some prior knowledge. It assumes all the features are independent of each other and uses the Bayes theorem to calculate the probability of a given class based on the evidence.
What is the time complexity of the most_common() function?,The time complexity of the most_common() function is O(n).
What is the time complexity of checking if a given string is a palindrome or not?,The time complexity of checking if a given string is a palindrome or not is O(n).
What is the time complexity of the function you wrote to output the nth Fibonacci number?,The time complexity of the function to output the nth Fibonacci number is O(2^n).
What is the time complexity of the program you wrote to generate random passwords?,"The time complexity of the program to generate random passwords is O(n), where n is the length of the password."
"Create a generator to produce ""hello world"" ten times","def hello_world_generator():
    for _ in range(10):
        yield ""Hello World"""
"Create a variable named ""my_name"" with a value of your name.","let my_name = ""John"";"
"What is the data type for the following value ""true""?","The data type for the value ""true"" is boolean."
"Write a permutation function which takes a given string and returns all the possible permutations.""abc""","function permutate(str){
  if (str.length <= 1) {
    return str;
  } 
  let permutations = []; 
  for (let i = 0; i < str.length; i++) {
    let char = str[i];
    // excluding the character from the string
    let remainingString = str.slice(0, i) + str.slice(i + 1, str.length);
    // recursively call the function
    for (let subPermutation of permutate(remainingString)) {
      permutations.push(char + subPermutation);
    }
  }
  return permutations;
}

const possiblePermutations = permutate(""abc"");

// Output: [""abc"", ""acb"", ""bac"", ""bca"", ""cab"", ""cba""]"
Build a regular expression to match only strings that start with one specific character and end with another specific character.,/^X.*Y$/
"Edit the existing code to accept more than two argumentsdef get_sum(a, b):
    return a + b","def get_sum(*args):
    sum = 0
    for number in args:
        sum += number

    return sum"
What are the advantages of using a while loop over a for loop in Python?,"The main advantages of using a while loop over a for loop in Python are that it is more concise and allows the user to have better control over the iteration process. For example, the while loop allows the user to specify an exit condition if a certain condition is met, mid-way through the loop. Furthermore, while loop allows the user to dynamically change the number of times the loop is executed based on a condition or an expression. This is not possible in for loops as the user needs to specify the exact number of iterations beforehand."
What is the maximum length of a string in Python?,"The maximum length of a string in Python is sys.maxsize, which is typically 2^63 - 1 on a 64-bit machine. This means that the maximum length of a string is 18,446,744,073,709,551,615 characters."
Compute the area of the circle where the radius is 5 inches in Python.,"import math 
  
radius = 5 
area = math.pi * (radius**2) 

print(""The area of the circle is"", area)"
Use the provided knowledgebase to answer the following question: What is the capital of Costa Rica?https://en.wikipedia.org/wiki/Costa_Rica,The capital of Costa Rica is San José.
Use the provided dataset to create a Corpus of English words in Python.https://storage.googleapis.com/download.tensorflow.org/data/grammar_corpus.txt,"f = open('grammar_corpus.txt', 'r')

# Create an empty list to store the corpus
corpus = []

# Loop through the file line by line 
for line in f: 
    # Split the line into words 
    words = line.lower().strip().split()
    
    # Check if the word is an english word 
    if words[1].isalpha(): 
        corpus.append(words[1]) 
 
f.close()
print(corpus)"
Write a Python method to extract only the numeric values from a string.,"def extract_num(string): 
    return [word for word in string.split() if word.isdigit()]"
Design a function using Python to remove all vowels from a string.,"def remove_vowels(string):
    vowels = 'aeiouAEIOU'
    new_string = ''
    for char in string:
        if char not in vowels:
            new_string += char
            
    return new_string"
Create a Kotlin program which prints out all the numbers between 1 and 10.,"fun main() {
    for(i in 1..10) {
        println(i)
    }
}"
Code a function in Python to generate random numbers within a given range.,"import random

def random_num_gen(start, end):
    return random.randint(start, end)"
"Find the length of the longest substring in the given string without repetition.string = ""abcabcbb""",3
"Transform the given array into a object, with the key being the index and the value being the value at the index in the array.arr = [1,2,3,4]","{
  0: 1,
  1: 2,
  2: 3,
  3: 4
}"
Prompt the user to enter a year and output whether it is a leap year or not.,"year = int(input(""Please enter a year: ""))

if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
    print(""It is a leap year."")
else:
    print(""It is not a leap year."")"
"Given an array of words, replace each character with the corresponding number from the English alphabet (e.g. a=1, b=2 ...z=26), and find the computed sum.[""cat"", ""dog""]","def find_sum(words):
    total_sum = 0 
    for word in words: 
        for c in word:
            total_sum += ord(c) - 96
    return total_sum"
"Given an array of integers, write a program to find the number of triplets that satisfy the triangle inequality.","def find_num_triplets(arr):
    arr.sort()
    count = 0
    for i in range(len(arr) - 2):
        for j in range(i + 1, len(arr) - 1):
            for k in range(j + 1, len(arr)):
                if arr[i] + arr[j] > arr[k]:
                    count += 1
    return count"
"Given a matrix, write a program to fill it with zeroes in constant time and space complexity.","def fill_matrix_zeros(matrix):
    n, m = len(matrix), len(matrix[0])
    col0_zero = False
    for i in range(n):
        if matrix[i][0] == 0:
            col0_zero = True
        for j in range(1, m):
            if matrix[i][j] == 0:
                matrix[i][0] = 0
                matrix[0][j] = 0

    for i in range(1, n):
        for j in range(1, m):
            if matrix[i][0] == 0 or matrix[0][j] == 0:
                matrix[i][j] = 0

    if matrix[0][0] == 0:
        for j in range(m):
            matrix[0][j] = 0

    if col0_zero:
        for i in range(n):
            matrix[i][0] = 0"
"Identify which language the following code snippet is written in.#include<bits/stdc++.h>
using namespace std;

int main() 
{ 
    cout << ""Hello, World"";
    return 0; 
}",C++
Create a stand-alone Python script to print the sum of all the divisors of a number.,"def printDivisorSum(num): 
   
    sum = 0
    i = 1
  
    while i <= num / 2: 
  
        if num % i == 0: 
            sum = sum + i 
        i = i + 1
  
    print(""Sum of divisors of "" + str(num) + "" is "" + str(sum)) 

num = 16
printDivisorSum(num)"
"Generate a new voice sample using a given text and speech synthesis model.text = ""Hello, world!""","<nooutput>
Since this task requires speech synthesis software and a model, it cannot be completed by the GPT model."
Categorize the following sentence into parts-of-speech?The cat jumped quickly onto the table,"Determiner (The), Noun (cat), Verb (jumped), Adverb (quickly), Preposition (onto), Determiner (the), Noun (table)."
"Find the variable type for the following statement:name = ""John""",The variable type for the above statement is string.
Identify the endpoint of a given API request.Request: GET https://www.example.com/1,The endpoint of this API request is https://www.example.com/1.
Construct a Python program to print the numbers from 1 to 10 on a single line.,"for i in range(1,11):
  print(i, end="" "")"
"Using MATLAB, calculate the roots of the equation x*x + 5*x - 6.","syms x;
solve(x*x + 5*x - 6);"
Create an assembly language program to sum 30 odd integers.,".model small
.data
        number dw 2,4,6,8,10,12,14,16,18,20
		        ,22,24,26,28,30,32,34,36,38,40
				        ,42,44,46,48,50,52,54,56,58,60
sum dw 0
.code
main proc
                mov ax,@data
                mov ds,ax
 
     lea si,number
		 mov cx,30
	 loop1: mov ax,[si]
	 mov bx,2
	 mul bx
	 add ax,sum
	 mov sum,ax
	 add si,2
	 loop loop1
	 
	 mov ax,sum
	 mov ah,09h
	 int 21h
 
	 mov ax,4c00h
	 int 21h
main endp
end main"
"Design a function that takes a number, n, and returns the n’th Fibonacci number. Remember that the Fibonacci sequence begins with 0, 1, and each subsequent number is the sum of the previous two numbers.","def Fibonacci_number(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci_number(n-1)+Fibonacci_number(n-2)"
"Find the number of times the substring “ab” appears in the given string.text = ""abraacadabrabracabracabracabra""","def count_substring(string, sub_string): 
    count = 0
  
    #Loop over the length of string 
    for i in range(0, len(string)): 
        # If a part of string matches with sub_string 
        #increment count  
        if (string[i:i+ len(sub_string)] ==sub_string): 
            count += 1
  
    return count 

count = count_substring(text, 'ab') 
print(""Number of substring occurrences: "", count)"
Create a function that takes two strings and returns a boolean representing whether or not the strings are anagrams of one another.,"def is_anagram(string1, string2):

    # remove whitespaces
    string1 = string1.replace("" "","""")
    string2 = string2.replace("" "","""")

    # check length
    if len(string1) != len(string2):
        return False

    # create counters
    counter = {}
    for letter in string1:
        if letter in counter :
            counter[letter] += 1
        else:
            counter[letter] = 1
            
    for letter in string2:
        if letter in counter:
            counter[letter] -= 1
        else:
            return False
        
    # Check all values are 0
    for key in counter:
        if counter[key] != 0:
            return False
    
    return True"
Design an algorithm to find the maximum subarray of an array of numbers.,"def max_subarray(arr): 
    max_so_far = 0
    max_ending_here = 0
    for i in range(len(arr)): 
        max_ending_here = max_ending_here + arr[i] 
        if max_ending_here < 0: 
            max_ending_here = 0
        if (max_so_far < max_ending_here): 
            max_so_far = max_ending_here 
    return max_so_far"
"Solve the following problemGiven two strings s and t, find the minimum window in s which will contain all the characters in t.","def minWindow(s, t): 
    # Initialize with None 
    minWindowLength = None
    leftIndex = 0 
          
    # Balance will act as alphabet to store the occurrence of each character in t 
    balance = {}
    for char in t:
        if char not in balance:
            balance[char] = 1
        else:
            balance[char] += 1
              
    # leftIndex and rightIndex act as two poiners to traverse the list
    leftIndex = 0
    rightIndex = 0
    charactersFound = 0
    # Start traversal from left 
    for i in range(len(s)): 
          
        # If character present in t 
        if s[i] in balance: 
              
            # Decrease its counter by 1 
            balance[s[i]] -= 1  
              
            # if the character is found first time 
            if balance[s[i]] == 0: 
                charactersFound += 1
                  
        # If all characters present 
        if charactersFound == len(balance): 
            # Check the right side window 
            while(rightIndex <= i and charactersFound == len(balance)): 
                  
                # remove the left side character 
                if s[leftIndex] in balance: 
                    if balance[s[leftIndex]] == 0: 
                        charactersFound -= 1
  
                    # Increase the counter of that character 
                    balance[s[leftIndex]] += 1
                      
                # Calculate the minimum window
                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: 
                    minWindowLength = i-leftIndex+1
                      
                leftIndex += 1
                  
    return minWindowLength"
Create a sorting algorithm,"def sort(arr):
    n = len(arr)
    
    # Various loops to sort the array 
    for i in range(n): 
        min_idx = i 
        for j in range(i+1, n): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 
    return arr"
Construct an algorithm to fulfill the following purposeFind the two numbers that add up to a given number N.,"def twoSum(N, arr):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == N:
                return (arr[i], arr[j])"
"How would you print a big ""Hello World"" on the console output?",print('
Generate a permutation of a given list of numbers.,"import itertools 
  
def perms(lst): 
  perm = itertools.permutations(lst) 
  for i in list(perm): 
    print(i)"
Generate a unique URL for an online store.,https://online-store.example.com
"Find the output of the following .NET Core code snippet.int[] numbers = {2, 3, 5, 7};

var result = numbers.Where(x => x % 2 == 0).Sum();","The output of the code snippet is 10, as 2 and 6 (the two even numbers in the array) are added together to give 10."
Use conditionals and a for loop to return the sum of all odd numbers up to a given number.,"def sum_odd_nums(n):
    total = 0
    for i in range(1, n+1):
        if i % 2 != 0:
            total += i
    return total"
"Write a function to generate a random permutation of a given array.[1, 2, 3, 4, 5]","import random 
  
def random_permutation(input_list): 
    n = len(input_list) 
    for i in range( n - 1 ):
        j = random.randint(i, n-1)
        input_list[i], input_list[j] = input_list[j], input_list[i] 
    return input_list"
Find the logarithm (base 10) of a number.1000,3.0
"Store a list of elements in a dictionary, making each element the key and itself the value.list = [4, 8, 12, 16]","dictionary = {4:4, 8:8, 12:12, 16:16}"
"Multiply two matrices and return the resulting matrix.Matrix A = [[1, 2], [3, 4]]
Matrix B = [[5, 6], [7, 8]]","result = [[19, 22], [43, 50]]"
"How would you display the below list in descending order?[2, 5, 8, 9, 1]","[9, 8, 5, 2, 1]"
Create a query in MongoDB to search a record by its ID.,"db.collection.find({""_id"": ObjectId(""<id>"")});"
"Generate a hash of a given string using the SHA-256 algorithm in Python.string = ""Hello World""","import hashlib

string = ""Hello World""
result = hashlib.sha256(string.encode()).hexdigest()
print(result)  # output: ""a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e"""
Design a RESTful API that returns customer information.,"GET /customers
Returns a list of customer objects

GET /customers/{id}
Returns customer info with the customer id

POST /customers
Add a new customer

PUT /customers/{id}
Update existing customer info with given customer id

DELETE /customers/{id}
Delete customer with given customer id"
"Convert the following for loop to a recursive solution.for i in range(0, 10):
    print('i: ', i)","def loopRecursion(num): 
  if(num<10): 
    print(""i:"",num) 
    loopRecursion(num+1) 

loopRecursion(0)"
"Given two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.[1, 2, 3, 4], [3, 2, 1, 4]","def find_pair(arr1, arr2):
    sum_arr1 = sum(arr1)
    sum_arr2 = sum(arr2)
    diff = abs(sum_arr1 - sum_arr2)

    for x in arr1:
        for y in arr2:
            if x + y == diff:
                return (x, y)

    return -1"
Write a code that computes the given equation for x.x2 + 3x - 7 = 0,"def compute_equation(x):
  return x**2 + 3*x - 7"
Create a Python program that accepts input from the user and prints out the result for Fibonacci sequence,"def print_fibonacci(n):
  a = 0
  b = 1
  print('Fibonacci sequence:')
  while a < n:
    print(a, end=' ')
    tmp_var = a
    a = b
    b = tmp_var + b

num = int(input(""Enter positive number: ""))
print_fibonacci(num)"
Write an algorithm to check if a number is even or not without using modulus (%) operator,"def is_even(num):
	if num & 1 == 0:
		return True
	else:
		return False"
Derive the formula for calculating the circumference of a circle.,"The formula for calculating the circumference of a circle is C = 2*π*r, where r is the radius of the circle."
"Output the maximum element of a listlist = [1, 23, 12, 38, 56, 9]",max_element = 56
"Debug the following code by finding the syntax error.def calculate_value(nums):
    result = 0
    for num in nums
        result += num
    return result","def calculate_value(nums):
    result = 0
    for num in nums: # missing colon
        result += num
    return result"
"Create a function that takes in an array and displays all of the elements in the array in reverse order.list_elements = [15,19,20]","def reverse_list_elements(list_elements):
    list_elements.reverse()
    for element in list_elements:
        print(element)"
"Output the items in a list with the length less than or equal to the given number.list_items = [1, 2, 3, 4, 5]
given_number = 3","output_items = [item for item in list_items if len(str(item)) <= given_number]
print(output_items)

# Output
[1, 2, 3]"
"Validate the email address using a regular expression.email = ""example@gmail.com""","import re

# Validate the email address using the regex
email_pattern = re.compile(r'\S+@\S+\.\S+')
email_valid = re.match(email_pattern, email)

if email_valid:
    print(""Valid Email Address"")
else:
    print(""Invalid Email Address"")

# Output
Valid Email Address"
"What number is missing in the following sequence?2, 4, 8, 16, __",32
"What is the index of the item which is given below?my_list = [1, 2, 3, 4, 5]
item_to_find = 3","index_of_item = my_list.index(item_to_find)

# Output
2"
"Design a program that automatically refactors a python code to improve readability and reduce complexity.def myfunc():
x = 1
y = 5
return x + y","def myfunc():
    x = 1
    y = 5
    return x + y"
"Beatify the following code by formatting it properly with adequate indentation and formatting.def func1(): print(""this is function 1"") print(""this is function 2"")","def func1():
    print(""this is function 1"") 
    print(""this is function 2"")"
"Develop a function in python to check if a given word can be formed with the given set of letters.Set of letters: 'abeos'
Word: 'seabed'","def can_form_word(set_letters, word):
    flag = True
    for letter in word:
        if letter not in set_letters:
            flag = False
            break
    return flag"
Extract the first name of the user from the below format.Full Name- Abraham Lincoln,Abraham
"Develop a code in python to list the elements present in a given dictionary.dictionary = {
    ""name"": ""John"",
    ""age"": 20,
    ""location"": ""London""
}","def list_elements(dict):
    for item in dict:
        print(item, "":"", dict[item])

list_elements(dictionary)

# Output:
# name : John
# age : 20
# location : London"
Replace every occurrence of 'a' with 'b' in the given string.cave,cbve
"Modify the previous code so that it is now optimized for time complexity?def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)","def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        i = 1
        for j in range(1, len(arr)):
            if arr[j] < pivot:
                arr[i], arr[j] = arr[j], arr[i]
                i = i + 1
        arr[0], arr[i-1] = arr[i-1], arr[0]
        left = quick_sort(arr[:i-1])
        right = quick_sort(arr[i:])
        return left + [arr[i-1]] + right"
"Print the even numbers in a given array?array = [2, 3, 4, 5, 6, 7, 8, 9];","let array = [2, 3, 4, 5, 6, 7, 8, 9];

for (let i=0; i<array.length; i++) {
  if (array[i] % 2 === 0) {
    console.log(array[i]);
  }
}"
Create a list of square numbers between 0 and 9,"square_numbers = []

for i in range(10):
    square_numbers.append(i * i)

print(square_numbers) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
Write a script to normalize each word in a given sentence by converting it into lowercase.The Quick Brown Fox Jumps Over The Lazy Dog.,"sentence = ""The Quick Brown Fox Jumps Over The Lazy Dog""
sentence = sentence.lower().split()
sentence = ' '.join(sentence)
print(sentence)"
"Write a Tensorflow model to classify a given X and Y as either positive or negative.X = [1, 1, 2, 4]
Y = [3, 1, 0, 4]","import tensorflow as tf

model = tf.keras.Sequential([
  tf.keras.layers.Dense(8, input_dim=2, activation=""relu""), 
  tf.keras.layers.Dense(1, activation=""sigmoid"")
])

model.compile(loss='binary_crossentropy',
              optimizer=tf.keras.optimizers.Adam(0.01),
              metrics=['accuracy'])

X_list = [X, Y] 
y = [1, 0]

model.fit(X_list, y, batch_size=4, epochs=4)"
"Write code to create a bar chart comparing the performance of two different algorithms.Algorithm 1: [90, 91, 95, 94, 99]
Algorithm 2: [83, 89, 95, 91, 99]","import matplotlib.pyplot as plt 
  
# Data to plot 
algorithm1 = [90, 91, 95, 94, 99]
algorithm2 = [83, 89, 95, 91, 99]
  
# plotting a bar chart 
plt.bar([1, 2, 3, 4, 5], algorithm1, label = ""Algorithm1"", width = 0.25, color = 'b') 
plt.bar([1.25, 2.25, 3.25, 4.25, 5.25], algorithm2, 
        label = ""Algorithm2"", width = 0.25, color = 'r') 
  
# Naming X-axes 
plt.title('Performance Comparison') 
plt.xlabel('Runs') 
plt.ylabel('Accuracy %') 
plt.xticks([1.125, 2.125, 3.125, 4.125, 5.125], ['1', '2', '3', '4', '5']) 
  
# Show the legend 
plt.legend() 
  
# Function to show the plot 
plt.show()"
Write an Objective-C statement to create an empty array to hold names.,NSMutableArray *names = [NSMutableArray array];
Design an efficient algorithm to search for an item in an array.,"One efficient algorithm to search for an item in an array is the binary search algorithm. The binary search algorithm works by dividing the array into two parts and then searching through the divided parts in logarithmic time. The algorithm starts by comparing the item to be searched with the middle element of the array. If the item is smaller than the middle element, then the algorithm searches the first part of the array. If the item is larger than the middle element, then the algorithm searches the second part of the array. The process is then repeated until the item is found or the algorithm reaches the end of the array."
Create a function in Python which takes a string and an integer n as input and returns a string with the first n characters of the given string.,"def get_first_n_chars(string, n):
    return string[:n]"
Identify the most efficient algorithm to find the maximum element in an array.,The most efficient algorithm to find the maximum element in an array is the Linear Search algorithm. This algorithm works by looping through the array and comparing each element to find the maximum element. This algorithm takes O(n) time and requires no additional space.
Write a Python program to reverse each word of a given sentence.This is a test,"def reverse_words(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)

print(reverse_words(""This is a test"")) # Output: sihT si a tset"
How would you verify that a given string is a valid email address?,"To verify that a given string is a valid email address, you should use a regular expression. A regular expression is a sequence of characters which can be used to check if the string matches a predefined pattern. The pattern for a valid email address should ensure that it contains the symbol ""@"" and at least one period (.) in the domain name."
"Create a function in Python which takes an integer n and an unsorted list of numbers as input and returns the nth smallest number in the list.[5, 8, 1, 9, 4], 3","def nth_smallest(nums, n):
    sorted_nums = sorted(nums)
    return sorted_nums[n-1]

print(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5"
"Sort the following list of strings.list = [""apple"", ""mango"", ""banana"", ""pear""]","list = [""apple"", ""banana"", ""mango"", ""pear""]"
"Create a program that accepts two strings as input, and then check to see if the two strings are an anagram of each other.word1 = ‘earth’
word2 = ‘heart’","def check_anagrams(word1, word2):
    return sorted(word1) == sorted(word2)
  
word1 = 'earth'
word2 = 'heart'
print(check_anagrams(word1, word2))"
Generate a correct for loop that prints every other number between 0 and 10.,"for num in range(0, 11, 2):
    print(num)"
"Create a function that takes a dictionary and an integer as parameters, and returns the value of the dictionary corresponding to the given integer.dictionary = {1: ""Monday"", 2: ""Tuesday"", 3: ""Wednesday""}
integer = 2","def get_value(dictionary, integer):
    return dictionary[integer]

dictionary = {1: ""Monday"", 2: ""Tuesday"", 3: ""Wednesday""}
integer = 2
print(get_value(dictionary, integer))"
"Compute the area and perimeter of a triangleBase: 5 cm
Height: 10 cm","Area = 25 cm^2
Perimeter = 15.59 cm"
"Using regex, convert a string of dates from the format 'dd/mm/yyyy' to 'mm/dd/yyyy'String ""05/06/2019, 10/08/2020""","String ""06/05/2019, 08/10/2020"""
"Come up with a python code to find the mean of a list of numbers.nums = [78, 79, 79, 79, 79, 80]","total = 0
for num in nums:
    total += num
mean = total/len(nums)
print(mean)"
Edit the following piece of code to form a valid sentence.This poet is one of America's most loved poets.,This poet is one of America's most beloved poets.
Train a linear regression model on a dataset containing m columns and n rows.,"model = LinearRegression()
model.fit(X, y)"
"For a given network layer, compute the total number of weights.Number of input neurons: 4, Number of output neurons: 3",The total number of weights in the network layer is 4 * 3 = 12.
"Classify the following statement as true or false.

The square root of 4 is 2.",True. The square root of 4 is 2.
"Implement a function which takes an array and returns the maximum number.[2, 4, 8, 6]","def max_num(arr):
    n = arr[0]
    for i in range(len(arr)):
        if arr[i] > n:
            n = arr[i]
    return n

max_num([2, 4, 8, 6]) # Output: 8"
"Determine the output of the following code.

for i in range(2, 8):
    print(i * i)","4
9
16
25
36
49"
"How many times will the following loop be executed?

for i in range(5):
    print('Hello')","The loop will be executed 5 times. The range function will generate numbers from 0 to 4 (inclusive). Therefore, the loop will be executed 5 times with 'Hello' being printed each time."
"What's the average value of the following list of numbers?

[2, 3, 6, 4]","The average value of [2, 3, 6, 4] is 3.75. This can be calculated by summing up all of the numbers, i.e. 2 + 3 + 6 + 4 = 15, and then dividing by the number of elements in the list, i.e. 4. Therefore, the average value is 15 / 4 = 3.75."
"Develop a Python function to append a number with zeros to a given string up to a maximum number of characters.string = ""some_string"", max_len = 10","def append_num_with_zeros(string, max_len):
    """"""Append a number with zeros to a given string up to a maximum number of characters.""""""
    # Convert string to list
    ls = list(string)
    # Calculate number of zeros required to append
    num_zeros = max_len - len(string)
    # Append zeros
    for i in range(num_zeros):
        ls.append('0')
    # Convert list back to string
    return ''.join(ls)"
"Improve the following code snippet to make it more efficient and organized.def printElements(list):
  for element in list:
    print(element)","def printElements(list):
    """"""Print all elements of a given list.""""""
    # Check if list is empty
    if not list:
        print(""List is empty"")
    # Loop through the list
    else:
        for element in list:
            print(element)"
Write an AJAX query to get the data from the given URL.url = https://www.arecipe.com/data,"$.ajax({
    url: url,
    type: 'GET',
    success: function(data) {
        console.log(data);
    }
});"
"Remove all duplicate words from the given sentence.sentence = ""All all are are we we here here to to help help.""",sentence = 'All are we here to help.'
Name the commonly used data structure for implementing stacks.,The commonly used data structure for implementing stacks is a linked list.
Create a function to calculate the sum of numbers from a given list in Python.,"def sum_list(list):
    """"""Calculate the sum of numbers from a given list""""""
    # Initialize sum
    s = 0
    # Sum the list
    for number in list:
        s += number
    # Return the result
    return s"
Create a code snippet to print the star pattern below in Python.,"# Print the pattern 
rows = 5
for i in range(0, rows): 
    for j in range(0, i + 1): 
        print(""*"", end=' ') 
    print(""\r"")"
"Create a Python function that prints all the values in a dictionary.Dictionary:  { ""a"": 1, ""b"": 2, ""c"": 3 }","def printDictValues(dict):
    for key, value in dict.items():
        print(value)

printDictValues({""a"": 1, ""b"": 2, ""c"": 3})"
Suggest a name for a new string variable.,"The name for the new string variable could be ""nameString""."
Write a line of code to input 10 numbers from the user.,"a = list(map(int, input(""Enter 10 numbers: "").split()))"
"Create a function to compare two strings and output their similarity score.string_1 = ""python""
string_2 = ""coding""","def compare_strings(string_1, string_2):
    similarity_score = 0
    n = min(len(string_1), len(string_2))
    for i in range(n): 
        if string_1[i] == string_2[i]: 
            similarity_score += 1
    return similarity_score"
"Output the total number of elements in a given list.list_numbers = [1, 2, 3, 4, 5]","def count_list_elements(list_numbers):
    count = 0
    for element in list_numbers:
        count += 1
    return count"
"Create a function to search for a given element in a list and output its index.list_numbers = [1, 2, 3, 4, 5]","def search_list(list_numbers, element):
    for i in range(len(list_numbers)):
        if list_numbers[i] == element:
            return i"
Construct a regular expression pattern in Python that matches all emails.,"pattern = r""[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,63}$"""
Write a function in Go language that will return the number of elements in a slice.,"func len(s []int) int {
	return len(s)
}"
"Create a class in TypeScript that contains a method that takes two numbers, adds them, and returns the result.","class Math {
  add(n1: number, n2: number): number {
    return n1 + n2;
  }
}"
"Edit this code to sort a list of strings alphabeticallymylist = [""Eggs"", ""Cheese"", ""Milk""]",mylist.sort()
"Write a code snippets in Python to print the contents of a dictionary.{""key1"": ""value1"", ""key2"": ""value2""}","for key, value in dict.items():
   print(""Key: {}, Value: {}"".format(key, value))"
Write a code to generate n terms of the Fibonacci sequence.,"def get_fibonacci(n):
    """""" Generates n terms of the Fibonacci sequence
    
    Args:
        n (int): The number of Fibonacci terms to generate
        
    Returns:
        list: A list of the first n Fibonacci numbers
    """"""
    # Initialize first two Fibonacci numbers
    a = 0
    b = 1

    # Initialize the Fibonacci Sequence list
    fibonacci_sequence = []
    fibonacci_sequence.append(a)
    fibonacci_sequence.append(b)

    # Generate the Fibonacci Sequence
    while len(fibonacci_sequence) < n:
        c = a + b
        fibonacci_sequence.append(c)
        a = b
        b = c

    return fibonacci_sequence"
Print the nth element from a spin lock sequence using only O(1) space.,"def get_spinlock_element(n):
    """""" Prints the nth element from a spin lock sequence using only O(1) space
    
    Args:
        n (int): The number of the element to be retrieved
        
    Returns:
        int: The nth element
    """"""
    # Initialize the step size
    step_size = 343
    
    # Find the previous two elements in the iteration
    first = 0
    second = 0
    
    # Initialize the index of the element to be retrieved
    index = 0
    
    # Iterate over the elements until we reach the desired element
    while index < n:
        # Generate the next element in the sequence
        element = first + second + 1
        
        # Update the previous two elements
        first, second = second, element
        
        # Move the index
        index += step_size
    
    # Return the element at the nth position
    return element"
Merge two sorted linked lists and return it as a new list.,"def merge_sorted_lists(list1, list2):
    """""" Merges two sorted linked lists and returns it as a new list
    
    Args:
        list1 (list): The first sorted linked list 
        list2 (list): The second sorted linked list
        
    Returns:
        list: The merged sorted linked list
    """"""
    # Initialize the merged list
    merged_list = []
    
    # Initialize the pointers
    i = 0
    j = 0

    # Iterate over the two lists
    while i < len(list1) and j < len(list2):
        # Add the element with the smaller value to the merged list
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    
    # Add the remaining elements to the merged list
    while i < len(list1):
        merged_list.append(list1[i])
        i += 1
    
    while j < len(list2):
        merged_list.append(list2[j])
        j += 1
    
    return merged_list"
Construct a query to retrieve the names and ages of all customers,"SELECT name, age FROM customers;"
Construct a DB search query to find a customer by nameName of the customer: John,"SELECT * FROM customers WHERE name=""John"";"
Construct a regex pattern to match a valid IP address,^(((25[0–5]|2[0-4][0–9]|[01]?[0-9][0–9]?)\.){3}(25[0–5]|2[0-4][0–9]|[01]?[0–9][0–9]?))$
Write an algorithm to find the area of a triangle,"Algorithm:

1. Take the input for the sides of the triangle.
2. Calculate the semiperimeter of the triangle using the formula (a+b+c)/2
3. Calculate the area of the triangle using the formula:
    area = √(s(s-a)(s-b)(s-c))"
Create a neural network to classify types of dogs,"import keras
import numpy as np
from keras.layers import Dense
from keras.models import Sequential

# Building a Sequential model
model = Sequential()
# Input layer with 2 neurons
model.add(Dense(2, input_dim=64, activation='relu'))
# Hidden layer with 3 neurons
model.add(Dense(3, activation='relu'))
# Output layer with 15 neurons (15 classes)
model.add(Dense(15, activation='softmax'))

# Compiling and training the model
model.compile(loss='mean_squared_error',
              optimizer='adam',
              metrics=['accuracy'])
model.fit(training_samples, labels, epochs=100)"
Develop a program to encrypt a text,"#include <stdio.h>
#include <string.h>

// Encode a string using Ceasar cipher
string ceasar_encode(string s, int k)
{
    // Declare a variable to store the encoded string
    string encoded_str = """";

    // Loop through the string and encode each character
    for (int i=0; i<strlen(s); i++)
    {
        // Shift each character with the given key
        char enc = ((s[i]-'a' + k) % 26) + 'a';
        encoded_str += enc;
    }
    return encoded_str;
}

int main()
{
 before = ""abcdefghijklmnopqrstuvwxyz"";
 after = ceasar_encode(before, 5);
 printf(""%s\n"", after);

 return 0;
}

// Output: fghijklmnopqrstuvwxyzabcde"
"How do you compare two numbers, num1 and num2, in python?","We can compare two numbers, num1 and num2, in Python using the comparison operators. These are the equality operators (== and !=), the relational operators (> and <) and the logical operators (and, or, not). For example, ``num1 == num2`` checks if two numbers are equal, ``num1 > num2`` checks if num1 is greater than num2, and ``num1 < num2`` checks if num1 is less than num2. We can also use logical operators like ``num1 > num2 and num2 < num3``, which checks if num1 is greater than num2 and num2 is less than num3."
"Read the input and print the output in the specified format.Name: John
Age: 23","Hello, my name is John and I am 23 years old."
Suggest a code to execute when a condition is met.if volume > 10:,"if volume > 10:
    # Do something
    print(""Volume is greater than 10"")"
Suggest a code to get the smallest and largest number in an unsorted list.,"def get_smallest_largest(arr):
    """"""
    Function to return the smallest and largest numbers in a list
    Parameters:
        arr: An unsorted list of numbers
    Returns:
        A tuple containing the smallest and largest numbers in the list
    """"""
    smallest = arr[0]
    largest = arr[0]

    for elem in arr:
        if elem < smallest:
            smallest = elem
        if elem > largest:
            largest = elem
    
    return (smallest, largest)"
Read the input and output the reverse of each word.List of words: Apple Banana Car,elppA ananab raC
"For the following function, suggest a test case that can be used to check the correctness of the function.def find_mode(arr):
    """"""
    Function to find the mode of a list
    Parameters:
        arr: The list of values
    Returns:
        The mode of the list
    """"""","A test case that can be used to check the correctness of the function is to pass the list [1, 1, 2, 3, 3, 3] to the function. The function should return 3 as the mode, which is the element that appears most frequently in the list."
Suggest a code to create an empty list.,mylist = []  # Create an empty list
What is the meaning of the modulo operator in python?,"In Python, the modulo operator (also known as the “remainder” or “modulus” operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression “7 % 3” will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is “a % b”, where a and b are numbers. The result of this operation is the remainder after a is divided by b."
"Suggest a code to add the values of all odd numbers in an array.arr = [1, 2, 3, 4, 5, 6]","total = 0
for num in arr:
    if num % 2 == 1:  # Check if num is odd
        total += num"
"Create an object with the following properties, `name` of type `string`, `age` of type `number`, and `pet` of type `boolean`.","let exampleObject = {
    name: 'Bob',
    age: 26,
    pet: true
};"
"Print the symmetric difference of two sets.set1 = {1, 2, 3, 4, 5}, set2 = {1, 3, 5, 7, 9}","{2, 4, 7, 9}"
"Replace NaN values in the given dataframe with a string.Stored in the form of a Pandas dataframe.
0    1    2    3
a    NaN  b    NaN
4    NaN  5    6","Stored in the form of a Pandas dataframe.
0    1    2    3
a    'NA'  b   'NA'
4    'NA'  5    6"
"Compute the mean of all the values in a column of a given dataframe.Stored in the form of a Pandas dataframe.
0    1    2   
a    1    b   
4    4    5",3.0
"Construct a boolean check to detect if a given string contains the word ""hello"".","def contains_hello(input_string):
    return ""hello"" in input_string"
Develop an algorithm that checks for balanced parentheses in a given string.,"def is_balanced(input_string):
    stack = []
    for char in input_string:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    return len(stack) == 0"
Estimate how many words are present in the given text.The world of technology is rapidly evolving each day.,10
"Construct a program to filter the list of names based on the given condition.names = [""Ada"", ""Bob"", ""Chris"", ""David"", ""Elsa"", ""Frank""]
condition: length greater than 4","[""Ada"", ""Chris"", ""David"", ""Elsa"", ""Frank""]"
"Estimate the area of a shape using data from the given Pandas dataframe.Stored in the form of a Pandas dataframe.
0    1    2   
a    5    b   
4    4    5",
Design a machine learning model to classify an article as either a sports article or a food article.,"The machine learning model can be designed as a sequence of layers built with Keras, followed by a dense layer with two units – one for sports and one for food, and a softmax activation function to achieve the final output. We can feed the model with a dataset consisting of article texts labeled as 'sports' or 'food'. Then, the model can be trained using gradient descent. After training is complete, the model can be used to classify new articles as either 'sports' or 'food' articles."
Design a neural network model to detect the sentiment of a given sentence.,"The designed neural network model can be implemented with an embedding layer followed by a convolutional layer and then a global max-pooling layer. The output of the pooling layer can be passed through a fully connected layer with a sigmoid activation function to achieve the final output of the model. We can feed the model with a dataset of sentences labeled as either 'positive' or 'negative'. The model can then be trained using gradient descent. After training is complete, the model can be used to detect the sentiment of new sentences as either 'positive' or 'negative'."
Design a data structure to store a list of courses with their corresponding details.,"The data structure to store a list of courses with their corresponding details can be a Python dictionary. The keys can be the course codes and the corresponding value can be a dictionary with the details of the course such as the name, number of credits, and description.
Example: 

course_list = { 
    'MATH101': { 
        'name': 'Calculus', 
        'credits': 4, 
        'description': 'A study of calculus.' 
    }, 
    'PHYS101': { 
        'name': 'Physics', 
        'credits': 5, 
        'description': 'An introduction to physics.' 
    } 
}"
"Write a code snippet to compute the average of a set of integers.[3, 7, 11, 15]","def avg(arr): 
    sum = 0 
    for num in arr:
        sum += num 
    return sum/len(arr)  
  
numbers = [3, 7, 11, 15]
average = avg(numbers) 
print(""Average of the numbers:"",average)  // Output: 9.5"
"Read the given Python code and generate the output for the following input.my_list = range(1, 11)","my_list = range(1, 11)
output = 0
for i in my_list:
 output += i
print(output) #55"
"Write a Python program to count how many times a given element appears in the list.my_list = [1, 2, 5, 4, 2, 1, 5]","my_list = [1, 2, 5, 4, 2, 1, 5]
count = 0
for i in my_list:
  if i == 5:
    count += 1
print(count) #2"
"Edit the following program to add 1 to each element of the list and print the result.my_list = [2, 5, 7, 9]","my_list = [2, 5, 7, 9]
for (let i = 0; i < my_list.length; i++) {
    my_list[i] = my_list[i] + 1;
}
console.log(my_list); // [3, 6, 8, 10]"
"Edit the following code to take in a list of numbers and output the sum of all numbers in the list.my_list = [5, 10, 15, 20]","my_list = [5, 10, 15, 20]
total = 0
for num in my_list:
    total += num
print(total) #50"
"You are given a list of names. Create a list whose elements are the length of each name in the original list.names = [""Max"", ""John"", ""Cindy"", ""Sarah""]","lens = []
for name in names:
    lens.append(len(name))"
"Read a sentence from the user, and then reverse its words in place.","sentence = input(""Please enter a sentence: "")
words = sentence.split()
words.reverse()
sentence = "" "".join(words)
print(sentence)"
"Create two functions to check if a given list contains a specific element.list = [4, 1, 6, 9, 8]
item = 8","def check_list(lst, item):
    return item in lst

def check_list_version2(lst, item):
    for x in lst:
        if x == item: 
            return True
    return False"
"Given a list of numbers, sort them from smallest to largest.lst = [3, 5, 2, 6, 8, 1]",lst.sort()
"Unpack the elements in the given list of tuples and assign them to individual variables.lst = [(""Max"", ""Smith""), (""John"", ""Doe""), (""Cindy"", ""Wilson"")]","for (name1, name2) in lst:
    first_name = name1
    last_name = name2"
"Given two strings, concatenate them together and assign the result to a variable.str1 = ""Hello""
str2 = ""World""",res = str1 + str2
"Convert the following list of strings to integers and calculate their total.lst = [""4"", ""5"", ""2"", ""6"", ""8"", ""1""]","total = 0
for s in lst:
    total += int(s)"
"Modify the following code to print the keys of a dictionary.d = {'a':1, 'b':2, 'c':3}","d = {'a':1, 'b':2, 'c':3}

for key in d:
    print(key)"
Create an algorithm for finding the least common multiple of two numbers.,"One algorithm to find the least common multiple of two numbers is as follows:

Step 1: Find the greatest common divisor (GCD) of the two numbers.
Step 2: Divide the product of the two numbers by the GCD to find the least common multiple (LCM).

The GCD of two numbers can be found using the Euclidean algorithm, which works by continually dividing the larger number by the smaller number until they are equal. The GCD is then the smaller number."
Replace the content of the variable ``x`` with a list of numbers.x = <noinput>,"x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Create a for loop to output the square roots of the numbers between 0 and 10 using the math library.,"import math

for i in range(0,11):
    print(math.sqrt(i))"
Construct a helper function that prints the provided string twice.,"def print_twice(string):
    print(string)
    print(string)"
Form an if-else condition that prints “This is an even number” if a number is even and “This is an odd number” if the number is oddnumber = 5,"if (number % 2 == 0): 
    print(""This is an even number"") 
else: 
    print(""This is an odd number"")"
Construct a loop that prints the characters of the given string in reverse order.string = 'Hello World',"for i in range(len(string)-1, -1, -1):  
    print(string[i], end="""")"
"Make a dictionary that contains the number of characters in each word from this list.list = ['apple', 'banana', 'cherry']","list_dict = { 'apple': 5, 'banana': 6, 'cherry': 6 }"
Suggest two ways to loop through a python dictionary,"1. Using for loop: 

for key, value in dict.items(): 
    # Do something with key and value

2. Using while loop:

keys = list(dict.keys()) 
i = 0
while i < len(keys):
    key = keys[i] 
    value = dict[key]
    # Do something with key and value
    i += 1"
"Edit this line of code to make it work according to our requirements.print(""Hello"",[1,2,3],sep='|')","print(""Hello"",""|"".join([str(x) for x in [1,2,3]]))"
Write an assembly code to perform the task of incrementing a memory block by 8.,"MOV AL, 8
MOV CX, Size
CLD

LOOP: LODSW
ADD AL, 8
STOSW
LOOP LOOP"
"Identify the mistakes in the below code.def add_two_numbers(x, y):
  a = x + y
  return a","The given code does not have any mistakes. All the syntax is correct and the code will perform its intended operation. The indentation of the code is also correct. However, it could be improved by adding descriptive variable and function names, adding comments to explain the code's purpose and by making sure that the code follows the established coding standards."
Generate a Python Fibonacci sequence of length nn = 7,"def fibonacci_sequence(n): 
    nums = []
    a, b = 0,1
    for i in range(n): 
        nums.append(a)
        a, b = b, a + b 
    return nums

print(fibonacci_sequence(7))"
Spin up a container for an application with Docker-ComposeWeb App Image: my_web_app:v1,"version: '3'

services:
  web_app:
    image: my_web_app:v1
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure"
Create a Go program to print out the cube of a given integer.Number: 5,"package main  
import ""fmt""  
  
func main() {  
    num := 5 
    fmt.Println(""Cube of a given number is: "", num*num*num)  
}"
Summarize the features of the Python pandas library.,"Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data."
Write a python program to create a class called cube.,"class Cube:
    def __init__(self, length, width, height):
        self.length = length
        self.width = width
        self.height = height

    def calculate_volume(self):
        return self.length * self.width * self.height"
"Write a code to find the maximum value in a numeric array using recursion.array = [1, -2, 3, -4, 5]","def find_max(arr): 
  #base case 
  if len(arr) == 1: 
      return arr[0] 
  else: 
      max_n = find_max(arr[1:]) 
      #compare the maximum element with the first element of the array 
      if arr[0] > max_n: 
          return arr[0] 
      else: 
          return max_n 
  
# Print maximum value in the array 
print(find_max(array)) 

#output 
5"
Create a simple calculator program in Python.,"def add(num1, num2): 
  return num1 + num2 

def subtract(num1, num2): 
  return num1 - num2 

def multiply(num1, num2): 
  return num1 * num2 

def divide(num1, num2): 
  return num1 / num2 

# Infinite loop until user chooses to exit 
while True: 
    print(""Select operation:"") 
    print(""1. Add"") 
    print(""2. Subtract"") 
    print(""3. Multiply"") 
    print(""4. Divide"")
    print(""5. Exit"") 
    choice = input(""Enter choice (1/2/3/4):"") 
  
    # Check if choice is one of the four options 
    if choice in ('1', '2', '3', '4', '5'): 
        num1 = float(input(""Enter first number: "")) 
        num2 = float(input(""Enter second number: "")) 
  
        if choice == '1': 
            print(num1, ""+"", num2, ""="", add(num1, num2)) 

        elif choice == '2': 
            print(num1, ""-"", num2, ""="", subtract(num1, num2)) 
  
        elif choice == '3': 
            print(num1, ""*"", num2, ""="", multiply(num1, num2)) 

        elif choice == '4': 
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        elif choice == '5':
            break
        else: 
            print(""Invalid Input"") 
    else: 
        print(""Invalid Input"")"
Create a regular expression to match all numbers of the form 1xx-xxx-xxxx.,"Regex pattern to match numbers in the given form: 
pattern = r'1\d{2}-\d{3}-\d{4}'"
"Write a loop that iterates over the characters in a string, and if the character is an 'o', print the character.""Hello World""","for char in ""Hello World"":
    if char == 'o':
        print(char)"
Construct a decision tree to classify a fruit as mango or apple based on its color and texture.,"Decision Tree:

Root Node:  Is it a mango?

Yes: Output = Mango 
No:
  Left Node: Is it yellow?
     Yes: Output = Mango
     No:
        Left Node: Is it green?
           Yes: Output = Apple
           No: Output = Unknown 
  Right Node: Is it smooth?
     Yes: Output = Apple
     No: Output = Unknown"
Write regular expression for the following string: abc123,^[a-zA-Z]+[0-9]{3}$
List the various sorting algorithms used in computer programming.,"The various sorting algorithms used in computer programming include: bubble sort, insertion sort, selection sort, merge sort, quick sort, heap sort, shell sort, radix sort, and counting sort."
Construct a switch statement to check if a month name is valid.,"// switch statement to check if a month name is valid 
switch (month) { 
   case ""January"": 
   case ""February"": 
   case ""March"": 
   case ""April"": 
   case ""May"": 
   case ""June"": 
   case ""July"": 
   case ""August"": 
   case ""September"": 
   case ""October"": 
   case ""November"": 
   case ""December"":  
      System.out.println(""Valid Month""); 
      break; 
   default: 
      System.out.println(""Invalid Month""); 
      break; 
}"
Create a Spring boot program to find the area of a triangle.,"import org.springframework.boot.autoconfigure.SpringBootApplication; 

@SpringBootApplication 
public class App 
{ 
    // Function to calculate the area of triangle 
    public static double calculateArea(int a, int b, int c) 
    { 
        double s = (a + b + c) / 2; 
        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c)); 
        return area; 
    } 
  
    public static void main( String[] args ) 
    { 
        int a = 3; 
        int b = 4; 
        int c = 5; 
        System.out.println(""The area of the triangle is: "" + calculateArea(a, b, c)); 
    } 
}"
"for the given array, output true if the array does not contain duplicates,output false if it contains any.arr = [1, 3, 5, 6, 1]",false
Create a function to decrypt an encrypted string.,"def decrypt(enc_string):
    s = 0
    decrypted = ''
 
    for i in range(len(enc_string)):
        s += ord(enc_string[i])
        decrypted += chr(s)
 
    return decrypted"
"Given two sorted arrays, find elements that exist in both arrays.arr1 = [1, 2, 5, 8, 9, 10] 
arr2 = [2, 5, 6, 9]","common_elements = [2, 5, 9]"
Use a random number generator to generate random numbers between 1 and 10.,"import random

def random_numbers():
    for _ in range(10):
        num = random.randint(1, 10)
        print(num)

random_numbers()"
"Modify this string in such a way that it should start with ""Hello "" and must end with "" World"".str = ""World, say hello""","str = ""Hello World"""
"Recalculate this code block with the new input given and provide the new output.a = '1'
b = 2
answer = int(a) + int(b)

New input:
a = 5
b = 3",answer = 8
Write code to create an object with the key which will be incremented on every call of the code.,"let count = 0;
const keyObject = () => {
    let newObj = {[`key_${count}`]: count};
    count++;
    return newObj;
}"
Name a popular library used to break down text into basic meaningful parts.,NLTK (Natural Language Toolkit) is a popular library used for text processing and breaking it down into basic meaningful parts. It is a platform for building Python programs to work with human language data.
"Re-write this algorithm in pseudo-code.def checkEven(number): 
	if(number % 2 == 0): 
		return True
	else: 
		return False","function checkEven(number)
	if number modulo 2 = 0
		return true
	else
		return false
end function"
"Print out the length of each string in the list.list_of_strings = ['hello', 'world', 'foobar']","list_of_strings = ['hello', 'world', 'foobar']

for string in list_of_strings:
    print(len(string))"
"Create a new list of elements, multiplied by 10.nums = [1, 2, 3, 4]","nums = [1, 2, 3, 4]

new_nums = [num*10 for num in nums]
print(new_nums)"
"Generate a new array and store only elements that are greater than 5.arr = [3, 9, 8, 1, 6, 4]","arr = [3, 9, 8, 1, 6, 4]

new_arr = [num for num in arr if num > 5]
print(new_arr)"
"Swap the elements at index 2 and 4.arr = [1, 3, 5, 6, 8]","arr = [1, 3, 5, 6, 8]

arr[2], arr[4] = arr[4], arr[2]
print(arr)"
"Concatenate the elements of the list into a string.list_of_strings = ['I', 'am', 'a', 'string']","list_of_strings = ['I', 'am', 'a', 'string']

concat = ' '.join(list_of_strings)
print(concat)"
"Extract all the words that begin with 's' from the given list.list_of_strings = ['stack', 'super', 'stone', 'sit']","list_of_strings = ['stack', 'super', 'stone', 'sit']

words_start_s = [word for word in list_of_strings if word.startswith('s')]
print(words_start_s)"
"Reverse a given array's elements and print the resulting array.arr = [1, 2, 3, 4, 5]","arr = [1, 2, 3, 4, 5]

arr.reverse()
print(arr)"
"Create a new array from the given array by replacing all the odd numbers with 0.arr = [3, 5, 7, 9, 1]","arr = [3, 5, 7, 9, 1]

new_arr = [num if num % 2 == 0 else 0 for num in arr]
print(new_arr)"
"Determine the time complexity of the code given below as a function of n.def foo(A, n): 
    if n == 1: 
        return A[0] 
    else: 
        return foo(A, n - 1) + A[n - 1]",O(n)
Create a function to add three numbers together,"def add_three(n1, n2, n3): 
  return n1 + n2 + n3"
"Create a function that prints a provided message 3 timesmessage = ""Hello World!""","def print_message(message): 
 for i in range(3): 
  print(message)"
What data structure is most appropriate for fast searches?,A hash table is the most appropriate data structure for fast searches.
"Fix this indentation error in the following Python codedef double(number):
 return number * 2","def double(number):
    return number * 2"
"Create code that given two linked lists, determine if they intersectTwo linked lists: list1 = [3, 7, 8, 10] and list2 = [99, 1, 8, 10]","def are_lists_intersect(list1, list2): 
  
    # Set pointer to head node 
    temp1 = list1 
    temp2 = list2 
  
    # Get lengths 
    list1_length = 0
    list2_length = 0
  
    # Count length for each list 
    while (temp1): 
        list1_length += 1
        temp1 = temp1.next
  
    while (temp2): 
        list2_length += 1
        temp2 = temp2.next
  
    # Store longer list in tem1 
    if list1_length > list2_length: 
        temp1 = list1 
        temp2 = list2 
    else: 
        temp1 = list2 
        temp2 = list1 
  
    # Take difference to get number of nodes to 
    # traverse for longer list 
    diff = abs(list1_length - list2_length) 
  
    # Move pointer for longer list to  
    # difference node to get same position 
    # node in both list 
    for i in range(diff): 
        temp1 = temp1.next
  
    # Move all pointer together till they meet 
    while(temp1 and temp2): 
        if (temp1 == temp2): 
            return True
  
        temp1 = temp1.next
        temp2 = temp2.next
  
    # Return false if no common node found 
    return False"
"Create code that will reverse the order of elements in this list.list = [1, 2, 3, 4]","def reverse_list(list): 
    start = 0
    end = len(list) - 1
    while start < end: 
        list[start], list[end] = list[end], list[start] 
        start += 1
        end -= 1
    return list"
"Create a function that will find the maximum length of increasing subarray in a listlist = [2, 3, 3, 1, 4, 5, 8, 4]","def longest_increasing_subarray(arr):
    max_length = 1
    curr_length = 1

    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            curr_length += 1
        else:
            if curr_length > max_length:
                max_length = curr_length
            curr_length = 1
    
    if curr_length > max_length:
        max_length = curr_length
    
    return max_length"
"Create code that, given a string, returns the longest permutation of the same characterstr = ""abcccdef""","def longest_consecutive_character(str):
	# Store character, length of longest permutation, and current length
    max_char = str[0]
    max_length = 1
    cur_length = 1
    
    # Iterate over the string
    for i in range(1, len(str)):
        # If the characters are the same
        if str[i] == str[i-1]:
            cur_length += 1
            
            # Check if the current permutation is longest
            if cur_length > max_length:
                max_char = str[i]
                max_length = cur_length
        # Reset count if character changes
        else: 
            cur_length = 1
    
    return max_char, max_length"
"Create code to find the longest subarray with equal number of 0's and 1'slist = [0, 0, 1, 0, 1, 0, 0, 1]","def longest_subarray(arr): 
    # Stores index of previos zero 
    prev_zero = -1 
  
    # Stores index and length of longest subarray with equal 0 and 1 
    max_len = 0
    start_index = 0
  
    # Traverse the given array 
    for i in range(len(arr)): 
        # Update previous zero 
        if arr[i] == 0: 
            prev_zero = i 
  
        # Calculate difference b/w current and previous zero 
        diff = i - prev_zero 
  
        # Update max_len if required 
        if (diff > max_len): 
            max_len = diff 
            start_index = prev_zero + 1
  
    # Return longest sub-array 
    return arr[start_index:start_index + max_len]"
"Create code that given two binary search trees, determine if they are identicalTwo Binary Search Trees: Tree1 and Tree2","def are_identical(Tree1, Tree2): 
    # Both trees are empty 
    if Tree1==None and Tree2==None: 
        return True
  
    # If only one of them is empty 
    if (Tree1==None or Tree2==None): 
        return False
  
    # Both non-empty, compare the data and 
    # recur for left and right sub-tree 
    if (Tree1.data==Tree2.data and 
        are_identical(Tree1.left, Tree2.left)and
        are_identical(Tree1.right, Tree2.right)): 
        return True 
    else: 
        return False"
"Create a function that will add two numbers (represented as linked lists)Linked lists: list1 = [2, 4, 3] and list2 = [5, 6, 4]","def add_numbers(list1, list2): 
    start = result = ListNode(0)
    carry = 0

    # Iterate both Lists until the end 
    while list1 or list2 or carry: 
        val1 = 0
        val2 = 0

        # If l1 is not None, add data
        if list1: 
            val1 = list1.data 
            list1 = list1.next 

        # If l2 is not None, add data
        if list2: 
            val2 = list2.data 
            list2 = list2.next 

        # Calculate sum
        total = val1 + val2 + carry 

        # Update result list present node
        result.next = ListNode(total % 10) 
        result = result.next 
        carry = total // 10
  
    # Return head node of the result list 
    return start.next"
"Create code that given a stack (i.e., a sequence of objects), returns the reversed stackstack = [1, 2, 3, 4]","def reverse_stack(stack): 
	if len(stack) == 0: 
		return 
	
	# Pop the first element from the stack 
	temp = stack.pop()

	# Call the reverse_stack method on the remaining elements 
	reverse_stack(stack) 

	# Push the poped element to the bottom of the stack 
	insert_at_bottom(stack, temp) 

	return stack

def insert_at_bottom(stack, item): 
	if len(stack) == 0: 
		stack.append(item) 
	
	else: 
		temp = stack.pop() 
		insert_at_bottom(stack, item) 
		stack.append(temp)"
"Create a function to build a queue (i.e., a sequence of objects)","class Queue: 
      
    def __init__(self): 
        self.items = [] 
  
    def enqueue(self, item): 
        self.items.insert(0, item) 
  
    def dequeue(self): 
        if not self.is_empty(): 
            return self.items.pop() 
  
    def is_empty(self): 
        return len(self.items) == 0 
  
    def peek(self): 
        if not self.is_empty(): 
            return self.items[-1].value 
  
    def __len__(self): 
        return self.size() 
  
    def size(self): 
        return len(self.items)"
Write a code snippet to store the output of an API call into a variable.url = 'http://example.com/api/v1/data',"import requests

url = 'http://example.com/api/v1/data'
response = requests.get(url)
data = response.json()"
Create a user interface for a customer order system.,"import tkinter

# create the main window 
root = Tk() 
  
# create the user interface 
root.title(""Order System"") 
root.geometry(""400x200"") 
  
# create widgets 
Label(root, text = 'Name:').grid(row = 0, column = 0, padx = 10, pady = 10) 
Entry(root).grid(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10) 
Label(root, text = 'Email address:').grid(row = 1, column = 0, padx = 10, pady = 10) 
Entry(root).grid(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10) 
Button(root, text = 'Submit').grid(row = 2, column = 1, padx = 10, pady = 10) 
Button(root, text = 'Cancel').grid(row = 2, column = 2, padx = 10, pady = 10) 

# enter main event loop 
root.mainloop()"
Create a virtual machine using Terraform.,"resource ""azurerm_resource_group"" ""example"" {
  name     = ""example-resources""
  location = ""westus2""
}

resource ""azurerm_virtual_machine"" ""example"" {
  name                  = ""example-vm""
  location              = azurerm_resource_group.example.location
  resource_group_name   = azurerm_resource_group.example.name
  vm_size               = ""Standard_DS2_v2""
  storage_image_reference {
    publisher = ""Canonical""
    offer     = ""UbuntuServer""
    sku       = ""16.04-LTS""
    version   = ""latest""
  }
  storage_os_disk {
    name              = ""myosdisk1""
    caching           = ""ReadWrite""
    create_option     = ""FromImage""
    disk_size_gb      = ""30""
  }
  os_profile {
    computer_name  = ""hostname""
    admin_username = ""username""
    admin_password = ""secure_password""
  }
  os_profile_linux_config {
    disable_password_authentication = false
  }
  tags = {
    environment = ""Production""
  }
}"
Get the top ten most used words within a string.,"import collections

def get_most_used_words(string):
    # Tokenize the string
    words = string.split()

    # Calculate frequency of each word
    freq = {}
    for word in words:
       if word in freq:
           freq[word] += 1
       else:
           freq[word] = 1

    # Sort the words in descending order of frequency
    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)

    # Get the top ten most used words
    most_used_words = [word for word, count in sorted_freq[:10]]

    return most_used_words"
"Edit the following code snippet to add if/else logic for printing a success message.num1 = 5
num2 = 6
if num1 > num2:
  print(""The number is greater than 5."")","num1 = 5
num2 = 6
if num1 > num2:
  print(""The number is greater than 5."")
else:
  print(""Success! The number is less than or equal to 5."")"
"Generate a regex expression to find all words starting with ""ha""",^ha\w+
Generate a gradient descent algorithm to optimize a cost function.,"def gradient_descent(cost_function, theta, eta, tolerance):
    cost = cost_function(theta)
    diff = tolerance + 1
    while diff > tolerance:
        theta_updated = theta
        for i in range(len(theta)):
            theta[i] = theta[i] - eta * cost_function.gradient_wrt_theta(theta, i)
            diff = sum((theta_updated[i] - theta[i])**2 for i in range(len(theta)))
    return theta"
Construct a pre-order traversal code to traverse a binary tree.,"def preOrder(root):
  if root:
    print(root.data)
    preOrder(root.left)
    preOrder(root.right)"
"Create an array of length 10 from a given list of values.given_list = [1, 2, 3, 4, 5]","final_list = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]"
"Implement the merge sort algorithm to sort a given array ascending.given_array = [7,9,3,8,1]","def merge_sort(arr):
    if len(arr) > 1: 
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        #calling merge sort function on left and right arrays
        merge_sort(L) 
        merge_sort(R) 

        i = j = k = 0
        # Copying data to temp arrays L[] and R[] 
        while i < len(L) and j < len(R): 
            if L[i] < R[j]: 
                arr[k] = L[i] 
                i+=1
            else: 
                arr[k] = R[j] 
                j+=1
            k+=1
  
        # Checking if any element was left 
        while i < len(L): 
            arr[k] = L[i] 
            i+=1
            k+=1
          
        while j < len(R): 
            arr[k] = R[j] 
            j+=1
            k+=1

ar =[7,9,3,8,1]
merge_sort(ar)

# printing sorted array 
print (ar)"
"Compact a given list into a dictionary with unique items as keys.given_list = [1,1,1,2,2,3]","uniques = {}
for item in given_list:
     if item not in uniques:
        uniques[item] = 1
     else:
        uniques[item] += 1

# result: {1: 3, 2: 2, 3: 1}"
"Edit the code to make sure the program prints the correct output.def my_function(x):
    y = x * 2
    return x + y

result = my_function(2)
print(result)","def my_function(x):
    y = x * 2
    return x + y

result = my_function(2)
print(""The result is:"", result)"
"Modify the following code to kill a thread after 10 seconds.import threading 
from time import sleep
  
def worker(): 
    try: 
        while True: 
            print(""Thread"") 
            sleep(1) 

threads = [] 
for x in range(40): 
    t = threading.Thread(target=worker) 
    threads.append(t) 
    t.start()","import threading 
import signal 
from time import sleep 

def exitThread(signum, frame): 
    raise SystemExit 

def worker(): 
    try: 
        signal.signal(signal.SIGALRM, exitThread) 
        signal.alarm(10) 
        while True: 
            print(""Thread"")  
            sleep(1) 

threads = [] 
for x in range(40): 
    t = threading.Thread(target=worker) 
    threads.append(t) 
    t.start()"
Create an array of 5 unique numbers between 1 and 15.,"[1, 7, 10, 11, 15]"
"Change the following code to implement the Observer Design Pattern in Python.class Publisher: 
    def __init__(self): 
        self.observers = [] 
  
    def add(self, observer): 
        if observer not in self.observers: 
            self.observers.append(observer) 
        else: 
            print('Failed to add: {}'.format(observer)) 
  
    def remove(self): 
        self.observers.remove(observer) 
  
    def notifyAll(self, *args, **kwargs): 
        for observer in self.observers: 
            observer.notify(self, *args, **kwargs)","class Publisher: 

    def __init__(self): 
        self.observers = [] 
        self.state = None
    
    def getState(self): 
        return self.state 

    def setState(self, state): 
        self.state = state 
        self.notifyAll() 

    def add(self, observer): 
        if observer not in self.observers: 
            self.observers.append(observer) 
        else: 
            print('Failed to add: {}'.format(observer)) 
  
    def remove(self): 
        self.observers.remove(observer) 
  
    def notifyAll(self, *args, **kwargs): 
        for observer in self.observers: 
            if args and kwargs: 
                observer.notify(self, *args, **kwargs) 
            else: 
                observer.notify(self)"
Create an array of 20 unique values from 1 to 50.,"[1, 5, 6, 8, 13, 16, 18, 20, 21, 24, 25, 29, 31, 32, 36, 39, 40, 43, 44, 50]"
"Declare a variable named 'items' and assign it a list containing the elements ‘pen’, ‘paper’ and ‘pencil’ in Python.","items = ['pen', 'paper', 'pencil']"
"Create a vector in R to store the elements ‘apple’, ‘mango’, ‘banana’ and ‘orange’.","fruits <- c(""apple"", ""mango"", ""banana"", ""orange"")"
"Create an array from a given string and sort it in ascending order.string = ""cbaefd""","string = ""cbaefd""
array = list(string)
array.sort()
print(array)"
Generate a random password of 16 characters that includes a mix of alphanumeric characters and punctuation.,"import string
import random

def random_password(str_len):
    alphanumeric = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(alphanumeric) for i in range(str_len))

random_password(16)"
"Write a function that takes two arguments, an array arr and a value x, and returns the number of times x appears in the array arr.arr = [1, 2, 3, 4, 5, 6, 7, 8, 5]
x = 5","def count_val(arr, x):
    count = 0 
    for i in arr:
        if i == x:
            count += 1
    return count

count_val(arr, x)"
"Write a code in Python for comparing two strings without using a built-in function.string1 = ""apple""
string2 = ""orange""","string1 = ""apple"" 
string2 = ""orange"" 
length = min(len(string1), len(string2))

for i in range(length):
  if string1[i] != string2[i]:
    result = string1[i] < string2[i]
    break

if result == True:
  print(string1 + "" follows "" + string2 + "" alphabetically."")
else:
  print(string2 + "" follows "" + string1 + "" alphabetically."")"
Generate a two-dimensional array of 3 rows and 3 columns with all elements equal to 1.,"import numpy as np

arr = np.ones((3,3))
print(arr)"
How can we use a list comprehension to make a copy of a given list?,list_copy = [x for x in given_list]
"Convert a list of numbers to a 5x5 matrix.given_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]","matrix = [[1, 2, 3, 4, 5], 
          [6, 7, 8, 9, 10], 
          [11, 12, 13, 14, 15], 
          [16, 17, 18, 19, 20]]"
Describe a method to reverse the order of elements in a given array.,"A simple approach to reverse an array is to use two index variables, one at the start and one at the end of the array. Swap the elements present at these two indexes and increment the first index and decrement the second index, until the indexes meet.

Example:

def reverseArray(arr, start, end): 
 
    while (start < end): 
        arr[start], arr[end] = arr[end], arr[start] 
        start += 1
        end = end-1

arr = [1, 2, 3, 4, 5, 6] 
reverseArray(arr, 0, 5)"
"Create a program which finds patterns in a stream of numbers and prints out the start of the pattern.87, 88, 89, 87, 88, 89, 87, 88, 89","Pattern detected: 87, 88, 89.  Starting at index 0."
Construct a for loop in Python to find the sum of all the the numbers between 15 and 30 (inclusive).,"total_sum = 0 
for num in range(15, 31): 
    total_sum += num 
print(total_sum)"
"Construct an if-else if condition to grade the user input (1 to 5) between A, B, C, D, or F.","if user_input == 1:
    print('A')
elif user_input == 2:
    print('B')
elif user_input == 3:
    print('C')
elif user_input == 4:
    print('D')
else:
    print('F')"
"Construct a switch-case statement to output ""Monthly"" if the user enters ""M"" to output ""Yearly"" if the user enters ""Y"", and ""Invalid"" if the user enters neither ""M"" nor ""Y"".","def printOption(option):
switch(option):
    case ""M"":
        print(""Monthly"")
        break
    case ""Y"":
        print(""Yearly"")
        break
    default:
        print(""Invalid"")"
Design a regex pattern to check if a given string is a valid URL or not.,"pattern = r'^(https?:\/\/)[\da-z\.-]+\.[a-z\.]{2,}\/?[\/\w \.-]*'"
Construct a class in Python that contains three variables and two methods.,"class myClass():
    def __init__(self):
        self.var1 = ""Hello""
        self.var2 = ""World!""
        self.var3 = 5
    def method1(self):
        print(self.var1)
    def method2(self):
        print(self.var2)"
Write a function to sort a string containing several words alphabetically.,"def sortString(string): 
    words = string.split() 
    words.sort()
    return (' '.join(words))"
"Sort a string in alphabetical order.string = ""edcba""","def sort_string(string):
    str_list = list(string)
    str_list.sort()
    return """".join(str_list)

sorted_str = sort_string(string)"
Write a script that prints the first N numbers in a Fibonacci series.N = 10,"def fibonacci_series(n):
    if n == 0:
        return
    a = 0
    b = 1
    print(a, end="" "")
    print(b, end="" "")
    for i in range(2,n):
        c = a + b
        a = b
        b = c
        print(b, end="" "")
        
fibonacci_series(N)"
Implement a k-nearest neighbors algorithm to predict point labels.,"# k-nearest neighbor algorithm
def knn(k, data, targets, query):
    # find k nearest neighbors of the query
	indices = get_neighbors(k, data, query)
	
	# find most common label among the neighbors
	counts = {}
	for index in indices:
		label = targets[index]
		counts[label] = counts.get(label, 0) + 1
	
	# from the most to the least occurring 
	labels = sorted(counts, key=counts.get, reverse=True)
	return labels[0]"
"Create a function which takes two parameters and returns true if the second parameter is a power of the first parameter.x = 16
y = 4","def is_a_power_of(x, y):
    if x == y:
        return True

    if x > y and y != 0:
        return is_a_power_of(x/y, y) 
    else:
        return False

power_of = is_a_power_of(x, y)"
"Write an algorithm in Python to find the number of distinct words in a given sentence.""This is a test sentence.""","def count_distinct_words(sentence):
    distinct_words = set([word.lower() for word in sentence.split()])
    return len(distinct_words)
    
print(count_distinct_words(""This is a test sentence."")) # Outputs: 4"
"Convert the following JS code from a callback to a promise.function downloadData(url, callback) {
  // Code to download data
  if (/* success */) {
    callback(null, data)
  } else {
    callback(err, null)
  }
}","function downloadData(url) {
  return new Promise((resolve, reject) => {
    // Code to download data
    if (/* success */) {
      resolve(data)
    } else {
      reject(err)
    }
  })
}"
"Edit the following JS code to include a check to avoid creating duplicate requests.sendRequest(url) {
  // Code to send request
}

makeRequest(url) {
  sendRequest(url);
}","sendRequest(url) {
  // Code to send request
}

requests = []; // Array to keep track of requests

makeRequest(url) {
  if (!requests.includes(url)) { // Check if request doesn't already exist
    sendRequest(url);
    requests.push(url); // Add request to list
  }
}"
Write a Python program to get the IP address from a given hostnamegoogle.com,"import socket

def get_ip(hostname):
    return socket.gethostbyname(hostname)

print(get_ip('google.com'))"
Design a fourth-order Butterworth low-pass filter.,"s = tf('s');
H = 1/(s^4 + 2.39125*s^3 + 2.37238*s^2 + 0.857723*s + 0.147902);"
Create a MongoDB query to find all documents that have a field called 'city' with a value of 'New York',db.collection.find({city: 'New York'});
Write a Python code snippet to evaluate an expression stored as a string.expression = '2+2*2',"def evaluate_expression(expression):
    return eval(expression)

print(evaluate_expression(expression))"
"Find the largest value in an array of numbers.[5, 9, 40, 0.5, 3]",40
Generate a URL to search the desired content on Google using Python.Search Keyword: Covid-19 Pandemic,"import urllib
url = 'https://www.google.com/search?q=Covid-19+Pandemic'
urllib.request.urlopen(url)"
"Convert an array from its x-coordinate values to an array of polar coordinates.[(1, 1), (4, 2)]","[(1.4142135623730951, 0.7853981633974483), (4.47213595499958, 0.4636476090008061)]"
Initialize a 2D array with `0`s.,"def init2DArray(rows, cols): 
    # initialize the array 
    arr = [[0 for i in range(cols)] for j in range(rows)]
    return arr"
"Given a 2D array, replace every element with the greatest element on its row.[[6, 2, 9],
 [3, 8, 7],
 [1, 4, 5]]","def greatest_element(arr): 
    # loop through elements of 1D array 
    for i in range(len(arr)): 
        max_element = arr[i][0] 
  
        # loop through elements of 2D array 
        for j in range(len(arr[i])):  
            if arr[i][j] > max_element: 
                max_element = arr[i][j] 
              
        # replace every element with max_element 
        for j in range(len(arr[i])): 
            arr[i][j] = max_element 
    return arr"
"In a given list, replace the even numbers by their square.[1, 2, 3, 4, 5, 6]","def even_nums_square(nums): 
    for i in range(len(nums)): 
        # check for even number 
        if nums[i] % 2 == 0: 
            # square the number 
            nums[i] = nums[i] * nums[i] 
    return nums"
"Consider the given list of tuples, remove the third element if it exists.data = [(1, 5), (3, 4), (2, 6, 4)]","data = [(1, 5), (3, 4)]"
"Construct a lambda function to filter a given list based on a given predicate.numbers = [1, 2, 3, 4, 5, 6]
predicate = lambda x: x % 2 == 0","filtered_list = list(filter(predicate, numbers)) #=> [2, 4, 6]"
how to implement a recursive function for computing Fibonacci numbers?max_num = 5,"def Fibonacci(n):
    if n==0 or n==1:
        return n 
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)

def Fibonacci_Series(max_num):
    for n in range(max_num+1):
        print(Fibonacci(n))

# Output: 0 1 1 2 3 5"
"Construct a regular expression pattern to match a specific set of strings.Match the following strings: 
Apple, Bananas, Oranges",^(Apple|Bananas|Oranges)$
Translate the provided sentence into Pig Latin.The cat jumped over the box.,eThay atcay jumpeday overay ethay oxbay.
"Convert the given matrix into a comma-separated values (CSV) format.[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]","1,2,3
4,5,6
7,8,9"
Make a simple program that adds two numbers.,"# Take the input from user
num1 = int(input(""Enter number 1: ""))
num2 = int(input(""Enter number 2: ""))

# Add the numbers
sum = num1 + num2

# Print the result
print(""The sum is: "" + str(sum))"
"Write a function that takes an array and prints every element in a single line.my_array = [1, 2, 3]","def print_array(arr):
    for element in arr:
        print(element, end=' ')"
"Write a statement which checks whether a number is within a given range.number = 7
min_range = 5
max_range = 10","if (number >= min_range) and (number <= max_range):
    print(""The number is within the given range."")"
"Using a conditional statement, print a message depending on the day of the week.day_of_week = ""Thursday""","if day_of_week == ""Monday"":
    print(""It's Monday"")
elif day_of_week == ""Tuesday"":
    print(""It's Tuesday"")
elif day_of_week == ""Wednesday"":
    print(""It's Wednesday"")
elif day_of_week == ""Thursday"":
    print(""It's Thursday"")
elif day_of_week == ""Friday"":
    print(""It's Friday"")
elif day_of_week == ""Saturday"":
    print(""It's Saturday"")
elif day_of_week == ""Sunday"":
    print(""It's Sunday"")"
"Rewrite the following expression using an if-else statement.x = 5
if x > 4: 
    print('x is greater than 4')","x = 5
if x > 4:
    print('x is greater than 4')
else:
    print('x is not greater than 4')"
"Create a function that compares two numbers and returns 'lower', 'higher', or 'equal' based on the comparison.","def compare_numbers(num1, num2):
    if num1<num2:
        return 'lower'
    elif num1>num2:
        return 'higher'
    else:
        return 'equal'"
Calculate the number of seconds in a day.,seconds_in_day = 24 * 60 * 60
"Change the value of the third element in the following array.int[] arr = {1, 3, 4, 5};",arr[2] = 10;
"Identify the programming language of the sample code snippet.def find_average(numbers):
 sum = 0
 for num in numbers:
 sum += num
 return sum / len(numbers)",Python.
"Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a).def convert_to_multi(a):
    return [a]","def convert_to_multi(a):
    result = []
    for i in range(len(a)):
        row = []
        for j in range(len(a)):
            row.append(a[j])
        result.append(row)
    return result"
"Given a word, remove all the vowels from it in C.","void remove_vowels(char *s) 
{ 
    for (int i = 0; s[i] != '\0'; i++) 
    { 
        if (s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U') 
        { 
            for (int j = i; s[j] != '\0'; ++j) {
                s[j] = s[j+1]; 
            } 
        } 
    } 
}"
Create a Python class 'Calculator' with two methods: 'add' and 'sub'.,"class Calculator:
 def add(self, x, y):
  return x + y

 def sub(self, x, y):
  return x - y"
"Create an if-else statement that prints ""Welcome!"" if the input is ""John"" and ""Goodbye!"" if the input is ""Caroline"".","if name == ""John"":
    print(""Welcome!"")
else:
    print(""Goodbye!"")"
"Given two lists, create a function that finds the common elements between the two lists.list1 = [1, 2, 3, 4, 5]
list2 = [2, 3, 4, 6, 7]","def find_common(list1, list2):
    common_elems = []
    for elem in list1:
        if elem in list2:
            common_elems.append(elem)
    return common_elems"
Define what a global variable is.,A global variable is a variable that is accessible and can be modified in any part of a program. It is not limited to the scope of any particular function.
"Write a function in Python to encourage user input by prompting the user ""Please enter a valid email address.""","def get_email(): 
  email = input(""Please enter a valid email address: "")
  return email"
Create an array to store 10 names of famous scientists.,"let scientists = [""Albert Einstein"", ""Isaac Newton"", ""Charles Darwin"", ""Marie Curie"", ""Galileo Galilei"", ""Stephen Hawking"", ""Sophie Germain"", ""Antoine Lavoisier"", ""Niels Bohr"", ""Blaise Pascal""];"
Create a code block that calculates the root of a given numberFind the square root of 16,"#calculate the square root of a given number
def get_square_root(num):
    root = num ** 0.5
    return root
if __name__ == '__main__':
    number = 16
    root = get_square_root(number)
    print(""Square root of {} is {}"".format(number, root))"
"Develop a code that can calculate the cumulative sum of an array[2, 4, 6, 8, 10]","def cummulative_sum(arr):
    cum_sum = 0 
    for num in arr:
       cum_sum += num
    return cum_sum
if __name__ == '__main__':
    test_list = [2, 4, 6, 8, 10]
    print('Cumulative Sum:', cummulative_sum(test_list))"
"Given a function that takes two parameters ""a"" and ""b"", write a code to add the two parameters together and return the result.a = 1, b = 2","#Add two parameters together and return the result
def add_two_params(a, b):
    return a + b
result = add_two_params(1, 2)
print('The result is', result)"
Write a code to find control characters such as carriage returns inside a given string'This is a string\r\nwith some control characters',"#Function to find control characters
def find_control_chars(string):
    control_chars = [
        '\r', 
        '\n'
    ]
    for char in control_chars:
        if char in string:
            return True
    return False
    
string = 'This is a string\r\nwith some control characters'
control_char_exists = find_control_chars(string)
print('Control character exists:', control_char_exists)"
"Create a method to calculate the amount of tax to be paid based on the inputs of income and country.income = 20000, country = Ireland","#Calculate the applicable tax amount 
def get_tax_amount(income, country):
    #Country specific logic
    if country == 'Ireland':
        tax_rate = 0.20
    else:
        tax_rate = 0.15
    #Calulate tax amount
    tax_amount = income * tax_rate
    return tax_amount
if __name__ == '__main__':
    income = 20000
    country = 'Ireland'
    tax_amount = get_tax_amount(income, country)
    print('Tax amount:', tax_amount)"
"Write a code block to return a random value from a given list[1, 4, 8, 12]","#Return a random value from a given list
import random

def get_random_value(lst):
    n = random.randint(0, len(lst) - 1)
    return lst[n]

test_list = [1, 4, 8, 12]
random_value = get_random_value(test_list)
print('Random value:', random_value)"
Generate three different sorting algorithms for a list of integers.,"# Bubble Sort algorithm
def bubble_sort(lst):
    for i in range(len(lst)-1):
        for j in range(len(lst)-1-i):
            if lst[j] > lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst

# Insertion Sort algorithm
def insertion_sort(lst):
    for i in range(1, len(lst)):
        key = lst[i]
        j = i - 1
        while j >= 0 and key < lst[j]:
            lst[j+1] = lst[j]
            j -= 1
        lst[j+1] = key
    return lst

# Heap Sort algorithm
def heap_sort(lst):
    # build max heap
    for i in range(len(lst) // 2 - 1, -1, -1):
        heapify(lst, len(lst), i)
   
    # extract elements
    for i in range(len(lst) - 1, 0, -1):
        lst[i], lst[0] = lst[0], lst[i]
        heapify(lst, i, 0)
    return lst

def heapify(lst, n, i):
    # Find largest among root, left child and right child
    largest = i 
    l = 2 * i + 1
    r = 2 * i + 2 
  
    if l < n and lst[i] < lst[l]:
        largest = l
  
    if r < n and lst[largest] < lst[r]:
        largest = r
  
    # change root, if needed
    if largest != i:
        lst[i], lst[largest] = lst[largest], lst[i]
        heapify(lst, n, largest)"
Replace each letter in the following text with its corresponding number:Hello world!,83055109 16971134!
"Given a valid XML string, write an XPath query to retrieve all the elements<?xml version=""1.0""?>
<root>
  <child name=""child1"" />
  <child name=""child2"">
    <subchild>subchild</subchild>
  </child>
  <child name=""child3"" />
</root>","// XPath query to retrieve all elements from the given XML string 
/root/child"
Create an R code to convert yes/no questions to binary input.Do you have a pet?,"question <- ""Do you have a pet?""

binary_input <- ifelse(question == ""Do you have a pet?"", 1, 0)

print(binary_input) # prints 1"
Create a regular expression to match dates in the MM/DD/YYYY format.,"import re

pattern = re.compile(r'^\d{2}\/\d{2}\/\d{4}$')"
"Read the following code and debug the errors.def double_up(str):
  double_str = str + "" "" + str
  strlen = len(str)
  print(double_str[strlen])","def double_up(str):
  double_str = str + "" "" + str
  strlen = len(str)
  print(double_str[strlen - 1])"
Write a function in Python to calculate the length and breadth of a given rectangle.,"def calculate_rectangle_length_and_breadth(x, y):
    length = x
    breadth = y
    return length, breadth"
"Given two strings, write a Python function to check if they are anagrams.","def check_anagrams(str1, str2): 
 
    if (len(str1) != len(str2)): 
        return False 
  
    # sorting both strings 
    str1_list = sorted(str1) 
    str2_list = sorted(str2) 
  
    # Check if both lists are equal 
    for i in range(0, len(str1_list)): 
        if str1_list[i] != str2_list[i]: 
            return False 
  
    # If all characters were same 
    return True"
"Given a string, the task is to output a new string with all repeating continuous characters collapsed to a single character.aabbccddcc",abcdc
"Reverse the order of an array.[2, 3, 4, 5, 6]","[6, 5, 4, 3, 2]"
"Create a function that takes a list of strings and combines them together into one string[""This"", ""is"", ""a"", ""list"", ""of"", ""strings""]","def combineStrings(strings):
    combined_string = """"
    for string in strings:
        combined_string += string + "" ""
    return combined_string

combined_string = combineStrings([""This"", ""is"", ""a"", ""list"", ""of"", ""strings""])"
Write a TensorFlow program to construct a basic neural network,"import tensorflow as tf

# Set up the layers for the model
model = tf.keras.models.Sequential([
    # Set up the first layer
    tf.keras.layers.Dense(64, input_shape = (784, ), activation = 'relu'),
    # Set up the second layer
    tf.keras.layers.Dense(64, activation = 'relu'),
    # Set up the output layer
    tf.keras.layers.Dense(10, activation = 'softmax')
])

# Compile the model
model.compile(
  optimizer = 'adam',
  loss = 'sparse_categorical_crossentropy',
  metrics = ['accuracy']
)"
Write a Python program to create a list of n numbers (where n is the input) and print the list in reverse order.n=5,"n = 5
lst = list(range(n, 0, -1))
print(lst)"
"Write a regular expression that finds all occurrences of the word ""computer"" in the following text.""A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.","import re

pattern = re.compile(r'\bcomputer\b')

text = ""A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.""

matches = pattern.finditer(text)

for match in matches:
    print(match)"
"Given an array of strings, write a code snippet in Python that finds the longest string and prints its length.arr = [""Dog"",""Cat"",""Mouse""]","arr = [""Dog"",""Cat"",""Mouse""]
longest_str = max(arr, key=len)
print(len(longest_str))"
"Write a Python function to calculate the sum of all items in a given dictionary with integer values.dict = {'a': 5, 'b': 10, 'c': 3}","def dict_sum(nums):
 sum = 0
 for key, val in nums.items():
  sum +=val
 return sum

print(dict_sum(dict)) //Output is: 18"
"Construct a for-loop to iterate through a given list of strings and print each member one line at a time.word_list = [""hello"", ""world"", ""!""]","for word in word_list:
 print(word)"
"Write a Python script to calculate the total and the average of an array of numbers.arr = [56, 23, 89, 17, 13, 10]","total=sum(arr)
avg=sum(arr)/len(arr)
print(""Total of the array elements is: ""+str(total))
print(""Average of the array elements is: ""+str(avg))"
"Construct an if-statement to check whether the given element is present in an array or not.arr = [4, 5, 6]
element = 5","if element in arr:
    print(""Element is present in array"")"
"Create a Python function to sort a list of dictionaries in ascending order of ""count"".data = [
    {'name': 'Alice', 'count': 5}, 
    {'name': 'Bob', 'count': 3}, 
    {'name': 'John', 'count': 7},
    {'name': 'David', 'count': 4},
]","def sort_dict_list(data):
    """"""Sort a list of dictionaries in ascending order of 'count'
   
    Args:
        data (list): A list of dictionaries
   
    Returns:
        list: A sorted list of dictionaries
    """"""
 
    sorted_data = sorted(data, key=lambda x: x['count'])
    return sorted_data

if __name__ == '__main__':
    data = [
        {'name': 'Alice', 'count': 5}, 
        {'name': 'Bob', 'count': 3}, 
        {'name': 'John', 'count': 7},
        {'name': 'David', 'count': 4},
    ]
    sorted_data = sort_dict_list(data)
    print(sorted_data)"
"What is the result of performing arithmetic subtraction between two numbers, 5 and 2?","The result of performing arithmetic subtraction between two numbers, 5 and 2 is 3. Since subtraction is the inverse of addition, to get the difference between two numbers you subtract the number being subtracted from the number that is being subtracted from. Thus, 5 - 2 = 3."
How can you print the Hello World message using the Tkinter module in Python?,"""""""Print the Hello World message using the Tkinter module in Python""""""
import tkinter as tk

# Create the main window
window = tk.Tk()

# Create the label with the text
hello_label = tk.Label(window, text=""Hello World"")

# Pack the label to the window
hello_label.pack()

# Main loop
window.mainloop()"
"Use a regex expression to find all the words that begin with a ""t"" and end with an ""e"" in the following sentence.sentence = ""The dark night was quiet and still""","import re

sentence = ""The dark night was quiet and still""

pattern = r""\bT\w*e\b""

# Find all the words that begin with a ""t"" and end with an ""e""
matches = re.findall(pattern, sentence)
print(matches)

# Output: ['The', 'night', 'quiet', 'still']"
"Using the given variables, create an if-else statement that prints ""You are an adult"" when age is greater than or equal to 18, otherwise print ""You are a minor"".age = 18","if age >= 18:
    print(""You are an adult"")
else:
    print(""You are a minor"")"
"Compare two values to check if the first one is greater than the second one, and if so, print ""A is greater than B"".A = 5
B = 3","if A > B:
    print(""A is greater than B"")"
"Implement a function that swaps the places of two elements in a list.my_list = [1,2,3,4,5]","def swap(my_list, index_1, index_2):
    # Store the two elements 
    temp = my_list[index_1]
    my_list[index_1] = my_list[index_2]
    my_list[index_2] = temp"
"Implement a function that creates a dictionary from two lists which contain the keys and values, respectively.keys = [""name"", ""age"", ""city""]
values = [""John"", 30, ""New York""]","def create_dictionary(keys, values):
    # Create an empty dictionary
    my_dict = {}
    # Populate the dictionary with elements from lists
    for i in range(len(keys)): 
        my_dict[keys[i]] = values[i]
    return my_dict"
"Access the third element from a list.my_list = [1,2,3,4,5]",element = my_list[2]
Write a neural network in Keras that can distinguish between a cat and a dog.,"import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten

# Define the model
model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"
"Create a Kendo-UI application to display an interactive grid with the following options: sorting, pagination, and search filter.<no-input>","<div id=""grid""></div>
<script>
$(""#grid"").kendoGrid({
    dataSource: {
        sort: {
            field: ""firstName"",
            dir: ""asc""
        },
        pageSize: 10,
        serverPaging: true,
        serverFiltering: true
    },
    columns: [
        { 
            field: ""firstName"", 
            title: ""First Name"" 
        },
        { 
            field: ""lastName"", 
            title: ""Last Name"" 
        },
        { 
            field: ""age"", 
            title: ""Age"" 
        }
    ],
    sortable: true,
    pageable: {
        refresh: true,
        pageSizes: true
    },
    filterable: {
        mode: ""row""
    },
    height: 550
});
</script>"
"Create a class ""Person"" in Kotlin with first name, last name, and age as its fields.","class Person(
    var firstName: String,
    var lastName: String, 
    var age: Int
)"
Write a function in R to filter out the words containing more than 5 letters.,"filter_words_over_five_letters <- function(words_list) {
  filtered_words <- words_list[nchar(words_list) > 5]
  return(filtered_words)
}"
Generate a list of email addresses using the given range.Range: 10-100,"[
    'email10@example.com',
    'email11@example.com',
    'email12@example.com',
    'email13@example.com',
    'email14@example.com',
    'email15@example.com',
    'email16@example.com',
    'email17@example.com',
    'email18@example.com',
    'email19@example.com',
    'email20@example.com',
    'email21@example.com',
    'email22@example.com',
    'email23@example.com',
    'email24@example.com',
    'email25@example.com',
    'email26@example.com',
    'email27@example.com',
    'email28@example.com',
    'email29@example.com',
    'email30@example.com',
    'email31@example.com',
    'email32@example.com',
    'email33@example.com',
    'email34@example.com',
    'email35@example.com',
    'email36@example.com',
    'email37@example.com',
    'email38@example.com',
    'email39@example.com',
    'email40@example.com',
    'email41@example.com',
    'email42@example.com',
    'email43@example.com',
    'email44@example.com',
    'email45@example.com',
    'email46@example.com',
    'email47@example.com',
    'email48@example.com',
    'email49@example.com',
    'email50@example.com',
    'email51@example.com',
    'email52@example.com',
    'email53@example.com',
    'email54@example.com',
    'email55@example.com',
    'email56@example.com',
    'email57@example.com',
    'email58@example.com',
    'email59@example.com',
    'email60@example.com',
    'email61@example.com',
    'email62@example.com',
    'email63@example.com',
    'email64@example.com',
    'email65@example.com',
    'email66@example.com',
    'email67@example.com',
    'email68@example.com',
    'email69@example.com',
    'email70@example.com',
    'email71@example.com',
    'email72@example.com',
    'email73@example.com',
    'email74@example.com',
    'email75@example.com',
    'email76@example.com',
    'email77@example.com',
    'email78@example.com',
    'email79@example.com',
    'email80@example.com',
    'email81@example.com',
    'email82@example.com',
    'email83@example.com',
    'email84@example.com',
    'email85@example.com',
    'email86@example.com',
    'email87@example.com',
    'email88@example.com',
    'email89@example.com',
    'email90@example.com',
    'email91@example.com',
    'email92@example.com',
    'email93@example.com',
    'email94@example.com',
    'email95@example.com',
    'email96@example.com',
    'email97@example.com',
    'email98@example.com',
    'email99@example.com',
    'email100@example.com'
]"
Find the area of the following circleRadius: 8 cm,"Area = pi * r^2

Area = 3.14 * 8^2 

Area = 201.06 cm^2"
"Implement a class to create an object with the given characteristicsCharacteristics: Name, Age, Gender","class Person:
    def __init__(self, name, age, gender):
        self.name = name 
        self.age = age 
        self.gender = gender 

    def get_details(self):
        return f""Name: {self.name}, Age: {self.age}, Gender: {self.gender}"""
"Fix the bug in the following code that causes the output to be incorrect.def calculate_sum(numbers):
    total = 0
    for num in numbers:
        total += num
    return total

numbers = [2, 3, 5]
result = calculate_sum(numbers)

print(f'Sum of {numbers} is {result}')","def calculate_sum(numbers):
    total = 0
    for num in numbers:
        total += num
    return total

numbers = [2, 3, 5]
result = calculate_sum(numbers)

print(f'Sum of {numbers} is {result}.')"
"Take the following code and convert it from a for loop to a While loop.nums = [1,2,3,4,5]
for num in nums:
    print(num**2)","nums = [1,2,3,4,5]
i = 0
while i < len(nums):
    print(nums[i]**2)
    i = i + 1"
Write a code that takes a number and prints it out in words.25,"def number_to_word(n):
    tens_words = {
        0: '',
        2: 'twenty',
        3: 'thirty',
        4: 'forty',
        5: 'fifty',
        6: 'sixty',
        7: 'seventy',
        8: 'eighty',
        9: 'ninety',
    }
    ones_words = {
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine',
    }

    tens = n // 10
    ones = n % 10

    return tens_words[tens] + ' ' + ones_words[ones]

print(number_to_word(25))"
"Take the following array and add up all of the numbersnumbers = [4,15,7,10,45]","def sum_numbers(numbers):
    total = 0
    for num in numbers:
        total += num
    return total

print(sum_numbers(numbers))"
Write a Python code take a given string and return the string in reverse.hello,"def reverse_string(string):
    return string[::-1]

print(reverse_string('hello'))"
"Write a code that takes two lists and find the longest common starting substringlist1 = ['cat', 'car', 'camel']
list2 = ['carry', 'cap', 'caterpillar']","def find_longest_substring(list1, list2):
    string1 = list1[0]
    string2 = list2[0]
    min_length = min(len(string1), len(string2))
    longest_substring = """"
    
    for i in range(min_length):
        if string1[i] == string2[i]:
            longest_substring += string1[i]
        else:
            break
    return longest_substring
    
print(find_longest_substring(list1, list2))"
"Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character.string = 'Hello, world!'
character = '#'","import re

def replace_non_alphanum(string, character):
    return re.sub(r'\W', character, string)

string = 'Hello, world!'
character = '#'

print(replace_non_alphanum(string, character))"
"Identify common elements between two given listslist1 = [1, 2, 3, 4, 5]
list2 = [2, 4, 6, 8, 10]","def common_elements(list1, list2):
    return set(list1).intersection(list2)

list1 = [1, 2, 3, 4, 5]
list2 = [2, 4, 6, 8, 10]

print(common_elements(list1, list2))"
"Generate a new list from an old list by multiplying each element of the old list with a given numbernumbers = [2, 4, 6]
multiply = 5","def multiply_elements(numbers, multiply):
    new_list = []
    for num in numbers:
        new_list.append(num * multiply)
    return new_list

numbers = [2, 4, 6]
multiply = 5

print(multiply_elements(numbers, multiply))"
"Take the following list of words and return the words in alphabetical orderwords = ['daisy', 'apple', 'cat', 'zebra']","def sort_alphabetical(words):
 return sorted(words)

words = ['daisy', 'apple', 'cat', 'zebra']

print(sort_alphabetical(words))"
Find the code snippet to format the output of a List.,"for item in some_list:
    print(""{:>20}"".format(item))"
Select the correct code for a for-loop for a sequential array of numbers.,"for i in range(1, 10):
    print(i)"
Modify the code to declare a variable as a float.x = 5,x = float(5)
"Delete the elements at a specified position of the given list.my_list = [1, 2, 3, 4, 5]
pos = 3","def delete_element(list1, pos):
    del list1[pos]
    print(""After deleting the element at position {0} the list is: {1}"".format(pos, list1))

delete_element(my_list, pos)"
Write a while loop to print all numbers from 20 to 0.,"num = 20

while num >= 0:
    print(num)
    num -= 1"
Write a code to find the maximum of three numbers using if else.,"def maximum_of_three(x, y, z): 
    if x > y and x > z: 
        max = x 
    elif y > x and y > z: 
        max = y 
    else: 
        max = z 
    return max"
"Generate a recursive function for the following task:Given a list of integers, ""find the max element present in the list"".","def find_max(list):
    # base condition
    if len(list) == 1:
        return list[0] 
    else:
        # compare the current element to the next element
        max_element = max(list[0], list[1])
        # remove the compared element
        list.pop(1)
        # call the function on the remaining list
        return find_max(list[:1] + [max_element] + list[1:])"
"What should be the output for the given code?a = 7
b = 2

if a % b == 0:
    print(""Yes"")
else:
    print(""No"")",Yes
"You are passed an array and a value. Write a Python program to insert the value in the array at the end.array = [1, 2, 3, 4], value = 7","array = [1, 2, 3, 4, 7]"
"Determine the number of words in the given passage using text processing in Python.passage = ""Once upon a midnight dreary, while I pondered, weak and weary""","n_words = len(passage.split())
print(""The number of words in the passage is:"", n_words)"
"Given a list containing strings, write a Python program to filter out unique strings.mylist = [""fox"", ""fox"", ""cat"", ""dog"", ""dog""]","mylist = list(set(mylist))
print(mylist)"
"Design a function to select the nth smallest element from an array.int[] arr = {11, -2, 4, 9, -5, 7}","def selectNthSmallest(arr, n): 
 
    # sort the array 
    arr = sorted(arr) 
  
    # return the nth smallest element 
    return arr[n-1]  
      
# Driver code 
arr = [11, -2, 4, 9, -5, 7]  
n = 3
  
# Output 
print(selectNthSmallest(arr, n))"
Write a code to print all prime numbers up to 1000.,"def is_prime(x):
    if x<2:
        return False
    for i in range(2, int(x**0.5)+1):
        if x % i == 0:
            return False
    return True

for x in range(2,1001):
    if is_prime(x):
        print(x)"
Convert a given expression to the postfix notation.(A + B) * (C - D),A B + C D - *
"Execute a loop over all elements of a given array and print the square of each element.[1,2,3]","for (let i = 0; i < arr.length; i++) {
 console.log(arr[i] * arr[i]);
}

// Output:
1
4
9"
Create an artificial neural network to predict the stock prices.,"import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
from sklearn.neural_network import MLPRegressor
 
# Read data into a dataframe 
df = pd.read_csv('stock_data.csv') 
 
# Split the data into features and target 
X = np.array(df[['open', 'high', 'low', 'volume']]) 
y = np.array(df['close']) 
 
# Create the model and fit the data 
model = MLPRegressor(hidden_layer_sizes=(4,4,4), max_iter=20000) 
model.fit(X,y) 
 
# Make predictions based on the test data 
predictions = model.predict(X) 
 
# Plot the results to compare the predicted and actual values 
plt.scatter(y, predictions) 
plt.xlabel('Actual Prices') 
plt.ylabel('Predicted Prices') 
plt.title('Predicted vs Actual Stock Prices') 
plt.show()"
"Write a Python code snippet for a function to calculate the number of words in a given string.myString = ""The sky is blue""","def countWords (myString): 
    return len(myString.split()) 

num = countWords(myString) 
print(""Number of words ="", num)"
Create an array of size ten with every even slot filled with the value 0 and every odd slot filled with the value 1.,"[0, 1, 0, 1, 0, 1, 0, 1, 0, 1]"
Write a Python function to check if a given number is a prime number or not. A prime number is an integer greater than 1 which is not divisible by any other numbers.11,"def is_prime(n):
  #Check if n islarger than one 
  if n > 1:
    # Check if n is divisible by any number between2 and n
    for i in range(2,n):
      if (n % i) == 0:
        return False
    else:
      return True
  else:
    return False"
What is the most efficient sorting algorithm in C?,The most efficient sorting algorithm in C is Quick Sort.
What language is used to install packages in Ubuntu and other Linux-based systems?,The language used to install packages in Ubuntu and other Linux-based systems is apt.
"Create a boolean type variable called ""isValid"" and set it to true.",bool isValid = true;
Transform the input string to upper case and print the result.This is a string,"String inputString = ""This is a string"";
String upperCaseString = inputString.ToUpper();
Console.WriteLine(upperCaseString);"
"Write a Python program that finds the longest common subsequence of two strings.str1 = ""ABGXABCAB""
str2 = ""ZXABGAYBCB""","def lcs(str1, str2):
    m = len(str1)
    n = len(str2)

    table = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                table[i][j] = 0
            elif str1[i-1] == str2[j-1]:
                table[i][j] = table[i-1][j-1] + 1
            else:
                table[i][j] = max(table[i-1][j], table[i][j-1])

    lcs = []
    i = m
    j = n
    while i > 0 and j > 0:
        if str1[i-1] == str2[j-1]:
            lcs.append(str1[i-1])
            i -= 1
            j -= 1
        elif table[i-1][j] > table[i][j-1]:
            i -= 1
        else:
            j -= 1

    return lcs[::-1]


str1 = ""ABGXABCAB""
str2 = ""ZXABGAYBCB""

print(lcs(str1, str2))"
"Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings.arr = [""apple"", ""banana"", ""cherry""]","def array_lengths_to_dict(arr):
    my_dict = {}
    for s in arr:
        my_dict[s] = len(s)
    return my_dict

arr = [""apple"", ""banana"", ""cherry""]

print(array_lengths_to_dict(arr))"
"Use LINQ syntax to create a query that returns all items that begin with the letter 'b'.var letters = new[] { ""a"", ""b"", ""c"", ""d"", ""e"" };","var query = from letter in letters
            where letter.StartsWith(""b"")
            select letter;

foreach (string letter in query)
{
    Console.WriteLine(letter);
}"
"Create a function that multiplies each element of the input array by 10 and returns the result.arr = [2, 3, 4]","def multiply_by_10(arr):
  newArr = []
  for i in arr:
    newArr.append(i * 10)
  return newArr

arr = [2, 3, 4]

print(multiply_by_10(arr))"
"Create a new data structure to store the following information and write an algorithm to access it.Key: ""B""
 Value: ""Blue""","data_structure = {
    ""B"": ""Blue""
}

def access_data_structure(key):
    return data_structure.get(key)"
"Add an additional parameter to the following function.def greet(name):
    print(""Hello "" + name + ""!"")","def greet(name, message):
    print(message + "" "" + name + ""!"")"
Create a function `calculate_discount` to calculate 20% discount for a given price.price = 50,"def calculate_discount(price):
    return price * 0.8

discount = calculate_discount(price)"
Create a for loop which will run till the given number and add each number to a list.end_number = 10,"numbers = [] 
for num in range (1, end_number+1): 
    numbers.append(num)"
Create a function that detects whether a given string is a palindrome.string = ‘level’,"def detect_palindrome(string): 
    reversed_string = string[::-1] 
    if (string == reversed_string): 
        return ""This string is a palindrome"" 
    else: 
        return ""This string is not a palindrome""

print(detect_palindrome(string))"
"Write a code to filter and print all lines that end in the given character.string = ‘Hello world\nMy name is John\nHello again\nToday is Monday’
character = ‘n’","lines = string.split(""\n"") 
for line in lines: 
    if line.endswith(character): 
        print(line)"
"Assign 1 to all the elements of a 2D array that are divisible by 3.arr = [[1,2,3],
       [10,15,20],
       [3, 8, 6]]","for row in range(len(arr)): 
    for col in range(len(arr[row])): 
        if arr[row][col] % 3 == 0: 
            arr[row][col] = 1
print(arr)"
"Create a function named `binary_search` that implement a binary search algorithm.list = [1, 3, 5, 7, 8, 9, 11]
goal = 5","def binary_search(list, goal): 
    start = 0 
    end = len(list) - 1
    while start <= end: 
        mid = (start + end) // 2
        if list[mid] == goal: 
            return mid 
        elif goal < list[mid]: 
            end = mid - 1 
        else: 
            start = mid + 1
    return -1

result = binary_search(list, goal)
print(result)"
"Create a function called `replace_words` which replaces all the words specified in; the given list of words with their corresponding synonyms.string = “The quick brown fox jumps over the lazy dog”
words = [[‘quick’, ‘fast’], [‘lazy’, ‘sluggish’]]","def replace_words(string, words): 
    for item in words: 
        string = string.replace(item[0], item[1])
    return string

replaced_string = replace_words(string, words)
print(replaced_string)"
"Write a regular expression that captures all the words starting with ""A"".",^A\w+
"Create an array of the squared values of all elements of the given array.arr = [2, 3, 6, 8]","def square_arr(arr):
    return [x**2 for x in arr]"
"Write a Python function to find the minimum element from the given array.arr = [11, 9, 10, 14]","def find_min(arr):
    return min(arr)"
Add an import statement to the code to import the regex module.import sys,"import sys
import re"
"Write a Python code to construct a dictionary from the given input.key_arr = [100, 200, 300]
value_arr = [""apple"", ""banana"", ""mango""]","def dict_from_arrs(key_arr, value_arr):
    return dict(zip(key_arr, value_arr))"
"Initialize a dictionary using the given keys.keys=[""key1"", ""key2"", ""key3""]","keys = [""key1"", ""key2"", ""key3""]

dictionary = {key: None for key in keys}

print(dictionary)"
"Given two strings s1 and s2, find the number of times the characters in s2 are present in s1.s1 = ""Hello World"", s2 = ""o""","s1 = ""Hello World""
s2 = ""o""

def count_characters(s1, s2):
    count = 0
    for c in s1:
        if c == s2:
            count += 1
    return count

print(count_characters(s1,s2))"
"Filter out the integers from the list that are divisible by 6.nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]","nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]

def filter_divisible_by_6(nums):
    return [num for num in nums if num % 6 == 0]

print(filter_divisible_by_6(nums))"
"Transform and print the given list which includes negative and positive numbers.nums = [-5, -2, 3, 7, 1]","nums = [-5, -2, 3, 7, 1]

def transform(nums):
 return [abs(num) for num in nums]
 
print(transform(nums))"
"Replace all instances of a given character with another character.s = ""this is a sample string"", c=""s"", r=""x""","s = ""this is a sample string""
c = ""s""
r = ""x""

def replace_character(s, c, r):
    return s.replace(c, r)

print(replace_character(s, c, r))"
"Writing a regex pattern to match words starting with ""Py""",pattern = r'\bPy\w*\b'
"Rewrite the code to remove the unnecessary boolean flagflag = False
def printFooBar(x):
    fooBarArray = []
    for i in range(x):
        fooBarArray.append(i)
        flag = True
    if flag and len(fooBarArray) > 0:
        print(fooBarArray)","def printFooBar(x):
    fooBarArray = []
    for i in range(x):
        fooBarArray.append(i)
    if len(fooBarArray) > 0:
        print(fooBarArray)"
"Convert the following snippet from ES6 to ES5const multiply = ( x, y) => { return x * y };","var multiply = function(x, y) { 
    return x * y;
};"
"Classify the following pieces of dataTexas
Blue
Dog","State: Texas
Color: Blue
Animal: Dog"
"Using python, implement a method to find the longest common subsequence in two stringsstr1 = ""AGGTAB""
str2 = ""GXTXAYB""","def lcs(str1, str2, n, m): 
    if n == 0 or m == 0:          
        return 0
  
    elif str1[n-1] == str2[m-1]:   
        return 1 + lcs(str1, str2, n-1, m-1) 
 
    else: 
        return max(lcs(str1, str2, n, m-1),    
                   lcs(str1, str2, n-1, m))"
"Find the area of a triangle using the Heron's formulalengths = [3, 4, 5]","def herons_formula(lengths):
    a, b, c = lengths[0], lengths[1], lengths[2]
    s = (a + b + c) / 2
    area = (s*(s-a)*(s-b)*(s-c))** 0.5
    return area"
"Develop an algorithm to concatenate two strings.String 1: ""Hello,"" 
String 2: ""World!""","def concatenate(str1, str2):
  return str1 + str2"
Generate a random string with the a capital letter followed by two lower case letters.,"import string
import random
def random_string():

  capitalletter = random.choice(string.ascii_uppercase)
  lowercaseletter1 = random.choice(string.ascii_lowercase)
  lowercaseletter2 = random.choice(string.ascii_lowercase)

  return capitalletter + lowercaseletter1 + lowercaseletter2"
Generate a regular expression to match words that contain only lowercase letters.,^[a-z]+$
"You need to write an algorithm to find the third largest value in a Binary Search Tree.8 
      /   \
     3     10
    / \     \
   1   6     14
      / \    /
     4   7  13","def third_largest(root):
    if root is None:
        return None
 
    queue = []
    queue.append(root)
    while len(queue):
        curr = queue.pop(0)
 
        if curr.right:
            queue.append(curr.right)
        if curr.left:
            queue.append(curr.left)
 
    if len(queue)>1:
        return queue[1].val
    else:
        return root.val"
"Edit the given code to validate an IP address.# Function to validate an IPv4 address
def validate_IPv4(IP):","# Function to validate an IPv4 address
def validate_IPv4(IP):
    # Split the IP string by '.' 
    ip_split = IP.split('.')
    
    #Checking for the corner cases 
    if (len(ip_split) == 4) and (1 <= int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255): 
        return ""Valid IP!""
    else: 
        return ""Invalid IP!"""
"Develop an algorithm to modify a given string by changing the case of each character.string = ""Hello World""","def modify_string(string):
  new_string = """"
  for i in string:
    if (i.isupper()) == True:
      new_string += i.lower()
    elif (i.islower()) == True:
      new_string += i.upper()
  return new_string"
"Write a function to remove the first occurrence of a specified element from a given list.[2, 4, 8, 9, 4]","def remove_first_occurrence(arr, element):
    if element in arr:
        arr.remove(element)
    return arr"
"Write a function to find all elements that appear more than once in a given array.[1, 3, 2, 3, 8, 9, 10]","def find_duplicates(numbers):
    seen = set()
    duplicates = set()
    for num in numbers:
        if num in seen:
            duplicates.add(num)
        else:
            seen.add(num)
    return list(duplicates)"
Generate an 8 character random string.,"import string
import random

def gen_random_string(size):
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(size))

random_string = gen_random_string(8)
print(random_string)"
Create a script to delete all system logs.,"#!/bin/bash

# Remove all system log files
sudo rm /var/log/*.log"
Generate a string containing the first 10 characters of the alphabet in reverse order.,zyxwvutsrq
"Determine the function of the Bluetooth signal in the given program.void setup() {
  Serial.begin(9600);
  Bluetooth.begin(9600);
}

void loop() {
  BluetoothSignal();
}

void BluetoothSignal() {
 // Code to send a signal to the Bluetooth module.
}",The function of the Bluetooth signal is to send a signal to the Bluetooth module.
Create a Python program to convert a given temperature in Celsius to Kelvin.,"def convert_celsius_to_kelvin(celsius):
    kelvin = celsius + 273.15
    return kelvin"
"Edit the given Python code to compute the mean of the given list of numbers.my_list = [10, 20, 30, 40, 50]
sum = 0.0

for x in my_list:
  sum += x","my_list = [10, 20, 30, 40, 50]
sum = 0.0

for x in my_list:
  sum += x

mean = sum / len(my_list)"
Train a Random Forest classifier in Python on the Iris dataset.,"import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Import Iris dataset
iris_data = pd.read_csv(""iris.csv"")

# Split dataset into training and testing
X = iris_data.drop(""species"", axis=1)
y = iris_data['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Train a Random Forest classifier
clf = RandomForestClassifier() 
clf.fit(X_train, y_train)

# Make predictions
preds = clf.predict(X_test)"
"Rewrite the following if-statement into a switch statement.if (grade == ""A"") {
    gradeValue = 4.0;
}
else if (grade == ""B"") {
    gradeValue = 3.0;
}
else if (grade == ""C"") {
    gradeValue = 2.0;
}
else if (grade == ""D"") {
    gradeValue = 1.0;
}","switch(grade) {
  case 'A':
    gradeValue = 4.0;
    break;
  case 'B':
    gradeValue = 3.0;
    break;
  case 'C':
    gradeValue = 2.0;
    break;
  case 'D':
    gradeValue = 1.0;
    break;
  default:
    gradeValue = 0;
    break;    
}"
"Write a function in Python to normalize a given string by removing white spaces, changing to lower case and replacing special characters with underscores.""Hello World!""","def normalize_string(string):
    """"""Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.""""""
    # Remove whitespaces
    normalized_string = string.replace("" "", """")

    # Convert to lowercase
    normalized_string = normalized_string.lower()

    # Replace special characters
    characters = [""!"", ""@"", ""#"", ""$"", ""%"", ""^"", ""&"", ""*""]
    for c in characters:
        normalized_string = normalized_string.replace(c, ""_"")

    return normalized_string

# Example
normalized_string = normalize_string(""Hello World!"")
print(normalized_string)
# Output: hello_world_"
"Print the largest number in a given array in Python.my_array = [5, 11, 7, 10, 2]","my_array = [5, 11, 7, 10, 2]

# Function to find the largest number
def find_largest_number(array):
    # Assume that the first item in the array is the largest
    largest = array[0]

    # Now loop through the array to find the largest number
    for num in array:
        # If a number is larger than the assumed largest, it is the new largest number
        if num > largest:
            largest = num

    # Return the largest number
    return largest

# Call the function
largest = find_largest_number(my_array)

# Print the result
print(largest)
# Output: 11"
"Create a function in Python to add two numbers, which may take any number of arguments.","def add(*nums):
    """"""Add two or more numbers.""""""
    # Initialize sum
    result = 0

    # Iterate through given numbers
    for num in nums:
        result += num

    # Return the sum 
    return result
    
# Example
sum = add(15, 7, 10)
print(sum)
# Output: 32"
Implement a DFS algorithm for a tree data structure.,"def DFS(root):
    S = []
    visited = []
 
    S.append(root)
 
    while len(S) > 0:
        node = S.pop()
        visited.append(node)
 
        for vertex in node.get_adjacent_vertices():
            if vertex not in visited:
                S.append(vertex)
    return visited"
Construct a data mining program to mine public internet data.Twitter datasets,"import tweepy
 
CONSUMER_KEY = 'XXXXXXXXXXXXXXXXXXX'
CONSUMER_SECRET = 'XXXXXXXXXXXXXXXXXXX'
ACCESS_TOKEN = 'XXXXXXXXXXXXXXXXXXX'
ACCESS_TOKEN_SECRET = 'XXXXXXXXXXXXXXXXXXXX'

# authenticating
auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)

# initializing the API for data mining
api = tweepy.API(auth)

# pulling the data from Twitter
data = api.search(q=""data mining"", lang=""en"", count=100, tweet_mode=""extended"")

# processing the data
for tweet in data:
    print(tweet.full_text) # print the full text of each tweet"
"You need to develop a code that takes two strings and returns a boolean if the substrings are anagrams.Strings: ""computer"" and ""computer""","def isAnagram (str1, str2): 
    # Get length of both strings 
    n1 = len(str1) 
    n2 = len(str2) 
  
    # If length is not same, then strings are not anagrams 
    if n1 != n2: 
        return False
  
    # Sort both strings 
    str1 = sorted(str1) 
    str2 = sorted(str2) 
  
    # Compare sorted strings 
    for i in range(0, n1): 
        if str1[i] != str2[i]: 
            return False
  
    return True

print (isAnagram(""computer"", ""computer""))"
"Develop a function to encode a text string in a ROT13 manner.String: ""Hello World""","def rot13(message):
    output = []
    for char in message:
        char_code = ord(char)
        if char_code >= ord('A') and char_code <= ord('Z'):
            # Rotate lower case characters
            char_code += 13
            if char_code > ord('Z'):
                char_code -= 26
        elif char_code >= ord('a') and char_code <= ord('z'):
            # Rotate upper case characters
            char_code += 13
            if char_code > ord('z'):
                char_code -= 26
        output.append(chr(char_code))
    return ''.join(output)
print(rot13(""Hello World""))"
Write the Big O time complexity of the given algorithm.Algorithm: Finding the value at a given index of an unordered array.,O(n).
"Given two strings, develop a function to calculate edit distance between them.Strings: ""kitten"" and ""sitting""","def edit_distance(str1, str2): 
    n1 = len(str1) 
    n2 = len(str2) 

    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] 

    for i in range(n1 + 1): 
        for j in range(n2 + 1): 
            if i == 0: 
                dp[i][j] = j
            elif j == 0: 
                dp[i][j] = i
            elif str1[i - 1] == str2[j - 1]: 
                dp[i][j] = dp[i - 1][j - 1] 
            else: 
                dp[i][j] = 1 + min(dp[i][j - 1],
                                   dp[i - 1][j],
                                   dp[i - 1][j - 1]) 
  
    return dp[n1][n2] 

edit_distance(""kitten"", ""sitting"")"
"You need to develop a function which checks if a given string is palindrome or not.String: ""redder""","def is_palindrome(input_string): 
    # Convert string to lower case to ignore capitalization.
    input_string = input_string.lower() 
    # Reverse input string 
    rev_string = reversed(input_string) 
  
    # Check if strings are equal or not 
    if (list(input_string) == list(rev_string)): 
        return True
    else: 
        return False
  
print(is_palindrome(""redder""))"
"Create an algorithm that sorts a given list of numbers.[1, 5, -3, 0, 8]","def bubble_sort(list):
  for i in range(len(list)):
   for j in range(len(list)-1-i):
    if list[j] > list[j+1]:
     list[j], list[j+1] = list[j+1], list[j]
  return list

bubble_sort([1,5,-3,0,8])"
Create an algorithm to implement a stack using a single queue.,"class Stack:
    def __init__(self):
        self.queue = []

    def push(self, item):
        self.queue.append(item)
        # Reverse the queue to implement a stack
        self.queue.reverse()

    def pop(self):
        if self.queue:
            # Reverse the queue to implement a stack
            self.queue.reverse()
            return self.queue.pop()
        return None"
Write a Python code snippet to check if an integer is between 5 and 10 (including both).x = 8,"if 5 <= x <= 10:
    print('The integer is between 5 and 10.')
else:
    print('The integer is not between 5 and 10.')"
Write an R script to create a histogram of a given array of numeric values.,"# Load libraries
library(ggplot2)

# Define the data
data <- c(1, 4, 6, 8, 12, 16, 20)

# Create the histogram
ggplot(data.frame(x=data), aes(x)) + geom_histogram(bins = 5, fill = ""#0072B2"", color = ""black"")"
"Given the following nested loop structure, write code to print all elements in the array.arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","for row in arr:
    for elem in row:
        print(elem, end=' ')
    print()

# Output
# 1 2 3
# 4 5 6
# 7 8 9"
"Physicists often use the constant, Planck's constant, to measure the frequency of light waves. What is the value of Planck's constant?","Planck's constant (denoted by h) is a physical constant that has a value of 6.62607015×10-34 kg m2/s. It is the fundamental physical constant that is used to describe the size of quantum effects. It is named after physicist Max Planck, who first proposed it in 1900."
"Suppose you have a list of numbers and you want to add all the numbers together. Write a loop to do so.[1, 2, 3, 4, 5]","sum = 0
nums = [1, 2, 3, 4, 5]
for num in nums:
    sum += num

print(sum)

# Output
15"
"We have a list of numbers, what is the correct syntax for finding the sum of all the numbers?[1, 2, 3, 4, 5]","total = 0
nums = [1, 2, 3, 4, 5]
for num in nums:
    total += num
    
print(total)

# Output
15"
"Translate the sentence ""I'm having dinner at 8pm"" into French.",Je prends mon dîner à 20h.
"Write a Python program to insert a given string at a specific position within another given string.string1 = 'Python is fun' 
string2 = 'awesome '
position = 7","def insert_string(string1, string2, pos):
    return string1[:pos] + string2 + string1[pos:]"
"Given two lists, write a Python program to print all common elements in them.list1 = [10, 20, 30, 40] 
list2 = [30, 40, 50, 60]","def common_elements(list1, list2):
    common = []
    for elem in list1:
        if elem in list2:
            common.append(elem)
    return common"
Design a program in Python which takes a string as input and returns a list of words from the string.string1 = 'Python Programming is Fun!',"def get_words(string1):
    words = string1.split()
    return words"
"Design a program in Python to remove all even elements from a given list.lst = [2, 4, 5, 6, 8, 10]","def remove_even(lst):
    evens = []
    for num in lst:
        if num % 2 != 0:
            evens.append(num)
    return evens"
"Design a code to check if a given list is ordered in an increasing order.lst = [1, 2, 3, 5, 4]","def is_increasing(lst):
    for i in range(len(lst)-1):
        if lst[i] >= lst[i+1]:
            return False
    return True"
"Write a Python program to replace the last element in a list with another given element.lst = [1, 2, 3, 4]
element = 5","def replace_last(lst, element):
    lst[-1] = element
    return lst"
Modify the following given program to print all prime number between 1 and n,"def check_prime(n):
    if n == 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True
def print_prime_numbers(n):
    for num in range(1, n + 1):
        if check_prime(num):
            print(num)"
Edit the following code to calculate the standard deviation of a given list,"def calculate_std_dev(nums):
    mean = sum(nums)/len(nums)
    sum_deviation = 0
    for num in nums:
        diff = num - mean
        squared_deviation = diff ** 2
        sum_deviation += squared_deviation
    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5
    return std_dev"
Modify the following code to generate the Fibonacci sequence up to the nth term,"def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Write a code to retrieve tweets from a specific Twitter account by using their API.Twitter account: ""@twitter""","""""""
Retrieve tweets from a specific Twitter account
""""""

import tweepy

#Enter the respective information 
consumer_key = 'XXXXXXXXXX'
consumer_secret = 'XXXXXXXXXX'
access_token = 'XXXXXXXXXX'
access_token_secret = 'XXXXXXXXXX'

#Authentication using the given keys 
auth = tweepy.OAuthHandler(consumer_key, consumer_secret) 
auth.set_access_token(access_token, access_token_secret) 

#getting the API  
api = tweepy.API(auth) 

#fetch tweets related to ""@twitter""
tweets = api.user_timeline(""@twitter"") 

#display first five tweets 
for tweet in tweets[:5]: 
    print(tweet.text)"
Write a code to get the IP address of a system.,"import socket 
  
hostname = socket.gethostname() 
IPAddr = socket.gethostbyname(hostname) 
  
print(""The IP address of the system is:"" + IPAddr)"
"Create a code that removes all duplicate elements in a given array.Array: [5, 10, 5, 7, 10]","def unique_elements(arr): 
    new_arr = [] 
    for i in arr:
        if i not in new_arr: 
            new_arr.append(i) 
    return new_arr 
  
arr = [5, 10, 5, 7, 10] 

print(unique_elements(arr)) # [5, 10, 7]"
"Write a code to implement insertion sort on a given list.List: [4, 3, 6, 1, 5]","def insertionSort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >= 0 and key < arr[j] : 
                arr[j + 1] = arr[j] 
                j -= 1
        arr[j + 1] = key 
  
arr = [4, 3, 6, 1, 5]
insertionSort(arr)
print (""Sorted array is: "") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
"Modify a given code to sort a two-dimensional array (matrix) using bubble sort.Matrix: 
[[1, 5, 2], 
[8, 4, 6],
[3, 7, 9]]","def bubble_sort(arr): 
    n = len(arr) 
    for i in range(n):
        for j in range(0, n-i-1): 
            for k in range(0, 3): 
                if arr[j][k] > arr[j+1][k] : 
                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]
  
arr = [[1, 5, 2], 
       [8, 4, 6], 
       [3, 7, 9]]

bubble_sort(arr)
print(""Sorted matrix: "") 
for row in arr: 
    print(row)"
"Construct a Python class to represent a student with attributes such as name, age, and course. The class should have a method that returns the student information in a formatted outputStudent Name: John Smith
Age: 17
Course: Computer Science","class Student: 
    def __init__(self, name, age, course): 
        self.name = name 
        self.age = age
        self.course = course

    def get_info(self): 
        return f""Name: {self.name}, Age: {self.age}, Course: {self.course}""

student = Student(""John Smith"", 17, ""Computer Science"")

print(student.get_info()) # Name: John Smith, Age: 17, Course: Computer Science"
"Create a text classifier using a Random Forest algorithm.[['Ready Player One', 'Adventure'],
['IT', 'Drama'],
['Halloween', 'Horror'],
['Pirates of the Caribbean', 'Adventure']]","""""""
Create a text classifier using a Random Forest algorithm
""""""
 
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# create the dataframe from the given input
df = pd.DataFrame(columns=['text', 'category'], data=input)

# define the features and labels
X = df['text']
y = df['category']

# create and train the model
model = RandomForestClassifier(n_estimators=100, random_state=0)
model = model.fit(X, y)"
Write a code to create a 3x3 matrix with all elements 1.,"#import numpy library
import numpy as np

#create a 3x3 matrix with all elements 1 
x = np.ones((3,3))
print(x)"
Design a linked list data structure.,"""""""
Design a linked list data structure
""""""

class ListNode:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = ListNode(data)

        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = new_node

    def search(self, target):
        current = self.head
        while current is not None:
            if current.data == target:
                return current
            current = current.next
        return None

    def print_list(self):
        current = self.head
        while current is not None:
            print(current.data)
            current = current.next"
"Create a FOR loop to print out the odd numbers between a given range.min = 1, max = 10","""""""
Create a FOR loop to print out the odd numbers between a given range
""""""

# define the range
min = input[0]
max = input[1]

# iterate through the range
for i in range(min, max+1):
    # check for odd numbers
    if i % 2 == 1:
        print(i)"
What does the `filter()` method do in Python?,"The filter() method in Python takes in a function and a list as arguments. The function is called with all the items in the list and a new list is returned which contains items
for which the function evaluates to True.
It is typically used to filter out elements from a list based on a certain condition."
"Create a tuple `numbers` with the elements 1, 2, 3 and 4.","numbers = (1, 2, 3, 4)"
"Write a code to remove elements from a list using the `remove()` method.list = [1, 2, 3, 4]","list = [1, 2, 3, 4]
list.remove(2)
list.remove(3)

# list is now [1, 4]"
Write a code to find the maximum of 3 arguments.,"def find_max(a, b, c):
    max_value = a
    if b > max_value:
        max_value = b
    if c > max_value:
        max_value = c
    return max_value

print(find_max(1, 2, 3))  # Output: 3"
"Create an array with the elements 1, 2, 3, and 4 and name it 'numbers'.","numbers = [1, 2, 3, 4]"
Code an while loop statement to print a string with the value of the variable num.num = 10,"while num > 0:
    print(""The value of num is "" + str(num))
    num -= 1"
"Create a function that takes two numbers as an argument and compares them to find the highest number.x = 5
y = 8","def highest_number(num1, num2):
  if num1 > num2:
    return num1
  else:
    return num2

highest_number(x, y)   # returns 8"
"Read the following code and identify all the objects present in it.class Person:
    name = 'John'
    age = 25","In the given code, the object is ‘Person’, and the two data attributes of the object are ‘name’ and ‘age’."
"Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.shopping_list = {
    'item1': 2.5,
    'item2': 3.5,
    'item3': 4.25
}","shopping_list = {
    'item1': 2.5,
    'item2': 3.5,
    'item3': 4.25
}

def calculate_cost(list):
    cost = 0
    for item in list:
        cost += list[item]
    return cost

total_cost = calculate_cost(shopping_list)
print(total_cost)  # prints 10.25"
"Write a code to input an array and find the maximum and minimum element in it.arr = [1, 2, 3, 4, 5, 6]","def find_min_max(arr):
    min_num = arr[0]
    max_num = arr[0]
    for num in arr:
        if num < min_num:
            min_num = num 
        if num > max_num:
            max_num = num 
    return max_num, min_num

max_num, min_num = find_min_max(arr)
print('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1"
"Generate a random string of length 10 that consists of characters 'a', 'b' and 'c'.","import random

random_string = ''.join(random.choices(['a', 'b', 'c'], k=10))
print(random_string)  # prints something like ccaacccaac"
"Write a Python code using list comprehension to get the power of each element in a list.list_num = [1, 2, 3, 4, 5]","power_list = [num**2 for num in list_num]
print(power_list)  # prints [1, 4, 9, 16, 25]"
"Edit the following code to insert a new item at the end of a given Python list.items = [1, 2, 3]
new_item = 4","items = [1, 2, 3] + [new_item]
print(items)  # prints [1, 2, 3, 4]"
"Create a function that takes a string and a keyword, then delete all the occurrences of the keyword in the given string.str = ""I am going to the market to buy apples""
keyword = ""apples""","def delete_occurrences(string, keyword):
    new_str = string.replace(keyword, '')
    return new_str

print(delete_occurrences(str, keyword))  # prints ""I am going to the market to buy"""
Create a list of 5 integers and print out their product.,"""""""
Create a list of 5 integers and print out their product
""""""

list_of_ints = [1, 2, 3, 4, 5]

product = 1
for i in list_of_ints:
    product *= i
print(product)"
"Print the duplicated items in an array of integers.array: [1, 2, 3, 2, 5, 1]","""""""
Print the duplicated items in an array of integers
""""""

public class DuplicateItems 
{
    public static void main(String[] args) 
    {
        int [] array = {1, 2, 3, 2, 5, 1};
        List<Integer> duplicates = new ArrayList<Integer>();
        
        for(int i = 0; i < array.length-1; i++){
            for(int j = i+1; j < array.length; j++){
                if(array[i] == array[j] && !duplicates.contains(array[i])) {
                    duplicates.add(array[i]);
                }
            }
        }
        System.out.println(""Duplicate items: "" + duplicates);
    }
}"
"Write a code in Python to remove all the duplicate elements from a list and print the result.list: [2, 3, 3, 4, 5, 5]","""""""
Write a code in Python to remove all the duplicate elements from a list and print the result
""""""

def remove_duplicates(lst):
    new_list = []
    for i in lst:
        if i not in new_list:
            new_list.append(i)
    return new_list

if __name__ == '__main__':
    lst = [2,3,3,4,5,5]
    print(""List with duplicates removed:"", remove_duplicates(lst))"
Evaluate the expression 3^2 + 5%2.,"""""""
Evaluate the expression 3^2 + 5%2
""""""

int result = 3^2 + 5%2;
System.out.println(""Result: ""+ result);

// Output: Result: 8"
"Given a string and two words, write a program to find the shortest sub sequence containing both words.String: the quick brown fox jumps over the lazy dog
Two words: quick and dog","The sequence is ""quick brown fox jumps over the lazy dog""."
What is the Big O notation of the algorithm you wrote in Task 8?,"The algorithm has an O(n) time complexity, where n is the size of the input."
Write a code to traverse a matrix in spiral form.,"def spiral_traverse(matrix):
    top = 0
    left = 0
    right = len(matrix[0])-1
    bottom = len(matrix)-1
    while top <= bottom and left <= right:
        for i in range(left, right+1):
            print(matrix[top][i], end = ' ')
        top += 1
        for i in range(top, bottom+1):
            print(matrix[i][right], end = ' ')
        right -= 1
        if top <= bottom:
            for i in range(right, left-1, -1):
                print(matrix[bottom][i], end = ' ')
            bottom -= 1
        if left <= right:
            for i in range(bottom, top-1, -1):
                print(matrix[i][left], end = ' ')
            left += 1"
What is abstraction in computer programming?,Abstraction in computer programming is the process of hiding details of how the code is implemented and only exposing the information that is necessary. It involves separating a complex task into simpler and smaller units in order to solve problems efficiently. It also helps to break down a complex system into its fundamental parts and allow a programmer to focus on the most important parts.
Write a reusuable function in Python that takes two string variables and returns the longest string.,"def longest_string(str1, str2):
    if len(str1) > len(str2):
        return str1
    else:
        return str2"
Extract all the words from a given sentence and save them to a list.Sentence: This is a sample sentence with words.,"words = [""this"", ""is"", ""a"", ""sample"", ""sentence"", ""with"", ""words""]"
"Translate the following statement from English to Python code: ""If the value of x is greater than 10, print 'x is greater than 10.""","if x > 10:
    print(""x is greater than 10."")"
Suggest a way to filter out comments containing profane language in a text corpus.,"One way to filter out comments containing profane language in a text corpus is to use a rule-based algorithm with a list of profane words and phrases. This algorithm can be configured to identify words or phrases in a given corpus that match the list of profane words and phrases, and flag them as inappropriate. A second approach is to use natural language processing to identify profane content. This involves training a machine learning model to detect profanity by analyzing patterns in the text, such as its word or phrase context, structure, and so on."
"Create a class called 'Product' in Python and assign the following attributes to it.name, price, description","class Product:
    """"""
    A class that represents a product with its attributes.
    """"""
    def __init__(self, name, price, description):
        """"""
        Initialize a Product object.
        """"""
        self.name = name 
        self.price = price 
        self.description = description"
Suggest a way to generate random passwords using Python.,"One way to generate random passwords using Python is to use the string module's methods. Using the string.ascii_letters and string.digits sequences, we can create a random sequence of alphanumeric characters. The string module's choice() function can then be used to randomly select characters from this sequence to create a new password string. The length of the password should be specified as an argument to the choice() function. For example, to generate an 8 character long password, you can use string.choice(string.ascii_letters + string.digits, 8)."
"Create a switch statement to convert an RGB value to HEX.rgb = (255, 205, 100)","const convertRGBtoHEX = (rgb) => {
    let hex = '';
    switch (rgb) {
        case (rgb[0], rgb[1], rgb[2]):
            hex = (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16);
            break;
        default:
            hex = ""000000"";
            break;
    }
    return hex;
}

console.log(convertRGBtoHEX([255, 205, 100]))"
"Construct a loop that prints the even numbers from 0 to 20, one number per line.","for i in range(0, 21):
    if i % 2 == 0:
        print(i)"
"Create a function that takes an array as a parameter and continuously adds each item to the total sum.arr = [6, 4, 3, 10]","def addItems(arr):
  total = 0
  for number in arr:
    total = total + number
  return total"
"Count the number of occurrences of the letter “a” in a given string.string = ""My favorite animal is a dog""",# 3
"Should function A call function B or function B call function A?A:
function getData() {
  // do something
  return data;
}

B:
function processData(data) {
  // do something
  return processedData;
}","Function B should call function A, since function A is the one that provides the data for the processing done by function B."
"Perform a bubble sort on the following array of numbers.const arr = [9, 5, 7, 11, 2]","let arr = [9, 5, 7, 11, 2];

function bubbleSort(arr) {
  let swapped;

  do {
    swapped = false;
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] > arr[i+1]) {
         let temp = arr[i];
         arr[i] = arr[i+1];
         arr[i+1] = temp;
         swapped = true;
      }
    } 
  }
  while (swapped);

  return arr;
}

bubbleSort(arr);
// Output: [2, 5, 7, 9, 11]"
"Create a for loop that prints the contents of a list of strings.list_of_strings = [""John"", ""Bob"", ""Jill"", ""Sara""]","list_of_strings = [""John"", ""Bob"", ""Jill"", ""Sara""]

for name in list_of_strings:
    print(name)"
Find the longest word in a piece of text.The quick brown fox jumps over the lazy dog,"# Find the longest word in a piece of text

# Split the text into a list of words
words =  ""The quick brown fox jumps over the lazy dog"".split()

# Initialize a variable to keep track of the longest word
longest_word = """"

# Loop over each word in the list
for word in words:
    # Check if the current word is longer than the longest word
    if len(word) > len(longest_word):
        # Update the longest word
        longest_word = word

# Print the longest word
print(longest_word)"
"Create a program that assigns an ID to each element of an array.arr = [""Car"", ""Bike"", ""Bus""]","# Create program that assigns an ID to each element of an array

arr = [""Car"", ""Bike"", ""Bus""]

# Initialize a counter
counter = 0

# Loop over each element of the array
for element in arr:
    # Assign an ID to the element (in this case, the counter value)
    element_id = counter

    # Print the assigned ID
    print(f""Element {element} is assigned ID {element_id}"")

    # Increment the counter
    counter += 1"
What is the factorial of 5?,The factorial of 5 is 1
Implement a random number generator in Python that returns a random number in the range of 1-100.,"import random

def rand_num():
    return random.randint(1, 100)"
"Find the longest substring of two characters that is a palindrome.string = ""banana""","def longest_palindrome(string):
    # Create an empty substring
    longest_substring = ''
    
    # Iterate through the string
    for i in range(len(string)-1): 
        for j in range(i+1, len(string)):
            substring = string[i:j+1]
            if substring == substring[::-1] and len(substring) > len(longest_substring):
                longest_substring = substring
    return longest_substring

# Call the function
longest_palindrome('banana') # returns 'anana'"
Create a class in Python and define several functions for that class.,"class MyClass:
    def __init__(self):
        pass 

    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y

    def multiply(self, x, y):
        return x * y

    def divide(self, x, y):
        return x / y"
"Given an array of integers, write an algorithm to find the maximum difference between any two elements in the array.nums = [3, 2, 7, 1, 4]","def find_max_difference(nums):
    # Initialize a max difference
    max_diff = float('-inf')
    
    # Iterate through the array
    for i in range(1, len(nums)):
        diff = nums[i] - nums[i-1]
        if diff > max_diff:
            max_diff = diff
    
    return max_diff

# Call the function
find_max_difference([3, 2, 7, 1, 4]) # returns 6"
Create a list in Python of elements 0-9 in random order.,"import random 

# Generate a list of 10 numbers
nums = [i for i in range(10)]

# Shuffle the list
random.shuffle(nums) 

# Print the shuffled list
print(nums) # [5, 0, 2, 3, 9, 8, 4, 1, 7, 6]"
Design a data structure to store books that keeps track of page numbers.,"class Book:
    def __init__(self, title, num_pages):
        self.title = title
        self.num_pages = num_pages
        self.pages_read = 0
    
    def read(self, num_pages):
        self.pages_read += num_pages

# Create an instance
book = Book(""War and Peace"", 1220)

# Read some pages
book.read(50)

# Check the number of pages read
book.pages_read # returns 50"
"Edit a given sentence to make its sentence structure correct.sentence = ""This is wrong sentence structure""","sentence = ""This sentence has an incorrect structure."""
Create a function to calculate log base 10 in Python.,"import math

def log10(x):
    return math.log10(x)

if __name__ == '__main__':
    print(log10(10))"
Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.n=5,"#Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.

def num_permutations(n):
    if n == 0:
        return 0
    else:
        return math.factorial(n)

if __name__ == '__main__':
    print(num_permutations(5))"
Write an algorithm to print all possible combinations of balanced parentheses.,"def generateParenthesis(N): 
    string = """" 
    result = [] 
  
    # dfs on the result 
    def generate(left, right, string): 
        if (left == 0 and right == 0): 
            result.append(string) 
            return
  
        if left > 0: 
            generate(left - 1, right, string + ""("") 
  
        if left < right: 
            generate(left, right - 1, string + "")"") 
  
    # calling the function 
    if N > 0: 
        generate(N, N, string) 
    return result 
  
# Driver function 
print(generateParenthesis(3))"
Find the sum of the sequence of numbers from 1 to 10.,55
"How is an ""infinite loop"" created?","An infinite loop is created by writing a loop that always evaluates to true, causing it to repeat indefinitely. This can be done by writing the loop with no condition, or a condition that can never be false. For example, a loop with the condition “i < 10” will run infinitely if it increments i by 1 each time, as its value will never reach 10."
"What is ""branching"" in version control systems?","Branching is the ability to create a separate line of development within a version control system. This allows developers to have multiple versions of the same project, each with its own unique changes. Branches are used to isolate different features or bug fixes in different versions, without affecting the main line of development."
"Write code to sort a Python list of tuples based on their second element in the tuple.list_of_tuples = [('a', 5), ('b', 1), ('c', 10)]",list_of_tuples.sort(key=lambda tup: tup[1])
"Create a program in Python to remove duplicate values from a list.list_a = [1, 2, 2, 3, 4, 4]","def remove_duplicates(list): 
    unique = [] 
    for item in list: 
        if item not in unique: 
            unique.append(item) 
    return unique 

list_a = [1, 2, 2, 3, 4, 4]
list_a = remove_duplicates(list_a)
print(list_a)"
What is the definition of polymorphism in programming?,"Polymorphism in programming is a principle allowing the same code to be used for objects of different types, or for a given object to behave differently in different contexts. Polymorphism is an essential element of object-oriented programming, as it allows for code reusability, among other benefits. Polymorphism is achieved in programming by using inheritance and abstraction, along with virtual functions and templates. Examples of polymorphism include the various forms of overloading and overriding, and type punning."
Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds.time_string = '01:10:30',"def time_in_seconds(time_string):
    hour, minutes, seconds = map(int, time_string.split(':'))
    return second + minutes * 60 + hour * 3600
time_in_seconds(time_string) # 4290"
"Write a helper function in Haskell that prints out a given string in uppercase.str = ""hello""",uppercase str = map toUpper str
"What is a hashmap, and what is it used for?",A hashmap (also known as a dictionary or associative array) is a data structure that stores key-value pairs. It is used to store and retrieve information using a keyword or search term as the key. The key can then be used to quickly fetch the associated value from the hashmap. This makes hashmaps a powerful tool for storing and accessing large amounts of data efficiently.
"Write a code snippet to add two numbers provided in two lists.list1 = [2, 4, 3]
list2 = [5, 6, 4]","new_list = []
 
for i in range(len(list1)):
    new_list.append(list1[i] + list2[i])
 
print(new_list) # Output: [7, 10, 7]"
What data structure can you use to store a set of unique values?,"A set is a data structure that stores a collection of unique values. A set is efficient for checking if a particular value exists in the collection, as the existence of the value can be checked in constant time."
"You are given two strings, A and B. Write a function to delete the characters in A that also appear in B.A = 'abcbbdef'
B = 'abcdc'","def delete(A, B):
    for i in B:
        if i in A:
            A = A.replace(i, '')
    return A

delete(A, B) # Output: 'bdef'"
"You need to read a code and predict possible problems.def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return (fib(n-1) + fib(n-2))","The main problem with this code is that it is not very efficient. It uses a recursive approach which requires solving the same subproblem multiple times, thus leading to a large time complexity. To improve the efficiency of the code, it could be rewritten to use iteration instead of recursion."
"Create a sorting algorithm in Python that will sort an array of numbers in ascending order[3, 1, 5, 2, 4, 6]","def sort_nums_asc(arr):
    for i in range(len(arr)):
        lowest_value_index = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[lowest_value_index]:
                lowest_value_index = j
        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]
    return arr"
Classify a given paragraph as having a positive or negative sentimentThe customer service was horrible and the wait was too long.,Negative
"Create a Python class that processes a string of textString = ""Hello World""","class StringProcessor:
    def __init__(self, String):
        self.string = String

    def processString(self):
        myString = """"
        for char in self.string:
            if char.isalnum():
                myString += char.lower()
        return myString"
Generate a list comprehension in Python to get the cube of all the numbers between 1 to 10,"cubes_list = [x**3 for x in range(1, 11)]"
"Create an array of length n, containing all even numbers starting from 0.","def create_array(n):
    arr = []
    for i in range(0, n, 2):
        arr.append(i)
    return arr"
"Create an XML document with three elements ""Company"", ""Product"", and ""Price"".","<?xml version=""1.0"" encoding=""utf-8""?>
<root>
 <Company>Company Name</Company>
 <Product>Product Name</Product>
 <Price>Price in Dollars</Price>
</root>"
"Train a SVM model on the given input data to classify the output as either ""yes"" or ""no"".x1, x2, y
2, 3, Yes
3, 4, Yes
3, 5, No","model = svm.SVC(kernel=""linear"")
model.fit(X, y)"
"Sort the given array [1, 7, 5, 4, 2] in ascending order.","let arr = [1, 7, 5, 4, 2];
arr.sort(function(a, b){return a-b});

console.log(arr); // [1, 2, 4, 5, 7]"
"Classify the following sentence into either Affective or Predicate.""She was beautiful.""",Affective
Describe the working of a set in Python.,"A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them."
"Create a function in R that will return the maximum number in a given vector.vec <- c(3,2,5,1,4,0)","max_num <- function(v){
  return(max(v))
}
max_num(vec)"
"Edit the following code so that it prints the first odd number in a given list.nums = [2, 3, 4, 5, 6]","for num in nums:
    if num % 2 == 1:
        print(num)
        break"
Create a Python 3 script that prints out the total number of days in the current month.,"import calendar

print(calendar.monthrange(2020, 11)[1])"
"Give an algorithm to delete a key, say k, from a binary search tree (BST).","1. If the tree is empty, then return 
2. Find the key to be deleted in the tree and store it in a temporary node. 
3. Check if the key to be deleted has zero children or one child. 
    a. If the key has one child, then copy the child to the temporary node and delete the key. 
    b. If the key has two children, then find inorder successor of the key, copy it to the temporary node and delete the key.
4. Free the memory occupied by the temporary node."
Fill the missing statement for for-while loop based on following pseudocode:i = 1,"while i <= 10:
 # write statement here 
 print(i)
 i = i + 1"
"Implement an algorithm to find all the sets of three numbers in an array which adds up to a given number.Array: [2, 5, 8], Number: 10","def three_sum(array, number):
   result_sets = [] 
   for i in range(len(array) - 2):
       for j in range(i+1, len(array) - 1):
           for k in range(j+1, len(array)):
               if array[i] + array[j] + array[k] == number: 
                   result_sets.append([array[i], array[j], array[k]])
   return result_sets 

print(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]"
Create a query to find the total payments from one customer in the last 10 months.,"SELECT SUM(payment_amount) 
FROM payments 
WHERE payment_date > NOW() - INTERVAL 10 MONTH 
AND customer_id = '<customer_id>';"
"Create an algorithm to find the longest common substring from two given strings.String1: 'Hello World', String2: 'Hey World'","def longest_common_substring(s1, s2): 
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] 
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)): 
        for y in range(1, 1 + len(s2)): 
            if s1[x - 1] == s2[y - 1]: 
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else: 
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]

print(longest_common_substring('Hello World', 'Hey World'))  # Result: 'ello Wo'"
"Take the following array as an argument and output the sum of all the numbers in the array using Python.[1, 2, 3, 4, 5]","def sum_of_array(arr):
  return sum(arr)

array = [1, 2, 3, 4, 5]
result = sum_of_array(array)

print(resutl) # Output: 15"
Code a function in Python to calculate the nth value of the Fibonacci sequence.,"def fibonacci(n): 
    if n <= 0: 
        return 0 
    elif n == 1: 
        return 1
    else: 
        return fibonacci(n-1) + fibonacci(n-2)"
Visit the API documentation and create code to make a POST request using Python.,"import requests 
  
data = {'name': 'John Doe', 'age': '25'} 
  
headers = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} 
  
response = requests.post('https://example.com/api/v1/data', data=data, headers=headers)"
"Use nltk package in Python and remove stopwords from the given text.Text: ""I am wondering what is the best way to learn English.""","import nltk
from nltk.corpus import stopwords

txt = ""I am wondering what is the best way to learn English.""
words = nltk.word_tokenize(txt)
filtered_words = [w for w in words if not w in stopwords.words('english')] 
  
print(filtered_words)"
"Construct a switch statement for the given pseudo-code.switch (day)
  case Sunday:
    print(""Sunday is a Day of Rest"");
    break;
  case Saturday:
    print(""Saturday is a Day of Work"");
    break;","switch (day)
{
  case ""Sunday"":
    printf(""Sunday is a Day of Rest"");
    break;
  case ""Saturday"":
    printf(""Saturday is a Day of Work"");
    break;
  default:
    printf(""Default Action"");
    break;
}"
"Build a function to loop through an array and check if each key exists in the object.array = [1,2,3]
object = {
  1: 'one',
  2: 'two'
}","function checkKeys(array, object) {
  for (let i = 0; i < array.length; i++) {
    let key = array[i];
    if (object.hasOwnProperty(key)) {
      console.log(""key ""+key+"" exists"");
    } else {
      console.log(""key ""+key+"" does not exist"");
    }
  }
}"
"Develop a program to spell a given word.""Hello""","def spellWord(word):
    words = list(word)
    for i in range(len(words)):
        print(words[i])"
Fill in the blank to print a string 7 times.,"for i in range(7):
    print(""Hello, World!"")"
Edit the following code to increment a variable by one when its value is less than 10.int i = 5;,"int i = 5;
if (i < 10) {
    i++;
}"
"Write a Python program to remove the nth index character from a nonempty string.var_str = Python, n = 0","def remove_character(var_str, n):
  first_part = var_str[:n] 
  last_part = var_str[n+1:]
  return first_part + last_part

print(remove_character('Python', 0))

Output: ython"
"Iterate over a list and count the number of occurrences of each item.list1 = [10, 20, 30, 10, 10, 40, 10]","def count_instances(list1):
    count_dict = dict() 

    for item in list1: 
        if (item in count_dict): 
            count_dict[item] += 1
        else: 
            count_dict[item] = 1
   
    for key, value in count_dict.items(): 
        print(f""{key} : {value}"") 
  
count_instances(list1)

Output: 10 : 4, 20 : 1, 30 : 1, 40 : 1"
"Determine the longest word in a given string.sentence = ""I am Python Programmer""","def longest_word(sentence):
    words = sentence.split()
    max_len = len(words[0])
     
    for word in words:
        if len(word) > max_len:
            max_len = len(word)
            max_word = word
     
    return max_word
 
print(longest_word('I am Python Programmer'))

Output: Programmer"
"Given a number n, print “Hello” n times.n = 5","def print_hello(n):
    for i in range (n):
        print(""Hello"")

print_hello(5)

Output: 
Hello 
Hello 
Hello 
Hello 
Hello"
"Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences.str1 = ""Strawberry"", str2 = ""berry""","def check_case_ignore(str1, str2):
    return str1.lower().endswith(str2.lower())

print(check_case_ignore('Strawberry', 'berry'))

Output: True"
"Get all permutations of string.string = ""abc""","from itertools import permutations 
  
def permutations_string(string):
    return list(permutations(string))

permutations_string(""abc"")

Output: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]"
"You are given a list of numbers. Count how many of them are prime numbers.[1,2,3,4,5,6,7]","def count_primes(numbers):
    count = 0
    for number in numbers:
        if is_prime(number):
            count += 1
    return count
 
def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, number):
        if number % i == 0:
            return False
    return True"
"Edit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.def handleInput(name):
  if len(name) > 0:
    print('Hello, ' + name)","def handleInput(name):
    if len(name) > 0:
        print('Hello, ' + name)
    else:
        print('No name provided.')"
"Is the following code syntactically correct?function addNumbers(a, b) {
  return a + b",Yes. The function is syntactically correct.
Create a JS program that rotates a given string by 3 characters.,"function rotateString(string) { 
	return string.slice(3) + string.slice(0, 3); 
}"
"Modify the following code so that it takes a string as a parameter, reverses it and prints out the reversed string.str = ""Hello World!""","def reverse_string(str):
  reverse = """" 
  # Traverse through each letter of the input string 
  for i in range(len(str) - 1, -1, -1): 
    reverse = reverse + str[i] 
  print(reverse)"
"Find a way to randomly swap two elements of an array.[1, 2, 3, 4, 5]","import random 
# Function to swap two elements 
# in a list at positions i and j  
def swap(arr, i, j): 
    arr[i], arr[j] = arr[j], arr[i] 

# Function to generate a random 
# permutation of arr[]  
def randomize ( arr, n ) : 
    # Start from the last element and swap 
    # one by one. We don't need to run for
    # the first element that's why i > 0 
    for i in range(n-1,0,-1): 
        # Pick a random index from 0
        # to i 
        j = random.randint(0,i+1) 
        # Swap arr[i] with the element 
        # at random index 
        swap(arr, i, j)"
Implement a method that reverses a linked listhead = 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null,"// A linked list node 
class Node: 
    # Constructor to create a new node 
    def __init__(self, data): 
        self.data = data 
        self.next = None

# Function to reverse the linked list  
def reverse(head): 
    prev = None
    current = head
    while(current is not None): 
        next = current.next
        current.next = prev 
        prev = current 
        current = next
    head = prev 
    return head"
Find a way to get the size of a linked list without traversing it.head: 1 -> 2 -> 3 -> 4 -> 5 -> null,"def get_list_size(head):
    count = 0
    temp = head
    while(temp):
        count += 1
        temp = temp.next
    return count"
"Write a function to find the smallest subarray with a given sum.arr = [3, 4, 5, 6, 7], sum = 11","def smallest_subarray_sum(arr, sum):

    start = 0
    end = 1
    min_length = float('inf')
    current_sum = arr[start]
    while(end < len(arr)):
        while(current_sum < sum and end < len(arr)):
            current_sum += arr[end]
            end += 1

        while(start < end and current_sum >= sum):
            min_length = min(min_length, end-start)
            current_sum -= arr[start]
            start += 1
    
    return min_length"
Edit the following code so that it prints out all powers of 2 up to 2^nn = 5,"def power_of_2(n):
    result = 1
    for i in range(n):
        print(result)
        result *= 2"
"Create a function that reverses a given string without using the built-in parity.str = 'I am here for the coding challenge""","def reverse_string_without_parity(str):
  # Create empty string 
  reversed_str = """" 
  # Iterate through the input string in the reverse order
  for i in range(len(str)-1,-1,-1): 
    reversed_str += str[i] 
  return reversed_str"
"Find a way to calculate the power of a number without using * or **base = 3
exponent = 4","def power(base, exponent): 
    result = 1
    for _ in range(exponent):
        result *= base 
    return result"
Identify the possible output types for the following task.Task: Write a Spark program to calculate the mean and the median of a set of numbers.,"The possible output types for the given task are Double, Int, Float, and Long."
"Rewrite this code into Python.ArrayList<Integer> arr = new ArrayList<>();
for (int i = 0; i < 10; i++) {
    arr.add(i);
}

int sum = 0;
for(int num : arr){
    sum += num;
}","arr = []
for i in range(10):
    arr.append(i)

sum = 0
for num in arr:
    sum += num"
Build a package and deploy it in the cloud.The package is an API to authenticate users and the API should be able to authenticate users having different types of API keys.,"Create a package containing API authentication logic and all the necessary API keys. Set up a cloud service, such as AWS or GCP, and deploy the package. Configure the cloud service to accept incoming requests and authenticate the user using the API keys."
"Create a function that takes in two strings and determines of the strings are anagramsString 1: ""spite""
String 2: ""pists""","def is_anagram(str1, str2): 
    # convert the strings to lowercase 
    str1 = str1.lower() 
    str2 = str2.lower() 

    # sorting both the strings 
    s1 = sorted(str1) 
    s2 = sorted(str2) 

    if len(s1) != len(s2): 
        return False

    # compare character by character 
    for i in range(len(s1)): 
        if s1[i] != s2[i]: 
            return False
    return True

# Driver code 
if is_anagram(""spite"", ""pists""):
    print(""Strings are anagrams"")
else:
    print(""Strings are not anagrams"")"
"Identify any type error that is present in the following code.def sum_of_values(num_list): 
    total = 0
    for value in num_list:
        total += value 
    return total/len(num_list)

square_value = sum_of_values(5)","Type error: The function sum_of_values() takes a list as an argument, but the argument provided is an integer (5)."
"Given a list of integers, write a function to compute their average.List of integers: [1, 2, 3, 4, 5]","def compute_average(lst): 
    total = 0
    for num in lst: 
        total += num 
        
    # calculate the average 
    avg = total / len(lst) 
    
    return avg

# Driver Code 
lst = [1, 2, 3, 4, 5] 
print(""Average of the list ="", round(compute_average(lst), 2))"
"Generate all combinations of the string ""abcd"".","def generate_combinations(string):
    result = []
    for i in range(len(string)):
        for j in range(i + 1, len(string) + 1):
            result.append(string[i:j])
    return result

if __name__ == '__main__':
    string = ""abcd""
    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']"
"Create a program to split the given string on a specific character.String: ""A/B/C/D""
Character: ""/""","def split_string(string, character):
    return string.split(character)
    
if __name__ == '__main__':
    string = ""A/B/C/D""
    character = ""/""
    print(split_string(string, character)) # outputs ['A', 'B', 'C', 'D']"
"Create a Python class to hold a student's information: name, age and major.","class Student:
 def __init__(self, name, age, major):
 self.name = name
 self.age = age
 self.major = major

def get_name(self):
 return self.name

def get_age(self):
 return self.age

def get_major(self):
 return self.major"
Write an R function to calculate the binomial coefficient of n and k,"binomial_coeff <- function(n, k) {
   if((k == 0) | (k == n))  
   return(1)
   else return(binomial_coeff(n-1, k-1) + binomial_coeff(n-1,k))  
}"
Extract words starting with 's' in this sentence.Sentence: I send a package to Steve.,"send, Steve."
Change the last line of the code to assign a list value to the variable x.x = None,x = []
"Write a one-liner to print the elements from list L in reverse order.L = [""apple"", ""pear"", ""banana""]",print(*L[::-1])
What data type does the output of this Python code have?x = 5,integer
"Change the code to make it a valid Python program.x = ""hello world","x = ""hello world"""
How can you access the third element of a tuple T?,T[2]
Change the code to make it an Expression Statement in Pythonx + 1,print(x + 1)
"Create a dictionary where the numbers 1 to 100 are the keys and the strings ""one"" to ""one hundred"" are the values.","d = {
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'nine',
    10: 'ten',
    11: 'eleven',
    12: 'twelve',
    13: 'thirteen',
    14: 'fourteen',
    15: 'fifteen',
    16: 'sixteen',
    17: 'seventeen',
    18: 'eighteen',
    19: 'nineteen',
    20: 'twenty',
    21: 'twenty-one',
    22: 'twenty-two',
    23: 'twenty-three',
    24: 'twenty-four',
    25: 'twenty-five',
    26: 'twenty-six',
    27: 'twenty-seven',
    28: 'twenty-eight',
    29: 'twenty-nine',
    30: 'thirty',
    31: 'thirty-one',
    32: 'thirty-two',
    33: 'thirty-three',
    34: 'thirty-four',
    35: 'thirty-five',
    36: 'thirty-six',
    37: 'thirty-seven',
    38: 'thirty-eight',
    39: 'thirty-nine',
    40: 'forty',
    41: 'forty-one',
    42: 'forty-two',
    43: 'forty-three',
    44: 'forty-four',
    45: 'forty-five',
    46: 'forty-six',
    47: 'forty-seven',
    48: 'forty-eight',
    49: 'forty-nine',
    50: 'fifty',
    51: 'fifty-one',
    52: 'fifty-two',
    53: 'fifty-three',
    54: 'fifty-four',
    55: 'fifty-five',
    56: 'fifty-six',
    57: 'fifty-seven',
    58: 'fifty-eight',
    59: 'fifty-nine',
    60: 'sixty',
    61: 'sixty-one',
    62: 'sixty-two',
    63: 'sixty-three',
    64: 'sixty-four',
    65: 'sixty-five',
    66: 'sixty-six',
    67: 'sixty-seven',
    68: 'sixty-eight',
    69: 'sixty-nine',
    70: 'seventy',
    71: 'seventy-one',
    72: 'seventy-two',
    73: 'seventy-three',
    74: 'seventy-four',
    75: 'seventy-five',
    76: 'seventy-six',
    77: 'seventy-seven',
    78: 'seventy-eight',
    79: 'seventy-nine',
    80: 'eighty',
    81: 'eighty-one',
    82: 'eighty-two',
    83: 'eighty-three',
    84: 'eighty-four',
    85: 'eighty-five',
    86: 'eighty-six',
    87: 'eighty-seven',
    88: 'eighty-eight',
    89: 'eighty-nine',
    90: 'ninety',
    91: 'ninety-one',
    92: 'ninety-two',
    93: 'ninety-three',
    94: 'ninety-four',
    95: 'ninety-five',
    96: 'ninety-six',
    97: 'ninety-seven',
    98: 'ninety-eight',
    99: 'ninety-nine',
    100: 'one hundred'
    }"
"Rewrite the following code so that the loop runs in reverse (decreases rather than increases).for i in range(0, 10):
    print(i)","for i in range(10, 0, -1):
    print(i)"
"Count how many words are in a string and output the count.string = ""Hello world!""","def count_words(str):
    """"""Counts how many words are in a string.
    
    Parameters:
    str (str): string to be counted
    """"""
    return len(str.split())

if __name__ == '__main__':
    string = ""Hello world!""
    print(count_words(string))"
"Create a function to output true if the given string is a palindrome, otherwise output false.string = ""racecar""","def is_palindrome(str):
    """"""Checks if a given string is a palindrome.
    
    Parameters:
    str (str): string to be tested
    """"""
    str = str.lower()
    return str[::-1] == str

if __name__ == '__main__':
    string = ""racecar""
    print(is_palindrome(string))"
"Replace the comments in the code with the proper Python code.#TODO: get the date from the user
#TODO: get the month from the user","date = int(input(""Enter the date: ""))
month = int(input(""Enter the month: ""))"
"Find the number of different words in a string of unlimited length.string = ""This is a long sentence about nothing.""","def word_count(str):
    """"""Counts the number of different words in a string of unlimited length.
    
    Parameters:
    str (str): string to be counted
    """"""
    words = str.split()
    return len(set(words))

if __name__ == '__main__':
    string = ""This is a long sentence about nothing.""
    print(word_count(string))"
"Create a function that takes in an array of strings and outputs an array of tuples of the first and last word in each string.array = [""Hello World"", ""Foo Bar"", ""Goodbye Moon""]","def first_last_words(arr):
    """"""Gets the first and last word from each string.
    
    Parameters:
    arr (list): array of strings
    """"""
    result = []
    for string in arr:
        words = string.split()
        result.append((words[0], words[-1]))
    return result

if __name__ == '__main__':
    array = [""Hello World"", ""Foo Bar"", ""Goodbye Moon""]
    print(first_last_words(array))"
"Create a Python program that finds the highest number in a list of numbers.[2, 4, 32, 41, 19]","# Initializing list
list_of_numbers = [2, 4, 32, 41, 19]

# Finding the highest number
max_number = max(list_of_numbers)

# Printing the result
print(max_number)

# Output: 41"
"Replace the placeholder with actual API calls to execute the following code.string search_term = ""coffee shop""; 
list results = API_call(search_term)
print(results)","string search_term = ""coffee shop""; 
list results = requests.get(""https://api.example.com/search?term=""+search_term).json()
print(results)"
Create an asyncio event loop and execute a coroutine.,"import asyncio

async def myfunc():
   print(""I'm in a coroutine"")

loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(myfunc())

finally:
    loop.close()"
"Create a function in Python that takes two integers N and M and prints out all possible combinations of numbers that add up to N and are at most M.N=8, M=3","def combinations_with_sum(n, m): 
  for i in range(1, m): 
    for j in range(i, m):
      if i + j == n:
        print(i, '+', j, '=', n)"
"Multiply two input matrices using numpy.matrix A:
[[1,2],
[3,4]]

matrix B:
[[5,6],
[7,8]]","import numpy as np
A = np.array([[1,2], [3,4]]) 
B = np.array([[5,6], [7,8]]) 

C = np.matmul(A,B)
print(C)"
"Change the following code snippet to use a different method to display the alert.alert(""Hello World!"");","console.log(""Hello World!"");"
"Create an instance of an Apache Spark DataFrame using an existing Pandas dataframe.import pandas as pd
df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})","from pyspark.sql import SparkSession

# Create SparkSession object
spark = SparkSession.builder.getOrCreate()

# Create Spark DataFrame using Pandas df
spark_df = spark.createDataFrame(df)"
"Compute the sum of all elements in a numpy array.import numpy as np
arr = np.array([[1,2,3],[4,5,6]])","import numpy as np
arr = np.array([[1,2,3],[4,5,6]])

# Get the sum of all elements in the array
total_sum = np.sum(arr)

# Print the sum
print(total_sum)"
"Compare two strings and return the index of the first character that is unequal in the two strings.string1 = ""Hello world!""
string2 = ""Howdy world!""","def get_index_of_first_diff(string1, string2):
    # Get the length of the strings 
    len_1 = len(string1)
    len_2 = len(string2)

    # Get the length of the shorter string
    len_shorter = min(len_1, len_2)

    # Compare the two strings character by character
    for i in range(len_shorter):
        if string1[i] != string2[i]:
            # Return the index of the first differing character
            return i

# Get the index of first differing character
index = get_index_of_first_diff(string1, string2)

# Print the index
print(index)"
"Perform a linear search on an array of 10 numbers and return the index for the target number.nums = [2, 8, -4, 1, 0, 5, 3, 9, 6, 10]
target_num = 8","def linear_search(nums, target_num):
    # Get the length of the array
    len_nums = len(nums)

    # Loop through the array to find the index of the target number
    for i in range(len_nums):
        if nums[i] == target_num:
            # Return the index of the target number
            return i

# Get the index of the target number
index = linear_search(nums, target_num)

# Print the index
print(index)"
"Convert an array of tuples of 2 numbers into an array of complex numbers.tuple_array = [(3,4), (5,6), (7,8)]","import numpy as np 

# Convert the array of tuples into an array of complex numbers 
complex_arr = np.array(tuple_array, dtype=complex)

# Print the complex array
print(complex_arr)"
"Given a list of emails and corresponding info, write a code to keep only the emails and transform the list into a dictionary of emails and corresponding info.my_list = [('john@example.com', 'John Smith', '27'), 
           ('sarah@example.com', 'Sarah Jane', '31'), 
           ('paul@example.com', 'Paul Walker', '45')]","# Create a dictionary of emails and corresponding info 
email_dict = {email[0]: email[1:] for email in my_list}

# Print the dictionary
print(email_dict)"
"Create a list of unique elements from a list of numbers.nums = [1, 1, 2, 3, 3, 4, 4, 5, 6]","# Create a list of unique elements from given list
unique_nums = list(set(nums))

# Print the list
print(unique_nums)"
Write a Python program to parse a date string and display the date in ISO 8601 format.date_string = '21 May 2021',"from datetime import datetime
import re

# Parse the date string 
date = datetime.strptime(date_string, '%d %B %Y')

# Convert the date to ISO 8601 format
iso_8601 = date.strftime(""%Y-%m-%d"")

# Print the ISO 8601 formatted date
print(iso_8601)"
"Create a for loop to traverse a list and print each element in the list in sequence.list_to_traverse = [1,2,3,4,5]","for item in list_to_traverse:
    print(item)"
"Using the input string, create a new string that contains all the characters in even indices.my_string = ""abcdefghi""","# Create an empty string
new_string = """"

# Iterate over the even indices
for i in range(0, len(my_string), 2):
    new_string += my_string[i]

# Print the new string
print(new_string) # prints 'acegi'"
"Add a try-catch block around the code example that catches an exception if it is thrown.with open(""myfile.txt"") as f:
    for line in f:
        print(line)","try:
    with open(""myfile.txt"") as f:
        for line in f:
            print(line)
except:
    print(""An exception has been thrown"")"
"Using the input, create a new list of strings where all strings in the new list have an uppercase first letter.my_list = [""hello"", ""world"", ""how"", ""are"", ""you?""]","new_list = []
for string in my_list:
    new_list.append(string.capitalize())

print(new_list) # prints ['Hello', 'World', 'How', 'Are', 'You?']"
"Using the input, classify whether the number is even or odd.num = 5","if num % 2 == 0
    puts ""The number is even""
else
    puts ""The number is odd""
end"
Suggest a technique to detect plagiarism in programming assignments.,"One technique to detect plagiarism in programming assignments is to compute the similarity between submissions and reference solutions. This can be done by extracting the key pieces of code from submissions, such as functions and loops, and then comparing them against the reference solution. If the extracted pieces of code are more similar than would be expected by chance, it could be an indication of plagiarism."
"Create a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters.""abcabcbb""","def find_longest_substring(s):
  max_length = 0
  start = 0
  usedChar = {}

  for i in range(len(s)):
    if s[i] in usedChar and start <= usedChar[s[i]]:
        start = usedChar[s[i]] + 1
    else:
        max_length = max(max_length, i - start + 1)

    usedChar[s[i]] = i

  return max_length

input_string = ""abcabcbb""

print(""The length of longest substring without repeating characters is: {}"".format(find_longest_substring(input_string)))"
"Change the code so it will output the multiplication result when ""multiply"" is clicked.<button class=""button"" onclick=""calc()"">Multiply</button>

<script>
    let result;
    function calc() {
        // TODO: Output the multiplication result
    }
</script>","<button class=""button"" onclick=""calc()"">Multiply</button>

<script>
    let result;
    function calc() {
        result = 4*9
        alert(`The result of the multiplication is: ${result}`)
    }
</script>"
"Generate an expression in R that returns the number of elements in a vectorvec_1 <- c(1, 3, 5, 7)",length(vec_1)
"Create a MongoDB query to find all the documents with the ""status"" field equal to ""completed""","db.collection.find({status: ""completed""});"
Write a Python program to prompt the user for a string and print the number of unique characters it contains.,"user_string = input(""Please enter a string: "")

unique_chars = set()

for char in user_string:
    unique_chars.add(char)

print(""The string contains"", len(unique_chars), ""unique character(s)."")"
"Create a class in Python named 'Car' with attributes 'color' and 'make', and methods 'start' and 'stop'.","class Car:
    def __init__(self, color, make):
        self.color = color
        self.make = make
    
    def start(self):
        print(""Car started."")
        
    def stop(self):
        print(""Car stopped."")"
"Given two strings, print the one that is longer.string1 = ""Hello""
string2 = ""World!""","if len(string1) > len(string2):
    print(string1)
else:
    print(string2)"
Write a paint program that displays a 10x10 blue square on the screen.,"import tkinter as tk

# Create a window
root = tk.Tk()

# Create a canvas 
canvas = tk.Canvas(root, width=100, height=100)

# Create a blue square
canvas.create_rectangle(0, 0, 100, 100, fill=""blue"")

# Pack the canvas
canvas.pack()

# Display the window
root.mainloop()"
"Using the turtle module, create a drawing of a triangle.import turtle
<noinput>","import turtle
# create an instance of Turtle class
my_turtle = turtle.Turtle()
my_turtle.speed(0)
# draw a triangle
my_turtle.forward(100)
my_turtle.left(120)
my_turtle.forward(100)
my_turtle.left(120)
my_turtle.forward(100)
# finish the drawing
my_turtle.done()"
"Construct a dictionary from the provided list of tuples such that the keys and values are switched.tuples = [('Hello', 5), ('World', 10)]","#Create a new dictionary
newDict = {}

#Iterate through the list and swap the keys and values
for tup in tuples:
    key, value = tup
    newDict[value] = key

#Print the new dictionary
print(newDict)"
"Output the sum of the largest and smallest numbers from the provided list.list2 = [3, 4, 5, 8, 9]","#Get the largest and smallest numbers and assign them to variables
largestNumber = max(list2)
smallestNumber = min(list2)

#Calculate the sum
sumOfExtremes = largestNumber + smallestNumber

#Print the sum
print(sumOfExtremes)"
Output the length of the string passed to the function.def getLengthOfString(inputString):,"def getLengthOfString(inputString):
    #Get the length of the string
    length = len(inputString)

    #Return the length of the string
    return length"
"Replace the placeholder words in the string with the provided words.This is a PLACEHOLDER1 sentence with PLACEHOLDER2 words.
placeholder1 = ""sample""
placeholder2 = ""three""","#Replace the words in the string
modifiedString = ""This is a "" + placeholder1 + "" sentence with "" + placeholder2 + "" words.""

#Print the modified string
print(modifiedString)"
"Create a dictionary such that each element in the list is a key and the respective value is its length.words = ['cat', 'dog', 'elephant']","#Create a new dictionary
wordLengths = {}

#Fill in the dictionary with the words as keys and their respective lengths as values
for word in words:
    wordLengths[word] = len(word)

#Print the populated dictionary
print(wordLengths)"
"Create a function that filters the numbers in the list and returns a list of prime numbers only.list3 = [3, 4, 5, 7, 11, 13]","def primeNums(inputList):
    #Create an empty list
    primes = []

    #Iterate over the list
    for num in inputList:
        #Check if the number is prime
        isPrime = True
        for i in range(2, num):
            if num % i == 0:
                isPrime = False
        #Add the number to the list if prime
        if isPrime:
            primes.append(num)

    #Return the list
    return primes

#Print the list
print(primeNums(list3))"
"Depending on the provided boolean value, set the result to 0 or 1.bool1 = False","#Set the result based on the boolean value
if bool1:
    result = 1
else:
    result = 0

#Print the result
print(result)"
Write a function to calculate the perimeter of a provided triangle by using its three side lengths.,"def calculatePerimeter(s1, s2, s3):
    """"""This function will calculate the perimeter of a triangle
    given its three side lengths""""""

    #Calculate the perimeter
    perimeter = s1 + s2 + s3

    #Return the perimeter
    return perimeter"
"Calculate the average of the given two integers.Integer 1: 2
Integer 2: 5",The average of 2 and 5 is 3.5.
Provide an example of a Python class and its elements.,"class Car: 
    def __init__(self, color, make, model): 
        self.color = color 
        self.make = make 
        self.model = model 
    
    def start(self): 
        print(""Engine started!"") 

ford_mustang = Car('Red', 'Ford', 'Mustang') 
ford_mustang.start()"
Use regular expressions to filter words beginning with 't' from a given sentence.Sentence: The quick brown fox jumps over the lazy dog.,"import re

sentence = ""The quick brown fox jumps over the lazy dog.""

filtered_words = re.findall(r""\b[tT]\w+"", sentence)

print(filtered_words) 

# Output: ['The', 'that', 'the']"
Replace each character of a string with the next character in alphabetic order.,"def replace_chars(s): 
    chars = list(s) 
    res = """" 
    for char in chars: 
        res += chr(ord(char) + 1) 
  
    return res"
"Create an array of items and calculate the average of the items.[1, 5, 9, 8, 2]","const input = [1, 5, 9, 8, 2];

const average = input.reduce((sum, item) => sum + item) / input.length;

console.log(average); // 5"
"Update the code so that it prints out the first ten multiples of 5.for (i=1; i<5; i++) {
  console.log(i * 2);
}","for (i=1; i<11; i++) {
  console.log(i * 5);
}"
Create a class named 'Shape' which has a method 'getArea' which returns the area of the shape.,"class Shape {
  constructor() {
  }

  getArea() {
    return 0;
  }
}"
Create an array of length 7 and set the values to the first 7 letters of the alphabet.,"const array = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];"
"Improve the function below to make it more efficientdef swap_case(x):
 y = """"
 for i in x:
  if i.isupper():
   y += i.lower()
  else:
   y += i.upper()
 return y","def swap_case(x):
    return x.swapcase()"
"Generate code to remove duplicate characters from a string.string = ""google""","def remove_duplicates(string):
    res = """" 
    for i in string: 
        if i not in res: 
            res = res + i
    return res"
Give an example of the binary search algorithm,"def binary_search(arr, target): 
    low = 0
    high = len(arr) - 1
  
    while low <= high: 
  
        mid = (low+high) // 2
  
        # Check if target is present at mid 
        if arr[mid] == target: 
            return mid 
  
        # If target is greater than mid, ignore left half 
        elif arr[mid] < target: 
            low = mid + 1
  
        # If target is smaller than mid, ignore right half 
        else: 
            high = mid - 1
  
    # If we reach here, then the element was not present 
    return -1"
Generate a program that finds the sum of all natural numbers from 0 to n,"def find_sum(n): 
    sum = 0
    for i in range(n+1): 
        sum += i 
    return sum"
Change the response to now fulfill the following purposeFind the number of ones in a binary number 101011,"def find_ones(n):
    count = 0
    while n > 0:
        if n % 10 == 1:
            count += 1
        n //= 10        
    return count"
"Modify the code provided so it prints the first 10 prime numbers.def is_prime(n):
    if n == 1:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True","def is_prime(n): 
    if n == 1: 
        return False
    for i in range(2, n): 
        if n % i == 0: 
            return False
    return True

def print_primes():
    count = 0
    number = 2
    while(count != 10):
        if is_prime(number):
            print(number)
            count += 1
        number += 1

print_primes()"
"Create a program that reads a sentence, replaces all spaces with hyphens, and prints the modified sentence.sentence = ""This is a sentence""","def replace_space_with_hyphen(sentence):
   return sentence.replace("" "", ""-"")

print(replace_space_with_hyphen(sentence))"
"Design a function to take a string input and reverse the order of its words.string = ""This is a sentence""","def reverse_words_order(string):
    words = string.split(' ')
    words_reversed = words[::-1]
    return ' '.join(words_reversed)

print(reverse_words_order(string))"
"Create a program to solve a math equation given in a string.equation = ""6 + 3*2""","def solve_math_equation(equation):
    return eval(equation)

print(solve_math_equation(equation))"
"Implement a function which will take two strings as input and reverse their order while maintaining the same character at each index.s1 = ""hello""
s2 = ""world""","def reverse_string_order(s1, s2):
    result = """"
    for i in range(len(s1)):
        result += s2[i] + s1[i]
    return result"
"Train a model to classify text into two categories, positive and negative.","import nltk
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# tokenize text
def tokenize(text):
    tokens = nltk.word_tokenize(text)
    return tokens

# build a Bag of Words model
countVec = CountVectorizer(tokenizer=tokenize)

# load training data
trainData, trainLabels = loadTrainingData()

# Learn a vocabulary dictionary
countVec.fit(trainData)

# transform training data into a document-term matrix
X_train = countVec.transform(trainData)

# split data into training and validation sets
X_train, X_valid, y_train, y_valid = train_test_split(X_train, trainLabels, test_size = 0.2, random_state = 0)

# train a Multinomial Naive Bayes classifier 
clf = MultinomialNB().fit(X_train, y_train)

# predict sentiment on validation data
predicted = clf.predict(X_valid)"
Suggest an algorithm in Python that will detect an anomaly in time-series data.,"We can use Gaussian Mixture Models to detect anomalies in time-series data. This method takes the time-series data as input and trains a model using the data. The model defines a probability distribution for the time-series data, and the anomalies are detected as those data points which have a low probability of occurring according to the distribution."
Create a program in Go that will take an array of integers and return the smallest number.,"func min(numbers []int) int {
	min := numbers[0]
	for _, number := range numbers {
		if min > number {
			min = number
		}
	}
	return min 
}"
How to check if a given number is an Armstrong number in Python?,"#Function to check if a number is an Armstrong number
def isArmstrong(number):
   sum  = 0
   temp = number

   while temp > 0:
    digit = temp % 10
    sum += digit ** 3
    temp //= 10
 
   if number == sum:
       return True
   else:
       return False
   
#Usage
number = 9
if(isArmstrong(number)):
    print(f""{number} is an Armstrong number"")
else:
    print(f""{number} is not an Armstrong number"")"
"Parse the following text and remove all non-alphanumeric charactersHello$#@, this is a te*x&t","text = 'Hello, this is a text'
out_text = re.sub('[^a-zA-Z0-9]', '', text)
print(out_text)"
Select the Python data types which can store a sequence of items.,"Sequence data types in Python include lists, tuples and range objects."
Construct a python code to print the following text in reverse.Hello World,"text = 'Hello World'
print(text[::-1])"
"Count the number of parameters for the given function.def add_names(name1, name2, name3, name4, name5):
    names = [name1, name2, name3, name4, name5] 
    return names",5 parameters.
"Create a program that prints the greatest common divisor between two numbers.num1 = 99
num2 = 77","def gcd(num1, num2): 
      
    if(num2 == 0): 
        return num1 
    else: 
        return gcd(num2, num1 % num2) 
  
# Driver code 
num1 = 99
num2 = 77
print (""The GCD of"", num1, ""and"", num2, ""is"", gcd(num1, num2))"
"Change the given array to a singly linked list without using a loop.array = [1, 2, 3, 4, 5]","class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None
  
def convertToLinkedList(arr):
    # Last Node 
    last = None
  
    # convert given array to linked list 
    for i in range(len(arr) - 1, -1, -1): 
        # create a new node 
        node = Node(arr[i]) 
  
        # link existing list with new node 
        node.next = last
        last = node
  
    return node

# Driver code
array = [1, 2, 3, 4, 5]
head = convertToLinkedList(array) 
while head != None: 
    print(head.data) 
    head = head.next"
"Generate a code to reverse a string without using any loop.Input String = ""Hello World!""","input_string = 'Hello World!'

def reverse_string(input_string):
    if len(input_string) == 0:
        return """" 
    else:
        return reverse_string(input_string[1:]) + input_string[0] 
 
res = reverse_string(input_string) 
print(res)"
"Write a function that returns the length of the longest common substring between two strings.s1 = 'abcde'
s2 = 'abfghe'","def longest_common_substring(s1, s2): 
    m = len(s1) 
    n = len(s2) 
  
    # initialize matrix 
    L = [[0 for x in range(n + 1)] for x in range(m + 1)] 
  
    # To store the length of longest common substring 
    length = 0 
  
    # Comparing each character of s1 and s2 
    for i in range(m + 1): 
        for j in range(n + 1): 
  
            # If current character of s1 and s2 matches 
            if i == 0 or j == 0: 
                L[i][j] = 0
            elif s1[i - 1] == s2[j - 1]: 
                L[i][j] = L[i - 1][j - 1] + 1
                length = max(length, L[i][j]) 
            else: 
                L[i][j] = 0
  
    return length 

# Driver code 
s1 = 'abcde'
s2 = 'abfghe'
print(""Length of Longest Common Substring is: "", longest_common_substring(s1, s2))"
Evaluate the following expression and report the result3 * (4 + 2) / 5,5.2
"Output true if the given string contains the word ""Hello"", otherwise output false.""Hello world!""",true
Print out the product of all the even numbers between 0 and 10,384
Output the Fibonacci sequence up to 50,"0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55"
Complete the following function to output a reversed string,"def reverse(s):
    rev = """"
 
    i = len(s)
    while i > 0:
        rev += s[ i - 1 ]
        i = i - 1
 
    return rev"
"Given an integer n, write a program to print out the prime numbers up to n.","def is_prime(n):
 if n <= 1:
 return False
 for i in range(2, int(n**0.5) + 1):
 if n % i == 0:
 return False
 return True

def find_prime_numbers(n):
 primes = []
 for i in range(2, n + 1):
 if is_prime(i):
 primes.append(i)
 return primes"
"Given a 2D array of characters, replace each '0' entry with 'x'.[
 ['1', '0', '1'],
 ['0', '1', '0'],
 ['1', '0', '1'],
]","[
 ['1', 'x', '1'],
 ['x', '1', 'x'],
 ['1', 'x', '1'],
]"
"Turn the following sentence into an imperative sentence.Let's print ""Hello World""","Print ""Hello World""."
Compose a program to reverse a list of numbers,"def reverse_nums(num_list):
    n = len(num_list)
    for i in range(n//2):
        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]
    return num_list"
"Modify the given code to ensure that the input is a numbernum = input(""Enter a number: "")","num = input(""Enter a number: "")
try:
    num = int(num)
except ValueError:
    print(""Input must be a number"")"
Program a function to remove all the even numbers from an array,"def remove_even(arr):
    new_arr = []
    for num in arr:
        if num % 2 != 0:
            new_arr.append(num)
    return new_arr"
"Modify the code for the given purposestring = input(""Enter a string: "")","string = input(""Enter a string: "")
if not string.isalpha():
    print(""Input must contain only letters"")"
"Rewrite the program to get the same outputdef find_sum(x):
   sum = 0
   for i in range(1,x):
      if i % 3 == 0 or i % 5 == 0:
        sum += i
   return sum","def find_sum(x):
    sum = 0
    for i in range(1, x):
        if i % 3 == 0:
            sum += i
        elif i % 5 == 0:
            sum += i
    return sum"
Create a program to determine if a number is divisible by another number,"def is_divisible(n, m):
    if n % m == 0:
        return True
    return False"
"Modify the given code to set the third parameter to 0def foo(x, y, z):
    print(x, y, z)","def foo(x, y, z = 0):
    print(x, y, z)"
"Write a code to encode a given body of text into base64text=""Hello World""","import base64
def encode_base64(text):
 return base64.b64encode(text.encode()).decode()"
"Write a code to determine if a given list contains a particular elementnums=[1,2,3,4]","def contains(nums, element):
 return element in nums"
"Write a code to decrypt a given cipher text using the Caesar ciphercipher_text=""dfwlrq""","def decrypt_caesar_cipher(cipher_text):
 alphabet=""abcdefghijklmnopqrstuvwxyz""
 output=""""
 for char in cipher_text:
   i=(alphabet.index(char)-3)%26
   output+=alphabet[i]
 return output"
"Analyze the code below and suggest three ways to address the memory leak issue.import os

def function():
 message = """"
 while True:
 message += ""a"" * 1024","1. Explicitly deallocate any unnecessary memory by using `del`: 
`del message`

2. Close any open files or resources by using the `with` block for better resource management: 
```
with open(""file_name"",""w"") as f:
    # process the file
```

3. Avoid using dynamic memory allocation where possible. You could use a fixed-sized string instead of a dynamically-allocated one. For example, you could use a `char` array:
`char message[1500000]`"
Output the below tree structure in Python.,"print('  *  ')
print(' *** ')
print('*****')"
"Identify the correct data type for the value ""37.45"".",float
Write a function that sorts an array of strings in ascending order based on the number of distinct characters in each string.,"def sort_by_distinct_characters(strings):
    strings.sort(key=lambda x: len(set(list(x))))
    return strings"
"Take an array of integers and return true if there is a triplet whose sum is equals to the given target.arr = [1, 4, 45, 6, 10, -8], target = 16","def find_triplet_sum(arr, target):
    arr.sort()
    for i in range(0, len(arr)-2):
        left = i + 1
        right = len(arr) - 1
        while left < right:
            curr_sum = arr[i] + arr[left] + arr[right]

            if curr_sum == target:
                return True 
            elif curr_sum < target:
                left += 1
            else:
                right -= 1
    return False"
"Compile a function that checks if a number is prime. Output true if prime, false if not.","def is_prime(num):
    # form 2 to num-1
    for i in range(2, num):
        # percentage to check, output False if divisible by any number
        if num % i == 0:
            return False
    return True"
Take an array of strings and return a new array containing only the strings with the longest length.,"def longest_strings(str_arr):
    longest = 0
    strings = []
    for string in str_arr:
        if len(string) > longest:
            strings = [string]
            longest = len(string)
        elif len(string) == longest:
            strings.append(string)
    return strings"
Output the longest consecutive character string in a given string.,"def longest_consecutive_str(s):
    longest_str = """"
    cur_str = """"

    for char in s:
        if not cur_str or char == cur_str[-1]:
            cur_str += char
        else:
            if len(cur_str) > len(longest_str):
                longest_str = cur_str
            cur_str = char

    if len(cur_str) > len(longest_str):
            longest_str = cur_str

    return longest_str"
Create a function that takes a matrix (MxN array) and returns the transposed matrix.,"def transpose(matrix):
    tr_matrix = [[None for i in range(len(matrix))] for j in range(len(matrix[0]))]
    for i, row in enumerate(matrix):
        for j, col in enumerate(row):
            tr_matrix[j][i] = col
    return tr_matrix"
Take an array of strings and a character and return an array containing only the strings containing the given character.,"def filter_by_character(str_arr, char):
    filtered_arr = []
    for string in str_arr:
        if char in string:
            filtered_arr.append(string)
    return filtered_arr"
"Using Numpy, create an array of size 10 and fill it with random integer numbers between 0 and 9.","import numpy as np

arr = np.random.randint(low=0, high=10, size=10)"
"Implement a sorting algorithm which takes an array of integers as input and sorts it in ascending order.[34, 19, 42, -9, 2018, 0, 105]","def sorting_algorithm(arr):
    for i in range(len(arr)-1):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]
    return arr

# Test
arr = [34, 19, 42, -9, 2018, 0, 105]
print(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]"
"Create a class called ""Computer"" with two attributes ""name"" and ""model"" and two methods ""get_name"" and ""get_model"".","class Computer:
    def __init__(self, name, model):
        self.name = name
        self.model = model
    
    def get_name(self):
        return self.name
    
    def get_model(self):
        return self.model"
Create a dictionary of all the capital cities of Europe as key-value pairs.,"europe_capitals = {
  'France': 'Paris',
  'Germany': 'Berlin',
  'Russia': 'Moscow',
  'Greece': 'Athens',
  'Norway': 'Oslo',
  'Denmark': 'Copenhagen',
  'Italy': 'Rome',
  'Poland': 'Warsaw',
  'Spain': 'Madrid',
  'Sweden': 'Stockholm'
}"
"Generate a 10 character random user password with at least one Upper Case letter, one lower case letter, one number, and one special character.","import random
import string

def generate_password(length):
    char_types = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)
    password = []
    for _ in range(length):
        ch = random.choice(char_types)
        while ch in password:
            ch = random.choice(char_types)
        password.append(ch)
 
    return ''.join(password)

password = generate_password(10)
print(password) # e.W8.vHc2e"
"Given a target number, find two numbers in the list whose sum is equal to the target number.list = [2, 7, 11, 15], target = 9","list = [2, 7, 11, 15]
target = 9

for i in range(0, len(list) - 1):
    for j in range(i + 1, len(list)):
        if list[i] + list[j] == target:
            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))"
"Given an array of numbers, find the maximum product of any three numbers in the array.arr = [2, 5, 6, 9, -2, -7, -1]","arr = [2, 5, 6, 9, -2, -7, -1]

# create an empty list to store the products of all triplets
triplets = []

# loop through the array
for i in range(len(arr)):
    for j in range(i+1,len(arr)):
        for k in range(j+1,len(arr)):
            # calculate and append the product of each triplet to the list
            triplets.append(arr[i]*arr[j]*arr[k])

# get the maximum product from the list
max_product = max(triplets)

print(""The maximum product of any three numbers in the array is:"", max_product)"
"Extract a character's count from a given string.string = ""this is a sample string""","def count_characters(string):
    '''This function takes a string as argument and returns a dictionary
       that contains the count of characters in the given string.''' 
    # create an empty dictionary
    char_count = {}
    # iterate over the characters and add to dictionary if not already present
    for char in string:
        if char not in char_count:
            char_count[char] = 1
        else:
            # Increment the count if already present
            char_count[char] += 1 
    return char_count"
"Concatenate two given strings and return the result.string1 = ""Hello "", string2 = ""World""","string1 = ""Hello ""
string2 = ""World""

# use '+' operator for string concatenation
result_string = string1 + string2 

print(""The concatenated string is:"", result_string)"
"Given an array of integers, find the longest subarray with total sum less than the given sum.arr = [1, -2, 2, 4, 3], sum = 3","arr = [1, -2, 2, 4, 3]
sum = 3

# create an empty list to store the longest subarray
longest = []

# loop through the array
for i in range(len(arr)):
    # set the sum of current subarray to 0 
    curr_sum = 0
    # another loop to check if any subarray of the array
    # has a sum less than the given sum
    for j in range(i, len(arr)):
        curr_sum += arr[j]
        # if any subarray is found update the longest list
        if curr_sum < sum:
            longest = arr[i: j + 1]

print(""The longest subarray with total sum less than the given sum is:"", longest)"
"Sort a given array in ascending order based on the second element of each array element pair.arr = [(3, 5), (4, 1), (1, 4), (2, 2)]","arr = [(3, 5), (4, 1), (1, 4), (2, 2)]

# sort the array based on the second element in each pair
arr.sort(key=lambda x: x[1])
 
print(""The array sorted in ascending order based on the second element of each array element pair is:"", arr)"
"Write a snippet of code for looping over a list of numbers.myList = [1, 2, 3, 4]","for x in myList:
  print(x)"
"Given a list of student records, write a Python code snippet to find all the students who scored above 80.studentList = [ 
    {'name': 'John', 'score': 80},
    {'name': 'Jane', 'score': 90},
    {'name': 'Tom', 'score': 75},
    {'name': 'Eric', 'score': 85}
  ]",highScoringStudents = [student for student in studentList if student['score'] > 80]
"Create a function to check if the two strings can be made equal by replacing the letters with asterisks in the same order.String s1 = ""aaabbcc"";
String s2 =  ""a*a*b*c*"";","public boolean canBeEqual(String s1, String s2) {
    if (s1.length() != s2.length()) return false;
    int len = s1.length();
    for (int i = 0; i < len; i++) {
        if (s1.charAt(i) != s2.charAt(i) && s2.charAt(i) != '*') return false;
    }
    return true;
}"
"Calculate the total number of unique elements in this array.array = [[1, 1], [2, 2], [3, 3], [4, 4]]","total_items = len(array)
unique_items = len(set(sum(array, [])))
total_unique_items = total_items - unique_items
print(total_unique_items)
# Output: 4"
"Using the comment as a guide, insert a for loop in the following code to print out all numbers from 0 to 10.# TODO: Insert a for loop here","for i in range(0, 11):
    print(i)"
"Find the longest palindromic substring of this string.string = ""carrace""","def longest_palindrome_substring(string):
    n = len(string)
    t = [[False for _ in range(n)] for _ in range(n)]  
    max_length = 1
    i = 0
    while (i < n): 
        t[i][i] = True
        i = i + 1
    start = 0
    i = 0
    while i < n - 1: 
        if (string[i] == string[i + 1]): 
            t[i][i + 1] = True
            start = i 
            max_length = 2
        i = i + 1
    k = 3
    while k <= n: 
        i = 0
        while i < (n - k + 1): 
            j = i + k - 1
            if (t[i + 1][j - 1] and 
                    string[i] == string[j]): 
                t[i][j] = True
                if (k > max_length): 
                    start = i 
                    max_length = k 
            i = i + 1
        k = k + 1
    longest_palindrome = string[start:start+max_length]
    return longest_palindrome
  
print(longest_palindrome_substring(string))
# Output: carrac"
"Group the elements in this array into pairs and print them.arr = [1, 2, 3, 4, 5]","i = 0
while i < len(arr):
    pair = (arr[i], arr[i+1])
    print(pair)
    i += 2
# Output: (1, 2) (3, 4) (5, None)"
"Write a function in Python to sort this dictionary by values.my_dict = {""Jerry"": 10, ""Marcus"": 3, ""Hanna"": 5}","def sort_dict_by_values(d):
    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1])) 
    return sorted_dict

print(sort_dict_by_values(my_dict))
# Output: {'Marcus': 3, 'Hanna': 5, 'Jerry': 10}"
"Flatten this nested list into a single list.nested_list = [[1,2], [3,4], [5,6]]","import itertools
flattened_list = list(itertools.chain.from_iterable(nested_list))
print(flattened_list)
# Output: [1, 2, 3, 4, 5, 6]"
"Create a set from this list where no duplicates will be present.my_list = [1, 2, 1, 2, 3, 4]","my_set = set(my_list)
print(my_set)
# Output: {1, 2, 3, 4}"
"Generate all possible permutations of this list.my_list = [1, 2, 3]","from itertools import permutations
permutation_list = list(permutations(my_list))
print(permutation_list)
# Output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]"
"Use regex to extract words from the sentence 'Some of my favorite words are pencil, dinosaur, and coffee.'","var words = 'Some of my favorite words are pencil, dinosaur, and coffee.';
var result = words.match(/[a-zA-Z]+/g);
console.log(result);
// Result: [""Some"", ""of"", ""my"", ""favorite"", ""words"", ""are"", ""pencil"", ""dinosaur"", ""and"", ""coffee""]"
Write a Python script which checks if an input string is a palindrome.,"def is_palindrome(input_string):
    input_string = input_string.lower()
    if len(input_string) == 0:
        return False
    if len(input_string) == 1:
        return True

    if input_string[0] == input_string[-1]:
        return is_palindrome(input_string[1:-1])

    return False

# Usage 
string = 'RADAR'
result = is_palindrome(string)
print(result) # Output: True"
"Design a function in Python to format a given string as a URL slug.string = ""This is a sample string to be converted""","def format_as_slug(string):
    slug = string.lower()
    slug = slug.strip()
    slug = slug.replace(' ', '-')
    slug = re.sub('[^a-zA-Z0-9_\-]', '', slug)
    return slug

# Usage 
string = ""This is a sample string to be converted""
result = format_as_slug(string)
print(result) # Output: this-is-a-sample-string-to-be-converted"
Build a class in Python with three methods.,"class MyClass:
  def __init__(self):
   # initialization code 
   self.data = []
   self.count = 0
 
  def add_data(self, data_element):
   # add data to a list
   self.data.append(data_element)
   self.count += 1 
 
  def get_data_count(self):
   # return number of data elements
   return self.count"
"Add a try-catch block to the given code snippet.def divide(num1, num2):
    return num1 / num2","def divide(num1, num2):
  try:
    return num1 / num2
  except:
    print('Error: Unable to perform division')"
"Fix the following code so that it works without errors.```
def remove_characters(name, characters):
    for c in characters:
        name.replace(c, '')
    return name

name = ""Alice""
characters = [""A"", ""e""]
```","```
def remove_characters(name, characters):
    for c in characters:
        name = name.replace(c, '')
    return name

name = ""Alice""
characters = [""A"", ""e""]
```"
"Sort the list of numbers by increasing order.[4, 6, 0, 1, 7, 9]","[0, 1, 4, 6, 7, 9]"
Write the code for a function that takes two parameters n and m and returns the sum of the first n odd integers starting with m.,"def sum_of_odd_integers(n,m):
    total_sum = 0
    for i in range(m,m+(2*n-1),2):
        total_sum += i
    return total_sum"
"Determine how many elements in the list are greater than zero.[2, -1, -5, 6, 7]",4
Write the code to create a one-dimensional array and initialize it with random numbers of length 4.,"import random

def create_random_array():
    lst = []
    for i in range(4):
        lst.append(random.randint(1,10))

    return lst"
Write the code to produce a new array that includes all elements from two given arrays.,"def merge_two_arrays(arr1, arr2):
    merged_arr = arr1 + arr2
    return merged_arr"
"Create a class with the name ""Animal"" and add the methods ""make_sound"" and ""eat"".","class Animal:

    def make_sound(self):
        """"""Makes a sound specific to the animal.""""""
        pass
    
    def eat(self):
        """"""Eats food.""""""
        pass"
"Find the inverse of the given matrix[ [1, 2], [3, 4] ]","# Find the inverse of the given matrix

A = [[1,2], [3,4]]

inverse_A = [[round(A[1][1]*A[0][0] - A[0][1]*A[1][0]),
        round(-A[1][0]*A[0][0] + A[0][1]*A[1][1])],
        [round(-A[1][1]*A[0][1] + A[0][0]*A[1][0]),
        round(A[1][1]*A[0][1] - A[0][0]*A[1][0])]]

print(inverse_A) # [[4,-2],[-3,1]]"
"Replace words with corresponding synonyms in the given texttext: ""The cat is lazy and likes to sleep.""
word: ""sleep""
synonym: ""nap""","# Replace words with corresponding synonyms in the given text

text = ""The cat is lazy and likes to sleep.""

# Replace the word
text = text.replace(""sleep"", ""nap"")

print(text) # ""The cat is lazy and likes to nap."""
Write an assembly language program to generate a Fibonacci series with n number of elements.,".section __DATA, ""rw""
   arraylength: .int 2
   array:       .int 0, 1

.text
   .global _start
_start:
   mov r1, #0
loop:
   sub r2, r1, #1
	add r3, array, r2
	ldr r2, [r3]

   sub r3, r1, #2
	add r4, array, r3
	ldr r3, [r4]
	
	add r5, r2, r3
	
   add r3, array, r1
	str r5, [r3]

	ldr r1, =arraylength
	add r2, r1, #1
	str r1, =arraylength

	cmp r1, r2
	bne loop"
"Write a MATLAB code to count how many element in an array is greater than a given number.array = [4, 5, 2, 8, 9];
number = 6;","array = [4, 5, 2, 8, 9];
number = 6;

% Count the number of elements in the array that are greater than the given number
count = 0;
for i=1:length(array)
    if array(i) > number
        count = count + 1;
    end
end

disp(count);  % Output: 2"
Find the sum of the first 10 positive integers,The sum of the first 10 positive integers is 55.
Develop a code to get the current date and time and print it,"from datetime import datetime

def get_current_datetime():
    # Get the current date and time
    current_datetime = datetime.now()
    # Print the current date and time
    print(""Current date and time:"", current_datetime)

# Call the function
get_current_datetime()"
"Generate a Huffman code for a given set of symbols and probabilitiesSymbols: ['A', 'B', 'C', 'D']
Probabilities: [0.2, 0.3, 0.3, 0.2]","A: 00
B: 01
C: 10
D: 11"
Suggest an optimisation algorithm for a minimisation problem,A suitable optimisation algorithm for a minimisation problem is Gradient Descent. Gradient Descent works by calculating the gradient of the cost function with respect to the input variables. This gradient is then used to update the input variables in order to reduce the cost. The process is repeated until an optimum value is reached.
"Given a range of numbers, write a python program to find the sum of the elements within that range.range: 1 to 10","def sum_range(start, end):
    res = 0
    for i in range(start, end+1):
        res += i
    return res

sum_range(1, 10)"
"Decompose the following code into two different functions.def calculateMinimumDifference(nums):
    if len(nums) <= 1: return 0
    min_diff = float('inf')
    for x in range(1, len(nums)):
        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))
    return min_diff","def calculate_diff(arr):
    return abs(arr[0] - arr[1])

def calculate_minimum_difference(nums):
    if len(nums) <= 1: return 0
    min_diff = float('inf')
    for x in range(1, len(nums)):
        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))
    return min_diff"
"Count and return the number of lowercase and uppercase characters in a given string.my_str = ""Hello World!""","def count_cases(s):
    num_lower = 0
    num_upper = 0
    for char in s:
        if char.islower():
            num_lower += 1
        elif char.isupper():
            num_upper += 1
    return num_lower, num_upper"
"Create a function that takes a list of strings as an argument and returns a list containing only non-duplicate strings.my_list = [""Apple"", ""Orange"", ""Grapes"", ""Apple"", ""Watermelon""]","def remove_duplicates(arr):
    final_list = []
    for i in arr:
        if i not in final_list:
            final_list.append(i)
    return final_list"
What is the unit of measurement for the average speed of a car?,The unit of measurement for the average speed of a car is kilometers per hour (km/h) or miles per hour (mph).
"Parse the following XML document and print its content.<people>
<person>
   <name>John Doe</name>
   <age>45</age>
</person>
<person>
   <name>Jane Doe</name>
   <age>32</age>
</person>
</people>","Name: John Doe
Age: 45

Name: Jane Doe
Age: 32"
Create an array of descending numbers starting from 10 to 1 using a for loop.,"numberArray = []
for x in range(10, 0, -1):
    numberArray.append(x)

print(numberArray) # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
How would you implement a function to determine if a number is even or odd in Python?,"def even_odd(number):
    if number % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")"
"Create a Flask route for handling GET requests with the path ""/hello"".","from flask import Flask

app = Flask(__name__)

@app.route(""/hello"", methods=[""GET""]) 
def hello(): 
    return ""Hello!"""
"Create a print statement in Python to print the first 5 elements in a list.[2, 3, 4, 5, 6, 7, 8]",print(list[:5])
"Modify the code so that it prints ""Python is the best language"" five times.for i in range(10):
    print(""Python is great!"")","for i in range(5):
    print(""Python is the best language!"")"
"Modify the program so that the ""count"" variable counts from 0 to 10 11.count = 0
while count < 10:
    print(count)","count = 0
while count <= 10:
    print(count)
    count = count + 1"
"Rewrite the code as a single line with a one-line lambda function.def square(x):
    return x * x",square = lambda x: x * x
"Write a Python program to compare two lists and print the elements which are not common between the two.list_a = [1, 2, 3, 4, 5]
list_b = [3, 4, 5, 6, 7]","list_a = [1, 2, 3, 4, 5]
list_b = [3, 4, 5, 6, 7]

not_common_elements = [i for i in list_a if not(i in list_b)] + [i for i in list_b if not(i in list_a)]

print(not_common_elements)"
Write a MongoDB query that retrieves the documents from the inventory collection where the quantity field is greater than 10.,db.inventory.find( { quantity: { $gt: 10 } } )
"Rewrite the loop as a generator expression.arr = []
for i in range(5):
    arr.append(i)","arr = [i for i in range(5)]
arr = (i for i in range(5))"
"Construct a loop that prints out the first 10 elements in a given list.my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]","for i in range(10):
    print(my_list[i])"
Create a function that returns true if the given number is a prime number.number = 9,"def is_prime(number):
    if number < 2:
        return False
    for i in range(2, number // 2 + 1):
        if number % i == 0:
            return False
    return True

if is_prime(number):
    print(""The number is a prime number"")
else:
    print(""The number is not a prime number"")"
"Write a code that will check if a given string is a palindrome or not without using extra space.string = ""level""","def is_palindrome(string):
    left, right = 0, len(string)-1
    
    while right >= left:
        if string[left] != string[right]:
            return False
        left += 1
        right -= 1
    return True
    
if is_palindrome(string):
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")"
"Generate a Matrix with random integers between 1-50 and output the Matrix.rows = 5
columns = 6","import random

rows = 5
columns = 6

matrix = [[random.randint(1,50) for c in range(columns)]for r in range(rows)]

for row in matrix:
    print(row)"
"Construct a Python program to print out the biggest number from a given list.my_list = [6, 5, 9, 1, 8, 2]","def find_max(my_list):
    max_num = my_list[0]
    for num in my_list:
        if num > max_num:
            max_num = num
    return max_num

print(find_max(my_list))"
"Update the given function to return a list of tuples where each tuple contains the name and age of each person.def get_person_info(name, age):
    """"""Returns a tuple containing name and age.""""""
    return ""Person "" + name + "" is "" + age + "" years old.""","def get_person_info(name, age):
    """"""Returns a list of tuples containing name and age.""""""
    return [(name, int(age))]"
"Using the given list of strings, create a new list that contains only the lowercase letters.words = [""Alphabet"", ""Marble"", ""Buttons""]","words = [""Alphabet"", ""Marble"", ""Buttons""]

lowercase_letters = [word.lower() for word in words] 
print(lowercase_letters) 
# Output: ['alphabet', 'marble', 'buttons']"
"Update the given function to return the greatest common divisor of two numbers.def divisor_function(a, b):
    """"""Returns the greatest common divisor of two numbers.""""""
    return a % b","def divisor_function(a, b):
    """"""Returns the greatest common divisor of two numbers.""""""
    if b == 0:
        return a
    else:
        return divisor_function(b, a % b)"
"Create a function to print the numbers from 1 to 20, and also print ""skip"" for multiplies of 3 and 5.","def print_numbers():
    '''This function prints numbers from 1 to 20, and also prints ""skip"" for the multiplies of 3 and 5.'''
    for num in range(1, 21):
        if num % 3 == 0 and num % 5 == 0:
            print(""skip"")
        else:
            print(num)

print_numbers()
# Output: 1 2 skip 4 5 skip 7 8 skip 10 11 skip 13 14 skip 16 17 skip 19 20"
"Using the given list of names, create a new set that contains only the names with length greater than 6.names = [""John"", ""Jacob"", ""Sophia"", ""Olivia"", ""Michael""]","names = [""John"", ""Jacob"", ""Sophia"", ""Olivia"", ""Michael""]

long_names = {name for name in names if len(name) > 6}
print(long_names) # Output: {'Sophia', 'Olivia', 'Michael'}"
Create a decision tree to classify if a given student's grade ranges from A to D.,"# Decision Tree
def classify_grades_decision_tree(grade):
    if grade in range(90, 101): # A range
        return 'A'
    elif grade in range(80,90): # B range
        return 'B'
    elif grade in range(70,80): # C range
        return 'C'
    elif grade in range(60,70): # D range
        return 'D'
    else:
        return 'Error: Grade not in range'

# Driver code
# Testing
print(classify_grades_decision_tree(87)) # Output: B"
"Suggest a completion to the following python code to print the square of a number.number = 5

print(number)","number = 5

print(number*number) # Output: 25"
"Sort the list below using insertion sort in Python:list = [1,12,1,4,8,10,13]","list = [1,1,4,8,10,12,13]

def insertion_sort(arr): 
    for i in range(1, len(arr)): 
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key
arr = [1,12,1,4,8,10,13]
insertion_sort(arr)
print (arr)"
Describe an algorithm to convert an array of numbers into an array of its squares.,"def calculate_squares(arr):
 result = []
 for num in arr:
 result.append(num ** 2)
 return result"
Write a regular expression to match the following pattern: words that consist only of capital letters.,^[A-Z]+$
Suggest the best algorithm to reverse a string.,"# Algorithm to reverse a string
def reverse_string(s):
# Create a result string
 result = """"
 # Iterate through the string in reverse order
 for i in range(len(s)-1, -1, -1):
 result += s[i]
return result"
Create a function to add two integers x and y.,"def add_two_integers(x, y):
 return x + y"
Write a code to add two integers without any type conversion.,"function addIntWithoutTypeConversion(a, b) {
  let sum = 0;
  let carryin = 0;
  let k = 0;
  let temp_a = a;
  let temp_b = b;

  while (k < 32) {
    let ak = a >> k & 1;
    let bk = b >> k & 1;
    let carryout = (ak & bk) | (ak & carryin) | (bk & carryin);
    sum |= (ak ^ bk ^ carryin) << k;
    carryin = carryout << 1;
    k++;
  }

  return sum;
}

const result = addIntWithoutTypeConversion(1, 2);

console.log(result); // 3"
Create a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input.,"class Circle():
    def __init__(self, radius):
        self.radius = radius"
Construct a regular expression that matches an email address that ends in .com.,/\S+@\S+\.com$/
"Convert the following matrix into a list of lists in Python.[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]"
Write a Perl program to remove the last element from an array and return the resulting array.,"@array = (""one"",""two"",""three"",""four"");
 
# remove the last element
pop(@array);
 
# print the resulting array
print ""@array\n"";"
"Implement an R program to calculate the median of an integer array.[2, 3, 4, 5]","calculate median <- function(arr){
    sorted <- sort(arr)
    n <- length(arr)
    if(n%%2 == 0){
        mid <- n/2
        median <- (sorted[mid] + sorted[mid + 1] ) / 2
    } else {
        mid <- (n + 1) / 2
        median <- sorted[mid]
    }
    return(median)
}

calculate_median(c(2, 3, 4, 5))"
"Convert the following paragraph from English to Python code:

""Given a list of numbers, find the largest number"".","def find_largest(nums):
    largest = nums[0]
    for num in nums:
        if num > largest:
            largest = num
    return largest"
"Identify the bug in the following python code:

def foo(x):
    x[0] = 2[0, 1, 2]","This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:

def foo(x):
    x[0] = 2
    
where the input x is a list instead of a tuple."
"Implement a for loop in Python to iterate through a given list of numbers.[1, 2, 3, 4]","for num in [1, 2, 3, 4]:
    print(num)"
"Identify the data type of the following Python expression:

{""name"": ""John"", ""age"": 40}","This expression is a dictionary, which is a type of data structure in Python. A dictionary is a key-value pair, where the key is unique and the value can be a list of data items or a single item. In this example, the key is ""name"" and the value is ""John"", and the key is ""age"" and the value is 40."
"Rewrite the following code snippet in Python to print out the word ""Hello"":

print(""Hello"")","print(""Hello"")"
"Divide two floating-point numbers without using the '/' operator.A = 5.0, B = 3.0",A * (1.0 / B)
"Using the comment as a guide, edit the code to handle the error appropriately.try:
    # TODO: Make API call
except Exception:
    # TODO: Handle error","try:
    # Make API call
except Exception as e:
    # Handle error
    print(""An error occurred:"", e)"
Create a function in Haskell that takes an integer and returns a string representing its factorial.,"factorial :: Integer -> String
factorial n = show $ product [1..n]"
Create an array of size 10 with each element being a random integer between 0 and 1.,"arr = [random.randint(0, 1) for _ in range(10)]"
Implement a function that returns the reversed version of a given string.,"def reverse_string(string):
  return string[::-1]"
"Modify the following code to compute the sum of squares of the numbers from k to n.def sum(k, n):
    sum = 0
    for i in range(k, n+1):
        sum += i
    return sum","def sum_squares(k, n):
    sum = 0
    for i in range(k, n+1):
        sum += i**2
    return sum"
"Categorize the following phrases into the given categories.phrase, category
This is a big mess, Disaster
That was a nice evening, Joy
I am feeling thirsty, Discomfort","phrase, category
This is a big mess, Disaster
That was a nice evening, Joy
I am feeling thirsty, Discomfort"
"In the following code snippet, what will be the output of the print statement ?x = 10
y = 5
x = x + y
print(x)","x = 10
y = 5
x = x + y
print(x) # Prints 15"
Design a function which takes two numbers as input and returns the largest one as output.,"def largest_of_two(num1, num2):
  if num1 > num2:
    return num1
  else:
    return num2"
"Assign the correct data type for the following variable.name = ""John Smith""","name = ""John Smith"" # str"
Design a function which prints all the permutations of a given list of numbers.,"def permutations(nums):
    if len(nums) == 1:
        return [nums]
    res = []
    for i in range(len(nums)):
        for p in permutations(nums[:i] + nums[i+1:]):
            res.append([nums[i]] + p)
    return res

if __name__ == '__main__':
    nums = [1, 2, 3]
    print(permutations(nums)) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
"Create an algorithm that iterates through a given string and returns the number of alphabets present in the string.""abracadabra""","def count_alphabets(string):
  count = 0
  for i in range(len(string)):
    if string[i].isalpha():
      count += 1
  return count"
"Write a function in R that takes a vector as an argument and returns a new vector in which each element is the average of that element with its two neighbors from the original vector.c(1, 4, 2, 8, 6)","average_three <- function(x) {
  c(mean(c(x[2], x[1])), mean(x), mean(c(x[2], x[3])))
}"
"Create a machine learning model in Python using the given data that classifies the data into either 'positive' or 'negative'.<contents of the dataset>, data type: binary classification","# Load the dataset
X, y = <contents of the dataset>

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(""Accuracy score: "", accuracy)"
"Find the minimum value from a given array.[3, -2, 4, 7]","def findMin(arr):
    current_min = arr[0]
    for num in arr:
        if num < current_min:
            current_min = num
    return current_min"
Describe how a linked list data structure works in pseudo code.,"A linked list is a linear data structure that consists of a sequence of elements, each element containing a pointer to the next element in the list. Some implementations may also contain a pointer to the previous element in the list. Pseudo-code would look like:

START 
Class Node 
   int data 
   Node next 
END Class 

Node head  // the start of the list 

// traverse the list 
while (current != NULL) {
   // process node 
   current = current.next 
}

END"
"Develop a Python code to extract all words from a sentence that begin with a specific letter.sentence = ""I love coding in Python""
letter = ""P""","sentence = ""I love coding in Python""
letter = ""P""

words_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]

print(words_starting_with_P)
# Output: ['Python']"
"Create a new array of integers which contains the sum of corresponding elements of two existing arrays.arr1 = [1, 2, 3]
arr2 = [4, 5, 6]","arr1 = [1, 2, 3]
arr2 = [4, 5, 6]

# Initialize new array
arr_sum = [0 for _ in range(len(arr1))]

# Add the values of both arrays
for i in range(len(arr1)):
    arr_sum[i] = arr1[i] + arr2[i]

print(arr_sum)
# Output: [5, 7, 9]"
"Create a regular expression for validating a lowercase alphabet, number, or underscore.",^[a-z0-9_]*$
Construct a for loop for iterating 10 times and executing a block of code.,"for (int i=0; i<10; i++) {
    // execute block of code
}"
"Debug the following function.def f(n):
    i = 0
    while i < n:
        i+=1
        if i % 5 == 0:
        print(i)","def f(n): 
    i = 0
    while i < n:
        i+=1
		# Fixed missing indentation
        if i % 5 == 0:
            print(i)
		# Added missing closing bracket after print() statement"
Construct an object-oriented code for a Book class.,"class Book:
    def __init__(self, title, author, year):
        self.title = title
        self.author = author
        self.year = year
        
    def get_title(self):
        return self.title
    
    def get_author(self):
        return self.author
    
    def get_year(self):
        return self.year
    
    def set_title(self, new_title):
        self.title = new_title
        
    def set_author(self, new_author):
        self.author = new_author
        
    def set_year(self, new_year):
        self.year = new_year"
Create an algorithm that can recognize handwriting.,"The algorithm should use pre-processing techniques like image cropping, normalization, and thresholding to convert the raw input image into a binary image. It should then use feature extraction techniques like contours, corner detection, and Hough Transform to detect and separate the characters from the image. The algorithm should then use machine learning techniques like error-backpropagation and convolutional neural networks to classify and recognize the characters in the image."
Suggest a better algorithm for calculating Fibonacci sequence.,"A better algorithm for calculating Fibonacci sequence is the iterative method. Instead of making recursive calls, this method computes each element of the Fibonacci sequence in a loop. This method is more efficient and requires less memory overhead. The algorithm is as follows:

def iterative_fibonacci(n):
    a = 0
    b = 1
    for i in range(1,n+1):
        c = a + b
        a = b
        b = c
    return a"
Write a generic code for traversing a tree.,"def traverse_tree(root): 
  if root is None: 
    return
	
  traverse_tree(root.left) 
  print(root.data) 
  traverse_tree(root.right)"
Write a regular expression that matches all English alphabets.,RegEx: [a-zA-Z]
"Create a new view controller class named ""MainViewController"".","class MainViewController: UIViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }

}"
"Create a new View subclass of UIView and name it ""MainView"".","class MainView: UIView { 
  override func draw(_ rect: CGRect) {
      // code to customize the main view
  }
}"
How does recursion work?,"Recursion is a method of problem solving where the solution to a problem relies on solving smaller instances of the same problem. In computing, recursion is a process by which a method calls itself continuously. A base case is used to terminate the recursion, and each time the method calls itself, it works on a smaller version of the problem. Recursive algorithms can be used to solve a wide range of problems, from sorting and searching algorithms, to graph traversal and problems in computer graphics."
"Suggest a way of sorting an array of integers A in descending order.A = [4, 7, 2, 9, 6];",A.sort(reverse=True);
"Rewrite the following code using try and except blocks.if (len(list) == 0):
    print(""List is empty"")","try:
    if (len(list) == 0):
        print(""List is empty"")
except:
    print(""No list is given"")"
"Run the following program and provide the console output.def multiply(x, y):
    return x * y

print(multiply(2, 5))",10
"Suggest a way to display the following list in a readable format.list = [3,5,7,9,11]","print("", "".join(str(x) for x in list)) 
# Output: 3, 5, 7, 9, 11"
"Suggest a way of replacing all the vowels in a string with a star (*).string = ""Hello World!""","print(''.join([x if x not in 'aeiou' else '*' for x in string]))
# Output: H*ll* W*rld!"
"Suggest a way of encrypting text using a Caesar cipher.plaintext = ""Hello World""","def caesar_encrypt(plaintext, k):
    ciphertext = """" 
  
    # traverse text 
    for i in range(len(plaintext)): 
        char = plaintext[i] 
  
        # Encrypt uppercase characters 
        if (char.isupper()): 
            ciphertext += chr((ord(char) + k-65) % 26 + 65) 
  
        # Encrypt lowercase characters 
        else: 
            ciphertext += chr((ord(char) + k - 97) % 26 + 97) 
  
    return ciphertext 

print(caesar_encrypt(plaintext, 3))
# Output: Khoor Zruog"
"Suggest a way of decoding a string encoded using Base64.encoded_string = ""SGVsbG8gV29ybGQ=""","import base64

def decodeBase64(encoded_string):
    return base64.b64decode(encoded_string).decode('utf-8')

print(decodeBase64(encoded_string))
# Output: Hello World"
"Identify and correct the bug in the following program.def square_numbers(lst):
    lst_sq = []
    lst_sq.append(lst[i] ** 2 for i in range(len(lst)))
    return lst_sq","def square_numbers(lst):
    lst_sq = []
    for i in range(len(lst)):
        lst_sq.append(lst[i] ** 2)
    return lst_sq"
Create a program to generate the n-th Fibonacci number.,"def fibonacci(n):
    '''This function returns the n-th Fibonacci number.'''

    if n == 0 or n == 1:
        return n
    
    fib_n_1 = 0
    fib_n_2 = 1

    for i in range(2, n+1):
        fib_n = fib_n_1 + fib_n_2
        fib_n_1, fib_n_2 = fib_n_2, fib_n

    return fib_n"
"Extract the strings that match the following regex pattern from a text blocktext block = “hotel #9888, school #9876, airport #987”
regex pattern = #[0-9]{4}","['#9888', '#9876', '#987']"
"Replace the placeholders in the following Python code snippet with appropriate values.for x in range(__, __):
    print(x)","for x in range(0, 10):
    print(x)"
Identify the division of numbers 10 and 5.,The division of 10 and 5 is 2.
Create a multi-dimensional array in Python.,"arr = [[1,2,3], [4,5,6], [7,8,9]]"
"Print the maximum element in a linked list.head - [1, 3, 4, 10, 8]","def maximum(head): 
    max = head.data 
    while head is not None: 
        if max < head.data: 
            max = head.data 
        head = head.next
    return max"
"Create a loop in Python to multiply each element of a list with 10.lst = [1, 2, 3, 4, 5]","def multiply_list(lst):
    for i in range(len(lst)):
        lst[i] *= 10
    return lst"
"Given an array of integers and a target value, modify the array such that each element is the multiplication of the previous element and the target value.arr = [2, 4, 5], target = 3","arr = [2, 8, 24]  # [2 * 3, 4 * 3, 5 * 3]"
"Compute the average of the elements of the given list.nums = [8, 19, 2, 5, 6]",average = 8.4  # (8 + 19 + 2 + 5 + 6)/5
"Find the closest number to given value using a binary search algorithm.arr = [2, 4, 7, 10, 11, 12], val = 6",closest_num = 7  # 10 is the closest number to 6 in the array
"Print the value corresponding to the given key in a dictionary.dic = {'name': 'John', 'age': 18}, key = 'name'",John  # The value associated with 'name' is 'John'
"Create a class that contains two methods: one to generate a random number between a given range, and one to create a list of ""n"" random numbers.n = 10, min = 0, max = 100","class RandomNumberList:
    def __init__(self):
        self.numbers = []
    
    def generate_random(self, min, max):
        return random.randint(min, max) 
    
    def create_list(self, n, min, max):
    # Generate a list of n random numbers between min and max
        self.numbers = [self.generate_random(min, max) for _ in range(n)]
        return self.numbers"
"Calculate the sum of all the integers in the range of m to n (inclusive).m = 10, n = 20",sum = 165  # 10 + 11 + 12 + ... + 20 = 165
"Suggest an improvement to make the code more efficient.a = [1,2,3,4,5]
loop_count = len(a)
while loop_count > 0:
    print(loop_count)
    loop_count -= 1","a = [1,2,3,4,5]
for number in a:
    print(number) // Instead of looping through the number of items in 'a', loop through the items of 'a' directly."
Suggest a method to search for a specified character in a string.,"One approach is to loop through each character in the string and check if it matches the character to be searched for. If it does, the index of the character can be returned, or a boolean indicating whether the character is present in the string or not can be returned. Another approach is to use built-in string functions such as .indexOf() or .includes() to search for the specified character."
"Suggest a way to make the following code more concise.if i == 0:
    result = ""zero""
elif i == 1:
    result = ""one""
elif i == 2:
    result = ""two""","result = [""zero"", ""one"", ""two""][i] // Using a list and indexing can shorten the code."
"Suggest a way to change the following code so that it does not use a nested loop.for n in range(10):
    for i in range(n):
        print('*', end='')
    print()","for n in range(10):
    print('*' * n) // The code can be rewritten to use one single line and one loop only."
"Suggest a data structure that can be used to store contacts information (name, email, phone number).","A hash table can be used to store the contacts information as it provides a key-value mapping of the information. Keys can be either the name, email or phone number depending on the mapping pattern desired. A set or LinkedList can also be used for this purpose, as the information does not have any orders associated with it."
"Write a regular expression that matches URLs that end with "".net"".","/(.*)\.net$/ // Matches URLs that end with "".net""."
"Suggest one line of code that should be added to the following function to make it more efficient.def search_prime_numbers(n):
    for num in range(2, n + 1):
        for i in range(2, num):
            if num % i == 0:
                break
        else:
            print(num)","def search_prime_numbers(n):
    for num in range(2, n + 1):
        if num > 2 and num % 2 == 0: // This line can be added to make the function more efficient by avoiding the check for even numbers greater than 2.
            continue
        for i in range(2, num):
            if num % i == 0:
                break
        else:
            print(num)"
Generate a random password of 8 characters containing numbers and letters.,jK9xz39V
Use regular expression to create a pattern to identify email addresses in a string.‘This is an example of an email: xyz@example.com’,pattern = re.compile(r'[\w\.-]+@[\w\.-]+')
Create a user-defined type in Python to store information about a person.,"class Person:
    def __init__(self, firstname, lastname, age):
        self.firstname = firstname
        self.lastname = lastname
        self.age = age

person1 = Person('John', 'Smith', 25)"
Implement a class to implement a Huffman coding algorithm.,"class HuffmanCoding:
 
    def __init__(self, inp_string):
        self.inp_string = inp_string
        self.string_length = len(inp_string)
        self.frequency_table = self.get_frequency_table(inp_string)
        self.huff_tree = self.build_huffman_tree(self.frequency_table)
 
    def get_frequency_table(self, inp_string):
        # Create dictionary to store frequencies
        freq_table = {}
        # Count frequency of characters in the string
        for char in inp_string:
            if char in freq_table:
                freq_table[char] += 1
            else:
                freq_table[char] = 1
        # Return the frequency table
        return freq_table
 
    def build_huffman_tree(self, frequency_table):
        # Create a priority queue to store the trees 
        pq = PriorityQueue()
        # Create a tree for each value
        for value in frequency_table:
            pq.put((frequency_table[value], Node(value)))
        # Start the loop with two trees
        while pq.qsize() > 1:
            left_node = pq.get()
            right_node = pq.get()
            combined_freq = left_node[0] + right_node[0]
            new_node = Node(left=left_node[1], right=right_node[1])
            pq.put((combined_freq, new_node))
        # Return the tree
        return pq.get()[1]"
What is the workflow of a deep learning project?,"The workflow of a deep learning project typically consists of the following steps:

1. Data Collection, Preparation and Analysis: Collecting and preparing the data for the project, including data exploration, feature engineering, and data cleaning.

2. Model Design & Training: Designing the architecture of the deep learning model and selecting the best hyperparameters that will lead to the highest possible performance on a given task.

3. Model Evaluation: Evaluating the performance of the model on test data to determine its accuracy.

4. Model Deployment: Deploying the model in the form of an application or service."
Implement the bottom up cut rod algorithm in Python.,"def bottomUpCutRod(prices, n): 
 
    # Create an array of size n+1 
    temp_array = [0 for i in range(n+1)] 
    for i in range(1, n+1): 
        tempval = -float('inf') 
        for j in range(i): 
            tempval = max(tempval, prices[j] + temp_array[i-j-1]) 
        temp_array[i] = tempval 
  
    return temp_array[n]"
How can you handle errors in Python?,"Python provides two ways to handle errors: 

1. The try and except statement, and 
2. The raise statement.

The try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception."
Describe the working of a Recurrent Neural Network (RNN).,"A Recurrent Neural Network (RNN) is a type of artificial neural network that is widely used for natural language processing, dialogue systems, and time series prediction. RNNs have the ability to process data sequences, which gives them an advantage over traditional neural networks. This is done by using recurrent connections between the hidden layers of the network. In this type of network architecture, the outputs from the previous layer are used as inputs to the next layer. This allows the network to remember the context of the data sequentially, which makes it suitable for problems with a temporal component. RNNs can also be used to train the model to produce a sequence output by predicting the next item in the sequence."
Provide a function to implement a Binary Tree traversal.,"def printTree(root): 
    
    # Check if tree is empty
    if root == None: 
        return
    
    # First print the root data
    print(root.data, end="" "")
    
    # First recur on left child
    printTree(root.left)
    
    # the recur on right child
    printTree(root.right)"
"Create a correlation heatmap in Python using a given dataset.import pandas as pd
import numpy as np

data = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))","import seaborn as sns
import matplotlib.pyplot as plt

corr = data.corr()

sns.heatmap(corr, 
        xticklabels=corr.columns,
        yticklabels=corr.columns)
plt.show()"
"For a given programming language, list the data types supported by that language.","In Java, the supported data types include primitive data types like int, float, char, as well as non-primitive types such as String, Array, List, Set, and Map."
Generate the Fibonacci sequence in a given range in Python.n = 8,"def Fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print(""Incorrect input"") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
Fibonacci(n)"
Write code to convert a given string to all uppercase letters in Python.,"string_org = ""convert this to uppercase""
string_uppercase = string_org.upper() 
print(string_uppercase) 
# OUTPUT: CONVERT THIS TO UPPERCASE"
What is the ASCII character for the code “97”?,The ASCII character for the code “97” is 'a'.
"In the following code, what is the variable a?var a = 3 + 4;","The variable a is the result of the expression 3 + 4, which is 7."
"Write a recurrence relation for the following algorithm.Algorithm A:
n = n - 3 
if n ≥ 0 then A(n)","The recurrence relation for Algorithm A is A(n) = A(n - 3), n ≥ 0."
Suggest a machine learning model for predicting stock prices.,"A possible machine learning model for predicting stock prices is the Long Short-Term Memory (LSTM) Neural Network. This model is widely used for forecasting time-series data, such as stock prices. It is capable of capturing long-term dependencies and has been used successfully to make accurate predictions in many areas."
How would you design a game of hangman using object-oriented programming?,"In designing a game of hangman using object-oriented programming, one could create separate classes for a Hangman game, a player, a puzzle, and a set of words. The Hangman class would be responsible for managing the game overall and for handling the interactions between the player and the puzzle. The player class would store the players name, number of guesses, and score. The puzzle class would manage the state of the puzzle and handle updates when new letters are guessed. Finally, the Words class would handle the management and loading of word data."
"Convert the following block of code into a more concise version using more appropriate looping mechanisms.myList = [""one"", ""two"", ""three"", ""four""]

newList = []
for element in myList:
    newList.append(element[0])","myList = [""one"", ""two"", ""three"", ""four""]

newList = [element[0] for element in myList]"
"Write a code snippet that prints out each name and its length.names = [""John"", ""Alice"", ""Paul""]","for name in names:
    print(name, len(name))"
Generate a list containing all multiples of 3 from 0 to 30.,"multiples_of_3 = [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]"
"Sort the string list across both key and value.list =[(""hello"", 1), (""world"", 2), (""today"", 4), (""is"", 3)]","list =[(""hello"", 1), (""world"", 2), (""today"", 4), (""is"", 3)]
sorted_list = sorted(list, key = lambda kv:(kv[0], kv[1])) 
print(sorted_list)"
Describe a short code fragment that imports xml as an object.,"import xml.etree.ElementTree as ET 
tree = ET.parse(""doc.xml"") 
root = tree.getroot()"
"Modify the code to make it compatible with Python 3.mylist = range(20)

for i in mylist:
    print i","mylist = list(range(20))

for i in mylist: 
    print(i)"
"Remove the empty tuples in the list.mylist = [(), (1,), (1, 2), (), (3, 4), (), (5)]","mylist = [(), (1,), (1, 2), (), (3, 4), (), (5)]
filtered_list = list(filter(None, mylist))
print(filtered_list)"
"Modify the following code to print all words with more than 5 characters in a given string.text = ""This is an example string""","text = ""This is an example string""
words = text.split() 
for word in words: 
    if len(word) > 5: 
        print(word)"
"Write a python program to replace the character ‘e' with the character ‘E' for strings of length more than 5text = ""Hello world!""","def replace_char(text):
    if len(text) > 5:
        return text.replace('e','E')
    else:
        return text"
"Write a Python function to split a list of items into groups of n.list = [""red"", ""green"", ""orange"", ""blue"", ""pink"", ""purple""]","def split_list(data, n):
    output = [data[i:i+n] for i in range(0, len(data), n)]
    return output"
"Write a Python program to check if a list contains a specific item.data = [3, 4, 5, 6, 7]","def contains_item(data, item):
    return item in data"
"Given a string s, create a function to find the character that appears the most and return its index.s = ""Big Data""","def most_freq_char(s):
 freq_dict = {}
 
 for char in s:
 if char in freq_dict:
 freq_dict[char] += 1
 else:
 freq_dict[char] = 1
 
 max_freq = 0
 max_char = """"
 
 for key in freq_dict:
 if max_freq < freq_dict[key]:
 max_freq = freq_dict[key]
 max_char = key
 
 return s.index(max_char)"
"Given a list of strings, write a function to sort them alphabetically.[""orange"", ""apple"", ""banana""]","def sort_strings(lst):
 return sorted(lst, key=str.lower)"
"Generate a token based on the given parameters.Parameters: Algorithm (SHA-256), Size (32 characters), Encode (Hexadecimal)","import hashlib

def generate_token(algorithm, size, encoding):
	token = hashlib.sha256(os.urandom(size//2)).hexdigest()[:size]
	return token"
"Assign the values of list_2 to the same positions of list_1.list_1 = [1, 2, 5, 8]
list_2 = [3, 6, 9, 12]","list_1[0] = 3
list_1[1] = 6
list_1[2] = 9
list_1[3] = 12"
Describe the purpose of the else statement in an if-else statement.,The else statement in an if-else statement is used to execute a block of code when the expression in the if statement returns false. It provides an alternate option if the condition in the if statement is not satisfied. The else statement can be followed by an additional if-else statement in order to create an if-else-if ladder.
"Change the given program code to swap the values of two variables 'a' and 'b'.let a = 8;
let b = 12;","let a = 12;
let b = 8;"
Construct a while loop in order to traverse through an array.,"arr = [1, 2, 3, 4, 5]
i = 0

while i < len(arr): 
  element = arr[i]
  print(element)
  i += 1"
"Suggest a way to find all the divisors of a number, n.","We can find all the divisors of a number by using a for loop to iterate from 1 to n. For each number, we check if it is a divisor of n. If it is, then we add it to a list of divisors. At the end of the loop, we will have the list of all divisors of n."
Describe the process of writing a recursive program.,"Writing a recursive program involves identifying a base case, which is a situation where the answer has been found and doesn’t need to be recomputed. This is followed by defining the recursive case which involves breaking the problem down into smaller and smaller subproblems until the base case is reached. Each recursive call should pass the necessary information to the next call for solving the subproblem. The computed results are eventually combined to solve the original problem."
Create a function that takes an integer n as an argument and returns the sum of all numbers from 1 to n.n = 10,"def sum_to_n(n):
    total = 0
    for i in range(1, n + 1):
        total += i
    return total"
"Find the max 2 numbers in a list of 5 numbers without using any comparison operator.arr = [3, 10, 2, 5, 9]","def findMax2Numbers(arr): 
    max1 = 0
    max2 = 0
    
    for i in range(len(arr)): 
        temp = arr[i] + max1 
        max2 = max1 
        if temp > max2: 
            max1 = temp 
        elif max2 > temp: 
            max1 = max2 
    
    return max1, max2"
Generate a for-loop that prints out the square of the first 10 natural numbers.,"for i in range(1,11):
  print(i ** 2)"
"Given a list of numbers, write a function that returns the sum without using the built-in 'sum()' function.arr = [3, 4, 2, 5, 9]","def add_nums(arr):
    total = 0
    for x in arr:
        total += x
    return total"
Write an AppleScript to open a given link in Safari.https://www.google.com,"tell application ""Safari"" 
  open location ""https://www.google.com"" 
end tell"
Create a function in Python to replace a specified element in a given list,"def replace_in_list(list, old_element, new_element):
  for i, element in enumerate(list):
    if element == old_element:
      list[i] = new_element
  return list"
Write the shortest code to print Hello World,print('Hello World')
Write a Python class to print the sum of an array elements,"class ArraySum: 
    def __init__(self, arr):
        self.arr = arr

    def sum(self):
        total = 0
        for i in self.arr:
            total += i
        return total"
"Extract the first half of a given string.string = ""This is an example of string""","first_half = string[0:len(string)//2] # ""This is an"""
Create an array containing the last three prime numbers.,"last_three_primes = [97, 89, 83]"
Write a function to identify leap year.,"def isLeapYear(year): 
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: 
        return True 
    else: 
        return False"
"Create a regular expression pattern to find all words ending with ""able"".","pattern = re.compile(r""\w+able\b"")"
"Create a LINQ query to count the number of elements with a specific value.List<int> arr = [1, 2, 3, 4, 5, 5];",int count = arr.Count(x => x == 5);
"Design a regular expression to match strings that begin with the letter ""a"".",^a.*
"Rewrite the following code to delete the elements from the list which are not even.x = [1, 2, 3, 4, 5]",x = [i for i in x if i % 2 == 0]
"Given a two lists, combine the contents of both lists into a new list.list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]",new_list = list1+list2
Create a variable to store your name.,"name = ""John"""
"Write a for loop to iterate through a list of integers and print out the square of each value.numbers = [1, 2, 3, 4]","for num in numbers:
    print(num**2)"
"Find the index of the first occurence of the given element in a list.my_list = [2, 5, 6, 8, 10]
element = 8",index = my_list.index(element)
What do we mean by immutability in Python?,"Immutability in Python refers to the concept of objects that are unable to be modified. Immutable objects are specified when they are created and cannot be changed beyond that point. For example, tuples and strings are always immutable."
"Strip the white spaces from a given string.my_string = ""   Hello World     """,stripped_string = my_string.strip()
Create an array with 3 elements of your choice.,"my_array = [""John"", 25, True]"
"Parse the sentence and extract all the verbs from it.Sentence: ""She ran quickly to catch the bus.""","def extract_verbs(sentence):
  verbs = []
  words = sentence.split("" "")
  for w in words:
    if w.endswith(""ed"") or w.endswith(""ing""):
      verbs.append(w)
  return verbs"
"Train a Machine Learning model using scikit-learn that can solve a binary classification problem.Dataset - number of samples 1000, number of features 5, target label - binary","from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

logreg = LogisticRegression(random_state=0).fit(X_train, y_train)"
Create a class named Student. Give it two fields - name and age.,"class Student:
  def __init__(self, name, age):
    self.name = name
    self.age = age"
"Find the two adjacent elements in the array with the largest sum.Array: [3, 6, 8, -10, 5]","def find_adjacent(arr):
  max_sum = -1
  for i in range(len(arr)-1):
    if arr[i] + arr[i+1] > max_sum:
      max_sum = arr[i] + arr[i+1]
  return max_sum"
"Generate a dictionary that contains all the words in a string of text, and the number of times each word occurs.Text: ""I like dogs and cats and I like cats more than dogs""","def create_dict(text):
  text_list = text.split(' ')
  count_dict = {}
  for word in text_list:
    count_dict[word] = count_dict.get(word, 0) + 1
  return count_dict"
"Create a list of dictionaries, with each dictionary containing a person's name, age, and city.Name1: Alice; Age1: 24; City1: Boston
Name2: Bob; Age2: 32; City2: New York
Name3: Chris; Age3: 28; City3: San Francisco","persons = [
  {'name': 'Alice', 'age': 24, 'city': 'Boston'},
  {'name': 'Bob', 'age': 32, 'city': 'New York'},
  {'name': 'Chris', 'age': 28, 'city': 'San Francisco'},
]"
"Edit the sentence to make it grammatically correct.Sentence: ""I work at the library did.""",I worked at the library.
"Classify the given animals into two categories: mammal or reptile[dog, snake, turtle, elephant]","Mammal: dog, elephant 
Reptile: snake, turtle"
"Create a new list object by selecting the names that start with a ‘A’ from the given list[Alfred, John, Anthony, Paula]",Name_list = [name for name in input_list if name[0] == 'A']
"Edit the following Python code to print out “The answer is X”print(""X + 5 = 10"")","print(""The answer is "" + str(10 - 5))"
Create a rectangle using the turtle library in Python,"import turtle
t = turtle.Turtle() 
t.forward(100) 
t.left(90) 
t.forward(50) 
t.left(90) 
t.forward(100) 
t.left(90) 
t.forward(50) 
t.left(90)"
"Create a pandas dataframe containing the following columns and their respective values:A, B, C
A= 12, 15, 20
B= 30, 25, 35
C= 40, 45, 50","df = pd.DataFrame({""A"": [12,15,20], 
                    ""B"": [30,25,35], 
                    ""C"": [40,45,50]})"
"Summarize the article 'X' in one or two paragraphs.Article 'X':

This article is about the history of the city of Rome. Rome was founded in 753 BCE by two brothers, Romulus and Remus. Since then, Rome has been a powerful city that has played a huge role in the formation of Western civilization. The Roman Republic was established in 509 BCE, and the Roman Empire followed in 27 BCE. During its long reign, Rome expanded its borders and implemented various laws and policies that shaped the legal systems of many countries.","Rome is one of the oldest cities in the world, having been founded in 753 BCE by Romulus and Remus. Following its founding, Rome quickly developed into a powerful city-state, establishing the Roman Republic in 509 BCE and the Roman Empire in 27 BCE. During its reign, Rome significantly expanded its reach and instituted laws and policies that influenced much of Western civilization. It eventually fell in 476 CE, yet its legacy continues to impact many countries today."
Find the index of the first occurrence of the word 'data' in the text 'The data here is important'.,The index of the first occurrence of 'data' is 4.
"Construct a matrix using the given list of numbers.numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9],
          [10]]"
"Given a positive integer number, generate the Fibonacci series.","def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
Make a matrix multiplication program that takes an arbitrary number of matrices as input.,"def matrix_multiplication(*matrices):
    res = [[0 for _ in range(len(matrices[0][0]))]
        for _ in range(len(matrices[0]))]
    for y in range(len(matrices[0])):
        for x in range(len(matrices[0][0])):
            for m in range(len(matrices)):
                res[y][x] += matrices[m][y][x]
    return res"
Write a computer program to print all primes in an inputted range.,"def print_primes(start, end):
    for num in range(start, end + 1):
        # all prime numbers are greater than 1
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                print(num)"
"Select the overlapping elements between two listslist1 = [1, 2, 3, 4, 5, 6]
list2 = [3, 4, 5, 6, 7, 8]","[3, 4, 5, 6]"
"Implement a function for searching an item in the given list.list = [1, 4, 5, 6, 8, 9]
item = 5","def search(list, item):
    for i in range(len(list)):
        if list[i] == item:
            return True
    return False"
Create a function that takes a string and checks if it's a valid email or not.string = 'example[at]gmail.com',"import re

def isValidEmail(string):
    # regex to check for valid email address
    regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
    if(re.search(regex,string)):  
        return True  
    else:  
        return False"
"Write a function for removing duplicates from a given listlist = [1, 2, 3, 3, 4, 2]","def removeDuplicates(list):
    # create a new set with unique elements from list
    unique_set = set(list)
    # convert set back to list
    unique_list = list(unique_set) 
    return unique_list"
"Write a code to print out a two-dimensional array.A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","for row in A:
    for elem in row:
        print(elem, end=' ')
    print()"
"Compare two strings and count the number of characters that are different.str1 = 'hello'
str2 = 'hallo'","def countTextDifference(str1, str2):  
    # store length of both strings  
    len1 = len(str1)   
    len2 = len(str2)   
  
    # store the number of characters  
    # which are different  
    count = 0 
  
    # compare and count the number  
    # of characters which are different 
    for i in range(0, len1):      
        if (i >= len2): 
            count += (len1 - len2) 
            break
        if (str1[i] == str2[i]):  
            continue
        else:      
            count += 1
    
    # return different character count 
    return count"
"Generate a dictionary with the name of the person as key and the cower letter of their name as value.names = ['John', 'Max', 'Alice']","result = {} 
for name in names: 
    # get the first letter from the name 
    first_letter = name[0] 
    result[name] = first_letter 

print(result) 
# {'John': 'J', 'Max': 'M', 'Alice': 'A'}"
"Compare two strings and return true if both strings have the same number of characters.string1 = ""hello""
string2 = ""world""","def compare_strings(string1, string2):
    """"""Compare two strings and return True if both strings have the same number of characters.""""""
    if len(string1) == len(string2):
        return True
    else:
        return False"
"Write code to determine if a word is a palindrome or not.word = ""noon""","def palindrome_check(word):
    """"""Check if a given word is a palindrome.""""""
    # reverse the given word
    reversed_word = word[::-1]
    if word == reversed_word:
        return True
    else:
        return False"
Create a function to convert a character to its ASCII code.character = 'a',"def char_to_ascii(character):
    """"""Convert a character to its ASCII code.""""""
    ascii_code = ord(character)
    return ascii_code"
"Calculate the maximum value in a dictionary.d = {'a': 1, 'b': 3, 'c': 5}","def get_max_value(d):
    """"""Calculate the maximum value in a dictionary.""""""
    max_value = 0
    for key in d:
        if d[key] > max_value:
            max_value = d[key]
    return max_value"
"Assign a random value to each item in a given list.my_list = [1, 2, 3]","import random

def assign_random_value(my_list):
    """"""Assign a random value to each item in a given list.""""""
    # iterate through each item in the list
    for i in range(len(my_list)):
        # generate a random integer between 0 and 1
        random_int = random.randint(0, 1)
        # assign the random integer to the current item in the list
        my_list[i] = random_int
    return my_list"
"Edit this regression model to predict continuous values.import numpy as np

def model(x):
    return np.mean(x)","import numpy as np

def model(x):
    return np.mean(x) + np.poly1d(np.polyfit(x, y, 2))(x)"
What should the following function return?def calculate_sd(numbers):,"def calculate_sd(numbers):
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    sd = variance ** 0.5
    return sd"
"What should the following code print out?def f(n):
    if n == 0:
        return 0
    else:
        return n + f(n-1)

print(f(5))","def f(n):
    if n == 0:
        return 0
    else:
        return n + f(n-1)

print(f(5)) # prints 15"
Extract the city name from the following URL.https://www.example.com/los_angeles,"url = 'https://www.example.com/los_angeles'
city = url.split('/')[-1] # returns 'los_angeles'"
What should this function take as input and return?def find_longest_word(words):,"def find_longest_word(words):
    '''This function takes a list of words as input and returns a string containing the longest word'''
    longest_word = ''
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word"
Suggeste a completion of the following code:def flatten(nested_list):,"def flatten(nested_list):
    flat_list = []
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list"
Reverse the words of the following sentence.This is a sentence,sentence a is This
Create a quicksort alogorithm in the following languageJava,"import java.util.ArrayList;

public class Qsort {
    public static int partition(ArrayList<Integer> array, int low, int high) {
        int pivot = array.get(high);
        int i = low-1; 
        for (int j=low; j<high; j++) {
            if (array.get(j) < pivot) {
                i++;
                int temp = array.get(i);
                array.set(i, array.get(j));
                array.set(j, temp);
            }
        }
        int temp = array.get(i+1);
        array.set(i+1, array.get(high));
        array.set(high, temp);

        return i+1;
    }

    public static void quicksort(ArrayList<Integer> array, int low, int high) {
        if (low < high) {
            int pivot_position = partition(array, low, high);
            quicksort(array, low, pivot_position-1);
            quicksort(array, pivot_position+1, high);
        }
    }
}"
"Create an array named ``students`` which contains the elements ``John``, ``Jane``, ``Emily``, and ``Michael``.","const students = ['John', 'Jane', 'Emily', 'Michael'];"
Define a python function called ``string_length`` that can take a string as an argument and output the length of that string.,"def string_length(str):
  return len(str)"
"If a singly linked list is represented only by its head pointer, how would you reverse it?","public static ListNode reverseList(ListNode head) { 
  
    // Initialize current, previous and 
    // next pointers 
    ListNode current = head; 
    ListNode prev = null; 
    ListNode next = null; 
  
    while (current != null) { 
        // Store next 
        next = current.next; 

        // Reverse current node's pointer 
        current.next = prev; 
  
        // Move pointers one position ahead. 
        prev = current; 
        current = next; 
    } 
    head = prev; 
    return head; 
}"
"You are given a 2-D array named ""matrix"" and its size is MxN. Print the matrix in a spiral form.int matrix[][] = {{1, 2, 3},
                  {4, 5, 6},
                  {7, 8, 9}}",1 2 3 6 9 8 7 4 5
"You are given a string ""hello"". Write a function to print out all the possible subsets of that string.","def generate_subsets(string):
    if len(string) == 0:
        return ['']
    else:
        results = list()
        for s in generate_subsets(string[1:]):
            results.append(s)
            results.append(string[0] + s)
        return results

print(generate_subsets('hello'))"
"Analyze the following code and determine if there any potential errors.def foo(X, Y):
    for i in range(1, X):
        for j in range(1, Y):
            print i
    return","Yes, there is a potential error. The outer loop iterates over the range of 1 to X, but the inner loop iterates over the range of 1 to Y. Because of this, the loop will only be executed Y-1 times. The output will only print the first Y-1 elements of X. To fix this, the outer loop should iterate over the range of 1 to Y instead."
Answer the following question: What is the purpose of software testing?,"Software testing is the process of evaluating a software product in order to identify any potential issues and ensure that the end product meets the user's requirements. It is an essential part of the software development process, as it provides feedback about the product's quality and performance. Testing also helps ensure that a product is safe and secure, as it can detect potential problems and errors before the product is released."
"Classify the following news article into one of the 8 major topics: ""Politics"", ""Economy"", ""Tech"", ""Science"", ""Culture"", ""Education"", ""Sports"" or ""Lifestyle"".A new study by scientists from the University of California has found a link between diet and depression.",Science
"Construct a loop that iterates over the characters of a given string and prints each character in uppercase.string = ""Hello World!""","for ch in string:
    print(ch.upper())"
"Replace the ""TODO"" comment in the given code with appropriate code.if <condition>:
    # TODO","if <condition>:
    print(""Condition is satisfied"")"
Create a algorithm to calculate the fibonacci number of nth term.,"def fib(n):
    a = 0
    b = 1
    if n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2,n):
            c = a + b
            a = b
            b = c
        return b"
Create a Visual Basic function to print the contents of an array.,"Public Sub PrintArray(arr() As Integer)
    For i = 0 To arr.Length - 1
        Console.WriteLine(arr(i))
    Next
End Sub"
What is the purpose of a library in software development?,"The purpose of a library in software development is to provide a collection of related functions and data structures that can be used by a program. Libraries are used to simplify or abstract away the details of how a particular operation is implemented or offer prepackaged functionality. Libraries offer code reuse, faster development time, and optimized performance. They also act as the interface between the application and the system or the environment it is running on."
Write a function to calculate the cost of purchasing X items at a given costX = 5 and Cost per item= 2.00,"def cost(x, price): 
    return x*price 
cost(5, 2.00)  # returns 10.00"
Develop a method to achieve the linear interpolation between two given points,"def linear_interpolation(x1, y1, x2, y2): 
    # slope 
    m = (y2 - y1) / (x2 - x1) 
    # intercept 
    c = y2 - (m * x2) 
    return m, c"
"Generate code for printing a given 2D matrix in spiral ordermatrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]","def print_spiral(matrix):
    # matrix is an 2D array 
    row_start = 0
    row_end = len(matrix)-1
    col_start = 0
    col_end = len(matrix[0])-1

    while row_start <= row_end and col_start <= col_end:
        # print top row 
        for i in range(col_start, col_end+1):
            print(matrix[row_start][i])
        # increment row start 
        row_start += 1

        # print right column
        for i in range(row_start, row_end+1):
            print(matrix[i][col_end])
        # decrement col end
        col_end -= 1
        
        # print bottom row
        if row_start <= row_end:
            for i in range(col_end, col_start-1, -1):
                print(matrix[row_end][i])
            # decrement row end
            row_end -= 1

        # print left column
        if col_start <= col_end:
            for i in range(row_end, row_start-1, -1):
                print(matrix[i][col_start])
            # increment col start
            col_start += 1"
Create a TensorFlow program to implement a multi-layer neural network,"import tensorflow as tf

# create the model
model = tf.keras.models.Sequential()

# add layers to the model
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(32, activation='relu'))
model.add(tf.keras.layers.Dense(16, activation='relu'))
model.add(tf.keras.layers.Dense(8, activation='sigmoid'))
model.add(tf.keras.layers.Dense(4, activation='softmax'))

# compile the model
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])"
Create a data structure to store the 5 highest scores of a given game,"# create a priority queue 
# score will be the priority and name will be stored as data
import queue
scores = queue.PriorityQueue(maxsize=5)

def add_score(score, name):
    if scores.full():
        min_score = scores.get()
        if min_score[0] < score:
            scores.put((score, name))
        else:
            scores.put(min_score)
    else:
        scores.put((score, name))"
"Write an algorithm to store the data in a 2D array.[[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]","def storeDataIn2DArray(data):
    rowLength = len(data[0])
    columnLength = len(data)
    twoDArray = []
  
    for row in range(rowLength):
        twoDArrayRow = []

        for column in range(columnLength):
            twoDArrayRow.append(data[column][row])

        twoDArray.append(twoDArrayRow)

    return twoDArray"
Create a function to print the contents of a binary tree in pre-order format.,"def printPreOrder(root): 
    if root != None: 
        print(root.data, end="" "") 
        printPreOrder(root.left) 
        printPreOrder(root.right)"
"Alter the following code to create a function called ""find_largest"" to find the largest number in a given list.[9, 11, 7, 16, 20]","def find_largest(lst):
    largest_number = lst[0]
    for num in lst:
        if num > largest_number:
            largest_number = num
    return largest_number"
"Write a python code to print every key and its corresponding value in a dictionary.{""Name"": ""John"", ""Age"": 20, ""Country"": ""USA""}","dic = {""Name"": ""John"", ""Age"": 20, ""Country"": ""USA""} 
for key, value in dic.items():  
    print(key + "" : "" + str(value))"
Alter the following code to detect a loop in a linked list,"def detectLoop(head): 
    slow_p = head  
    fast_p = head  
  
    while (slow_p and fast_p and 
             fast_p.next): 
        slow_p = slow_p.next
        fast_p = fast_p.next.next
          
        if slow_p == fast_p: 
            return 1
  
    return 0"
Suggest a way to serialize a binary tree in python.,"def serializeBinaryTree(root):
    if root == None:
        return ""#""
    
    serializedTree = """"
    serializedTree += str(root.val) + ','
    serializedTree += serializeBinaryTree(root.left) + ','
    serializedTree += serializeBinaryTree(root.right)

    return serializedTree"
Alter the code to return the last element of a linked list.,"def getLastElement(head): 
    # Base case 
    if head == None: 
        return None
  
    # If list is not empty, traverse 
    # to the last node 
    start = head 
    while (start.next != None): 
        start = start.next
  
    # return last element 
    return start"
"Suggest a python code to print a 2D board with 'X' and 'O'.[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]","board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]

for row in board:
    for cell in row:
        print(cell, end="" "")
    print()"
"Compute the sum of the integers in the given array.Integers in the array: [1, 2, 3, 4, 5]",The sum of the integers in the array is 15.
"How would you print ""Goodbye"" ten times in Python?","for i in range(10):
 print(""Goodbye"")"
"Sort the list ```[5, 3, 1, 4, 2]``` numerically.","The sorted list is [1, 2, 3, 4, 5]."
"Create a linked list to store the values ```[10, 20, 30]```.","class Node:
 def __init__(self, data):
   self.data = data
   self.next = None

class LinkedList:
 def __init__(self):
   self.head = None

list = [10, 20, 30]
llist = LinkedList()
llist.head = Node(list[0])
 
temp = llist.head
 
for i in range(1, len(list)):
 temp.next = Node(list[i])
 temp = temp.next"
What data type would you use to store the title of a book?,You would use a String data type to store the title of a book.
Create an object method to calculate the area of a triangle in Python.,"def calculate_area(self):
  return (self.base * self.height) / 2"
"Edit the following code to make the loop run for 10 iterations.for (int i = 0; i < 5; i++) {
   System.out.println(i); 
 }","for (int i = 0; i < 10; i++) {
  System.out.println(i); 
}"
Name five different Python libraries used for visualization.,"Matplotlib, Seaborn, Bokeh, Plotly, and Altair."
"Create a text classification model using Scikit-learn to classify a message with either ""positive"" or ""negative"" sentiment.","from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression

# Vectorize the message into a format that the model can accept
vect = CountVectorizer().fit(X_train)
X_train_vectorized = vect.transform(X_train)

# Train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train_vectorized, y_train)

# Use the model to predict the sentiment of a given message
message_sentiment = model.predict([vect.transform([message])])"
Create a function that returns a list of all the factors of a given number.64,"def factor(x): 
    factors = []
    for i in range(1, x + 1): 
        if x % i == 0: 
            factors.append(i) 
    return factors

print(factor(64)) # Output: [1, 2, 4, 8, 16, 32, 64]"
"Write a code to convert a given string of English characters to corresponding Morse code.""Hello World!""","def morse_encode(input_string):
    morse_encoder = {
        ""A"":"".- "",
        ""B"":""-... "",
        ""C"":""-.-. "",
        ""D"":""-.. "",
        ""E"":"" . "",
        ""F"":""..-. "",
        ""G"":""--. "",
        ""H"":"".... "",
        ""I"":"".. "",
        ""J"":"".--- "",
        ""K"":""-.- "",
        ""L"":"".-.. "",
        ""M"":""-- "",
        ""N"":""-. "",
        ""O"":""--- "",
        ""P"":"".--. "",
        ""Q"":""--.- "",
        ""R"":"".-. "",
        ""S"":""... "",
        ""T"":""- "",
        ""U"":""..- "",
        ""V"":""...- "",
        ""W"":"".-- "",
        ""X"":""-..- "",
        ""Y"":""-.-- "",
        ""Z"":""--.. "",
        "" "": ""  ""
    }
    morse_string = []

    for char in input_string.upper():
        encoded_char = morse_encoder.get(char)
        morse_string.append(encoded_char)
    
    return ''.join(morse_string)

print(morse_encode(""Hello World!"")) # Output: "".... . .-.. .-.. ---  .-- --- .-. .-.. -.. ! """
"Define a function to check whether string a is an anagram of string b.""silent"" 
""listen""","def is_anagram(a, b):
    a = a.lower()
    b = b.lower()

    if len(a) != len(b):
        return False
    
    for char in a:
        if char not in b:
            return False
        b = b.replace(char, '', 1)
    
    return True

print(is_anagram(""silent"", ""listen"")) # Output: True"
"Write a code for linear search algorithm.[4, 5, 2, 3]
2","def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    
    return None

print(linear_search([4, 5, 2, 3], 2)) # Output: 2"
"Compare two Python lists having integers and write a function to output the differenceslist_a = [1, 2, 3]
list_b = [2, 3, 4]","def get_diff(list_a, list_b):
  diff = list_a
  for i in list_b:
    if i in list_a:
      diff.remove(i)   
  return diff"
"Generate a dictionary out of two lists by matching each element in the two listslist_a =[2, 3, 4]
list_b = [""a"", ""b"", ""c""]","def make_dict(list_a, list_b):
  dict = {}
  for a, b in zip(list_a, list_b):
    dict[a] = b

  return dict"
Write a Python code to convert a binary tree to its mirror tree,"def mirror_tree(root): 
    if root is None: 
        return
  
    # Do the postorder traversal to traverse down to leaf nodes 
    mirror_tree(root.left) 
    mirror_tree(root.right) 
  
    # Swap the pointers in this node 
    root.left, root.right = root.right, root.left"
Find all the possible moves of a knight in a chessboard,"def knight_moves(x, y): 
    result = [] 
    # Move 1 on x-axis, 2 on the y-axis 
    result.append((x + 1, y + 2)) 
    # Move 2 on x-axis, 1 on the y-axis
    result.append((x + 2, y + 1))
  
    # Move 1 on x-axis, -2 on the y-axis 
    result.append((x + 1, y - 2)) 
    # Move -2 on x-axis, 1 on the y-axis 
    result.append((x - 2, y + 1))
  
    # Move -1 on x-axis, 2 on the y-axis 
    result.append((x - 1, y + 2)) 
    # Move 2 on x-axis, -1 on the y-axis 
    result.append((x + 2, y - 1))
  
    # Move -1 on x-axis, -2 on the y-axis 
    result.append((x - 1, y - 2)) 
    # Move -2 on x-axis, -1 on the y-axis
    result.append((x - 2, y - 1)) 

    return result"
Design a data structure that can efficiently store the capitals of different countries and their respective populations.,"class CountryCapitalPopulation{
    HashMap<String, Integer> countryCapPop;
    
    public CountryCapitalPopulation(){
        countryCapPop = new HashMap<String, Integer>();
    }
    
    public void addCountryCapitalPopulation(String country, String capital, int population){
        countryCapPop.put(country+capital, population);
    }
    
    public int getPopulation(String country, String capital){
        return countryCapPop.get(country+capital);
    }
}"
How could you read a specific compression format such as .zip in Python?,"Python has a built-in zipfile module which provides support for reading and writing zip archives in native Python code. The module provides a ZipFile object with methods to read and extract contents of the archive, as well as a class representing individual entries such as files and directories.

For example, to extract an archive using the ZipFile object, you can do the following:

import zipfile

with zipfile.ZipFile(""path/to/archive.zip"", ""r"") as zf:
 zf.extractall(""path/to/destination/directory"")"
Write an R script to find correlation between two columns in a given Data Frame.,"# Load the data
df = read.csv(""data.csv"")

# Find the correlation
correlation = cor(df$column1, df$column2)
print(correlation)"
Create an Angular service to authenticate a user using an API endpoint.,"import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
 providedIn: 'root'
})
export class AuthService {
 
 constructor(private http: HttpClient) { }

 authenticateUser(username: string, password: string) {
  const body = { username: username, password: password };
 
  return this.http.post('/api/auth', body);
 }
}"
"Find the average of five numbers.11, 15, 20, 7, 19","def avg(nums):
    sum = 0
    for num in nums:
        sum += num
    return sum/len(nums)"
"Given a list of strings, reverse the order of each string in the list.[""hello"", ""world"", ""this"", ""is"", ""amazing""]","def reverse_words(words):
    reversed_words = []
    for word in words:
        reversed_words.append(word[::-1])
    return reversed_words"
Generate a random 10 character password with at least one uppercase letter and one number.,"import random

def generate_password():
    uppercase_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    numbers = '0123456789'
    password = ''

    for i in range(5):
        password += random.choice(uppercase_characters)
        password += random.choice(numbers)

    password += random.choice(list(set(uppercase_characters + numbers)))

    return password

if __name__ == '__main__':
    print(generate_password())"
Create an array of prime numbers between 0 and 100 and print them out.,"Array = []

for num in range(2,101):
    if all(num % i != 0 for i in range(2,num)):
        Array.append(num)

print(Array)"
"Create a function that takes 3 parameters and returns the maximum of them.6, 7, 4","def find_max_of_three(a, b, c): 
    """"""
    This function finds the maximum of three numbers
    """"""  
    return max(a, b, c)

if __name__ == '__main__':
    a = 6
    b = 7
    c = 4
    print(find_max_of_three(a, b, c))"
"Rotate a list of elements by a certain number of times.[1, 2, 3, 4], 2","def rotate_array(arr, n): 
    """"""
    This function rotates a list of elements by a certain number of times
    """"""  
    return arr[n:] + arr[:n]

if __name__ == '__main__':
    arr = [1, 2, 3, 4]
    n = 2
    print(rotate_array(arr, n))"
"Output a list of the elements that appear both in list a and list b.list a: [1, 3, 5, 7, 9]
list b: [2, 4, 6, 8]",[]
Create a class in Python that contains the following methods:,"class Student:
    def __init__(self, name, grade):
        self.name = name
        self.grade = grade

    def getName(self):
        return self.name

    def getGrade(self):
        return self.grade"
Construct a function to convert a string of length one to a capitalized version.,"def capitalize(string): 
    return string.capitalize()"
Construct a regex expression that matches a valid US zip code.,^\d{5}(?:[-\s]\d{4})?$
Construct a function that removes any non-alphanumeric characters from a string.Hello world!,"def remove_non_alphanumeric(string):
    return ''.join(c for c in string if c.isalnum())

remove_non_alphanumeric(""Hello world!"")"
"Identify the loop control statement used in the below program

for (i = 0; i < 10; i++) {
    printf(""%d "", i);
}",for (i = 0; i < 10; i++)
"What type of sorting algorithm does the following Python code implement?

def sort(nums):
  for i in range(len(nums)):
    for j in range(i+1, len(nums)):
      if nums[j] < nums[i]:
        nums[j], nums[i] = nums[i], nums[j]","The code implements Bubble Sort, which is a type of comparison sorting algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order."
"What is the Big O notation of the algorithm below?

def myfunc(n):
  total = 0
  for i in range(n):
    for j in range(n):
      total += 1
  return total",The Big O notation for the algorithm is O(n^2). This indicates that the time complexity is proportional to the square of n.
"Edit the below program to print the square of numbers from 0 to 10.

def printSquare():
  for i in range(10):
    print(i)","def printSquare():
  for i in range(10):
    print(i**2)"
Write a code snippet to display the Fibonacci sequence up to 50 numbers.,"def Fibonacci(n): 
	a = 0
	b = 1
	if n < 0: 
		print(""Incorrect input"") 
	elif n == 0: 
		return a 
	elif n == 1: 
		return b 
	else: 
		for i in range(2,n): 
			c = a + b 
			a = b 
			b = c 
		return b 
  
# Driver Code 
print(""Fibonacci Sequence:"")
for i in range(50):
	print(Fibonacci(i), end = ' ')"
"Find the runtime complexity of this Python program.def EvenOrOdd(items):
    if len(items) == 0:
        return 0

    even_count = 0
    for item in items:
        if item % 2 == 0:
            even_count += 1

    return even_count","This program has a runtime complexity of O(n), where n is the number of items in the list. This is because the time taken to complete the program increases linearly with the number of items in the list."
"Write a function to get the length of a given string without using any built-in function.text = ""Hello world!""","def get_length(text):
    counter = 0
    for i in text:
        counter += 1
    return counter

res = get_length(text)
print(res)"
"How would you sum up the elements in an array represented by an integer array?arr = [10, 15, 25, 20]","total = 0
for i in arr:
    total += i
print(total)"
"Compute the sum of two matrices of size m x n.A = [[1, 2], 
     [4, 5]]
B = [[3, 6], 
     [7, 8]]","def matrix_sum(A, B): 
    m = len(A) 
    n = len(A[0]) 
    C = [[0 for i in range(n)] for j in range(m)] 
    for i in range(m):
        for j in range(n):
            C[i][j] = A[i][j] + B[i][j]
    return C

A = [[1, 2], 
     [4, 5]]
B = [[3, 6], 
     [7, 8]]

res = matrix_sum(A, B)
print(res)"
"Modify the function to include a message about the length of the string.message = ""The length of the string is:""","def find_length(string):
	count = 0
	for char in string:
		count += 1
	print(message, count)
	return count"
"Build a function in Python for selecting all rows from a Pandas DataFrame where a column value is equal to a given value.df = pd.DataFrame({'A':[1, 2, 3, 4, 5],
                   'B':[2, 3, 4, 5, 6],
                   'C':[3, 4, 5, 6, 7],
                   'D':[4, 5, 6, 7, 8]})
col_1 = 'A' 
value = 3","def select_rows(df, col_1, value): 
    return df[df[col_1] == value]"
"Merge two sorted lists of integers using Python.list_1 = [2, 5, 9]
list_2 = [1, 4, 6, 7]","def merge_lists(list_1, list_2):
    merged_list = []
    l1, l2 = 0, 0

    while l1 < len(list_1) and l2 < len(list_2):
        if list_1[l1] <= list_2[l2]:
            merged_list.append(list_1[l1])
            l1 += 1
        else:
            merged_list.append(list_2[l2])
            l2 += 1

    merged_list += list_1[l1:]
    merged_list += list_2[l2:]

    return merged_list"
Create a neural network class in Python using NumPy.,"import numpy as np

class NeuralNetwork():
    
    def __init__(self):
        np.random.seed(1)

        self.weights = 2 * np.random.random((3,1)) - 1

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def train(self, training_inputs, training_outputs, training_iterations):
        for iteration in range(training_iterations):
            output = self.think(training_inputs)
            error = training_outputs - output
            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))
            self.weights += adjustments

    def think(self, inputs):
        inputs = inputs.astype(float)
        output = self.sigmoid(np.dot(inputs, self.weights))
        return output"
What is bitwise AND operation?,"A bitwise AND operation is a binary operation that takes two equal-length binary representations and performs the logical AND operation on each pair of corresponding bits. The result in each position is 1 only if both bits are 1; otherwise, the result is 0."
How do you estimate the complexity of selection sort algorithm?,"The complexity of selection sort is O(n^2) in the worst case, O(n) in the best case, and O(n^2) on average. Selection sort is not a very efficient sorting algorithm compared to other algorithms like quicksort and merge sort."
Modify the function to return the least common multiple instead.,"def lcm(a, b): 
    return (a*b) // gcd(a, b)"
"You need to search for a specific character within a string and return its index.let str = 'hello world!';
let char = 'r';","function getIndexOfChar(str, char) {
    let index = str.indexOf(char);
    return index;
}

let result = getIndexOfChar(str, char);
console.log(result); // 10"
"You need to clean a given string by removing all the special characters.let str = 'Hello.., World!';","function removeSpecialChars(str) {
    let regex = /[^a-zA-Z0-9]/g;
    let cleanString = str.replace(regex, '');
    return cleanString;
}

let result = removeSpecialChars(str);
console.log(result); // HelloWorld"
"Write a code that takes a list of numbers, and outputs the 10th largest value.mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]","def find_10th_largest(input_list):
    sorted_list = sorted(input_list)
    return sorted_list[-10]

if __name__ == '__main__':
    mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]
    print(find_10th_largest(mylist))"
Create a class called Player that has a member called name.,"class Player:
    def __init__(self, name):
        self.name = name"
"What is the value of ""arr"" after executing this codearr = [1, 2, 3]
arr = arr.append(4)","None, since the append() method returns None and not a list. The updated value of the list is [1, 2, 3, 4]."
"Using the comment as a guide, write the proper code to calculate the sum of the values in an arrayarr = [1, 2, 3, 4, 5]
# TODO: write code to calculate the sum of the values in arr","def calculate_sum(arr):
    sum = 0
    for x in arr:
        sum += x
    return sum

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5]
    print(calculate_sum(arr))"
"Create a function that takes two integers, A and B, and returns the largest common divisor between A and B.","def get_largest_common_divisor(a, b):
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    return a + b

if __name__ == '__main__':
    print(get_largest_common_divisor(15, 9))"
What is the best way to check if a given input is an integer?,"The best way to check if a given input is an integer is to use the isinstance() function. For example, to check if a variable x is an integer, you can run the following code: 

isinstance(x, int)"
"Write a function that takes an array and returns the number of elements that are even.arr = [1, 5, 7, 4, 9, 17]","def count_even_elements(arr):
    even_count = 0
    for num in arr:
        if num % 2 == 0:
            even_count += 1
    return even_count

if __name__ == '__main__':
    arr = [1, 5, 7, 4, 9, 17]
    print(count_even_elements(arr))"
"Using the comment as a guide, replace the placeholder with the proper code to remove all duplicates from a list.mylist = [1, 2, 3, 2, 4, 2]
# TODO: write code to remove all duplicates from mylist","def remove_duplicates(mylist):
    mylist = list(dict.fromkeys(mylist))
    return mylist

if __name__ == '__main__':
    mylist = [1, 2, 3, 2, 4, 2]
    print(remove_duplicates(mylist))"
"Given a list of numbers and a number k, return whether any two numbers from the list add up to k.nums = [10, 15, 3, 7]
k = 17","def two_sum(nums, k):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == k:
                return True
    return False"
"Given a string, write a regular expression to extract the last three words of the string.text = ""My name is Bill Gates""","reg = r""(\w+(\s\w+){2}$)"""
"Veriyif if a given string is a valid email address.email = ""email@example.com""","import re

def is_valid_email(email):
    regex = r""^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$""
    return re.match(regex, email)"
"Srot the strings in ascening order.items = [""Red"", ""Blue"", ""Yellow"", ""Green""]","sorted_items = sorted(items) # sorted_items = [""Blue"", ""Green"", ""Red"", ""Yellow""]"
"Prepare a code to select all rows that have more than one occurrence of the same value in a given column.column = ""color""
data = {
 ""color"": [""red"", ""blue"", ""red"", ""yellow"", ""blue""] 
}","def duplicate_rows(column, data):
    duplicates = []
    for row in data:
        if data[column].count(row[column]) > 1:
            duplicates.append(row)
    return duplicates"
"Write a code to show the rating of a movie based on the review commentsrev_comments = [""Great movie!"", ""The movie was average."", ""Didn't enjoy it that much""]","def rating(reviews):
    score = 0
    
    positive = [""great"", ""amazing"", ""funny"", ""entertaining""]
    negative = [""bad"", ""mediocre"", ""average"", ""boring""]
    
    for comment in reviews:
        for word in positive:
            if word in comment.lower():
                score += 1
        for word in negative:
            if word in comment.lower():
                score -= 1
    
    return score / len(reviews)"
"Rewrite the following code snippet without using any loops.for i in range(10):
    print(i)",[print(i) for i in range(10)]
"Generate a code to evaluate a expression of the form a * (b + c).a = 10
b = 5
c = 6","def evaluate_expression(a, b, c):
    return a * (b + c)"
"Create a function to calculate the total cost of the items in a cart.items = [{""item"":""apple"", ""cost"":3.00}, {""item"":""orange"", ""cost"":2.50}]","def total_cost(items):
    total = 0
    for item in items:
        total += item['cost']
    return total"
Create a Python variable a with value 5.,a = 5
"Given a variable arr containing integers, write python code to remove all duplicate elements from the array and return the new array.arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6]","arr = list(set(arr)) # [1, 2, 3, 4, 5, 6]"
"In Python, how could you print a list from the last element to the first element?","for element in reversed(my_list):
    print(element)"
Create a dictionary in Python whose keys are the integers from 1 to 10 and whose values are the squares of the keys.,"d = {i: i*i for i in range(1, 11)} # {1:1, 2:4, etc.}"
"Write an algorithm to find the missing number in an array of n consecutive integers in Python.arr = [1, 2, 3, 5, 6, 7, 8]","def find_missing_num(arr):
    missing = 0
    for i in range(arr[0], arr[-1] + 1):
        if i not in arr:
            missing = i
    return missing  # 4"
"Count the number of occurrences of a given string in another string in Python.string1 = 'A quick brown fox jumps over the lazy dog.'
string2 = 'dog'",string1.count(string2) # 1
"Given a list of strings, write a program to return a new list of all strings which have length greater than 4 in Python.lst = ['cat', 'dog', 'apple', 'banana']","new_lst = [x for x in lst if len(x) > 4] # ['apple', 'banana']"
Replace the underlined phrase with a single word that means the same thing: He was very argumentative throughout the meeting.,He was very contentious throughout the meeting.
"Create a method with the following signature: int calculateSum(int x,int y).","public int calculateSum(int x, int y) {
    return x + y;
}"
Rewrite the following sentence so that it has a different meaning: We should try and solve this problem.,Let's attempt to solve this problem.
Name three popular programming languages.,"Java, Python and JavaScript."
Design a user interface for a book library application.,"The user interface should include a search bar to search for books, a list of books with details such as title, author, year published, and a button to select a book and checkout. Additionally, it should include a navigation header with various sections such as 'My Books', 'Favorites', 'Recommendations' and 'Account Settings'."
Generate a for loop for summing up the first 5 positive even numbers.,"int sum = 0;
for (int i = 2; i < 10; i += 2)
{
 sum += i;
}
Console.WriteLine(""The sum of the first 5 positive even numbers is: "" + sum);"
"Read the following code and suggest an optimization.int[] array = {7, 14, 23, 27, 33};
int sum = 0;

foreach (int value in array)
{
 sum += value;
}","int[] array = {7, 14, 23, 27, 33};
int sum = 0;

int i = 0;
for (; i < array.Length; ++i)
{
 sum += array[i];
}"
Create a for loop for printing all the alphabets in the lowercase.,"for letter in range(97, 123): 
    print(chr(letter))"
"Edit the given code snippet and make it run in O(N) time complexity.int[] arr = {1, 2, 3, 4, 5};
int result = 0;
for (int i = 0; i < arr.Length; i++)
{
    for (int j = 0; j < arr.Length; j++)
    {
        if (arr[i] % arr[j] == 0)
        {
            result += arr[i];
        }
    }
}","int[] arr = {1, 2, 3, 4, 5};
int result = 0;
for (int i = 0; i < arr.Length; i++)
{
    result += arr[i];
    for (int j = i + 1; j < arr.Length; j++)
    {
        if (arr[i] % arr[j] == 0)
        {
            result += arr[j];
        }
    }
}"
Generate a while loop in python to find out the sum of first 5 even numbers.,"i = 2
sum = 0

while i < 10:
    sum += i
    i += 2

print(""The sum of first 5 even numbers is: "", sum)"
"Write a Python program that prints out the magnitude of the three-dimensional vector with the following components: (x, y, z).(1, 2, 3)","import math

def magnitude(x, y, z):
    return math.sqrt(x * x + y * y + z * z)

print(magnitude(1, 2, 3))"
Create an array of elements that are the squares of the integers between 1 and 10,"squares = [x**2 for x in range(1, 11)]"
Write a function to calculate median of array elements,"def get_median(arr):
    sorted_arr = sorted(arr)
    length = len(sorted_arr)
    if length % 2 == 0:
        median1 = sorted_arr[int(length/2) - 1]
        median2 = sorted_arr[int(length/2)]
        median = (median1 + median2) / 2
    else:
        median = sorted_arr[int((length-1)/2)]
    return median"
"Create a switch-case statement for a shopping cart to print out the items and their prices.Item1: $25.00
Item2: $13.50
Item3: $3.99","def items_and_prices(item1, item2, item3):
    switch = {
    'item1': item1,
    'item2': item2,
    'item3': item3
    }
    for key, value in switch.items():
        print(key + "": "" + str(value))

items_and_prices(25.00, 13.50, 3.99)"
Create an array that contains the numbers 1 through 10.,"var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"
Create an angle converter function which converts degrees to radians.,"function degToRad(deg) {
    return deg * (Math.PI/180);
}"
Build a Keras model to predict whether a patient has cancer.,"model = keras.Sequential([
     keras.layers.Dense(64, activation='relu', input_shape=(len(features.keys()),)),
     keras.layers.Dense(32, activation='relu'),
     keras.layers.Dense(1, activation='sigmoid')
 ])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])"
Design a pipeline in Scikit-learn to preprocess a given dataset.,"from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

pipeline = Pipeline(steps=[
    ('scaler', StandardScaler()),
    ('pca', PCA())
])"
"How to convert a binary string to an integer number?binaryNum = ""1101""","intNum = int(binaryNum, 2)"
"How to decode a Base64 string to its corresponding string representation in Python?base64_string = ""SGVsbG8gV29ybGQ=""","import base64
string = base64.b64decode(base64_string).decode(""utf-8"")"
"How to remove the last character of a string in Python?word = ""Hello""",word = word[:len(word)-1]
What is a multithreaded program?,A multithreaded program is a software program or application that uses multiple threads to execute different parts of its code simultaneously. This allows for faster execution of the program by using more than one processor core at the same time.
"Write an R script to generate a word cloud of a given text.text = ""This is a sample text to generate a word cloud.""","# Install packages
install.packages(""wordcloud"")

# Load libraries
library(tm)
library(wordcloud)

# Create a text corpus
text_corpus <- Corpus(VectorSource(text))

# Generate a word cloud
wordcloud(text_corpus, min.freq = 1,random.order=FALSE,rot.per=0.35,max.words= 100)"
Describe the effects when sorting a list using bubble sort,"Bubble sort works by comparing adjacent elements of the list and swapping them if they are out of order. It passes through the list multiple times, with each pass through the list moving the highest value elements to their correct position. This process continues until the list is fully sorted."
"Sort a list of integers using quicksortlist = [4,2,1,5,3]","def quicksort(arr): 
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

sorted_list = quicksort(list)"
"Extract the domain names from the given list of URLsurl_list = [ ""www.abcd.com"", ""www.something.co.in"", ""www.example.ng"" ]","def extract_domain(url_list): 
    domains = list() 
    for url in url_list: 
        url_parts = url.split('.')
        domains.append(url_parts[-2]+'.'+url_parts[-1]) 
    return domains

domain_list = extract_domain(url_list)"
"Generate a correct Python code for a data structure which supports the following operations -insert(key, value)
get(key)
delete(key)","class Map(object):
    
    def __init__(self): 
        # a dictionary-based data structure 
        # to store (key, value) pairs 
        self.data = {} 
  
    # insert the given value with the given key 
    def insert(self, key, value): 
        self.data[key] = value     
  
    # get the value for the given key 
    def get(self, key): 
        return self.data[key] 
  
    # delete the datapoint with the given key 
    def delete(self, key): 
        self.data.pop(key)"
"Modify the following Python program to contain an input.num1 = 10
num2 = 20
sum = num1 + num2

print(""The sum of two numbers is"",sum)","num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))
sum = num1 + num2

print(""The sum of the two numbers is"", sum)"
"Write a Python function to analyze the performance of different sorting algorithms.List = [6, 8, 0, 1, 4, 5, 7, 3, 2, 9]","def analyze_sorting_performance(list):
    """"""
    Analyze the performance of different sorting algorithms 
    on the given list. 
    """"""
    insertion_sort_list = list.copy()
    insertion_sort(insertion_sort_list)
    bubble_sort_list = list.copy()
    bubble_sort(bubble_sort_list)
    merge_sort_list = list.copy()
    merge_sort(merge_sort_list)
    quick_sort_list = list.copy()
    quick_sort(quick_sort_list)
    
    print(""Insertion Sort: {}"".format(insertion_sort_list))
    print(""Bubble Sort: {}"".format(bubble_sort_list))
    print(""Merge Sort: {}"".format(merge_sort_list))
    print(""Quick Sort: {}"".format(quick_sort_list))"
Create a class in Python that can be used to store the details of a student.,"class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
    
    def set_details(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
    
    def get_details(self):
        return f'Name: {self.name}, Age: {self.age}, Gender: {self.gender}'"
"Given a list of integers and a target sum, write a function that returns a pair of said integers that add up to the target sum.list = [3, 9, -4, 0, -7, 8] and target sum = -4","def find_pair(lst, target_sum):
    """"""
    Given a list of integers and a target sum, 
    this function returns a pair of said integers 
    that add up to the target sum.
    """"""
    seen = set()
    for num in lst:
        inverse = target_sum - num
        if inverse in seen:
            return (num, inverse)
        seen.add(num)"
"Implement a binary search algorithm in Python for searching for a specific element in a given list of numbers.list = [1, 3, 5, 7, 9, 11 ] and target number =7","def binary_search(lst, target):

    """"""
    Implements a binary search algorithm 
    in Python for searching for a specific 
    element in the given list of numbers.
    """"""
    low = 0
    high = len(lst)-1

    while low <= high:
        mid = (low + high)//2
        if lst[mid] == target:
            return mid

        elif lst[mid] < target:
            low = mid + 1

        else:
            high = mid - 1

    return -1"
"Write a regular expression in Python to find all words that start with ""A"".","import re

words = re.findall(r'\bA\w+', text)"
How would you merge two sorted linked lists into one?,"def mergeLists(l1, l2): 
    dummy = curr = ListNode(0)  
    while l1 and l2: 
        if l1.val < l2.val: 
            curr.next = l1 
            l1 = l1.next
        else: 
            curr.next = l2 
            l2 = l2.next
        curr = curr.next
    curr.next = l1 or l2
    return dummy.next"
"Analyze the sentiment of the sentence ""I am so delighted"".",Positive sentiment.
Compute the factorial of the number 7.,5040
"Remove the duplicates from the array [1, 2, 2, 4, 5, 5].[1, 2, 2, 4, 5, 5]","[1, 2, 4, 5]"
Construct a Python class to save details of student.,"class Student():
    def __init__(self, name, age, year):
        self.name = name
        self.age = age
        self.year = year
  
    def get_name(self):
        return self.name
  
    def get_age(self):
        return self.age
  
    def get_year(self):
        return self.year"
"Change the following code to use the ternary operator.def compare_num(a, b):
    if a < b:
        return -1
    elif a == b:
        return 0
    else:
        return 1","def compare_num(a, b):
    return -1 if a < b else 0 if a == b else 1"
"Given a binary tree, find the height of the tree.","def maxDepth(self, root: TreeNode):
    if root is None:
      return 0

    leftDepth = self.maxDepth(root.left)
    rightDepth = self.maxDepth(root.right)

    return max(leftDepth, rightDepth) + 1"
Describe a sorting algorithm that works by putting an algorithm that works by putting elements in the right place.,"Insertion sort is an in-place comparison sort algorithm that works by iterating through the input array, removing one element at a time and inserting it in the correct position in the sorted array. It is a comparison-based algorithm that blocks an element from its position until it finds the correct location for it in the sorted array by comparing with adjacent element and shifting it until the correct position is found."
Implement a priority queue.,"class PriorityQueue(): 
   
    def __init__(self): 
        self.elements = [] 
  
    def is_empty(self): 
        return len(self.elements) == 0 
  
    def enqueue(self, item, priority): 
        self.elements.append((item, priority)) 
  
    def dequeue(self): 
        max_priority_index = 0
        for index, element in enumerate(self.elements): 
            if element[1] > self.elements[max_priority_index][1]: 
                max_priority_index = index 
        element = self.elements[max_priority_index] 
        del self.elements[max_priority_index] 
        return element"
Reverse a linked list.,"def reverseList(node): 
    prev = None
    while (node != None): 
        next = node.next
        node.next = prev 
        prev = node  
        node = next
    return prev"
"Write a function that returns 'true' if the number is an even number, and 'false' otherwise.","def is_even(num): 
    if(num % 2 == 0): 
        return True
    else: 
        return False"
"Create a for loop to iterate through the given array from the last index to the first.array = [1, 2, 3, 4, 5]","for i in range(len(array)-1, -1, -1): 
    print(array[i])"
"Create two classes, ""Animal"" and ""Dog"", in which the ""Dog"" class inherits from the ""Animal"" class.","class Animal: 
    pass

class Dog(Animal): 
    pass"
"Visualize the given data using a bar chart.data = [['January', 10], ['February', 15], ['March', 20], ['April', 17]]","import matplotlib.pyplot as plt

months = [x[0] for x in data]
values = [x[1] for x in data]

plt.bar(months, values)
plt.xlabel(""Month"") 
plt.ylabel(""Number"") 
plt.show()"
"Create a class ""Person"" and add two instance variables ""name"" and ""age"".","class Person: 
    def __init__(self, name, age): 
        self.name = name 
        self.age = age"
"Iterate through the given array and print the even numbers.array = [1, 2, 3, 4, 5, 6]","for x in array:
    if x % 2 == 0: 
        print(x)"
"Using DOM manipulation, replace the paragraph text with ""Hello World"".<p>My first web page</p>",document.querySelector('p').innerHTML = 'Hello World';
"Using the given code, write a function that finds the highest value in the array.array = [5, 2, 8, 7, 1]","def find_largest(array):
    largest = array[0] 
    for x in array:
        if x > largest: 
            largest = x

    return largest"
"Create a Python program that takes a comma-separated string and outputs a dictionary of words and the frequency of their occurrences.apple, banana, apple, orange","def get_word_frequency(string):
 words = string.split(', ')
 frequencies = {}
 for word in words:
 if word in frequencies:
 frequencies[word] += 1
 else:
 frequencies[word] = 1
 return frequencies"
"Write a Python function to calculate the sum of the areas of a given list of circles, where each circle is defined as a dictionary containing 'radius' and 'x' as keys.[{'radius': 3, 'x': 5}, {'radius': 4, 'x': 7}, {'radius': 5, 'x': 9}]","def sum_areas(circles):
 total = 0
 for circle in circles:
 area = 3.14 * circle['radius'] ** 2
 total += area
 return total"
Write a Python program to delete a given key from a dictionary.,"def delete_key(d, key):
 if key in d:
 del d[key]

d = {'a':1, 'b':2}
delete_key(d, 'a')"
"Implement a function in Python that prints out the grade for a student, given their marks in a particular subject.marks = 90","def get_grade(marks):
    if marks>=90:
        return ""A""
    elif marks>=80 and marks<90:
        return ""B""
    elif marks>=70 and marks<80:
        return ""C""
    elif marks>=60 and marks<70:
        return ""D""
    else:
        return ""F""

print(get_grade(marks))"
"Write a function that, given a string, returns a dictionary of all the characters in the string and their respective frequencies.text = ""Hello World""","def letter_frequency(text):
    d = {}
    for char in text:
        if char not in d:
            d[char] = 1
        else:
            d[char] += 1
    return d

print(letter_frequency(text))"
"Use a regular expression to find the capital letter in the provided string.text = ""This is a string with a Capital A""","import re

def find_capital_letter(text):
    pattern = r""[A-Z]""
    result = re.findall(pattern, text)
    return result[0]

print(find_capital_letter(text))"
Create a method to compute the sum of squares of numbers from 0 up to n.n = 4,"def sum_of_squares(n):
    total_sum = 0
    for i in range(n + 1):
        total_sum += i ** 2
    return total_sum"
"How would you write a function to find the mode in an array of numbers?nums = [2, 3, 4, 5, 5, 6, 7, 8]","def find_mode(nums):
    mode = 0
    max_occurrence = 0
    for num in nums:
        occurrences = nums.count(num)
        if occurrences > max_occurrence:
            max_occurrence = occurrences
            mode = num
    return mode"
Create a function to calculate Fibonacci sequence number based on the index of the number.index = 6,"def calc_fibonacci_number(index):
    if index == 0 or index == 1:
        return index
    first_num = 0
    second_num = 1
    for i in range(2, index+1):
        next_num = first_num + second_num
        first_num, second_num = second_num, next_num
    return second_num"
Generate a python class for calculating prime numbers up to n.n = 10,"class PrimeCalculator:
    def __init__(self, n):
        self.n = n
    
    def get_primes(self):
        primes = []
        for number in range(2, self.n+1):
            is_prime = True
            for divisor in range(2, number):
                if number % divisor == 0:
                    is_prime = False
                    break
            if is_prime:
                primes.append(number)
        return primes"
"Implement a linear search in a list.list = [1, 5, 9, 10]","def linear_search(list, key):
    for index, value in enumerate(list):
        if value == key:
            return index
    return -1"
"Help complete the implementation of the following functiondef true_false_sum(x):
    true_sum = 0
    false_sum = 0
    for i in range(x):
        if x[i] == booleanTrue:
            *
    return true_sum, false_sum","def true_false_sum(x):
    true_sum = 0
    false_sum = 0
    for i in range(x):
        if x[i] == booleanTrue:
            true_sum += 1
        else:
            false_sum += 1
    return true_sum, false_sum"
"How would you write a function to find the highest frequency character in a string?string = ""Hello world!""","def find_highest_freq_char(string):
    counts = {}
    max_freq_char = """"
    max_freq = 0
    for ch in string:
        counts[ch] = counts.get(ch, 0) + 1
        if counts[ch] > max_freq:
            max_freq = counts[ch]
            max_freq_char = ch
    return max_freq_char"
"Create a method to find all valid IP addresses that can be formed using a given string.string = ""25525511135""","def find_all_valid_ip_addresses(string):
    valid_ips = []
    for i in range(1,4):
        for j in range(1,4):
            for k in range(1,4):
                if i+j+k == len(string):
                    ip_string = string[:i]+"".""+string[i:i+j]+"".""+string[i+j:i+j+k]+"".""+string[i+j+k:]
                    if is_valid_ip_address(ip_string):
                        valid_ips.append(ip_string)
    return valid_ips

def is_valid_ip_address(ip_string):
    nums = ip_string.split(""."")
    for num in nums:
        if (int(num) < 0 or int(num) > 255):
            return False
    return True"
Provide a context-free grammar to generate strings that contain only a’s and b’s and which have the same number of a’s as b’s.,"S -> bAa
A -> AaA | aAa | bAb | abB | ε"
Create a class in python to store a collection of words and their frequency count.,"class FreqCollection(object):

    def __init__(self):
        self.words = {}

    def add_word(self, word):
        if word in self.words:
            self.words[word] += 1
        else:
            self.words[word] = 1

    def get_word_freq(self, word):
        if word in self.words:
            return self.words[word]
        return 0"
"Create a list of the top 3 highest valued elements in the following array.arr = [7, 5, 8, 4, 9, 6, 1, 3, 2]","arr = [7, 5, 8, 4, 9, 6, 1, 3, 2]

# Create a list of the top 3 highest valued elements
top_three = [max(arr)] # start with the maximum elements
arr.remove(max(arr)) # remove the maximum element from the list
top_three.append(max(arr)) #Add the second maximum element to top_three
arr.remove(max(arr)) # remove the second maximum element from the list
top_three.append(max(arr)) # Add the third maximum element to top_three

print(top_three) # Output: [9, 8, 7]"
Format the output of a number to contain comma-separated thousands.num = 323456789,"# Format the output of a number to contain comma-separated thousands
def format_number(num):
    return '{:,}'.format(num)
    
# Get the formatted output
print(format_number(323456789)) # Output: 323,456,789"
"Recreate this nested for loop in a single line of code.Final_list = []
for i in range(10):
    for j in range(10):
        Final_list.append(i+j)",Final_list = [i+j for i in range(10) for j in range(10)]
Write an expression to check if a given number is a perfect squarenum = 16,"# Write an expression to check if a given number is a perfect square

import math

def is_perfect_square(num):
    return math.sqrt(num).is_integer()
    
# Check the given number
print(is_perfect_square(16)) # Output: True"
List all the different types of sorting algorithms.,"Different types of sorting algorithms include Bubble Sort, Insertion Sort, Selection Sort, Heap Sort, Merge Sort, Quick Sort, Radix Sort, Shell Sort, Counting Sort, and Bucket Sort."
"Calculate the minimum, maximum and average of the following array.[2, 3, 1, 5, 9, 12, 8]","Minimum:  1
Maximum:  12
Average:  6.14"
Create an Applescript that displays an alert message saying 'hello world'.,"display alert ""hello world"""
How would you create a for-loop in Python to iterate through all the integers from 1 to 10?,"for i in range(1,11):
  print(i)"
"Make the following sentence compliant with PEP 8.nums=[1,2,3,4]","nums = [1, 2, 3, 4]"
Calculate the greatest common factor of 18 and 12.,The greatest common factor of 18 and 12 is 6.
Generate a ternary tree data structure in Python.,"class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.center = None
        self.right = None"
"Construct an algorithm to check if two strings have the same characters and same frequency of characters.String A: hello 
String B: ollhe","def is_anagram(str1, str2):
    char_map1 = {}
    char_map2 = {}

    for char in str1:
        if char in char_map1:
            char_map1[char] += 1
        else:
            char_map1[char] = 1
    
    for char in str2:
        if char in char_map2:
            char_map2[char] += 1
        else:
            char_map2[char] = 1
    
    return char_map1 == char_map2"
"Add the following comment to the following piece of code.def func_name(val1):
    val2 = val1 * 5","def func_name(val1):
    # Multiply the value by 5
    val2 = val1 * 5"
Deploy a model server on AWS Lambda to serve a machine learning model.,"import json
import os
import boto3
import numpy as np
import io
from PIL import Image
import tensorflow as tf
from tensorflow.keras.models import load_model


model_path = os.environ['MODEL_PATH']
model_class_name = os.environ['MODEL_CLASS_NAME']
model = load_model(model_path)

def model_predict(event, context):
    body = json.loads(event['body'])
    img_data = body['img_data']
    img_bytes = base64.b64decode(img_data)
    pil_img = Image.open(io.BytesIO(img_bytes))

    # compress the image
    img_raw = pil_img.resize((224, 224))

    # convert image to array
    input_img = np.expand_dims(np.array(img_raw), axis=0)

    # predict
    results = model.predict(input_img)
    res = {
        'statusCode': 200,
        'body': json.dumps(results.tolist())
    }

    return res"
"Rewrite the following recursive function such that it runs in iterative manner.def f(n):
    if n <= 1:
        return n
    else:
        return f(n-1) + f(n-2)","def f(n):
    if n <= 1:
        return n
    else: 
        a, b = 1, 1
        for _ in range(n-1):
            a, b = b, a+b
        return b"
"Construct a program to find the index of a given element in a sorted array with binary search.list = [-1, 0, 2, 3, 9, 10]
target = 3","def binarySearch(arr, target):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end)//2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            end = mid - 1
        else:
            start = mid + 1 
    return -1

index = binarySearch([-1, 0, 2, 3, 9, 10], 3)"
Create two variables that store two different strings.,"string1 = 'Hello World!' 
string2 = 'This is a test!'"
"Change the output format of the following code to convert it to a dictionary.list1 = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]","dict1 = dict(list1)
print(dict1)"
Generate a sentence using GPT-3.GPT-3 is an AI language model developed by OpenAI.,GPT-3 is an advanced AI language model that can generate sentences and paragraphs of text that are relevant and coherent to a given context.
Create a list of strings in Python with 4 elements.,"mylist = ['Hello', 'World', 'This', 'Is']"
Write a MATLAB function for calculating the sum of two matrices.,"function s = addMatrices(A,B)
  s = A + B;
end"
Describe a classification problem in machine learning.,"In machine learning, classification is the process of predicting a class label for an input sample. A class label is a discrete value that describes a group or category that an input belongs to. The input may have multiple features, also known as attributes or predictors, that can be used in the prediction process. A classification algorithm takes these features as input and assigns a label to the given input sample. Examples of classification problems include image recognition, medical diagnosis, language processing, and fraud detection."
"Create a data visualization of the following data set with the target variable as red and the predictor variables as blue.data = [[1, 2, 1, 0],
        [2, 4, 0, 1],
        [2, 3, 0, 1],
        [3, 6, 1, 0]]","import matplotlib.pyplot as plt 

x_1 = [1, 2, 2, 3]
x_2 = [2, 4, 3, 6]

target = [1, 0, 1, 0]

for i in range(len(x_1)):
    c = 'r' if target[i] == 1 else 'b'
    plt.scatter(x_1[i], x_2[i], marker='o', c=c) 

plt.title(""Data Visualization"") 
plt.xlabel(""x_1"") 
plt.ylabel(""x_2"") 
  
plt.show()"
Create a for loop to print out the square of the numbers between 10 and 20,"for i in range(10,21):
    print(i**2)"
Use RegEx to identify words in a stringString: I have 2 apples and 3 bananas,"import re
string = ""I have 2 apples and 3 bananas""
words = re.findall(r'\w+', string)
print(words)

# Output
['I', 'have', '2', 'apples', 'and', '3', 'bananas']"
Compute the length of a stringString: Hello World,"length = len(""Hello World"")
print(length)

# Output
11"
Write a class with a 'hello world' method,"class HelloWorld:
    def hello_world(self):
        print(""Hello World"")"
How can we sort an array of numbers in ascending order in Python?,sorted_numbers = sorted(numbers)  # returns a sorted list of numbers in ascending order.
"Transform the following array into a string of comma-separated values in Python.[1, 2, 3, 4]","','.join([str(i) for i in [1, 2, 3, 4]]) # returns ""1,2,3,4"""
write a function in R that rounds a number to two decimal places,"round_two_places <- function(x) {
  return (round(x, 2))
}"
"Transform the following string in Python into a dictionary whose keys are the names of the colors and the values are the hex codes for the colors.""red #FF0000, blue #0000FF, green #00FF00""","colors = 'red #FF0000, blue #0000FF, green #00FF00'

dict_colors = {i.split()[0]:i.split()[1] for i in colors.split(', ')} # returns {'red': '#FF0000', 'blue': '#0000FF', 'green': '#00FF00'}"
Design an algorithm that determines the greatest common multiple of two numbers.,"def gcm(x, y): 
    if(x > y): 
        gcm = x 
    else: 
        gcm = y 
  
    while(True): 
        if((gcm % x == 0) and (gcm % y == 0)): 
            return gcm 
        gcm = gcm + 1
  
# Driver Program 
x = 12
y = 18
print(gcm(x, y))"
"Design an algorithm that calculates the sum of all numbers in a given array.[2, 4, 7, 10]","def array_sum(arr): 
    total = 0
    # Iterate through arr and add elements to total  
    for i in range (0, len(arr)): 
        total += arr[i] 
    return total 
  
# Driver code 
arr = [2, 4, 7, 10] 
sum = array_sum(arr) 
print (sum) # -> 23"
"Create a for loop that iterates over a string and prints out every letter.string = ""Hello""","string = ""Hello""
for letter in string:
  print(letter)
  
# Outputs:
# H
# e
# l
# l
# o"
"Create a header comment for the following python script.def add(x, y):
    return x + y","""""""
This python script contains a function which takes in two arguments and 
returns the sum of the two arguments.
""""""

def add(x, y):
    return x + y"
"Modify the given code to handle errors in the following Python script.num = int(input('Enter a number'))
print(num * 5)","try:
    num = int(input('Enter a number'))
    print(num * 5)
except Exception as e:
    print(""Error: {}"".format(e))"
"Suggest an enhancement to the following code to support unicode strings.def replace_char(string, char_old, char_new):
    for i in range(len(string)):
       if string[i] == char_old:
            string[i] = char_new
    return string","def replace_char(string, char_old, char_new):
    new_string = ''
    for char in string:
        if char == char_old:
            new_string = new_string + char_new
        else:
            new_string = new_string + char
    return new_string"
Write a logic to obtain boolean output from a given comparison.,"def compare(a, b):
    if a < b:
        return True
    else:
        return False"
"Write a function that takes two strings and compare to see if they have the same set of characters.string1 = ""Listen""
string2 = ""Silent""","def are_char_sets_equal(string1, string2):
    set1 = set(string1.lower())
    set2 = set(string2.lower())
    return set1 == set2"
Find all prime numbers up to a given number.,"def list_primes(n): 
    primes = [] 
    for num in range(2, n+1): 
        prime=True
        for i in range(2, int(num/2)+1):
            if num%i == 0:
                prime=False
        if prime:
            primes.append(num)
    return primes"
"Write a function to compute the maximum depth of binary tree from a given list of numbers.nums = [3,9,20,None,None,15,7]","def get_max_depth(nums):
    max_depth = 0
    curr_depth = 0
    for n in nums:
        if n is None:
            max_depth = max(max_depth, curr_depth)
            curr_depth -= 1
        else:
            curr_depth += 1
    return max_depth"
"For each tuple in a given list, write a function to get the first element.[(1,2), (3,4), (5,6)]","def get_first_element(tuples):
  return [t[0] for t in tuples]"
"Given a list of valid times, return the duration in seconds between two times.time1 = ""23:45:17""
time2 = ""01:30:12""","def calculate_duration_in_seconds(time1, time2):
    start = datetime.strptime(time1, ""%H:%M:%S"")
    end = datetime.strptime(time2, ""%H:%M:%S"")
    duration = end-start
    return int(duration.total_seconds())"
Find the nth Fibonacci number in a given range.,"def get_nth_fibonacci_number(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return get_nth_fibonacci_number(n-1)+get_nth_fibonacci_number(n-2)"
"Create a class that can be used to filter a given list of numbers using a given condition.nums = [3,6,7,2,1,12,14]
condition = lambda x: x>5","class FilterList:
    def __init__(self, nums, condition):
        self.nums = nums
        self.condition = condition
       
    def __iter__(self):
        for num in self.nums:
            if self.condition(num):
                yield num"
Construct an algorithm that checks if the given sequence is an arithmetic sequence.,"def is_arithmetic_sequence(sequence):
    is_arithmetic = True
    diff = 0
    for i in range(1, len(sequence)):
        if i ==1:
            diff = sequence[i]-sequence[i-1]
        else:
            new_diff = sequence[i]-sequence[i-1]
            if new_diff != diff:
                is_arithmetic = False
                break
    return is_arithmetic"
"Write a function to sort a dictionary of dictionaries in descending order based on a given key.d = {'dict1': {'name':'tom','age':20}, 
     'dict2': {'name':'jerry','age':25},
     'dict3': {'name':'bill','age':24}}
key = 'age'","def sort_dict_of_dicts(d, key):
    sorted_dict = dict(sorted(d.items(), key = 
             lambda kv:(kv[1][key], kv[0]),reverse=True))
    return sorted_dict"
"Write a function to create an new array of given size by copying the elements of given array.input_list = [1, 2, 3, 4, 5]
size = 3","def create_new_list(input_list, size):
    return input_list[:size]"
"Swap the first and last items in a given list.my_list = [3, 4, 8, 11, 5]","def swap_first_last(my_list):
    my_list[0], my_list[-1] = my_list[-1], my_list[0]
    return my_list"
"Develop a program to identify the highest number in a given array.Array: [2, 5, 15, 4, 7, 10]","int highestNum = 0;

foreach (int num in array) {
 if (num > highestNum) {
 highestNum = num;
 }
}

Console.WriteLine(""The highest number in the array is "" + highestNum);"
Calculate the final price of a product after applying a 5% discount.Price: $100,"var price = 100;
var discount = 0.05;
var finalPrice = price - (price * discount);

console.log(""Final Price: $"" +finalPrice);"
"Create a method to delete items from a specified array.Array: [1, 2, 3, 4, 5]","function deleteItems(arr, itemToDelete) {
 return arr.filter(item => item !== itemToDelete);
}

let array = [1, 2, 3, 4, 5];
let itemToDelete = 3;
let newArray = deleteItems(array, itemToDelete);

console.log(newArray);  // [1,2,4,5]"
"Generate five lines of code that will calculate the area of the following regular triangle.base = 5
height = 4","base_square = base * base
height_square = height * height
base_times_height = base * height
area_numerator = base_square + height_square + base_times_height
area_denominator = 2
area = area_numerator / area_denominator"
"Create one line of code to sum the contents in a given array.my_array = [2, 3, 5, 7, 11]",sum_of_array = sum(my_array)
"Construct a loop that will print the upside down triangle shape below.*
**
***
****
*****","for i in range(1, 6):
    print('*'*i)"
Implement a function that will take a parameter input and return the length of the parameter.,"def get_length(param):
    return len(param)"
"Construct a one-liner that takes a dictionary and reverses the keys and values of the dictionary.my_dict = {'Tony': 3, 'Peter': 4}","my_dict = dict(zip(my_dict.values(), my_dict.keys()))"
Create a program that takes a number n and prints the pattern given below.n = 3,"for i in range(n):
    for j in range(i+1):
        print('*', end="" "")
    print()"
"Alter the following program such that it returns the complement of the given list.def get_complement(lst):
    new_lst = []
    for i in range(len(lst)):
        new_lst.append(1 - lst[i])
    return new_lst","def get_complement(lst):
    return [1 - item for item in lst]"
"Implement a quicksort algorithm in Python to sort a list of 6 integers [52,85,23,6,37,77].[52,85,23,6,37,77]","def quicksort(nums):
    if len(nums) <= 1:
        return nums
    else:
        pivot = nums[0]
        less = [i for i in nums[1:] if i <= pivot]
        greater = [i for i in nums[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)

print(quicksort([52,85,23,6,37,77]))"
"Write a function to search in a 1D array of integers, and return the index of the target if it is present.arr = [1, 4, 5, 6, 7, 9, 3, 2]
target = 8","def linear_search(arr, target):
  for i in range(len(arr)):
    if arr[i] == target:
      return i
  return -1 # target not found"
Write a function to return the count of all prime numbers from 1 to n (inclusive).,"def count_primes(n):
  count = 0
  for i in range(2, n+1):
    is_prime = True
    for j in range(2, i):
      if i % j == 0:
        is_prime = False
        break
    if is_prime:
      count += 1
  return count"
Find an example of a sorting algorithm in Python.,"Example of a sorting algorithm in Python:

def selection_sort(arr):
    for i in range(len(arr)):
        # Find the minimum element in remaining
        # unsorted array
        min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[min_idx] > arr[j]:
                min_idx = j
 
        # Swap the found minimum element with
        # the first element
        arr[i], arr[min_idx] = arr[min_idx], arr[i]"
"Create a MongoDB document to store a user's profile with the following information: name, email, profile_image.name = ""John Doe""
email = ""jdoe@example.com""
profile_image = ""https://example.com/images/jdoe.png""","user = {
  'name': 'John Doe', 
  'email': 'jdoe@example.com',
  'profile_image': 'https://example.com/images/jdoe.png'
}"
Write a function to convert a given integer number toRoman numerals.,"def intToRoman(num): 
  
    val = [ 
            1000, 900, 500, 400, 
            100, 90, 50, 40, 
            10, 9, 5, 4, 
            1 
            ] 
    rom_num = [ 
                ""M"", ""CM"", ""D"", ""CD"", 
                ""C"", ""XC"", ""L"", ""XL"", 
                ""X"", ""IX"", ""V"", ""IV"", 
                ""I""
                ] 
  
    res = """" 
    i = 0
    while num > 0: 
  
        # Find the greatest value smaller 
        # than the given number num 
        div = num // val[i] 
  
        # Update the number after each 
        # iteration 
        num = num % val[i] 
  
        # Concatenate the roman characters 
        # equal to the power value of div 
        while div > 0: 
            res = res + rom_num[i] 
            div = div - 1
        
        i = i + 1
  
    return res 
  
# Driver code 
num = 12
print(intToRoman(num))"
"Modify the Python code so that it can be used to find the GCD of 3 numbers.def gcd(a, b):
    while b != 0:
        a, b = b, a % b

    return a","def gcd(a, b, c): 
    if(b==0 and c==0): 
        return a 
    if(c==0): 
        return gcd(b, a % b) 
    return gcd(gcd(a, b), c)"
"Write a script in Python to remove the characters from the given string which are not in the alphabet.string=""!!He##ll%o W..or##ld!!""","new_string = """"
for char in string:
    if char.isalpha():
        new_string += char

print (new_string)"
What is a function pointer?,A function pointer is a variable that holds the address of a function. It can be used to invoke a specific function based on the address stored in the pointer. It is commonly used in C and C++.
"Modify the following python program to return the sum of even numbers from the input list.def sum_list(input):
    sum = 0
    for num in input:
        sum += num
    return sum","def sum_list(input):
    sum = 0
    for num in input:
        if num % 2 == 0:
            sum += num
    return sum"
"Create a class named ""Car"" with attributes like ""model"" and ""speed"".","class Car {
    constructor(model, speed) {
        this.model = model;
        this.speed = speed;
    }
 
    getModel() {
        return this.model;
    }
 
    getSpeed() {
        return this.speed;
    }
}"
"Using python, limit the number of characters printed in the following statement to only 10:statement = ""Hello, World!""","statement = ""Hello, World!""

print(statement[:10])"
Name three principles of Object-Oriented Programming.,"The three principles of Object-Oriented Programming (OOP) are encapsulation, abstraction, and inheritance. Encapsulation is the process of combining together data and functions in a single unit, such as a class. Abstraction is the process of organizing and simplifying complex data by hiding unnecessary details from the user. Inheritance is the process of establishing a parent-child relationship between two classes and allowing the child class to acquire the properties and behaviors of the parent class."
"Given the following code in Python, identify the mistake and fix it.name = input(""What is your name? ""","name = input(""What is your name? "") # Missing closing quotation mark"
What are the benefits of Polymorphism in Object-Oriented Programming?,"Polymorphism in Object-Oriented Programming (OOP) allows for objects of different types to share the same interface and behave differently according to their type. This allows a more flexible and efficient codebase, as it eliminates the need to write code specifically for each object type. It also improves the reusability of the code, as a single function can be used to manipulate many different types of objects. Polymorphism also improves readability, as it allows for generic functions and methods to be used without having to know the exact type of the input."
"Compare two strings and remove all letters from the first string which are present in the second string and vice versa.string1 = ""Hello World!""
string2 = ""Bye World!""","def compare_and_remove_letters(string1, string2):
    result = """"
    for i in string1:
        if i not in string2:
            result += i
    for i in string2:
        if i not in string1:
            result += i
    return result

# example
print(compare_and_remove_letters(""Hello World!"", ""Bye World!"")) # output: Byelo!"
Define a class for a student.,"class Student:
    '''Creates a class object to represent a student.'''
 
    def __init__(self, name, age, grade):
        '''Initiate the class with name, age, and grade.'''
        self.name = name
        self.age = age
        self.grade = grade
 
    def get_name(self): 
        '''Return the student name.'''
        return self.name
 
    def get_age(self): 
        '''Return the student age.'''
        return self.age
 
    def get_grade(self): 
        '''Return the student grade.'''
        return self.grade"
"Evaluate a mathematical expression given as a string.expression = ""2 + 3 * 5""","import math

def evaluate_expression(expression):
    '''Returns the evaluation of a given mathematical expression.'''
    return eval(expression)

# example
print(evaluate_expression(""2 + 3 * 5"")) # output: 17"
"Create a Numpy array with 3 columns and 4 rows and assign it to the variable ""my_array"".","my_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])"
Construct a for loop that prints the square of each number from 1 to 10 and also prints an asterisk after each square.,"for x in range(1,11): 
    result = x * x
    print(result, ""*"")"
"Create a list in Python called ""my_list"" and populate it with five integers ranging from 0 to 5.","my_list = [0, 1, 2, 3, 4, 5]"
Construct a for loop that multiplies each item in a given list of numbers by two and stores the value into a new list.,"my_list = [1, 2, 3, 4, 5 ] 

doubled_list = []

for item in my_list: 
    doubled_list.append(item * 2)"
"Given an integer 'base' and an integer 'exponent', write a function to calculate the result of 'base' raised to the power of 'exponent'.base: 2 
exponent: 3","def power(base, exponent):
    result = 1
    for _ in range(exponent):
        result *= base
    return result"
"Construct an if-else statement to print ""Good Evening"" if the time is past 5pm and print ""Good Morning"" otherwise.","import time

t = time.localtime()

if t.tm_hour >= 17: 
    print(""Good Evening!"")
else: 
    print(""Good Morning!"")"
"Compare two array and output the result in Boolean.arr1 = [1, 2, 3, 4]
arr2 = [4, 3, 2, 1]",True
Create a data structure for a streaming interface that holds a maximum of 5 numbers.,"class Stream:
    def __init__(self):
        self.stream = [None, None, None, None, None]

    # This function adds a number to the start (index 0) of the stream and then shifts the other elements to the right
    def add(self, num):
        for i in reversed(range(1, len(self.stream))):
            self.stream[i] = self.stream[i-1]

        self.stream[0] = num

    # This function returns a list of the current elements from the stream
    def list(self):
        return self.stream"
Construct an algorithm for reversing a string.,"def reverse_string(s):
    # Initialize empty string
    rev_string = """"
    # Traverse over each letter in the string in reverse order
    for letter in s[::-1]:
        # Append the current letter to the end of rev_string
        rev_string = rev_string + letter
    # Return the reversed string
    return rev_string"
Develop a DFS algorithm in Python.,"def dfs(graph, start, end):
    # create a visited array
    visited = [False] * len(graph)

    # create a stack
    stack = []

    # mark the starting node as visited and push it in the stack
    stack.append(start)

    while stack:
        # get the current node
        node = stack.pop()

        # if the node hasn't been visited
        if not visited[node]:
            # mark the node as visited
            visited[node] = True

            # check for the end node
            if node == end:
                return True

            # append the neighbors of the node to the stack
            neighbors = graph[node]
            for neighbor in neighbors:
                stack.append(neighbor)

    # end node not found
    return False"
Write an algorithm to generate a random string of length n.8,"import random 

def randomString(n): 
    # Choose a character set
    charSet = ""abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    # Generate a string of length n
    myString = """" 
    for i in range(n):  
        myString += random.choice(charSet)  
    return myString"
Write an R function to print the contents of a dataframe.,"print_dataframe<- function(data){
  print(data)
}"
Generate a query to find the average age of students enrolled in a course with given course ID.course_id = 101,"SELECT AVG(age) 
FROM students 
WHERE course_id = 101;"
Develop a program to accept one number from the user and display its factorial using a Python function.5,"def factorial(num):
    if num <= 1:
        return 1
    else:
        return num * factorial(num-1) 
    
num = int(input('Enter number to find factorial: '))
factorial = factorial(num)
print('Factorial of', num, 'is', factorial)"
"Develop a function in Python to filter out all negative numbers in a given list.[2, 3, -1, 4, -5, 6]","def filter_negative_numbers(nums):
    # return only positive numbers
    return [num for num in nums if num >= 0]

print(filter_negative_numbers([2, 3, -1, 4, -5, 6]))"
Implement a function in AngularJS to register a new user.,"angular.module(""app"").factory(""register"", function($http) {
  return {
    registerUser: function(userData) {
      return $http.post(""/api/register"", {
        userData: userData
      });
    }
  };
});"
Create an identifier in Python that starts with an underscore followed by the letter 'a'.,_a
Calculate the factorial of 8.,The factorial of 8 is 403
"Segregate a given array of numbers into even and odd.[1, 2, 3, 4, 5]","even_numbers = [2, 4]
odd_numbers = [1, 3, 5]"
"Translate the following words into Spanish: ""Hello"", ""Thank You"", and ""Goodbye"".","Hello = Hola
Thank You = Gracias
Goodbye = Adiós"
How do you retrieve the 3rd element of a set in Python?,"In Python, you can retrieve the 3rd element of a set by using the index operator []. The 3rd element of a set can be accessed by using the syntax set[2]. Note that the indexing in Python starts from 0, so the 3rd element will have index 2."
Create a function in Python that takes three numerical inputs and returns the maximum value.,"def max_value(num1, num2, num3):
    max_num = max(num1, num2, num3)
    return max_num"
Convert the given hexadecimal color code to RGB format.#F1948A,"rgb(241, 148, 138)"
Write a Python program to print the right angled triangle using asterisk.,"for i in range(0, 6): 
	for j in range(0, i + 1): 
		print(""* "", end="""")
	print(""\r"")"
"In the following code, modify the function to take the type of an argument as an input and perform the necessary conversion before returning the result.def get_string(input): 
    return str(input)","def get_string(input, type): 
    if type == 'int':
        return str(int(input))
    elif type == 'float':
        return str(float(input))
    elif type == 'str':
        return str(input)"
"Write a function to transform a dataset into a matrix, where rows represent data points followed by their labels.dataset=[(2, 3, 1), (5, 4, -1), (1, 8, 1)]","def dataset_to_matrix(dataset):
    matrix = [[x, y, z] for x, y, z in dataset]
    return matrix"
Write a function to create a random sequence of 0s and 1s.,"import random

def generate_random_sequence(length):
    sequence = []
    for i in range(length):
        sequence.append(random.choice([0, 1]))
    return sequence"
Generate an array containing the next n numbers in the Fibonacci sequence.,"def generate_fibonacci_sequence(n):
    sequence = [0, 1] 
    for i in range(2, n):
        sequence.append(sequence[i-1] + sequence[i-2])
    return sequence"
"Create a dictionary from a list of tuples, where the key is the first element of the tuple and the value is the second element of the tuple.list_of_tuples = [('key1', 'val1'), ('key2', 'val2'), ('key3', 'val3')]","def list_to_dict(list_of_tuples):
    return dict(list_of_tuples)"
"From the given list, create a dictionary where keys will be the elements and the values will be their corresponding indices.elements = [""one"", ""two"", ""three"", ""four""]","def list_to_dict(elements):
    return {el: i for i, el in enumerate(elements)}"
"Using list comprehension, create a list which contains multiples of 5 from 0 to 50 (inclusive).","multiples_of_5 = [x*5 for x in range(0,11)]"
Create a function that takes in two integer values and prints out the larger one.,"def print_greater_value(num1, num2):
    if num1 > num2:
        print(num1)
    else:
        print(num2)"
Suggest an appropriate algorithm to filter out unwanted words from a given paragraph of text.,"A possible approach to filter out unwanted words from a given paragraph of text is to use a hash table or dictionary. By creating a dictionary using key-value pairs of words and their frequencies, it becomes possible to compare the words found in a given text against the words in the dictionary to determine their relevance. If a word is not found in the dictionary, it can be assumed to be an unwanted word and can thus be discarded."
Create a function to sort items in a list alphabetically in Python.,"def alphabetical_sort(lst):
    sorted_list = sorted(lst, key=lambda x: x.lower())
    return sorted_list"
"Implement selection sort to sort a list in non-decreasing orderlist = [9, 5, 3, 1, 8]","def selection_sort(list): 
    for i in range(len(list)): 
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j 
        list[i], list[min_idx] = list[min_idx], list[i]
    return list
  
# example  
list = [9, 5, 3, 1, 8]
print(selection_sort(list))"
"Generate a code to find the power of n to m.n = 3, m = 7","def pow_n_m(n, m):
    result = 1
    for i in range(1, m+1):
        result *= n
    return result
  
# example  
n = 3 
m = 7
print(pow_n_m(n, m))"
"Create a code to calculate the most frequent character in a given strings = ""Hello world!""","def most_frequent_char(s):
    counts = {}
    max_char = """"
    max_count = 0
    for c in s:
        if c in counts:
            counts[c] += 1
        else:
            counts[c] = 1
        if counts[c] > max_count:
            max_char = c
            max_count = counts[c]
    return max_char
  
# example
s = ""Hello world!""
print(most_frequent_char(s))"
Create a simple program to capitalize the first letter of every sentence,"def capitalize_sentences(text): 
   sent_list = text.split(""."")
   cap_sent_list = [sentence.capitalize() for sentence in sent_list]
   output = '.'.join(cap_sent_list)
   return output"
"Given a text string, generate a Python code snippet to find the number of occurrences of a given wordThe quick brown fox jumped over the lazy dog","def num_occurrences(text, word):
    count = 0
    words = text.split()
    for w in words:
        if w == word:
            count += 1
    return count"
Generate a regular expression to extract the domain from an email address,([\w.-]+)@([\w.-]+)
Create a class called Cat to represent a type of pet.,"class Cat:
    def __init__(self, name, color, age):
        self.name = name
        self.color = color
        self.age = age 
    
    def eat(self):
        print(f""{self.name} is eating"")

    def sleep(self):
        print(f""{self.name} is sleeping"")
    
    def play(self):
        print(f""{self.name} is playing"")

    def __repr__(self):
        return f""<Cat {self.name}, {self.color}, {self.age}>"""
"Given an array of integers, write a function to check if the sum of any two of them equals the given parameter ‘n’.array = [2, 4, 6, 8]
n = 10","def check_sum(array, n):
    """"""
    Given an array of integers, returns True if the sum of any two of them equals the given parameter 'n'. 
    """"""
    for i in range(len(array)):
        for j in range(i + 1, len(array)):
            if array[i] + array[j] == n:
                return True
    return False"
"Using the provided input, calculate the SHA256 checksum in Python.string = ""Hello World!""","import hashlib
 
def sha256_calc(string):
    """"""
    Calculate SHA256 checksum in Python.
    """"""
    sha_signature = hashlib.sha256(string.encode()).hexdigest()
    return sha_signature"
Print all the prime numbers in the range of 2 to n.n = 10,"def print_all_primes(n):
    """"""
    Print all the prime numbers in the range of 2 to n.
    """"""
    for num in range(2, n+1):
        if all(num % i != 0 for i in range(2, num)):
            print(num)"
"Split a string into its individual words and store it in a list.string = ""Hello world, this is a test string.""","def split_to_words(string):
    """"""
    Split a string into its individual words and store it in a list.
    """"""
    return string.split()"
What is the minimum requirements to become an AI Engineer?,"To be an AI engineer, at a minimum, a person must have a bachelor’s degree in computer science, mathematics, or a related field. It is also beneficial for a person to have an understanding of artificial intelligence and machine learning principles, and to be familiar with programming languages, such as Python and C++. In addition, a working knowledge of data structures and algorithms, and experience with debugging and software development are important. Experience and/or certification in data engineering frameworks, such as TensorFlow or PyTorch, are also recommended."
What data type is the following statement?float score = 73.2,The data type of the statement is a float.
Print the square of 5?,The square of 5 is 25.
"Design an algorithm to calculate the maximum profit for buying/selling 1 share of a company's stock.Share Prices = [9, 11, 8, 5, 7, 10]","Let us consider buying and selling 1 share of the stock 
1. Initialize the local maximum profit = 0 and the minimum element = 9 
2. Run a loop from i=1 to n and update the local maximum profit and the minimum element as you iterate 
3. For each iteration i, check the profit obtained by selling the share at price[i] and subtract the profit obtained by buying the share at min element 
4. If the obtained profit is more than the local maximum profit, then update the local maximum profit 
5. Return the local maximum profit"
"In Python, define a class for a rectangle object.","class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def __str__(self):
        return f""This is a rectangle with width of {self.width} and height of {self.height}."""
"Construct a for loop to traverse an array of integers starting from the third element and ending at the last element.array = [1,2,3,4,5]","for i in range(2, len(array)):
  print(array[i])"
"Output the lexicographical order of a given array of strings.words = [""apple"", ""banana"", ""cherry""]","apple, banana, cherry"
How do you use the built-in function filter() in  Python?,"The filter() function in Python takes a function and an iterable as input arguments. The filter() function filters out elements from the given iterable (for example, a list) that don't satisfy the given condition determined by the function. It returns an iterator containing the filtered elements. Syntax: filter(function, iterable) Example: my_list = [1,4,5,6,7] filtered_list = filter(lambda x: x % 2 == 0, my_list) print(list(filtered_list)) Output: [4, 6]"
"Go through the following list of car models, and print out only the names of all-electric vehicles.Tesla Model 3
Tesla Model X
Toyota Corolla
Kia Soul EV
Ford Fusion","cars = [""Tesla Model 3"", ""Tesla Model X"", ""Toyota Corolla"", ""Kia Soul EV"", ""Ford Fusion""]

for car in cars:
    if ""EV"" in car:
        print(car)

Output:
Tesla Model X
Kia Soul EV"
Create a Python program to find the average of the given numbers in the list,"my_list = [2, 4, 10, 20]

def average(nums):
    return sum(nums) / len(nums)

print(average(my_list))

Output:
8.0"
How can we store data persistently on the user's machine?,"Data can be stored persistently on the user's machine with various web storage APIs such as localStorage and sessionStorage. LocalStorage enables an application to store data on the user's computer with no expiration date, while sessionStorage stores information that can only be accessed while the application is open in the browser."
"Edit the following code snippet to output ""five"" instead of ""four"".echo ""four"";","echo ""five"";"
Create a basic python object that stores the length and width of an rectangle.,"class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width"
You need to add an if statement to this existing code. The if statement should check if the given number stored in the variable x is larger than 10.int x = 5;,"if (x > 10) {
 // Do something...
}"
Create a for loop that prints the first five numbers of the Fibonacci sequence.,"let x = 0;
let y = 1;

for (let i = 0; i < 5; i++) {
 let z = x + y;
 console.log(z);
 x = y;
 y = z;
}"
You need to create a dictionary that contains five elements with their associated values.,"myDictionary = {
 'apple': 'fruit',
 'celery': 'vegetable',
 'sun': 'star',
 'earth': 'planet',
 'light': 'energy'
}"
You need to write a regular expression that will match any string containing only the letters 'a' and 'b'.,/^[ab]+$/
This program needs an array containing the first 10 numbers of the Fibonacci sequence.,"let fibonacci = [0, 1];
let x = 0;
let y = 1;

for (let i = 1; i < 10; i++) {
 let z = x + y;
 x = y;
 y = z;
 fibonacci.push(z);
}"
"You need to write a function that takes an array and returns the count of even elements in the array.[1, 2, 3, 4, 5, 6]","def even_count(arr):
 count = 0
 for i in arr:
  if i % 2 == 0:
   count += 1
 return count"
Construct a regular expression that will match only strings that contain a number.,/\d+/
"Create a program to compare two strings and print the result.str1 = “Hello”, str2 = “World”","def compare_strings (str1, str2):
if str1 == str2:
    print (""The strings are equal"")
else:
    print (""The strings are not equal"")"
"Write MATLAB code to generate a 2-D array called ""A"" and fill it with random numbers.","A = rand(3,3);"
"Create a Python class called ""Car"" which has the ""model"" and ""year"" parameters.","class Car:
  def __init__(self, model, year):
    self.model = model
    self.year = year"
Write a code that prints the even numbers from 10 to 0 in descending order.,"for num in range(10,0,-1):
    if(num % 2 == 0):
        print(num)"
"Modify the following code as required to display the message “Hello World” on the screen.print(""Hello"")","print(""Hello World"")"
Convert the following linear equation into a quadratic equation.3x + 5 = 0,3x^2 + 5x + 5 = 0
"Add a 3x3 identity matrix to the following matrix.[[1, 2, -3] 
 [0, 1, 3] 
 [-2, 0, 4]]","[[4, 2, -3], 
 [0, 4, 3], 
 [-2, 0, 7]]"
Create a 3x3 rotation matrix with an angle of 45 degrees.,"[[0.7071, -0.7071, 0.0],
 [0.7071, 0.7071, 0.0],
 [0.0, 0.0, 1.0]]"
"Rewrite the following Python function to include a try/except block.def multiply(num1, num2):
	result = num1 * num2
	return result","def multiply(num1, num2):
	try:
		result = num1 * num2
		return result
	except TypeError:
		print(""Error: Inputs must be numbers"")"
"Rewrite this code to make it shorter.int x=10;
int result=0;
while(x>0){
result+=x;
x--;
}","int x = 10, result = 0;
while (x > 0) result += x--;"
"Parse a given URL into its component parts.url = ""https://www.example.com/articles/first-article""","protocol = ""https""
host = ""www.example.com""
path = ""/articles/first-article"""
"Debug the following program and make it function correctlydef count_words(text):
    words = text.split()
    count = 0
    for word in words:
        count += 1
    return count

string = ""Hello world""

print(count_words(string))","def count_words(text):
    words = text.split()
    count = 0
    for word in words:
        count += 1
    return count

string = ""Hello world""

# we need to add a check for empty string
if string != '':
    print(count_words(string))
else:
    print(0)"
Implement a function that prints all prime numbers up to the provided number.,"def print_prime_numbers(n):
    # iterate through all numbers up to the provided number
    for num in range(2, n+1):
        is_prime = True
        # check if a number is prime
        for j in range(2, num):
            if num % j == 0:
                is_prime = False
        # if prime print it
        if is_prime:
            print(num)

print_prime_numbers(20) # prints 2, 3, 5, 7, 11, 13, 17, 19"
What is the time complexity of linear search in an unsorted array?,"The time complexity of linear search in an unsorted array is O(n), where n is the number of elements in the array. This is because in linear search, the algorithm has to inspect each element in the array in order sequentially until it finds the desired element. As the size of the array increases, the time taken to search increases linearly."
Split a string into an array of words and return the length of the longest word.,"def longest_word(string):
    words = string.split("" "")
    longest_word_length = 0
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length"
"Read a given text and classify each sentence as true or false.text = ""The sky is blue, the sea is blue. The grass is green.""","text = ""The sky is blue, the sea is blue. The grass is green.""

sentences = text.split(""."")
true_sentences = []
false_sentences = []

for sentence in sentences:
    if sentence.endswith(""true""):
        true_sentences.append(sentence)
    else:
        false_sentences.append(sentence)

print(""True sentences:"")
print(*true_sentences, sep=""\n"")

print(""False sentences:"")
print(*false_sentences, sep=""\n"")"
Create a function to generate a list of prime numbers between 2 and n.,"def prime_numbers(n):
    prime_nums = []
    for num in range(2, n + 1):
        if num > 1:
            for i in range(2, num): 
                if (num % i) == 0: 
                    break
            else:
                prime_nums.append(num)
    return prime_nums"
"Given a string and a character, write a program that counts the number of occurrences of the character in the string.string = 'Hello World!' 
character = 'l'","def count_occurrences(string, character): 
  count = 0
  for i in range(len(string)):
    if string[i] == character:
      count += 1
  return count"
Generate a random string of length 10 consisting of letters and numbers.,"import random
import string

def generate_random_string():
    rand_string = ''.join(random.choices(string.ascii_lowercase +
                                        string.digits,
                                        k=10))
    return rand_string

# testing
random_string = generate_random_string()
print(random_string)"
Compose a query using the MongoDB query language to return the first 5 documents in a collection named 'users'.,db.users.find().limit(5)
"Given a binary tree, write a code to search a given value in the tree.","def search_tree(tree, value):
    # If the tree is empty
    if not tree:
        return False
 
    if value == tree.val:
        return True
 
    # If the given value is less than the tree's value
    # search left subtree
    elif value < tree.val:
        return search_tree(tree.left, value)
 
    # If the given value is more than tree's value
    # search right subtree
    else:
        return search_tree(tree.right, value)"
"Run the following code in Python 3.num1 = 10
num2 = 20","num1 = 10
num2 = 20

result = num1 + num2

print(result)

# Output
30"
"Write a class that has a method to return the smallest element in a given list of integers.[12, 24, 72, 1, 4]","class MinValue:
    def getMin(self, numList):
        minVal = numList[0]
        for i in numList:
            if i < minVal:
                minVal = i
        return minVal

if __name__ == ""__main__"":
    obj = MinValue()
    numList = [12, 24, 72, 1, 4]
    print(obj.getMin(numList))"
Create a function that takes a given sentence as input and outputs a list of all its words.Sentence: I am learning to code,"def stringsplit(sentence):
    words=sentence.split(' ')
    return words

if __name__ == ""__main__"":
    print(stringsplit('I am learning to code'))"
"Construct a code that takes a list of words as input and changes the case of each item in the list.[cat, dog, apple]","def toUpperCase(words):
    upper_words=[]
    for word in words:
      upper_words.append(word.upper())
    return upper_words

if __name__ == ""__main__"":
    print(toUpperCase(['cat','dog','apple']))"
Construct a code segment to find all unique characters in a given string.String: Geeksforgeeks,"def find_unique(string): 
    uniq_char = [] 
    for i in string: 
        if i not in uniq_char: 
            uniq_char.append(i) 
    return uniq_char 

print(find_unique(""Geeksforgeeks""))"
Create a loop that takes a given number as input and outputs its prime factors.Number: 35,"n = 35
for i in range(2, 35):
    while n % i == 0:
        print(i)
        n = n / i"
"Write a code to sum all the values of the following dictionary.d = {'a':2, 'b':3, 'c':4}","d = {'a':2, 'b':3, 'c':4}

def dictSum(d):
    total = 0
    for key in d:
        total += d[key]
    return total

if __name__ == ""__main__"":
    print(dictSum(d))"
Generate python code to replace each character in a string with the next character in the alphabet.,"def replace_with_next_char(string):
    output = """"
    for char in string:
        output += chr(ord(char) + 1)
    return output"
How can you use a for loop to traverse a dictionary?,"You can use a for loop to traverse a dictionary by iterating over the dictionary's keys or key-value pairs.

For example, you can loop through all the keys of a dictionary like this:

dictionary = { 'a':1, 'b':2, 'c':3 } 
for key in dictionary: 
    print(key) 

Or you can loop through all the key-value pairs like this:

dictionary = { 'a':1, 'b':2, 'c':3 } 
for key, value in dictionary.items(): 
    print(key, ':', value)"
What data structure could you use to keep track of the list of items purchased by each customer?,A dictionary is a suitable data structure for keeping track of the list of items purchased by each customer. The key would be the customer name and the value would be a list of items purchased by the customer.
Write a prompt message that asks the user to enter their name.,Please enter your name:
Display a chart on the page to show the data.,"<div id=""chartContainer""></div>
<script>
  var chart = new CanvasJS.Chart(""chartContainer"", {
    //Options
  });
  chart.render();
</script>"
"Merge two binary trees t1 and t2 into a new binary tree.t1 = 
	   1	
    /   \
   4     5
  / \  
 8   9
t2 = 
	   2
    /   \
   7     8
  /
 9","function mergeTrees(t1, t2) {
    // exit case, if one of the trees are null
    if (!t1 || !t2) return t1 || t2

    //Otherwise, merge the new node values from both trees
    let t3 = new TreeNode(t1.val + t2.val);

    // recursively traverse both trees to build up the result
    t3.left = mergeTrees(t1.left, t2.left)
    t3.right = mergeTrees(t1.right, t2.right)

    return t3
}"
Generate an array of the first 10 Fibonacci numbers using any programming language.,"let fib = [0, 1];
while (fib.length < 10) {
  fib.push(fib[fib.length - 1] + fib[fib.length - 2]);
}
console.log(fib);  // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
"Write a function in Python which takes the information from the following dictionary and prints out the total price of all the items in it.
 §§ 1020my_dict = {
  'item1': {'price': 20, 'quantity': 5},
  'item2': {'price': 10, 'quantity': 3},
}","def get_total(my_dict):
  total = 0
  for item in my_dict.values():
    total += item['price'] * item['quantity']
  return total

print(get_total(my_dict)) // 90"
"Given a set of strings s, find an algorithm to determine if the set is a palindrome.s = {""b"", ""c"", ""a"", ""a"", ""c"", ""b""}","def isSetPalindrome(s):
  n = len(s)
  for i in range(int(n/2)):
    if s[i] != s[n - i - 1]:
      return False
  return True
 §§ 1060

print(isSetPalindrome(s)) // True"
"Given two sorted arrays nums1 and nums2, combine their elements into a single array that is sorted.nums1 = [1, 2, 3]
nums2 = [2, 4, 5]","def mergeArrays(nums1, nums2):
  result = []
  i = j = 0
  while i < len(nums1) and j < len(nums2):
    if nums1[i] < nums2[j]:
      result.append(nums1[i])
      i += 1
    else:
      result.append(nums2[j])
      j += 1
  result += nums1[i:] + nums2[j:]
 §§ 1080
  return result

print(mergeArrays(nums1, nums2)) // [1, 2, 2, 3, 4, 5]"
"Write a function to determine if a given string is a valid English word or not.s = ""construct""","def isValidWord(s):
  words = open(""words_alpha.txt"").readlines()
  return s in words

print(isValidWord(s)) // true"
"Given two unsorted arrays, merge them in a sorted form without using any extra space.nums1 = [5, 8, 2]
nums2 = [7, 1]","def mergeArrays2(nums1, nums2):
  i = j = 0
  while i < len(nums1) and j < len(nums2):
    if nums1[i] > nums2[j]:
      nums1[i], nums2[j] = nums2[j], nums1[i]
      j += 1
    else:
      i += 1
  
  nums1.sort()
  nums2.sort()

print(nums1) // [1, 2, 5]
print(nums2) // [7, 8]"
"Given a string s and an integer k, find the kth largest character of s.s = ""hello""
k = 3","def kthLargestCharacter(s, k):
  char_dict = {}
  for c in s:
    if c not in char_dict:
      char_dict[c] = 1
    else:
      char_dict[c] += 1

  char_list = sorted(char_dict.items(), key=lambda x : x[1], reverse = True)
  
  return char_list[k - 1][0]

print(kthLargestCharacter(s, k)) // l"
Generate a random phone number using random numbers in Python.,"import random

def generatePhoneNumber():
  nums = [str(random.randint(0, 9) for _ in range(10))]
  return '-'.join([''.join(nums[:3]), ''.join(nums[3:6]), ''.join(nums[6:])])

print(generatePhoneNumber() // ""567-444-0116"""
"Sort the following array of numbers in-place using the bubble sort algorithm: [5, 3, 2, 8, 1].","for i in range(len(arr)):
    for j in range(len(arr)-i-1): 
        if arr[j] > arr[j+1] :
            arr[j], arr[j+1] = arr[j+1], arr[j]
            
Resulting array = [1, 2, 3, 5, 8]"
Create a function to search a given string for the first vowel.,"def first_vowel(string): 
    index = 0
    for char in string:
        if char in [""a"", ""e"", ""i"", ""o"", ""u""]: 
            return index
        else: 
            index+= 1 
    return -1"
"Construct a Python loop to display the elements in the following list.my_list = [1, 2, 3, 4]","for element in my_list: 
    print(element)"
Create an array of all the odd numbers between 0 and n (inclusive).,"def odd_numbers_array(n):
    array = []
    for i in range(0,n+1):
        if i%2 != 0:
            array.append(i)
    return array"
Create a program in Python for converting Fahrenheit to Celsius.,"def fahrenheit_to_celsius(temp): 
    return (temp - 32) * 5/9;  
  
# Driver code 
temperature = float(input(""The temperature in Fahrenheit: "")) 
print(""Temperature in Celsius: {}"".format( fahrenheit_to_celsius(temperature)))"
Calculate the Fibonacci sequence up to the n-th number where n is provided as an argument.,"def fibonacci(n):
    if n == 0:
        return 0 
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)"
Create a program to check if the input is an even number.,"def is_even(num):
    return num % 2 == 0"
"Find the first non-repeating character in a string.string: ""abcdabcd""","def find_first_non_repeating(string):
    seen = {}
    for char in string:
        if char in seen:
            seen[char] +=1 
        else:
            seen[char] = 1
    return [char for char in string if seen[char] == 1][0]"
"Find the number of combinations of a given length from the characters in a given string.string: ""ABCD""
length: 2","def count_combinations(string, length):
    result = 1
    for i in range(length):
        result *= len(string)
    return result"
Create a program to find the nth element of the Fibonacci sequence.,"def nth_element(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1 
    else:
        return nth_element(n-1) + nth_element(n-2)"
Implement a game of Hangman in Python.,"import random

# list of words
word_list = [""python"", ""java"", ""computer"", ""programming"", ""hangman""]

# randomly select a word
word = random.choice(word_list)

# set initial lives
lives = 6

# write your code here
def hangman(word, lives):
  return # write your code here"
Use TensorFlow to build a deep learning model for predicting the price of a given stock.,"import tensorflow as tf

# define the model
model = tf.keras.Sequential([
 tf.keras.layers.Input(shape=(1,), name=""Input_Layer"", dtype=tf.float32),
 tf.keras.layers.Dense(32, activation='relu', name=""Hidden_Layer_1""),
 tf.keras.layers.Dense(32, activation='relu', name=""Hidden_Layer_2""),
 tf.keras.layers.Dense(1, activation='sigmoid', name=""Output_Layer"")
])

# compile the model
model.compile(
optimizer=tf.keras.optimizers.Adam(),
loss=tf.keras.losses.MeanSquaredError(),
metrics=[tf.keras.metrics.MeanAbsoluteError()],
)

# fit the model
model.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))"
Read the following text and use a regular expression to extract email addresses.Please contact john@example.com and lisa@mail.com for more information.,"/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|""(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*"")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/"
"Given a list of words, write a function to check if the list contains any palindrome words.words = [""racecar"", ""level"", ""tot"", ""trot""]","def contains_palindrome(words):
    for word in words:
        if word == word[::-1]:
            return True
    return False"
How is the Julia dynamic programming technique different from bottom-up dynamic programming?,"Julia's dynamic programming technique uses memoization, which is a method of storing and reusing the result of previous computations. Bottom-up dynamic programming is a type of dynamic programming that begins with the solution to small problem instances and gradually builds up towards larger problem instances. Julia's dynamic programming approach does not necessarily build up from solution to small problem to larger problems and therefore may provide a more efficient solution for certain problems."
"Given a sequence of numbers, write a program to find the length of the longest subsequence in which all numbers are in increasing order.arr = [1, 7, 4, 3, 2, 8]","def findLongestSubsequence(arr): 
    n = len(arr)
    dp = [1]*n 
    for i in range(1, n): 
        for j in range(i): 
            if arr[i] > arr[j] and dp[i] < dp[j] + 1 : 
                dp[i] = dp[j]+1
    return max(dp)"
What approaches are available for the optimization of a neural network?,"There are several approaches for the optimization of a neural network, such as backpropagation, gradient descent, genetic algorithms, simulated annealing, particle swarm optimization, evolutionary computation, and stochastic gradient descent. These approaches are used to improve the accuracy and efficiency of the neural network by optimizing its parameters."
"Name the error in the example code.Example Code:
def do_math():
num1 = 5
num2 = 3
sum = num1 + num2
return","The error is ""Missing Return Statement""."
"Given a sentence, find the first verb in the sentence.Sentence: She shouted and cheered when she saw her result.",shouted
How can you check the memory used by a Python object?,"You can use the sys module’s ""getsizeof()"" function to check the memory used by an object. The getsizeof() method returns the memory size of the specified object in bytes. For example, sys.getsizeof(data) will return the size of the data object in bytes."
"Write a piece of code that runs a loop from 0 to 10, and prints the loop index each time it runs.","for i in range(11):
    print(i)"
"Given a list of integers, calculate the sum of only the first 3 numbers.List: [1,4,5,7,2]","list = [1,4,5,7,2]
sum = list[0] + list[1] + list[2] #Result: 10"
"Compare the two strings, and return 0 if they are the same, 1 if a is greater than b, or -1 if b is greater than a.Strings:
a = ""hello world""
b = ""goodbye world""","int result = a.compareTo(b);
//Result: 1 (because ""hello world"" is greater than ""goodbye world"")"
"Design a method which takes in two sorted array of size n and m, and returns a new sorted array of size n + mint arr1[] = {1, 3, 5, 7};
int arr2[] = {2, 4, 6, 8};","public static int[] mergeArrays(int[] arr1, int[] arr2) {
    int[] result = new int[arr1.length + arr2.length];
    int i = 0, j = 0, k = 0;
  
    while (i < arr1.length && j < arr2.length)  
    { 
        if (arr1[i] < arr2[j])  
            result[k++] = arr1[i++]; 
        else
            result[k++] = arr2[j++]; 
    } 
  
    while (i < arr1.length)  
        result[k++] = arr1[i++]; 
  
  
    while (j < arr2.length)  
        result[k++] = arr2[j++]; 
  
    return result; 
}"
"Design a program to find the sum of all numbers in an array of size 5int arr[] = {4, 8, 2, 6, 1};","public class SumOfElements { 
    // Function to get sum of all elements. 
    public static int getSum(int[] arr) 
    { 
        int sum = 0; 
        for (int i : arr) 
            sum += i; 
        return sum; 
    } 
  
    public static void main(String[] args) 
    { 
        int arr[] = { 4, 8, 2, 6, 1 }; 
        int sum = getSum(arr); 
  
        System.out.println(""Sum is : "" + sum); 
    } 
}"
"Write a function that takes a name as a parameter and returns its reverse counterpart.name = ""John""","def reverse_name(name):
    return name[::-1]"
"Write a function to take a list of strings and return only the words made up of the same letter.word_list = [""aaa"", ""cab"", ""bba""]","def same_letter_words(word_list):
    same_letter_words = [word for word in word_list if len(set(word)) == 1]
    return same_letter_words"
"Using the list of numbers, create a function to sort the list into ascending order.numbers = [6, 4, 3, 2, 8]","def sort_ascending(numbers):
    numbers.sort()
    return numbers"
"Using the data provided, create a function to calculate the mean value of the elements inside the dictionary.data = {""John"": 8.5, ""Jane"": 9, ""Bob"": 5}","def mean_value(data):
    sum = 0
    count = 0
    for value in data.values():
        sum += value
        count += 1
    
    return round(sum/count, 2)"
Write a function to print out the triangle pattern as shown in the example.height = 3,"def triangle_pattern(height):
    star = ""*""
    for i in range(height):
        print(star*(i+1))"
Suggest a function name for a function that reverses a string.,"function reverseString(str) {...} 
or
function reverseWord(str) {...}"
"Create a class in Python for a student which should include the following fields: first name, last name, age, and grade.","class Student:
    def __init__(self, first_name, last_name, age, grade):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.grade = grade"
Write a regular expression to validate an Indian mobile number.,^[6-9][0-9]{9}$
Suggest a sorting algorithm which takes minimal time to execute.,Quick Sort
How can you pass multiple parameters in a function?,"You can pass multiple parameters in a function by using either argument lists, or by using objects or arrays to group multiple parameters together."
Suggest a class name for a class which models a data structure for storing a 2-dimensional array.,MatrixDataStructure
What is pandas and why would someone use it?,"""""""
Pandas is a Python library used for data analysis and manipulation. It is used for data wrangling, data preparation, and data exploration. Pandas allows for easy manipulation and analysis of data, as well as performing high-level operations on it. It also supports several data formats including CSV, JSON, SQlite, HDF5, and many more. Pandas is a powerful tool for data analysis as it is flexible, functional, and easy to use. It offers a wide range of tools for data analysis, including data filtering and data aggregation. With Pandas, it is possible to quickly convert, clean, and manipulate data into an easily understandable format, enabling the user to easily explore and identify trends and patterns."
Write a code to perform a depth-first search on a binary search tree.,"""""""
A code to perform a depth-first search on a binary search tree
""""""

# Node class 
class Node: 
  
    # Constructor to create a new node 
    def __init__(self, key): 
        self.key = key  
        self.left = None
        self.right = None
  
# A function to do inorder tree traversal 
def depth_first_search(root): 
  
    if root is not None: 
        print(root.key, end="" "") 
        depth_first_search(root.left) 
        depth_first_search(root.right) 
  
if __name__ == '__main__': 
    root = Node(1) 
    root.left      = Node(2) 
    root.right     = Node(3) 
    root.left.left  = Node(4) 
    root.left.right  = Node(5) 
  
    print(""Depth First Search:"")
    depth_first_search(root)"
"Given a string, what is the best way to reverse the characters in it?<noinput>>","""""""
The best way to reverse the characters in a string is by using the slicing option of a string object. 

The string slicing reverses a string by slicing it from the end of the string and going to the beginning of the string. This can be done with the following syntax:

string_name[::-1]

For example, to reverse the string ""Hello World!"", the following can be used:

""Hello World!""[::-1]

which will output ""!dlroW olleH"". 
"""""""
What are the steps to debug a code?,"""""""
The steps to debug a code are:

1. Identify the errors in the code. 
2. Identify the source of the errors. 
3. Examine the context of the errors. 
4. Determine possible solutions. 
5. Test each solution and check the results. 
6. Refine the solution by repeating steps 4 and 5 until the issue is resolved. 
"""""""
Create a Python code for a basic for loop.,"""""""
A Python code for a basic for loop
""""""

for i in range(10):
    print(i)"
"Write a code that takes the input of two strings, and returns the longest common substring in them.","""""""
A code that takes the input of two strings, and returns the longest common substring in them
""""""

def longest_common_substring(s1, s2):
    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
    longest, x_longest = 0, 0
    for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
            if s1[x - 1] == s2[y - 1]:
                m[x][y] = m[x - 1][y - 1] + 1
                if m[x][y] > longest:
                    longest = m[x][y]
                    x_longest = x
            else:
                m[x][y] = 0
    return s1[x_longest - longest: x_longest]

if __name__ == '__main__': 
    s1 = ""Hello World""
    s2 = ""Hey World""
    print(""The longest common substring is: %s"" % longest_common_substring(s1, s2))"
What is the difference between Python 2 and Python 3?,"""""""
The main difference between Python 2 and Python 3 is in how strings are treated. In Python 2, strings are written in byte strings or fully Unicode strings; in Python 3, strings are written in Unicode by default. Other differences include the import statement, integer division, integer in range function, function print, raising and catching exceptions, binary revisers, and many more.
"""""""
What libraries are commonly used in data science?,"""""""
Some of the most commonly used libraries in data science are NumPy, pandas, Matplotlib, Scikit-Learn, TensorFlow, Theano, Seaborn, Keras, NLTK, Apache Spark, and Bokeh. These libraries are used for a variety of tasks such as data manipulation, machine learning, visualization, natural language processing, and big data analysis.
"""""""
Write a code to find the longest common prefix among a given set of strings.,"""""""
A code to find the longest common prefix among a given set of strings
""""""

def longest_common_prefix(strs): 
  
    if not strs: 
        return """" 
  
    shortest_str = min(strs,key=len) 
   
    for i, ch in enumerate(shortest_str): 
        for other in strs: 
            if other[i] != ch: 
                return shortest_str[:i]  
    return shortest_str 
  
if __name__ == '__main__': 
    strs = [""flower"",""flow"",""flight""] 
    print(""The longest common prefix is: %s"" % longest_common_prefix(strs))"
Develop an R script that converts a given number from Fahrenheit to Celsius.Fahrenheit temperature = 100,"celsius_temperature = function(fahrenheit_temperature) {
  celsius_temperature = (fahrenheit_temperature - 32) * 5 / 9
  return(celsius_temperature)
}

# Test case
print(celsius_temperature(100)) # Output: 37.77778"
How can you create a string of all random characters of length 10 in Python?,"import random
random_string = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(10))"
"Improve the following code by implementing a more efficient algorithm.def FunctionA(arr):
    output = []
    for elem in arr:
        if elem > 0 and not elem in output:
            output.append(elem)
    return output","def FunctionA(arr):
    output = set()
    for elem in arr:
        if elem > 0:
            output.add(elem)
    return list(output)"
"What should be written in place of ""___"" to make the following code a valid if-else statement in Python?if x >= 0:
 ___","if x >= 0:
    print(""x is positive"")"
Construct a while loop to add all odd integers from 1 to 100.,"sum_of_odds = 0
i = 1
while i <= 100:
    if i % 2 != 0:
        sum_of_odds += i
    i+=1"
Implement a recursive method to find the sum of all numbers from 1 to n. The method should take an integer n as its argument.4,"def sumNums(n): 
    if n == 0: 
        return 0
    else: 
        return n + sumNums(n-1) 
  
# Driver Code 
n = 4
print(sumNums(n))"
"Write a Kotlin class to represent a book. It should contain the title, author name, year of publication and ISBN.","class Book {

    private var title: String
    private var authorName: String
    private var yearOfPublication: Int
    private var ISBN: String

    constructor(title: String, authorName: String, yearOfPublication: Int, ISBN: String) {
        this.title = title
        this.authorName = authorName
        this.yearOfPublication = yearOfPublication
        this.ISBN = ISBN
    }

    fun getTitle(): String {
        return title
    }

    fun setTitle(title: String) {
        this.title = title
    }

    fun getAuthorName(): String {
        return authorName
    }

    fun setAuthorName(authorName: String) {
        this.authorName = authorName
    }

    fun getYearOfPublication(): Int {
        return yearOfPublication
    }

    fun setYearOfPublication(yearOfPublication: Int) {
        this.yearOfPublication = yearOfPublication
    }

    fun getISBN(): String {
        return ISBN
    }

    fun setISBN(ISBN: String) {
        this.ISBN = ISBN
    }
    
}"
Suggest a better algorithm for finding a prime number.,"def is_prime(n): 
    """""" 
    A better algorithm for determining if a number is prime 
    :param n: The number to determine whether is prime 
    :return: a boolean if the number is prime
    """"""
    if (n <= 1): 
        return False
    if (n <= 3): 
        return True
    if (n % 2 == 0 or n % 3 == 0): 
        return False
  
    i = 5
    while(i * i <= n): 
        if (n % i == 0 or n % (i + 2) == 0): 
            return False
        i = i + 6
  
    return True"
In how many ways can you write a program to append two strings together?,"There are several ways to write a program to append two strings together: 

1. Using the + operator, you can concatenate the two strings: 
    string_combined = string1 + string2

2. Using the format() method, you can combine the two strings into one string: 
    string_combined = '{}{}'.format(string1, string2)

3. Using the join() method, you can join the strings together using a glue character in between: 
    string_combined = ' '.join([string1, string2])

4. Using the append() method, you can append string2 to string1: 
    string1.append(string2)

5. Using the replace() method, you can replace a part of string1 with string2: 
    string_combined = string1.replace(string1, string2)

6. Using the extend() method, you can add the elements of string2 to the end of string1: 
    string1.extend(string2)"
Create a dockerfile to deploy a python app.,"FROM python:3.7-alpine

WORKDIR /app

# Copy and install dependencies
COPY requirements.txt .
RUN pip install -r requirements.txt

# Copy application source
COPY src ./src

# Set environment variables
ENV DJANGO_SETTINGS_MODULE=app.settings

EXPOSE 8000

# Run server
ENTRYPOINT [""python"", ""src/manage.py""]
CMD [""runserver"", ""0.0.0.0:8000""]"
"Create a python program to return a new list with each item multiplied by 2 in an existing list.[1, 2, 3, 4, 5]","def mult_by_two(nums):
    """"""
    Returns a new list with each item multiplied by 2 in an existing list
    :param nums: a list of numbers
    :return: a list of numbers with each item multiplied by 2
    """"""
    new_list = []
    for num in nums:
        new_list.append(num * 2)
    return new_list

if __name__ == '__main__':
    nums = [1, 2, 3, 4, 5]
    print(mult_by_two(nums))"
Suggest a regular expression pattern that identifies 3 consecutive numbers.,The regular expression pattern that identifies 3 consecutive numbers is: \d{3}
How would you use regex to identify a valid ip4 address?,"A valid IPv4 address can be identified using the regular expression pattern: 

^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}$"
Reverse a given string using recursive function in Python.,"def reverse_string(str):
    if len(str) == 0: 
        return str 
    else:
        return reverse_string(str[1:]) + str[0]"
Create an array of 5 random numbers between 1 and 10 and output it to the console.,"let arr = [];
for (let i = 0; i < 5; i++) {
    arr.push(Math.floor(Math.random() * 10 + 1));
}
console.log(arr);"
"Debug and fix the code in the given input.def multiply(x,y)  
{ 
    return x*y 
  
x = 5
y = 4
print multiply(x,y)","def multiply(x,y)  { 
    return x*y 
  
x = 5
y = 4
print(multiply(x,y))"
"You need to add a feature to the existing code in the given input.class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year","class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.mileage = 0

    def getMileage(self):
        return self.mileage"
"Re-write the code in the given input to make it more efficient.def fibonacci(n):
   if n <= 1:
      return n
   else:
      return(fibonacci(n-1) + fibonacci(n-2))","def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
    # First Fibonacci number is 0 
    elif n==0: 
        return 0
    # Second Fibonacci number is 1 
    elif n==1: 
        return 1
    else: 
        a = 0
        b = 1
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Given two strings s1 and s2, write a function to return a new string containing the characters present only in s1.s1 = ""abcdef""
s2 = ""fghijk""","def unique_str(s1, s2):
    res = """"
    for i in s1:
        if i not in s2:
            res += i
    return res"
"Design a function to evaluate an expression represented as a string.expression = ""2.0+2.1""","def evaluate(expression):
  expr = expression.replace("" "","""")
  expr_list = expr.split(""+"")
  result = float(expr_list[0]) + float(expr_list[1])
  return result"
Generate a working Angular program,"import { Component } from '@angular/core';
 
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'Angular Application';
}"
"Implement a function in Python that calculates the Levenshtein Distance of two strings.str1 = ""hackathon""
str2 = ""hack""","def calculate_levenshtein_distance(str1, str2):    
    distances = np.zeros((len(str1)+1, len(str2)+1))
    for i in range(0, len(str1)+1):
        distances[i, 0] = i
    for j in range(0, len(str2)+1):
        distances[0, j] = j
    for i in range(1, len(str1)+1):
        for j in range(1, len(str2)+1):
            if str1[i-1] == str2[j-1]:
                distances[i, j] = distances[i-1, j-1]
            else:
                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1
    return distances[len(str1), len(str2)]"
Create a function in Python that takes two parameters and returns the sum of squares of all numbers between them,"def sum_of_square_range(a, b):
    sum = 0
    for i in range(a, b+1):
        sum += i * i
    return sum"
"Given a list of numbers, design a function in Python to check if all numbers in the list are even","def all_even(lst):
    for num in lst:
        if num % 2 != 0:
            return False
    return True"
Create a dictionary in Python whose keys are strings and values are integers,"my_dict = {
  ""one"": 1,
  ""two"": 2,
  ""three"": 3
}"
Create a program in Python to return the first n elements from an array,"def first_n_elements(array, n):
    return array[:n]"
Print out the prime numbers between 0 to 100.,"for n in range(2, 101): 
    for i in range(2, n): 
        if n % i == 0: 
            break
    else: 
        print(n, end = ' ')"
"Create an algorithm that finds the maximum subarray sum in a given array.[-2, 1, -3, 4, -1, 2, 1, -5, 4]","def max_subarray_sum(arr):
    max_sum = 0
    current_sum = 0
    for i in range(len(arr)):
        current_sum += arr[i]
        if current_sum > max_sum:
            max_sum = current_sum
        if current_sum < 0:
            current_sum = 0
    return max_sum"
Edit the following code to generate a list of the vowels in a given string.,"def get_vowels(str):
    vowels = ['a', 'e', 'i', 'o', 'u']
    res = []
    for letter in str:
        if letter.lower() in vowels:
            res.append(letter)
    return res"
Create a function to classify an array as odd or even length.,"def classify_array_length(arr):
    if len(arr) % 2 == 0:
        return 'even'
    else:
        return 'odd'"
How would you reverse the words order in a given string?,"def reverse_words(string):
    return "" "".join(string.split("" "")[::-1])"
Write a function that takes a positive integer and returns the next number which is divisible by 7.,"def next_mult_of_7(num):
    return num + (7 - num%7)"
"Given a list of numbers, write a Python function to count how many numbers in the list are greater than 10.","def count_greater_than_ten(nums):
    return len([n for n in nums if n > 10])"
"Given a dictionary, write a Python function to print all the key-value pairs in the dictionary.","def print_dict_key_value(dic):
    for key, value in dic.items():
        print(f""{key}: {value}"")"
"Given a string and an integer N, write a Python function to construct the Nth palindromic string.","def construct_palindrome(string, N):
    length = len(string)
    mid = length // 2

    left = string[:mid]
    right = left[::-1]

    if length % 2 == 0:
        left = string[:mid - (N - 1)]
        right = left[::-1]
    else:
        left = string[:mid - N]
        right = string[mid + 1:(mid + 1) + N][::-1]

    return left + string[mid] + right"
How would you print all the key-value pairs of an already existing dictionary?,"def print_dict_key_value(dic):
    for key, value in dic.items():
        print(f""{key}: {value}"")"
How can we delete all the elements of a list in Python?,"def delete_all_elements(lst):
    del lst[:]"
"Write a Python function to convert an array of integers into their respective strings.arr = [1, 2, 3]","def array_int_string(arr):
    """"""Converts an array of integers into strings.""""""
    return [str(num) for num in arr]

array_int_string(arr)  # returns [""1"", ""2"", ""3""]"
"Find the missing number in the following array: [16, 3, 2, 11, 15, 5, 4, 14].",The missing number is 12.
"Using a for loop, create a list of integers that are multiples of 4 from 0 to 50.","multiples_of_four = [n for n in range(0, 51) if n % 4 == 0]"
Compute the surface area of a pyramid with a base area of 10 cm and a height of 7 cm.,The surface area of the pyramid is 24 cm².
Design a basic graphic user interface (GUI) for a calculator.,"import tkinter as tk

root = tk.Tk()

# design the window
root.title(""Calculator"")
root.geometry(""200x250"")

# create the buttons
button1 = tk.Button(root, text=""1"", width=5, height=2)
button1.grid(row=0, column=0, padx=4, pady=4)

button2 = tk.Button(root, text=""2"", width=5, height=2)
button2.grid(row=0, column=1, padx=4, pady=4)

button3 = tk.Button(root, text=""3"", width=5, height=2)
button3.grid(row=0, column=2, padx=4, pady=4)

# create more buttons
# and so on

root.mainloop()"
"Create an array where each element is the maximum of each row in a given matrix.[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def max_elements(matrix):
    max_elements = []
    for row in matrix:
        max_elements.append(max(row))
    return max_elements"
Convert this integer to its corresponding binary representation in 8 bits.32,"def int_to_binary(num):
    return '{0:08b}'.format(num)"
How can you remove all blank spaces from a given string in Python?,"You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. 

For example:

string_with_spaces = ""   Hello  World  "" 
no_spaces = string_with_spaces.replace("" "", """") 
print(no_spaces)  # Output: ""HelloWorld"""
"Write an algorithm for checking if an array is sorted or not.Array = [4, 1, 7, 5]","// This function accepts an array as argument and returns true if array is sorted, else false.
let isSorted = (arr) => { 
 
  // Set the initial status as true 
  let sorted = true; 
  
  // Iterate over the complete array 
  for (let i = 0; i < arr.length - 1; i++) { 

    // Compare adjacent element 
    if (arr[i] > arr[i + 1]) { 

        // Update the status if it is not sorted 
        sorted = false; 
        break; 
    } 
  } 

  // Return the sorted status 
  return sorted; 
} 

// Example array 
let arr = [4, 1, 7, 5];

// Check if the array is sorted
console.log(isSorted(arr)); // Output: false"
Design and implement a function that takes a string as input and returns the reverse string.,"function reverseString(str) {
  let reversedStr = '';
  for (let i = str.length - 1; i >= 0; i--) {
    reversedStr += str[i];
  }
  return reversedStr;
}"
Construct a Numpy array of shape 2x3 containing all 7s.,"arr = np.array([[7, 7, 7],
                [7, 7, 7]])"
"Design an algorithm to get the maximum value from a given array of four elements.[-5, 2, 45, 9]","1. Set a variable, maxValue, and initialize it to the first element in the array.
2. Iterate through the array, comparing each element to maxValue.
3. If the element is bigger than maxValue, replace maxValue with the element.
4. When the loop is finished, save maxValue and return it as the maximum value from the array."
"Create an algorithm to find the second minimum element from a given array of 7 elements.[87, 34, 56, 12, 21, 45, 67]","1. Set a variable, secondMinimum, to the first element of the array.
2. Iterate through the array. 
3. For every element check if it is smaller than secondMinimum, but bigger than the smallest element in the array. 
4. If it is, set secondMinimum to that element. 
5. When the iteration is finished, return secondMinimum."
"Develop a function to merge two lists l1 and l2 into a single list.1. l1 = [3, 4, 5]
2. l2 = [7, 8]","def merge(l1, l2):
    l3 = l1 + l2
    return l3"
Create a function to print all the paths in a binary tree.,"def print_paths(root): 
    path = [] 
    print_paths_util(root, path, 0) 
  
def print_paths_util(root, path, pathLen): 
    if root is None: 
        return
  
    if (len(path) > pathLen):  
        path[pathLen] = root.data
    else: 
        path.append(root.data) 
  
    pathLen = pathLen + 1
  
    if root.left is None and root.right is None: 
        for i in range(pathLen):
            print(path[i],end="" "")
        print() 
    else: 
        print_paths_util(root.left, path, pathLen) 
        print_paths_util(root.right, path, pathLen)"
Write a Python program to create a dictionary with three elements.,"d = { 
    ""one"" : 1, 
    ""two"" : 2, 
    ""three"" : 3
}"
Edit the following code to store 10 numbers in an array.int array[],int array[10];
"Determine the sum of the integers in the following list.list = [2, 4, 6, 8, 10]",sum = 30
Select all words that start with 'a' from the following text.The quick brown fox jumps over the lazy dog.,"The quick brown fox jumps over the lazy dog.

Answer: The,quick, brown, and over."
Write an R function that determines the average value of an integer array.,"average <- function(numbers) {
  sum <- 0
  for (i in numbers) {
    sum <- sum + i
  }
  return(sum/length(numbers))
}"
Write a function in Python to get the IPv6 address of a given domain name.,"import socket

def get_IPv6_address(domain_name):
    """"""
    Function to get the IPv6 address of a given domain name
    """"""

    # get the ip_addres
    ip_address = socket.getaddrinfo(domain_name, 0, socket.AF_INET6)

    # return the ip address
    return ip_address[0][4][0]"
"Write a single line of code to remove an item from a list.my_list = [1, 2, 3, 4]",my_list.remove(4)
What is the maximum value of a byte in a binary system?,"The maximum value of a byte in a binary system is 255. This is because there are 8 bits in a byte, and the maximum value each bit can have is 1, giving a maximum value of 8 ones, or 255 in the denary system."
"Compare two lists to find missing numbers.list1 = [1, 2, 3, 4, 5] 
list2 = [2, 3, 4]","# Create a new set to store the missing numbers
missing_numbers = set(list1).difference(set(list2)) 
  
# Print the missing numbers
print(""Missing numbers:"", *missing_numbers)"
Create a function to return a random letter from a given string.,"import random 
  
def random_letter(string): 
    """""" 
    Function to return a random letter 
    from a given string 
    """"""
  
    # Get the length of the string 
    length = len(string) 
  
    # Get a random index  
    # from 0 to length - 1 
    index = random.randint(0, length - 1) 
  
    # Return the letter at the  
    # randomly generated index 
    return string[index] 
  
# Driver Code 
string = ""Geek""
print(random_letter(string))"
"How to check if an item exists in a list in Python?my_list = [1, 2, 3, 4]","# Check if item exists in list 
if 4 in my_list: 
    print(""Exists"") 
else: 
    print(""Doesn't Exist"")"
Create a class named Animal with a few methods describing different attributes of animals.,"class Animal:
    def __init__(self):
        pass
    
    def is_mammal(self):
        """"""Return True if animal is a mammal, False otherwise""""""
        pass

    def is_reptile(self):
        """"""Return True if animal is a reptile, False otherwise""""""
        pass
    
    def is_amphibian(self):
        """"""Return True if animal is an amphibian, False otherwise""""""
        pass

    def is_bird(self):
        """"""Return True if animal is a bird, False otherwise""""""
        pass"
Write a code to fetch the last ten news headlines from HackerNews using their API.,"""""""
Fetch the last ten news headlines from HackerNews using their API
""""""

import requests

def get_headlines():
    url = ""https://hacker-news.firebaseio.com/v0/topstories.json""
    ids = requests.get(url).json()
    headlines = []
    for id in ids[:10]:
        item = requests.get(f""https://hacker-news.firebaseio.com/v0/item/{id}.json"").json()
        headlines.append(item['title'])
    return headlines

if __name__ == '__main__':
    headlines = get_headlines()
    for headline in headlines:
        print(headline)"
"Write a code to implement quicksort.arr = [6, 1, 8, 4, 9, 5]","""""""
Implement quicksort
""""""

def quicksort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)

if __name__ == '__main__':
    arr = [6, 1, 8, 4, 9, 5]
    result = quicksort(arr)
    print(result)"
"Extract the phone number from given string and output it as an integer.Hi, my number is +1-345--678-9012","""""""
Extract the phone number from given string and output it as an integer
""""""

def extract_phone_number(s):
    s = s.replace('+', '')
    numbers = """"
    for c in s:
        if c.isdigit():
            numbers += c
    return int(numbers)

if __name__ == '__main__':
    s = ""Hi, my number is +1-345--678-9012""
    num = extract_phone_number(s)
    print(num)"
"Write a function that takes two arrays and returns a new array with all the items of the first array followed by all the items of the second array.array1 = [1, 2, 3] 
array2 = [4, 5, 6]","function combineArrays(array1, array2){
  let result = array1.concat(array2);
  return result;
}

let array1 = [1, 2, 3] 
let array2 = [4, 5, 6]
let combinedArray = combineArrays(array1, array2);

console.log(combinedArray) // [1, 2, 3, 4, 5, 6]"
"Interpret the following array of numbers consisting of 6 elements and divide it into 2 columns.[1, 2, 3, 4, 5, 6]","arr = [1, 2, 3, 4, 5, 6]

first_column = arr[:len(arr)//2]
second_column = arr[len(arr)//2:]"
Design a neural network for facial recognition using TensorFlow.,"import tensorflow as tf

model = tf.keras.Sequential([
    # First convolutional layer
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(64, 64, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    # Second convolutional layer
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    # Third convolutional layer
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    # Fourth convolutional layer
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    # Flatten the output
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(2048, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1024, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    # Output decode layer
    tf.keras.layers.Dense(2, activation='softmax')
])"
Describe what is a linked list data structure in 10 words or less.,A linear data structure of linked nodes.
"Classify the term ""function"" as a programming language feature.","Function is a language construct used to define a reusable instruction block, typically with parameters and a return value."
Create a Python program that prints all numbers in the range 1-10.,"for number in range(1, 11):
 print(number)"
Output an array of even numbers from 0 to 20 using a for loop in Python.,"even_nums = []
for num in range(0, 21):
    if num % 2 == 0:
        even_nums.append(num)
print(even_nums)"
"Write a code to insert a new item into a given list at the specified index.[1, 2, 3, 4], 0, 10","def insert_item(lst, index, item):
  lst.insert(index, item)
  return lst"
Write a code to recognize the most likely language of a given text.,"import langdetect

def detect_language(text):
    language = langdetect.detect(text)
    return language"
"Create a program to generate a sequence of integers that starts at k and ends at n in the following format: [k, k+1, ..., n-1, n]","def generate_seq(k, n):
    seq = []
    for i in range(k, n+1):
        seq.append(i)
    return seq"
Formulate a solution to print out each letter of a string individually.,"def print_letters(string):
    for letter in string:
        print(letter)"
Generate a code snippet to clone/copy a dictionary.,"import copy

def clone_dict(dict):
    return copy.deepcopy(dict)"
Suggest a solution to print the prime factorization of a number.,"def prime_factors(num):
    factors = []
    i = 2
    while num > 1:
        if num % i == 0:
            factors.append(i)
            num = num // i
        else:
            i += 1
    return factors"
"Create a program to reverse an array in place, i.e. without creating a copy.","def reverse_in_place(arr):
    n = len(arr)
    for i in range(n//2):
        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]"
"Classify this short programming code into its data structure category.h = [x for x in range(2, 101, 2)]",List comprehension - a data structure that uses a single expression to generate a list of elements.
"Modify the following function to return the maximum value in a list.def max_list(lst):
    max = 0
    for x in lst:
        max = x
    return max","def max_list(lst):
    max = None
    for x in lst:
        if max is None or x > max:
            max = x
    return max"
Write a python script to convert a given number to a string.num = 1234,"def num_to_str(num):
    return str(num)"
"Edit the following code to capture the errors and print them.try:
    num = int(input(""Enter a number: ""))
    print (num)
except:
    pass","try:
    num = int(input(""Enter a number: ""))
    print (num)
except Exception as e:
    print(str(e))"
"Write a code to update the elements of a list inplace.lst = [2, 4, 6, 8]","for i in range(len(lst)):
    lst[i] *= 2"
Delete all the trailing zeros of a given float number.num = 18.1000,print(str(num).rstrip('0').rstrip('.'))
"Using the function above, complete the following statement to compute the sum from 2 to 6.","sum_value = sum(2, 6)"
Describe the tasks and input of a program to sort a list of integers,The task of the program is to sort a list of integers. The input is a list of integers which needs to be sorted in ascending order. The output is another list with the same elements but sorted in ascending order.
"Generate a list of all words in the input string longer than 4 characters.my_string = ""This is a sentence""",word_list = [word for word in my_string.split() if len(word)>4]
Import the numpy library into the program,import numpy as np
Find the value of $x^2 + 4x + 5$ when $x = 3$,"x_val = 3
eq_val = x_val**2 + 4*x_val + 5
print(eq_val) # Output: 32"
Create a list of integers from 1 to n in steps of 10n = 50,"list1 = []
for i in range(1, n+1, 10):
    list1.append(i)"
Write a function in Python to convert miles to kilometers.7,"def miles_to_km(miles):
 return miles * 1.609

converted_km = miles_to_km(7)
print(converted_km)"
Create a list in Python of all integers from -5 to 10.,"list_nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Sort this numeric array in descending orderArray: [3, 7 ,1, 5, 9]","let sortedArray = [9, 7, 5, 3, 1];"
"Retrieve the elements from the second index to the fourth index in the given arrayArray: [10, 20, 50, 70, 90, 100]","let retrievedElements = [50, 70, 90];"
Construct a for-loop statement to display the numbers counting from 10 to 15,"for (let i = 10; i <= 15; i++) {
  console.log(i);
}"
Generate a regex to check if a given string contains any vowels,let regex = /[aeiou]/i;
"Construct a switch statement to return either ""Nick"" or ""Jack"" base on the value of the inputInput: ""Nick""","switch (input) {
  case ""Nick"":
    return ""Nick"";
    break;

  case ""Jack"":
    return ""Jack"";
    break;
    
  default:
    return ""Invalid Input"";
}"
Design a class to represent a Circle with a radius,"class Circle {
  constructor(radius) { 
    this.radius = radius; 
  }

  getArea() { 
    return Math.PI * this.radius * this.radius; 
  }

  getCircumference() { 
    return 2 * Math.PI * this.radius; 
  }
}"
Produce a Python script that generates a random string of length 10,"import random
import string

def get_random_string(stringLength=10):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

randomString = get_random_string()
print(randomString) # outputs a random string of length 10"
"Design an if-else statement to print either ""Passed"" or ""Failed"" depending on the value of the given numberNumber: 80","let num = 80;

if (num >= 70) {
  console.log(""Passed"");
} else {
  console.log(""Failed"");
}"
"Convert the following code to Python and make it object-oriented.function celsius_to_fahrenheit(celsius) { 
  let fahrenheit = (celsius * 9/5) + 32
  return fahrenheit 
}","class TemperatureConverter:
    def celsius_to_fahrenheit(self, celsius):
        fahrenheit = (celsius * 9/5) + 32
        return fahrenheit"
Create a class 'Stack' that has a method 'max_stack' that returns the maximum element in the stack.,"class Stack():
    def __init__(self): 
        self.stack = []

    # Inserts an element in the stack
    def push(self, item):
        self.stack.append(item)
 
    # Return the maximum element in a stack
    def max_stack(self): 
        max_elem = self.stack[0] 
        for i in range(1,len(self.stack)): 
            if self.stack[i]>max_elem:
                    max_elem = self.stack[i] 
        return max_elem"
"Create a class ""MyDict"" that inherits from the Python built-in ""dict"" class.","class MyDict(dict):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def __getitem__(self, key): 
        if key in self:
            return super().__getitem__(key)
        else: 
            return None"
Create a function to print out the Fibonacci numbers starting from 0 to the nth number.n = 7,"def print_fibonacci(n):
    a = 0
    b = 1
    for i in range(n):
        print(a, end=' ')
        temp = a 
        a = b 
        b = temp + b

# The output of the function would be
# 0 1 1 2 3 5 8"
Generate a matrix with 5 rows and 7 columns containing random numbers in it.,"import numpy as np

# Create a matrix with 5 rows and 7 columns
matrix = np.random.rand(5,7)"
"Slice the following array to get the last two numbers.[2, 3, 9, 12, 13, 21]","[13, 21]"
"Write a query to retrieve all the customers whose customer ID starts with a ""C"".","SELECT * FROM Customers
WHERE customerId LIKE 'C%'"
"Given a string s, write a Python function that returns the longest substring of the given string that is a palindrome.s = ""abcbabcd""","def longest_palindrome_substring(s):
 n = len(s)
 if n == 0:
 return """"
 dp = [[False for _ in range(n)] for _ in range(n)]
 start = 0
 max_length = 1
 # All substrings of length 1 are palindrome
 for i in range(n):
  dp[i][i] = True
 # Check for substring of length 2. 
 for i in range(n-1):
  if s[i] == s[i+1]:
   dp[i][i+1] = True
   start = i
   max_length = 2
 # Check for lengths greater than 2
 # k is length of substring
 for k in range(3, n+1):
  # Fix the starting index 
  for i in range(n-k+1):
   # Get the ending index of substring from
   # starting index i and length k
   j = i + k - 1
   # checking for sub-string from ith index to
   # jth index iff str[i+1] to str[j-1] is a
   # palindrome
   if dp[i+1][j-1] and s[i] == s[j]:
    dp[i][j] = True
    if k > max_length:
     start = i
     max_length = k
 # return the longest palindromic substring
 return s[start:start+max_length]"
Create a simple chatbot using Python.,"print(""Hello, I am your chatbot!"")

while True:
 user_input = input(""What would you like to talk about?\n"")

 if user_input == ""bye"":
  print(""Bye! It was nice talking to you."")
  break

 if user_input == ""weather"":
  print(""It is sunny outside!"")
 else:
  print(""I am sorry, I don't understand your query."")"
Implement a function to check for balanced parentheses in a given string.String: (((())())),"def is_balanced(s): 
    stack = [] 
    for letter in s: 
        if letter in [""("", ""["", ""{""]: 
            stack.append(letter) 
        else: 
            if len(stack) == 0: 
                return False
            top = stack.pop(-1) 
            if top == '(': 
                if letter == ')':             
                    continue
                else: 
                    return False
            elif top == '[': 
                if letter == ']': 
                    continue
                else: 
                    return False
            elif top == '{': 
                if letter == '}': 
                    continue
                else: 
                    return False
    if len(stack) == 0: 
        return True 
    return False 

# Driver code
print(is_balanced('(((())()))')) # True
print(is_balanced('(((()))')) # False"
Write a code snippet to find the most frequent word in a given sentence.Sentence: The quick brown fox ate the lazy dog,"def most_frequent_word(str): 
    split_str = str.split() 

    frequencies = {} 
    for word in split_str: 
        if word in frequencies: 
            frequencies[word] += 1
        else: 
            frequencies[word] = 1
  
    most_frequent_word = """" 
    highest_freq = 0
    for key, value in frequencies.items(): 
        if value > highest_freq: 
            highest_freq = value 
            most_frequent_word = key 
  
    return most_frequent_word 

# Driver code   
print(most_frequent_word('The quick brown fox ate the lazy dog'))"
Write a code to find the sum of the multiples of 3 and 5 up to a given number.Number: 15,"def sum_of_multiples(num): 
    sum = 0 
    for i in range(num):
            if i % 3 == 0: 
                sum += i
            elif i % 5 == 0: 
                sum += i
    return sum

# Driver code 
sum = sum_of_multiples(15)
print(""Sum of multiples of 3 and 5 ="",sum)"
"Create a code to check whether two words are nearly identical.Word A: bte
Word B: tree","def is_nearly_identical(str1, str2): 
    edit_dist = 0
    m = len(str1)
    n = len(str2)

    # Create matrix to store results of  subproblems 
    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] 
  
    for i in range(m + 1): 
        for j in range(n + 1):  
            if i == 0: 
                dp[i][j] = j   
            elif j == 0: 
                dp[i][j] = i    
            elif str1[i - 1] == str2[j - 1]: 
                dp[i][j] = dp[i - 1][j - 1] 
            else: 
                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert 
                                   dp[i - 1][j],      # Remove 
                                   dp[i - 1][j - 1])  # Replace 

    edit_dist = dp[m][n]

    if edit_dist == 1: 
        return True
    else:
        return False

# Driver code
if is_nearly_identical(""bte"",""tree""): 
    print(""Words are nearly identical"") 
else: 
    print(""Words are not nearly identical"")"
"Convert the following range to list elements in Python.range(2, 8)","list(range(2, 8)) # [2, 3, 4, 5, 6, 7]"
"Complete the following code with a condition so it prints the average of the array elements.arr = [4, 15, 12, 3, 8]
total = 0
for num in arr:
  # Your code here

print(total / len(arr))","arr = [4, 15, 12, 3, 8]
total = 0
for num in arr:
  total += num

print(total / len(arr))"
Reverse the following string without using in-built functions in Python.Hello World,dlroW olleH
"Complete the following code so it swaps two given elements in the list.list = [1, 3, 7, 4, 2]
def swap(list, i, j):
    # Your code here","list = [1, 3, 7, 4, 2]
def swap(list, i, j):
    # Swap the elements
    list[i], list[j] = list[j], list[i]"
"Write a Python script to check for syntactic correctness of an algorithm.Algorithm = ""1. Read input
2. Initialize variables
3. Process input
4. Output result""","def is_algorithm_syntactically_correct(algorithm):
    algorithm = algorithm.replace('\n', ' ').replace('\t ', ' ').lower()
    
    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']
    for word in required_words:
        if word not in algorithm:
            return False
    return True"
"Given a string s, reverse its characters and return the resulting string.s = ""apple""","def reverse_string(s):
  # initialize an empty string
  reversed_string = """"

  # loop through the string and concatenate the characters in reverse order
  for i in range(len(s) - 1, -1, -1):
    reversed_string += s[i]
  return reversed_string
  
print(reverse_string(""apple"")) # elppa"
"Given a list of numbers, remove all negative numbers and sort the remaining numbers in ascending order.numbers = [-5, -1, 2, 0, 4, 5, 9]","def remove_negatives_and_sort(numbers):
    # filter out negative numbers
    non_negatives = list(filter(lambda x: x >= 0, numbers))
    # sort the non-negative numbers
    non_negatives.sort()
    return non_negatives
  
print(remove_negatives_and_sort([-5, -1, 2, 0, 4, 5, 9])) # [0, 2, 4, 5, 9]"
"Write a function that takes a string and returns the letter which appears most frequently.s = ""apple""","def most_frequent_letter(s):
    # get the letter frequency
    letter_frequency = {}
    for ch in s:
        if ch in letter_frequency:
            letter_frequency[ch] += 1
        else:
            letter_frequency[ch] = 1

    # find the letter with the max frequency
    max_frequency = 0
    max_frequency_letter = ''
    for letter, frequency in letter_frequency.items():
        if frequency > max_frequency:
            max_frequency = frequency
            max_frequency_letter = letter

    return max_frequency_letter

print(most_frequent_letter(""apple"")) # 'p'"
How to find the most common integer in a list?,The most common integer in a list can be found using the collections.Counter module. The Counter class creates a dictionary with the elements in the list as keys and the number of occurrences as values. The most_common() method can then be used to find the element with the highest number of occurrences.
"Construct a program that takes integers x and y and swaps their values.x = 5
y = 10","# get two integers from the user
x = int(input(""Enter value for x: ""))
y = int(input(""Enter value for y: ""))

# swap
tmp = x
x = y
y = tmp

# print the swapped values
print(""x ="", x, ""and y ="", y)"
"Using Python, write a code to generate the Fibonacci series up to the given number.num = 10","def generateFibonacciSeries(num): 
    series = [0, 1] 
    for i in range(2, num): 
        series.append(series[i - 2] + series[i - 1]) 
    return series

print(generateFibonacciSeries(num)) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Code an assembly language program to calculate the sum of series 1 + 3 + 5 +.....+ (2*n-1).n = 6,".MODEL SMALL 
.DATA 
        N DB ? 
        I DB ? 
        S DB ? 
.CODE 
    MOV AX,@DATA
    MOV DS,AX
    MOV DX,N
    MOV AL,2
    MUL DX
    SUB AL,1
    MOV N,AL
    MOV I,N
    MOV S,0
AGAIN:
    MOV AX,S
    ADD AX,I
    MOV S,AX
    DEC I
    CMP I,0
    JNZ AGAIN
    MOV DX,S
    MOV AH,4CH
    INT 21H 
END"
"Create a dictionary containing the frequencies for each character in the given string.string = ""hello world""","def count_characters(string):
    freq_chars = {}
    for char in string:
        if char in freq_chars:
            freq_chars[char] += 1
        else:
            freq_chars[char] = 1
    return freq_chars"
In what language was the Google search engine originally written?,The Google search engine was originally written in C++.
How is a binary search tree different from a binary tree?,"A binary search tree is a type of binary tree where the value of each node is greater than the values in its left subtree, and less than the values in its right subtree. A binary tree on the other hand, can have nodes with any value, and the relationship between the nodes is not necessarily sorted."
"Define a function which takes two strings as arguments and returns a list containing all characters that appear in either string.string_1 = 'Apple'
string_2 = 'Banana'","def common_chars(string_1, string_2):
    char_list = [] 
    for char in string_1:
        if char in string_2 and char not in char_list:
            char_list.append(char)
    for char in string_2:
        if char in string_1 and char not in char_list:
            char_list.append(char)
    return char_list"
"You are given two strings, find the minimum number of edits required to make them equal.","def edit_distance(str1, str2):
    edits = 0
    m = len(str1)
    n = len(str2)
    if m < n:
        for i in range(m, n):
            edits += 1
        for i in range(m):
            if str1[i] != str2[i]:
                edits += 1
    else:
        for i in range(n, m):
            edits += 1
        for i in range(n):
            if str1[i] != str2[i]:
                edits += 1
    return edits"
Create a program to list all the prime numbers between two numbers,"def list_primes(start, end):
    prime_list = [2]
    for num in range(start, end + 1):
        if all(num % i != 0 for i in range(2, num)):
            prime_list.append(num)

    return prime_list"
Write a regex pattern to extract all words containing the letter 'a' from a given string,"import re

def extract_words(string):
    pattern = r'\b\w*a\w*\b'
    words = re.findall(pattern, string)
    return words"
Describe the runtime complexity of segment tree.,"Segment tree is a data structure used to efficiently query certain operations regarding a range of values. A segment tree is a binary tree, with each of its internal nodes containing a range and its leaf nodes reresenting the elements in the given range. The runtime complexity of a segment tree is O(logN), where N is the number of elements in the range. This makes it an efficient data structure for range queries. Additionally, the tree can be updated in logarithmic time."
Create an object to hold the student's grade.Grade: A+,"let studentGrade = {
 grade: 'A+'
};"
Generate an array containing numbers between 1 and 100 that are divisible by both 5 and 7.,"let result = [];
for(let i = 1; i <= 100; i++){
 if (i % 5 == 0 && i % 7 == 0) result.push(i);
};
console.log(result);"
Design a data structure to track the frequency of words in a given text.,A HashMap can be used to track the frequency of words in a given text. The keys of the map would represent the words in the text and the associated values would represent the frequency of that word. The time complexity for retrieving the frequency of a given word in hashmap will be O(1).
Use the list comprehension method to print the cube of numbers from 1 to 10,"cubes = [x**3 for x in range(1, 11)]
print(cubes)"
Write a predicate function to check whether the given string is palindrome.,"function isPalindrome(str) {
  str = str.toLowerCase();
  for (let i = 0; i < str.length / 2; i++) {
    if (str[i] !== str[str.length - 1 - i]) return false;
  }
  return true;
}"
"Write a Python function that takes as input an array of numbers and returns the maximum positive number.arr = [3, -2, -1, 7, 12]","def find_max_positive(arr):
    max_num = 0
    for num in arr:
        if num > 0 and num > max_num:
            max_num = num
    return max_num"
"Find the median of the given array [3,7,2,1,9].","def find_median(arr):
    arr.sort()
    if len(arr) % 2 == 0: 
        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 
    else: 
        median = arr[len(arr)//2] 
    return median

median = find_median([3,7,2,1,9])
print(median) # Prints 3.5"
"Write a code snippet to produce an XML result for a given input data structure.key1: value1, key2: { key2.1: value2.1, key2.2: value2.2 }","import xml.etree.ElementTree as ET

def xml_builder(data):
    root = ET.Element('root')
    for key, value in data.items():
        child = ET.SubElement(root, key)
        if type(value) is dict:
            for k, v in value.items():
                sub_child = ET.SubElement(child, k)
                sub_child.text = str(v)
        else:
            child.text = str(value)
    return ET.tostring(root, encoding='utf8').decode('utf8')

data = {""key1"": ""value1"", ""key2"": {""key2.1"": ""value2.1"", ""key2.2"": ""value2.2""}}
print(xml_builder(data))"
"Find the maximum value of an array without using any built-in functions[7, 9, -2, 15, 3]","def find_max(arr):
    max = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > max:
            max = arr[i]
    return max

arr = [7, 9, -2, 15, 3]
print(find_max(arr))"
Develop an algorithm for reversing a string without using any reverse string methods.Hello World,"def reverseString(str):
    reversed_str = """"
    for i in range(len(str)-1, -1, -1):
        reversed_str += str[i]
    return reversed_str

print(reverseString(""Hello World""))"
Create a regex expression that matches all valid IP addresses.,^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
"Answer what is the longest palindrome in a given string.""Run, spot, run. He ran up red hills""","def longestPalindrome(st): 
    palindromes = []
    for i in range(len(st)): 
        for j in range(i, len(st)): 
            curr = st[i:j+1] 
            rev = curr[::-1] 
            if (curr == rev): 
                palindromes.append(curr) 
    res = max(palindromes, key = len) 
        
    return res

print(longestPalindrome(""Run, spot, run. He ran up red hills"")) 

# output
run"
"Create a filter to remove all integers from an array of mixed data types.[""Hello"", 3, 5.4, ""World"", 6]","def removeInts(arr): 
    return [x for x in arr if type(x) is not int] 

print(removeInts([""Hello"", 3, 5.4, ""World"", 6])) 

# output
['Hello', 5.4, 'World']"
"Construct a code to get the last index of a given substring in a string.""hi hi hello"", ""hi""","def lastIndexOf(st, substr): 
    if substr in st: 
        start = -1 
        while True: 
            pos = st.find(substr, start + 1) 
            if pos == -1: 
                break 
            start = pos 
            
        return start 
    else: 
        return -1 
    
print(lastIndexOf(""hi hi hello"", ""hi"")) 

# output 
3"
FreeCodeCamp is a great platform for coding practice. Give an example of a basic algorithm you can practice on FreeCodeCamp.,"A basic algorithm you can practice on FreeCodeCamp is Bubble Sort. Bubble Sort is an algorithm that sorts an array of elements by repeatedly swapping matched pairs of elements if they appear in the wrong order. It continues until no further swaps are needed, at which point the array is considered sorted."
Convert this floating-point number to an 8-bit binary number.123.46875,123.46875 in 8-bit binary is 1111011.01110000
"Create a new array using the given array and a given number.The given array is [2, 3, 4] and the given number is 5.","The new array is [2, 3, 4, 5]."
"Create a loop in Python with the given requirements.Print out the numbers from 1 to 10, inclusive","for x in range(1, 11):
  print(x)"
"For the given matrix, calculate the determinant.1 2 3
4 5 6
7 8 9",0
Describe the concept of machine learning in your own words.,"Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience."
Generate multiple Fibonacci numbers in Python.,"def Fibonacci(n): 
  a = 0
  b = 1
  if n < 0:
    print(""Incorrect input"") 
  elif n == 0:
    return a
  elif n == 1:
    return b
  else:
    for i in range(2,n):
      c = a + b
      a = b
      b = c
  return b

for i in range(10):
  print(Fibonacci(i))"
How to identify an email address from a given string using Regular Expressions?,"import re

string = ""My Email address is example@gmail.com""

expression = r'[\w\.-]+@[\w\.-]+'

address = re.findall(expression, string)

print(""Email address is: "", address)"
"How would you reverse this array?[3, 4, 7, 9, 10]","[10, 9, 7, 4, 3]"
Write a Python function that prints the square of a given number.,"def square(num):
  return num ** 2"
"Given a text string, write a function in Python to identify all the words that have more than 3 characters.text = ""Python is an easy to learn language""","def longer_words(text):
 words = text.split()
 longer = [word for word in words if len(word) > 3]
 return longer"
"Create a function to update the existing item of a dictionary with a new value.mydict = {
  ""name"": ""John"",
  ""age"": 25
}","function updateDict(d, key, value) { 
  d[key] = value; 
  return d;
}"
"Given two arrays of integers, write a Python function which is able to identify common elements.arr1 = [1,2,3,4,5]
arr2 = [3,4,5,6,7]","def common_elements(arr1, arr2):
  return [x for x in arr1 if x in arr2]"
"Design a class named ""Rectangle"" that prints out the length, width, area and perimeter of a given rectangle.","""""""
Design a class named 'Rectangle' that prints out the length, width, area and perimeter of a given rectangle
""""""

class Rectangle:
    def __init__(self, l, w):
        self.length = l
        self.width = w
        
    def area(self):
        return self.length * self.width
    
    def perimeter(self):
        return 2 * (self.length + self.width)
    
    def __str__(self):
        return 'Rectangle with length {0} and width {1}'.format(self.length, self.width)"
"Construct a while loop that continuously adds all elements of a list until reaching a certain numberlist=[1, 2, 3, 4, 5] 
sum_num=10","sum_temp = 0
i = 0
while sum_temp < sum_num:
    sum_temp += list[i]
    i += 1"
"Write a function which prints out odd numbers from a given list[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","def print_odd_num(my_list):
    for num in my_list:
        if num % 2 != 0:
            print(num)"
Make a code that takes two arguments and returns a sum of the two,"def add_two_nums(a, b):
    return a + b"
"Construct a loop that checks whether each item in a list is greater than 10my_list = [5, 11, 8, 15]","for x in my_list:
    if x > 10:
        print(""{0} is greater than 10"".format(x))"
"Using list comprehension, create a new list that contains values less than 5my_list = [7, 2, 5, 8, 4, 9, 6]",new_list = [x for x in my_list if x < 5]
"Construct a code that takes in an object and checks whether each property includes a certain valuemy_dict = {
    'name': 'John',
    'age': 23,
    'pet_name': 'Maggy'
}
value = 'John'","def check_value(obj, value):
    for key, val in obj.items():
        if val == value:
            return True
    return False"
"Edit the code to construct a bubble sort algorithm.arr = [5, 2, 1, 7, 8]","def bubble_sort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n):
        # Last i elements are already in place
        for j in range(0, n-i-1):
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]"
Create a loop which prints out characters from a given inputa = 'Hello World!',"for char in a:
    print(char, end="""")"
Design a function which can check if a given year is a leap year,"def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False"
"Create a program to find the maximum and minimum from a given listmy_list = [5, 7, 6, 3]","def max_min(my_list):
    max_val = my_list[0]
    min_val = my_list[0]

    for val in my_list:
        if val > max_val:
            max_val = val
        
        if val < min_val:
            min_val = val
    
    return (max_val, min_val)"
Construct a class which instantiates objects with a given name and age,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Write a recursive method to calculate the Fibonacci number of a given index,"def fibonacci(n): 
  # base case 
  if n <= 1: 
    return n 
  # recursive case 
  else:
    return(fibonacci(n-1) + fibonacci(n-2))"
"Create an XML element to store the customer information, such as name and address.","<customer>
    <name>John Doe</name>
    <address>123 Main Street, Anytown, USA 10101</address>
</customer>"
Construct a function that converts a given temperature from Celsius to Fahrenheit.Celsius Temperature: 37.5,"def ctof(celsius): 
  fahrenheit = (celsius * 9/5) + 32
  return fahrenheit 

ctof(37.5) // returns 99.5"
Analyze the given sentence and label each word according to its part of speech.Sentence: She was embarrassed to open the door.,"Pronoun: She 
Verb: was 
Adjective: embarrassed 
Verb: to open 
Determiner: the 
Noun: door"
"Add a new column to a Pandas DataFrame called ""age_group"" that contains categorical values ""young"",""adult"",""elderly"".name	age
John	25
Mark	45
Isabelle	75","import pandas as pd

# Read in the data
df = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'], 
                   'age': [25, 45, 75]})

# Add a new column ""age_group""
def categorize_age(age):
    if age < 18:
        return ""young""
    elif 18 <= age < 65:
        return ""adult""
    else:
        return ""elderly""

df['age_group'] = df['age'].apply(categorize_age)"
"Calculate the maximum and minimum values in the column ""seats"".job  | seats
-----+--------
A    | 3
B    | 12
C    | 2","min_seats = 2
max_seats = 12"
"Using string functions, capitalize each word in the given sentence.sentence = ""python is a programming language""","sentence = ""python is a programming language""

# split the sentence into individual words
words = sentence.split("" "")

# capitalize each word in the sentence
capitalized_words = [word.capitalize() for word in words]

# join the words back together
capitalized_sentence = "" "".join(capitalized_words)

print(capitalized_sentence) # prints ""Python Is A Programming Language"""
Generate a list containing the squares of the first ten odd numbers.,"# Generate a list containing the squares of the first ten odd numbers
list_of_squares = [x**2 for x in range(1, 21, 2)]

print(list_of_squares) # prints [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]"
"Create a function that takes two arguments, ""start"" and ""end"", and returns a list of all the prime numbers between the two.","def get_prime_numbers(start, end):
    """"""
    Function to return a list of all the prime numbers between start and end
    """"""
    prime_numbers = []
    for num in range(start, end + 1):
        if num > 1:
            is_prime = True
            for j in range(2, int(num/2) + 1):
                if num % j == 0:
                    is_prime = False
                    break
            if is_prime:
                prime_numbers.append(num)
    return prime_numbers
    
print(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]"
"Given the following matrix, delete the row or column that contains the least number of elements.[[0, 1, 2], 
 [3, 4, 5], 
 [6, 7, 8]]","import numpy as np

# Create the matrix
matrix = np.array([[0, 1, 2], 
                   [3, 4, 5], 
                   [6, 7, 8]])

# Get the lengths of each row
row_lengths = [len(row) for row in matrix]

# Delete the row with the minimum length and print the result
del matrix[row_lengths.index(min(row_lengths))]
print(matrix) # prints [[0 1 2] 
                  #        [3 4 5] 
                  #        [6 7 8]]"
"Sort the following list using a bubble sort algorithm.[36, 71, 16, 21, 73]","# Bubble sort function
def bubble_sort(my_list):
    # Do n times
    for i in range(0, len(my_list) - 1):
        # Do n - i - 1 times
        for j in range(0, len(my_list) - 1 - i):
            if my_list[j] > my_list[j+1]:
                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]
    return my_list

# Test data
my_list = [36, 71, 16, 21, 73]

# Call the function
sorted_list = bubble_sort(my_list)

print(sorted_list) # prints [16, 21, 36, 71, 73]"
"Write a code in Python to count the number of words in the sentence ""Hello World"".","# Count the number of words in the sentence
sentence = ""Hello World""

num_words = len(sentence.split())

print(num_words) # prints 2"
Create a loop that prints 'hello' 10 times when ran.,"for i in range(10):
    print('hello')"
Define a function called my_function that will take a string as an argument and returns the string with all the vowels removed.,"def my_function(string):
    vowels = 'aeiouAEIOU'
    newString = ''
    for char in string:
       if char not in vowels:
          newString += char
    return newString"
"Find the sum of two integers x and y.x=2 
y=3",5
Calculate the least common denominator of 6 and 8.,24
Create a while loop that prints all the letters of the alphabet.,"a = 'a'
while a <= 'z':
    print(a)
    a = chr(ord(a)+1)"
"Given a set of numbers, find the largest number from the set.[2, 9, 10, 11, 5]",11
"Construct a regular expression that matches all strings that contain ""hello"" or ""world"".",/\b(hello|world)\b/
Use Python to generate a random string of length 8 using lowercase alphabetic characters.,"import random

def random_string():
  chars = 'abcdefghijklmnopqrstuvwxyz'
  return ''.join(random.choice(chars) for i in range(8))

random_string() // 'fldmgnkd'"
"Using the comment as a guide, fill in the gaps in the following code.input_list = [1, 2, 3, 4]

def transform_list (input_list):
    '''Transform the list by adding 5 to each element'''
    # TODO","input_list = [1, 2, 3, 4]

def transform_list (input_list):
    '''Transform the list by adding 5 to each element'''
    transformed_list = [x+5 for x in input_list]
    return transformed_list"
Why is a dictionary in Python often called an associative array?,"A dictionary in Python is often called an associative array because of the manner in which it stores data. The structure of a dictionary maps keys (strings, numbers, etc.) to their associated values in an associative manner, as in a mathematical mapping or function. This makes dictionaries an ideal choice for storing key-value pairs or to associate an item of data with a particular value."
Write a code snippet to implement bubble sorting in an array of 10 numbers.,"for (int i = 0; i < 10; i++) {
  for (int j = 0; j < 10-i-1; j++) {
    if (arr[j] > arr[j+1]) {
      int temp = arr[j];
      arr[j] = arr[j+1];
      arr[j+1] = temp;
    }
  }
}"
Write a code snippet for a function that deletes a specific element from an array.,"def delete_element(arr, element):
    count = 0
    for i in range(len(arr)):
        if arr[i] == element:
            while count < len(arr)-1:
                arr[i] = arr[i+1]
                i+=1
            count+=1
    arr.pop()
    return arr"
"Compare the two inputed strings to know whether the first string is a substring of the second one or not.String 1: Ayda
String 2: Maya","No, ""Ayda"" is not a substring of ""Maya""."
"Print the elements at odd indices in a given array.An array containing [2, 5, 9, 8, 6]","The elements at odd indices are 5, 8."
"Given two equations, predict the range of the output variable.Equation 1: Y = X + 2
Equation 2: Y = 2X","The range of the output variable is [-2, ∞)."
Import a module in Python and store it in a variable named “import_module”.,"import_module = importlib.import_module(""<module name>"")"
Parse an XML string and print the tag names.<xml><title>HelloWorld!</title><body>This is my first XML document.</body></xml>,The tag names are title and body.
"Determine the sum of the first n elements in a given array.An array containing [2, 4, 6, 8, 10]",The sum of the first 5 elements in the given array is 30.
Write a code to generate a random password with a given length.,"import random
import string

def generate_password(length):
    chars = string.ascii_letters + string.digits + '!@#$%^&*()'
    random.seed = (random.SystemRandom().random())
    return ''.join(random.choice(chars) for i in range(length))

print(generate_password(10))  # Output is an alphanumeric string of length 10"
How would you use a for loop to print the index and item of a list?,"let list = [""item1"", ""item2"", ""item3"", ""item4""];
for (let i = 0; i < list.length; i++) {
  console.log(i, list[i]);
}
// Output:
// 0 item1
// 1 item2
// 2 item3
// 3 item4"
Write a Python function to print a string of given length n filled with asterisks.,"def print_asterisks(n):
    for i in range(n):
        print(""*"", end="""")
    print("""")"
How would you use an if-else statement to test whether a number is even or odd?,"def test_even_odd(num):
  if num % 2 == 0:
    print(""The number is even"")
  else:
    print(""The number is odd"")"
"Create a Python class for a product that includes data fields for name, description, and price.","class Product:
  def __init__(self, name, description, price):
    self.name = name
    self.description = description
    self.price = price

  def __str__(self):
    return f""Name: {self.name}\nDescription: {self.description}\nPrice: {self.price}"""
"Using a try-except statement, write a Python code to handle a ValueError which arises if the input is not a number.","try:
  input_num = int(input(""Enter a number: ""))
except ValueError:
  print(""Please enter a valid number"")"
How would you use a while loop to sum up numbers from 0 to n?,"let n = 10;
let sum = 0;
let i = 0;
while (i <= n) {
  sum += i;
  i++;
}
console.log(sum); // prints 55"
"Using a for-in loop, print out the keys and values of a given dictionary.mydict = {
  ""name"": ""John"",
  ""age"": 30,
  ""city"": ""New York""
}","for key,value in mydict.items():
  print(""Key: "" + key + ""; Value: "" + str(value))

# Output:
# Key: name; Value: John
# Key: age; Value: 30
# Key: city; Value: New York"
How would you use a switch statement to print the corresponding day to a number?,"switch (n) {
  case 1:
    console.log(""Monday"");
    break;
  case 2:
    console.log(""Tuesday"");
    break;
  case 3:
    console.log(""Wednesday"");
    break;
  case 4:
    console.log(""Thursday"");
    break;
  case 5:
    console.log(""Friday"");
    break;
  case 6:
    console.log(""Saturday"");
    break;
  case 7:
    console.log(""Sunday"");
    break;
  default:
    console.log(""Invalid input"");
    break;
}"
"Write a code to split a list of numbers into two sets with equal sum[1, 2, 3, 4, 5, 6, 7]","def split_list(list):
    start = 0
    end = len(list) - 1

    left_sum = 0
    right_sum = sum(list[start:end+1])

    while start < end:
        right_sum -= list[end]
        if left_sum == right_sum:
            break
        left_sum += list[start]
        start += 1

    if left_sum == right_sum:
        return list[:start], list[start:]
    else:
        return None

if __name__ == '__main__':
    arr = [1, 2, 3, 4, 5, 6, 7]
    left, right = split_list(arr)
    print(""left set:"", left)  # prints [1, 2, 3, 4]
    print(""right set:"", right)  # prints [5, 6, 7]"
Convert a given number from degrees to radians.90,"def deg_to_rad(deg):
    return (deg * 3.14)/180
    
if __name__ == '__main__':
    deg = 90
    rad = deg_to_rad(deg)
    print(rad)  # prints 1.571"
"Write code for a substring searchString: ""Hello World""
Substring: ""llo""","def search_substring(string, substr):
    if substr in string:
        return True
    else:
        return False

if __name__ == '__main__':
    string = ""Hello World""
    substr = ""llo""
    result = search_substring(string, substr)
    print(result)  # prints True"
"Create a program to find the maximum length common subsequence of two given strings.String1: ""abcdgf"" 
String2: ""abcdhfe""","def find_max_subseq(str1, str2):
    n1 = len(str1)
    n2 = len(str2)
    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]

    for i in range(1, n1 + 1):
        for j in range(1, n2 + 1):
            if(str1[i - 1] == str2[j - 1]):
                dp[i][j] = dp[i - 1][j - 1] + 1 
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[n1][n2]

if __name__ == '__main__':
    str1 = ""abcdgf""
    str2 = ""abcdhfe""
    result = find_max_subseq(str1, str2)
    print(result)  # prints 5"
Write a code for creating a Fibonacci sequencen = 10,"def fibonacci_seq(n):
    seq = [0, 1]
    for i in range(2, n):
        seq.append(seq[i-1] + seq[i-2])
    return seq

if __name__ == '__main__':
    n = 10
    result = fibonacci_seq(n)
    print(result)  # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
Calculate the area of the circle with the radius of 4.,The area of the circle with the radius of 4 is 50.26548245743669.
"Write all the possible combinations for the strings, ""ABC"" and ""XYZ"".","ABCXYZ, ABCXZY, ABYXZC, ABYZXC, ACBXYZ, ACBXZY, ACYXZB, ACYZXB, AXBZYC, AXBYCZ, AXYBCZ, AXYZBC, XABCYZ, XABCZY, XAYBZC, XAYCZB, XBACYZ, XBACZY, XBYACZ, XBYZAC, XYABCZ, XYAZBC."
"Read the two given numbers and print the larger one.Number 1: 20
Number 2: 10",
Write a Python script that converts the number 122 to binary.,"def dec_to_bin(n):
 binary_num = bin(n) 
 print(binary_num[2:])
dec_to_bin(122)"
"Create a Python dictionary that includes the keys ""name"", ""age"", and ""location"", and set the values to your name, age, and location.","my_dict = {
 ""name"": ""John Smith"",
 ""age"": 28,
 ""location"": ""New York""
}"
"Create an array of 10 integers, starting from 0 and increasing with each element.","my_array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
"Write a python script to identify a palindrome from a given input stringinputString = ""abacab""","def checkPalindrome(inputString): 
  
    # reverse the given string 
    reverseString = inputString[::-1] 
  
    # check if the string is equal to its reverse 
    if (inputString == reverseString): 
        return True
    else: 
        return False
  
# Driver code 
if __name__ == ""__main__"": 
    inputString = ""abacab""
    print(checkPalindrome(inputString))"
"Construct a Python script to print a specific character from a string.str = ""Hello world!""
index = 5","testString = ""Hello world!""
print(testString[index])
# Output will be: w"
"Input a two-dimensional array and calculate the sum of each row.arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def row_sum(arr): 
    row_sum = [] 
    for row in arr:
        sum = 0 
        for ele in row: 
            sum += ele 
        row_sum.append(sum) 
    return row_sum"
"Print out the number of items in the following list.my_list = [1, 2, 3, 4, 5, 6, 7]",7
"Create a function that takes a 2D array of numerical values and returns the number of times the maximum value appears.my_array = [[1, 2, 4, 1],
            [2, 3, 3, 2],
            [3, 4, 3, 3]]","def count_max(arr):
    max_val = 0
    count = 0
    for row in arr:
        max_val = max(max_val, max(row))

    for row in arr:
        if max(row) == max_val:
            count += 1
    
    return count"
Create a function that returns the sum of all elements in a given array of numbers.,"def array_sum(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum"
Create a prompt that takes user input and displays a message.,"var userInput = prompt(""Please enter your name:"");
alert(""Hello "" + userInput + ""!"");"
"Use NumPy to extract the top 10 rows from a given matrix.import numpy as np
arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])","top_10 = arr[:10,]
print(top_10)"
"Use Python to sort a given list of strings.myList = [""bananas"", ""oranges"", ""apples"", ""peaches""]","sortedList = sorted(myList)
print(sortedList)"
"Create a Django model that includes a user's name, email address, and age.","class UserModel(models.Model):
    name = models.CharField(max_length=100)
    address = models.CharField(max_length = 200)
    age = models.IntegerField()"
"Create a Python class to store a customer's name, address, and phone number.","class Customer:
    def __init__(self, name, address, phone):
        self.name = name
        self.address = address
        self.phone = phone"
Build a regression model to predict house prices based on crime rate and school quality.,"model = sklearn.linear_model.LinearRegression()
model.fit(data[['crime_rate', 'school_quality]], data['house_price'])"
"Create a function in Python to insert a new item into an existing list.new_item = 5
existing_list = [1, 2, 3, 4]","def insert_new_item(new_item, existing_list):
    """"""Inserts a new item into an existing list.
    
    Args:
        new_item (int): The item to be inserted.
        existing_list (list): The existing list.
    
    Returns:
        list: List with the new item inserted.
    """"""
    existing_list.append(new_item)
    return existing_list"
How many lines of code are required to generate a Fibonacci sequence up to the n-th number?,"The number of lines of code required to generate a Fibonacci sequence up to the n-th number is 3: one line to set the conditions, one line for the base case, and one line of the recursive loop. This does not include any lines for printing the result."
"Create a function that takes two string arguments, adds the corresponding numbers together, and returns the result.string1 = ""5""
string2 = ""7""","def add_numbers(x, y):
  return int(x) + int(y)

result = add_numbers(string1, string2)
print(result) # Outputs 12"
"Rewrite the following code snippet with fewer lines of code.ans = 0
for i in range(1,10):
  ans += i","ans = sum(range(1,10))"
"Suggest a way to complete the following Python program which takes two strings as input and prints out the longer string.first_str = 'hello'
second_str = 'world'","if len(first_str) == len(second_str):
    print('The two strings are of equal length.')
elif len(first_str) > len(second_str):
    print(first_str)
else:
    print(second_str)"
Modify the given code to create a for loop that prints a list of numbers from 0 to 10.int i = 0,"for i in range(11):
    print(i)"
"Find the similarity between two given sentences using NLTK library.sentence1 = ""This has been an exciting journey""
sentence2 = ""It's been a thrilling ride""","import nltk
from nltk.corpus import wordnet
sentence1 = ""This has been an exciting journey""
s1 = nltk.word_tokenize(sentence1) 
sentence2 = ""It's been a thrilling ride""
s2 = nltk.word_tokenize(sentence2) 

# First we convert the words into their respective synonyms
syn1 = []
for word in s1:
    for syn in wordnet.synsets(word): 
        for l in syn.lemmas(): 
            syn1.append(l.name())

syn2 = []
for word in s2:
    for syn in wordnet.synsets(word): 
        for l in syn.lemmas(): 
            syn2.append(l.name())

# Calculating similarity using Path_Similarity 
similarity = []
for word1 in syn1:
    for word2 in syn2:
        p_sim = wordnet.path_similarity(wordnet.synset(word1),wordnet.synset(word2))
        similarity.append(p_sim)
       
# Calculate the average of all similarity scores
result = sum(similarity)/len(similarity)

# Output
0.6521739130434783"
"Find the number of unique items in the given array.arr = [1, 2, 1, 4, 5]","arr = [1, 2, 1, 4, 5];
const uniqueItems = new Set(arr);
console.log(uniqueItems.size);

# Output
4"
Use NumPy to create a 3x3 array of random numbers from 0 to 1.,"import numpy as np
arr = np.random.rand(3, 3)
print(arr)

# Output
[[0.78000621 0.36251339 0.91162219]
 [0.52734163 0.56699849 0.03191476]
 [0.81245571 0.21147751 0.72691151]]"
"Analyze the given text using opinion mining.The new iPhone is awesome, I love it!","import nltk 
from nltk.sentiment.vader import SentimentIntensityAnalyzer 
sid = SentimentIntensityAnalyzer() 
ss = sid.polarity_scores(text) 

# Output
{'neg': 0.0, 'neu': 0.49, 'pos': 0.51, 'compound': 0.7717}"
Write a function to compute the factorial of a number using recursion.,"def factorial_recursion( n ):
   if n == 1:
       return n
   else:
       return n * factorial_recursion( n - 1 )"
Construct a program that can calculate the factorial of a number using a while loop,"def factorial_while(n):
    factorial = 1
    while n>0:
        factorial = factorial * n
        n = n - 1
    return factorial"
"Construct a code to determine if two strings are equalabc
abc",true
Create a program to find the longest substring with unique characters,"def longest_substring(string): 
    n = len(string) 
  
    ''' Initialization of stings, 
    a and b ''' 
    a = """" 
    b = """"  
  
    ''' Initialization of maximum length substring 
    having distinct characters ''' 
    maxlen = 0  
  
    ''' 1. Pick starting point 
    2. intialise substrng ""a""
    3. Find the longest such 
    substring by comparing 
    current and previous  
    substring ''' 
    for i in range(n):
        a += string[i] 
        b = """" 
        for j in range(i + 1, n): 
            if string[j] not in a:              
                b += string[j] 
            else: 
                break
        if len(a) > maxlen: 
            maxlen = len(a) 
        a += b
    return maxlen"
Construct a function to detect if a binary tree is balanced,"# A utility function to get the height of the tree 
def height(node): 
  
    # Base Case : Tree is empty 
    if node is None: 
        return 0 ; 
  
    # If tree is not empty then height = 1 + max of left 
    # height and right heights  
    return 1 + max(height(node.left) ,height(node.right)) 
  
  
# Function to get the difference of 
# height of left and right subtrees 
def getHeightDiff(node): 
    if node is None: 
        return 0
  
    # Get the height difference of left and right subtrees 
    heightDiff = height(node.left) - height(node.right) 
  
    # Get the maximum of left and right subtree 
    # height differences 
    return max(heightDiff, getHeightDiff(node.left) ,getHeightDiff(node.right)) 
  
# The main function that checks if binary tree is 
# height-balanced or not 
def isBalanced(root): 
    if root is None: 
        return 1
  
    # Get the height difference 
    heightDiff = getHeightDiff(root) 
  
    # If heightDiff is more than 1 then tree is 
    # not balanced so return 0 
    if (abs(heightDiff) > 1): 
        return 0
    else: 
        # tree is balanced return 1 
        return 1"
"Create a XML document to store information about books.Book Title: ""The Adventures of Tom Sawyer""
Book Author: Mark Twain
Book Year: 1876
The Genre: Fiction","<?xml version=""1.0"" encoding=""utf-8""?>
<book>
    <title>The Adventures of Tom Sawyer</title>
    <author>Mark Twain</author>
    <year>1876</year>
    <genre>Fiction</genre> 
</book>"
How can you sort an array using insertion sort?,"Insertion sort is a sorting algorithm in which each item of the array is inserted at its correct position in the sorted list. It involves scanning the array and comparing each element with its adjacent elements in the array. If the element is smaller than its neighbors, it is swapped with its left neighbor, and if the element is larger, it is swapped with its right neighbor. This process is repeated until the array is sorted."
Write a Python code that prints out the first 5 elements of a tuple.,"tup=(1,2,3,4,5,6,7,8,9,10)

for i in range(0,5): 
    print (tup[i])"
How do you calculate the sum of a list of numbers in Python?,"The sum of a list of numbers in Python can be calculated using the built-in sum() function. This function takes an iterable object (such as a list or tuple) containing numbers as its argument and returns the sum of all the elements in the object. For example, sum([1,2,3]) will return 6."
Create a new Python dictionary with numbers 1-10 as keys and their corresponding squares as values.,"squares = {1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100}"
Write a Python function that takes an array of strings as an argument and returns a boolean.,"def check_array(arr):
  if len(arr) == 0:
    return False

  for str in arr:
    if len(str) == 0:
      return False
   
  return True"
Build a MapReduce job with Hadoop to find the 99th percentile of a given data set.,"//Mapper Code
 
import java.io.IOException;
 
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
 
public class MapperClass extends Mapper<LongWritable, Text, Text, LongWritable> {
 
    LongWritable one = new LongWritable(1);
    Text data = new Text();
 
    @Override
    protected void map(LongWritable key, Text value, Context context) 
      throws IOException, InterruptedException {
 
        String[] line = value.toString().split("","");
        String number = line[0];
        // Emit key-value pair for number
        data.set(number);
        context.write(data, one);
 
    }
  
}
 
//Reducer Code
 
import java.io.IOException;
 
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
 
public class ReducerClass extends Reducer<Text, LongWritable, Text, LongWritable> {
 
    int percentile;
    @Override
    protected void setup(Context context) 
      throws IOException, InterruptedException {
 
        //Get percentile from context configuration
        percentile = context.getConfiguration().getInt(""percentile"", 99);
    }
 
    @Override
    protected void reduce(Text key, Iterable<LongWritable> values,
      Context context)
      throws IOException, InterruptedException {
 
        LongWritable result = new LongWritable();
        int sum = 0;
        // Sum up the values
        for (LongWritable value : values) {
            sum += value.get();
        }
 
        // Calculate percentile
        int percentage = (sum*100)/percentile;
 
        if (percentile == percentage) {
            result.set(Long.parseLong((key.toString())));
            context.write(new Text(""Percentile 99:""), result);
        }
 
    }
  
}"
Develop an algorithm in Python to determine whether two strings are anagrams.,"def is_anagram(string1, string2):
    # Create a dictionaries for strings
    string1_dict = {}
    string2_dict = {}
  
    # Add the chars from each string to the dictionaries
    for char in string1:
        if char not in string1_dict:
            string1_dict[char] = 1
        else:
            string1_dict[char] += 1
    
    for char in string2:
        if char not in string2_dict:
            string2_dict[char] = 1
        else:
            string2_dict[char] += 1
    
    # Check if the dictionaries have the same entries
    for key in string1_dict:
        if key not in string2_dict:
            return False
        elif string1_dict[key] != string2_dict[key]:
            return False
    
    return True
  
# Test the algorithm
string1 = ""listen""
string2 = ""silent""

if(is_anagram(string1, string2)):
    print(""The strings are anagrams"")
else:
    print(""The strings are not anagrams"")"
Write a code to get the top 10 trending topics on Twitter with their volume using the Twitter API.,"""""""
Get the top 10 trending topics on Twitter with their volume using the Twitter API
""""""

import tweepy

#Authenticate to Twitter
auth = tweepy.OAuthHandler(""CONSUMER_KEY"", ""CONSUMER_SECRET"")
auth.set_access_token(""ACCESS_KEY"", ""ACCESS_SECRET"")

#Create API Object
api = tweepy.API(auth)

#Get top 10 trending topics
trends = api.trends_place(23424975) # 23424975 is the WOEID code for the US

#Print the top 10 trending topics
for trend in trends[0][""trends""][:10]:
    print(trend[""name""] + "" (Volume: "" + str(trend[""tweet_volume""]) + "")"")"
"Print out the string formed by repeating each character in a given string n times.String: ""abc"", n: 3","def repeat_string(string, n):
    repeated = """"
    for letter in string:
        for _ in range(n):
            repeated += letter
    return repeated"
Build a program that prints out the length of a given list.,"def list_length(list):
    return len(list)"
"Code a function to clamp a given number between a minimum value and maximum value.Number: 8, Minimum: 3, Maximum: 10","def clamp_number(num, min_value, max_value):
    if num < min_value: 
        return min_value 
    elif num > max_value: 
        return max_value 
    else: 
        return num"
"Develop a program that prints out the output of the following expression.[2, 4, 6, 8]","def expression_output(lst):
    s = 0
    for i in lst:
        s += i**2 - 5*i + 6
    return s"
Suggest a solution to store years in ISO 8601 format in Python.,"We can use the datetime.date class to store dates in ISO 8601 format. We just need to create an instance of datetime.date using the year, month and day. Then, we can convert it to the ISO 8601 format string using isoformat() method of datetime.date. For example:
import datetime
date = datetime.date(2016, 1, 1)
iso_date = date.isoformat()
print(iso_date) // Output: '2016-01-01'"
Create a function in Python which takes a string as an argument and returns the first character of the string in upper case.,"def first_upper_char(input_string):
    if len(input_string) == 0:
        return ''
    else:
        return input_string[0].upper()"
Write a script which receives two integers as parameters and returns their average as output.,"def average(a, b):
    return (a+b)/2"
"Write a script which takes a list as an argument and shuffles it.my_list = [1,2,3,4,5]","import random

def shuffle_list(my_list):
    random.shuffle(my_list)
    return my_list"
Create a script in Python which takes a number as an argument and prints its corresponding nth Fibonacci number.,"def fibonacci(n):
    if n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)"
Suggest a method in Python for sorting a list of strings on the basis of their length in ascending order.,"We can use the built-in sorted() function to sort the list of strings on the basis of their length in ascending order. The syntax for sorting is as follows:

sorted(list_of_strings, key=len)

where 'list_of_strings' is the list of strings we want to sort and 'len' is the length function for getting the length of each string."
Train a machine learning model to classify cats and dogs.,"""""""
Train a machine learning model to classify cats and dogs
""""""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K

# Setting up Image Data Generator
train_data_dir = 'data/train'
validation_data_dir = 'data/validation'

img_width, img_height = 100, 100
train_datagen = ImageDataGenerator(
 rescale=1. / 255,
 shear_range=0.2,
 zoom_range=0.2,
 horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
 train_data_dir,
 target_size=(img_width, img_height),
 batch_size=32,
 class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
 validation_data_dir,
 target_size=(img_width, img_height),
 batch_size=32,
 class_mode='binary')

# Setting up the model
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
 optimizer='rmsprop',
 metrics=['accuracy'])

# Training the model
model.fit_generator(
 train_generator,
 steps_per_epoch=2000,
 epochs=50,
 validation_data=validation_generator,
 validation_steps=800)"
"Write code to detect the dominant language in a string.This is a test string with multiple languages, including French, Spanish, and English.","import langdetect

def detect_language(s):
    """"""
    Detects the dominant language from a given string.

    Parameters
    ----------
    s : str
        A string containing multiple languages

    Returns
    -------
    str
        The dominant language found in the given string
    """"""
    return langdetect.detect(s)

text = ""This is a test string with multiple languages, including French, Spanish, and English.""
lang = detect_language(text)
print('The dominant language found in the text is:', lang)"
"Write a class in Python to represent a division with two integers and the following operations: addition, subtraction, multiplication and division.","class Division():
    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def add(self):
        return self.x + self.y
    
    def subtract(self):
        return self.x - self.y
    
    def multiply(self):
        return self.x * self.y
    
    def divide(self):
        return self.x / self.y
    
    
div = Division(10, 5)
print(""Addition of the two numbers:"", div.add())
print(""Subtraction of the two numbers:"", div.subtract())
print(""Multiplication of the two numbers:"", div.multiply())
print(""Division of the two numbers:"", div.divide())"
Introduce a vector of size 10 with all elements initialized to 0.,"vector<int> v(10, 0);"
"Create a linked list from the given array of numbers.[2, 4, 5, 6, 7]",Head -> 2 -> 4 -> 5 -> 6 -> 7 -> None
Implement a Fibonacci series generator using Python.,"def generate_fibonacci(n):
 a, b = 0, 1
 fibonacci_series = [a]
 for i in range(n-1):
 a, b = b, a+b
 fibonacci_series.append(b)
 return fibonacci_series"
Construct a for loop that prints out all prime numbers between 500 and 1000,"for i in range(500, 1000):
    flag = 1
    for j in range(2, i):
        if i % j == 0:
            flag = 0
            break
    if flag == 1:
        print(i)"
"Construct an if-else statement that checks if the given day is a holidayday = ""Sunday""","if (day == ""Sunday""){
    console.log(""Today is a holiday."")
} else {
    console.log(""Today is not a holiday."")
}"
"Compute the maximum value in a random array[4,6,9,2,11,7]",maxValue = 11
"Output the 7th element in the given array[5, 10, 20, 12, 15, 7]",element = 15
Create a program that finds the sum of all numbers divisible by 4 between 150 and 300,sum = 3750
"Write a Jupyter Notebook cell to print a greeting with the text ""Hello, World!"".","print('Hello, World!')"
What is the Keras library used for?,"Keras is an open-source library used for creating and training models in deep learning. It is designed to be user-friendly and allows E-commerce developers to quickly build powerful neural networks with minimal lines of code. It is built on top of popular libraries such as Theano, TensorFlow, and CNTK."
"Identify which line of code contains a syntax error?def getFibonacciNumber(n):
  a, b = 0, 1
  for i in range 0, n
    a, b = b, a + b
  return a","The line ""for i in range 0, n"" contains a syntax error. The syntax for the for loop should be ""for i in range(0, n)""."
Calculate the sum of all the multiples of 3 and 5 between 0 and nn = 10,"def sum_multiples(n):
    result = 0
    for i in range(1, n):
        if i % 3 == 0 or i % 5 == 0:
            result += i
    return result

if __name__ == '__main__':
    print(sum_multiples(n))"
Create a regex pattern to match all URLs in a text.,"# Create a regex pattern to match all URLs in a text
pattern = r""((http|ftp|https):\/\/)?[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?"""
Create a query in MongoDB to update the age of a document with the name 'John'.,"# Create a query in MongoDB to update the age of a document with the name 'John'
db.users.updateOne(
  { name: 'John' },
  { $set: { age: 18 } }
)"
What is the definition of a compolier?,"A compiler is a computer program that translates written source code from one programming language into another language (often called the target language) that can be understood and executed by another computer. The process of compiling typically involves analysis, transformation, and optimization of code to generate object code or executable code. The generated object code or executable code is then linked into one or more executable programs or libraries."
Generate pseudo code for a function that swaps two numbers x and y.,"// Function to swap two numbers
def swap(x, y):
    // Store the value of x into a temporary variable  
    temp = x

    // Store y in x  
    x = y

    // Store temp in y  
    y = temp
    return x,y"
Write a Python program to create a dictionary containing students and their scores.,"# Declare an empty dictionary
scores = {}

# Enter some students and their scores
scores['student1'] = 90
scores['student2'] = 85
scores['student3'] = 100

# Print the scores
print(scores)

# Output - {'student1': 90, 'student2': 85, 'student3': 100}"
What type of loop can be used to iterate through the items of a list in Python?,"The most common type of loop for iterating through the items of a list in Python is the for loop. This loop iterates through each item in the list one by one, allowing the programmer to perform operations on each item in the list. For example:

my_list = [1, 2, 3]
for item in my_list:
    print(item)

# Output
# 1
# 2
# 3"
What is a state machine in software engineering?,"A state machine in software engineering is a model of computation used to design programs and algorithms that have an input, a process, and an output. A state machine is built from a set of states, any of which can be the current state at any given time, and it transitions from one state to another in reaction to events or inputs. The process of the state machine is the set of predefined operations associated with each state and the set of transitions that dictate how the state machine moves from one state to another."
"Write a Go program that prints the numbers from 1 to 100, replacing any number divisible by 4 with ""Four"".","package main

import ""fmt""

func main() {
    // Iterate from 1 to 100
    for i := 1; i <= 100; i++ {
        // If the number is divisible by 4, print ""Four""
        if i%4 == 0 {
            fmt.Println(""Four"")
        // Otherwise print the number
        } else {
            fmt.Println(i)
        }
    }
}"
"Read the following block of code. What is the main goal of the code?def first_duplicate(arr):
    seen = set()
    for i in arr:
        if i in seen:
            return i
        seen.add(i)
    return -1",The main goal of the code is to find the first duplicate element in an array.
"You are given two matrices, M1 and M2. Write a python code to multiply them.M1 : 
[[2, 3], 
 [5, 6]]

M2 : 
[[1, 2], 
 [3, 4]]","def matrix_multiply(M1, M2):
    M3 = [[0, 0], [0, 0]]
    for i in range(len(M1)):
        for j in range(len(M2[0])):
            for k in range(len(M2)):
                M3[i][j] += M1[i][k] * M2[k][j]
    
    return M3"
"You are given two arrays, A and B. Write a program to determine if B is a subset of A.A = [1, 2, 3, 4, 5]
B = [2, 3, 5]","def is_subset(A, B):
    for i in B:
        if i not in A:
            return False
    
    return True"
Generate a code to form a Pascal Triangle with the given input.n = 5,"def pascal(n): 
    # An auxiliary array to store 
    # generated pascal triangle values 
    arr =[[0 for x in range(n)] for x in range(n)] 
      
    # Iterate through every line and  
    # print integer(s) in it 
    for line in range(0, n): 
          
        # Every line has number of  
        # integers equal to line number 
        for i in range(0, line + 1): 
              
            # First and last values  
            # in every row are 1 
            if (i == 0 or i == line): 
                arr[line][i] = 1
                print(arr[line][i], end="" "") 
            else: 
                arr[line][i] = (arr[line - 1][i - 1] +
                                arr[line - 1][i]) 
                print(arr[line][i], end="" "") 
        print(""\r"")"
Retrieve the data in the given URL.URL: https://www.example.com/,"import requests

url = 'https://www.example.com/'

# Make an API call and store the response
res = requests.get(url)

# Retrieve the data
data = res.text"
Change the following linked list into an array.Linked list: 1->3->5->7->9,"# Create a linked list
class Node: 
    def __init__(self, data): 
        self.data = data
        self.next = None

# Function to convert linked list to array
def list_to_array(head): 
    arr = []
    if head is None: 
        return arr
    cur = head
    while cur is not None: 
        arr.append(cur.data) 
        cur = cur.next
    return arr

arr = list_to_array(head) 
print(arr)"
"Write a code that swaps the two numbers using a temporary variable.a = 10, b = 20","# Swapping two numbers using a temporary variable
a, b = 10, 20 
temp = a 
a = b 
b = temp 
print('a:', a) 
print('b:', b)"
"Change the following list of strings into a single combined string.my_list = [""Hello"", ""world"", ""this"", ""is"", ""a"", ""test""]","# Create the string from the list
my_string = ' '.join(map(str, my_list)) 
# Print the string
print(my_string) # Hello world this is a test"
"Using the input as a guide, write code that prints out a copy of the 2d matrix with its elements transposed.matrix = [[1,2,3],[4,5,6],[7,8,9]]","def transpose_matrix(matrix):
    """"""Function to transpose 2d list matrix""""""
    row = len(matrix) 
    col = len(matrix[0]) 
  
    transpose = [[0 for j in range(row)] for i in range(col)] 
  
    for i in range(row): 
        for j in range(col): 
            transpose[j][i] = matrix[i][j] 
  
    for i in range(col): 
        print(transpose[i]) 

if __name__ == '__main__':
    matrix = [[1,2,3],[4,5,6],[7,8,9]]
    transpose_matrix(matrix)"
"Write a code to create a list that preserves the order of the original input and contains only the odd numbers from it?[1,2,3,4,5,6,7,8,9]","def odd_numbers_list(input_data):
    """"""Function to create a list that preserves the order of the original input and contains only the odd numbers from it""""""
    output_list = [] 
    for el in input_data: 
        if el % 2 != 0:
            output_list.append(el) 
    return output_list

if __name__ == '__main__':
    input_data = [1,2,3,4,5,6,7,8,9]
    output_list = odd_numbers_list(input_data)
    print(output_list)"
Write a function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator.,"def find_max_of_three(a, b, c):
    """"""Function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator""""""
    max_value = a if a > b and a > c else (b if b > a and b > c else c)
    return max_value

if __name__ == '__main__':
    a = 1
    b = 5
    c = 3
    max_value = find_max_of_three(a, b, c)
    print(max_value)"
"Write a python code to find median of two sorted arrays.A = [1,4,6,7]B = [3,5,8,9]","def find_median(A, B):
    """"""Function to find median of two sorted arrays""""""
    m = len(A)
    n = len(B)
    if m > n:
        A,B,m,n = B,A,n,m
    imin, imax, half_len = 0, m , (m+n+1) // 2
    while imin <= imax:
        i = (imin+imax) // 2
        j = half_len -i
        if i < m and B[j-1] > A[i]:
            # i is too small, must increase it
            imin = i + 1
        elif i > 0 and A[i-1] > B[j]:
            # i is too big, must decrease it
            imax = i - 1
        else:
            # i is perfect
            if i == 0:
                max_of_left = B[j-1] 
            elif j == 0:
                max_of_left = A[i-1] 
            else:
                max_of_left = max(A[i-1], B[j-1]) 
 
            if (m + n) % 2 == 1:
                return max_of_left 
 
            if i == m:
                min_of_right = B[j] 
            elif j == n:
                min_of_right = A[i] 
            else:
                min_of_right = min(A[i], B[j]) 
 
            return (max_of_left + min_of_right) / 2.0

if __name__ == '__main__':
    A = [1,4,6,7]
    B = [3,5,8,9]
    median = find_median(A, B)
    print(median)"
"Fix the code so that the loop terminates after 10 iterations.# Start of code
i = 1
while i<100:
    print(i)
    i += 1
# End of code","# Start of code
i = 1
while i<=10:
    print(i)
    i += 1
# End of code"
"Identify all the statements that are erroneous or have logical errors.a = 2
b = 1
if a > b
    print(""a is greater than b"")
elif a == b
    print(""a is equal to b"")
else
    print(""b is greater than a"")","The statements that are erroneous or have logical errors are:
1) There is no colon (:) after the 'if' and 'elif' statements
2) There is no colon (:) after the 'else' statement.
3) The parentheses after 'print' are unnecessary."
Write a code to generate a dictionary that contains the frequencies of all English alphabets in a given sentence.Sentence: The brain is a powerful tool,"def get_alphabet_frequencies(sentence):
    """"""Function to generate a dictionary that contains the frequencies of all English alphabets in a given sentence""""""
    alphabet_freq = dict()
    for el in sentence:
        if el.isalpha():
            el = el.lower()
            if el in alphabet_freq:
                alphabet_freq[el] += 1
            else:
                alphabet_freq[el] = 1
    return alphabet_freq

if __name__ == '__main__':
    sentence = ""The brain is a powerful tool""
    alphabet_freq = get_alphabet_frequencies(sentence)
    print(alphabet_freq)"
"Generate a list comprehension to replicate the given code example.my_list = [1, 2, 3, 4, 5]
my_output = []

for item in my_list:
    my_output.append(item*item)",my_output = [item*item for item in my_list]
"Construct a for loop to print a list of order numbers in ascending order.order_num = [1530, 3489, 7421, 4792]","for order_num in sorted(order_num):
    print(order_num)
    
# Output:
# 1530
# 3489
# 4792
# 7421"
"Create a dictionary of items with the corresponding price in Python.items = ['book', 'pen', 'chair']
prices = [10, 2, 5]","prices_dict = dict(zip(items, prices))
# prices_dict = {'book': 10, 'pen': 2, 'chair': 5}"
"Generate a Python code to add two numbers using a lambda expression.num1 = 10
num2 = 25","add = lambda num1, num2: num1 + num2

print(add(num1, num2))  # Output: 35"
"Construct a for loop in Python to print the array in descending order.my_array = [4, 3, 5, 7, 1]","for i in sorted(my_array, reverse=True):
  print(i)

# Output:
# 7
# 5
# 4
# 3
# 1"
"Write a Regex expression to search for all words ending with ""ed""","regex = r""\w*ed\b"""
"Given a string s and an integer k, write a code to find the kth most frequent element in the stringString s: ""hello world hello""
Integer k: 2","# Counting frequencies 
counts = dict() 
words = s.split(' ') 
for word in words: 
    if word in counts: 
        counts[word] += 1
    else: 
        counts[word] = 1
  
# Getting the kth most frequent element 
kth_most_frequent = sorted(counts, key = counts.get, reverse = True)[k-1] 
  
print(kth_most_frequent) 

# Output: hello"
Create a program to convert a given time in GMT form to local time.,"from datetime import datetime, timezone

def local_time(gmt_time):
    utc_time = datetime.fromisoformat(gmt_time.replace(""Z"", ""+00:00""))
 
    local_time = utc_time.astimezone()
 
    return local_time.isoformat()"
"Unwrap the function parameter with default argument.def func(arg1, arg2=""default""):
    pass","def func(arg1, arg2):
    if arg2 is None:
        arg2 = ""default""
    pass"
Detect if the given URL contains a query string.url = https://www.example.com/?food=burger,True
"Swap the values of the two given numbers using a temporary variable.a = 1
b = 2","temp = a 
a = b
b = temp"
Create a class named “Vehicle” that has 3 instance variables.,"class Vehicle:
    def __init__(self, name, color, max_speed):
        self.name = name
        self.color = color
        self.max_speed = max_speed"
"Create a list comprehension that prints each pair in a given list of tuples.my_list = [(""apple"", ""red""), (""banana"", ""yellow"")]","[print(v1, v2) for (v1, v2) in my_list]"
"Modify the given list to include only unique items.my_list = [1, 2, 2, 3, 3, 4]",my_list = list(set(my_list))
"Create a dictionary with the key-value pairs of the given tuple.my_tuple = ((""a"", 1), (""b"", 2), (""c"", 3))",my_dict = dict(my_tuple)
"Write a Python algorithm to find the most common value in an array.arr = [1, 2, 3, 3, 3, 3, 4, 4, 5]","def most_common(arr):
    freq = {}
    
    # Count the frequency of each element
    for el in arr:
        if el not in freq:
            freq[el] = 1
        else:
            freq[el] += 1
            
    # Find the maximum frequency
    max_freq = -1
    for el, freq in freq.items():
        max_freq = max(max_freq, freq)
    
    # Find the element with maximum frequency
    most_common_el = None
    for el, freq in freq.items():
        if freq == max_freq:
            most_common_el = el
    
    return most_common_el"
"Rewrite the following code snippet so that it is compatible with Python 3sum = 0
for num in range(10):
   sum = sum + num
print sum","sum = 0
for num in range(10):
   sum += num

print(sum)"
Output the last two words in the following stringI only have one wish.,wish.
"Update the following function so that it returns the greatest among three numbersdef find_max(a, b):
    if a > b:
        return a
    else:
        return b","def find_max(a, b, c):
    if a >= b and a >= c:
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c"
Write a user authentication code in Python,"def authentication(username,password): 
    if username == ""username"" and password == ""password"": 
        print (""Login successful"") 
    else: 
        print (""Incorrect username or password"") 

username = input(""Enter your username: "")
password = input(""Enter your password: "")

authentication(username, password)"
"Output the sum of the following two arraysarr_1 = [2,3,4]
arr_2 = [1,2,3]","arr_1 = [2,3,4]
arr_2 = [1,2,3]

sum = 0
for i in range(len(arr_1)):
    sum += arr_1[i] + arr_2[i]

print(""The sum of the two arrays is"",sum)"
Suggest a way to secure user passwords,"One way to secure user passwords is to use a secure hash algorithm such as bcrypt, scrypt, etc. to hash the passwords before storing them in the database. This ensures that even if the passwords are exposed, they will not be easily readable. Furthermore, it is important to use a secure server and to monitor the database for any suspicious activity."
Suggest a technique to optimize memory usage,"One way to optimize memory usage is to use strategic data structures like hash tables and trees that can store data in a more space-efficient manner. Additionally, one can use code optimization techniques such as code reuse and memory caching to reduce memory usage. One should also think carefully about data structure design choices, such as choosing between an array and linked list, to minimize memory usage."
"Combine a loop and a conditional statement to output the following[2, 3, 4, 5]","arr = [2, 3, 4, 5] 

for i in arr: 
    if i % 2 == 0: 
        print(i) 

# Output: 
2
4"
Fill in the blanks to calculate the standard deviation of an array using the formula.,𝜎 = √((∑(x - mean)^2)/n)
Develop a function to evaluate the following expression.3 + 2 * 4,"def evaluate(expr):
  return eval(expr)

print(evaluate('3 + 2 * 4'))

# Output
11"
Identify an ideal algorithm to find the longest palindrome in a given string.,The Manacher’s Algorithm is an ideal algorithm to find the longest palindrome in a given string. This algorithm utilizes dynamic programming to find the longest palindrome in linear time complexity by iterating through the string and checking whether a substring is a palindrome or not.
"Suggest a vector representation for the following phrases.happy, angry","happy = [1, 0, 0, 0]
angry = [0, 1, 0, 0]"
"Implement source-to-source transformation of the following code.x = a + b
y = a + c
z = b + d","x = a + b
y = x + (c - b)
z = x + (d - b)"
Develop an AI Assistant to identify questions in a given sentence.,"A question-answering system is an AI Assistant that can identify questions in a given sentence. It utilizes natural language processing techniques such as language models, semantic analysis, and lookup tables to analyze the given sentence and extract out the questions."
"Write a function, which given an array and a number, returns the array with the number added.arr = [1, 2, 3, 4]
num = 10","def add_num(arr, num):
    return [x + num for x in arr]"
"Create a new list where the elements are the square of the elements in the given list.list = [1, 2, 3, 4]",new_list = [x**2 for x in list]
"Create a class with two methods, one to return the name and the other to return the age.","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age"
"Using the code, update the variable to count from 4 to 14.x = 4","for x in range(4, 15):
    print(x)"
"Print the ""hello world"" in uppercase.","print(""HELLO WORLD"".upper())"
"Convert the given code to use a dictionary instead of lists.list1 = ['a', 'b', 'c']
list2 = ['d', 'e', 'f']","dict1 = {'a': 'd', 'b': 'e', 'c': 'f'}"
Write a function that takes a single parameter and returns the absolute value of the parameter.,"def absolute_value(x):
    if x < 0:
        return -x
    else:
        return x"
"Construct two strings from a given string and print these strings separately.str = ""Hello World!""","str1 = str[:5]
str2 = str[6:]
print(str1)
print(str2)"
"Code a solution in Python to replace all the occurences of a specific word in a string.sentence = ""I like apples""
word = ""apples""
replacement = ""bananas""","def replace_word(sentence, word, replacement):
    words = sentence.split("" "")
    new_sentence = """"
    for w in words:
        if w == word:
            w = replacement
        new_sentence += w + "" ""
    return new_sentence

sentence = ""I like apples""
word = ""apples""
replacement = ""bananas""

print(replace_word(sentence, word, replacement))"
Create a softmax activation function in Python.,"def softmax(x):
  """"""Compute softmax values for each sets of scores in x.""""""
  e_x = np.exp(x - np.max(x))
  return e_x / e_x.sum(axis=0)"
Create a for loop in Python for the range between 0 and 10.,"for i in range(0,11):
	print(i)"
Write an API call in Python using the request module to get data from a URL.https://www.example.com,"import requests 

r = requests.get(url = ""https://www.example.com"") 
data = r.json()"
Create a nested For loop in Python with the outer loop counting from 0  to 3 and the inner loop counting from 5 to 10.,"for i in range(0,4):
  for j in range(5,11):
    print(""outer loop at: ""+str(i)+"" inner loop at: ""+str(j))"
Write a MongoDB query to get the first 3 documents in a collection of documents.,db.collection.find({}).limit(3)
"Create a user interface to display a chart showing the number of people of a certain gender and age group.Sample JSON data to be used: 

[
  {
    ""name"": ""John"",
    ""age"": 25,
    ""gender"": ""male""
  },
  {
    ""name"": ""Jane"",
    ""age"": 22,
    ""gender"": ""female""
  },
  {
    ""name"": ""Bob"",
    ""age"": 28,
    ""gender"": ""male""
  },
  {
    ""name"": ""Jill"",
    ""age"": 24,
    ""gender"": ""female""
  }
]","import json
import plotly.graph_objs as go

def create_chart():
    data = json.load('data.json')
    males = 0 
    females = 0
    male_ages = [0] * 100
    females_ages = [0] * 100

    # count males/females and age group 
    for person in data:
        if person['gender'] == 'male':
            males += 1
            age = int(person['age'])
            male_ages[age] += 1
        else:
            females += 1
            age = int(person['age'])
            females_ages[age] += 1

    # create data
    data = [
        go.Bar(
            name='Males',
            x=list(range(100)),
            y=male_ages
        ),
        go.Bar(
            name='Females',
            x=list(range(100)),
            y=females_ages
        )
    ]

    # Create Layout
    layout = go.Layout(
        title='Number of People by Gender and Age Group',
        yaxis=dict(title='Number of People'),
        xaxis=dict(title='Age')
    )

    # Create Figure
    figure = go.Figure(data=data, layout=layout)

    # Plot and save the chart
    figure.show()
    figure.write_image('gender_age.png')

create_chart()"
Create a function to add two integers in assembly language.,"add:
    ; Function to add two integers
 
    ; Set stack frame
    push    ebp
    mov     ebp, esp
 
    ; Store the arguments on the stack
    mov     eax, [ebp + 8] ; First argument
    mov     ebx, [ebp + 12] ; Second argument
 
    ; Add them
    add     eax, ebx
 
    ; Retrieve the stack frame
    pop     ebp
 
    ; Return
    ret"
"Suggest an edit to fix the following code snippet.for num in range(10):
  if num % 2 == 0
    print(num);","for num in range(10):
  if num % 2 == 0:
    print(num);"
"Create a function in Python that takes two strings and checks if the characters in the second string exist in the first string.s1 = ""hello world""
s2 = ""llo""","def char_exists_in_string(s1, s2):
    for char in s2:
        if char not in s1:
            return False
    
    return True

if __name__ == '__main__':
    s1 = ""hello world""
    s2 = ""llo""
    print(char_exists_in_string(s1, s2))"
Convert 10 decimals to binary.10,1010
Create a dictionary with two keys and a list of values assigned to each key.,"my_dict = {
    ""key1"": [1, 2, 3],
    ""key2"": [4, 5, 6]
}"
Generate an array of random numbers with a size of 10.,"import random

my_arr = [random.randint(1,100) for _ in range(10)]

print(my_arr) # Output: [76, 64, 26, 62, 59, 35, 66, 18, 52, 49]"
"Write a function to compare two lists and print out whether they are equal or not.list1 = [1, 2, 3]
list2 = [2, 3, 4]","def compare_lists(list1, list2):
    if len(list1) != len(list2):
        return False
    else:
        for i in range(len(list1)):
            if list1[i] != list2[i]:
                return False
        return True

list1 = [1, 2, 3]
list2 = [2, 3, 4]    
print(compare_lists(list1, list2)) # Output: False"
"Write Python code to print the last three elements from a given list.[2, 4, 6, 8, 10, 12]","my_list = [2, 4, 6, 8, 10, 12]
print(my_list[-3:]) # Output: [10, 12]"
How would you implement Skip-Gram model in TensorFlow?,"To implement a Skip-Gram model in TensorFlow, you would need to define the model architecture. You would then need to define the training data, which can be done using tf.data packages. Finally, you would need to use an optimization algorithm such as the AdamOptimizer to train the model."
Create a Python class with an instance method that prints the number of objects created.,"class Person:
     num_objects = 0

     def __init__(self):
          Person.num_objects += 1
    
     def print_num_objects(self):
          print(Person.num_objects)"
Create a Python dictionary with three elements and print the key-value pairs.,"my_dict = {
    'name': 'John',
    'age': 30,
    'city': 'New York'
}

for key, value in my_dict.items():
    print(f'{key}: {value}')"
"Delete every third character in a string.String: ""Hello World""",HloWrd
"Find the first unique number in the list.[1,2,3,4,5,5,4,3,2,1,6]",6
"Sum all the numbers divisible by 3 and 7 in the list.[27, 21, 63, 77, 49]",84
Write a code to format a number with two decimal places.23.14159,"""""""
Function to format a number with two decimal places
""""""

def two_decimals(num):
    """"""
    Format a number with two decimal places
    """"""
    return ""{:.2f}"".format(num)

if __name__ == '__main__':
    print(two_decimals(23.14159)) # prints 23.14"
"Write a code to calculate the sum of the cubes of the numbers in the list.[1,2,3,4,5]","""""""
Function to calculate the sum of the cubes of the numbers in the list
""""""
def list_cube_sum(list):
    """"""
    Calculate the sum of the cubes of the numbers in the list
    """"""
    total = 0
    for i in list:
        total += i**3
    return total

if __name__ == '__main__':
    print(list_cube_sum([1, 2, 3, 4, 5])) # prints 225"
"Take the following string and read it into a list in Python.""apple, banana, peach, orange""","list = [x.strip() for x in ""apple, banana, peach, orange"".split("","")]"
How would you reverse the order of the elements in a given singly linked list in-place?,"def reverse_inplace(head): 
    if head is None or head.next is None: 
        return head  
        
    prev_node = None
    next_node = None
    curr_node = head  
    
    while curr_node is not None: 
        next_node = curr_node.next
        curr_node.next = prev_node
        prev_node = curr_node
        curr_node = next_node
        
    return prev_node"
"Take the following dictionary and sort its values alphabetically.{""SPACELINE"": ""Flight of the Future"", ""LUCY"": ""Rocket Science""}","sorted_dict = dict(sorted({""SPACELINE"": ""Flight of the Future"", ""LUCY"": ""Rocket Science""}.items(), key=lambda x: x[1]))"
Suggest a regex pattern to match a valid alphanumeric string.,^[a-zA-Z0-9]+$
"Write a function to print a user's name and age from a given dictionary.user_data = {'name':'John Doe',
             'age': 24
            }","def print_info(data):
 print(""Name: "" + data['name'])
 print(""Age: "" + str(data['age']))"
Create a class in Python which models a bank account using the concept of class and object.,"class BankAccount: 
 def __init__(self, name, balance): 
  self.name = name 
  self.balance = balance 
 def deposit(self, amount): 
  self.balance += amount 
 def withdraw(self, amount): 
  self.balance -= amount"
Write a regex pattern to match a float number with at least one decimal place.,^-?\d+(\.\d+)?$
"Parse and save the following article in a dataset.""The Boston Celtics have signed forward Gordon Hayward to a four-year deal.

Good move from the Celtics, who are coming off of a teams worst record since 2007?

The 29-year-old Hayward has averaged 10.7 points and 5 rebounds per game in his eight-year career""","{
    ""team"": ""Boston Celtics"", 
    ""player"": ""Gordon Hayward"", 
    ""contract"": ""Four-year deal"", 
    ""recent_record"": ""teams worst record since 2007"", 
    ""average_points"": 10.7, 
    ""average_rebounds"": 5
}"
Suggest a possible use case of deep learning in healthcare.,"Deep learning can be used in healthcare to improve diagnosis accuracy, automate medical image analysis, predict risk of diseases, and improve treatments. For example, a deep learning model can be used to analyze CT scans to detect cancerous nodules or classify different types of mammograms. Additionally, deep learning models can also be used to predict a patient's risk or response to specific treatments, and predict the onset of certain diseases."
Suggest a use case for reinforcement learning in business.,"Reinforcement learning can be used in business to automate processes, optimize products and services, improve marketing campaigns, and develop better customer experiences. For example, a reinforcement learning model can learn the best way to stock products in a store and optimize product placement to maximize sales. Additionally, reinforcement learning can also be used to automate customer service tasks, adjust product prices in real-time based on customer demand, and optimize marketing campaigns with personalized content."
Suggest a use case for natural language processing in healthcare.,"Natural language processing can be used in healthcare to analyze patient documents for insights, automate medical coding, detect drug interactions, identify risk factors and trends, and improve healthcare communication. For example, a natural language processing system can be used to scan patient notes to identify potential symptoms and suggest possible diagnoses. Additionally, natural language processing systems can also be used to automate medical coding and make medical texts searchable and easier to understand."
"Rank a list of integer from high to low[2, 5, 8, 3, 9, 6]","[9, 8, 6, 5, 3, 2]"
"Edit the following code to perform arithmetic operation#include <stdio.h>
 
int main(void) 
{
    int a = 5;
    int b = 4;
 
    printf(""%d"", a);
    printf(""%d"", b);
 
    return 0;
}","#include <stdio.h>
 
int main(void) 
{
    int a = 5;
    int b = 4;
 
    printf(""%d + %d = %d\n"", a, b, a+b);
 
    return 0;
}"
"Develop a program in Python that takes two array elements as input and finds their productArray1: [1, 5, 8, 9]
Array2: [2, 3, 4, 6]","import numpy as np

arr1 = np.array([1,5,8,9])
arr2 = np.array([2,3,4,6])

result = arr1 * arr2

print(f'Product of the two arrays: {result}')"
Create a regex pattern to identify alphanumeric characters.,[A-Za-z0-9]
"Using the given linked list, find out the second last element.1 -> 3 -> 5 -> 7 -> 9 -> 11","Node *secondLastElement(Node *head)
{
    if (head == NULL || head->next == NULL) 
        return NULL;
 
    Node *secondLast = head;
    while (secondLast->next->next != NULL) 
        secondLast = secondLast->next;
    return secondLast;
}"
"Create a TensorFlow tensor with the following data[[1, 2],
[3, 4],
[5, 6]]","tf.constant([[1., 2.], [3., 4.], [5., 6.]])"
"Write an iterator in Python to iterate through the given list and output each elementmyList = ['Hi', 'Bye', 'Hello', 'World']","def iterateMyList(myList):
    iterator = iter(myList)
    while True:
        try: 
            print(next(iterator))
        except StopIteration: 
            break"
Create a function to print the current local time.,"def printCurrentLocalTime():
    currentLocalTime = datetime.datetime.now()
    print(currentLocalTime.strftime(""%c""))"
Create some sample data to test a supervised learning algorithm.,"import numpy as np
X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
y = np.array([1, 0, -1])"
Given a text string modify it by capitalizing the letters after a period.hello world. this is from gpt,hello world. This is from GPT
Convert this string to a Sanskrit translation.Hello world,namaskāra vasudeva
Generate a series of natural numbers from 1 to 50 using regex,^(?:(((?!([0-4]?[0-9]|50)|)|50)|[1-4]?[0-9])$
Create an array of integers that contain all the prime numbers between 1 and 50,"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
Build a state machine in Python to process incoming keyboard events,"# Define a StateMachine class
class StateMachine: 
    def __init__(self): 
        self.handlers = {} 
        self.startState = None
        self.endStates = [] 
  
    def add_state(self, state): 
        self.handlers[state.name] = state
  
    def set_start(self, name): 
        self.startState = name
  
    def set_end(self, name): 
        self.endStates.append(name) 
  
    def run(self): 
        try: 
            handler = self.handlers[self.startState] 
        except: 
            raise(Exception, ""Must call .set_start() before .run()"")
        while True:
            # Get the next keyboard event
            event = get_event()
            if event:
                newState = handler.run(event) 
            if newState.name in self.endStates: 
                break 
            else: 
                handler = self.handlers[newState.name]"
"Create a list comprehension that multiplies each item in a list by 2.[1,2,3,4]","list_comprehension = [x*2 for x in [1,2,3,4]]
print(list_comprehension)"
"Write a function that returns the larger number from two numbers provided.4, 5","def largest(a, b):
    """"""Returns the larger number from two numbers provided.""""""
    if a > b:
        return a
    else:
        return b

num1 = 4
num2 = 5
print(largest(num1, num2))"
Write a code that returns a 2-dimensional array of size n by m containing all 0sn = 3 and m = 5,"def create2DArray(n, m):
    array = [[0 for x in range(m)] for y in range(n)]
    return array

print(create2DArray(3, 5)) 
# prints [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]"
"Write a function that takes in a string and returns a list of all words in the string in alphabetical orderstr = ""Here is a sentence to sort""","def alphabetically_sort_words(str):
    words = str.split(' ')
    words.sort()
    return words

print(alphabetically_sort_words(""Here is a sentence to sort"")) # prints ['Here', 'a', 'is', 'sentence', 'sort', 'to']"
"When given a list of strings, identify which strings are palindromeslist = ['abc', 'abb', 'cba']","result = []
for s in list:
    if s == s[::-1]:
        result.append(s)

print(result) #['abb']"
"Generate a program to calculate the combination of n elements taken k at a time.n = 8
k = 3","def combinations(n, k):
    if k == 0 or k > n:
        return []
    result = []
    def dfs(start,n,k):
        if k == 0:
            result.append(temp[:])
            return 
        for i in range(start, n):
            temp.append(i)
            dfs(i+1, n, k-1)
            temp.pop()
            
    temp = []
    dfs(0, n, k)
    return result"
"Modify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol.nums = [1,2,3,4,5]
symbols = [""A"",""B"",""C"",""D"",""E""]","def join_nums_symbols(nums, symbols):
    assert len(nums) == len(symbols), ""length of nums and symbols should be equal""

    result = """"
    for i in range(len(nums)):
        result += str(nums[i]) + symbols[i]
    return result"
"Generate a function that takes an array of integers and rearranges the elements in a cyclical fashion, such that the element at index 0 comes last, the element at index 1 goes to the front, the element at index 2 is inserted after the element at the last index and so on.arr = [1, 2, 3, 4, 5]","def rearrange_array(arr):
    output = []
    for i in range(len(arr)):
        idx = (i + 1) % len(arr)
        output.append(arr[idx])
    return output"
"Create a Python function and call it split_string that takes a string and a delimiter as arguments and returns a list containing the string split by the delimiter.my_string = ""hello, world""
delimiter = ','","def split_string(string, delimiter):
    strList = string.split(delimiter)
    return strList"
"Create a program that prints the last two elements of a list.arr = [1,2,3,4,5,6,7]","def get_last_two(arr):
    return arr[-2:]"
"Given a string, write an algorithm to remove all occurrences of a given letter.my_string = ""Python is a popular programming language""
letter = 'o'","def remove_letter(string, letter):
    output = """"
    for s in string:
        if s != letter:
            output += s
    return output"
"Create a function that evaluates a mathematical expression stored as a string.expression = ""1+2*3/4""","def evaluate_expr(expression):
    return eval(expression)"
"Debug and resolve the error in the following code:message = ""Welcome!""
print(message)
printf(message)","The error is ""NameError: name 'printf' is not defined"". To solve the error, remove the second line ""printf(message)"" as ""printf()"" is not a valid function."
How to convert a list of words into a set?,"A list of words can be converted into a set by using the built-in ""set()"" function. For example, if the list is [""apple"", ""banana"", ""cherry""], the set converted from this list will look like {""apple"", ""banana"", ""cherry""}."
How to loop over a key-value pair in a dictionary?,"A key-value pair in a dictionary can be looped over using the ""for"" loop with the ""items()"" method. For example, if the dictionary is {'a': 1, 'b': 2, 'c': 3}, it can be looped over as:

for key, value in dictionary.items():
  print(key, value)

It will print the key-value pairs as:
a 1
b 2
c 3"
"Create a function that filters a list of strings based on their length.List = [""Carrot"", ""Apple"", ""Orange"", ""Banana"", ""Pear""]","def filter_string_length(strings):
    """"""
    This function takes in a list of strings and filters out those
    that are not longer than 5 characters.
    """"""
    return [s for s in strings if len(s) > 5]

list_strings = [""Carrot"", ""Apple"", ""Orange"", ""Banana"", ""Pear""]
filtered_list = filter_string_length(list_strings)
print(filtered_list)

# Output: [""Carrot"", ""Orange"", ""Banana""]"
Write a code to calculate the age in years and months given the date of birth.Date of Birth: 4 June 1998,"def age_calc(date_of_birth):
    """"""
    This function takes in a date of birth and calculates 
    the age in years and months.
    """"""
    today = datetime.date.today()
    age_years = today.year - date_of_birth.year
    age_months = today.month - date_of_birth.month
    if age_months < 0:
        age_years -= 1
        age_months += 12
    return age_years, age_months

date_of_birth = datetime.date(1998, 6, 4)
print(age_calc(date_of_birth))

# Output: (21, 10)"
"Augment an integer list with zeros after every 4 elements.List = [1,2,3,4,5,6,7,8]","def list_augment(int_list):
    """"""
    This function takes in a list of integers and 
    augments it with zeros after every 4 elements.
    """"""
    augmented_list = []
    for i in range(0, len(int_list), 4):
        augmented_list.append(int_list[i:i + 4])
        augmented_list.append(0)
    augmented_list.pop()
    return [item for sublist in augmented_list for item in sublist]
    
int_list = [1,2,3,4,5,6,7,8]
print(list_augment(int_list))

# Output: [1, 2, 3, 4, 0, 5, 6, 7, 8, 0]"
"Compare the two strings and report the index of the first mismatch.String 1: hello
String 2: holla",3
"Determine the maximum and minimum value of an array.[3, 6, 9, -1, 2]","Max: 9
Min: -1"
"Perform a search operation to find all the words starting with ""th"".Sentence: The big cat ate the small mouse.","['The', 'the', 'that']"
Develop an algorithm to reverse an integer.123,"def reverse(num): 
    reversed_num = 0
    while num>0:
        last = num%10
        reversed_num = (reversed_num*10)+last
        num = num//10
    return reversed_num

num = 123
print(""Reverse of"", num, ""is"", reverse(num)) 
# Output: Reverse of 123 is 321"
Develop an algorithm to find the depth in a tree.,"def tree_depth(root): 
    if root is None: 
        return 0 ;  
  
    else :  
        left_height = tree_depth(root.left) 
        right_height = tree_depth(root.right) 
  
        if (left_height > right_height): 
            return left_height+1
        else: 
            return right_height+1"
Determine if a given word is a valid word of English language.Word: lycanthropy,"Yes, lycanthropy is a valid word of English language."
Categorize the given sentence into a specific class.Sentence: It was a beautiful sunny day.,The given sentence belongs to the class 'positive sentiment'.
"Write a function in Python to check if two lists have the same elements regardless of their order.list1 = [""cat"", ""dog"", ""mouse""]
list2 = [""mouse"", ""dog"", ""cat""]","def is_similar(list_1, list_2):
  if len(list_1) != len(list_2):
    return False
  list_1.sort()
  list_2.sort()
  for i, j in zip(list_1, list_2):
    if i != j:
      return False
  return True"
"You need to debug this code and ensure that it runs properly.def cost_calc(product, quantity): 
    total_cost = 0
    for i, q in zip(products, quantity):
        cost = i.cost * q 
        total_cost = total_cost + cost 
        return total_cost:","def cost_calc(products, quantity): 
    total_cost = 0
    for i, q in zip(products, quantity):
        cost = i.cost * q 
        total_cost += cost 
    return total_cost"
Train a Naive Bayes model in Python to classify emails into spam and non-spam classes.,"# import libraries 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# read in the data 
data = pd.read_csv('email_data.csv')

# split into training and test data
X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.33, random_state=42)

# create vectorizer and transform training data
count_vector = CountVectorizer()
count_train = count_vector.fit_transform(X_train)

# create and train a Naive Bayes model
NB_classifier = MultinomialNB()
NB_classifier.fit(count_train,y_train)

# transform test data
count_test = count_vector.transform(X_test)

# predict test labels
preds = NB_classifier.predict(count_test)"
"Calculate the maximum sum of a subarray of length k.Array: [1, 3, 4, 5, 20, 32]
K: 3",The maximum sum of a subarray of length 3 is 51 (20 + 5 +26).
Calculate the sum of the cube of integers from 1 to n.,"def cube_sum(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**3
    return sum"
"Write a function to find the path from a source point to a destination point in a given 2D array.Array: [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0]]
Source Point: [0, 0]
Destination Point: [3, 4]","def find_path(array, source, dest):
    path = [source]
    sx, sy = source
    while path[-1] != dest:
        dx, dy = path[-1]
        if dx > 0 and array[dx - 1][dy] == 0:
            path.append([dx-1, dy])
        elif dy > 0 and array[dx][dy-1] == 0:
            path.append([dx, dy-1])
        elif dx < len(array)-1 and array[dx + 1][dy] == 0:
            path.append([dx+1, dy])
        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:
            path.append([dx, dy+1])
    return path"
Implement a queue following the classic FIFO (First-in-first-out) principle using Python.,"class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self, val):
        self.queue.append(val)

    def dequeue(self):
        if self.queue:
            return self.queue.pop(0)
        else:
            return None

    def peek(self):
        if self.queue:
            return self.queue[0]
        else:
            return None"
"Given an array of strings and the task is to find the longest string from the given string array.[""Google"", ""Facebook"", ""Amazon"", ""Zapier"" ]","public class LongestString {
 
    public static String getLongestString(String[] array) {
    
        if(array.length == 0) {
            return null;
        }
         
        String longestString = array[0]; 
         
        for(int i = 1; i < array.length; i++) {
            if(array[i].length() > longestString.length()) {
                longestString = array[i];
            }
        }
         
        return longestString;
    }
    
    public static void main(String[] args) {
 
        String[] array = {""Google"", ""Facebook"", ""Amazon"", ""Zapier""};
         
        String longestString = getLongestString(array);
         
        System.out.println(""Longest string: ""+longestString); 
    }
}"
"Write a Python function to generate a random password with length 8 containing any combination of upper and lowercase letters, numbers, and symbols.","import string 
import random 

def generate_password(): 
	letter_lower = string.ascii_lowercase
	letter_upper = string.ascii_uppercase
	symbols = string.punctuation
	digits = string.digits
	password = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))
	return password

password = generate_password()
print(password)"
"Write a code to filter out the names longer than 5 characters from the following list.data = [""James"", ""John"", ""Susan"", ""Bella"", ""Natalie"", ""Adam"", ""Sam"", ""Eric""]","data = [""James"", ""John"", ""Susan"", ""Bella"", ""Natalie"", ""Adam"", ""Sam"", ""Eric""]

filtered_data = [name for name in data if len(name) > 5]

print(filtered_data) 
# Output: [""James"", ""John"", ""Bella"", ""Natalie"", ""Sam""]"
"Create a code to get the difference between two timestamps in seconds.timestamp1 = ""2020-07-02 14:13:37""
timestamp2 = ""2020-07-03 13:21:46""","import datetime

def get_difference_in_seconds(timestamp1, timestamp2):
    datetime1 = datetime.datetime.strptime(timestamp1, ""%Y-%m-%d %H:%M:%S"")
    datetime2 = datetime.datetime.strptime(timestamp2, ""%Y-%m-%d %H:%M:%S"")
    difference = (datetime2 - datetime1).total_seconds()
    return difference"
"Suggest a way to scale the following function for n values.def scale(x):
    return x * 2","def scale(arr, n):
    return [x * 2  for x in arr[:n]]"
"Given an array of integers, create a code to return the second-largest number.[12, 45, 2, 41, 31, 10, 8, 6, 4]","def second_largest(arr):
    largest = max(arr)
    arr.remove(largest)
    return max(arr)"
Write a code to generate all possible binary strings of length 5.,"def gen_binary_strings(n):
    result = []
    for i in range(2**n):
        s = bin(i)[2:]
        s = s.zfill(n)
        result.append(s)
    return result

print(gen_binary_strings(5))
# Output: ['00000', '00001', '00010', '00011', '00100', '00101', '00110', '00111', '01000', '01001', '01010', '01011', '01100', '01101', '01110', '01111', '10000', '10001', '10010', '10011', '10100', '10101', '10110', '10111', '11000', '11001', '11010', '11011', '11100', '11101', '11110', '11111']"
"Create a code to create a userid from the given firstname and lastname.Firstname: John
Lastname: Smith","def create_userid(firstname, lastname):
    userid = firstname[0] + lastname[:5]
    return userid

userid = create_userid(""John"", ""Smith"")
print(userid) # Output: JSmith"
"Given a list of numbers, create a code to find the maximum product of three numbers.[-1, -2, 4, 5, 8, 9]","def max_product_three_numbers(arr):
    arr.sort()
    return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])

max_product = max_product_three_numbers([-1, -2, 4, 5, 8, 9])
print(max_product)  # Output: 360"
"Create a KMP algorithm in Python to find a pattern in a given text.Text: abcabdababd
Pattern:abd","def KMPSearch(pat, txt): 
    M = len(pat) 
    N = len(txt) 
  
    # create lps[] that will hold the longest prefix suffix  
    # values for pattern 
    lps = [0]*M 
    j = 0 # index for pat[] 
  
    # Preprocess the pattern (calculate lps[] array) 
    computeLPSArray(pat, M, lps) 
  
    i = 0 # index for txt[] 
    while i < N: 
        if pat[j] == txt[i]: 
            i += 1
            j += 1
  
        if j == M: 
            print(""Found pattern at index "" + str(i-j)) 
            j = lps[j-1] 
  
        # mismatch after j matches 
        elif i < N and pat[j] != txt[i]: 
            # Do not match lps[0..lps[j-1]] characters, 
            # they will match anyway 
            if j != 0: 
                j = lps[j-1] 
            else: 
                i += 1
        
def computeLPSArray(pat, M, lps): 
    len = 0 # length of the previous longest prefix suffix 
  
    lps[0] # lps[0] is always 0 
    i = 1
  
    # the loop calculates lps[i] for i = 1 to M-1 
    while i < M: 
        if pat[i]== pat[len]: 
            len += 1
            lps[i] = len
            i += 1
        else: 
            # This is tricky. Consider the example. 
            # AAACAAAA and i = 7. The idea is similar  
            # to search step. 
            if len != 0: 
                len = lps[len-1] 
  
                # Also, note that we do not increment i here 
            else: 
                lps[i] = 0
                i += 1"
Create a Perl script to parse a given string and extract all names.,"my $str = 'John, Paul, George and Ringo';

my @names = split(',\s', $str);

foreach my $name (@names) {
 print $name; 
}"
Write a Scala function to generate a range of numbers.,"def generateRange(start:Int, end:Int): List[Int] = {     
   if (start > end) List(end)
   else start :: generateRange(start+1, end)
}"
"Given the following code, write a function to validate the input dates are in increasing order.# Validate if the inputs are valid dates
def validate_dates(date_list):
    pass","# Validate if the inputs are valid dates
def validate_dates(date_list):
    if len(date_list) == 0:
        return True
    prev_date = date_list[0]
    for date in date_list[1:]:
        if date < prev_date:
            return False
        prev_date = date
    return True"
Write a function in Python to remove all 'null' values from a nested dictionary.,"def remove_nulls(dictionary):
    if isinstance(dictionary, dict):
        return {key: remove_nulls(value) 
        for key, value in dictionary.items() if not value == None}
    else:
        return dictionary"
"Add a method to the following class which prints the student's name in upper case.class Student:
  def __init__(self, name):
    self.name = name","class Student:
  def __init__(self, name):
    self.name = name
  
  def print_name_upper(self):
    print(self.name.upper())"
Write a Python function that takes a list of integers and returns True if any of the integers is divisible by 7.,"def is_divisible_by_seven(ints):
    return any(num % 7 == 0 for num in ints)"
Write a function to compare two strings and return the number of different characters in each string.,"def compare_strings(s1, s2):
    s1_chars = list(s1)
    s2_chars = list(s2)
    num_diff_chars = 0
    for char in s1_chars:
        if char not in s2_chars:
            num_diff_chars += 1
    for char in s2_chars:
        if char not in s1_chars:
            num_diff_chars += 1
    return num_diff_chars"
Construct a data dictionary for a movie,"movie_dict = {
  'title' : str,
  'director' : str,
  'producer' : str,
  'writer' : str,
  'actors' : list,
  'release_date' : date,
  'runtime_minutes' : int,
  'budget' : int,
  'production_company' : str,
  'box_office' : int,
  'genres' : list,
  'plot' : str,
  'awards' : list,
  'language' : str,
  'country' : str,
}"
Design a function to create a secure password,"import random
import string

def secure_password(strong=False):
    length = random.randint(8, 16)
    letters = string.ascii_lowercase+string.ascii_uppercase+string.digits
    if strong:
        symbols = string.punctuation
        letters += symbols
    return ''.join(random.choice(letters) for i in range(length))"
"Write a function to generate anagrams for a given stringstr = ""cat""","import itertools

def anagrams(str):
    return ["""".join(permutation) for permutation in itertools.permutations(str)]

print(anagrams(str)) # Output: ['cat', 'cta', 'act', 'atc', 'tca', 'tac']"
Create a class for constructing a new tree,"class TreeNode:

    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
    
    def Insert(self, data):
        if self.data:
            if data < self.data:
                if self.left is None:
                    self.left = TreeNode(data)
                else:
                    self.left.Insert(data)
            elif data > self.data:
                if self.right is None:
                    self.right = TreeNode(data)
                else:
                    self.right.Insert(data)
        else:
            self.data = data"
"Generate a code snippet to calculate the sum of an arrayarr = [1, 23, 4, 3, 5]","def summation(arr):
    sum = 0
    for i in arr:
        sum += i
    return sum

print(summation(arr)) # Output: 36"
"Change the following code to convert the temperature from Fahrenheit to Celsius.def convert_fahrenheit_to_celsius(temperature):
    return temperature - 32","def convert_fahrenheit_to_celsius(temperature):
    return (temperature - 32) * 5 / 9"
"Generate a password that is at least 8 characters long and contains at least one letter, one number, and one special character.","import random
import string

def generate_password():
    characters = string.ascii_letters + string.digits + string.punctuation
    length = 8
    password = ''.join(random.choice(characters) for _ in range(length))
    while not (any(c.isdigit() for c in password) and any(c.isalpha() for c in password)
           and any(c in string.punctuation for c in password)):
        password = ''.join(random.choice(characters) for _ in range(length))
    return password"
Write a Python function to calculate the power of a number raised to the nth power.,"def calculate_power(base, power):
    if power == 0:
        return 1
    else:
        return base * calculate_power(base, power - 1)"
"Submit an optimized solution to the following leetcode problem.Problem: Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.","def isSameTree(p, q):
    if p is None and q is None:
        return True
    if p is None or q is None:
        return False
    if p.val != q.val:
        return False
    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)"
"Write a Python function to convert a given Unix timestamp to a readable format like ""day, month, date, hours:minutes:seconds, year"".","import datetime

def timestamp_to_readable(unix_timestamp):
    return datetime.datetime.fromtimestamp(unix_timestamp).strftime(""%A, %B %d, %H:%M:%S, %Y"")"
Define a class in Python that represents a currency.,"class Currency:
    def __init__(self, currency_name, currency_symbol, currency_value):
        self.name = currency_name
        self.symbol = currency_symbol
        self.value = currency_value
        
    def __str__(self):
        return f""{self.name}: {self.symbol}{self.value}"""
"Arrange the following characters in a valid Python expression.<, 1, %, (",(1 % <)
Write a Python Function to implement the game of Tic-Tac-Toe.,"class GameState:
    def __init__(self):
        self.board = [[None, None, None],
                      [None, None, None],
                      [None, None, None]
        ]
    
    def is_game_over(self):
        b = self.board
        # Check if a player won
        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == b[2][1] == b[2][2] != None:
            return True
        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:
            return True
        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:
            return True
        # Check if the board is full
        elif any(None in row for row in b):
            return False
        # All positions filled, no winner
        else:
            return True"
"Analyze an object-oriented program written in Python and suggest changes to improve its technical quality.def main():
  my_list = [1,2,3,4] 

  for element in my_list:
    print(element)

if __name__== ""__main__""
  main()","The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.

def main():
  my_list = [1,2,3,4] 

  my_list = [element for element in my_list] 

  for element in my_list:
    print(element)

if __name__== ""__main__""
  main()"
Train a machine learning algorithm to classify objects into one of two classes.,"from sklearn.svm import SVC 
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

# Load the iris dataset 
iris = load_iris()

# Split the data into train and test sets 
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, 
                                                    random_state=0)

# Train the model using SVC 
clf = SVC(kernel='linear', C=1).fit(X_train, y_train)

# Predict the labels of the test set 
y_pred = clf.predict(X_test)"
Create a serverless application with AWS Lambda.,Create an AWS Lambda function with associated IAM roles and policies that define the function’s access to related AWS resources. Package your code into a .zip file and upload it to AWS Lambda. Connect the Lambda function to an API Gateway to make your function accessible through an API endpoint.
Edit a first person narrative created by a GPT model in order to make the narrative more coherent.I was walking in the forest and suddenly I saw a dragon. It was huge and its scales glimmered in the sunlight. It had sharp claws and its eyes were red.,"I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach."
"Generate code which returns a random character from a given list of strings.['apple','orange','pineapple','grape']","import random 

def random_character(strings): 
    return random.choice(strings)

random_character(['apple','orange','pineapple','grape'])"
"Implement an algorithm to subtract two strings, represented as a linked list, in the order they appear in and return the result as a linked list.l1 = [""1"",""2"",""3""],
l2 = [""9"",""2""]","def linkedListSubtract(l1, l2):
    dummy_node = ListNode(0)
    current = dummy_node
 
    carry = 0
    while l1 or l2:
        curr_value1 = 0
        curr_value2 = 0
        if l1 :
            curr_value1 += int(l1.val)
            l1 = l1.next
        if l2 :
            curr_value2 += int(l2.val)
            l2 = l2.next
        curr_value = curr_value1 - curr_value2 - carry
        if curr_value < 0 :
            curr_value += 10
            carry = 1
        else :
            carry = 0
        current.next = ListNode(str(curr_value))
        current = current.next
 
    if carry > 0 :
        current.next = ListNode(str(carry))
    return dummy_node.next"
"Build a script to print the words that have the most occurrences in a given string.""This is just a simple string""","def most_occurrences(sentence):
    freq = {}
    for word in sentence.split():
        freq[word] = freq.get(word, 0) + 1

    freq_words = [(freq[word], word) for word in freq]
    freq_words.sort(reverse=True)
    print(freq_words[:2])

most_occurrences(""This is just a simple string"")"
"Given the following Python code, identify if it is syntactically correct or not.def add(a
b):
return a+b",false
"Given a string in Python, generate a new string with the same set of characters but in the reverse order.str = ""abcdefg""","str = ""gfedcba"""
"Given an array of integers, remove any duplicate numbers and sort the remaining elements in ascending order.arr = [3, 9, 8, 4, 6, 7, 5, 4]","arr = [3, 4, 5, 6, 7, 8, 9]"
"Separate the words in a given string using a single space.str = ""thequickbrownfoxjumps""","str = ""the quick brown fox jumps"""
"Create a program that outputs a spiral array from the given input of a 2D array.[[ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9]]","[1, 2, 3, 6, 9, 8, 7, 4, 5]"
Compute the sum of all integers from 1 to the given number n.,"def print_sum(n):
 sum = 0
 for i in range(1, n+1):
 sum += i
 return sum"
"Develop a program that offers the maximum value from a list of numbers.[2, 10, 7, 15, 8, 11]",15
"Create a program that takes in two lists of numbers and computes the maximum difference between the two lists.List 1: [20, 10, 4, 0]
List 2: [17, 1, 10, 7, 8]",19
Generate a summary of an article containing more than 500 words.,"The article is about _____. It discusses the subject in depth, exploring various aspects of the topic. It provides a comprehensive overview of different perspectives on the topic and presents evidence to support its conclusions. In conclusion, the article provides a comprehensive evaluation of _____ by offering a balanced and unbiased assessment of the subject."
"Design an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.[1, 3, 5, 4, 2]","def minMoves(arr): 
    n = len(arr) 
    moves = 0
    for i in range(n):  
        for j in range(n - 1):
            if arr[j] > arr[j + 1]:  
                temp = arr[j]
                arr[j] = arr[j + 1] 
                arr[j + 1] = temp
                moves += 1

    return moves"
Design a function to find the Fibonacci sequence numbers given n.n = 5,"def Fibonacci(n):  
    if n == 0:   
        return 0  
    elif n == 1:  
        return 1  
    else:  
        return Fibonacci(n-1) + Fibonacci(n-2)"
Create a Python script to print out all prime numbers up to and including a given number n.,"def print_prime_numbers(n):  
    for num in range(2, n + 1):  
        is_prime = True 
        for i in range(2, num):  
            if (num % i) == 0:  
                is_prime = False
                break
        if is_prime:
            print(num)"
"Update the code to create a class named Person that contains two instance attributes-name and age.class Person():
    # TODO: add name and age instance attributes","class Person():
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Design a function to compute n^2-2n.,"def calculate_n_squared(n):
    return n**2 - 2*n"
Implement the algorithm to reverse a singly linked list.,"# Node class  
class Node:
    def __init__(self, data):
        self.data = data   
        self.next = None 
  
# LinkedList class 
class LinkedList:  
    # Function to initialize head 
    def __init__(self):
        self.head = None
  
    def reverse(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev"
"Compute the sum of all the even numbers and odd numbers in an array of numbers.[1, 2, 3, 4, 5, 6]","def sum_of_even_odd(arr):
  even_sum = 0
  odd_sum = 0
  for i in arr:
    if i % 2 == 0:
      even_sum += i
    else:
      odd_sum += i
  return even_sum, odd_sum"
Create a regex pattern to match a string that contains two words separated by a single space.,"import re 
pattern = re.compile(r""\w+\s\w+"")"
"Design a function to parse the given URL and return its components.url = ""https://www.example.com/path/to/file.php?query=123&param=value""","def parse_url(url):
    parsed = {}
    parsed[""domain""], parsed[""path""] = url.split('/', 2)[2:4]
    params = parsed[""path""].split('?')[1] if ""?"" in parsed[""path""] else None
    parsed[""query""] = params.split('&') if params else None
    return parsed"
Write a Python script to check if two string variables are anagrams or not.,"def is_anagram(str1, str2):
    # removing all whitespace from strings 
    str1 = ''.join(str1.split())
    str2 = ''.join(str2.split()) 

    # create list for each string 
    list_str1 = list(str1.upper()) 
    list_str2 = list(str2.upper()) 

    # sort the list 
    list_str1.sort() 
    list_str2.sort() 

    # checking if both lists are identical or not 
    if (list_str1 == list_str2): 
        return True
    else: 
        return False"
"Suggest a more efficient way to write the following for loop.for (i = 0; i < arr.length; i++) { 
  console.log(arr[i]); 
}",arr.forEach(item => console.log(item));
"Convert the following string ""The quick brown fox jumps over the lazy dog"" to an array","[""The"", ""quick"", ""brown"", ""fox"", ""jumps"", ""over"", ""the"", ""lazy"", ""dog""]"
Write a script that prints out the current value of environment variables,"For example, using Node.js:

Object.keys(process.env).forEach(key => {
  console.log(`${key}: ${process.env[key]}`);
});"
"Use the reduce function to calculate the product of elements in an array[1, 2, 3, 4, 5]","const product = arr.reduce((acc, curr) => acc * curr, 1);"
"Modify the following code segment to add multiple values in an arrayvar myArray  = [];
myArray[0] = 'x';","var myArray = [];
myArray.push('x', 'y', 'z');"
Write code using the NumPy random library to simulate the rolling of two fair six-sided dice.,"import numpy as np
np.random.seed(0)

# simulate the rolling of two fair six-sided dice
outcomes = np.random.randint(1,7, size=(2,2))
print(outcomes)"
Generate a dictionary with 10 elements and display it.,"dictionary = {
 'A': 'Apple',
 'B': 'Ball',
 'C': 'Cat',
 'D': 'Dog',
 'E': 'Elephant',
 'F': 'Fish',
 'G': 'Goat',
 'H': 'Horse',
 'I': 'Ink',
 'J': 'Jelly'
}
 
print(dictionary)"
"Given an array, find the 2 elements which have the largest sum.arr = [2, 8, 3, 5, 10, 1]","def find_largest_sum(arr):
  max_sum = 0
  first_ele = arr[0]
  sec_ele = arr[1]

  for i in range(0, len(arr)):
    for j in range(i+1, len(arr)):
      curr_sum = arr[i] + arr[j]
      if curr_sum > max_sum:
        max_sum = curr_sum
        first_ele = arr[i]
        sec_ele = arr[j]
  return [first_ele, sec_ele]

print(find_largest_sum(arr)) # outputs [10, 8]"
Generate a query to find the name and age of all students whose age is greater than 18.,"SELECT name, age FROM students WHERE age > 18;"
Implement a recursive function that finds the nth number in the Fibonacci sequence.,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(5)) # outputs 5"
Write a code to delete white space from this sentence.This is  a sentence with    extra white  space.,"sentence = 'This is  a sentence with    extra white  space.'
sentence = sentence.replace(' ', '')
print(sentence) # outputs 'Thisisasentencewithextrawhitespace.'"
"Manipulate a 2D array in Python such that it consists of the maximum value of each column.array = [[1, 2, 3], 
        [4, 5, 6], 
        [7, 8, 9]]","array = [[7, 8, 9], 
        [7, 8, 9], 
        [7, 8, 9]]

def max_columns(array): 
    for col in range(len(array[0])): 
        m = array[0][col] 
        for row in array:
            if row[col] > m: 
                m = row[col]
        for row in range(len(array)):
            array[row][col] = m 
    return array"
Propose an algorithm in Python for sorting a given list of numbers in descending order.,"One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.

def sort_numbers_descending(elements):
  n = len(elements)
  # Traverse through all elements
  for i in range(n-1):
    # Last i elements are already in place
    for j in range(n-1-i):
      # Swap if the element found is greater
      # than the next element
      if elements[j] < elements[j+1]:
        temp = elements[j]
        elements[j] = elements[j+1]
        elements[j+1] = temp
  return elements"
Create an API in Go that takes a string and returns the amount of words present in the given string.,"package main

import (
  ""fmt""
  ""strings""
)

func CountWords(str string) int {
  return len(strings.Fields(str))
}

func main() {
  result := CountWords(""The quick brown fox jumps over the lazy dog"")
  fmt.Println(result) // Output: 9
}"
Create a function in Python to find all pairs of integers that sum up to k.,"def find_pair(arr,k):
  pairs = []
  found_elements = set()
  for num in arr:
    diff = k - num
    if diff in found_elements:
      pairs.append([min(num,diff), max(num,diff)])
    found_elements.add(num)
  return pairs"
Design an algorithm in Python to retrieve all elements in a given array that occur only once.,"def singleOccurence(arr): 
    ans = []
    for i in range(len(arr)): 
        count = 0
        for j in range(len(arr)): 
            if arr[i] == arr[j]: 
                count+=1
        if count == 1: 
            ans.append(arr[i]) 
    return ans"
"Create a sorting algorithm to order a given array.[ 2 , 8 , 3 , 10 , 16 ]","def sort_array(arr):
    for i in range(len(arr) - 1):
        min_index = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]  # swap
    return arr"
"Represent the following expression using a programx = 5, y = 3","x = 5
y = 3
result = x + y
print(result)"
How can you use a function to determine whether a given array is in increasing or decreasing order or unordered?,"def check_order(arr):
     order = 0
     if arr[0] < arr[1]:
         order = 1
     elif arr[0] > arr[1]:
         order = -1
     
     for i in range(1, len(arr)-1):
        if arr[i] > arr[i+1] and order == 1:
            return 0
        elif arr[i] < arr[i+1] and order == -1:
            return 0
     return order"
"Create a Python dictionary object{'a':1, 'b':2, 'c':3}","mydict = {'a':1, 'b':2, 'c':3}"
"Write a function which takes a list and an additional argument, and returns the elements of the list which are greater than the argument.list = [10, 20, 30, 40, 50, 60]
argument = 25","def greater(list, argument):
    output = [] 
    for int in list:
        if int > argument:
            output.append(int)
    return output"
"Write a function which takes in a list containing integers, strings and floats and returns the sum of all numbers in the list.list = [2, 'John', 8.2, 3.4, 11]","def sum_numbers(lst): 
    sum = 0
    for item in lst: 
        if type(item) == int or type(item) == float: 
            sum += item 
    return sum"
Create a GUI that displays text and a button.,"import tkinter as tk 

root = tk.Tk() 

tk.Label(root, text='Hello World!').pack() 
tk.Button(root, text=""Click Me!"").pack() 

root.mainloop()"
Write a Python function to remove punctuation from a given sentence.The quick brown fox jumps over the lazy dog!,"def remove_punctuation(sentence):
 punctuation_marks = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
 new_sentence = """"
 for char in sentence:
 if char not in punctuation_marks:
 new_sentence += char
 return new_sentence"
"Given a list of positive integers, write a program to find two elements whose sum equals a given target value.[1, 2, 3, 4, 5], 4","def find_sum_target(nums, target):
 for i in range(len(nums) - 1):
 for j in range(i+1, len(nums)):
 if nums[i] + nums[j] == target:
 return [nums[i], nums[j]]
 return []"
Write a Python function to generate a list of Fibonacci numbers up to the given limit n.,"def generate_fibonacci(n):
 fibonacci_list = [0, 1]
 for i in range(2, n+1):
 fibonacci_list.append(fibonacci_list[i-2] + fibonacci_list[i-1])
 return fibonacci_list"
"Modify the following code to remove all punctuation and special characters.function removeSpecialCharacters(str) {
var pattern = new RegExp(""[ `!@#$%^&*()+\-=\[\]{};':\""\\|,.<>\/?~]"");
return str.replace(pattern, '');
}","function removeSpecialCharacters(str) {
    var pattern = new RegExp(""[^a-zA-Z0-9]"");
    return str.replace(pattern, '');
}"
How would you design the data structure to store and process results from a 5-choice multiple choice test.,"class TestResults {
    // A map containing the question id as key and the selected answer as value
    Map<Integer, Integer> answers;
  
    // A map containing the question id as key and a boolean indicating whether the answer was correct or not as value
    Map<Integer, Boolean> scores;
  
    // A map containing the question id as key and a list of all the possible answers as value
    Map<Integer, List<String>> questions;
  
    public TestResults(Map<Integer, Integer> answers, Map<Integer, Boolean> scores, Map<Integer, List<String>> questions) {
        this.answers = answers;
        this.scores = scores;
        this.questions = questions;
    }
  
    public Map<Integer, Integer> getAnswers() {
        return answers;
    }
  
    public Map<Integer, Boolean> getScores() {
        return scores;
    }
    
    public Map<Integer, List<String>> getQuestions() {
        return questions;
    }
}"
Describe how you would use a dictionary to reverse a string.,"A dictionary can be used to reverse a string by mapping each character to its reversed counterpart. Create a dictionary with all the characters from the string as keys and their reversed version as the values. To reverse a string, iterate through it and look up each character in the dictionary and add its value to a new string. Once all the characters have been reversed, the new string is the reversed version of the original."
"Write a Python script that randomly shuffles the elements of a given array.list = [1, 2, 3, 4, 5]","import random

def shuffle(arr):
    random.shuffle(arr)
    return arr

result = shuffle([1, 2, 3, 4, 5])
print(result)"
"You need to write a function to check if given input is a palindrome string.string = ""level""","def is_palindrome(string): 
    left = 0
    right = len(string) - 1
  
    while right >= left: 
        if string[left] != string[right]: 
            return False
        left += 1
        right -= 1
    return True"
"Create a program that prints out a list of all numbers from 0 to 10, except for five.","for num in range(11):
    if num != 5:
        print(num)"
Create a program to find the largest common factor in two numbers.24 and 48,"def hcf(x, y): 
  
    if x > y: 
        smaller = y 
    else: 
        smaller = x 
    
    for i in range(1, smaller+1): 
        if((x % i == 0) and (y % i == 0)): 
            hcf = i 
            
    return hcf 

x = 24
y = 48

print (""The H.C.F. of 24 and 48 is"", hcf(x, y))"
"Design a MongoDB schema for a collection to store books with fields for title, author and ISBN.","{
  ""_id"": ObjectId(), 
  ""title"": String,
  ""author"": String,
  ""ISBN"": String
}"
"A function needs to be created that will take a list of strings and return a list of the same strings without duplicates.list_of_strings = [""a"", ""b"", ""c"", ""a"", ""d""]","def remove_duplicates(list_of_strings):
    """"""
    This function will take a list of strings and return a list of the same strings without duplicates.
    """"""
    unique_strings = list(set(list_of_strings))
    return unique_strings

list_of_strings = [""a"", ""b"", ""c"", ""a"", ""d""]
print(remove_duplicates(list_of_strings))"
Create a function that will validate if a given date is in the correct format.date = '12/04/2021',"def validate_date(date):
    """"""
    This function will validate if a given date is in the correct format.
    """"""
    try:
        year, month, day = date.split('/')
        int(year)
        int(month)
        int(day)
        isValidDate = True
    except:
        isValidDate = False
    return isValidDate

date = '12/04/2021'

print(validate_date(date))"
Write a function that will format a given string in proper title case.title = 'the quick brown fox',"def format_title(title):
    """"""
    This function will format a given string in proper title case.
    """"""
    formatted_title = ' '.join([word[0].upper() + word[1:] for word in title.split()])
    return formatted_title

title = 'the quick brown fox'

print(format_title(title))"
"create a function to compare two strings and return a boolean depending on their equality or inequality.string1 = 'hello' 
string2 = 'world'","def compare_strings(string1, string2):
    """"""
    This function will compare two strings and return a boolean 
    depending on their equality or inequality. 
    """"""
    is_same = string1 == string2
    return is_same

string1 = 'hello' 
string2 = 'world'

print(compare_strings(string1, string2))"
Write a Python program to analyze the sentiment of a given text.The restaurant food was terrible.,"import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer

sia = SentimentIntensityAnalyzer()
sentiment = sia.polarity_scores(input_text)
print(sentiment)
# {'neg': 0.404, 'neu': 0.596, 'pos': 0.0, 'compound': -0.7424}"
How does the Fibonacci number sequence work?,"The Fibonacci sequence is a sequence of numbers where each number in the sequence is the sum of the two numbers preceding it. The first two numbers in the sequence are 0 and 1. The sequence starts with 0 and 1 and continues by adding the two previous numbers to get the next number in the sequence. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. The sequence can be represented as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on."
Describe the process of debugging a code.,"Debugging is the process of identifying and fixing errors in the code. It involves finding the root cause of the error and removing it. The process of debugging involves isolating the offending code, identifying the bug, obtaining an understanding of why the bug occurred, determining if a fix can be made (without breaking any other code), testing the fix and re-running the code to ensure the bug is fixed."
Create a functional programming paradigm in Python.,"def functional_programming(lst):
    return list(map(lambda x : x*2, filter(lambda x : x % 2 == 0, lst)))
 
print(functional_programming([1,2,3,4,5]))      
# Output: [4, 8]"
Describe the data structures used to implement a stack data structure.,"Data structures used to implement a stack data structure are as follows - linked lists, arrays, dynamic arrays, and resizable arrays. Linked lists are used when the stack size needs to change frequently as this ensures that space is not wasted. Whereas, for a fixed stack size, arrays can be used. A dynamic array is an array with a pre-allocated capacity, so if the stack size exceeds the capacity of the array then it will resize itself to accommodate the new stack size. Lastly, resizable arrays adjust the capacity automatically when new items are added or existing items are removed."
Design a network for sending data from a server to a client.,"The network should include a server to send data, and a client to receive data. The server should have a dedicated IP address and listening port to receive instructions from the client, such as HTTP requests. The client should have a unique IP address, and should connect to the server to request data. Both the client and server should have the necessary network infrastructure for data transmission, such as routers, gateways, and firewalls."
"In Python, write a script that prints out the elements of a list.list = [1, 2, 3, 4, 5]","list = [1, 2, 3, 4, 5]

for x in list:
    print(x)"
"Given a string of integers, create a method to generate an array in which each integer is added to the sum of its neighbors.s = ""3456""","def generate_sum_array(s):
    res = [int(s[0])]
    for i in range(1, len(s)):
        res.append(int(s[i-1]) + int(s[i]))
    res.append(int(s[-1]))
    return res

# Output: [3, 8, 11, 13]"
"Given an array of objects, write a function that sorts the array in ascending order of its ""price"" property.[
  {'name': 'Laptop', 'price': 1200},
  {'name': 'Monitor', 'price': 500},
  {'name': 'Mouse', 'price': 50}
]","def sort_by_price(arr):
    arr.sort(key=lambda item: item['price'])
    return arr

# Output: [{'name': 'Mouse', 'price': 50}, {'name': 'Monitor', 'price': 500}, {'name': 'Laptop', 'price': 1200}]"
"Create a method that deletes all the empty elements from a given array of strings.arr = [""a"", """", ""b"", """", ""c""]","def delete_empty_elements(arr):
    return [e for e in arr if e]

# Output: [""a"", ""b"", ""c""]"
"Write an algorithm to convert a given 2D matrix into a 1D array.matrix = [[1,2,3],[4,5,6]]","def convert_matrix_to_array(matrix):
    res = []
    for row in matrix:
        for element in row:
            res.append(element)
    return res

# Output: [1,2,3,4,5,6]"
Create a class that implements a polygon using an array of Point objects.,"// Define a polygon class
public class Polygon {
  // An array of Points to represent the vertices of a polygon
  private Point[] vertices;
 
  // A constructor that takes an array of Points
  public Polygon(Point[] vertices) {
    this.vertices = vertices;
  }
 
  // A method that returns the area of the polygon
  public double getArea() {
    double area = 0;
    int j = this.vertices.length - 1;
    for (int i = 0; i < this.vertices.length; i++) {
		area += (this.vertices[j].getX() + this.vertices[i].getX()) 
				* (this.vertices[j].getY() - this.vertices[i].getY());
		j = i; 
    }   
    return Math.abs(area / 2); 
  }
}"
"Write a function that reduces an array of numbers to a single number.[2, 4, 6, 8, 10]","def reduceArray(arr):
    if not arr:
        return 0
    result = arr[0]
    for num in arr[1:]:
        result = result + num
    return result

print(reduceArray([2, 4, 6, 8, 10])) # Outputs: 30"
"Given a string and an int n, write a function to extract the subsequence of length n from the string.s = ""hello world"", n = 6","def extractString(string, n): 
    return string[:n]"
"Given a dataframe, write a function to add a new column that contains the results of a calculation between two columns.dataframe = Pandas DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A', 'B', 'C'])","def add_calculation_column(dataframe, calculation, column_name):
    dataframe[column_name] = dataframe.eval(calculation)
    return dataframe"
"Given an array, remove the duplicate elements.[1, 4, 6, 1, 4, 8]","def remove_duplicates(arr):
    return list(dict.fromkeys(arr))"
Why is algorithmic complexity important?,"Algorithmic complexity is an important measure of how efficient a program is since it tells how much time and memory a program consumes in relation to its input size. A more efficient program can be built to solve a problem faster, use fewer resources, and be more scalable."
"Given an integer N, write a code that finds the next palindrome of N.N = 187",next_palindrome = 191
"Define a function that takes a string as input and returns true if it is a valid IP address.ip_str = ""127.0.0.1""","def is_valid_ip(ip_str):
    ip_addr = ip_str.split('.')

    if len(ip_addr) != 4:
        return False
    for item in ip_addr:
        if not 0 <= int(item) <= 255:
            return False
    return True"
"Design an algorithm for finding the frequency of occurrence of each character in a given stringstr = ""hello world""","def char_frequency(str):
    freq = {}
    for char in str:
        if char in freq: 
            freq[char] += 1
        else:
            freq[char] = 1
    return freq"
Design a GUI app to welcome the user and output a message,"import tkinter as tk 

window = tk.Tk()
window.title(""Welcome App"") 

frame = tk.Frame(window) 
frame.grid(row=0, column=0) 

label = tk.Label(frame, text=""Welcome"", font=(""Arial"", 40))
label.grid(row=0, column=0) 

message = tk.Message(frame, text=""Hello user!"", width=1000)
message.grid(row=2, column=0)  

window.mainloop()"
"Given a string, write a code that checks it for palindromestr = ""abba""","def is_palindrome(str):
    return str == str[::-1]"
Generate code to return a fibonacci sequence up to n elements.n = 10,"def Fibonacci(n): 
  
    #taking 1st two fibonacci nubers as 0 and 1 
    FibArray = [0, 1] 
      
    while len(FibArray) < n: 
        next_fib = FibArray[-1] + FibArray[-2] 
        FibArray.append(next_fib) 
          
    return FibArray 
    
# Driver Code 
print(Fibonacci(n))"
"Make an API call that fetches the user details and stores it in a DB.// URL: '/users/fetch'
// Parameters: username, password","const request = require('request');

function fetchUser(username, password) {
  const url = `/users/fetch?username=${username}&&password=${password}`;
  request.get(url, (err, res) => {
    if (err) {
      console.log('Failed to fetch user', err);
      return;
    }
    
    const userData = JSON.parse(res.body);
    // insert userData into database
  });
}"
"Based on the input, output the number of elements in the given array.arr = [1, 2, 3, 4, 5]",arr.length // Output: 5
"Print out the sum of even numbers from the following range.range(1,10)","sum = 0
for num in range(1,10):
    if num % 2 == 0:
        sum += num
print(sum) // Output: 20"
"What are the reachable, non-reachable and partially reachable states in a DFA?","In a Deterministic Finite Automaton (DFA), there are three types of states: reachable states, non-reachable states, and partially reachable states. Reachable states are those states which can be reached from the start state. Non-reachable states are those which can never be reached from the start state. Partially reachable states are those that can only be reached from the start state through some other states."
Create a logic using Python that checks if a string contains only alphabetical characters or not.,"def checkAlphabet(string): 

   alphabets = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""

   for i in string: 
      if i not in alphabets: 
         return False
   return True"
Write a code snippet to create an array filled with alternating 0s and 1s.Array size: 5,"def createAlternateArray(n):
    result = [False] * n
    for i in range(n):
        if i % 2 == 0:
            result[i] = True
    return result"
W rite a function to display a string in reverse order.String: Hello world,"def reverseString(string):
    return string[::-1]"
"Write a Python code to find the largest and the second largest numbers in a list.List: [2, 9, 12, 45, 10, 20]","def getLargestTwo(l):
    first_largest = second_largest = float('-inf')
    for num in l:
        if num > first_largest:
            second_largest = first_largest
            first_largest = num
        elif num > second_largest and num != first_largest:
            second_largest = num
    return (first_largest, second_largest)"
"Perform a binary search on the following list of integers: [0, 1, 2, 3, 4, 5, 6, 7, 8].","def binary_search(nums, target):
  low = 0
  high = len(nums) - 1

  while low <= high:
    mid = (low + high) // 2
    if target == nums[mid]:
      return mid
    elif target < nums[mid]:
      high = mid - 1
    else:
      low = mid + 1
  
  return -1"
"Calculate the probability of an event given the following probability of each outcome: (0.1, 0.2, 0.3, 0.4).",The probability of the event occurring is 0.1 + 0.2 + 0.3 + 0.4 = 1.0
Report the number of words in the following text.This is a sample text,"def count_words(text):
  return len(text.split())"
"Find the length of the longest common subsequence in the following two strings: ""ABCBDAB"" and ""BDCABA"".","def longest_common_subsequence(str1, str2):
  n = len(str1)
  m = len(str2)
  
  dp = [[0] * (m+1) for _ in range(n+1)]

  for i in range(1, n+1):
    for j in range(1, m+1):
      if str1[i-1] == str2[j-1]:
        dp[i][j] = 1 + dp[i-1][j-1]
      else:
        dp[i][j] = max(dp[i-1][j], dp[i][j-1])
  
  return dp[n][m]"
Create a one line solution in Python to remove all vowels from a string.,"my_string = 'This is a sentence without any vowels'
new_string = ''.join([i for i in my_string if i not in 'aeiouAEIOU']) 
print(new_string)"
Create a regular expression to check if a given string contains any the letter 'X'.,"RegExp(""X"", ""i"")"
Write a regular expression that matches even numbers within a given string.,"RegExp(""[0-9]*[02468]"")"
Edit the following sentence so that it becomes grammatically correct.Sentence: I was leaving to work.,I was leaving for work.
"Create an algorithm in Python to combine two sorted lists into a single sorted list.list1 = [3, 5, 7]
list2 = [1, 2, 4]","def merge_lists(lst1, lst2): 
  sorted_list = []
  i=j=0
  while (i<len(lst1) and j<len(lst2)):
    if lst1[i] <= lst2[j]:
      sorted_list.append(lst1[i])
      i+=1
    else:
      sorted_list.append(lst2[j])
      j+=1

  sorted_list  += lst1[i:]
  sorted_list += lst2[j:]
 
  return sorted_list

list1 = [3, 5, 7]
list2 = [1, 2, 4]
 
print(merge_lists(list1, list2))"
Create a function in Python to return the approximate value of sin(x) using degrees,"import math
def sin_deg(x):
   """"""
   Returns the approximate value of the sine of x, given in degrees.
   """"""
   return math.sin(math.radians(x))"
"Write a Python code to calculate the sum of three given numbers, if the values are equal, then return triple their sum","def sumThree(n1, n2, n3):
    """"""
    This function returns the sum of three numbers
	If the values are equal, it will return triple their sum
    """"""
    if n1 == n2 == n3:
        return 3 * (n1 + n2 + n3)
    else:
        return n1 + n2 + n3"
Generate a list of all the prime numbers in the range from 0 to the given number n.,"def is_prime(n):
    """"""
    This function will check if a given number is prime or not.
    """"""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def generate_list_of_primes(n):
    """"""
    This function will generate a list of all the prime numbers in the range from 0 to the given number n.
    """"""
    primes = []
    for i in range(2, n + 1):
        if is_prime(i):
            primes.append(i)
    return primes"
"Given the python code below, reverse the order of the lines to form a valid program.def myFunc(): 
    print(1) 
    return 
print(2)","def myFunc(): 
    print(2) 
    return 
print(1)"
"What is the result of x = 2 and y = 3 in this function, f(x,y) = x^3 + 2y^2?","The result of x = 2 and y = 3 in the function f(x,y) = x^3 + 2y^2 is 19."
Create a function to normalize a given pandas dataframe.,"def normalize_df(df): 
    normalized_df=(df-df.min())/(df.max()-df.min())
    return normalized_df

norm_df = normalize_df(df)"
"Divide a list of numbers into two smaller lists, one with even numbers and one with odd numbers.[1, 2, 3, 4, 5, 6]","def divide_list(numbers):
    even_list = []
    odd_list = []
    for num in numbers:
        if num % 2 == 0:
            even_list.append(num)
        else:
            odd_list.append(num)
    return even_list, odd_list

# Driver Code
numbers = [1, 2, 3, 4, 5, 6]
even_list, odd_list = divide_list(numbers)
print(even_list) # [2, 4, 6]
print(odd_list)  # [1, 3, 5]"
Create an array of 15 random floats in Python between 0 and 1.,"import random

random_floats = [random.uniform(0, 1) for _ in range(15)]"
"Sort an array of strings based on their length.[""a"", ""abc"", ""ab"", ""abcd"", ""abcde""]","function sortByLength(arr) {
  return arr.sort((a, b) => a.length - b.length);
}

// Usage
sortByLength([""a"", ""abc"", ""ab"", ""abcd"", ""abcde""]); // result: [""a"", ""ab"", ""abc"", ""abcd"", ""abcde""]"
"Generate a random password with 8 characters long including lowercase letters, uppercase letters, and numbers.","function generatePassword() {
  let characters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
  let password = '';

  for (let i = 0; i < 8; i++) {
    let characterIndex = Math.floor(Math.random() * characters.length);
    let character = characters[characterIndex];
    password += character;
  }

  return password;
}

// Usage
generatePassword(); // result: 2Kj93Cc8"
Make an API call to retrieve the latest news headlines for the world.,"function getLatestNews() {
  const url = 'http://newsapi.org/v2/top-headlines?country=world&apiKey=*****';

  return fetch(url)
  .then(response => response.json())
  .then(data => data.articles);
}

// Usage
getLatestNews().then(headlines => console.log(headlines));"
"Configure the following network parametersip_address = ""176.4.3.39"";
netmask = ""255.255.255.0"";
default_gateway = ""176.4.3.253"";","ip_address=""176.4.3.39""
netmask=""255.255.255.0""
default_gateway=""176.4.3.253""

# Configure network
ifconfig eth0 ${ip_address} netmask ${netmask}
route add default gw ${default_gateway}"
Read a line of input from the user and print the length of the line.Hello World.,len(input)
"Print all possible combination and permutations with length 3 for a given array.[1, 2, 3]","def get_permutations(array):
  results = []
  if len(array) == 0:
    return results
  if len(array) == 1:
    results.append([array[0]])
    return results
  for i in range(len(array)):
  permutations = get_permutations(array[:i] + array[i+1:])
    for permutation in permutations:
      results.append([array[i]] + permutation)
  return results"
Design a function in Python to calculate the Fibonacci sequence up to a particular number.,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)

for i in range(1, n+1):
    print(fibonacci(i))"
Find the highest common factor of two numbers 8 and 12.,The highest common factor of 8 and 12 is 4.
"Find the third element of an array [1, 3, 5, 7, 9].",The third element of the array is 5.
"Calculate the amount of UTF-8 bytes need to code string ""Hello"".","The UTF-8 representation of the string ""Hello"" stores it in 5 bytes."
Write a Python code to print a Pascal's triangle with five rows.,"def pascal_triangle(n): 
    trow = [1] 
    y = [0] 
    for x in range(max(n, 0)): 
        print(trow) 
        trow = [ l + r for l, r in zip(trow + y, y + trow)] 
        if(x > 0):
            trow.append(1)
    return n >= 1
pascal_triangle(5)"
"Write a code in Python to toggle all characters in a string.The string is: ""Hello World!""","s = ""Hello World!"" 
res = """" 
for char in s: 
    if char.islower():
        res += char.upper() 
    elif char.isupper():
        res += char.lower()
print(res)"
"Describe the Pandas feature ""DataFrame""","Pandas DataFrame is a two-dimensional data structure, i.e. data is aligned in a tabular fashion in rows and columns. It is a widely used tool for data manipulation and analysis in Python. It offers a variety of features such as filtering, sorting, adding/removing columns, updating the data, indexing, and many others."
Generate a Python function to generate Fibonacci sequence given a number n.n = 5,"def Fibonacci(n):
    a = 0
    b = 1
    if n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2, n+1):
            c = a + b
            a = b
            b = c
        return b"
"Handle the given input and output a CSV string.[{ user_id: 1, name: 'John', age: 15 }, { user_id: 2, name: 'Bob', age: 22 }]","user_id,name,age
1,John,15
2,Bob,22"
"Do some data analysis and find the average of the given data.[12, 15, 6, 8, 10, 20]","double AvgData(int[] input) {
  double sum = 0;
  for (int i = 0; i < input.Length; i++) {
    sum += input[i];
  }
  return sum / input.Length;
}"
"Develop a Python code that takes a string as input and converts it to all uppercase.string = ""Hello World""","def toUpperCase(string):
    return string.upper()"
"Organize the given code snippet into an array data structure.[""1"", ""Hello"", ""there"", ""10"", ""45"", ""Apple""]","var array = [""1"", ""Hello"", ""there"", ""10"", ""45"", ""Apple""];"
"Calling a calculator API, what is the output of the query ""3 * (9 + 5) / 8""?",The output of the query is 9.375.
Compute the parity of the following binary number.10101,The parity of the binary number 10101 is 1 (odd).
"Use the numpy library to write a function that takes an array of integer values, and returns the average of all the values.arr = [1, 2, 3, 4, 5]","import numpy as np
def average(arr):
 return np.average(arr)"
Create a Python class object to store data about a basketball player.,"class BasketballPlayer:
 def __init__(self, name, age, height, weight):
 self.name = name
 self.age = age
 self.height = height
 self.weight = weight"
"Use the requests library to write a Python program that sends an HTTP GET request.url = ""http://example.com""","import requests

response = requests.get(url)"
"Write a regex expression to find all the words in a given sentence that contain 4 characters.sentence = ""This is a test sentence to find all 4 letter words""",\b\w{4}\b
Write a piece of code to store 3 values in a single variable.,"let data = [val1, val2, val3];"
"Debug the following code and make sure the program runs as expected.def number_divisible(x, y):
      for i in range(x):
            if i % y = 0 :
                  print(i)","def number_divisible(x, y):
      for i in range(x):
            if i % y == 0 :
                  print(i)"
"Extend the given code to create a while loop that prints numbers from 1 to 11.i = 1
print(i)","i = 1
while i <= 11:
    print(i)
    i = i + 1"
"Using the given class, write a constructor that creates an instance with age 10.class Person:
    def __init__(self,age):
        self.age = age","class Person:
    def __init__(self,age=10):
        self.age = age"
"Trace the program to find the output.def myfunc(x,y):
    if x == y:
        return x
    else:
        return ""Not equal""

a = myfunc(5,5)
print(a)",5
Classify the given data according to their type.hello,String
"Compare two given lists to find the common elements and store the output in a new list.list1 = [1, 2, 3, 4, 5]
list2 = [2, 4, 6, 8, 10]","common_list = []
for num in list1:
    if num in list2:
        common_list.append(num)"
"Calculate the percentage of numbers in an array that is greater than 5.[3, 4, 7, 8, 9, 11]","def calc_perc(arr):
  count = 0
  for num in arr:
    if num > 5:
      count +=1
  return count/len(arr) *100

calc_perc([3, 4, 7, 8, 9, 11])"
Describe the purpose of machine learning.,"The purpose of machine learning is to develop algorithms and models that are able to learn from data and make predictions or decisions without being explicitly programmed. Machine learning algorithms can discover hidden patterns from large amounts of data and use the knowledge acquired to improve the accuracy of predictions and enhance decision making. Machine learning is used in many application areas, including natural language processing, computer vision, speech recognition, robotics, recommendation systems, and data mining."
Calculate the result when a power of 10 is raised to the power of 3,The result is 1000.
"Identify the type of triangle when given three sidesside1 = 10, side2 = 10, side3 = 8",This is an isosceles triangle.
"Create an API endpoint in Python with Flask that requires authentication.users = {""John"": ""123456"", ""Jenny"": ""456789""}","from flask import Flask, request

app = Flask(__name__)

users = {""John"": ""123456"", ""Jenny"": ""456789""}

@app.route('/', methods=['GET'])
def root():
    if request.authorization and request.authorization.username in users \
            and request.authorization.password == users[request.authorization.username]:
        return 'Authentication successful!' 
    else:
        return 'Authentication failed!'
        
if __name__ == '__main__':
    app.run(debug=True)"
"Create two variables ""name"" and ""city"" and assign your name and the city you live in to them.","let name = 'John Doe';
let city  = 'New York';"
Write a code snippet that checks whether a number is odd or even.,"function isOdd(number) {
    return number % 2 === 1;
}"
"Create a word frequency dictionary for the following sentence:""The quick brown fox jumps over the lazy dog.""","words_frequencies = {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}"
"Sort the following array from smallest to largest.[4, 6, 2, 8]","arr.sort()  # arr = [2, 4, 6, 8]"
"Rewrite the following code snippet to improve readability.def f(x):
  return [x * i for i in range(1, x + 1)]","def f(x):
  numbers = []
  for i in range(1, x + 1):
    numbers.append(x * i)
  return numbers"
"Suggest an alternative for the following code snippet which is faster and less memory intensive.arr = [2, 3, 5, 7]
result = []
for i in range(len(arr)):
  for j in range(i + 1, len(arr)):
    result.append((arr[i], arr[j]))","arr = [2, 3, 5, 7]
result = [(arr[i],arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr))]"
"Modify the following code to make it more efficient by using a while loop.num = 10
i = 1

while i <= 10:
    print(i * num)
    i += 1","num = 10
i = 0

while i < 10:
    i += 1
    print(i * num)"
"Remove the redundancy in the following code and make it more concise.def sum_of_lists(lists):
  result = []
  for i in range(len(lists)):
    current_list = lists[i]
    for j in range(len(current_list)):
      result.append(current_list[j])
  return sum(result)","def sum_of_lists(lists):
  flattened_list = [item for sublist in lists for item in sublist]
  return sum(flattened_list)"
"Given a Python list, write a program to convert all its numbers to strings.lst = [1, 2, 3, 4]",lst = [str(x) for x in lst]
"Suggest an elegant way to print out a list of numbers without using a loop in Python.lst = [1, 2, 3, 4]",print(*lst) # 1 2 3 4
"Rewrite the following code snippet to use the arcpy module.import os

file_paths = [os.path.join('data', f) for f in os.listdir('data') if f.endswith('.tif')]","import os
import arcpy

file_paths = [os.path.join('data', f) for f in arcpy.ListRasters('*.tif')]"
"Implement a function that takes 2 numbers as parameters and returns the greatest common divisor of both numbers.a = 20
b = 25","def gcd(a, b): 
  if a == 0: 
    return b 
  return gcd(b % a, a) 

print(gcd(20, 25)) # 5"
"Suggest a cleaner and more concise way to implement the following code snippet.def find_matching_number(nums, target):
  for num in nums:
    if num == target:
      return True
  return False","def find_matching_number(nums, target):
  return target in nums"
"Suggest how to make the following code more readable using comprehensions.def has_duplicates(arr):
  result = False
  for i in range(len(arr)):
    for j in range(i + 1, len(arr)):
      if arr[i] == arr[j]:
        result = True
  return result","def has_duplicates(arr):
  return len(arr) != len(set(arr))"
Write code to convert a given number expressed in hexidecimal representation to binary.,"def hex_to_bin(hex_str):
    #validating the input
    if hex_str[-1] not in ""0123456789ABCDEF"":
        return ""Invalid Hexadecimal!!""
     
    #using bin() function to get the binary value  
    return bin(int(hex_str, 16))[2:]"
"Edit this piece of Python code to make sure that the decimal is rounded off correctly.a = round(0.54678, 2)","a = round(0.54678, 2)  # rounds off to 2 decimal places"
Classify this sentence into its parts of speech.She is a diligent student.,"Pronoun: She
Verb: is
Determiner: a
Adjective: diligent
Noun: student"
"Create a script to multiply each element in a list by 10.input_list = [1,2,3,4]","def multiply_by_10(input_list):
    new_list = []
    for i in input_list:
        new_list.append(i*10)
    return new_list"
"Make a program to return the longest word in a given list of strings.input_list = [""The"", ""quick"", ""brown"", ""fox"", ""jumped"", ""over"", ""the"", ""lazy"", ""dog""]","def find_longest_word(input_list):
    longest_word = """"
    for i in input_list:
        if len(i) > len(longest_word):
            longest_word = i
    
    return longest_word"
"Search a given list for a specific element and return its position.list_a = [""apple"", ""banana"", ""cherry"", ""date""]
element = ""date","def search_list(list_a, element):
    for i in range(len(list_a)):
        if list_a[i]==element:
            return i
    return -1"
How can you use object serialization in programming?,"Object serialization is a process in programming to convert an object into a format that can be easily stored and accessed. It's commonly used to transfer objects between programs, preserve data across time, or save objects to a database. Object serialization can be useful when you need to store information, pass the object to another program, or transmit it over a network."
"Given a list of integers, write a Python program to create a new list that contains the square of every element in the original list.","def square_numbers(nums):
  return [num**2 for num in nums]"
Check if the given statement is syntactically correct.The car drove quickly down the street.,"Yes, the statement is syntactically correct."
Implement an algorithm with Big O notation of O(n).,"def O_n(items):
  n = len(items)
  for i in range(n):
    print (items[i])"
Convert the following sentence into camelCase.This is a sentence,thisIsASentence
"Explore the data set provided and answer the following questions.Data set:
[
  {'name': 'Alice',  'age': 20, 'profession': 'Teacher'},
  {'name': 'Bob',  'age': 30, 'profession': 'Engineer'},
  {'name': 'Craig',  'age': 40, 'profession': 'Doctor'},
]","What is the oldest person in the data set?
Craig (age 40) is the oldest person in the data set."
"Create a function that takes two strings and out put the number of similar characters in both strings.String 1: coding
String 2: debugging","def char_count(str1, str2): 
    count = 0
    for i in str1:
        if i in str2: 
            count = count + 1
    return count"
Find the surface area of a cube with a side length of 6 cm.,The surface area of a cube with side length of 6 cm is 216 cm2.
"Using MongoDB, update the product price for a specific product.product = {name: “iPhone”, price: 1000}","db.products.update({name:""iPhone""},{$set: {price: 1000}});"
"Your program needs to read a matrix of integers and then print out the sum of each column.matrix = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]","The sum of first column is 12 
The sum of second column is 15 
The sum of third column is 18"
"Write a Python program to fill a matrix with random numbers.rows = 4 
columns = 3","matrix = [[randint(0, 99) for x in range(columns)] for y in range(rows)]"
"You're asked to generate a unique list from a given list of duplicate integers.input_list = [1, 1, 2, 3, 3, 3, 4, 4, 5, 5]",result_list = list(set(input_list))
You need to code a program that prints out the nth Fibonacci number.n=10,"def Fibonacci(n): 
 if n<0: 
 print(""Incorrect input"") 
 elif n==1: 
 return 0 
 elif n==2: 
 return 1 
 else: 
 return Fibonacci(n-1)+Fibonacci(n-2) 

print(Fibonacci(10))"
"Program to swap all even and odd elements in a given array.my_list = [1, 2, 3, 4, 5, 6, 7, 8]","def swap_even_and_odd(my_list):
 for i in range(len(my_list)-1):
 if i % 2 == 0 and my_list[i] % 2 != 0:
 my_list[i], my_list[i+1] = my_list[i+1], my_list[i]
 return my_list

print(swap_even_and_odd(my_list))"
"Code a function that takes an array and counts the odd numbers in it.input_array = [1, 2, 3, 4, 5]","def countOddNumbers(input_array): 
 count = 0
 for num in input_array:
  if num % 2 != 0: 
   count += 1
 return count

print(countOddNumbers(input_array))"
"Your program needs to edit an existing string by replacing certain words with another word.string = ""I am the biggest fan of coding""","def replace_word(string, old_word, new_word):
 return string.replace(old_word, new_word)

print(replace_word(string, ""coding"", ""programming""))"
"Generate a function that takes a given list of strings and orders them by their lengths.words = [""Python"", ""programming"", ""language""]","def sort_by_length(words):
 return sorted(words, key=len) 

print(sort_by_length(words))"
"Develop a program that picks a random item from a given list of strings.words = [""Python"", ""programming"", ""language""]","import random
def random_word(words):
 return random.choice(words)
 
print(random_word(words))"
Write a Python program to calculate the sum of two numbers entered by the user.,"num1 = float(input(""Enter first number: ""))
num2 = float(input(""Enter second number: ""))

# Adding two numbers
sum = num1 + num2

# Display the sum
print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))"
"Write a class in Python for representing a rectangle. This class should store the length and width of the rectangle, and be able to compute its area.","class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
 
    def area(self):
        return self.length * self.width"
Convert the date 1972-05-18 to a UNIX timestamp.,1255908800
"Print all members of the list that are greater than 10.theList = [1, 15, 20, 9, 12, 13]",15
Write a function to calculate the standard deviation of data points in Python.,"def stdev(data):
    avg = sum(data) / len(data)
    total = 0
    for x in data:
        total += (x - avg) ** 2
    return (total / (len(data) - 1)) ** 0.5"
"Rewrite the following program to make it print out the smallest number in a given list.def smallestNumber(numbers):
    largest = numbers[0]
    for number in numbers:
        if largest < number:
            largest = number
    return largest","def smallestNumber(numbers):
    smallest = numbers[0]
    for number in numbers:
        if smallest > number:
            smallest = number
    return smallest"
Generate a program in Go for printing the first 10 prime numbers.,"func printFirstTenPrime(){
    count := 0
    for i := 1; ; i++ {
        if (isPrime(i)) {
            fmt.Printf(""%d "", i)
            count++;
        }
        if (count == 10) {
            break
        }
    }
    fmt.Println()
}

func isPrime(num int) bool {
    for i := 2; i <= num/2; i++ {
        if num%i == 0 {
            return false
        }
    }
    return true
}"
Generate a list of numbers starting from 10 to 50.,"myList = list(range(10,51))"
"Using only the existing variables, edit the code to subtract the `total_price` by 10%.total_price = 100
final_price = total_price",final_price = total_price - (total_price * 0.10)
Refactor the code to use a recursive algorithm instead of a loop to find the factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)"
"Write code to calculate statistical measures such as Standard Deviation, Median and Mean from a given set of numbers.array = [2, 4, 8, 7, 5]","import statistics

mean = statistics.mean(array)
median = statistics.median(array)
std_dev = statistics.stdev(array)"
"Using an existing loop, create code to calculate the sum of all odd numbers up to a given number.","def sum_odd_numbers(num):
    result = 0
    for i in range(1, num+1):
        if i % 2 != 0:
            result += i
    return result"
"Write a code in Python that takes two lists of equal lengths and generates a new list with the elements of both lists combined.list1 = [1, 2, 3]
list2 = [4, 5, 6]","list3 = []

for i in range(len(list1)):
    list3.append(list1[i])
    list3.append(list2[i])"
Design a class to hold calendar date-related information.,"class CalendarDate:
    def __init__(self, day, month, year):
        self.day = day
        self.month = month
        self.year = year

    def get_date(self):
        return self.day, self.month, self.year"
Write a function that returns True if a given number is prime and False if it is not.,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2,n):
        if n % i == 0:
            return False
    return True"
"Classify a given string as either a palindrome, a word or a phrase.racecar","def classify_string(string):
    if string == string[::-1]: 
        return ""Palindrome""
    elif "" "" in string:
        return ""Phrase""
    else:
        return ""Word""

input_string = ""racecar""
print(classify_string(input_string)) # Palindrome"
Calculate the total number of bits in a single byte.,"def bits_in_byte():
     return 8

total_bits = bits_in_byte()
print(total_bits) # 8"
"Retrieve the value of a specific key from a given dictionary.{'name': 'John', 'age': 30, 'occupation': 'teacher'}","def dict_value(data, key):
    return data[key]

data = {'name': 'John', 'age': 30, 'occupation': 'teacher'}
value = dict_value(data, 'name')
print(value) # John"
Slice a string after the nth character.Python,"def slice_string(string, n):
    return string[n:]

input_string = 'Python'
print(slice_string(input_string, 3)) # hon"
Format a given number as a percent value.0.23,"def percent_format(number):
    return '{:.2%}'.format(number)

number = 0.23
print(percent_format(number)) # 23.00%"
"Find the index in an array of a given value.[2, 8, 7, 5, 4], 4","def index_in_array(data, value):
    return data.index(value)

data = [2, 8, 7, 5, 4]
value = 4
print(index_in_array(data, value)) # 4"
"Create a for loop in Python that iterates through the list [1,2,3,4,5].","for item in [1,2,3,4,5]:
    print(item)"
"Edit the following program so that it prints out the result of x multiplied by y.x = 7
y = 5
print(x + y)","x = 7
y = 5
print(x * y)"
"Calculate the total distance traveled by an object with a given initial velocity and accelerationInitial velocity = 12 m/s
 Acceleration = 2 m/s^2",total_distance = 36 m
"Create a program in Python that takes two strings as input and determines if they are anagrams of each otherstring1=""listen"";
string2=""silent"";","def isAnagram(str1, str2): 

 # convert both strings into lowercase 
 str1 = str1.lower()
 str2 = str2.lower()
  
 # sort both strings 
 sortedStr1 = ''.join(sorted(str1)) 
 sortedStr2 = ''.join(sorted(str2)) 
  
 # check if sorted strings are equal 
 if sortedStr1 == sortedStr2: 
     return True
 else: 
     return False

result = isAnagram(string1, string2)
print(result)"
What is the Big-O notation of a given algorithm,"Big-O notation is a method of expressing the time complexity of an algorithm. It quotes the upper bound of an algorithm’s running time in terms of a function of the size of the input data. This is useful for determining the efficacy of an algorithm as different inputs of different sizes require different run times from the same algorithm. Big-O notation is typically expressed in terms of the number of operations on the input data, with each scale increasing the complexity exponentially."
Design an algorithm to traverse a tree in level-order.,"def traverseLevelOrder(root): 
    if root is None: 
        return
  
    # Create an empty queue for level order traversal 
    queue = [] 
  
    # Enqueue root and initialize height 
    queue.append(root) 
  
    while (len(queue) > 0): 
        # Print front of queue and remove it from queue 
        node = queue.pop(0) 
        print node.data, 
  
        # Enqueue left child 
        if node.left is not None: 
            queue.append(node.left) 
  
        # Enqueue right child 
        if node.right is not None: 
            queue.append(node.right)"
"Provide a solution for the following coding challenge:Challenge: Given an array of integers, return the maximum sum of any contiguous subarray of the array.

Example: [34, -50, 42, 14, -5, 86]","Solution:

// Using Kadane's algorithm
function maxSubArraySum(arr) {
  let max_so_far = 0; 
  let max_ending_here = 0; 
 
  for (let i = 0; i < arr.length; i++) { 
    max_ending_here = max_ending_here + arr[i]; 
    if (max_ending_here < 0) {
      max_ending_here = 0; 
    }
    else if (max_so_far < max_ending_here) {
      max_so_far = max_ending_here; 
    }
  } 
  return max_so_far; 
}"
Construct an object-oriented program to print out the numerals from 1 to 10.,"class Program {
  public static void main(String[] args) {
    for (int i=1; i<=10; i++) {
      System.out.println(i);
    }
  }
}"
Design an algorithm to print out the prime numbers between 1 and 100.,"// Function to print prime numbers between 1 and 100 
void print_prime_numbers() 
{ 
    bool prime[100+1]; 
    memset(prime, true, sizeof(prime));
  
    for (int p = 2; p*p < 100+1; p++) 
    {   
        // If prime[p] is not changed, then it is a prime 
        if (prime[p] == true) 
        { 
            // Update all multiples of p 
            for (int i=p*p; i <= 100; i += p) 
                prime[i] = false; 
        } 
    } 
  
    // Print all prime numbers 
    for (int p=2; p <= 100; p++) 
       if (prime[p]) 
          cout << p << "" ""; 
}"
"Write Clojure code to solve the following problem.Problem: Given a list of words and a target word, find the index of the target word in the list.

Example: (""apple"", ""banana"", ""citrus"") ""banana""","(defn solve-problem [lst target]
  (-> lst
      (map #(first %) (map-indexed vector))
      (filter #(= (second %) target))
      (first)
      (first)))"
"Create a function in Dart to generate a series of random numbers within a specified range.Start: 10
End: 20","int start = 10;
int end = 20;

// Function to generate random numbers
int generateRandomNumbers(int start, int end) {
  var random = Random();
  return random.nextInt(end - start) + start;
}"
"Create a Python script to print the 3rd element in a given list.[1,2,3,4,5,6]","list = [1,2,3,4,5,6]

print(list[2]) # Output: 3"
Convert the number to a string.num = 7,"str(num) # Output: ""7"""
What is the difference between = (assignment) operator and == (comparison) operator?,"The = operator assigns a value to a variable, while the == operator checks if two values are equal."
"From a given list of words, create a new list with only the words that contain the letter 'a'.my_list = [""cat"", ""dog"", ""apple"", ""pear""]","new_list = [word for word in my_list if ""a"" in word] # Output: [""cat"", ""apple"", ""pear""]"
"Extract the first 2 elements from a given array.arr = [1, 2, 3, 4, 5]","def extract_first_two(arr):
    return arr[:2]

arr = [1, 2, 3, 4, 5]
result = extract_first_two(arr)
print (result)

# Output: [1, 2]"
"You are given a list of strings and you need to create a dictionary from that list.list1 = [""apple"", ""banana"", ""mango""]","list1 = [""apple"", ""banana"", ""mango""]
result = dict.fromkeys(list1, 0)
print(result)

# Output:  {'apple': 0, 'banana': 0, 'mango': 0}"
Name all the built-in functions in Python,"abs(), all(), any(), ascii(), bin(), bool(), bytearray(), calls(), chr(), dir(), divmod(), enumerate(), eval(), filter(), float(), format(), frozenset(), hex(), int(), isinstance(), len(), list(), map(), max(), min(), oct(), open(), ord(), pow(), print(), range(), reversed(), round(), set(), slice(), sorted(), str(), sum(), tuple(), type(), zip()"
You are asked to create an array of three random numbers between 1 to 10,"import random

random_nums = []
for i in range(3):
    random_nums.append(random.randint(1,10))

print(random_nums)

# Output: [2, 8, 6] (new set of 3 random numbers)"
"You are given a string and asked to find the frequency of each character in the stringstr = ""GPT Model""","from collections import Counter 

def char_frequency(str): 
    return Counter(str) 

str = ""GPT Model""
print (char_frequency(str))

# Output: {'G': 1, 'P': 1, 'T': 1, ' ': 1, 'M': 1, 'o': 2, 'd': 1, 'e': 1, 'l': 1}"
Compute the prime numbers between 1 to 10,"primes = [2, 3, 5, 7]

for num in range(1, 11):
    if num > 1:
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)

print(primes)

# Output: [2, 3, 5, 7] (all the prime numbers between 1 to 10)"
"Write a code snippet to display the name and age of the oldest person in a list called 'people'.people = [{'name':'Jone','age':45}, {'name':'Jane','age':37}, {'name':'Jack','age':48}]","oldest_person = max(people, key=lambda person: person['age'])

print(""Name: {} Age: {}"".format(oldest_person['name'], oldest_person['age']))"
"Create a new array 'b' from array 'a' containing only even numbers.a = [1, 2, 3, 4, 5, 6]",b = [num for num in a if num % 2 == 0]
"Update the following code to fix a syntax error.def add_two_number(a,b):
    return a + b;","def add_two_numbers(a, b):
    return a + b"
"Insert 'value' into the dictionary 'dic' at the key 'key'.dic = {'a':1, 'b':2}
key = 'c'
value = 3",dic[key] = value
Write a function 'play_game' that plays a simple game of rock paper scissors.,"def play_game():
    options = ['rock', 'paper', 'scissors']
    computer_choice = random.choice(options)
    user_choice = input('Choose ""rock"", ""paper"", or ""scissors"": ')

    if user_choice == computer_choice:
        print('It is a tie!')
    elif user_choice == 'rock':
        if computer_choice == 'paper':
            print('Computer wins!')
        else:
            print('You win!')
    elif user_choice == 'paper':
        if computer_choice == 'scissors':
            print('Computer wins!')
        else:
            print('You win!')
    elif user_choice == 'scissors':
        if computer_choice == 'rock':
            print('Computer wins!')
        else:
            print('You win!')"
Create a class 'Fruit' to define a fruit.,"class Fruit:
    def __init__(self, name, color, weight):
        self.name = name
        self.color = color
        self.weight = weight

    def print_info(self):
        print(f'Name: {self.name}')
        print(f'Color: {self.color}')
        print(f'Weight: {self.weight}')"
"Edit the existing code to focus the cursor in the input field.<html>
    <body>
        <input type=""text"" id=""myInput"" />
        <script type=""text/javascript"">
            document.getElementById('myInput').focus();
        </script>
    </body>
</html>","<html>
    <body>
        <input type=""text"" id=""myInput"" autofocus />
        <script type=""text/javascript"">
            document.getElementById('myInput').focus();
        </script>
    </body>
</html>"
"Write a code snippet to add a new element 'z' at the end of list 'x'.x = [1, 2, 3]",x.append('z')
"Write a loop to sum all the elements in list 'l'.l = [1, 2, 3, 4]","s = 0
for num in l:
    s += num"
"Using numpy, find the mean of array 'arr'.arr = [1, 2, 3, 4, 5]","import numpy as np
np.mean(arr)"
"Print the given array of strings in reverse order.[""apple"", ""banana"", ""orange"", ""kiwi""]","print(""kiwi"")
print(""orange"")
print(""banana"")
print(""apple"")"
"Create a URL for the given information.Protocol: https
Subdomain: mypage
Domain: google
Path: search",https://mypage.google.com/search
"Modify the code so that it prints the given string in lowercase letters.String: ""HELLO WORLD""

Code:
#include<iostream>
using namespace std;

int main() {
    string s = ""HELLO WORLD"";

    cout << s << endl;

    return 0;
}","#include<iostream>
#include<algorithm>
using namespace std;

int main() {
    string s = ""HELLO WORLD"";

    // Convert string s to lowercase letters
    transform(s.begin(), s.end(), s.begin(), ::tolower); 
    cout << s << endl;

    return 0;
}"
"Debug the code and make sure it successfully prints out ""Hello World"".#include <iostream> 
using namespace std;

void main () 
{ 
   cout << ""Hello World"" << endl; 
  
   return 0; 
}","#include <iostream> 
using namespace std;

int main () 
{ 
   cout << ""Hello World"" << endl; 
  
   return 0; 
}"
"Using the given data structure, find and return the 3 highest numbers.[2, 4, 8, 10, 6, 5, 7, 11]","def findThreeHighest(arr):
    arr.sort()
    return arr[-1], arr[-2], arr[-3]"
"Create an object for making a copy of a string.String: ""Hello""","String myString = ""Hello"";
String myCopyString = new String(myString);"
"Find and return the longest string in the given array.[""hello"", ""how"", ""are"", ""you"", ""doing""]","def longestString(arr):
    longest_str = ''
    for s in arr:
        if len(s) > len(longest_str):
            longest_str = s
    return longest_str"
"Create a for loop for looping through the elements of a given array.[""Apple"", ""Banana"", ""Orange""]","for item in [""Apple"", ""Banana"", ""Orange""]: 
    print(item)"
"Use the input data to create a bar chart.Data: [(""Apple"", 20), (""Samsung"", 16), (""Google"", 11), (""Sony"", 14)]","import matplotlib.pyplot as plt

items = [x[0] for x in data]
values = [x[1] for x in data]

plt.bar(items, values)
plt.show()"
"Insert a breakpoint just before the return statement.def calculate_the_total(fruit_list):
   total = 0
   for item in fruit_list:
      total += item
   
   return total","def calculate_the_total(fruit_list):
   total = 0
   for item in fruit_list:
      total += item
   import pdb; pdb.set_trace()
   
   return total"
"How many lines of code are in the given snippet?def print_list(my_list):
  for item in my_list:
    print(item)",4 lines of code.
Create a program to enter the data for user registration.,"def get_user_data():
    username = input('Enter your desired username: ')
    email = input('Enter your email address: ')
    password = input('Enter a password: ')
    confirm_password = input('Confirm your password: ')

    # check if the passwords match
    if password != confirm_password:
        print('Passwords do not match')
        return
    
    # save username, email, and password
    user_data = {
        'username': username,
        'email': email,
        'password': password
    }

    return user_data"
"Print prime numbers in the given range.Lower range: 10
Upper range: 30","for num in range(10, 30 + 1):
   # prime numbers are greater than 1
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)"
"Create a program that sorts the integers in the input list into ascending order.List: [4, 9, 8, 1, 5]","def sort_ascending(my_list):
    sorted_list = sorted(my_list)
    return sorted_list

my_list = [4, 9, 8, 1, 5]
sorted_list = sort_ascending(my_list)

print(sorted_list)"
How many lines of code to print Fibonacci sequence of 30 numbers?,The number of lines of code to print Fibonacci sequence of 30 numbers is 5.
"Print a message to the console "" hello world "".","print(""hello world"")"
What is the reason for the failure of a unit test?,"The reason for the failure of a unit test can be any number of things, including incorrect expectations, incorrect or missing test data, or a problem with the code being tested. It can also be due to a lack of suitable code coverage. In any case, it is important to identify the source of the failure to ensure that the issue can be resolved."
"Add two matrices of size 3x3.mat1 = [[1,2,3],
        [4,5,6],
        [7,8,9]]
mat2 = [[10,11,12],
        [13,14,15],
        [16,17,18]]","# adding two matrices
res = [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]

# iterating through rows
for i in range(3):
  # iterating through columns
  for j in range(3):
    res[i][j] = mat1[i][j] + mat2[i][j]

# printing the result
for i in range(3):
  for j in range(3):
    print(res[i][j], end="" "")
  print()

# Output:
11 13 15
17 19 21
23 25 27"
Convert the decimal number 595 to hexadecimal representation.,The hexadecimal representation of 595 is 0x257.
Create a loop that prints all numbers 1 to 100 with the exception of multiples of 5.,"for i in range(1,101):
  if i % 5 != 0:
    print(i)"
Edit the following Python code to print a date in a human-readable form.print(date.today()),"from datetime import date 
print(date.today().strftime(""%B %d, %Y""))"
Write your own version of Fisher-Yates algorithm for shuffling an array.,"def shuffle(arr): 
    for i in range(len(arr)-1, 0, -1): 
        j = random.randint(0, i) 
        arr[i], arr[j] = arr[j], arr[i] 
    return arr"
Generate a random password.,"import string
import random

def generate_password():
    length = random.randint(12, 24)
    pwd = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))
    return pwd"
"Recreate the same result from the given sample output.Sample output:

1
11
21
1211
111221","n = '1'

for x in range(5):
    a, b = '', '' 
    count = 1
  
    for i in range(1, len(n)): 
        if(n[i] != n[i-1]): 
            a += str(count) 
            a += n[i-1] 
            count = 1
        else: 
            count+=1
    
    if(n[i] == n[i-1]): 
        a += str(count) 
        a += n[i] 
  
    n = a
    print(n)"
Write an application that keeps track of tasks and provides status updates for the tasks.,"import sys

#Defining the Task class
class Task(object):
    """"""
    Class to keep track of tasks and provide status updates.
    """"""
    def __init__(self, name, status):
        """"""Initializing instance attributes""""""
        self.name = name
        self.status = status
        self.status_dict = {
            ""Not Started"": 0,
            ""In Progress"": 1,
            ""Completed"": 2
        }

    def get_status(self):
        """"""Returns the current status of the task""""""
        return self.status

    def set_status(self, status):
        """"""Method to update the status of the task""""""
        if(status not in self.status_dict.keys()):
            sys.exit(""Invalid status!! Please enter a valid status"")

        #Valid status so updating the task's status
        self.status = status"
"Create a class called Ball which has three dimensional coordinates x, y and z.","class Ball:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z"
Write a class that simulates a die with 6 sides.,"import random

class Die:
    def __init__(self):
        self.sides = 6

    def roll(self):
        return random.randint(1, self.sides)"
"Create a dictionary comprehension to create a dictionary with the values from the given list.list = [""a"",""b"",""c""]",dict = {x:x for x in list}
"Suppose you have a 3x2 matrix, A. Find the transpose of A.A = [1 9 7; 8 0 6];",A_Transpose = A'
"Define a class named ""Day"" in Python to represent a day of the week.","class Day:
    def __init__(self):
        self.day = """"

    def set_day(self, day):
        self.day = day

    def get_day(self):
        return self.day"
"Given a list of strings, use Python to print the count of strings that start with the letter 'a'.string_list = [""apple"",""mango"",""banana"",""avocado""]","count = 0
for string in string_list:
    if string.startswith(""a""):
        count += 1
 
print(""The count of strings starting with 'a' is:"", count)"
Generate a piece of code that defines and calls a function in Python.,"def myFunction():
   print(""Hello World"")
myFunction()"
"Create a regular expression that matches a string that begins with ""abcd"" and ends with ""efgh"".",/^abcd.*efgh$/
"Insert the proper code to convert the given address from string to a dictionary.address = ""901 Grand Absinth Avenue,Anytown, ST, 98765""","address = ""901 Grand Absinth Avenue,Anytown, ST, 98765""

address_dict = {
    ""street"": address.split("","")[0],
    ""city"": address.split("","")[1],
    ""state"": address.split("","")[2],
    ""zip"": address.split("","")[3]
}"
"Reverse the given input string.string = ""code""","string = ""code""

reversed_str = string[::-1] 
print(reversed_str) # Output: edoc"
"Using the comment as a guide, create a function to calculate the area of a triangle.","def area_of_triangle(base, height):
    """"""Calculate the area of a triangle.""""""
    area = (0.5 * base * height)
    return area"
"Create a set of the characters present in the given string.string = ""mississippi""","string = ""mississippi""

characters = set(string)
print(characters) # Output: {'i', 's', 'p', 'm'}"
Create an array with 10 random numbers in the range of 1 to 50.,"import random

nums = [random.randint(1, 50) for _ in range(10)]
print(nums) # Output: [7, 44, 15, 47, 1, 31, 29, 39, 33, 11]"
Reconstruct the given code snippet.,"def is_year_leap(year):
    # leap year is divisible by 4
    # However, if year is divisible by 100, then it is not a leap year
    # Unless year is divisible by 400
    leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
    return leap_year"
"Create a variable to store the given number as an integer.num = ""42""","num = ""42""

num_int = int(num)
print(num_int) # Output: 42"
"Given two sorted lists of numbers, write a code to merge them.list1 = [1, 2, 3, 4]
list2 = [3, 4, 5, 6]","def merge_lists(list1, list2):
    merged_list = []
 
    i, j = 0, 0 
    while i < len(list1) and j < len(list2):
        if list1[i] <= list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
 
    if i == len(list1):
        merged_list.extend(list2[j:])
    else:
        merged_list.extend(list1[i:])
 
    return merged_list

merged_list = merge_lists(list1, list2)
print(merged_list)"
"Generate a random password with a combination of letters, numbers and special characters.","import random

def generate_password():
    letters = 'abcdefghijklmnopqrstuvwxyz'
    numbers = '0123456789'
    special_characters = '@#$%^&*()'
    
    password = ''

    password += random.choice(letters)
    password += random.choice(numbers)
    password += random.choice(special_characters)

    for _ in range(6):
        source = random.choice([letters, numbers])
        password += random.choice(source)

    return password

print(generate_password())"
"Construct a pandas dataframe from 4 dictionaries.d1 = {
 'name' : [""Alice"", ""Bob"", ""Charlie""],
 'age' : [24, 45, 37],
}
 
d2 = {
 'weight' : [87, 66, 65],
 'height' : [165, 179, 173],
}
 
d3 = {
 'income' : [3000, 4500, 4800],
 'job' : [""engineer"", ""teacher"", ""secretary""],
}
 
d4 = {
 'city' : [""Glasgow"", ""New York"", ""Paris""],
 'country' : [""Scotland"", ""USA"", ""France""],
}","import pandas as pd
 
df = pd.DataFrame({
 'name': d1['name'], 
 'age': d1['age'],
 'weight': d2['weight'],
 'height': d2['height'],
 'income': d3['income'],
 'job': d3['job'],
 'city': d4['city'],
 'country': d4['country']
 })"
Compute the natural logarithm of 500 using Python.,"import math
 
print(math.log(500))"
Calculate the angle of elevation when a ball is thrown upward with initial velocity of 20m/s,"The angle of elevation can be calculated as:

angle = arctan(20m/s/9.8m/s^2) = 73.189 degrees"
"Transform the following piece of code into a shorter versionif (x > 0 && x < 10) {
  return true;
} else {
  return false;
}",return (x > 0 && x < 10);
"Scramble a given array so that it appears in a random order[3, 7, 8, 2. 5]","def scramble(arr): 
  for i in range(len(arr) - 1): 
      j = random.randint(0, len(arr)-1) 
      arr[i], arr[j] = arr[j], arr[i] 
  return arr 

scramble([3, 7, 8, 2, 5])"
Create a computer algorithm to determine the validity of a sudoku puzzle,"def is_valid_sudoku(puzzle): 
  size = len(puzzle) 
  for row in range(len(puzzle)): 
    seen = set() 
    for col in range(size): 
      number = puzzle[row][col] 
      if number != 0: 
        if number in seen: 
          return False 
        seen.add(number) 
  for col in range(3): 
    seen = set() 
    for row in range(size): 
      number = puzzle[row][col] 
      if number != 0: 
        if number in seen: 
          return False 
        seen.add(number) 
  # and so on 
  return True"
"Write a function that accepts an integer value n and creates an n by n matrix, with all elements initialised to zero.","def create_matrix(n):
    matrix = []
    for i in range(n):
        row = []
        for j in range(n):
            row.append(0)
        matrix.append(row)
    return matrix"
Create a regular expression for matching the following pattern: words starting with 'b' followed by three times the letter 'a'.,b(a){3}
Return true or false for checking if a character is alphanumeric or not.A character '&',False
"Write a function in Python to compute average of the numbers in a given list.[2, 4, 5, 7]","def compute_avg(numbers):
    total = 0
    for num in numbers:
        total += num
    return total/len(numbers)"
"Compute the sum of numbers in a given tree.Tree Structure
    5
   / \
  3   7","def compute_sum(root):
    if not root:
        return 0
    left_sum = compute_sum(root.left)
    right_sum = compute_sum(root.right)
    return root.val + left_sum + right_sum"
"Sort a list of words in alphabetical order using C.words = [""hello"", ""world"", ""apple"", ""zebra""]","#include<stdio.h> 
#include<string.h> 
  
int main() 
{ 
    char words[][10] = {""hello"", ""world"", ""apple"", ""zebra""};
    int n = 4;
    int i, j; 
  
    // sorting the phrases
    for (i = 0; i < n-1; i++) 
       for (j = i+1; j < n; j++) 
          if (strcmp(words[i], words[j]) > 0) 
          { 
              char temp[10]; 
              strcpy(temp, words[i]); 
              strcpy(words[i], words[j]); 
              strcpy(words[j], temp); 
          } 
  
    printf(""In lexicographical order: \n""); 
    for (i = 0; i < n; i++) 
       printf(""%s\n"", words[i]); 
  
    return 0; 
}"
Implement a decision tree as a class in Python.,"class DecisionTree:
    def __init__(self,X,y):
        self.X = X
        self.y = y

    def fit(self, X,y):
        # Implement decision tree fitting algorithm

    def predict(self,X):
        # Implement decision tree prediction algorithm"
"Iterate through a list and print only the elements that include the character 'a'.list_items = [""apple"", ""banana"", ""carrot"", ""durian""]","for item in list_items:
    if 'a' in item:
        print(item)

# Output
apple
banana
carrot"
Use for loop to print all numbers from 1 to 100 in separate lines.,"for i in range (1, 101):
    print(i)"
Calculate the sum of the numbers from 1 to 10 and print out the result.,"sum = 0

for n in range (1, 11):
    sum += n

print(sum)"
Generate a Fibonacci sequence up to the 12th term.,"a, b = 0, 1

for i in range (12): 
    print(a) 
    a, b = b, a + b 

# Output 
0 1 1 2 3 5 8 13 21 34 55 89 144"
"Create a class named ""Vector"" with two attributes ""x"" and ""y"" and define a ""length"" method that returns the length of the vector.","class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def length(self):
        return (self.x**2 + self.y**2)**0.5"
"Create a function that multiplies two numbers and return the result.a = 10
b = 5","def multiply(a, b):
    return a * b

result = multiply(a, b)
print(result)"
"Find the mean of the list of numbers [1,2,3,4,5,6,7]","list = [1,2,3,4,5,6,7]

sum = 0
for i in list:
    sum += i

mean = sum/len(list)

print(mean)"
"Sort the list of numbers [3,2,7,9,1] in ascending order.list = [3,2,7,9,1]","list.sort()
print(list)

# Output
[1,2,3,7,9]"
Create an array of length 10 and fill each element randomly from 0 to 9.,"import random

arr = []
for i in range(10):
    arr.append(random.randint(0, 9))

print(arr)"
"Find the number of elements in an array of integers [1,2,3,4,5].arr = [1,2,3,4,5]","length = len(arr)
print(length)

# Output
5"
"Using regex, replace all occurrences of 'cat' with 'dog' in the following text.text = ""I saw a cat in the park.""","import re

text = ""I saw a cat in the park.""

result = re.sub(r'cat', 'dog', text)
print(result)

# Output
I saw a dog in the park."
Create a loop that runs from 1 to 10 and prints the square of each number.,"for i in range (1, 11):
    print(i**2)"
How would you use the 'enumerate()' function in a for loop to print numbers from 0 to 5?,"for i, item in enumerate(range(6)):
    print(i)"
"Create a class ""Addition"" with a method called ""add"" which takes two integers as inputs and returns the sum of the two numbers?","class Addition:
    def add(self, x, y):
        return x + y"
"Create a function that checks for a specific word in the string.myString = ""This is a simple sentence.""","def check_word(myString, word):
    if word in myString:
        return True
    return False"
"Identify a function from the following code snippet which adds an element to the given array.arr = [1, 2, 3]
def add_element(arr, element):
    return arr.append(element)","The function is add_element(arr, element), which adds the given element to the given array and returns the modified array."
"Given a Python list, display the total number of elements in the list.mylist = [1, 2, 3, 4, 5]",The total number of elements in the list is 5.
Write a function which takes a list of integers and returns an integer which is the product of all the integers in the list.,"def product_of_list(nums):
    product = 1
    for num in nums:
        product *= num
    return product"
Design a function to get the length of the longest increasing subsequence in a given list of integers.,"def longest_increasing_subsequence_length(nums):
    n = len(nums)
    LIS = [1] * n

    for i in range(1, n):
        for j in range(0, i):
            if nums[i] > nums[j] and LIS[i] < LIS[j] + 1:
                LIS[i] = LIS[j] + 1

    return max(LIS)"
"Create a function in TypeScript that takes two strings of equal length and returns the number of characters which match at the same position in the strings.""abcdefg"", ""hijklmn""","function countMatchingChar(str1: string, str2: string): number {
    let count = 0;
    if(str1.length != str2.length) {
        return -1; // handle unequal lengths
    }
    for(let i = 0; i < str1.length; i++) {
        if(str1.charAt(i) === str2.charAt(i)) {
            count++;
        }
    }
    return count;
}"
"Suggest ways to improve the performance of the following list implementation.class List: 
  def __init__(self): 
    self.items = [] 
  
  def append(self, item):
    self.items.append(item) 
    
  def remove(self, item): 
     self.items.remove(item)","class List: 
   def __init__(self): 
     self.items = [] 
   
   def append(self, item):
     if item not in self.items:
       self.items.append(item) 
       
   def remove(self, item): 
      try:
        self.items.remove(item)
      except ValueError:
        pass
  
   def remove_at_index(self, index):
    del self.items[index]
  
   def search(self, item):
    return item in self.items"
How would you delete every third element of a given linked list?,"We can traverse the linked list and keep track of the count of the visited nodes. For every node whose count is divisible by 3, we delete the node by adjusting the references of the preceding and succeeding nodes."
"Given a matrix, write a program that finds its determinant in Python.[[a, b],  [c, d]]","def determinant(matrix): 
  a = matrix[0][0]
  b = matrix[0][1]
  c = matrix[1][0]
  d = matrix[1][1]
  return a*d - b*c"
"Create a function to combine two arrays, sorting first by grade in ascending order, and then by age in descending order.Array 1: [['Tom', 10], ['Sam', 8], ['Bob', 8]]
Array 2: [['Tom', 15], ['Sam', 12], ['Bob', 13]]","def combine(arr1, arr2): 
  res = [] 
  # Combine two arrays 
  for i in range(len(arr1)): 
    res.append(arr1[i] + arr2[i]) 
  
  # Sort by grade in ascending order
  res.sort(key=lambda x: x[1]) 
  
  # Sort by age in descending order
  res.sort(key=lambda x: x[2], reverse=True) 
  
  return res"
"Combine two sorted Arrays into one sorted Array.arr1 = [1, 5, 8, 9, 10];
arr2 = [2, 3, 4, 6, 7];","function combineArray(arr1, arr2) {
    let combined = [];
    
    let l = 0;
    let r = 0;

    while ((l < arr1.length) && (r < arr2.length)) {
        if (arr1[l] < arr2[r]) {
            combined.push(arr1[l]);
            l++;
        } else {
            combined.push(arr2[r]);
            r++;
        }
    }

    while (l < arr1.length) {
        combined.push(arr1[l]);
        l++;
    }

    while (r < arr2.length) {
        combined.push(arr2[r]);
        r++;
    }
    return combined;
}

const result = combineArray(arr1, arr2);
console.log(result);  // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
"Create a MongoDB query to find documents with a field value within a certain range.collectionName: shapes
fieldName: area
range: [200, 500]","db.shapes.find( { area: { $gte: 200, $lte: 500 } } )"
"Make a call to the ""getProducts"" API Endpoint.","fetch('https://api.example.com/getProducts', {
    method: 'GET',
    headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
}).then(res=>res.json())"
"Update a MongoDB document such that it replace a specific field with a new value.db_name: ""users""
collection_name: ""customers""
field_name: ""name""
new_value: ""John Doe""","db.customers.update(
    { name: ""John Doe"" },
    {
        $set: {
            name: ""John Doe""
        }
    }
)"
"Write a Python code to remove the characters 'a', 'b', and 'c' from a given string.String: abcabcabc","def remove_chars(string):
    for char in ""abc"":
        string = string.replace(char, '')
    return string"
"Comment the code snippet.i = 0
while i < 10:
    print(i)
    i = i + 1","# This program will print numbers from 0 to 9
# i is used to keep track of the loop's iteration count
# The while block will be run until i reaches 10
# Each iteration, i is incremented by 1"
Separate the numbers in the given string variable.String: 1a2b34c,nums = [int(x) for x in my_string if x.isdigit()]
What are the similarities between dictionaries and Lists in Python?,"Both dictionaries and lists are container data structures in Python which allow for the storage and retrieval of data. They are both mutable, meaning the contents can be updated, changed and manipulated. They also both contain an ordered sequence of elements, allowing for indexing into each one. However, dictionaries use a key:value pair, whereas lists contain only values."
"Write a Python code to sort the names into ascending order.names = [""Vladimir Putin"",""Joe Biden"",""Xi Jinping""]",names.sort()
"Generate a new List from the given list such that the elements are squares of the preceding numbers.givenList = [1, 2, 3, 4]",newList = [x**2 for x in givenList]
Develop a machine learning model in Python to classify emails as either important or not important.,"import numpy as np
import pandas as pd
import sklearn
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# Read the dataset
data = pd.read_csv('emails.csv')

# Pre-process the dataset for label encoding and feature extraction
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(data.category.values)

tfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=2)
X = tfidf_vectorizer.fit_transform(data.body.values)

# Split the dataset into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Multinomial Naive Bayes model
model = MultinomialNB()
model.fit(X_train, y_train)

# Evaluate the model
score = model.score(X_test, y_test)
print('Test accuracy: ', score)"
"Write a code that takes a given list and sorts them using heapsort.arr = [1, 6, 5, 4, 8, 2]","def heapsort(arr):
    # Build the max heapify 
    n = len(arr) 
    for i in range(n, -1, -1): 
        heapify(arr, n, i) 

    # One by one extract elements 
    for i in range(n-1, 0, -1): 
        arr[i], arr[0] = arr[0], arr[i] # swap 
        heapify(arr, i, 0) 

def heapify(arr, n, i): 
    largest = i # Initialize largest as root 
    l = 2 * i + 1     # left = 2*i + 1 
    r = 2 * i + 2     # right = 2*i + 2 
  
    # check if left child of root exists and is 
    # greater than root 
    if l < n and arr[i] < arr[l]: 
        largest = l 
  
    # check if right child of root exists and is 
    # greater than root 
    if r < n and arr[largest] < arr[r]: 
        largest = r 
  
    # Change root, if needed 
    if largest != i: 
        arr[i],arr[largest] = arr[largest],arr[i] # swap 
  
        # Heapify the root. 
        heapify(arr, n, largest) 

# Driver code 
if __name__ == ""__main__"":
    arr = [1, 6, 5, 4, 8, 2]
    heapsort(arr) 
    n = len(arr) 
    print (""Sorted array is"") 
    for i in range(n): 
        print (""%d"" %arr[i]),"
"Update the below code with a flag to control the output according to the argument givenflag = False
str1 = ""Hello World""

if flag == False:
    print(str1)","flag = False
str1 = ""Hello World""

if flag:
    print(str1)
else:
    print(""The flag is set to False, so nothing is printed"")"
"Change the following code for the output to be a listnum1 = 5
num2 = 7","num1 = 5
num2 = 7

output = [num1, num2]
print(output) # Output: [5, 7]"
"Suggest a completion for the following code so that all the words in a list are printed in reversewords = ['hello', 'world', 'my', 'name', 'is', 'john']

for word in words:","words = ['hello', 'world', 'my', 'name', 'is', 'john']

for word in words:
    print(word[::-1], end="" "")

# Output: olleh dlrow ym eman si nhoj"
"Create a Python function that takes an object as an input and returns its names and values.Input: {""name"": ""John"", ""age"": 25, ""cities"": [""New York"", ""Boston""]}","def get_object_details(input_obj):
    output = []
    for key, value in input_obj.items():
        if type(value) == list:
            value = "", "".join(value)
        output.append(f""{key}: {value}"")
    return ""\n"".join(output)"
"Construct a for loop in Python to iterate through the list [3, 2, 5, 4, 6] in reverse order.","for num in reversed([3, 2, 5, 4, 6]):
    print(num)"
"Given a comma-separated string with numbers, remove the max value from it and output a string with comma-separated values8, 12, 5, 2, 18","""8, 12, 5, 2"""
"Combine the two given strings and capitalize the resulting letters.Hello
World","def capitalize_combined_string(str1,str2):
    combined_str = str1 + str2
    return combined_str.upper()"
"Given a two-dimensional array, write a Python code to sum each row in the array and store it in a new array.[[1, 2, 3], [4, 5, 6], [7, 8, 9]]","def sum_row_in_2d_array(arr):
    result = []
    # iterating through array
    for sub_arr in arr:
        sum=0
        # iterating through sub array
        for element in sub_arr:
            sum += element
        # Adding sum to result list
        result.append(sum)
 
    return result"
"Retrieve the name of the third author from a given list of authors.Authors: John Doe, Jane Smith, Tom Johnson",Tom Johnson.
"Compute the mean of the given data set.Data set: {4, 5, 6, 7}",The mean of the data set is 5.5.
Convert the following temperature to its equivalent Fahrenheit measurement.Temperature: 20 degrees Celsius,The equivalent Fahrenheit measurement is 68 degrees Fahrenheit.
"Find the output of the following array after sorting it in ascending order.array = [6, 2, 9, 4, 1]","[1, 2, 4, 6, 9]"
Generate a Fibonacci number sequence with n numbers10,"[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
"Generate all possible strings of length n using A, B and C3","['AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB', 'ACC', 'BAA', 'BAB', 'BAC', 'BBA', 'BBB', 'BBC', 'BCA', 'BCB', 'BCC', 'CAA', 'CAB', 'CAC', 'CBA', 'CBB', 'CBC', 'CCA', 'CCB', 'CCC']"
"Given an array with n elements, find the maximum element of the array.[1, 10, 5, 33, 4]",33
"Write a Python program to check if a substring is present in a set of stringssubstring: ""abc""
strings: [""hoabcll"", ""aaabcbc"", ""abcbal""]",True
"You need to delete a given pattern of characters from a stringstring: ""aaabbbccc""
pattern: ""ab""","""ccc"""
"Use Python to filter out all the numbers divisible by 3 from a given list.numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]","def filter_list(numbers):
    return [x for x in numbers if x % 3 == 0]

filter_list(numbers) # Output: [3, 6, 9]"
"Create an algorithm that sorts an array of words in alphabetical order.words = [ 'hello', 'this', 'is', 'a', 'test' ]","def alphabeticSort(words):
    words.sort() 
    return words 

alphabeticSort(words) # Output: ['a', 'hello', 'is', 'test', 'this']"
Check if the following string can be used as a valid e-mailString: myName@domain,"Yes, this string can be used as a valid e-mail."
"Check if the following statement is a valid python syntaxStatement: for x in range(0, len(listname))","Yes, the statement is a valid Python syntax."
"Given a string s and a list of words words, write a program to find all occurrences of words in the string s.s = 'The quick brown fox jumps over the lazy dog.'
words = ['quick', 'fox', 'dog']","def find_words(s, words):
    occurrence_indices = []
    for word in words:
        start = 0
        while True:
            index = s.find(word, start)
            if index == -1:
                break
            else:
                occurrence_indices.append(index)
                start = index + 1
    return occurrence_indices"
Generate a random string of length 8 with characters from a-zA-Z0-9.,"import random
import string

def random_string():
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(8))"
"Implement a function to remove all occurrences of string t from string s.s = 'The quick brown fox jumps over the lazy dog.'
t = 'the'","def remove_string(s, t):
    if t not in s:
        return s
    s = s.lower()
    t = t.lower()
    indices = []
    start = 0
    while True:
        index = s.find(t, start)
        if index == -1:
            break
        indices.append(index)
        start = index + 1
    offset = 0
    for index in indices:
        s = s[:index - offset] + s[index - offset + len(t):]
        offset += len(t)
    return s"
"Implement a class to represent a vector, with initial vector and a scaler. Include methods to add, subtract and multiply two vectors.","class Vector():
    def __init__(self, vector, scaler):
        self.vector = vector
        self.scaler = scaler

    def add_vector(self, other_vector):
        result_vector = []
        for i in range(len(self.vector)):
            result_vector.append(self.vector[i] + other_vector.vector[i])
        return Vector(result_vector, self.scaler)
    
    def sub_vector(self, other_vector):
        result_vector = []
        for i in range(len(self.vector)):
            result_vector.append(self.vector[i] - other_vector.vector[i])
        return Vector(result_vector, self.scaler)

    def mul_vector(self, scaler):
        result_vector = []
        for element in self.vector:
            result_vector.append(element * scaler)
        return Vector(result_vector, self.scaler)"
"Given two lists of strings, write a program to combine them into a dictionary whose keys are the strings in one list and values are the strings in the other list.list1 = [“cat”, “dog”, “horse”]
list2 = [“meow”, “bark”, “neigh”]","def combine_lists(list1, list2):
    dictionary = dict()
    for i in range(len(list1)):
        dictionary[list1[i]] = list2[i]
    return dictionary"
"Given two strings s1 and s2, write a program to edit s1 to s2 by removing, inserting or replacing one character in s1.s1 = “cat”
s2 = “hat”","def edit_strings(s1, s2):
    s1_arr = list(s1)
    s2_arr = list(s2)

    i = 0
    while i < len(s1):
        if s1[i] == s2[i]:
            i += 1
        else:
            # remove character
            del s1_arr[i]
            if s1_arr == s2_arr:
                return 'removal'
            # insert character
            s1_arr.insert(i, s2[i])
            if s1_arr == s2_arr:
                return 'insertion'
            # replace character
            s1_arr[i] = s2[i]
            if s1_arr == s2_arr:
                return 'replacement'
            break
    return None"
"Given a string s, write a program to classify it as a palindrome or not.s = “malayalam”","def is_palindrome(s):
    n = len(s)
    for i in range(n//2):
        if s[i] != s[n-1-i]:
            return False
    return True"
"Describe a data structure for storing the given data.Name, Phone number, Address",A hash table data structure can be used to store the given data. The name will be used as the key and then an associative array or a structure can be used to store the phone number and address associated with the name.
Retrieve the third item from a linked list.,"def get_third_item(linked_list):
    curr_node = linked_list
    for i in range(2):
        curr_node = curr_node.next # Moves onto the third item. 
    return curr_node.data # Returns the data of the third item."
"Convert the given code by replacing for loop with a while loop.for i in range(5):
    print(i)","i = 0
while i < 5:
    print(i)
    i += 1"
Retrieve the word with the second highest frequency from a given text.Text: This is a sample text with a lot of words.,"words = text.split()
freq_dict = {}
for word in words:
    if word in freq_dict.keys():
        freq_dict[word] += 1
    else:
        freq_dict[word] = 1
sorted_words = sorted(freq_dict.items(), reverse=True, key=lambda x: x[1])
second_highest_freq_word = sorted_words[1][0]
print(second_highest_freq_word)"
"Create a function that calculates the total amount of money after 5 years given an initial amount of money and a certain rate of interest.Initial amount: 1000
Rate of interest: 2%","def total_amount(initial, interest): 
    total = initial 
    for i in range(1, 5): 
        total += total * (interest/100) 
    return total"
Write a basic script in Python that counts from 0 to 10.,"for i in range(11):
    print(i)"
"How would you delete the element ""Apple"" from the following list?[""Pear"", ""Grape"", ""Apple"", ""Banana"", ""Mango""]","fruit_list = [""Pear"", ""Grape"", ""Apple"", ""Banana"", ""Mango""]
fruit_list.remove(""Apple"")"
"Write a short piece of code in Python to calculate the area of a triangle with the sides 6 cm, 8 cm, and 10 cm.","def calculate_triangle_area(side1, side2, side3):
    '''This function calculates the area of a triangle given three sides.'''
    s = (side1 + side2 + side3) / 2
    return ((s*(s-side1)*(s-side2)*(s-side3))**0.5)

area = calculate_triangle_area(6,8,10)
print(f""The area of the triangle is {area} cm2"")"
How would you use a for loop in Python to print the sum of all even numbers between 50 and 100?,"total = 0
for i in range(50, 101):
    if i % 2 == 0:
        total += i
print(f""The sum of all even numbers between 50 and 100 is {total}"")"
"In Python, construct a function to fit a curve to a given set of data points.xdata = [0, 1, 2, 4, 11, 18]
ydata = [2, 3, 4, 6, 12, 17]","from scipy.optimize import curve_fit

def func(x, a, b, c):
    return a*x**2 + b*x + c

xdata = [0, 1, 2, 4, 11, 18]
ydata = [2, 3, 4, 6, 12, 17]

popt, pcov = curve_fit(func, xdata, ydata)"
Develop a program to convert an infix expression to prefix notation.A*(B+C)-D/(E+F),"def infix_to_prefix(exp): 
	# stack to store operators
	stack = [] 

	# prefix expression
	pref_exp = """" 
	
	# traverse through the expression
	for char in exp: 
		
		# if the character is an operand 
		# add it to prefix expression
		if char.isalpha(): 
			pref_exp += char 
		
		# if the character is an operator
		elif char in ""*/+-^"": 
			
			# push the operator to the stack 
			stack.append(char) 

		# if the character is ')' 
		elif char == ')': 
			
			# pop all the operators from 
			# the stack until '(' is found 
			while(stack[-1] != '('): 
				pref_exp += stack.pop() 
			
			# remove '(' from the stack 
			stack.pop() 
			
	# add all the operators to the prefix expression 
	while len(stack) != 0: 
		pref_exp += stack.pop() 
        
	return pref_exp"
Create a class in Python that implements the __len__ method to return the length of a given string.,"class StringLength:
    def __len__(self, string):
        return len(string)"
"List all possible combinations of three elements from a given array.[1, 2, 3, 4]","[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]"
Develop a new class in Python to represent a Rectangle object with getArea() and getPerimeter() methods.,"class Rectangle: 
    def __init__(self, length, width): 
        self.length = length 
        self.width = width 

    def getArea(self): 
        return self.length * self.width 

    def getPerimeter(self): 
        return 2 * (self.length + self.width)"
"What is object-oriented programming, and what are the benefits of using it?","Object-oriented programming (OOP) is a programming approach that is based on the concept of objects. It is used to create a model of a real or abstract system to make programming more efficient, easier to debug, and more maintainable. OOP allows developers to write code that is reusable and maintainable, as it enables the creation of components that can be adapted and used in a variety of different contexts. Additionally, OOP allows for better communication between different parts of a program, as components can communicate with each other in a simpler and more understandable manner."
Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string.,"def freq_dict(string):
 freq = {}
 for c in string:
 if c in freq:
 freq[c] += 1
 else:
 freq[c] = 1
 return freq"
Write a Python function to decode a given string (with special characters) to its original form.,"def decode_string(string):
 return string.encode().decode('unicode_escape')"
"Write a Python program to test whether all elements of a given list are equal or not.[3,3,3]","def all_elements_equal(lst):
 return lst[1:] == lst[:-1]"
Extend the program from Question 4 to allow the user to specify the upper limit.,"#include <iostream>

int main()
{
    int n;
    std::cout << ""Enter the upper limit: "";
    std::cin >> n;

    for (int i = 2; i <= n; i += 2)
    {
        std::cout << i << "" "";
    }
    std::cout << std::endl;

    return 0;
}"
Write a regular expression to match all strings which contain at least one character from A-F.,[A-F].*
Initialize a list to store the square of all numbers from 1 to 10.,"my_list = [x**2 for x in range(1, 11)]"
"Given the following list, use list comprehension to create a new list with the string ""student_"" added to the beginning of each student's name.students = ['John', 'Randy', 'Marie', 'Clare']","new_list = [""student_"" + name for name in students]"
"Implement the insertion sort algorithm.[4, 6, 3, 8, 1, 8]","def insertion_sort(input_list):
    for index in range(1, len(input_list)):
        current_value = input_list[index]
        position = index

        while position > 0 and input_list[position - 1] > current_value:
            input_list[position] = input_list[position - 1]
            position = position - 1

        input_list[position] = current_value
    return input_list"
Which keyword is used to define a function in Python?,"The keyword used to define a function in Python is ""def""."
Design a data structure to keep track of a student's marks for a given course.,"class StudentMark{ 
   //stores student ID 
   int student_id; 
   
   //stores course name 
   string course_name; 
   
   //stores marks 
   int marks; 
   
   //constructor 
   StudentMark(int student_id, string course_name, int marks) 
   { 
      this->student_id = student_id; 
      this->course_name = course_name; 
      this->marks = marks; 
   } 
}"
"Given a dictionary, write a function to count the number of items in the dictionary.dictionary = {'name': 'John', 'age': 30}","def count_items(dict):
    item_count = 0
    for key in dict:
        item_count += 1
    return item_count"
"Write a Python program to abbreviate a name.name = ""John Smith""","def abbreviateName(name): 
    split_name = name.split(' '); 
    abbrev_name = str(split_name[0][0] + '.' + split_name[1]); 
    return abbrev_name;"
Write a function to compute the Fibonacci numbers and the sum of their squares.,"def fibonacci (n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

def sum_of_squares (n):
    result = 0
    for i in range(n+1):
        result += fibonacci(i)**2
    return result"
"Write a function that takes two strings and determines if they are an anagram.string1 = ""converse""
string2 = ""conserve""","def is_anagram(str1, str2): 
    # Get lengths of both strings 
    n1 = len(str1) 
    n2 = len(str2) 
  
    # If the length of both strings are not same,  
    # then they cannot be anagram 
    if n1 != n2: 
        return 0
  
    # Sort both strings 
    str1 = sorted(str1) 
    str2 = sorted(str2) 
  
    # Compare sorted strings 
    for i in range(0, n1): 
        if str1[i] != str2[i]: 
            return 0
  
    return 1

is_anagram(string1, string2) // 1"
"Given two linked list, write a Python program to compare them and output true if they are equal, false if nothead1 -> 20 -> 40 -> 60 -> 90
head2 -> 60 -> 20 -> 90 -> 70",false
Create a type hint for a given parameter.Parameter: data,data: List = []
"Write a loop to print out all the elements in the given dictionary.my_dict = {""a"": 1, ""b"": 2, ""c"": 3}","for key, value in my_dict.items():
    print(f""{key}:{value}"")"
Suggest a condition for the given if statement to make sure the given number is between 1 and 10.number = 8,"if 1 <= number <= 10:
    print(""The number is between 1 and 10"")"
Create a class to store data of a patient's medical record.,"class PatientRecord:
    def __init__(self, name, age, height, weight, medical_history):
        self.name = name
        self.age = age
        self.height = height
        self.weight = weight
        self.medical_history = medical_history"
"Suggest an expression that can be used to convert a given list to a set.my_list = [1, 2, 3, 3, 3, 4]",my_set = set(my_list)
"Convert the given string to a list containing the words in the string.my_string = ""This is a string""","my_list = my_string.split("" "")"
Parse this string to extract the integer value.value = 'The integer value is 12',"import re
value = 'The integer value is 12'
 
m = re.search(r'\d+', value)
print(int(m.group(0)))"
Create a function in R to determine the probability of rolling a dice with a given number of sides.,"dice_prob <- function(sides = 6)
{
  if (sides <= 2) {
    stop(""The number of sides should be greater than 2."")
  }
  1/sides
}"
"Using a for loop, count the number of words in the below string.string = ""This is a test string""","count = 0
for word in string.split():
    count += 1

print(""Number of words:"", count)"
"Create a function that takes in a string and returns a dictionary with each word as a key and its count as the value.string = ""This is a test string""","def word_count_dict(string):
    word_list = string.split()
    word_dict = {}
    for word in word_list:
        if word in word_dict:
            word_dict[word] += 1
        else:
            word_dict[word] = 1
    return word_dict

string = ""This is a test string""
print(word_count_dict(string))"
Generate Fibonacci numbers up to 50 using a while loop.,"a = 0
b = 1
print(a)
print(b)
while b < 50:
    c = a + b
    a = b
    b = c
    print(c)"
"Create an array of objects that contains the inventory of a store.Inventory of a store:
- Apple: 10
- Orange: 20
- Banana: 5
- Grapes: 15","var inventory = [ 
    {item: 'Apple', qty: 10}, 
    {item: 'Orange', qty: 20}, 
    {item: 'Banana', qty: 5}, 
    {item: 'Grapes', qty: 15} 
];"
Create a lambda function in Python to fetch the age of a person from their given DOB.,"import datetime

calculate_age = lambda dob: int((datetime.date.today() - dob).days / 365.25)"
"Re-write the following code using functional programming style.x = range(1, 10)
for i in x:
  print(i)","x = range(1, 10)
list(map(print, x))"
Create a three-dimensional array with all elements set to 0 of length 3×2×2.,"import numpy as np

x = np.zeros((3,2,2))"
"Create a regular expression to search for all sentences that start with ""I like"".",^I like.*
Generate a Python program to perform matrix multiplication.,"# Python program to multiply two matrices 
# 3x3 matrix 
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
# 3x4 matrix
Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
# result is 3x4
result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]
# iterate through rows of X
for i in range(len(X)):
   # iterate through columns of Y
   for j in range(len(Y[0])):
       # iterate through rows of Y
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
for r in result:
   print(r)"
Write a pseudocode for a function to print a list of integers.,"FUNCTION printList(list)
    FOR i = 0 TO list.length
        PRINT list[i]
    END FOR
END FUNCTION"
"Complete the following Python program for converting the given list into a dictionary.list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]

def to_dict(list1, list2):
    ???","list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]

def to_dict(list1, list2):
    return dict(zip(list1, list2))"
Write a code to print a count-down timer.,"import time
 
for i in range(10, 0, -1):
    print(i)
    time.sleep(1)"
"Modify the given code to be able to print an asterisk pyramid as specified in the output.rows = 5

for i in range(0, rows):
    for j in range(0, i + 1):
        print(""*"", end=' ')
    print(""\r"")","rows = 5

for i in range(0, rows):
    for j in range(0, rows-i-1):
        print(end="" "")
    for j in range(0, i + 1):
        print(""*"", end=' ')
    print(""\r"")"
"Write a code that prints “Hello, World” in a new line.","""""""
Write a code that prints Hello World
""""""

def print_hello_world():
	print('Hello, World!')

if __name__ == '__main__':
	print_hello_world()"
"Code a program that takes a list and removes all the duplicate numbers.mylist = [1, 2, 3, 1, 2, 4, 5]","""""""
Remove all duplicate numbers from a list
""""""

def remove_duplicates(mylist):
    mylist = list(dict.fromkeys(mylist))
    return mylist

if __name__ == '__main__':
    mylist = [1, 2, 3, 1, 2, 4, 5]
    mylist = remove_duplicates(mylist)
    print(mylist)"
Generate a 2D list of size 5x5 with random numbers between 0 and 9.,"""""""
Generate a 2D list of size 5x5 with random numbers between 0 and 9
""""""

import random

def generate_2d_list(rows, columns):
    matrix = [[random.randint(0, 9) for i in range(columns)] for j in range(rows)]
    return matrix

if __name__ == '__main__':
    rows = 5
    columns = 5
    matrix = generate_2d_list(rows, columns)
    print(matrix)"
"Write a code to create a FizzBuzz game, that prints the numbers from 1 to 50, replacing all the numbers divisible by 3 with the word ""Fizz"" and the numbers divisible by 5 with the word ""Buzz"".","""""""
Write a code to create a FizzBuzz game
""""""

def fizz_buzz():
    for i in range(1, 51):
        if i % 3 == 0 and i % 5 == 0:
            print(""FizzBuzz"")
        elif i % 3 == 0:
            print(""Fizz"")
        elif i % 5 == 0:
            print(""Buzz"")
        else:
            print(i)

if __name__ == '__main__':
    fizz_buzz()"
Write a code to print a human-readable description of a given HTTP status code.HTTP Status Code: 503,"if(status_code == 503):
    print(""The 503 status code means that the web server is currently unable to handle the request due to a temporary overloading or maintenance of the server."")"
"Write a Python program to find the simple interest.principle = 1000, rate of interest = 5%, time duration = 5 years","# Simple Interest

principle = 1000; 
rate = 5; 
time = 5; 

# Calculate simple interest 
Simple_Interest = (principle*time*rate)/100; 

print(""Simple Interest = %.2f"" %Simple_Interest);"
"Output an array that contains all the unique elements from two input arraysarr1 = [1, 2, 3], arr2 = [2, 3, 4]","def unique_elements(arr1, arr2):
    res = [] 
    i = j = 0
    while i < len(arr1) and j < len(arr2): 
        if arr1[i] == arr2[j]: 
            i += 1
            j += 1
        elif arr1[i] < arr2[j]: 
            res.append(arr1[i]) 
            i += 1
        else: 
            res.append(arr2[j]) 
            j += 1
    res.extend(arr1[i:]) 
    res.extend(arr2[j:]) 
    return list(set(res))"
Design a neural network to classify the outcome of a coin toss.,"import numpy as np 
import keras 
from keras.models import Sequential
from keras.layers import Dense, Activation

model = Sequential()
model.add(Dense(2, input_dim=2))
model.add(Activation('relu'))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=50, batch_size=32)"
"Design an algorithm that searches for a target element in an arrayarr = [1,3,5,6,7]
target = 6","def search(arr, target): 
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i
    return -1

print(""Index of 6 is"", search(arr, target))"
Write an Assembly language code to calculate the result of 3*5,"MOV AX, 3 ; Move 3 to AX
MOV BX, 5 ; Move 5 to BX
MUL BX ; Multiply AX and BX 
; The result is now stored in AX"
"Update the following code to return the key of the highest value in the dictionary.sample_dict = {""a"":1, ""b"":2, ""c"": 3}","sample_dict = {""a"":1, ""b"":2, ""c"": 3}

def get_key_highest_value(dict):
    highest_value = max(dict.values())
    for key, value in dict.items():
        if value == highest_value:
            return key"
"Rearrange the array so each element is divisible by 3[5,12,17,30,11]","[30, 12, 5, 17, 11]"
Add some markup to the following textHello World!,<p>Hello <strong>World</strong>!</p>
"Create a switch statement to provide different output depending on the given inputInput: ""5""","switch (input) {
 case ""5"":
  System.out.println(""Input is 5"");
  break;
 default:
  System.out.println(""No match"");
  break;
}"
"Implement a computationally efficient algorithm to solve the following problemGiven an array of integers, check if the sum of any two integers in the array is divisible by 10","def check_divisible(arr):
    arr.sort()
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] + arr[j]) % 10 == 0:
                return True
    return False"
"Given an array of integers, return an array of twice the valuesarr = [1, 2, 3, 4]","def double_array(arr):
    doubled_arr = []
    for i in arr:
        doubled_arr.append(i*2)
    return doubled_arr"
"Classify these numbers as even or odd21, 2, 8","Odd, Even, Even"
Define a function which can generate a list of 15 random numbers between 1 to 30.,"""""""
Define a function which can generate a list of 15 random numbers between 1 to 30
""""""
import random

def generate_random_list():
    return [random.randint(1,30) for _ in range(15)]
    
if __name__ == '__main__':
    print(generate_random_list())"
"Find a Python solution for this leetcode problem.Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.","def twoSum(nums, target):
    numDict = dict()
    for index, num in enumerate(nums):
        if num in numDict.keys():
            return [numDict[num], index]
        else:
            numDict[target-num] = index"
Create a regex pattern to extract all phone numbers from a given string.,pattern = r'\d{3}-\d{3}-\d{4}|\(\d{3}\)\s\d{3}-\d{4}|\d{10}|\d{3}\s\d{3}\s\d{4}'
"Write code to solve this DP(Dynamic Programming) problem from LeetCode.You are given coins of different denominations and a total amount of money. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.","def coinChange(coins, amount):
    dp = [float(""inf"")] * (amount + 1)
    dp[0] = 0

    for coin in coins:
        for x in range(coin, amount + 1):
            dp[x] = min(dp[x], dp[x - coin] + 1)
    if dp[amount] == float(""inf""):
        return -1
    return dp[amount]"
"Improve the following implementation of a binary search algorithm.def binary_search(array, target):
  low = 0
  high = len(array)-1
  while low <= high:
    mid = (low+high)//2
    if array[mid] == target:
      return mid
    elif array[mid] < target:
      low = mid+1
    else:
      high = mid-1","def binary_search(array, target):
  low = 0
  high = len(array)-1
  while low <= high:
    mid = (low+high)//2
    if array[mid] == target:
      return mid
    elif array[mid] < target:
      low = mid+1
    else:
      high = mid-1
  return -1 # target not found"
Write a function that takes an integer and doubles it.,"def doubleInt(num): 
    return num * 2"
Create an object of class 'Car' with attributes 'color' and 'speed'.,"myCar = Car(""red"", 50)"
"Using the ""for"" loop, print out all odd numbers from 1 to 10.","for i in range(1, 11):
    if i%2 != 0:
        print(i)

# Output: 1, 3, 5, 7, 9"
"Create an array of size 10, initialize the array elements with random values between 1 to 10.","import random 
arr = []

for _ in range(10):
    elem = random.randint(1,10)
    arr.append(elem)

print(arr)"
"Given a list of strings, return a new list with the longest strings.str_list = [""Hello"", ""world"", ""This"", ""is"", ""a"", ""sentence""]","def longest_strings(str_list): 
	longest_str = [] 
	
	for s in str_list: 
		if len(s) == max(map(len, str_list)): 
			longest_str.append(s) 
	
	return longest_str 

print(longest_strings([""Hello"", ""world"", ""This"", ""is"", ""a"", ""sentence""])) # Output: [""Hello"", ""world"", ""sentence""]"
Import the pandas library in Python.,import pandas as pd
What data structure should be used to store a set of strings?,"A set is the ideal data structure to store a set of strings. It is a collection of unique values and can store any primitive data types. No duplicates are allowed in a set and it is also unordered, meaning it does not keep track of the order in which items were added."
What are the benefits of using the break statement in a loop?,"The break statement is often used to terminate a loop prematurely if a certain condition is met. This can provide an efficient way to end a loop when a condition is found and can help improve the readability and performance of the code. Additionally, it can be used to handle any exceptions that may occur while the loop is running."
Generate a sum of square numbers from 1 to 5.,Sum of squares of all numbers from 1 to 5 is 55 (1^2 + 2^2 + 3^2 + 4^2 +5^2).
Create an array with values two and six repeated ten times.,"[ 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6 ]"
"Convert the list of numbers into a dictionary where the numeric values are the keys and the corresponding characters are the values.num_list = [1, 2, 3]
char_list = ['a', 'b', 'c']","dict_num_char = {num_list[i]: char_list[i] for i in range(len(num_list))}
print(dict_num_char)"
Write a code to store the user input in a list and then find the average of the items in the list.,"numbers = []
while True:
    user_input = input('input a number (input ""done"" to finish): ')
    if user_input.lower() == ""done"":
        break
    numbers.append(float(user_input))

avg = sum(numbers) / len(numbers)
print('The average is', avg)"
Edit the following code to allow for the user to input an unlimited list of numbers.,"# Prime numbers between 2 and n

n = int(input(""Enter a positive integer: ""))

# Initially assuming all integers between 2 and n are prime
primeArray = [True] * (n + 1)

# Create list of prime numbers
for p in range(2, n+1): 
    # If prime[p] is not changed, then it is a prime 
    if primeArray[p]== True: 
        # Update all multiples of p 
        for i in range(2*p,n+1,p): 
            primeArray[i] = False

# Print all prime numbers 
for i in range(2,n+1): 
    if primeArray[i]: 
        print(i, end="" "")"
"Using the code given below, add classes to the navigation links on the page to make them display horizontally instead of vertically.<ul>
  <li><a href=""#"">Home</a></li>
  <li><a href=""#"">About</a></li>
  <li><a href=""#"">Contact</a></li>
</ul>","<ul class=""horizontal-list"">
  <li><a href=""#"" class=""horizontal-item"">Home</a></li>
  <li><a href=""#"" class=""horizontal-item"">About</a></li>
  <li><a href=""#"" class=""horizontal-item"">Contact</a></li>
</ul>"
"Write a Python code snippet to find the index of the second occurrence of a substring in a given string.""Python is an interpreted, high-level, general-purpose programming language.""
""general-purpose""","import re 
  
string = ""Python is an interpreted, high-level, general-purpose programming language.""
substring = ""general-purpose""

second_occurrence = [(m.start(0)) for m in re.finditer(substring, string)][1]
print('The second occurrence of the substring starts at index:', second_occurrence)"
"Using the code snippet given below, add a unique class called btn which will remove the default styles from the submit button.<form action=""/contact.php"">
  <input type=""text"" name=""name"">
  <input type=""email"" name=""email"">
  <input type=""submit"" value=""Submit"">
</form>","<form action=""/contact.php"">
  <input type=""text"" name=""name"">
  <input type=""email"" name=""email"">
  <input type=""submit"" value=""Submit"" class=""btn"">
</form>"
"Using the code given below, add a class called ""active"" to the first navigation link to make it highlighted when the page is loaded.<ul>
  <li><a href=""#"">Home</a></li>
  <li><a href=""#"">About</a></li>
  <li><a href=""#"">Contact</a></li>
</ul>","<ul>
  <li><a href=""#"" class=""active"">Home</a></li>
  <li><a href=""#"">About</a></li>
  <li><a href=""#"">Contact</a></li>
</ul>"
Build a state machine to simulate a vending machine.,"// States
const IDLE = 'IDLE';
const COIN_INPUT = 'COIN_INPUT';
const SELECTION = 'SELECTION';
const DISPENSE = 'DISPENSE';
 
// Transitions
const transitions = {
    [IDLE]: [COIN_INPUT],
    [COIN_INPUT]: [SELECTION],
    [SELECTION]: [DISPENSE],
    [DISPENSE]: [IDLE]
};
 
// Actions
const ENTER_COIN = 'enter_coin';
const SELECT_ITEM = 'select_item'; 
const DISPENSE_ITEM = 'dispense_item';

// State machine
const stateMachine = createStateMachine({
    transitions: transitions,
    actions: {
        [ENTER_COIN]: (args) => enterCoin(args),
        [SELECT_ITEM]: (args) => selectItem(args),
        [DISPENSE_ITEM]: (args) => dispenseItem(args)
    }
});

// Vending machine
const vendingMachine = {
    // Initial state
    currentState: IDLE,

    // Methods
    enterCoin: (args) => stateMachine.invoke(ENTER_COIN, args),
    selectItem: (args) => stateMachine.invoke(SELECT_ITEM, args),
    dispenseItem: (args) => stateMachine.invoke(DISPENSE_ITEM, args)
};"
Describe how to handle a POST request in Express.,"const express = require('express');
const app = express();

app.post('/myroute', (request, response) => {
  // Handle the POST request here
});"
Create a class in Python that keeps the track records of animals in the zoo.,"class Zoo:
    def __init__(self):
        self.records = {}

    def add_record(self, animal, count):
        if animal in self.records:
            self.records[animal] += count
        else:
            self.records[animal] = count

    def get_count(self, animal):
        if animal in self.records:
            return self.records[animal]
        else:
            return 0"
Create a script to fetch the information from the following API endpoint.https://dummyapi.io/data/api/user,"import requests

# Make the API call
url = ""https://dummyapi.io/data/api/user""
response = requests.get(url)

# Fetch the information
if response.status_code == 200:
    data = response.json()
    username = data['username']
    email = data['email']
    # Print the obtained info
    print(f'Username: {username}, Email: {email}')"
Keep only the characters from the input string that have a numerical value from 0 to 9.The number is 559,"input_str = ""The number is 559""

output_str = """".join([i for i in input_str if i.isnumeric()])

print(output_str) # prints 559"
Calculate the total area of a circle given the radius.radius = 5,"radius = 5

import math

# calculate the area
area = math.pi * radius ** 2

print(""The total area of the circle is ""+str(area)) # prints The total area of the circle is 78.53981633974483"
Create a FizzBuzz program.,"""""""
Create a FizzBuzz program
""""""
for num in range(1, 101):
    if num % 3 == 0 and num % 5 == 0:
        print(""FizzBuzz"")
    elif num % 3 == 0:
        print(""Fizz"")
    elif num % 5 == 0:
        print(""Buzz"")
    else:
        print(num)"
How many are hypernyms of the given word?cat,"from nltk.corpus import wordnet

# get the synset object 
synset = wordnet.synsets('cat')[0]

# find the hypernyms and count the number of hypernyms
count = len(list(synset.hypernyms()))

print(""There are {} hypernyms of the word 'cat'."".format(count)) # prints There are 6 hypernyms of the word 'cat'."
Write a function to calculate the value of the mathematical series:x = 2,"def calculate_series(x):
    """""" Calculate the value of the mathematical series """"""
    result = 0
    for i in range(1, x + 1):
        result += (1 / (i * i))
    return result
    
if __name__ == ""__main__"":
    result = calculate_series(2)
    print(result) # prints 1.25"
Write an algorithm that returns the word with the most vowels in the sentence.The quick brown fox jumps over the lazy dog.,"def most_vowels(sentence):
    # Split sentence into words
    words = sentence.split("" "")
    # Keep track of our highest vowel count and the associated word
    highest_count = 0
    most_vowels_word = """"
    # Count the number of vowels in each word
    for word in words:
        num_vowels = 0
        for c in word:
            if c.lower() in [""a"", ""e"", ""i"", ""o"", ""u""]:
                num_vowels += 1
        # Store word if it has the highest vowel count
        if num_vowels > highest_count:
            highest_count = num_vowels
            most_vowels_word = word
    return most_vowels_word

if __name__ == ""__main__"":
    print(most_vowels(""The quick brown fox jumps over the lazy dog."")) # prints brown"
"Create a dictionary that has the keys and values of a given list.my_list = [2, 4, 6, 8]","my_list = [2, 4, 6, 8]

# Create an empty dict 
my_dict = {}

# Add elements to the dict
for i in my_list:
    my_dict[i] = i**2

print(my_dict) # prints {2: 4, 4: 16, 6: 36, 8: 64}"
Write a function to find the first prime number after the given number.num = 5,"def find_next_prime(num):
    # check for all the numbers starting from num
    for number in range(num+1, num + 1000):
        # iterate from 2 to number
        for factor in range(2, number):
            # check if the number is prime
            if number % factor == 0:
                break
        else:
            # return the first prime
            return number

if __name__ == ""__main__"":
    print(find_next_prime(5)) # prints 7"
"Split a given string according to the given delimiter.my_string = ""This is a test string""
delimiter = "" ""","my_string = ""This is a test string""
delimiter = "" ""

# use str.split() to split the string
splitted = my_string.split(delimiter)

print(splitted) # prints ['This', 'is', 'a', 'test', 'string']"
"Store the output of the following statement into a variable called `result`.a = [1, 2, 3]",result = a[::-1]
"Underline the correct option regarding the statement below
A Python code to print the first 5 Fibonacci numbers is:","A. print(1, 1, 2, 3, 5) 
B. print(0, 1, 2, 3, 5) 
C. print(1, 1, 3, 5, 8) 
D. print(0, 1, 1, 2, 3)

D. print(0, 1, 1, 2, 3)"
Create a Boolean expression in Python to check if a number is a multiple of 5.,"# Boolean expression
# Checks to see if x is a multiple of 5
def is_multiple_of_5(x):
    return x % 5 == 0"
"Manipulate a given list in Python where every element in the list has to be doubled.my_list = [1, 2, 3, 4]","my_list = [2, 4, 6, 8]"
"Generate a Python function to get the index of a given string from a list of strings.list_of_strings = [""apple"", ""banana"", ""cherry""]","def find_index(list_of_strings, target_string):
    for i, string in enumerate(list_of_strings):
        if string == target_string:
            return i
    return -1"
"Write a query in MongoDB to find all documents with the value of field ""city"" as ""Berlin"".","db.collection.find({""city"": ""Berlin""})"
Compute the modulus of 12/5 using a Lua function.,"function modulus(dividend, divisor)
  return dividend % divisor
end

modulus(12, 5)"
Create a Python script that converts temperatures from Fahrenheit to Celsius.,"def fahrenheit_to_celsius(temperature):
    """"""
    This function converts temperatures in Fahrenheit to Celsius.
    """"""
    celsius = (temperature - 32) * 5/9 
    return celsius

if __name__ == '__main__':
    temperature = float(input('Enter temperature in Fahrenheit: '))
    print('Temperature in Celcius is: {:.2f}'.format(fahrenheit_to_celsius(temperature)))"
Parse an XML document using Python.,"import xml.etree.ElementTree as ET

tree = ET.parse(""file.xml"")
root = tree.getroot()

for child in root:
    print(f""{child.tag}: {child.text}"")"
"Create a loop that prints out numbers from 0 to 15, except skip numbers 6, 7, and 12.","for num in range(16):
 if num not in [6, 7, 12]:
    print(num)"
Write a function in Python to generate a random alphanumeric string with a length of 5 characters.,"import random
import string

def generate_random_str():
    letters = string.ascii_letters + string.digits
    return ''.join(random.choice(letters) for i in range(5))"
Write a code to infer the data type of an lambda expression.,"def infer_type(expression):
     return type(eval(expression))"
"Given a list of integers, find the lengthiest common substring of the list.[1, 2, 3, 4, 5, 3, 2, 6]","The longest common substring of the list [1, 2, 3, 4, 5, 3, 2, 6] is ""3, 2"". The length of the common substring is 3."
Write code in Python to retrieve the top 10 Rated Movies in IMDB.,"import requests
import json

url = 'https://imdb-api.com/documentation/top-rated/all}'
response = requests.get(url)
data = json.loads(response.text)
movies = data['results'][:10]

for movie in movies:
    title = movie['title']
    rating = movie['rating']
    print(f""{title}: {rating}"")"
What is the complexity of an iterative mergesort algorithm?,"The complexity of an iterative mergesort algorithm is generally O(nlog(n)). It is a divide-and-conquer type of algorithm which splits a list of elements into its two halves, sorts each half recursively, and then merges the sorted halves. This means that the algorithm has a time complexity of O(log(n)) which is the number of splitting and merging operations and an additional O(n) complexity for the merging step."
"Edit the code in Python so that the function returns the highest odd number in the list.def highest_odd_number(numbers):
    highest = 0
    for number in numbers:
        if number % 2 != 0 and number > highest:
            highest = number
    return number","def highest_odd_number(numbers):
    highest = 0
    for number in numbers:
        if number % 2 != 0 and number > highest:
            highest = number
    return highest"
Create a program in Python to generate a random string using the given characters.characters = 'abcdefghijklmnopqrstuvwxyz',"import random

def generate_random_string(characters):
    random_string = """"
    for i in range(10):
        random_string += random.choice(characters)
    return random_string

characters = 'abcdefghijklmnopqrstuvwxyz'
print(generate_random_string(characters))"
"Write code in Python to create a dictionary with names as keys and phone numbers as values.names = [""Alice"", ""Bob"", ""Peter"", ""John""]
phone_numbers = [""1234567"", ""7654321"", ""246810"", ""13579""]","names = [""Alice"", ""Bob"", ""Peter"", ""John""]
phone_numbers = [""1234567"", ""7654321"", ""246810"", ""13579""]

name_and_phone = dict(zip(names, phone_numbers))
print(name_and_phone)"
"Reorganize the given Python code such that two functions are created.def greet_to(name):
    """"""Print a greeting to the name provided.""""""
    # assert name is a string
    assert isinstance(name, str), ""name must be a string""
    print(""Hello, "" + name + ""!"")","def check_name(name):
    """"""Check whether the name is a string""""""
    assert isinstance(name, str), ""name must be a string""

def greet_to(name):
    """"""Print a greeting to the name provided.""""""
    check_name(name)
    print(""Hello, "" + name + ""!"")"
Write an algorithm for finding the square root of a number.,"1. Start with an initial guess for the square root, ‘x’.
2. Calculate the value of ‘x2’.
3. If the square of ‘x’ is close enough to the given number, then ‘x’ is the square root of the given number.
4. If the calculated value of ‘x2’ is not close enough to the given number, then reduce the difference between ‘x2’ and the given number by taking the average of ‘x’ and the given number divided by ‘x’.
5. Repeat the steps 2, 3, and 4 until the calculated value of ‘x2’ is close enough to the given number."
"Write an efficient Python program to reverse a string.testString = ""Hello World""","def reverseString(testString): 
    reversedString = """"
    for char in testString: 
        reversedString = char + reversedString
    return reversedString

print(reverseString(testString))"
"Replace the “TODO” comment in the code with the proper code to print each element of the list on a new line using Python.input_list = [10, 15, 20, 25, 30]","for element in input_list:
    print(element)"
Construct an object in Python containing three elements.,"my_object = {
  'element1': 1,
  'element2': 2,
  'element3': 3
}"
Construct an API call in Python that returns information about a given book.,"import requests

url = ""http://openlibrary.org/api/books""
 
querystring = {""bibkeys"":""ISBN:0201558025"",""format"":""json"",""jscmd"":""data""}

headers = {
    'cache-control': ""no-cache"",
    }
 
response = requests.request(""GET"", url, headers=headers, params=querystring)
 
print(response.text)"
"Given a list of strings, write a function that filters out all strings that have length less than two characters.my_list = [""Hello"",""Hi"",""How"",""Are"",""You""]","def filter_length(strings):
    new_list = []
    for string in strings:
        if len(string) >= 2:
            new_list.append(string)
    return new_list

my_list = [""Hello"",""Hi"",""How"",""Are"",""You""]

print(filter_length(my_list))"
Generate a pseudorandom sequence of hexadecimal numbers with length 10.,"let hexValues = '0123456789abcdef';
let randomHexSeq = [];
for (let i = 0; i < 10; i++) {
    randomHexSeq.push(hexValues[Math.floor(Math.random() * hexValues.length)]);
}

console.log(randomHexSeq.join(''));"
"Given a triangle, calculate its area.Base: 10
Height: 8","""""""
Calculate the area of a triangle
""""""

base = 10
height = 8

# calculating the area of a triangle
area = (base*height)/2
print(""The area of the triangle is: {}"".format(area))"
Design an algorithm to detect the pattern of spikes in an EEG.,"""""""
Design an algorithm to detect the pattern of spikes in an EEG
""""""

import numpy as np

def detect_spike_pattern(eeg_data):
    # Compute power spectrum of the EEG data
    power_spectra = np.abs(np.fft.rfft(eeg_data))
    # Detect spikes by finding peaks in the power spectrum
    spikes = np.where(power_spectra > np.mean(power_spectra) + np.std(power_spectra))[0]
    # Construct the spike pattern using differences between consecutive spikes
    pattern = [spikes[i+1] - spikes[i] for i in range(len(spikes)-1)]
    return pattern"
"Compute the hamming distance between two strings and print the result.String1: 'hello'
String2: 'world'","""""""
Compute the hamming distance between two strings and print the result
""""""

def calc_hamming_distance(str1, str2):
    # Calculate the hamming distance
    dist = 0
    for i, j in zip(str1, str2):
        if i != j:
            dist+=1
    # Print the Hamming Distance
    print('Hamming Distance: ', dist)
    
calc_hamming_distance('hello','world')"
"Calculate the scalar product of two vectors and print the result.Vector1: [1,2,3]
Vector2: [4,5,6]","""""""
Calculate the scalar product of two vectors and print the result
""""""

# Calculate the scalar product of two vectors
vector1 = [1,2,3]
vector2 = [4,5,6]

scalar_product = sum([x*y for x,y in zip(vector1 , vector2)])
# Print the scalar product
print('Scalar Product: ', scalar_product)"
Generate the Fibonacci sequence of length 10 and print the result.,"""""""
Generate the Fibonacci sequence of length 10 and print the result
""""""

def get_fibonacci_sequence(length):
    a, b = 0, 1
    # generate the Fibonacci sequence
    sequence = []
    for _ in range(length):
        sequence.append(a)
        a, b = b, a + b
    # return the Fibonacci sequence
    return sequence

# get the Fibonacci sequence of length 10
fib_sequence = get_fibonacci_sequence(10)
# print the Fibonacci sequence
print(fib_sequence)"
Count the number of vowels in the given sentence and print the result.Sentence: There is no shortcut to success,"""""""
Count the number of vowels in the given sentence and print the result
""""""

# given sentence
sentence = 'There is no shortcut to success'

# count the vowels in the sentence
vowels = 0
for char in sentence:
    if char in 'aeiou':
        vowels += 1
# Print the number of vowels
print('Number of Vowels: ', vowels)"
"Write a code to train a random forest classifier for a given dataset.Dataset features: 5 features, 100 instances, 1000 estimators","""""""
Write a code to train a random forest classifier for a given dataset
""""""

# import the packages
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

# Create the dataset
X, y = make_classification(n_samples=100, n_features=5, n_classes=2)

# Create and train the random forest classifier
clf = RandomForestClassifier(n_estimators=1000)
clf.fit(X, y)"
Write a code to simulate Conway’s Game of Life.,"""""""
Write a code to simulate Conway’s Game of Life
""""""

import numpy as np

def conways_game_of_life(state, iterations):
    # make a copy of the game state
    game_state = np.copy(state)
    # loop over the number of iterations
    for _ in range(iterations):
        # calculate the number of neighbors for each cell
        num_neighbors = (game_state[0:-2,0:-2] + game_state[0:-2,1:-1] + game_state[0:-2,2:] +
                        game_state[1:-1,0:-2] + game_state[1:-1,2:] +
                        game_state[2:,0:-2] + game_state[2:,1:-1] + game_state[2:,2:]).astype(np.uint8)
        # decide if a cell should live or die based on the number of neighbors
        game_state[1:-1, 1:-1][(num_neighbors == 2) | (num_neighbors == 3)] = 1
        game_state[1:-1, 1:-1][(num_neighbors != 2) & (num_neighbors != 3)] = 0
    # return the modified current state
    return game_state"
Suggest a strategy to reduce the memory requirement of a given application.,"""""""
Suggest a strategy to reduce the memory requirement of a given application
""""""

# Suggested strategy 
One strategy to reduce the memory requirement of a given application is to identify the areas where the memory is used the most and to optimize the code for those areas. Additionally, use a memory profiling tool to identify potential memory leaks. Memory profilers can detect memory leaks, large memory allocations and inefficient use of memory. This will help to identify specific areas of the code that could be improved or refactored to save memory. Lastly, use a memory-efficient data structure and algorithms when necessary to save memory."
Write an `int main()` routine to print the following sequence of numbers.10,"#include <iostream>

int main() {
 for(int i = 0; i < 10; i++) {
  if(i % 2 == 0) {
   std::cout << i << "", "";
  }
  else {
   std::cout << i+1 << "", "";
  }
 }
 std::cout << std::endl;
 return 0;
}"
Create an array with five different strings.,"stringArray = ['Hello', 'Peace', 'Happiness', 'Joy', 'Love']"
Construct a for-loop with a break clause.,"for i in range(0, 10):
    if i == 7:
        break
    print(i)"
Generate a function to calculate the grade of a student based on their marks.,"def calculateGrade(score):
    if score >= 90:
        return ""A""
    elif score >= 80:
        return ""B""
    elif score >= 70:
        return ""C""
    elif score >= 60:
        return ""D""
    else:
        return ""F"""
Create and initialize a two-dimensional array of size 5x5 with 0s.,"twoDArray = [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]]"
Generate a function to check for the largest common divisor between two numbers.,"def gcd(a, b): 
    if a == 0 : 
        return b 
    return gcd(b % a, a)"
Design a class that can create objects with a unique ID.,"class UniqueID:
    count = 0
    def __init__(self):
        UniqueID.count+=1
        self.id = UniqueID.count"
Design a password validation system using Python code.,"import re

MIN_LENGTH = 8
MAX_LENGTH = 15

def is_valid_password(password):
    
    #check password length
    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:
        return False

    #check for at least one digit
    if re.search(r""[0-9]"",password) is None:
        return False
    
    #check for at least one uppercase letter
    if re.search(r""[A-Z]"",password) is None:
        return False
    
    #check for at least one lowercase letter
    if re.search(r""[a-z]"",password) is None:
        return False
    
    #check for at least one special character  
    if re.search(r""[!#$%&'()*+,-./:;<=>?@[\] ^_`{|}~]"",password) is None:
        return False

    #if all conditions are met, password is valid
    return True"
"Modify this code to make it a function which takes a list of numbers and returns their average.list_of_numbers = [1, 4, 5, 6, 8]","def get_average(list_of_numbers):
    """"""Returns average of the given list of numbers""""""
    if list_of_numbers:
        return sum(list_of_numbers)/len(list_of_numbers)
    return

list_of_numbers = [1, 4, 5, 6, 8]

average = get_average(list_of_numbers)

print(average) # 5"
Create a singleton class.,"class SingletonClass:
    _instance = None
 
    def __new__(self):
        if not self._instance:
            self._instance = super().__new__(self)
        return self._instance

# testing
obj1 = SingletonClass()
obj2 = SingletonClass()

if obj1 is obj2:
    print('obj1 and obj2 are the same instance')"
"Convert this code to a function which takes a dictionary as an argument and adds the given key value pair to it.my_dict = {'name': 'John'}
key = 'age'
value = 18","def add_key_value_pair(my_dict, key, value):
    """"""Adds the given key value pair to the dictionary""""""
    if key not in my_dict:
        my_dict[key] = value
    return my_dict

my_dict = {'name': 'John'}
key = 'age'
value = 18

updated_dict = add_key_value_pair(my_dict, key, value)
print(updated_dict) # {'name': 'John', 'age': 18}"
Edit this code to make the function take an integer n as an argument and print the fibonacci series till nth term.n = 10,"def fibonacci(n):
    """"""Prints the fibonacci series till the nth term""""""
    # set initial values
    a = 0
    b = 1
    # check for valid input
    if n < 0:
        print('Please enter a positive number')
    elif n == 0:
        print('0')
    elif n == 1:
        print('0, 1')
    else:
        # print first two terms
        print('0, 1', end=', ')
        for i in range(2,n):
            c = a + b
            print(c, end=', ')
            # update values
            a = b
            b = c

n = 10
fibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34"
"Use JS to create an object called `user` which contains two properties: `name` with a string value of ""John"", and `age` with a numeric value of 25.","let user = {
  name: ""John"",
  age: 25
};"
"Write a code in Python to convert a string of text to its equivalent uppercase characters.str_lower_case = ""hello world""",str_upper_case = str_lower_case.upper()
"Define a function that takes in two numbers, and calculates the power of the first number raised to the power of the second number.base = 3
exponent = 4","def power_calc(base, exponent):
    return base ** exponent"
"Create a code that takes in a sentence and outputs counts of each word and its frequency (how often it occurred).sentence = ""This is an example sentence to test the word count code.""","def count_words(sentence):
    word_count = {}
    for word in sentence.split():
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1
    return word_count

count_words(sentence)"
"Create a code that take an input of the list of integers, and outputs even numbers from the list.numbers = [2, 3, 4, 5, 6, 7, 8]","def get_even_numbers(numbers):
    even_numbers = []
    for number in numbers:
        if number % 2 == 0:
            even_numbers.append(number)
    return even_numbers

get_even_numbers(numbers)"
"Create a code to input a 2D matrix and output 
the sum of each row.[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]","def row_sum(matrix):
    row_sums = []
    for row in matrix:
        row_sum = 0 
        for col in row:
            row_sum += col
        row_sums.append(row_sum)
    return row_sums
    
row_sum(matrix)"
"Write a code that takes in a list of names and creates a dictionary with the names as keys and their lengths as values.names = [""Mary"", ""John"", ""Mike""]","def name_length_dict(names):
    name_length_dict = dict()
    for name in names:
        name_length_dict[name] = len(name)
    return name_length_dict 

name_length_dict(names)"
"Create a code to input a sentence and output the number of vowels in the sentence.sentence = ""This is a sentence with vowels.""","def count_vowels(sentence):
    vowels = ['a', 'e', 'i', 'o', 'u']
    count = 0
    for char in sentence.lower():
        if char in vowels:
            count += 1
    return count

count_vowels(sentence)"
"Create a code which takes in a list of strings, and returns a string with all the characters of the strings sequentially.strings = [""Hello"", ""World""]","def merge_strings(strings):
    merged_string = ''
    for string in strings:
        merged_string += string
    return merged_string

merge_strings(strings)"
"Modify the following code to skip the test if the platform is not windows.import platform

def test_windows():
    if platform.system() == 'Windows':
        # Do test","import platform

def test_windows():
    if platform.system() != 'Windows':
        return
    # Do test"
"Suggest a completion for the following to convert a date string to datetime format.import datetime 

def convert_date_string(date_string):","import datetime 

def convert_date_string(date_string):
   return datetime.datetime.strptime(date_string, ""%d-%m-%y"")"
"Suggest a completion for achieving the following without using a `for` loop.my_list = [1, 2, 3]
# Do something","my_list = [1, 2, 3]
result = list(map(lambda x: x ** 2, my_list))"
"Suggest a completion for the following to check if a given key exists in a dictionary or not.my_dict = {""name"": ""John"", ""age"": 27}
# Do something","my_dict = {""name"": ""John"", ""age"": 27}
if ""name"" in my_dict:
    print(""Key present"")"
"Generate the appropriate code for a for-loop that iterates through a list.list_words = [""Hello"", ""World"", ""GPT"", ""Model""]","for word in list_words:
    print(word)"
"Generate a sentence from a given sentence input, using a GPT-3 model.This is a sentence.","<noinput>
Output:
This sentence is a great example of how powerful GPT-3 models are at generating meaningful sentences."
"Given a string, classify the sentiment of the text as either positive or negative.The GPT model is amazing.","def classify_sentiment(string):
    """"""
    This function takes a string and 
    classifies its sentiment as either
    positive or negative.
    """"""
    if string.lower().find(""positive"") != -1 or string.lower().find(""amazing"") !=-1:
        return ""positive""
    elif string.lower().find(""negative"") != -1:
        return ""negative""
    else:
        return ""neutral"""
"Convert this NumPy array to a list.import numpy as np 
my_array = np.array([[1,2,3], [4,5,6], [7,8,9]])","def convert_array(array):
    """"""
    This function takes a NumPy array and
    converts it to a list.
    """"""
    return array.tolist()"
"Write a loop to compute the total number of fruits of type ""Apple"".var fruits = [{ type: 'Mango', count: 10}, {type: 'Apple', count: 5}, {type: 'Strawberry', count: 8}]","let appleCount = 0;
for(let i = 0; i < fruits.length; i++) {
    if(fruits[i].type === ""Apple"") {
        appleCount += fruits[i].count;
    }
}"
"Given a document, remove all numbers from the content.Hello! This is a test. There are 1, 2, 3 numbers here.",Hello! This is a test. There are  numbers here.
Implement a function to check if two binary trees are same or not.,"function isSameTree(p, q) {
    if (p === null && q === null) {
        return true;
    }
    if (p === null || q === null || p.val !== q.val) {
        return false;
    }
    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
}"
"Create a function which takes a 3x3 2D array and returns its transpose.let arr = [[0, 1, 2],
           [3, 4, 5],
           [6, 7, 8]]","def transposeMatrix(arr):
    let t_arr = [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]];
    
    for i in range(len(arr)):
        for j in range(len(arr[0])):
            t_arr[j][i] = arr[i][j]
    
    return t_arr"
"Given a list of strings, write a Python program to capitalize the first letter of each word.words = ['The', 'quick', 'brown', 'fox']","capitalized_words = [word.capitalize() for word in words]
print(capitalized_words) # Output: ['The', 'Quick', 'Brown', 'Fox']"
"Compose a query to find the titles of the movies released in 2021 which produce revenue more than $2,000,000.movies_table = 'movies'","SELECT title
FROM movies_table
WHERE year = 2021 AND revenue > 20000000"
"Write an R script to generate a chart to compare the sales between the current month and the previous month.data1 = c(10,15,3,4,7,10,12)
data2 = c(23,20,21,19,15,8,11)","library(ggplot2)

df <- data.frame(Current=data1, Previous=data2)

ggplot(df, aes(x=rownames(df))) + 
geom_col(aes(y=Current, fill=""Current Month""), position=position_dodge(), width=0.5, color=""black"") +
geom_col(aes(y=Previous, fill=""Previous Month""), position=position_dodge(), width=0.5, color=""black"") +
labs(fill = ""Sales"") +
ylab(""Sales"")"
Write a Angular typescript code to validate the input form.,"import { FormGroup, FormControl, Validators } from '@angular/forms';

this.myForm = new FormGroup({
    userName: new FormControl('', Validators.required),
    lastName: new FormControl('', Validators.required),
    email: new FormControl('', [Validators.required, Validators.email])
});"
Which Boolean value is returned by == when two operands are equal?,The Boolean value returned by == when two operands are equal is True.
How many types of methods are available in Python?,There are two types of methods available in Python: instance methods and class methods.
"Compare two objects and sort them using the inbuilt sorting function.list1 = [7, 3, 5, 9]
list2 = [4, 8, 2, 10]","sorted_lists = sorted(list1 + list2) 
print(sorted_lists)

# Output: [2, 3, 4, 5, 7, 8, 9, 10]"
Describe a use case of the ternary operator in Python.,"The ternary operator can be used to conditionally assign a value. For example, the following code assigns max to the larger value of x and y:

max = x if x > y else y"
Create a 3x2 matrix using nested lists.,"matrix = [[1, 2], [3, 4], [5, 6]]"
How to convert a pandas DataFrame to a python list?,"The DataFrame can be converted to a list using the tolist() method. For example:

import pandas as pd

df = pd.DataFrame([[1, 2], [3, 4], [5, 6]])
my_list = df.tolist()
print(my_list)

# Output: [[1, 2], [3, 4], [5, 6]]"
"Sort the following list of numbers in ascending order: 53, 8, 12, 4, 21.53, 8, 12, 4, 21","4, 8, 12, 21, 53"
Create a function in Python that takes in a string as an argument and replaces all occurances of 'e' with an asterisk ('*').mystring = 'hello world',"def replace_e(mystring):
    return mystring.replace('e', '*')"
Design a class in Python that creates objects based on user input.,"class UserInput:
    def __init__(self):
        self.data = None

    def get_data(self):
        self.data = input(""Enter something: "")
        return self.data"
"Create a Python program for identifying the common elements between two lists.list1 = [1, 2, 3, 4]
list2 = [2, 4, 6, 8]","def commonElements(list1, list2):
    list1_set = set(list1) 
    list2_set = set(list2) 
    common_elements = list1_set.intersection(list2_set) 
    return common_elements"
Provide an example for each of the following data types.,"Strings: ""Hello World!""

Integers: 15

Floats: 3.14

Dictionaries: {""name"": ""John"", ""age"": 32} 

Lists: [1, 2, 3, 4, 5]

Tuples: (""Apple"", ""Banana"", ""Orange"")

Sets: {1, 2, 4, 8, 16}"
Create a random phone number.,(402) 904-6151
Convert the given integer to 8-bit binary.13,0b00001101
"Return the given array with all elements reversed.[1, 2, 3, 4, 5]","[5, 4, 3, 2, 1]"
"Insert two new elements at the beginning of a list.[""a"", ""b"", ""c"", ""d""]","[""x"", ""y"", ""a"", ""b"", ""c"", ""d""]"
Print out the 8-bit binary representation of the given number.50,0b00110010
"Subtract the second number from the first.8, 6",2
Suggest a code segment to render a greeting message in a terminal window using Python.,"print(""Hello World!"")"
"Suppose a functiona and a variable are already defined. Write a code statement to assign the value of the variable to the function.function: my_function
variable: my_var",my_function(my_var)
Suggest a code segment to generate a random integer in the range of 0 to 100 using Python.,"import random

random_int = random.randint(0, 100)"
Where would you place the import statement when using the pandas library in Python?,"The import statement should be placed at the beginning of the program, before any other statements are executed. This ensures that the Pandas library is available when we write code referring to the Pandas library."
Construct a regular expression to match and extract street names from a given address.,^.*\s(.*?)\s.*$
"Create a dictionary that has each unique word as the key, and the number of times the word appears as the value.The quick brown fox jumped over the lazy dog.","words_counts = {
    ""The"": 1,
    ""quick"": 1,
    ""brown"": 1,
    ""fox"": 1,
    ""jumped"": 1,
    ""over"": 1,
    ""the"": 1,
    ""lazy"": 1,
    ""dog."": 1
}"
"Transform this code fragment to use the appropriate data structure.word = ""apple""
for i in range(len(word)):
    print(word[i])","word = ""apple""
for letter in word:
    print(letter)"
"Write a Python program that can accept an array and returns the column-wise sum of the given array.[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]","def col_sum(arr):
    col_sum_arr = []
    for j in range(len(arr[0])):
        s = 0
        for i in range(len(arr)):
            s += arr[i][j]
        col_sum_arr.append(s)
    return col_sum_arr

print(col_sum([[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9]]))
# Output: [12, 15, 18]"
Uses a loop to create a list with the squares of the numbers from 0 to 5.,"list1 = []
for i in range(6):
  list1.append(i**2)
  
print(list1)
# Output: [0, 1, 4, 9, 16, 25]"
Create a class to create a Complex Number with real and imaginary parts.,"class ComplexNumber:
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary
    
    def __str__(self):
        if self.imaginary == 0:
            result = ""%.2f+0.00i"" % (self.real)
        elif self.real == 0:
            if self.imaginary >= 0:
                result = ""0.00+%.2fi"" % (self.imaginary)
            else:
                result = ""0.00-%.2fi"" % (abs(self.imaginary))
        elif self.imaginary > 0:
            result = ""%.2f+%.2fi"" % (self.real, self.imaginary)
        else:
            result = ""%.2f-%.2fi"" % (self.real, abs(self.imaginary))
        return result"
"Construct a binary tree using an array representation in Python.[4, 2, 6, 1, 3, 5, 7]","class TreeNode:
    def __init__(self, data):
        self.data = data  
        self.left = None
        self.right = None
      
def constructTree(arr): 
    root = TreeNode(arr[0])
    root.left = TreeNode(arr[1])
    root.right = TreeNode(arr[2])
    root.left.left = TreeNode(arr[3])
    root.left.right = TreeNode(arr[4])
    root.right.left = TreeNode(arr[5])
    root.right.right = TreeNode(arr[6])
    return root"
Create a function in R to generate a sequence of numbers starting from 0 and ending at 100.,"seq(from = 0, to = 100, by = 1)"
"Replace all the occurrences of given substring in the sentence.Substring: 'apples'
Sentence: I love apples, apples are my favorite fruit.","I love oranges, oranges are my favorite fruit."
"Write a function to calculate the largest possible number from the given list of integers.[1, 8, 4, 12, 7]",84127
Use the list comprehension feature of Python to create a list of words with length more than 5,words_list = [word for word in words if len(word) > 5]
"Write a NumPy code snippet to create a matrix of given shape and fill it with ones.Shape: (3,4)","np.ones((3,4))"
"Group items of the given array based on the condition and get their sum.Array: [1, 2, 3, 4, 5, 6]
Condition: x % 2 == 0","[12, 9]"
"Provide output for given input using this Python codemessage = ""Hello World!""
function(message)

def function(x): 
    return x[::-1]","""!dlroW olleH"""
"Construct an algorithm to solve this coding problemGiven two sorted linked lists, print a list with all the integers of the two lists as a single sorted list.","def print_sorted_list(list1, list2): 
    result = [] 
    while list1 and list2: 
        if list1.value > list2.value: 
            result.append(list2.value) 
            list2 = list2.next 
        else: 
            result.append(list1.value) 
            list1 = list1.next 
    if list1: 
        result.extend(list1) 
    if list2: 
        result.extend(list2) 
    return result"
"Classify this code error as a runtime error or a compile errordef foo(x):
    if x > 0
        print(""x is positive"")",Compile error
"Insert an if-else statement that prints ""Yes, it's even"" when a given number is even.number = 8","if (number % 2 == 0):
    print(""Yes, it's even"")
else:
    print(""No, it's odd"")"
"Write a function that takes a given string and its length as input arguments and then prints the string reversely.string = ""Hello world""","def stringReverse(string, length): 
    for i in range(length - 1, -1, -1): 
        print(string[i], end="""") 
  
stringReverse(""Hello world"", 11)"
Copy and paste the code to convert a given decimal value to its binary equivalent.decimal_value = 17,"def decToBin(decimal_value): 
    if decimal_value > 1: 
        decToBin(decimal_value // 2) 
    print(decimal_value % 2, end = '') 
  
decToBin(17)"
Generate the list of all prime numbers between 0 and 99.,"prime_list = [] 
for num in range(100): 
    if num > 1:
        for i in range(2, num): 
            if (num % i) == 0: 
                break
        else:
            prime_list.append(num) 
print(prime_list)"
Create an array loop to print all the elements from 1 to 10.,"my_array = [] 
for x in range(1, 11):
    my_array.append(x) 
    print(x)"
"Find the largest and smallest number in a given list.[5, 10, 20, 7, -8, 15]","import math 

my_list = [5, 10, 20, 7, -8, 15]
  
largest = max(my_list) 
smallest = min(my_list) 
  
print(""Largest element is:"", largest) 
print(""Smallest element is:"", smallest)"
"Isolate all the comments from a given piece of codedef square(x):
# return square of x
return x * x",# return square of x
"Modify this piece of code to print numbers up to 10for i in range(5):
  print(i)","for i in range(10):
  print(i)"
Calculate the area of a square with each side equal to 3 inches,The area of the square is 9 square inches.
Compute the greatest common divisor of the numbers 3 and 8,The greatest common divisor of 3 and 8 is 1.
Write a function to determine if a given number is prime and returns true or false.,"def is_prime(num):
    if num <= 1:  
        return False
    for i in range(2, num):  
        if num % i == 0:  
            return False

    return True"
Write a function to find the area of a circle when the radius is given in input.r = 4,"def area_of_circle(r):
    area = 3.14 * (r ** 2)
    return area"
"Perform data validation on two strings s1 and s2 according to the given conditions on the length and special characters.s1 = ""Hello@world""
s2 = ""Test""","def validate_strings(s1, s2):
    if len(s1) > 10 and '@' not in s1:
        return False
    if len(s2) < 5 and '@' in s2:
        return False
    return True"
"Given a tree, traverse it in the pre-order manner.","def pre_order_traversal(tree):
  
    # Visit the root
    print(tree.value)
  
    # Traverse the left subtree, if it exists
    if tree.left:
        pre_order_traversal(tree.left)
  
    # Traverse the right subtree, if it exists
    if tree.right:
        pre_order_traversal(tree.right)"
Design a Python script that takes an array of integers and finds the median.,"def find_median(arr): 
	arr.sort() 
	if len(arr) % 2 != 0: 
		return arr[len(arr)//2] 
	return (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2"
"Write a Python function using the Pandas library to filter out the rows with a missing value in the specified column.Dataframe:

Name	Age
John	25
Jane	
Maria	30

Column Name: Age","import pandas as pd 
   
# Input Data 
df = pd.DataFrame({'Name': ['John','Jane','Maria'], 
                   'Age': [25, None, 30]}) 
  
# Filter the Data 
filtered_df = df.loc[df['Age'].notnull()]

print(filtered_df)"
"Create a Python script to find the maximum value of a list containing both strings and numbersL = [1, 'a', 4, 3, 'b', 6, 'c']","L = [1, 'a', 4, 3, 'b', 6, 'c']

def Max_in_List(L):
    max_num = 0
    for item in L:
        if type(item) == int and item > max_num:
            max_num = item
    return max_num

print(Max_in_List(L))"
Generate a Python generator to produce a sequence of the first N numbers5,"def my_generator(N):
    for i in range(N):
        yield i

g = my_generator(5)
print(list(g)) # [0, 1, 2, 3, 4]"
"Create a python script to filter a list of words, and return only those with even length characters.word_list = [""Python"", ""C++"", ""Java"", ""JavaScript"", ""Ruby""]","def even_length_words(word_list):
    even_words = []
    for word in word_list:
        if len(word) % 2 == 0:
            even_words.append(word)
    return even_words
    
if __name__ == '__main__':
    print(even_length_words(word_list))"
"Outpus the sum of two integer variables.a = 5
b = 10",15
"Write a function that takes two lists as parameters, and returns a third list, containing the elements that occur on both the given lists.list1 = [1, 2, 3, 4, 5]
list2 = [2, 3, 4, 5, 6]","def common_elements(lst1, lst2):
    common = []
    for i in range(len(lst1)):
        if lst1[i] in lst2:
            common.append(lst1[i])
    return common

if __name__ == '__main__':
    list1 = [1, 2, 3, 4, 5]
    list2 = [2, 3, 4, 5, 6]
    print(common_elements(list1, list2))"
"Output the greatest number from a list of numbers.number_list = [4, 8, 15, 16, 23, 42]",print(max(number_list))
"Output the numbers which are divisible by both 10 and 15 from a list of numbers.number_list = [10, 15, 20, 25, 30, 35, 40]","def divisible_by_10_15(number_list):
    divisible_numbers = []
    for num in number_list:
        if num % 10 == 0 and num % 15 == 0:
            divisible_numbers.append(num)
    return divisible_numbers
    
if __name__ == '__main__':
    number_list = [10, 15, 20, 25, 30, 35, 40]
    print(divisible_by_10_15(number_list))"
"Output true if a givenstring ends with 'ing', false otherwise.my_string = ""I am learning""",print(my_string.endswith('ing'))
"Create an R script to calculate the correlation between two numerical vectors, x and y.x = c(1, 2, 4, 5)
y = c(2, 4, 6, 10)","x <- c(1,2,4,5)
y <- c(2,4,6,10)
cor(x, y)"
"Design an algorithm in Python that takes an array of classmates' age and returns the median age.ages = [10, 9, 12, 14, 11]","def median_age(ages):
    ages.sort()
    mid_index = len(ages)//2

    if len(ages)%2 == 0:
        return (ages[mid_index-1] + ages[mid_index])/2
    else:
        return ages[mid_index]"
"Create a function in R which creates a histogram to visualize a given vector and set the bin size.vector = c(2, 3, 5, 6, 12)
bin_size = 3","hist(vector, breaks=bin_size, col=""blue', border=""white"")"
"We want to create a constructor for a person class which takes the name, age and gender of the person as input.name = “Bob”
age = 32
gender = “Male”","class Person {
    String name;
    int age;
    String gender;

    // constructor
    public Person(String name, int age, String gender) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }
}"
"Write a code to compare two numbers in pythonnum1= 5
num2 = 7","if num1 < num2: 
    print(""num1 is smaller than num2"") 
elif num1 > num2: 
    print(""num1 is greater than num2"") 
else: 
    print(""num1 is equal to num2"")"
"Create an array of nicknames for characters in the Lord of the RingsFrodo - Hobbit;
Gandalf - Wizard;
Legolas - Elf;","nicknames = {
    'Frodo': 'Halfling',
    'Gandalf': 'Grey Wizard',
    'Legolas': 'Prince of Mirkwood'
}"
"You are given a string and a letter. Output a new string where the occurances of the given letter are replaced with its index in the given string.""apple"" and ""l""","def replace_letters(text, letter):
  new_text = """"
  for i, char in enumerate(text):
    if char == letter:
       new_text += str(i)
    else:
       new_text += char
  return new_text"
"Write a function to count the number of times a given character is found in an input string.""Hello World"" and ""l""","def count_characters(text, char):
    count = 0
    for c in text:
        if c == char:
            count += 1
    return count"
"You are given a string and a substring. Output the index of the first occurrence of the substring in the string.""Hello World"" and ""Wor""","def get_index(text, substring):
    for i in range(len(text)-len(substring)+1):
        if text[i:i+len(substring)] == substring:
            return i
    return -1"
"Which of the following HTTP methods are used for updating operations?GET, POST, PUT, DELETE","PUT and DELETE are the HTTP methods used for updating operations. GET and POST are used for retrieving and submitting data, respectively."
"Implement a function in Python to compute the average of an array containing floating-point numbers.[1.5, 2.3, 3.8, 4.2]","import numpy as np

def calculate_average(arr):
    return np.mean(arr)
    
print(calculate_average([1.5, 2.3, 3.8, 4.2]))"
Create a Wordpress theme from scratch.,"Create a new folder for your theme, name it ""mytheme"". Open a text editor and a web browser.

Create a style.css file in your theme folder. Add all the CSS styles as required to make your theme looks as desired.

Create an index.php file in your theme folder, and add the code to create a basic layout of your theme in HTML.

Create any other files you may need, such as a template file (example: page.php), functions.php and scripts.php, in order to make your theme fully functional.

Add code to your functions.php file to add different features to your theme.

Create a screenshot.png image of your theme inside your theme folder, to show in the WordPress dashboard.

Zip your theme folder and upload it to WordPress from the “Appearance” menu."
Make an AJAX request to get the list of items from a server.Endpoint URL: http://example.com/items,"$.get('http://example.com/items', function(data) {
    // Code to handle the response
});"
Create an R program to find the percentage of males and females in a given dataset.Table Name: people,"male_count <- nrow(people[people$Gender == ""Male"", ])
female_count <- nrow(people[people$Gender == ""Female"", ])
total <- nrow(people)

male_percentage <- (male_count / total) * 100
female_percentage <- (female_count / total) * 100

print(paste0('Percentage of males:', male_percentage, '%'))
print(paste0('Percentage of females:', female_percentage, '%'))"
Add a ‘onclick’ event to the element with ID ‘button’.,"<script>
document.getElementById(""button"").onclick = () => {
  // Your code goes here
};
</script>"
"Edit the code to convert the string ""cat"" to ""dog"".String str = ""cat""","String str = ""dog"";"
"Edit the code to delete the element with value 6 from the array.int arr[] = {2, 4, 6, 8, 10}","// remove element at index 2
for (int i=2; i< arr.length-1; i++)
   arr[i] = arr[i+1];
   
// Reduce size of array by 1  
int len = arr.length -1;   
int[] newarr = new int[len];
for (int i=0; i<newarr.length; i++)
   newarr[i] = arr[i];"
Compute the prime factors of the number 54.,"The prime factors of 54 are 2, 3, 3, and 3."
"Given a vector x containing N elements, write a Python function to compute and return the sum.x = [2, 3, 5, 7, 11]","def sum_vector(x):
    """"""Returns the sum of all elements in a vector x.""""""
    total = 0
    for num in x:
        total += num
    return total

sum_vector(x) # returns 28"
"Write a function to evaluate the length of an array.arr = [1, 3, 5, 6]","def arr_length(arr):
    """"""Returns the length of a given array.""""""
    return len(arr)

arr_length(arr) # returns 4"
"Create a function to return all students with a given grade.students = [
 {'name': 'John', 'grade': 'A'},
 {'name': 'Jane', 'grade': 'B'},
 {'name': 'Dave', 'grade': 'A'},
 {'name': 'Chris', 'grade': 'C'},
]","def get_students_by_grade(students,grade):
    """"""Returns a list of students with a given grade.""""""
    filtered_list = []
    for student in students:
        if student[""grade""] == grade:
            filtered_list.append(student)
    return filtered_list

get_students_by_grade(students, 'A') # returns [{'name': 'John', 'grade': 'A'}, {'name': 'Dave', 'grade': 'A'}]"
Write a Python 3 script to print out all the words in the string 'I love coding'.,"words = ""I love coding""
for word in words.split():
    print(word)"
Change the following Define statement so that it will display a message containing the word “DONE” when the code is executed.#define display_message(),"#define display_message() printf(""DONE\n"")"
"Create a class that models a student with attributes such as name, age, and GPA.","class Student {
  private string name;
  private int age;
  private double gpa;
  
  // Constructor
  public Student (string name, int age, double gpa) {
    this.name = name;
    this.age = age;
    this.gpa = gpa;
  }
  
  // Getter methods
  public string GetName() {
    return name;
  }
  
  public int GetAge() {
    return age;
  }
  
  public double GetGPA() {
    return gpa;
  }
  
  // Setter methods
  public void SetName(string name) {
    this.name = name;
  }
  
  public void SetAge(int age) {
    this.age = age;
  }
  
  public void SetGPA(double gpa) {
    this.gpa = gpa;
  }
}"
Write a Question answer system for the given paragraph.Paragraph: The current century is the 21st century and it started in 2001,"def QASystem(paragraph):
    words = paragraph.split()
    answer = words[-1]

    while True:
        user_input = input('What is the first year of this century? ')
        if user_input == answer:
            print('Your answer is correct!')
            break
        else:
            print('Incorrect! Please try again')

QASystem(paragraph)"
"Write a code to reverse each element of an arrayarray = ['apple','dog','cat','mouse','ball']","def reverse_array(array):
    reversed_array = []

    for elem in array:
        reversed_array.append(elem[::-1])
    
    return reversed_array

if __name__ == '__main__':
    print(reverse_array(array))"
"Write a code to check if an element is present in an arrayarray = ['apple','dog','cat','mouse','ball']
element = 'cat'","def is_present(array, element):
    if element in array:
        return True
    else:
        return False

if __name__ == '__main__':
    print(is_present(array, element))"
Create a python class to represent a 3x3 matrix,"class Matrix:
    def __init__(self, array):
        self.array = array
        self.rows = len(array)
        self.cols = len(array[0])

    def get_matrix(self):
        return self.array

    def set_matrix(self, array):
        self.rows = len(array)
        self.cols = len(array[0])
        self.array = array

if __name__ == '__main__':
    matrix = [[1,2,3],[4,5,6],[7,8,9]]
    m = Matrix(matrix)"
"Write a code to get the median of four numbersx = 11, y = 12, z = 13, w = 14","def median(x,y,z,w):
    nums = [x,y,z,w]
    nums.sort()
    mid =len(nums)//2
    if len(nums)%2 == 0:
        median = (nums[mid] + nums[mid-1])/2
    else:
        median = nums[mid]
    return median

if __name__ == '__main__':
    print(median(11,12,13,14))"
Modify a given sentence by replacing the invalid punctuation with a valid one.This is an example sentence.,This is an example sentence?
"Translate the following sentence to Python code.Input the hours, rate and the tax rate.","hours = float(input(""Input the hours: ""))
rate = float(input(""Input the rate: ""))
tax_rate = float(input(""Input the tax rate: ""))"
"Create a new variable called result which is the sum of the variables a and b.a = 13
b = 14",result = 27
What is the maximum value that can be assigned to an unsigned 8-bit integer?,255
"Write an algorithm in Python that takes an array as input and prints all the duplicate values in it.arr = [1, 4, 7, 2, 6, 1, 7, 2]","def find_duplicates(arr): 
    result = [] 
    for i in range(0, len(arr)): 
        for j in range(i + 1, len(arr)): 
            if arr[i] == arr[j]: 
                result.append(arr[i]) 
    return result

arr = [1, 4, 7, 2, 6, 1, 7, 2] 
  
result = find_duplicates(arr) 
  
print(result)"
Write a function in Python that takes a number as input and prints out if the number is odd or even.Number = 23,"def OddEven(num):
    if num%2 == 0 :
        print(""{} is Even"".format(num))
    else :
        print(""{} is Odd"".format(num))

OddEven(23)"
Print the positions of all vowels in the given string.String: mississippi,"The positions of all vowels in the string ""mississippi"" are: 
[1, 4, 7, 10]."
Find the smallest positive number which is divisible by both 5 and 7.,The smallest positive number which is divisible by both 5 and 7 is 35.
Come up with a list of 10 words that best describes a person,"Creative, Ambitious, Independent, Kind, Generous, Compassionate, Confident, Hardworking, Empathetic, Loyal."
"Change the code to have an array shift right by one without using built-in functionsnums = [1, 2, 3, 4, 5]","temp = nums[len(nums) - 1]
for i in range(len(nums) - 1, 0, -1):
    nums[i] = nums[i - 1]
nums[0] = temp"
"Come up with a program that takes in two strings and returns the number of characters that are shared between themstr1 = ""Greatest""
str2 = ""Gifted""","def num_common_chars(str1, str2):
    count = 0
    for x in str1:
        if x in str2:
           count += 1
           
    return count"
"Edit the code so it can detect if an array is already sortedarr = [1, 2, 4, 5, 6, 7]","def is_sorted(arr): 
    n = len(arr) 
    for i in range (0, n-1): 
        if (arr[i] > arr[i+1] ): 
            return False
    return True"
Create a regex pattern to match a valid US zipcode,^\d{5}(-\d{4})?$
"Edit the code to print out that ""Index not found"".nums = [1, 2, 3, 4, 5]
target = 6","def Contains(nums, target):
    for i in range(len(nums)):
        if nums[i] == target:
            return True
    print(""Index not found"")
    return False"
Edit the code to print out an error message if a negative number is entered as inputnum = -5,"if num < 0:
    print(""Error: Please enter a positive number!"")
else:
    print(""Great, the number is positive."")"
"Create a program that takes in two strings and prints out common wordsstr1 = ""The quick brown fox""
str2 = ""The brown rabbit""","def common_words(str1, str2):
    l1 = str1.split()
    l2 = str2.split()
    result = list(set(l1) & set(l2))
    return result"
"Identify the operations used to calculate the sum of the given array of numbers.Array: [2, 3, 8, 9]",The sum of the given array of numbers is calculated using the addition operation.
"Update the given list of numbers such that the first number is subtracted from the second one, the third is multiplied by the fourth, and the result is added to the fifth.[2, 5, 4, 7, 9]","[2, 5, 28, 7, 37]"
Output the remaining result after subtracting 5 from a given number.Number: 17,12
Print a message based on the given age.Age: 32,"Print(""Welcome! You are {age} years old"")"
"Output the median of the given list of numbers.[1, 4, 7, 9, 12]",7.5
"Replace all vowels (except y) in the given text with a given character.Text: Hello World
Character: #",H#ll# W#rld
Create a smart contract in solidity for executing a will.The will is to be activated when the testator is no longer alive.,"pragma solidity ^0.6.0; 

contract Will {
    address owner;

    constructor () public {
        owner = msg.sender;
    }

    function executeWill () public {
        // execute will here
        // code to check if testator is alive
    }
}"
Create an api with Django that is able to search through an inputed text.,"from django.contrib.auth.models import User
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators.csrf import csrf_exempt
from .models import Search

@csrf_exempt
def search_text(request):
    if request.method == 'PUT':
        data = request.PUT
        text = data.get('text',None)
        if text:
            matches = Search.objects.filter(text__icontains=text)
            return HttpResponse(matches)
        else:
            return HttpResponse(""Error: No text was provided"")"
Create a list of 3 objects in Python.,"list = [1, ""hello"", {'name': 'John'}]"
"Produce an algorithm to reverse the elements of an array.Array: [1, 2, 3, 4, 5]","Algorithm:

// Step 1: Set two pointers, start and end initially pointing to 0 and the last element respectively.
start = 0; end = arr.length - 1;

// Step 2: Swap the elements at pointer start and end.
swap(arr[start], arr[end]);

// Step 3: Increment start pointer and decrement end pointer.
start++; end--;

// Step 4: Repeat steps 2 and 3 until start and end pointers cross each other.
while (start < end) {
    swap(arr[start], arr[end]);
    start++; end--;
}"
"Create a class named Dog with parameters name, age and breed.","class Dog:
    def __init__(self,name, age, breed):
        self.name = name
        self.age = age
        self.breed =  breed"
"Write a Python program to remove the elements that occur only once from a given array.[1, 2, 2, 3, 3, 3, 4, 4]","def remove_once(arr): 
    freq_table  = {} 
    for num in arr: 
        if num in freq_table.keys(): 
            freq_table[num] += 1
        else: 
            freq_table[num] = 1

    filtered_array = [] 
    for num, freq in freq_table.items(): 
        if freq > 1: 
            filtered_array.append(num) 
    return filtered_array

remove_once([1, 2, 2, 3, 3, 3, 4, 4])

#Output: [2, 3, 4]"
"Given a number n, generate a list of tuples of the form (x,n/x) where x divides n.n = 30","def generate_tuples(n):
    tuples=[]
    for x in range (1,n+1):
        if n % x == 0:
            tuples.append((x,int(n/x)))
    return tuples"
"Given a tree, write a program to find the maximum depth of the tree.","def max_depth(node):
    if node is None:
        return 0
    else:
        left_depth = max_depth(node.left)
        right_depth = max_depth(node.right)
        if left_depth > right_depth:
            return left_depth + 1
        else: 
            return right_depth + 1"
Write a function to return the logical XOR between two given boolean variables.,"def xor(a, b):
    return bool(a) != bool(b)"
What is the complexity of the function you wrote in Q6?,The complexity of the Fibonacci function from the previous question is O(2^n).
What data structure should you use to store the result of Q11 so that you can efficiently retrieve the desired result?,The best data structure to store the result of Q11 is a 2D array or matrix. This data structure can be used to efficiently retrieve the longest common subsequence of two strings.
"Write a function that takes two input parameters, a list and a number, and returns true if the number occurs in the list more than twice.","def appears_twice(lst, num):
    c = 0
    for n in lst:
        if n == num:
            c += 1
    if c > 2:
        return True
    else:
        return False"
"Suggest an efficient algorithm for sorting the following list.[7, 1, 4, 8, 9, 2]","def sort(array): 
    length = len(array) 
  
    for i in range(length): 
  
        j = i 
        while j > 0 and array[j-1] > array[j]: 
            # Swap elements
            array[j], array[j-1] = array[j-1], array[j] 
            j -= 1

    return array"
"Given the following input, suggest a python code for computing the Fibonacci number for n.","def Fibonacci(n): 
    a = 0
    b = 1
    if n<0: 
        print(""Incorrect input"") 
    elif n==0: 
        return a 
    elif n==1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
    return b"
Suggest a method to print out a list of prime numbers below a given number n.,"def prime_numbers(n): 
    numbers = list(range(2, n + 1)) 
    for i in range(2, n+1): 
        for j in range(i + 1, n+1): 
            if j % i == 0: 
                numbers[j - 2] = 0 
  
    return [number for number in numbers if number != 0]"
Generate a python code to remove all the occurrences of the element x from a list y.,"def remove_x(x, y):  
    while x in y: 
        y.remove(x) 
    return y"
Suggest a python code that returns the average of all the elements in a list.,"def avg_list(lst): 
    return sum(lst) / len(lst)"
Generate a code to make all the elements of a list positive.,"def make_positive(lst): 
    return [abs(x) for x in lst]"
"Write a python code to generate permutations of an input string.""abc""","def permutations(string): 
    if len(string) == 0: 
        return [] 
  
    if len(string) == 1: 
        return [string] 
  
    l = [] 
    for i in range(len(string)): 
       m = string[i] 
       rem_string = string[:i] + string[i+1:] 
       for p in permutations(rem_string): 
           l.append(m + p) 
    return l"
"Design a code to generate a histogram from given data.[2, 3, 5, 6, 9]","def histogram(lst): 
    frequency = {} 
  
    for item in lst: 
        frequency[item] = frequency.get(item, 0) + 1 
  
    for item in frequency: 
        print(item, '-->', '*' * frequency[item])"
"Write a Python snippet that prints out each item in a given list.list = [""Apple"", ""Banana"", ""Cherry""]","for item in list:
  print(item)"
List the methods used by the os module in python.,"The methods used by the os module are: getcwd(), listdir(), mkdir(), rename(), chdir(), rmdir(), stat(), chmod(), remove(), chown(), and many more."
Perform an in-place reversal of a linked list,"def reverse_list(head): 
    curr = head 
    prev = None
    while curr: 
        next = curr.next
        curr.next = prev 

        prev = curr 
        curr = next

    head = prev 
    return head"
Describe what O(n^2) represents in terms of complexity.,O(n^2) represents a time complexity in which the execution time of an algorithm increases in proportion to the square of the input size.
"Translate the following MATLAB code snippet into R.A = [1 2 3; 4 5 6; 7 8 9];
B = A(1, :)","A <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)
B <- A[1,]"
"Rewrite the following Python code to include proper exception handling.f = open(""myfile.txt"")
text = f.read()","try:
    f = open(""myfile.txt"")
    text = f.read()
except IOError:
    print(""Error: Could not open file"")
finally:
    f.close()"
Suggest an algorithm to compute the sum of all prime numbers from 2 to n.,"def sum_primes(n):
    # Initialize sum to 0
    sum_prime = 0

    # Iterate through all numbers from 0 to n
    for num in range(2, n+1):
        is_prime = True
        
        # Check whether the number is prime
        for div in range(2, num):
            if num % div == 0:
                is_prime = False
                break
        
        # If the number is prime, add it to the sum
        if is_prime:
            sum_prime += num

    # Return the sum
    return sum_prime"
"Given a list of numbers, suggest code that returns the number of distinct elements in the list.numbers_list = [1, 2, 3, 2, 4, 5, 1]","# Get the number of distinct elements in a list
numbers_list = [1, 2, 3, 2, 4, 5, 1]

# Create a set from the list 
distinct_elements = set(numbers_list)

# Return the number of distinct elements 
return len(distinct_elements)"
Suggest the best data structure to store a small dictionary of words and their meanings.,"# The best data structure to store a small dictionary of words and their meanings is a hash table (dictionary/dict).
# A hash table is an efficient data structure that uses key-value pairs to store and retrieve data quickly. 
# It performs well in cases where there is a need to search, add and delete elements in a collection. 
# A hash table will allow the user to look up a word in the dictionary quickly."
"Suggest a code that combines two lists of strings without duplicates.list1 = [""one"", ""two"", ""three""]
list2 = [""two"", ""four"", ""five""]","# Combine two lists of strings without duplicates
list1 = [""one"", ""two"", ""three""]
list2 = [""two"", ""four"", ""five""]

# Create a new set that only contains distinct elements
distinct_elements = set(list1 + list2)

# Convert the set back to a list
combined_list = list(distinct_elements)"
"Sort a list containing numbers and a list containing strings together, in ascending order.num_list = [2, 4, 6, 1] 
string_list = ['zanzibar', 'banana', 'apple']","# Sort a list containing numbers and a list containing strings together, in ascending order
num_list = [2, 4, 6, 1] 
string_list = ['zanzibar', 'banana', 'apple']

# Combine lists 
combined_list = num_list + string_list

# Sort the list 
combined_list.sort()

# Print the result
print(combined_list)"
Write a code to get the age of a person given their year of birth.born_year = 2003,"# Get the age of a person given their year of birth
from datetime import date

def get_age(born_year):
    # Get current year
    today_year = date.today().year
    
    # Compute the age
    age = today_year - born_year
    
    # Return the result
    return age"
"Suggest a code that takes a two-dimensional array as input and flattens it.arr = [[1,2],[3,4],[5,6]]","# Suggest a code that takes a two-dimensional array as input and flattens it
def flatten_array(arr):
    # Initialize the result array
    result_arr = []

    # Iterate the input array
    for subarr in arr:
        # Iterate each sub-array and add each element to the result array
        for elem in subarr:
            result_arr.append(elem)
    
    # Return the result
    return result_arr"
Replace the vowel characters in a given string with underscores.Hello World!,H_ll_ W_rld!
"You have been provided with a list of integers. Write a function that multiplies each number in the list by 5.[1, 20, 0, 5, 2]","def multiply_list_by_five(arr):
    result = []
    for num in arr:
        result.append(num * 5)
    return result"
Create a regular expression that matches the email address with the domain gmail.com,\S+@gmail\.com$
"Given a string and a list of words, count the frequency of each word in the string.String = ""This is a test string to check the frequency of words""
Word List = [""this"", ""is"", ""test"", ""string""]","def count_frequency_of_words(string, word_list):
    frequency_dict = {}
    string_words = string.split()
    for word in word_list:
        count = 0
        for s_word in string_words:
            if s_word.lower() == word.lower():
                count += 1
        frequency_dict[word] = count
    return frequency_dict"
"Given a list of strings, write a function which will return only strings which start with an uppercase letter.String List = [""hello"", ""World"", ""foo"", ""bar""]","def extract_capital_words(string_list):
    capital_words = []
    for word in string_list:
        if word[0].isupper():
            capital_words.append(word)
    return capital_words"
Create a regular expression that will match all telephone numbers.,\(?\d{3}\)?-?\s?\d{3}-?\s?\d{4}
"Given a list of integers, write a function that will return the largest sum of any two consecutive integers in the list.[7, 2, 5, 3]","def largest_sum_of_consecutive_ints(arr):
    largest_sum = 0
    for i in range(len(arr)):
        if i < len(arr)-1:
            current_sum = arr[i] + arr[i+1]
            largest_sum = max(largest_sum, current_sum)
    return largest_sum"
"Given an input string, write a function that will remove all non-alphanumeric characters.Hello World!","def remove_non_alphanumeric_chars(input):
    output = """"
    for char in input:
        if char.isalnum():
            output += char
    return output"
"You need to write a program that finds all elements in a given array which are larger than their immediate neighbours.[3, 5, 1, 6, 8, 4]","def find_elements_larger_than_neighbours(arr):
    result = []
    for index, value in enumerate(arr):
        if index > 0 and index < len(arr)-1 and value > arr[index-1] and value > arr[index+1]:
            result.append(value)
    return result"
"Create code that will print the elements of a list in reverse order.my_list = [1,2,3,4]","my_list = [1,2,3,4]
for i in range(len(my_list)-1,-1,-1):
    print(my_list[i])"
"Suggest a completion to the following class definition that creates a constructor to initialize a Person object.class Person:
    def __init__(self):","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Given the two array elements, swap their positions in the array.Array: [7, 4, 5, 6], i = 0, j = 2","Array: [5, 4, 7, 6]"
Write regex to match the pattern xaaab.,^xaaab$
"Search for the given element in the given list and return true if it is found otherwise return false.List: [4, 7, 8, 9], elem: 9",true
Compare and contrast function overloading and function overriding.,"Function overloading is when two or more functions have the same name but different parameters. This can be used to create multiple definitions of a single function that can be used to support different data types. Function overriding is when a derived class extends a base class and redefines its virtual methods. This allows for derived classes to have specialized behavior for a certain method, while still allowing for the base class to be used when that behavior isn't needed. Thus, function overloading allows for a single function to have different behavior, while function overriding allows a derived class to specialize a method of the base class."
"Find the number of times a particular number is repeated in an array.[2, 3, 6, 8, 8, 5, 4, 8]",The number 8 is repeated 3 times in the array.
Discuss some of the common applications of ranking algorithms.,"Ranking algorithms are commonly used for a wide range of applications such as web search, recommender systems, spam filtering, and sentiment analysis. In web search, ranking algorithms are used to rank websites according to relevance, so that the most relevant website appears first in the search results. Recommender systems use ranking algorithms to rank items according to user preference, so that the user can be recommended the item that best suits their preferences. Spam filtering is another application where ranking algorithms are used to identify and filter out unsolicited messages. Last but not least, sentiment analysis also uses ranking algorithms to analyze customer feedback, so that companies can identify customer sentiment and take the necessary steps to address it."
Name three advantages of using dynamic programming,"Three advantages of using dynamic programming are:

1. It provides optimal solutions to many real world problems.
2. It allows us to solve problems that can be broken down into overlapping subproblems.
3. It drastically reduces the computation time by avoiding repeated calculation of the same results."
Construct a simple algorithm to check if a number is prime11,"def is_prime(n):
    # check if n is divisible by any number between 2 and n-1 
    for i in range (2, n):
        # if a number is divisible, then return False
        if (n % i == 0):
            return False
    # if n is only divisible by itself, return True
    return True

if __name__ == '__main__':
    n = 11
    if(is_prime(n)):
        print(n, ""is a prime number"")
    else:
        print(n, ""is not a prime number"")"
Discuss the purpose of data cleaning,"The purpose of data cleaning is to ensure that the data is in an accurate and usable form. This involves eliminating or correcting errors such as missing data, incorrect data, duplicate data, and outliers. It also involves replacing invalid values with valid ones, standardizing data formats and converting data from one format to another, and filling in missing values with imputed values. Data cleaning is an important step in the data analysis pipeline, and it is necessary to ensure that your data is in an appropriate and reliable form before performing any analysis on it."
Write a Python script that can convert a string to pig latin,"def pig_latin(text):
    words = text.split()
    Latin_words = []
    # loop through every word 
    for word in words:
        # seperate consonants from vowels
        firstletter = word[0]
        if firstletter.lower() in 'aeiou':
            Latin_word = word+'ay'
        else:
            Latin_word = word[1:]+firstletter+'ay'
        Latin_words.append(Latin_word)
    return "" "".join(Latin_words)"
Write a code to generate all string combinations of a given alphabet,"def generate_strings(alphabet): 
    n = len(alphabet)  
  
    # Run a loop for all elements in array one by one 
    for i in range(1 << n): 
  
        # Create a string s of length n 
        s = """" 
        for j in range(n): 
  
            # Check if jth bit of i is set or not 
            # and if set append character j to s 
            if i & (1 << j): 
                s += alphabet[j] 
  
        # Print the generated string 
        print(s)"
"Complete the following Python code so it prints even numbers from 0 to 10.for num in range(0, 10):
    if","for num in range(0, 10):
    if num % 2 == 0:
        print(num)"
How would you remove duplicates from a Python list?,"The most straight-forward approach is to add the elements to a set while iterating over the original list and then build a new list out of the set.

Example: 

original_list = [1,2,2,3,3,4] 

new_list = list(set(original_list)) 

print(new_list) 
# Output [1, 2, 3, 4]"
What is the appropriate action to take when a user enters a wrong password in a login form?,The appropriate action is to show an error message and to prevent the user from re-submitting the login form until the correct password is entered.
"Create a vectorized version of this code snippet in MATLAB.for i = 1:n
 c = a(i,:).*b;
end",c = a.*b;
"Write a function that takes two lists as an argument and returns the elements that are common to both the lists in Python.list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]","def common_elements(list1, list2):
    common_list = [element for element in list1 if element in list2]
    return common_list"
"Create a Racket function that takes two strings as an input and returns the length of the longest common substring.String1 = ""hello world""
String2 = ""world hello""","(define (getLongestCommonSubstring string1 string2)
    (define max-len 0)
    (define s1-len (string-length string1))
    (define s2-len (string-length string2))
    (for ((i 0 (+ i 1)))
        (< i s1-len)
        (for ((j 0 (+ j 1)))
            (< j s2-len)
            (let ((cur-len 0))
            (when (equal? (string-ref string1 i) (string-ref string2 j))
                (while (and (< i s1-len)
                       (< j s2-len)
                       (equal? (string-ref string1 i) (string-ref string2 j))) 
                (set! cur-len (+ cur-len 1))
                (set! i (+ i 1))
                (set! j (+ j 1)))
            (when (> cur-len max-len)
                (set! max-len cur-len))
            )
        )
    )
    max-len
)"
"Categorize the following sentence as either positive or negative sentiment: ""I had the worst experience with this product"".I had the worst experience with this product",Negative sentiment
"Write a function that takes two strings and returns the total number of occurrences of the second string in the first.string1 = ""hello world""
string2 = ""world""","def count_occurrences(string1, string2): 
    
    # Initialize count to 0
    count = 0
    
    # Iterate over the first string
    for i in range(len(string1)): 
        # Slice the element from i to length of second string
        temp = string1[i: i + len(string2)] 
  
        # If sliced string and second string are equal, 
        # increase count by one
        if temp == string2: 
            count+= 1
  
    return count"
What is the product of 16 and 4?,The product of 16 and 4 is 64.
"Edit the code to add an additional parameter.def find_sum(x, y):
    return x + y","def find_sum(x, y, z):
    return x + y + z"
"For the given code, fill the missing values for the parameters.def compute_squared(x, y=?, z=?):
    '''This function computes the sum of the squared values of x, y, and z.'''
    return x ** 2 + y ** 2 + z ** 2","def compute_squared(x, y=0, z=0):
    '''This function computes the sum of the squared values of x, y, and z.'''
    return x ** 2 + y ** 2 + z ** 2"
"Fill the missing values below to make the function work properly.def compound_calculation(x, y, z=?):
    '''This function calculates the compound amount at the given rate.'''
    return (x + y) * z","def compound_calculation(x, y, z=1.1):
    '''This function calculates the compound amount at the given rate.'''
    return (x + y) * z"
"Are there any recognizable design patterns used in the code?def double_all(numbers):
    ''' This function takes in a list of numbers as an argument and returns a new list with all the numbers doubled. '''
    doubled_numbers = []
    for number in numbers:
        doubled_numbers.append(number * 2)
    return doubled_numbers","Yes, the code uses the Iterator pattern to loop over the elements of the list."
"Complete the function to correctly check if a number is even.def is_even(number):
    '''This function should return true if the number is even and false if the number is odd.'''
    # TODO","def is_even(number):
    '''This function should return true if the number is even and false if the number is odd.'''
    return (number % 2) == 0"
Create a function to scale a number by the given factor.factor = 0.5,"def scale_value(x, factor):
    '''This function will scale the given number by the given factor.'''
    return x * factor"
"Create a function to find common elements in two lists.list_1 = [1, 2, 3]
list_2 = [2, 3, 4]","def find_common_elements(list_1, list_2):
    '''This function will find the common elements in two lists.'''
    return [val for val in list_1 if val in list_2]"
"Create a function to determine whether one string is a substring of another.string_1 = ""abcdefgh""
string_2 = ""efg""","def is_substring(string_1, string_2):
    '''This function takes two strings and returns a boolean indicating whether
    string_2 is a substring of string_1.'''
    return string_2 in string_1"
"Create a function that takes in a list and an index and swaps the elements at the given indices.list = [1, 2, 3, 4]
index_1 = 0
index_2 = 2","def swap_elements(lst, index_1, index_2):
    '''This function takes in a list and two indices and swaps the elements at the given indices.'''
    lst[index_1], lst[index_2] = lst[index_2], lst[index_1]
    return lst"
Write a code which generates the Fibonacci sequence.,"""""""
Write a code which generates the Fibonacci sequence
""""""

def generate_fibonacci_sequence(n): 
    a = 0
    b = 1
    if n == 1: 
        print(a) 
    else: 
        print(a) 
        print(b) 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
            print(c) 

if __name__ == '__main__':
    n = 9
    generate_fibonacci_sequence(n)"
"Create a program to calculate the area and the perimeter of a rectangle.length = 4
width = 5","""""""
Create a program to calculate the area and the perimeter of a rectangle
""""""

def area_perimeter(length, width): 
    area = length * width
    perimeter = 2 * (length + width)
    return area, perimeter

if __name__ == '__main__':
    print(area_perimeter(4, 5))"
Code a function to solve the Tower of Hanoi puzzle.,"""""""
Code a function to solve the Tower of Hanoi puzzle
""""""

def tower_of_hanoi(n, source, aux, dest): 
    if n == 1: 
        print(""Move disk 1 from rod"", source, ""to rod"", dest)
        return
    tower_of_hanoi(n-1, source, dest, aux) 
    print(""Move disk"", n, ""from rod"", source, ""to rod"", dest) 
    tower_of_hanoi(n-1, aux, source, dest) 

if __name__ == '__main__':
    n = 3
    tower_of_hanoi(n, 'A', 'B', 'C')"
"Sort an array of characters in alphabetic order.['x', 'q', 'b', 'j']","""""""
Sort an array of characters in alphabetic order
""""""

def sort_alphabetically(arr):
    arr.sort()
    return arr

if __name__ == '__main__':
    print(sort_alphabetically(['x', 'q', 'b', 'j']))"
"Create a program which calculates the median of an array.[3, 5, 4, 1, 7]","""""""
Create a program which calculates the median of an array
""""""

def median(arr): 
    n = len(arr) 
    arr.sort() 
  
    if n % 2 == 0: 
        return (arr[n//2] + arr[n//2-1])/2
    else: 
        return arr[n//2]

if __name__ == '__main__':
    print(median([3, 5, 4, 1, 7]))"
"Create a Python program to merge two lists by alternating elements.list1 = [2, 3, 5, 7]; 
list2 = [4, 8, 10];","def merge(list1, list2):
    mergedList = []
    for x,y in zip_longest(list1,list2): 
        mergedList.extend([x,y]) 
    return mergedList"
"Rearrange the elements of the array [3, 1, 2, 5, 4] in ascending order.[3, 1, 2, 5, 4]","[1, 2, 3, 4, 5]"
Display the dice sum of two random numbers from 1 to 6.,"// Generating two random numbers from 1 to 6
let rand1 = Math.floor(Math.random() * 6) + 1; 
let rand2 = Math.floor(Math.random() * 6) + 1; 

// Calculating and displaying the dice sum 
let diceSum = rand1 + rand2; 
console.log(""Dice sum: "" + diceSum);"
"Output the contents of the array [""Hello"", ""World"", ""AI"", ""Machine Learning""] using a for loop.","for (let i = 0; i < array.length; i++) {
 console.log(array[i]);
}"
You need to edit the wrong sentence appropriately.I likes ice cream.,I like ice cream.
"Rewrite the following code using lambda expression instead.def square(x):
return x * x",square = lambda x: x * x
"Print a binary tree level by level, starting from the root level.","#include<iostream>
#include<queue>
using namespace std;

// A Binary Tree Node
struct Node
{
    int data;
    struct Node *left, *right;
};
 
// Function to print the level order traversal of the tree
void levelOrder(struct Node *root)
{
    // Base Case
    if (root == NULL)  return;
 
    // Create an empty queue for level order traversal
    queue<Node *> q;
   
    // Enqueue Root and initialize height
    q.push(root);
 
    while (q.empty() == false)
    {
        // Print front of queue and remove it from queue
        struct Node *node = q.front();
        cout << node->data << "" "";
        q.pop();
 
        /* Enqueue left child */
        if (node->left != NULL)
            q.push(node->left);
 
        /*Enqueue right child */
        if (node->right != NULL)
            q.push(node->right);
    }
}"
"Construct a for-loop to print all numbers from 1 to n, separated by a space.","for i in range(1, n + 1):
    print(i, end="" "")"
"Suggest a better approach to sort the given array.[4, 3, 8, 6, 7, 9, 2, 1]","def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    left = []
    right = []
    for i in range (1, len(arr)):
        if arr[i] < pivot:
            left.append(arr[i])
        else:
            right.append(arr[i])
    left = quick_sort(left)
    right = quick_sort(right)
    return left + [pivot] + right"
Write a function to give the intersection of two unsorted linked lists.,"def intersection(head1, head2):
    s = set()
    current1 = head1
    current2 = head2
    while current1 is not None:
        s.add(current1.data)
        current1 = current1.next
    result = []
    while current2 is not None:
        if current2.data in s:
            result.append(current2.data)
        current2  = current2.next
    return result"
"Parse the following string and store each key-value pair into a dictionary.""name=John, age=45, gender=m""","s = ""name=John, age=45, gender=m""

d = dict()
for x in s.split(','):
    d[x.split('=')[0].strip()] = x.split('=')[1].strip()"
Write an efficient Python program to remove duplicate characters from the given string.String: Hello world,He lwrd
Write a Haskell function to check if two numbers are evenly divisible.,"isEvenDivisible :: Integer -> Integer -> Bool
isEvenDivisible x y = (x `mod` y) == 0"
"Identify the incorrect statement about the following code fragment.def is_over21(age):
    if age > 21:
        return “true”
    else:
        return","The function returns a string, ""true"" which is invalid. The function should return a boolean value instead (True or False)."
"Construct an expression that combines the two values x and y so that the following statement evaluates to truex = 4
y = 8",x+y >= 12 #expression to evaluate to true.
"Suggest correction to the following calculated value.a = 3
b = 5
calculated value = b/a",calculated value = b/float(a) #Suggested correction.
"How could the following code be optimized?def remove_duplicates(input_list):
    temp_list = []
    for item in input_list:
        if item not in temp_list:
            temp_list.append(item)
    return temp_list","def remove_duplicates(input_list):
    return list(set(input_list)) #This is more efficient than iterating over the list to remove duplicate items."
Construct the lambda function for calculating the square of a number.,square = lambda x: x*x #This lambda function will calculate the square of a number.
"Construct a for loop to print all the elements of a list numbered in sequence, as shown in the output.list_elements = [""apple"", ""banana"", ""cherry""]","for index, element in enumerate(list_elements,start=1):
    print(index, element)
    #Output:
    #1 apple
    #2 banana
    #3 cherry"
Construct an expression that checks if the length of a string is equal to the length of another string.,len(string1) == len(string2) #This expression checks if the length of a string is equal to the length of another string.
"Edit the following code to print a statement if the given list has no elements.def print_list_elements(list):
    if len(list)>0:
        for element in list:
            print(element)","def print_list_elements(list):
    if len(list)>0:
        for element in list:
            print(element)
    else:
        print(""The list has no elements."") #This edited code will print a statement if the given list has no elements."
"Create a tree structure using the provided Python dictionary.dict = {
  1: {
    'parent': 0,
    'children': [2, 3, 4]
  },
  2: {
    'parent': 1,
    'children': []
  },
  3: {
    'parent': 1,
    'children': [5, 6]
  },
  4: {
    'parent': 1,
    'children': [7]
  },
  5: {
    'parent': 3,
    'children': []
  },
  6: {
    'parent': 3,
    'children': []
  }
  7: {
    'parent': 4,
    'children': []
  }
}","""""""
Create a tree structure using the Python dictionary provided
""""""

class TreeNode:
    def __init__(self, value=None, parent=None, children=None):
        self.value = value
        self.parent = parent
        self.children = children if children is not None else []
    
    def __repr__(self):
        return f""TreeNode({self.value}, {self.parent.value}, {[c.value for c in self.children]})""
    
    def __str__(self):
        return self.__repr__()

def create_tree_structure(data):
    tree = dict()
    for k, v in data.items():
        parent = v[""parent""]
        tree[k] = TreeNode(value=k, parent=tree.get(parent), children=list())
        if parent in tree:
            tree[parent].children.append(tree[k])
    return tree

if __name__ == ""__main__"":
    dict = {
        1: {
            'parent': 0,
            'children': [2, 3, 4]
        },
        2: {
            'parent': 1,
            'children': []
        },
        3: {
            'parent': 1,
            'children': [5, 6]
        },
        4: {
            'parent': 1,
            'children': [7]
        },
        5: {
            'parent': 3,
            'children': []
        },
        6: {
            'parent': 3,
            'children': []
        },
        7: {
            'parent': 4,
            'children': []
        }
    }
    tree = create_tree_structure(dict)
    print(tree)"
"Write a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast.forecast = [
  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},
  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},
  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},
  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},
  {'day': 'Friday', 'description': 'raining', 'temperature': 24},
  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},
  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}
]","""""""
Write a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast
""""""

import datetime

def get_max_temperature_today(forecast):
    today = datetime.datetime.today().weekday()
    
    max_temp = None
    for day in forecast:
        if day['day'] == today:
            max_temp = max(max_temp, day['temperature'])
    
    return max_temp
  
if __name__ == ""__main__"":
    forecast = [
  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},
  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},
  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},
  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},
  {'day': 'Friday', 'description': 'raining', 'temperature': 24},
  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},
  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}
]

print(get_max_temperature_today(forecast))"
"Create a function that sorts a dictionary of words and their frequencies alphabetically.dict = {
  'the': 10,
  'at': 3,
  'hello': 5,
  'cat': 1,
  'counter': 2
}","""""""
Create a function that sorts a dictionary of words and their frequencies alphabetically.
""""""

def sort_dictionary(dictionary):
    return dict(sorted(dictionary.items(), key=lambda x: x[0]))

if __name__ == ""__main__"":
    dict = {
        'the': 10,
        'at': 3,
        'hello': 5,
        'cat': 1,
        'counter': 2
    }

    print(sort_dictionary(dict))"
Write a Python program to group the values of a given list of elements based on the size of the elements.,"""""""
Write a Python program to group the values of a given list of elements based on the size of the elements.
""""""

def group_values(values):
    result = {}
    for value in values:
        size = len(value)
        if size not in result:
            result[size] = []
        result[size].append(value)
    return result

if __name__ == ""__main__"":
    values = ['cat', 'dog', 'monkey', 'elephant', 'giraffe']
    print(group_values(values))"
Write a code to convert a given English sentence into Pig Latin.,"""""""
Write a code to convert a given English sentence into Pig Latin.
""""""

def pig_latin(sentence):
    vowel = [""a"", ""e"", ""i"", ""o"", ""u""]
    words = sentence.split("" "")
    pig_latin_words = []

    for word in words:
        if word[0] in vowel:
            pig_latin_words.append(word + ""way"")
        else:
            pig_latin_words.append(word[1:] + word[0] + ""ay"")
    
    return "" "".join(pig_latin_words)

if __name__ == ""__main__"":
    sentence = ""This is a sample sentence""
    print(pig_latin(sentence))"
"Add the following Python function to generate a Fibonacci sequence.def fibonacci_sequence(n):
    """"""Generate a Fibonacci sequence up to n.""""""","def fibonacci_sequence(n):
    """"""Generate a Fibonacci sequence up to n.""""""
    result = []

    first, second = 0, 1
    while first < n:
        result.append(first)
        first, second = second, first + second
    
    return result"
"Rewrite the following Python code so that it uses a for loop instead of a while loop.i = 0
while i < 11:
    print(i)
    i += 1","for i in range(11):
    print(i)"
Write a code to get the current time in New York City in 24-hour format.,"import pytz
from datetime import datetime

def get_time():
    new_york = pytz.timezone('America/New_York')
    curr_time = datetime.now(new_york).strftime('%H:%M')
    return curr_time

if __name__ == '__main__':
    print(get_time()) #this will print the current time in 24-hour format in New York City"
"Given a sentence, remove all special characters.My@name*is¥Sam",My name is Sam
"Use a Tensorflow model to predict a numerical output from an input.Input: [1, 2, 3]
Output: 8.5","import tensorflow as tf

# Define the model.
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(10, activation=""relu""),
    tf.keras.layers.Dense(1)
])

# Compile the model.
model.compile(optimizer=""adam"", loss=""mse"")

# Train the model.
model.fit([1, 2, 3], [8.5], epochs=50)"
"Create another function to remove duplicates from the array.arr = [1, 1, 2, 3, 4, 5, 5, 6, 7]","def remove_duplicates(arr):
    result = []
    for num in arr:
        if num not in result: # if current element is unique, add to the list.
            result.append(num)
    return result
    
new_arr = remove_duplicates(arr)
print(new_arr) # [1, 2, 3, 4, 5, 6, 7]"
"Suggest a code to find the longest sub-string in a string.string = ""The quick brown fox jump over lazy dog""","def find_longest_substring(string):
    # get the length of the string
    length = len(string)
     
    # variable to store the longest substring length
    longest_substring_length = 0
     
    # variable to store the longest substring
    longest_substring = ''
     
    # loop through the string
    for i in range(length):
      tmp_str = ''
      for j in range(i, length):
        if string[j] not in tmp_str:
          tmp_str += string[j]
        else:
            break
      if len(tmp_str) > longest_substring_length:
        longest_substring_length = len(tmp_str)
        longest_substring = tmp_str
    return longest_substring

print(find_longest_substring(string)) # 'brownfoxjump'"
Reformat the following if statement so that it has only one condition.if (x < 0 and y >= 0) or (x >= 0 and y < 0):,if x * y < 0:
"Convert this program into an AsyncIO based one.import time

def calculate_sum(numbers):
    result = 0
    for num in numbers:
        result += num
        time.sleep(2)
    return result","import asyncio

async def calculate_sum(numbers):
    result = 0
    for num in numbers:
        result += num
        await asyncio.sleep(2)
    return result"
"Create a function to calculate the total cost after N discounts.discounts = [10, 15, 20]","def calculate_total(discounts):
    total = 0
    for discount in discounts:
        total -= total * (discount / 100)
    return total"
"Convert this program from procedural to object-oriented.def calculate_mortgage(principle, years, rate):
    # calculation
    return monthly_payment

def calculate_interest_rate(value):
    # calculation
    return interest_rate","class MortgageCalculator:
    def __init__(self, principle, years, rate):
        self.principle = principle
        self.years = years
        self.rate = rate
    
    def calculate_mortgage(self):
        # calculation
        return monthly_payment

    def calculate_interest_rate(self, value):
        # calculation
        return interest_rate"
"Create an object in Python which will store the following informationName: John Doe
Age: 34
Gender: Male","person = {
  'name': 'John Doe',
  'age': 34,
  'gender': 'Male'
}"
"Make changes to the following code so it prints out the range from 0 to 9.for i in range(10):
    print(i)","for i in range(10):
    print(i+1)"
"Make changes to the following code to include a 'break' statement.while True:
    print(""Hello"")","while True:
    print(""Hello"")
    if condition is met: 
        break"
"Draft a Python code to sort an array containing 3 integers in ascending order.Array=[5,2,8]","Array.sort()
print(Array) # prints [2,5,8]"
"How can you execute the following Python code to get the output printed?def greeting():
    print(""Hello World!"")","The code can be executed by calling the function greeting:

greeting() #prints ""Hello World!"""
Create a Python function to swap key-value pairs in a dictionary.,"def swap_dict_keys(d):
    return {v: k for k, v in d.items()}"
"Create a function to take two input strings and return the longest common substring.Input 1: ababcd
Input 2: abxyz","def longest_common_substring(str1, str2):
    # keep track of the longest substring
    longest_substring = """"
    
    # iterate over each character in the first string
    for i in range(len(str1)):
        # iterate over each sub sequence of the first string
        for j in range(i+1, len(str1)+1):
            # compare the substring to each substring in the second string
            for k in range(len(str2)-(j-i)+1):
                # update longest_substring if we have a longer common substring
                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):
                    longest_substring = str1[i:j]

    return longest_substring"
"Identify errors in the following code and suggest corrections.def fucntion_1():
    param1 = input(""enter-parameter"")
    print(""The parameter is:"" + param1)","def function_1():
    param1 = input(""Enter parameter: "")
    print(""The parameter is: "" + param1)

The issue with the code is that it has a misspelling in the function name (fucntion_1 instead of function_1). The input prompt also lacks a space after ""Enter-parameter"" and a colon should be used at the end of the prompt. Finally, there should be a space between ""The parameter is:"" and the variable param1 in the print statement."
"Given an array of integers, implement insertion sort to sort the array.[1, 4, 2, 7, 5]","def insertion_sort(nums):
    # iterate over the array
    for i in range(1, len(nums)):
        j = i-1
        # hold element to be inserted
        temp = nums[i]
        # shift elements right if greater than element to be inserted
        while nums[j] > temp and j >= 0: 
            nums[j+1] = nums[j]
            j -= 1
        # insert element at the found position
        nums[j+1] = temp
    return nums

nums = [1, 4, 2, 7, 5]
print(insertion_sort(nums))"
"Implement quick sort to sort the given array of integers.[9, 5, 8, 1, 3, 6, 7]","def partition(nums, low, high):
    i = low-1
    # set pivot as last element in array
    pivot = nums[high]
    
    for j in range(low, high):
        # if element is smaller than pivot, increment i and swap elements
        if nums[j] < pivot:
            i += 1
            nums[i], nums[j] = nums[j], nums[i]

    # swap pivot 
    nums[i+1], nums[high] = nums[high], nums[i+1] 
    return i+1

def quick_sort(nums, low, high):
    if low < high:
        # set partition index
        part_idx = partition(nums, low, high)
        # sort left side of partition index 
        quick_sort(nums, low, part_idx-1)
        # sort right side of partition index 
        quick_sort(nums, part_idx+1, high)

nums = [9, 5, 8, 1, 3, 6, 7]
quick_sort(nums, 0, len(nums)-1)
print(""Sorted array:"", nums)"
"Compare two strings and return ""bigger"", ""smaller"" or ""equal"" depending on the lexicographical order.string1 = ""zebra""
string2 = ""zeal""","def compare_strings(string1, string2):
    i = 0
    length = min(len(string1), len(string2))

    while i < length:
        if string1[i] < string2[i]:
            return 'smaller'
        elif string1[i] > string2[i]:
            return 'bigger'
        i += 1
    
    if len(string1) > len(string2):
        return 'bigger'
    else:
        return 'equal'"
"Calculate the volume of a cuboid given the edges.Length = 4
Width = 5
Height = 2","def volume_of_cuboid(length, width, height):
    volume = length * width * height 

    return volume"
"Identify the highest pricing plan from the given list.plans = [{""name"": ""Basic"", ""price"": 10},
         {""name"": ""Pro"", ""price"": 20},
         {""name"": ""Premium"", ""price"": 30}
        ]","def highest_priced_plan(plans):
    max_price = 0
    max_name = """"

    for plan in plans:
        if plan[""price""] > max_price:
            max_price = plan[""price""]
            max_name = plan[""name""]

    return max_name"
"Edit the following code to print out the maximum value from an array of numbers.[7, 8, 2, 9, 4]","arr = [7, 8, 2, 9, 4]
max_val = 0
for num in arr:
    if num > max_val:
        max_val = num
print(max_val) # Outputs 9"
"Create a program that reads an array of numbers and prints the maximum and minimum values.[3.2, 8.5, 1.6, 6.3]","arr = [3.2, 8.5, 1.6, 6.3]
max_val = arr[0]
min_val = arr[0]

for num in arr:
    if num > max_val:
        max_val = num
    if num < min_val:
        min_val = num
    
print(""Max:"", max_val) # Outputs 8.5
print(""Min:"", min_val) # Outputs 1.6"
Construct a function to check if a string is a pangram.,"def is_pangram(s):
    s = s.lower()
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    for letter in alphabet:
        if letter not in s:
            return False
    return True"
Construct an algorithm to print out the binomial coefficients of a given number n.,"def binomial_coefficients(n):
    coefficients = []
    for i in range(n+1):
        coefficients.append(int(math.factorial(n) / (math.factorial(i)*math.factorial(n-i))))
    return coefficients

# Usage:
print(binomial_coefficients(7)) # Outputs [1,7,21,35,35,21,7,1]"
"Write a function in Python that should take two lists and return the intersection.list_a = [1, 2, 3, 4, 5]
list_b = [2, 5, 7, 10]","def intersection(list_a, list_b):
    return [element for element in list_a if element in list_b]"
"Suggest an algorithm in Python for sorting an array of integers from smallest to largest.nums = [3, 7, 5, 6, 1]","def sortInts(nums): 
    # Traverse through all array elements 
    for i in range(len(nums)): 
  
        # Last i elements are already in place 
        for j in range(0, len(nums)-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if nums[j] > nums[j+1] : 
                nums[j], nums[j+1] = nums[j+1], nums[j] 
                
    return nums"
Implement a simple machine learning algorithm in R to classify a given dataset.,"# Load the libraries
library(caret)
library(Metrics)

# Create the training and testing sets
split = createDataPartition(iris$Species, p = 0.75, list = FALSE)
train_set = iris[split, ]
test_set = iris[-split, ]

# Train the model
model = train(Species ~ ., data = train_set, method = ""rpart"")

# Make Predictions on the test set
predictions = predict(model, newdata = test_set)

# Evaluate Model Performance
confusionMatrix(predictions, test_set$Species)"
Build a classifier in Python using the Scikit-learn library.,"# Load the libraries
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split

# Split the data
X = data.iloc[:, :-1]
y = data.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)

# Train the model
svm_model = SVC(gamma='auto')
svm_model.fit(X_train, y_train)

# Make predictions on the test set
y_predictions = svm_model.predict(X_test)

# Evaluate Model Performance
print(""Accuracy:"", metrics.accuracy_score(y_test, y_predictions))"
"Output the top 3 values of the given array in descending order.nums = [4, 8, 2, 10, 9, 6, 1]","nums.sort()
top_3 = nums[-3:]

 # reverse to great in descending order
top_3.reverse()

print(top_3) # Output [10, 9, 8]"
"Using data from the Wikipedia API, write a Python program to list the population of India.","import json
import requests

url = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'
response = requests.get(url)
data = json.loads(response.text)
population = data['query']['pages']['571045']['revisions'][0]['*'].split('\n')[3].split('=')[1].strip().split('|')[0]
print('The population of India is', population)"
Create a function that takes in a name and returns a string that greets the person by name.John,"def greet(name):
    return ""Hello "" + name + ""!"""
Write a script to output the square of a number entered by the user.,"# prompt user for input
num = input(""Enter a number : "") 
# convert to an int
num = int(num)
# compute the square
square = num**2
# print the output
print(""The square of"",num,""is"",square)"
"Write a regular expression to match a word, which has at least five letters and that only consists of lowercase alphabets.","[a-z]{5,}"
Sort an array of integers from largest to smallest.,"def sortArray(arr):
    arr.sort(reverse = True)
    return arr"
"Write a function to search for an input string in a given paragraph.Paragraph:The quick brown fox jumps over the lazy dog
String: brown","def searchString(para, string):
    for word in para.split(): 
        if word == string:
            return True 
    return False"
Create a class for a car object with properties such as speed and colour.,"class Car:
    def __init__(self, speed, colour):
        self.speed = speed
        self.colour = colour"
What is the maximum size of a virtual memory address used by 32-bit Intel 8086 processor?,The maximum size of a virtual memory address used by a 32-bit Intel 8086 processor is 4 gigabytes (2^32 bytes).
"Compare two strings and output true if they are an anagram.s1 = ""listen""
s2 = ""silent""","def isAnagram(s1, s2): 
  
    # Get lengths of both strings 
    n1 = len(s1) 
    n2 = len(s2) 
  
    # If lengths of both strings are not same, then they are not anagram 
    if n1 != n2: 
        return False
  
    # Sort both strings 
    s1 = sorted(s1) 
    s2 = sorted(s2) 
  
    # Compare sorted strings 
    for i in range(0, n1): 
        if s1[i] != s2[i]: 
            return False
  
    return True

# driver code
s1 = ""listen""
s2 = ""silent""
print(""The two strings are anagrams:"", isAnagram(s1, s2))"
"Write a code to insert an element at the beginning of an array.arr = [1, 2, 3, 4]
element = 0","def insertAtBegining(arr,element): 
    arr.insert(0, element)    
    return arr  
  
# Driver code 
arr = [1, 2, 3, 4]
element = 0
print(insertAtBegining(arr, element))"
"Write a code to replace a substring inside a string with another substring.string = ""I am coding in python""
substring1 = ""coding""
substring2 = ""hacking""","def replaceSubstring(string, substring1, substring2): 
    string = string.replace(substring1, substring2) 
    return string  
  
# Driver code
string = ""I am coding in python""
substring1 = ""coding""
substring2 = ""hacking""
print(""String after replacement is:"", replaceSubstring(string, substring1, substring2))"
"Remove the element at a given index from an array.arr = [4, 10, 15, 23, 0]
index = 3","def removeIndex(arr, index):   
    if index < 0 or index >= len(arr): 
        return arr 
    
    arr.pop(index)  
    return arr

# driver code
arr = [4, 10, 15, 23, 0]
index = 3
print(""Array after removing element at index 3 is:"", removeIndex(arr, index))"
What happens when a return statement is encountered in a function?,"When a return statement is encountered in a function, it denotes the end of function execution and the function immediately returns control to the calling program. The value returned by the function can be accessed by the calling program."
Describe the difference between function call and function definition.,"Function call is an invocation of a function where as a function definition is the code block of the function denoted by its signature, parameters and the code body. Function call happens when the function is invoked with appropriate arguments, while function definition happens when the function is created."
Create an algorithm for finding the factorial of a number using a for loop.,"def factorial(num):
    final_factorial = 1
    for i in range(1, num + 1):
        final_factorial *= i
    return final_factorial"
Develop an algorithm to find the smallest element in a given array of integers using recursion.,"public static int getSmallestElementRecursive(int[] arr, int start, int end) {
    if (start == end) {
        return arr[start];
    }
 
    int min = getSmallestElementRecursive(arr, start+1, end);
 
    if (arr[start] < min) {
        return arr[start];
    } else {
        return min;
    }
}"
Generate a function in Python to print all prime numbers in a given range.,"def print_prime_numbers(start, end): 
      
    for i in range(start, end + 1): 
        if is_prime_number(i): 
            print(i, end = "" "")
  
def is_prime_number(num): 
      
    if num > 1: 
          
        # Iterate from 2 to n / 2  
        for i in range(2, num//2):  
            if (num % i) == 0: 
                return False
        return True
    else: 
        return False"
"Given an array, write a function that swaps the elements at indices i and j.arr = [3, 5, 7, 4, 9, 2]","def swap(arr, i, j): 
    temp = arr[i] 
    arr[i] = arr[j] 
    arr[j] = temp"
"Create a function that takes in three parameters, x, y, and z, and returns the maximum value.x = 8, y = 4, z = 12","function maxValue(x, y, z) {
  return Math.max(x, y, z);
}"
"Split a given sentence into a list of words.""My favorite color is red""","sentence = ""My favorite color is red""
words = sentence.split()"
"Count the number of times the letter ""o"" appears in this string.""Hello, World!""","string = ""Hello, World!""
count = 0
for char in string: 
    if char == 'o': 
        count += 1
print(count)"
"Create a new Keras model with the given input shape and output layer.input_shape=(10, 20, 3) 
num_classes=2","model = keras.models.Sequential()
# Add an input layer 
model.add(keras.layers.InputLayer(input_shape=input_shape))

# Add one or more dense layers
model.add(keras.layers.Dense(64, activation='relu'))

# Add an output layer for prediction
model.add(keras.layers.Dense(num_classes, activation='softmax'))"
"Write a function that takes an array of integers and returns an array of the same size with each element equal to the product of all the elements in the original array except itself.[1, 2, 3]","def product_array(arr):
    res = []
    product = 1
    for i in range(len(arr)):
        product *= arr[i]
    for i in range(len(arr)):
        res.append(int(product/arr[i]))
    return res"
Rock-paper-scissors is a classic two player game. Create a program to generate all the possible outcomes of individual rounds in Rock Paper Scissors.,"def generate_outcomes():
    outcomes = []
    for p1 in ['rock', 'paper', 'scissors']:
        for p2 in ['rock', 'paper', 'scissors']:
            outcomes.append((p1, p2))
    return outcomes"
Write a function to display a temperature in Celsius with the corresponding temperature in Fahrenheit.,"def show_temperature(temp): 
    fahrenheit = (temp * 9/5) + 32
    return '{} degrees Celsius corresponds to {} degrees Fahrenheit'.format(temp, round(fahrenheit, 1))"
"Create a function to check an array of strings and return a list of strings that have length of 5.[""Ironman"", ""Spiderman"", ""Hulk"", ""Captain America"", ""Thor""]","def filter_5_length(arr):
    res = []
    for string in arr:
        if len(string) == 5:
            res.append(string)
    return res"
Write a function to check if a string contains either 'a' or 'e' or 'i' or 'o' or 'u'.,"def contains_vowel(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for char in string.lower():
        if char in vowels:
            return True
    return False"
"Write code to delete an element of a linked list given its position.Linked List: 8->3->65->7
Position: 2","public class LinkedList {
 
    Node head;
 
    static class Node {
        int data;
        Node next;
 
        Node(int d) {
            data = d;
            next = null;
        }
    }
 
    public void deleteNode(int position) {
        if (head == null) {
            return;
        }
        Node temp = head;

        if(position == 0){
            head = temp.next;
            return;
        }

        for (int i = 0; temp != null && i < position - 1; i++) {
            temp = temp.next;
        }

        if (temp == null || temp.next == null) {
            return;
        }

        // Unlink the deleted node from the linked list
        Node next = temp.next.next;
        temp.next = next; 
    }

}"
"Compare the performance of quicksort, mergesort and heapsort on an unsorted array of size 1000.","Quick sort is the fastest amongst quicksort, mergesort, and heapsort. It is an efficient, widely-used sorting algorithm. Quicksort is typically faster than mergesort and heapsort for sorting an unsorted array of size 1000. The worst-case performance of quicksort is O(n^2) and the average-case performance is O(nlogn).

Mergesort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn). It is a stable sort, meaning that the relative order of equal sort items is preserved. Mergesort is slower than quicksort for sorting an unsorted array of size 1000 because it has a higher memory footprint due to the need to split and merge the input array.

Heapsort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn) as well. Like quicksort, it is an in-place algorithm, meaning that it does not require additional space for the result. Heapsort is slower than quicksort and mergesort for sorting an unsorted array of size 1000 because it requires more complex data structures and operations to build the heap and find the max or min elements."
"Code an R function to compute the running total of a given array of numbers.[1, 4, 8, 5, 2, 9]","RunTotal <- function(numbers) {
  runningTotal <- 0
  totals <- c()
  for (i in 1:length(numbers)) {
    runningTotal <- runningTotal + numbers[i]
    totals <- c(totals, runningTotal)
  }
  return(totals)
}"
Create a Django model class to represent a User.,"from django.db import models

class User(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField(unique=True)
    birth_date = models.DateField()
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)"
"Given a sorted array of size n, create a program to return the kth smallest element.","def findKthSmallestElement(arr, n, k): 
  
    # To return kth smallest element in 
    # the given array 
    return arr[k-1]"
"Show an example of using the Python module, os.","import os

directory = os.getcwd() 
print(""The current working directory is"", directory)

files = os.listdir(directory) 
print(""The files in the current directory are"", files)

for file in files:
    if file.endswith("".py""):
        print(""The Python script"", file, ""is in the current directory"")"
"Suggest a completion for the following Python code to find the depth of a given binary tree.class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

def maxDepth(node):","class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

def maxDepth(node):
    if node is None:
        return 0
    else:
        leftDepth = maxDepth(node.left)
        rightDepth = maxDepth(node.right)

        if leftDepth > rightDepth: 
            return leftDepth+1
        else: 
            return rightDepth+1"
Make the following Python function for generating powerset.,"def powerset(s):
    result = [[]]
    for x in s:
        result.extend([y + [x] for y in result])
    return result"
"Define a function to merge two sorted arrays into a single sorted array.arr1 = [1, 3, 5, 7]
arr2 = [2, 4, 8, 10]","def merge_arrays(arr1, arr2):
    arr3 = arr1 + arr2 # Combine the arrays
    arr3.sort() # Sort the combined array
    return arr3 # Return the newly sorted array"
"Write a script to create a new array with only the odd numbers from the given array.[3, 4, 6, 8, 9, 10]","def odd_numbers(arr):
    oddArr = [] # Empty array to be populated
    for item in arr:
        if item % 2 != 0: # Check if number is odd
            oddArr.append(item) # Add to array
    return oddArr # Return the array"
"Write a Python algorithm to search a list of numbers for the index of the given element.nums = [5,7,11,23,44,30]
x = 11","def search(nums, x):
    for i, n in enumerate(nums):
        if n == x:
            return i
    return -1"
Design an object-oriented program to represent a library book.,"class LibraryBook {
  
  private String title;
  private String author;
  private int pageCount;
  private boolean available;
  
  public LibraryBook(String title, String author, int pageCount, boolean available) {
    this.title = title;
    this.author = author;
    this.pageCount = pageCount;
    this.available = available;
  }
  
  public String getTitle() {
    return title;
  }
  
  public String getAuthor() {
    return author;
  }
  
  public int getPageCount() {
    return pageCount;
  }
  
  public boolean isAvailable() {
    return available;
  }
  
  public void checkOut() {
    available = false;
  }
  
  public void checkIn() {
    available = true;
  }
  
}"
"Given a list of numbers, write a function that returns the index of minimum element.[22, 11, 13, 66]","def min_index(list):
    min_val = list[0]
    min_index = 0
    for i, val in enumerate(list):
        if val < min_val:
            min_val = val
            min_index = i
    return min_index"
"Given a list of numbers, return the list with each number multiplied by two.[2, 4, 6, 8]","def double_list(nums):
    return [num * 2 for num in nums]"
Construct a program to shuffle the content of a list.,"import random
def shuffle_list(lst):
    for i in range(len(lst)-1, 0, -1):
        j = random.randint(0, i)
        lst[i], lst[j] = lst[j], lst[i]
    return lst"
"Find the element in a list that occurs most frequently.[1, 1, 2, 3, 4, 5, 4, 4, 6, 5]",4
Create a program that implements a queue.,"class Queue:
    def __init__(self):
        self.queue = []
 
    def enqueue(self, data):
        self.queue.append(data) 
 
    def dequeue(self):
        return self.queue.pop(0)
 
    def is_empty(self):
        return len(self.queue) == 0"
"Write a function to perform vector addition for two 1D arrays.[3, 4], [5, 6]","def add_vectors(v1, v2):
    result = []
    for i in range(len(v1)):
        result.append(v1[i] + v2[i])
    return result
 
print(add_vectors([3, 4], [5, 6]))"
"Read two numbers and output the smallest one.7, 4","def min_num(n1, n2):
    if n1 < n2:
        return n1
    else:
        return n2
 
print(min_num(7, 4))"
Create a 3x4 NumPy array of random integers from 0 to 5.,"import numpy as np
array = np.random.randint(0, 6, size=(3,4))
print(array)

Output:
[[4 5 4 0]
 [2 1 5 4]
 [3 0 2 0]]"
What does the position argument of the re.sub() method do?,"The position argument of the re.sub() method allows you to specify the starting index of the replacement string in the string being processed. This argument can be used to control the placement of a substitution in a string that may contain multiple occurrences of a pattern. If a position is not specified, the default behavior is to start the replacement at the beginning of the string."
"Code an R function that takes an array arr as an argument and returns the length of the array.arr = c(4, 8, 15, 16, 23, 42)","get_array_length = function(arr){ 
  return length(arr)
}"
"Create an assembly language program to sort a given array.arr = [7, 3, 5, 8, 2]",".data
  arr BYTE 7, 3, 5, 8, 2
  aux BYTE 5 DUP (0)

.code
  mov esi, 0    ; index of original array
  mov edi, 0    ; index of aux array
  mov ecx, 5   ; array length
  
sort_loop:
  mov al, [arr+esi]
  cmp al, [arr+esi+1]
  jl swap
  inc esi
  jmp increment
swap:
  mov [aux+edi], al
  mov bl, [arr+esi+1]
  mov [aux+edi+1], bl
  inc esi
increment:
  inc edi
  loop  sort_loop
  mov ecx, 5
  mov esi, 0
rewrite:
  mov [arr+esi], [aux+esi]
  inc esi
  loop  rewrite"
"Write a Perl script to output the 8th character in a given string.String = ""SoftwareTestingHelp""","$str = ""SoftwareTestingHelp"";
print substr($str, 8, 1);"
Develop a function to replace all consecutive whitespaces in a given string with a single space.,"def collapse_whitespace(str):
    return ' '.join([x for x in str.split(' ') if x != ''])"
Create a function to determine if a String contains a valid US phone number,"def isValidPhoneNumber(s):
    # strip all the non-numeric characters
    nums = ''.join(filter(str.isalnum, s))
    
    # ensure it is 10 digits long
    if len(nums) != 10:
        return False
    
    # ensure the last 7 digits are valid
    if nums[3:10] in set('2', '3', '4', '5', '6', '7', '8', '9'):
        return False
    
    # ensure first 3 digits are valid
    area_codes = set('201', '202', '203', '205', '206', '207', '208', '209', 
                     '210', '212', '213', '214', '215', '216', '217', '218',
                     '219', '224', '225', '226', '228', '229', '231', '234',
                     '239', '240', '242', '244', '245', '248', '250', '251', 
                     '252', '253', '254', '256', '260', '262', '264', '267', 
                     '268', '269', '270', '276', '281', '284', '289', '301', 
                     '302', '303', '304', '305', '306', '307', '308', '309', 
                     '310', '312', '313', '314', '315', '316', '317', '318',
                     '319', '320', '321', '323', '330', '331', '334', '336',
                     '337', '339', '340', '347', '351', '352', '360', '362',
                     '386', '401', '402', '403', '404', '405', '406', '407',
                     '408', '409', '410', '412', '413', '414', '415', '417',
                     '418', '419', '423', '424', '425', '430', '431', '432',
                     '434', '435', '440', '441', '443', '450', '468', '473',
                     '478', '479', '480', '484', '501', '502', '503', '504', 
                     '505', '506', '507', '508', '509', '510', '512', '513', 
                     '515', '516', '517', '518', '519', '520', '530', '540', 
                     '541', '551', '557', '559', '561', '562', '563', '564', 
                     '567', '570', '571', '573', '574', '580', '585', '586', 
                     '601', '602', '603', '605', '606', '607', '608', '609', 
                     '610', '612', '614', '615', '616', '617', '618', '619', 
                     '620', '623', '626', '628', '630', '631', '636', '641', 
                     '646', '650', '651', '661', '662', '678', '681', '682', 
                     '701', '702', '703', '704', '705', '706', '707', '708', 
                     '712', '713', '714', '715', '716', '717', '718', '719', 
                     '720', '724', '725', '727', '731', '732', '734', '737', 
                     '740', '754', '757', '758', '760', '762', '763', '765', 
                     '769', '770', '772', '773', '774', '775', '778', '780', 
                     '781', '784', '785', '786', '787', '801', '802', '803', 
                     '804', '805', '806', '807', '808', '809', '810', '812', 
                     '813', '814', '815', '816', '817', '818', '828', '830', 
                     '831', '832', '843', '845', '847', '848', '850', '856', 
                     '857', '858', '859', '860', '862', '863', '864', '865', 
                     '870', '872', '878', '901', '903', '904', '906', '907', 
                     '908', '909', '910', '912', '913', '914', '915', '916', 
                     '917', '918', '919', '920', '925', '927', '928', '931',
                     '936', '937', '940', '941', '947', '949', '951', '952', 
                     '954', '956', '970', '971', '972', '973', '978', '979', 
                     '980', '984', '985', '989')
    if nums[:3] not in area_codes:
        return False

    return True"
Create a function to perform recursive binary search in a sorted array,"#returns the index of the target, if it is found
def binary_search(arr,left,right,target):
    # Check base case 
    if right >= left:
        mid = left + (right - left) // 2 
  
        # If element is present at the middle itself 
        if arr[mid] == target:
            return mid 
          
        # If element is smaller than mid, then it  
        # can only be present in left subarray
        elif arr[mid] > target:
            return binary_search(arr, left, mid-1,target)
       
        # Else the element can only be present  
        # in right subarray
        else:
            return binary_search(arr, mid + 1, right,target) 

    else: 
        # Element is not present in the array 
        return -1"
"Edit the provided code so that the output is 2021.x = 2020
y = 1

print(x + y)","x = 2020
y = 1

print(x + y + 1)"
"Write a Python program that adds two numbers and multiplies them.4, 6","num1 = 4
num2 = 6

result = (num1 + num2) * num2

print(result)"
"Edit the given function so that it returns the sum of all numbers in the input array.def get_sum(arr):
    return arr[0]","def get_sum(arr):
    sum = 0
    for item in arr:
        sum += item
    return sum"
"Read the code and determine if it will cause a memory leak.int* numbers = new int[10];
delete[] numbers",false
"Imagine you have an array with the following elements: [3, 7, 2, 8, 1, 4]. Sort the array so that the elements are in ascending order.","[1, 2, 3, 4, 7, 8]"
"Write an expression in Python to remove all punctuation from a given string.string = ""This, is a test string!""","import re

string = re.sub(r'[^\w\s]','',string)

print(string) # Output: This is a test string"
Create a list containing the cubes of first 10 numbers.,"[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"
"Sort the users in alphabetical order by their name.users = [{'name': 'John', 'age': 25}, {'name': 'Alice', 'age': 28}, {'name': 'Bob', 'age': 39}]","sorted_users = sorted(users, key=lambda user: user['name'])"
Generate an array of numbers containing only prime numbers between 10 and 50.,"def prime_numbers():
    prime_nums = []
    for i in range(10, 50):
        is_prime = True
        for j in range(2, i):
            if i%j ==0:
                is_prime = False
                break
        if is_prime:
            prime_nums.append(i)
    return prime_nums"
Write a function that uses recursion to return the Fibonacci of a given number.,"def fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return fibonacci(n-1)+fibonacci(n-2)"
Write a function to square a given number and return its result.number = 5,"def square_number(number): 
    return number**2

print(square_number(number))"
"Write a code to calculate the maximum, minimum, and average of five numbers.number_list = [2, 4, 6, 8, 10]","def get_max_min_avg(number_list): 
    max_num = max(number_list) 
    min_num = min(number_list) 
    average = sum(number_list) / len(number_list) 
    return (max_num, min_num, average) 

max_num, min_num, average = get_max_min_avg(number_list) 
print(""Maximum number is:"", max_num) 
print(""Minimum number is:"", min_num) 
print(""Average of the numbers is:"", average)"
Edit the following sentence to change its sentiment from negative to positive.I can't stand programming anymore.,I'm starting to enjoy programming more.
"Construct a decision tree for a given datasetAge  | Income | Car | Buy?
0-25 | 0-25k | No  | No
26-45| 0-25k | No  | No
> 45 | 0-25k | No  | No
0-25 | >25k  | No  | Yes
26-45| >25k  | No  | Yes
> 45 | >25k  | No  | Yes
0-25 | 0-25k | Yes | Yes
26-45| 0-25k | Yes | Yes
> 45 | 0-25k | Yes | No","Buy? 
             No -----------> No
            /              \
          No                Yes 
         /                  \
   Age/Income            Car = Yes
  0-25/0-25k ------------> Yes
 /         \
No          >25k --------> Yes
            /
          No ----------------> No"
Assign the correct operator precedence to the given expression.5 * (7 + 9) - 12,5 * (7 + 9) - 12 = 5 * 16 - 12 = 80 - 12 = 68
"Construct a Huffman tree for the following set of characters.Character | Frequency
    G     |     5
    P     |     9
    T     |     12","16
            /  \
           9    7
          /\    /\ 
         5  4  3  2
        /  /\  /  /
       G  P  T  EP
 (E stands for empty)"
Create an array containing the alphabet in lowercase in Python.,"Using the string.ascii_lowercase constant, an array containing the alphabet in lowercase can be created.

Example:

import string 
alphabet_array = list(string.ascii_lowercase) 
print(""Array containing the alphabet in lowercase:"", alphabet_array) 

# Output: Array containing the alphabet in lowercase: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"
"Given a list of strings and a single character, write a Python function to return the count of strings containing that character.strings = [""Hello"", ""World"", ""Cat"", ""Dog"", ""Elephant""] 
character = ""e""","def count_character_in_strings(strings, character): 
  count = 0
  for string in strings:
    if character in string.lower():
      count += 1
  return count"
"Design a regular expression to extract first name, last name, and age from the following comma-separated string.Marley,Bob,32","/(.*?),(.*?),(\d+)/"
"Write a Python function to shuffle (randomly reorder) a list of numbersnums = [1, 2, 3, 4, 5]","def shuffle_nums(nums):
    from random import shuffle
    shuffle(nums) 
    return nums"
Write a script to remove any white spaces in a text string.The quick    brown fox,"String text = ""The quick    brown fox"";
String newString = text.replaceAll(""\\s+"","""");
System.out.println(newString); // Output: Thequickbrownfox"
Write a Python program to calculate the hypotenuse of a right triangle with base and Height of 8 and 6 respectively.,"base = 8
height = 6
hypotenuse = (base**2 + height**2)**0.5
print(hypotenuse) // Output: 10.0"
Generate a random string with the specified length n.n=10,"import string
import random

def generate_random_string(n):
    """"""
    Generate a random string with the length n 
    """"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=n))

print(generate_random_string(10))"
"Write a code to search a list of integers and print the index of the first matched item.nums=[4, 7, 1, 2, 5], target=7","def search_list(nums, target):
    """"""
    Function to search a list of integers and print the index of the first matched item 
    """"""
    for i in range(len(nums)):
        if nums[i] == target:
            return i
    return -1

print(search_list([4, 7, 1, 2, 5], 7))"
Generate an array of increasing numbers beginning from 1 of length n.n=5,"def generate_array(n):
    """"""
    Generate an array of increasing numbers beginning from 1 of length n
    """"""
    return [i for i in range(1, n+1)]


print(generate_array(5))"
"Given a positive integer n, print out an nxn matrix filled with numbers counting up from 1 to n x n.5","[[1, 2, 3, 4, 5],
 [6, 7, 8, 9, 10],
 [11, 12, 13, 14, 15],
 [16, 17, 18, 19, 20],
 [21, 22, 23, 24, 25]]"
"Write a code in Python to output all the combinations of two given lists.list1 = [1, 2, 3]
list2 = [4, 5, 6]","combinations = []
for i in list1:
    for j in list2:
        combinations.append([i, j])

print(combinations)

# Output: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]"
"Find the sum of all elements from the following list.list1 = [1, 2, 3, 4, 5]","list_sum = 0
for num in list1:
    list_sum += num

print(list_sum)

# Output: 15"
"Create an algorithm to compress a string by removing consecutive duplicate characters.string = ""aabcccccaaa""","def compress_string(string):
    current_char = string[0]
    compressed_string = current_char
    count = 1

    for char in string[1:]:
        if char == current_char: 
            count += 1
        else: 
            compressed_string = compressed_string + str(count) + char
            current_char = char 
            count = 1
    compressed_string = compressed_string + str(count)
    return compressed_string

print(compress_string(string))

# Output: a2b1c5a3"
Construct a Python class to model a circle.,"class Circle: 
    def __init__(self, radius, color): 
        self.radius = radius 
        self.color = color 
  
    def getArea(self): 
        return 3.14 * self.radius * self.radius 
  
    def getCircumference(self): 
        return 2 * 3.14 * self.radius"
Generate a function in Python that takes a number and a list as input and finds the number of occurrences of the number in the list.,"def count_occurrence(number, input_list):
    return input_list.count(number)"
Create a script in Python to convert fahrenheit temperatures to celsius.,"def fahren_to_celsius(fahren):
    celsius = (fahren - 32) * (5 / 9)
    return celsius

print(fahren_to_celsius(50)) 

# Output: 10.0"
"Solve the following linear programming problem:

Maximize x + y 
Subject to:
2x + 3y ≤ 120
x + 2y ≤ 100
x ≥ 0, y ≥ 0",The solution of this Linear Programming problem is x = 40 and y =
"Edit this Python program so that it logs a message whenever an error occurs.def divide_nums(a, b):
    try:
        return a / b
    except ZeroDivisionError as e:
        print('Error:', e)","def divide_nums(a, b):
    try:
        return a / b
    except ZeroDivisionError as e:
        print('Error:', e)
        logging.error('An error occurred during division.')"
"Rewrite this function in Python to take advantage of list comprehensions.def double_list(original_list):
    doubled_list = []
    for item in original_list:
        doubled_list.append(item * 2)
    return doubled_list","def double_list(original_list):
    return [item * 2 for item in original_list]"
Create a for loop that counts up to the given number.Number: 10,"for count in range(1, 11):
    print(count)"
What is the term used to refer to the action of incrementing a value by one?,"Incrementing is referred to as ""incrementing by one"" or ""incrementing by one unit""."
Initialize a new array to 0 of size 10.,arr = [0] * 10
What language is most closely associated with the Linux operating system?,The language most closely associated with the Linux operating system is C.
"Convert the given vector into a 3x2 matrix.vector = [1, 2, 3, 4, 5, 6]","matrix = [[1, 2], [3, 4], [5, 6]]"
What feature of an Object-Oriented Programming language allows its objects to share tasks and data?,Object-Oriented Programming languages allow objects to share tasks and data through the use of inheritance.
"Write a code to remove all punctuations from the given sentence.The quick, brown! fox jumped@ over the lazy- dog.","def remove_punctuation(sentence):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    no_punct = """"
    for char in sentence:
        if char not in punctuations:
            no_punct = no_punct + char
    return no_punct"
Write a code to parse a URL and return the domain name.https://example.com/page,"def get_domain_name(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc"
"Create a loop that prints all the odd numbers from a given array.let arr = [1, 2, 3, 4, 5, 6, 7, 8]","for(let i = 0; i < arr.length; i++){
    if (arr[i] % 2 !== 0 ){
        console.log(arr[i]);
    }
}"
"Sort the array so that it is in descending order.let array = [7, 4, 5, 9, 1]","array.sort((a, b) => b - a);"
"Produce a new array by multiplying all numbers in the initial array by 2.let arr = [1, 4, 6, 8]",let newArr = arr.map(x => x * 2);
"Create a list of strings from a given string.let str = ""hello world!""",let strArray = str.split(' ');
"Implement a function that copies a 2D array.array = [[1, 2, 3], [4, 5, 6]]","""""""
Function to copy a 2D array.
""""""
def copy_2d_array(arr):
    """"""Returns a copy of the given 2D array.""""""
    copied_arr = []
    for sublist in arr:
        copied_arr.append(list(sublist))
    return copied_arr

if __name__ == ""__main__"":
    array = [[1, 2, 3], [4, 5, 6]]
    print(copy_2d_array(array))"
"Split a string in such a way that all spaces, punctuation, and special characters are removed from the output.mystring = 'My,string:is-Awes 0me*!'","""""""
Split a string in such a way that all spaces, punctuation, and special characters are removed from the output.
""""""

def split_string(mystring):
    """"""
    This function splits the string into words, removing all of the
    spaces, punctuation, and special characters.
    """"""
    # Remove all non-alphanumeric characters
    mystring = ''.join(c for c in mystring if c.isalnum())

    # Split the string into words
    words = mystring.split()

    return words

if __name__ == ""__main__"":
    mystring = 'My,string:is-Awes 0me*!'
    print(split_string(mystring))"
"Create a program which takes an array of integers and an integer as input, and returns the index of the integer in the array.array = [1, 2, 3, 4];
number = 3;","def indexof(nums, target): 
    for i in range(len(nums)): 
        if nums[i] == target: 
            return i 
    return -1"
Create a program in Python to print the first 5 multiples of a numberNumber: 7,"for i in range(1, 6):
    print(i * 7)"
"Write a VBA code to return the last row where a certain value appearsTable Name: Employees
Column Name: State
Value: New York","Sub FindLastRowNY()
LastRow = Range(""A1"").End(xlDown).Row 
For i = LastRow To 1 Step -1
    If Cells(i, 2).Value = ""New York"" Then
        MsgBox i
        Exit Sub
    End If
Next i
End Sub"
Construct a loop in Python that iterates through each row of a dataframeDataframe: df,"for index, row in df.iterrows(): 
    # do something with each row"
"Write a code to construct a new array with the elements reversed.arr = [1, 2, 3, 4, 5]","def reverse_array(arr):
    """"""
    Construct a new array with the elements reversed.
    """"""
    new_arr = []
    for i in range(len(arr)-1, -1, -1):
        new_arr.append(arr[i])
    return new_arr"
"Create a function that takes in a list and sorts by the reverse order of its length.[“hi”, “hello”, “hey”, “hola”]","def sort_by_length(arr):
    """"""
    Sort a list by the reverse order of its length.
    """"""
    arr.sort(key=len, reverse=True)
    return arr"
Create a function that takes a number and checks if it is even or odd.,"def check_even_odd(num):
    """"""
    Takes a number and checks if it is even or odd.
    """"""
    if num % 2 == 0:
        return ""even""
    else:
        return ""odd"""
Write a regular expression that matches a phone number with the format (999) 999-9999,\([0-9]{3}\) [0-9]{3}\-[0-9]{4}
"Write a Python program to output an array with dimensions [N, M] filled with random numbers between 0 and 1N = 5
M = 4","import numpy as np
np.random.seed(0)
nums=np.random.rand(N,M)
print(nums)"
Write a Python program to print the Odd numbers from 1 to 50.,"for i in range(1, 51):
    if i%2 == 1:
        print(i)"
"Write a Python function to edit a given list by replacing an existing element with a new value.mylist = [""Apple"", ""Banana"", ""Cherry""]
old_value = ""Banana""
new_value = ""Strawberry""","def replace_value(mylist, old_value, new_value):
    if old_value in mylist:
        mylist[mylist.index(old_value)] = new_value
    return mylist"
"Write a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides.side1 = 7
side2 = 5","import math
def calculate_hypotenuse(side1, side2):
    hypotenuse = math.sqrt(side1**2 + side2**2)
    return hypotenuse"
Write a Python program to calculate the sum of all integers up to the given number.,"def sum_of_integers(num):
    total = 0
    for i in range(1, num + 1):
        total += i
    return total"
Input a scene (description) of a movie and output a title for the movie in 4 words or less.A young girl who comes from a rich family goes on a journey of self-discovery,Growing Rich Girl
Create a regex expression to capture a full name from a string.John Smith,/^([A-Z][a-z]*\s[A-Z][a-z]*)$/
"Write a code that allows a user to search a array of objects by any parameter.const people = [
  {name: 'John', age: 19},
  {name: 'Mark', age: 20},
  {name: 'Bob', age: 21}
]","""""""
Function to search an array of objects by any parameter
""""""

const searchArray = (arr, key, value) => {
  return arr.find((obj) => obj[key] === value)
}

const searchedName = searchArray(people, 'name', 'John')
console.log(searchedName) // {name: 'John', age: 19}"
"Find the position of a string within another string.haystack = ""This is a sample string with the word 'sample' in it""
needle = ""sample""","const position = haystack.indexOf(needle)
console.log(position) // 15"
"Create a code to rotate an array to the right by k steps.arr = [1,2,3,4,5], k = 3","""""""
Function rotate array to the right by k steps
""""""

const rotateArray = (arr, k) => {
  let rotatedArray = [...arr]  // Create a shallow copy of the array
  for (let i = 0; i < k; i++) {
    let lastElement = rotatedArray.pop()
    rotatedArray.unshift(lastElement)
  }
  return rotatedArray
}

console.log(rotateArray(arr, k)) // [3,4,5,1,2]"
Write a code to find the shortest possible palindrome.string = 'race',"""""""
Function to find the shortest possible palindrome
""""""

const findShortestPalindrome = (string) => {
  let reversedString = string.split('').reverse().join('')
  let newString = string + '#' + reversedString
  let lps = []
  let i = 1
  let j = 0
  while (i < newString.length) {
    if (newString[i] === newString[j]) {
      lps[i] = j + 1
      i++
      j++
    } else {
      if (j !== 0) {
        j = lps[j - 1]
      } else {
        lps[i] = 0
        i++
      }
    }
  }
  return string + reversedString.substring(lps[newString.length - 1])
}

console.log(findShortestPalindrome(string)) // 'ecarace'"
Create a function to identify whether a given number is a power of two.num = 8,"""""""
Function to identify whether a given number is a power of two
""""""

const isPowerOfTwo = (num) => {
  let i = 0
  while (2 ** i <= num) {
    if (2 ** i === num) {
      return true
    }
    i++
  }
  return false
}

console.log(isPowerOfTwo(num)) // true"
"Write a code to filter out all the words from a input list of strings, containing the letter 'a'.words = ['apple', 'book', 'zebra', 'banana', 'ball']","def filter_words_with_letter_a(words):
    filtered_words = []
    for word in words:
        if 'a' in word:
            filtered_words.append(word)
    return filtered_words

words = ['apple', 'book', 'zebra', 'banana', 'ball']
result = filter_words_with_letter_a(words)
print(result)"
"Write a code to categorize the given number according to their divisibility by a certain number.number = 9
divisible_number = 3","def categorize_number_divisibility(number, divisible_number):
    if number % divisible_number == 0:
        return 'divisible'
    else:
        return 'not divisible'
        
number = 9
divisible_number = 3
result = categorize_number_divisibility(number, divisible_number)
print(result)"
"Edit the code below so that the variable 'name' cannot be modified after the first print statement.name = “Alice”
print(name)
name = “Bob”","name = “Alice”
print(name)
name = ""Alice"""
"Edit the following code so that it prints an appropriate error message.def divide(num1, num2):
 result = num1 // num2
 return result","def divide(num1, num2):
 if num2 == 0:
 print('Error: Invalid operation. num2 cannot be zero.')
 else:
 result = num1 // num2
 return result"
Which of the following is a valid operator in Python?,"The following are valid Python operators: '+', '-', '*', '/', '%', '//', '**', '&', '|', '^', '<<', '>>'."
"Classify the following functions as pure or impure.def square(x):
    return x*x

def add_one(nums):
    for i in range(len(nums)):
        nums[i] += 1
    return nums","The function ""square"" is a pure function because it only relies on its input and does not modify any external state. The function ""add_one"" is an impure function because it modifies an external (i.e. the list ""nums"") state."
"Does the following code fragment pass the test?def my_func(a, b):
    return a + b

def test_my_func():
    assert(my_func(2, 3) == 5)","Yes, the code fragment passes the test since the function ""my_func"" successfully returns the value 5 when given arguments a=2 and b=3."
Implement a function in Python to convert a given sentence into title case.This is a sentence.,"def to_title_case(sentence):
    words = sentence.split()
    titlecase_words = []
    for word in words:
        titlecase_words.append(word.title())
    return ' '.join(titlecase_words)"
Write an R script to find the number of days in the current month.,"monthdays <- as.numeric(format(as.Date(Sys.Date()), format='%d'))
cat(""There are"", monthdays, ""days in the current month."")"
Design a Python program to identify odd numbers in a given range.10-20,"# set a range for the numbers
min = 10
max = 20

# iterate and print odd numbers
for num in range(min,max+1): 
    if num % 2 != 0: 
        print(num, end="" "")"
Create a MongoDB query to get all the documents from the collection where the state is 'CA'.,"db.collection.find( { state: ""CA"" } )"
"Construct a for loop in Python for summing up the elements of a given list.List of integers: [1, 2, 3, 4, 5]","total = 0
for i in [1, 2, 3, 4, 5]:
 total += i
print(total)

# the output will be 15"
"Create a Python program to check if all items in a list are unique.list_items = [1,2,3,2,3]","def is_unique(list_items):
  s = set(list_items)
  if len(list_items) == len(s):
    return True
  else:
    return False

print(is_unique(list_items))

# The output will be False"
How to extract numbers from a given string in Python?,"Using the regular expression library re in Python, you can extract numbers from a given string. For example,

import re

string = ""My age is 22 and my lucky number is 7""

matches = re.findall(r'\d+', string)
# matches will be [22, 7]"
What is memory management in C?,Memory management in C is a process of controlling and coordinating the use of memory in a program or operating system. It involves allocating and deallocating memory as needed. The main purpose of memory management is to provide ways of managing memory usage such that a program can run correctly and efficiently. This is done by allocating blocks of memory for the program to use and then deallocating the memory after its use.
"Sort an array of integers in ascending order by implementing a Bubble Sort algorithm.unsorted_list = [8, 5, 3, 1, 9, 6, 0, 7, 4, 2, 5]","def bubble_sort(nums): 
  # Traverse through all array elements 
  for i in range(len(nums)): 
    # Last i elements are already in place 
    for j in range(0, len(nums)-i-1): 
      # traverse the array from 0 to n-i-1 
      # Swap if the element found is greater 
      # than the next element 
      if nums[j] > nums[j+1] : 
        nums[j], nums[j+1] = nums[j+1], nums[j]

# Print the sorted array 
if __name__ == '__main__': 
    bubble_sort(unsorted_list) 
    print (""Sorted array is:"") 
    print(unsorted_list)"
"Write a function that takes in an array of integers and returns a string with each number in reverse order.[1,2,3,4,5]","def reverse_string(arr):
    res = ''
    for num in arr:
        res = str(num) + res
    return res"
"Create an algorithm that takes in two sorted arrays and merges them together.arr1 = [1,3,5,7,9]
arr2 = [2,4,6,8,10]","def merge_arrays(arr1, arr2):
    merged = []
    i, j = 0, 0
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            merged.append(arr1[i])
            i += 1
        else:
            merged.append(arr2[j])
            j += 1
    while i < len(arr1):
        merged.append(arr1[i])
        i += 1
    while j < len(arr2):
        merged.append(arr2[j])
        j += 1
    return merged"
"Create an algorithm that takes in an array of strings and returns a new array containing only the strings that start with the letter ""a"".[apple, banana, alabama, arkansas]","def start_with_a(arr):
    new_arr = []
    for s in arr:
        if s[0] == 'a':
            new_arr.append(s)
    return new_arr"
Develop a program that takes in two numbers and returns the bigger one.2 and 3,"def max_num(a,b):
    if a > b:
        return a
    else:
        return b"
Produce a program that takes in two strings and check if they are anagrams.silent and listen,"def is_anagram(s1, s2):
    if sorted(s1) == sorted(s2):
        return True
    else:
        return False"
"Convert the following input into a string and output it.[3, 15, 27, 70, 5]","""3, 15, 27, 70, 5"""
"Remove all the punctuation from the following sentence and output the resulting sentence.""Please select an item from the list.""",Please select an item from the list
Print the following string with all asterisks in lower case and output it.HeLLo WoRLD,hello world
"Create a function to return the minimum value in a given array and output it.[6, 3, 9, 5, 8, -2, 10]","def minimum_value(A):
    min=-float('inf')
    for a in A: 
        if a < min:
            min = a
    return min

print(minimum_value([6, 3, 9, 5, 8, -2, 10]))

# Output: -2"
Apply the following transformation to the given bit string and output it.10011,00101
"Given the following matrix, output the corresponding vector form.[[1,2,3],
[4,5,6],
[7,8,9]]","[1,2,3,4,5,6,7,8,9]"
Create a function to calculate the following expression and output the result.2^2 + 4 - 3*6,"def expression_result(expression):
    result = eval(expression) 
    return result

print(expression_result(""2**2 + 4 - 3*6"")) 

# Output: -6"
Write a Python program to convert Fahrenheit to Celsius for a temperature of 56.4F.,"F = 56.4
C = (F - 32) * 5/9
print(""Fahrenheit to Celsius:"", C)"
"From the provided input, create a program name ""shopping.py"" that prompts the user to enter a price and prints out the amount of discount the user gets. The discount rate is 10%.","# shopping.py
price = float(input(""Enter the price: "")) 
discount = price * 0.10 
print(""Discount:"", discount)"
"Create a program that prompts the user to enter two strings. The program will compare the two strings and, if the two strings are the same, print out ""Equal strings"" otherwise, print out “Unequal strings”","# Take two strings from user 
str1 = input('Enter first string: ') 
str2 = input('Enter second string: ') 

# Compare strings 
if str1 == str2: 
    print (""Equal strings"") 
else : 
    print (""Unequal strings"")"
Create a program that will take a number from the user and print out whether the number is odd or even.,"# Take a number from user 
num = int(input(""Enter a number: "")) 

# Check whether the number is odd or even 
if num % 2 == 0: 
    print(""Number is even."")
else:
    print(""Number is odd."")"
"Write a Python script to find the area of a triangle with sides 18, 24, and 30.","def triangle_area(a, b, c):
    '''This function computes the area of a triangle given its side lengths.'''
    # Calculate semi-perimeter
    s = (a + b + c) / 2
    # Calculate the area
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return area

print(""The area of the triangle is:"", triangle_area(18, 24, 30))"
Create a class in python with 4 functions.,"class MyClass:
  def __init__(self):
    pass

  def function1(self):
    pass

  def function2(self):
    pass
  
  def function3(self):
    pass
  
  def function4(self):
    pass"
"You are given two lists. Output a third list which contains only the elements common to both lists.list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]","list3 = [3,4,5]"
Take a number input and output the Fibonacci sequence up to that number.n = 5,"[0, 1, 1, 2, 3, 5]"
"Using the 'arrays' library in Python, generate a random array of 10 numbers.","import numpy as np

random_array = np.random.random_integers(1,10,10)
print(random_array)"
"Create a Python function that takes two arguments: a list and an integer. The function should add the given integer to each element of the list and return the new list.list = [2, 3, 5]
integer = 4","def addToList(list, int):
    new_list = []
    for l in list:
        new_list.append(l + int)
    return new_list

result = addToList(list, integer)
print(result) # [6, 7, 9]"
"Create a function 'combineTwoLists' with two parameters which combines two given lists into a new list.list1 = [1, 2, 3]
list2 = [4, 5, 6]","def combineTwoLists(list1, list2):
    new_list = list1 + list2
    return new_list

result = combineTwoLists(list1, list2)
print(result) # [1, 2, 3, 4, 5, 6]"
"Create a Python function 'findPattern' with two parameters which takes two strings and returns 1 if the second string is a subsequence of the first string, otherwise 0.","def findPattern(str1, str2): 
 
    ind = 0
    for ch in str2: 
        if ch not in str1[ind:]: 
            return 0
  
        ind = str1.index(ch, ind) + 1
 
    return 1
  
# Driver code 
if findPattern(""timetopractice"", ""top""): 
    print(""Subsequence Found"") 
else: 
    print(""Subsequence Not Found"")"
What is the data type of a variable that can only contain boolean values in Python?,The data type of a variable that can only contain boolean values in Python is a bool.
What is the difference between len() and index() methods in Python?,"The len() method returns the length of a string, while the index() method returns the index of a substring or character in the string. The len() method returns the number of characters or elements in the string, while the index() method returns the starting index of the substring in the string."
"Write a function that takes an array of numbers and prints out all the pairs of numbers whose sum is equal to a given number.targetSum = 8 
numbers = [1,9,4,3,8]","def print_pairs_with_sum(numbers, targetSum): 
    for i in range(len(numbers)): 
        for j in range(i + 1, len(numbers)): 
            if (numbers[i] + numbers[j] == targetSum):
                print (""("", numbers[i], "","", numbers[j], "")"")"
"Retrieve the 5th element from a list named 'numbers'.numbers = [1, 2, 3, 4, 5, 6, 7, 8]",5
Construct a matrix of shape 7 x 5.,"[[0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0]]"
Implement a function to implement Bubble Sort.,"def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n): 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above 
arr = [64, 34, 25, 12, 22, 11, 90] 
  
bubbleSort(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i]),"
"Suggest improvements to the code fragment given below.x = 25
if x < 20
    print(""x is less than 20"")","if x < 20:
    print(""x is less than 20"")"
"Print the element with the second greatest value from an array named 'numbers'.numbers = [10, 5, 15, 20, 25]",
"Write an algorithm to reverse a lis[1,2,3,4,5]","def reverse_list(lst):
    rev_lst = lst[::-1]
    return rev_lst"
"Modify the following code to turn all the words in a sentence to upper casestring = ""Hello World""","string = ""Hello World""
string = string.upper()
print(string)"
"Write an algorithm to split a given list into two sublists with equal sums[1, 4, 2, 5, 3]","def find_sublist(lst):
    total_sum = sum(lst)
    half = total_sum//2
    taken = [False]*len(lst)
    curr_sum = lst[0]
    taken[0] = True
    idx = 0
    flag = False
    for i in range(1, len(lst)):
        if curr_sum < half:
            taken[i] = True
            curr_sum += lst[i]
            flag = True
        else:
            if not flag:
                taken[i] = True
                curr_sum += lst[i]
                flag = True
            continue
    list1 = list2 = []

    for k in range(len(lst)):
        if taken[k]:
            list1.append(lst[k])
        else:
            list2.append(lst[k])
    return list1, list2"
"Given two lists, create a list that contains the difference.list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6]","difference_list = [1, 2, 6]"
Convert the given expression from infix notation to postfix notation.A + B * (C - D),ABCD-*+
Create a Flask application to send an email notification.,Create a Flask application with a route to accept an email address and the notification message. Use the Flask-Mail extension to send an email containing the notification message to the provided email address.
"Add a try-except clause to the given code to catch IndexError exceptions.list1 = [1, 2, 3]
print(list1[5])","try:
    list1 = [1, 2, 3]
    print(list1[5])
except IndexError:
    print(""IndexError occurred."")"
Create a class that implements a set data structure.,"class Set:
    def __init__(self):
        self.elements = []

    def add(self, element):
        if element not in self.elements:
            self.elements.append(element)

    def remove(self, element):
        if element in self.elements:
            self.elements.remove(element)"
"Delete the odd elements in a given list.list4 = [3, 7, 4, 5]",The new list is [4].
"Determine whether two given arrays are equal or not.arr1 = [1, 2, 3]
arr2 = [1, 2, 4]",The two arrays are not equal.
"Given two strings, create a new string that is their concatenation.string1 = ""Hello""
string2 = ""World""","The new string is ""HelloWorld""."
"Generate a valid RTL(Register Transfer Level) design in Verilog to implement the following Boolean functionF(A,B,C,D) = (A + !B + C + !D)'","module F(A,B,C,D,Z);
    input A, B, C, D;
    output Z;
    reg Z;
    always @ (A,B,C,D)
        begin
             Z = ~(A | ~B | C | ~D);
        end
endmodule"
"classify the following text into its respective categoryOnce upon a time, there was a young prince who lived in a castle",Storytelling
Generate a valid VHDL code for given designImplement a 4-to-1 multiplexer using the given data ports,"LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity Multiplexer is 
  Port ( a,b,c,d: in  std_logic;
         sel: in  std_logic;
         y : out  std_logic);
end Multiplexer;

architecture Behavioral of Multiplexer is
    begin
    process(a,b,c,d,sel)
       begin
         if sel = '0' then
           y <= a;
         elsif sel = '1' then 
           y <= b;
         elsif sel = '2' then 
           y <= c; 
         elsif sel = '3' then
           y <= d;
         else
           y <= '0';
         end if;
    end process;
end Behavioral;"
"Rewrite the code snippet to avoid the use of goto statementstart:
x=x+1
if x==10
   goto start","x = 0
while x!=10:
    x=x+1"
Write a function that generates a unique integer ID given a string input.,"def generateId(string):
    hashValue = hash(string)
    id = 0
    while hashValue > 0:
        id += hashValue % 10
        hashValue //= 10
    return id"
You need to classify a given sentence into one of 5 categories.This sentence is about sports,"def classify(sentence):
    if 'sports' in sentence.lower():
        return 'sports'
    elif 'entertainment' in sentence.lower():
        return 'entertainment'
    elif 'politics' in sentence.lower():
        return 'politics'
    elif 'finance' in sentence.lower():
        return 'finance'
    elif 'science' in sentence.lower():
        return 'science'
    else:
        return 'other'"
You need to find all the words in a given sentence sorted by their length.I like to read books,"def sortByLength(sentence):
    words = sentence.split(' ')
    sortedWords = sorted(words, key=len)
    return sortedWords"
You need to rearrange the characters in a given string such that no two same characters are adjacent to each other.abccab,"def rearrange(string):
    seen = set()
    result = []
    for char in string:
        if char not in seen:
            seen.add(char)
            result.append(char)
        else:
            for ch in string:
                if ch not in seen:
                    seen.add(ch)
                    result.append(ch)
    return ''.join(result)"
"You need to build a code editor with basic features like search, replace, undo, and redo.","def codeEditor():
    # Initialize the editor
    editor = texteditor.Editor()
    
    # Create buttons for search, replace, undo and redo
    searchButton = texteditor.Button(caption=""Search"", onclick=editor.search)
    replaceButton = texteditor.Button(caption=""Replace"", onclick=editor.replace)
    undoButton = texteditor.Button(caption=""Undo"", onclick=editor.undo)
    redoButton = texteditor.Button(caption=""Redo"", onclick=editor.redo)
    
    # Create the layout
    layout = texteditor.layout(
        [
            [searchButton, replaceButton],
            [undoButton, redoButton]
        ]
    )
    
    # Create the window
    window = texteditor.Window(layout)
    
    # Return the window
    return window"
"Build a system that takes in two numbers and outputs the summation of the two numbers.2, 3","def add(a, b):
    sum = a + b
    return sum"
"Take two text strings as input and output the difference between two strings.This is a text string, That is a text string","def diff(a, b):
    aSet = set(a)
    bSet = set(b)
    diffSet = aSet.difference(bSet)
    return ''.join(diffSet)"
Generate a random string with length 100 consisting of lowercase letters.,"import random

def randomString():
    letters = 'abcdefghijklmnopqrstuvwxyz'
    result = []
    for _ in range(100):
        letter = random.choice(letters)
        result.append(letter)
    return ''.join(result)"
"You need to build a function that take a given tree and returns a list containing the data stored at each level.1
        /   \
       2     3
      / \    /
     4   5  6","def traverseTree(node):
    result = []
    if node is None:
        return []
    else:
        result.append(node.data)
        result += traverseTree(node.left)
        result += traverseTree(node.right)
    return result"
"Change the line of code that prints ""Hello World!"" to print ""Goodbye World!""console.log(""Hello World!"");","console.log(""Goodbye World!"");"
"Calculate the perimeter of a triangle with the given length of sides.Length of sides: 6, 8, 10",perimeter = 24
Convert this octal number to a binary number.Octal number: 77,Binary number: 111111
"Debug this code to remove the syntax error.def print_msg()
 print(""Hello World"")","def print_msg():
     print(""Hello World"")"
Design a program that takes a number as input and prints out its corresponding ASCII character.Number: 90,"def getChar(num):
    return chr(num)

# Test
print(getChar(90)) # 'Z'"
Write a regular expression that will check if a given string contains valid phone numbers.String: Please contact us at 021-555-3119 or email me at contact@example.com,regex_pattern = r'(\d{3}-\d{3}-\d{4})'
"Write a Lambda expression for finding the maximum number from a list of integers.[3, 5, 21, 11, 9]","max_num = lambda x: max(x)

# Test
nums = [3, 5, 21, 11, 9]
max_num = max_num(nums)
print(max_num) # 21"
"Create a program to evaluate the expression for the given values.Expression: 4x + 3y - 2z
Values: x = 1, y = 3, z = -2","def evalExpression(x, y, z):
  return 4*x + 3*y - 2*z

# Test
x = 1
y = 3
z = -2
result = evalExpression(x, y, z)
print(result) # 5"
"Generate a list comprehension to find the highest number in the given list.List = [2, 74, 8, 9, 34, 67]",highest_number = [i for i in List if i == max(List)]
Generate an example of a combination of two colors using the hexadecimal triplet system.,#FFB3B3 and #454545 would generate a light pink and dark gray combination.
Construct a Regex expression in Python to extract words from a given URL.,"import re
p = re.compile(r'https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+')
words = p.findall(url)"
Create a variable in Python to hold a list of numbers from 0 to 10,"my_list = list(range(0,11))"
"Parse the following XML data to get a list of country names<data>
  <country name=""Ghana"">
    <rank>99</rank>
    <year>2012</year>
    <gdppc>2616.7</gdppc>
    <neighbor name=""Togo"" direction=""W""/>
  </country>
  <country name=""Iceland"">
    <rank>16</rank>
    <year>2015</year>
    <gdppc>38639.2</gdppc>
    <neighbor name=""Greenland"" direction=""N""/>
    <neighbor name=""Denmark"" direction=""E""/>
  </country>
</data>","import xml.etree.ElementTree as ET

tree = ET.parse('data.xml')
root = tree.getroot()

countries = []

for country in root:
    countries.append(country.attrib['name'])

print(countries)

# Output: ['Ghana', 'Iceland']"
"Write a code which reverses the order of items in an arraymy_list = [1,2,3,4,5]","# Reversing the order of items in an array

def reverse_order(input_list):
 return input_list[::-1] 

my_list = [1,2,3,4,5]
print(reverse_order(my_list))

# Output: [5, 4, 3, 2, 1]"
"Generate a new list with all the even numbers from the given listmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","# Generating a new list with all the even numbers from the given list

def get_even_numbers(input_list):
  even_numbers = []
  for num in input_list:
    if num % 2 == 0:
      even_numbers.append(num)
  return even_numbers

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(get_even_numbers(my_list))

# Output: [2, 4, 6, 8, 10]"
"Write a function in Python to convert a 2D array into a single column array.arr = [[0, 1, 2],
      [3, 4, 5],
      [6, 7, 8]]","def convert_to_single_column_array(arr):
    single_column_arr = []

    for sub_arr in arr:
        for val in sub_arr:
            single_column_arr.append(val)
    
    return single_column_arr"
Use an API to fetch and print the current weather information of a given city.City Name: New York,"import requests 

# API endpoint 
url = ""http://api.openweathermap.org/data/2.5/weather?""

# API key
api_key = ""YOUR_API_KEY""
 
# City name 
city_name = ""New York""

# parameter for API call 
params = {
    'q': city_name, 
    'appid': api_key 
} 

# get method of requests module 
# return response object 
res = requests.get(url, params=params) 

# json method of response object convert 
# json format data into python format data 
data = res.json() 

# fetch current weather information 
# get method of dictionary 
current = data[""main""] 

# Now print the current weather 
# get method of dictionary 
temp = current[""temp""] 
print("" Temperature (in kelvin unit) = "" +
            str(temp) + 
        ""\n atmospheric pressure (in hPa unit) = "" +
            str(current[""pressure""]) +
        ""\n humidity (in percentage) = "" +
            str(current[""humidity""]) +
        ""\n minimum temperature (in kelvin unit) = "" +
            str(current[""temp_min""]) +
        ""\n maximum temperature (in kelvin unit) = "" +
            str(current[""temp_max""]))"
Write a Python code to fetch the top three trending topics from Twitter.,"import tweepy

# create OAuth handler
consumer_key = ""YOUR_CONSUMER_KEY""
consumer_secret = ""YOUR_CONSUMER_SECRET""
access_token = ""YOUR_ACCESS_TOKEN""
access_token_secret = ""YOUR_ACCESS_TOKEN_SECRET""

# authenticate 
auth = tweepy.OAuthHandler(consumer_key, consumer_secret) 
auth.set_access_token(access_token, access_token_secret) 
  
# overridable get method
api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) 
 
# results
trends = api.trends_place(1) 
data = trends[0]
trends_list = data['trends']

# top 3 trending topics 
for i in range(3): 
    print(trends_list[i]['name'])"
"Use the NLTK library to tokenize the following sentence.sentence = ""This is a sentence.""","import nltk

sentence = ""This is a sentence.""

tokens = nltk.word_tokenize(sentence)

print(tokens) # Output: ['This', 'is', 'a', 'sentence', '.']"
How can you detect if there is an infinite loop in a code?,"One way of detecting if there is an infinite loop in a code is by using a counter to count the number of iterations the loop is performing. If the number of iterations exceeds some predefined threshold value, we can conclude that the code is executing an infinite loop. Another technique to detect an infinite loop is to keep track of all the loop variables and compare the values at two different points in the loop. If it detects a repeating pattern, it may indicate that the loop is stuck in an infinite loop."
Construct a regex to find urls in a given string.,"\b(((https?|ftp|file):\/\/|www\.)[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])"
Wrap the given text in a tag.Hello World,<p>Hello World</p>
"Complete the program by filling in the missing code to call the appropriate functiondef search(items, item): 
    for ____ in ____: 
    if ____ == ____:
        found = ____ 
    if ____: 
        return found 
    else: 
        return -1","def search(items, item): 
    for i in range(len(items)): 
    if items[i] == item:
        found = i 
    if found: 
        return found 
    else: 
        return -1"
"Given two lists of integers, find all unique pairings where the sum of the pair equals to a given number.list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]
number = 6","3 + 3 = 6
4 + 2 = 6"
"Create an array of 10 Boolean values and set it to ""False"".",arrayBool = [False]*10
Create a program that draws a triangle with stars (*) with a given height.,"def draw_triangle(n): 
    for i in range(0, n): 
        for j in range(0, i+1): 
            print(""*"",end="""") 
        print(""\r"")"
Create a program that prints all unique permutations of the given string.,"def permutations(string):
    result = []
    if len(string) == 1:
        result=[string]
    else:
        for i, letter in enumerate(string):
            for perm in permutations(string[:i] + string[i+1:]):
                result.append(letter + perm)
    return result"
"Calculate the maximum depth of a Binary Search Tree.TreeNode* root = new TreeNode(3);
root->left = new TreeNode(2);
root->right = new TreeNode(7);
root->left->left = new TreeNode(1);
root->left->right = new TreeNode(5);
root->right->left = new TreeNode(6);
root->right->right = new TreeNode(8);","int maxDepth(TreeNode* root) 
{ 
    if (root == NULL) 
        return 0; 
    else 
    { 
        // compute the depth of each subtree 
        int lDepth = maxDepth(root->left); 
        int rDepth = maxDepth(root->right); 
   
        // use the larger one 
        if (lDepth > rDepth) 
            return(lDepth + 1); 
        else return(rDepth + 1); 
    } 
}"
"Writing a function to calculate the area of a triangle where the three sides are given.side1 = 5, side2 = 6, side3 = 7","function triangleArea(side_1, side_2, side_3) {
    var s = (side_1 + side_2 + side_3) / 2;
    var area = Math.sqrt(s * (s - side_1) * (s - side_2) * (s - side_3));
    return area;
}

console.log(triangleArea(5,6,7)); // 14.697"
Write a code to initialize an array with 10 elements of value 0.,"int[] array = new int[10];
Arrays.fill(array, 0);"
Change the following code to a function using parameters.print(“hello”),"function sayHello(str){
  console.log(str);
}

sayHello('Hello');"
"Change the following code to an ES6 arrow function.function addTwo(num) 
{ 
    var result; 
    result = num + 2; 
    return result; 
}",const addTwo = num => num + 2;
"Output ""Hello, World!"" to the console.","print(""Hello, World!"")"
"Output the contents of an array of strings to the console.arr = [""apple"", ""orange"", ""banana""]","for s in arr:
    print(s)"
Create a function that prints the string passed to it as an argument.,"def print_string(s):
    print(s)"
"Find the area of a triangle whose sides measure a= 4, b= 5 and c= 3.","// calculate s - the semi-perimeter
float s = (4 + 5 + 3) / 2;

// calculate the area
float area = (s * (s - 4) * (s - 5) * (s - 3));

// take the square root
float result = sqrt(area);

// Print the result
printf(""The area of the triangle with sides 4, 5 and 3 is %f"", result);
// Output: The area of the triangle with sides 4, 5 and 3 is 6.000000"
Create a parameterized query in Python to find the details of a person.,"# define the query
query = ""SELECT * FROM people WHERE name = %s AND age = %s""

# provide the parameters
params = ('John', 22)

# execute the query
cursor.execute(query, params)"
"Edit the following code so that the item at index 4 is multiplied by two.arr = [1, 2, 3, 4, 5, 6]","arr = [1, 2, 3, 4, 10, 6]"
"Make the following piece of code functional for priority queues.class PriorityQueue():
    #TODO","class PriorityQueue():
    def __init__(self):
        self.elements = []
    
    def insert(self, item, priority):
        self.elements.append((priority, item))
        
    def pop(self):
        _, item = heappop(self.elements)
        return item"
"Create a function that removes all the repeated elements from a list.lst = [3, 5, 1, 3, 7, 5]","def remove_repeats(lst):
    new_lst = []
    for item in lst:
        if item not in new_lst:
            new_lst.append(item)
    return new_lst"
"Convert the following function into a recursive version.def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result","def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)"
"Create a network topology using the following input.nodes = ['A', 'B', 'C', 'D', 'E']
links = [('A', 'B'), ('B', 'C'), ('D', 'E'),('E', 'D')]","from networkx import nx

G = nx.Graph()
G.add_nodes_from(nodes)
for link in links:
    G.add_edge(link[0], link[1])"
"Make the following code work in a multithreading environment.x = 0
def incrementer():
    #TODO","import threading

x = 0
lock = threading.Lock()

def incrementer():
    global x
    with lock:
        x +=  1
        return x"
"Suggest a way to display an alert message with the text ""Hello, World!"".","alert(""Hello, World!"");"
"Convert pyramid of numbers to a single number.9
    2   3
  9   3   5
1   8   6   8","def pyramid_to_num(pyramid):
    num = 0
    val = 0

    for line in pyramid:
        val = int(line[0]) * 10**(len(line) - 1)
        num += val * 2**len(line)

    return num

# Test
pyramid = [['9'],['2', '3'],['9', '3', '5'],['1', '8', '6', '8']]
print(pyramid_to_num(pyramid))"
"Modify the code to display a simple error message whenever a parameter is passed as string.function sum(a, b) {
  return a + b;
}","""""""
Modify the code to display a simple error message whenever a parameter is passed as string
""""""

function sum(a, b) {
  // Test if either a or b is a string
  if (typeof a === 'string' || typeof b === 'string') {
    throw new Error('Parameters must be numbers');
  }
  return a + b;
}"
"Edit the code to make the string word_list case-insensitive.word_list = [""cat"", ""dog"", ""bird""]","""""""
Edit the code to make the string word_list case-insensitive
""""""

word_list = [""cat"", ""dog"", ""bird""]

# Make the string case-insensitive
word_list = [word.lower() for word in word_list]

print(word_list)

""""""
Output: ['cat', 'dog', 'bird']
"""""""
"Resolve the issue in the code causing a ""TypeError"" to be thrownnames = [""John"", ""James"", 10]

for name in names:
  print(name)","""""""
Resolve the issue in the code causing a TypeError to be thrown
""""""

names = [""John"", ""James"", 10]

for name in names:
  # Check the type of the element and only display it if it's a string
  if type(name) == str:
    print(name)

""""""
Output:
John
James
"""""""
"For the given Python dictionary, list all its keys and values in the following format.{
  ""name"": ""John Doe"",
  ""age"": 40,
  ""address"": {
    ""street"": ""123 Main Street"",
    ""city"": ""Albany"",
    ""state"": ""NY""
  }
}","""""""
For the given dictionary, list all its keys and values in the following format
""""""

data = {
  ""name"": ""John Doe"",
  ""age"": 40,
  ""address"": {
    ""street"": ""123 Main Street"",
    ""city"": ""Albany"",
    ""state"": ""NY""
  }
}

for key, value in data.items():
    print(f""{key}: {value}"")
    if isinstance(value, dict):
        for k,v in value.items():
            print(f""  {k}: {v}"")

""""""
Output:
name: John Doe
age: 40
address: {'street': '123 Main Street', 'city': 'Albany', 'state': 'NY'}
  street: 123 Main Street
  city: Albany
  state: NY
"""""""
"Return an array which contains all the words of the given string in reverse order.string = ""This is a test sentence.""","""""""
Return an array which contains all the words of the given string in reverse order
""""""

string = ""This is a test sentence.""

# Split the string into a list
words = string.split(' ')

# Reverse the list of words
reversed_words = words[::-1]

# Construct the output array
output_array = [word[::-1] for word in reversed_words]

print(output_array)

""""""
Output: ['ecnetnes', 'tset', 'a', 'si', 'sihT']
"""""""
Create a dictionary in Python and store the names of four countries and the cities within them.,"# Create a Dictionary 
dict = { 
    ""India"" : [""Delhi"", ""Mumbai"", ""Chennai""], 
    ""USA"" : [""New York"", ""Washington"", ""Los Angeles""],
    ""Canada"" : [""Toronto"", ""Vancouver"", ""Ottawa""],
    ""France"" : [""Paris"", ""Marseille"", ""Lyon""]
} 

# Print the Dictionary 
print(dict)"
"Use a ternary operator to print ""Yes"" if the number is positive and ""No"" if the number is negative.x=3","result = (x > 0) ? ""Yes"" : ""No""
console.log(result) // Output: Yes"
"Write a function to sort the elements of a list based on their frequency.arr = [2, 5, 9, 8, 8, 5, 9, 2]","def frequencySort(arr): 
    eleFreq = {} 
    sortedList = [] 
  
    # Create a dictionary with frequency of element as key and element as value
    for i in arr: 
        if i in eleFreq: 
            eleFreq[i] += 1
        else: 
            eleFreq[i] = 1
  
    # Sort the dictionary 
    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) 
  
    # Store the elements in an output list with the same frequency 
    for i in sortedFreq: 
        sortedList.extend([i[0]] * i[1])
  
    return sortedList"
"String concatenation is the process of combining two individual strings into one. Write a Python program to concatenate two strings using the + operator.str1 = 'Hello'
str2 = 'World'","def concatenate(str1, str2):
    return str1 + str2

print (concatenate(str1, str2))"
Print the name of the day depending on the given integer.day = 0,"def get_name_of_day(day):
    days = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
    
    if day >= 0 and day <= 6:
        return days[day]
    else:
        return None"
How can you search for and replace a string with a substring in Python?,"You can search for and replace a string with a substring in Python by using the ""replace"" method. The syntax would be: string.replace(""string_to_be_replaced"", ""new_string""). For example: ""Hello, world"".replace(""world"", ""there"") would return ""Hello, there""."
What is the most efficient way to iterate through a list of dictionaries in Python?,"The most efficient way to iterate through a list of dictionaries in Python is to use the ""for-in"" loop. This loop iterates over the elements of the list and accesses the values of the dictionary using the ""key"" argument. The syntax would be: for item in list: do_something(item[key])."
"Create a code to read a textfile line by line and print out the lines that have the word ""Python"".","with open('textfile.txt') as f:
    for line in f:
        if 'Python' in line:
            print(line)"
Create a class constructor to initialize the values of a person.,"class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

person1 = Person(""John"", 25, ""Male"")"
Create a program for sorting a given array in O(n) time complexity.,"def sort_array(arr):
    n = len(arr) 
    for i in range(n): 
        min_idx = i 
        for j in range(i+1, n): 
            if arr[min_idx] > arr[j]: 
                min_idx = j 
        arr[i], arr[min_idx] = arr[min_idx], arr[i] 
    return arr"
"Comment on the following code:function power (base, exponent) {
    let result = 1;
    for (let count = 0; count < exponent; count++) {
     result *= base;
    }
    return result;
}","// This function takes in two values, a base and an exponent, and calculates the power of the base with the exponent. The result is computed by multiplying the base with the exponent. The result is then returned to the caller."
What is the type of the value of the following expression: 4* 4 + 8,Integer.
"Debug the following code to check if it has any syntax errors.for (int i = 0; i < 5; i++)
    println(""Hello World"");","for (int i = 0; i < 5; i++) {
    System.out.println(""Hello World"");
}"
"Construct a regex pattern to extract the URLs from a string.String: ""Visit http://www.example.com or https://www.example2.com ""","\b(https?):\/\/[\w+&@#\/%?=~_|!:,.;]+[\w+&@#\/%=~_|]"
Create a program to detect the type of a given character.,"def detect_char_type(ch):
  char_type = """"

  if ch.isalpha():
    char_type = ""Letter""
  elif ch.isdigit():
    char_type = ""Digit""
  elif ch.isspace():
    char_type = ""Space""
  elif ch in string.punctuation:
    char_type = ""Punctuation""
  else:
    char_type = ""Special Character""
  
  return char_type"
"Design an algorithm for multiplying two matrices.A = [[1, 2,],
     [3, 4]] 
B = [[5, 6], 
     [7, 8]]","def multiply(A, B): 
    # initialize result matrix 
    rows_A = len(A) 
    cols_A = len(A[0]) 
    rows_B = len(B) 
    cols_B = len(B[0]) 
  
    if cols_A != rows_B: 
        print(""Cannot multiply the two matrices. Incorrect dimensions."") 
        return  
    # construct result matrix  
    C = [[0 for row in range(cols_B)] for col in range(rows_A)] 
  
    # iterate through and multiply
    for i in range(rows_A): 
        for j in range(cols_B): 
            for k in range(cols_A): 
                C[i][j] += A[i][k] * B[k][j] 
  
    return C"
Design a code to generate Fibonacci numbers.,"def Fibonacci(num): 
    a = 0
    b = 1  
    if num < 0: 
        print(""Incorrect input"")
    elif num == 0: 
        return a 
    elif num == 1: 
        return b 
    else: 
        for i in range(2,num): 
            c = a + b 
            a = b 
            b = c 
        return b"
Can you parse a given URL and extract the domain name?,"def get_domain(url):
    parsed_url = urllib.parse.urlparse(url)
    return parsed_url.netloc"
Compose a Python script to convert a string to an all-uppercase string.String: 'Experiment',"# converting the string to upper-case 
string = ""Experiment""
print(""Old String:"", string) 
string = string.upper() 
print(""New String:"", string)"
"Create a GCP Cloud Function that sends an email with input ""name"" and ""message"".","import os
import smtplib
from email.message import EmailMessage

def sendEmail(request):
    request_json = request.get_json()
    name = request_json.get('name')
    message = request_json.get('message')
  
    SENDER = os.environ.get('SENDER')
    RECEIVER = os.environ.get('RECEIVER')
    PASSWORD = os.environ.get('PASSWORD')
  
    msg = EmailMessage()
    msg.set_content(f'Hello,""\n\n{message}""\n\nRegards,\n{name}')

    msg['Subject'] = 'Message Sent Via Cloud Function'
    msg['From'] = SENDER
    msg['To'] = RECEIVER
  
    s = smtplib.SMTP('smtp.gmail.com', 587)
    s.starttls()
    s.login(SENDER, PASSWORD)
    s.send_message(msg)
    s.quit()"
Find the derivate of this equation: f(x) = x^2 + 5x + 3,The derivative of f(x) is f'(x) = 2x + 5
"List the elements of this array in console.array = [22, 74, 12, 1]","for(int i=0; i<array.length; i++) {
    System.out.println(array[i]);
}"
"Perform K-Means Clustering on this dataset.dataset = [[5,7], [1,2], [7,9], [10,2], [2,5]]","import numpy as np
from sklearn.cluster import KMeans

# Create dataset
dataset = np.array([[5,7], [1,2], [7,9], [10,2], [2,5]])

# Create KMeans object
kmeans = KMeans(n_clusters=2)

# Fit the model
kmeans.fit(dataset)

# Get labels
labels = kmeans.labels_

# Calculate cluster centers using the average of the datapoints in the cluster
cluster_centers = kmeans.cluster_centers_

# Print the results
print(""Labels: "", labels)
print(""Cluster Centers: "", cluster_centers)"
"Convert this string to a float in Python.string = ""1.25""","string = ""1.25""
float_value = float(string)"
"Create a graphql mutation that adds a new user to the system.name: ""User1"", email: ""user1@test.com""","mutation addUser {
  addUser(name: ""User1"", email: ""user1@test.com"") {
    name
    email
  }
}"
Write a RegEx to extract text inside tags<div>This is a test</div>,\<div\>(.*?)\</div\>
"Create a permutation of characters in a string.str = ""CAT""","def permutation(str):
    if len(str) == 0: 
        return [''] 
    prev_list = permutation(str[1:len(str)]) 
    next_list = [] 
    for i in range(0,len(prev_list)): 
        for j in range(0,len(str)): 
            new_str = prev_list[i][0: j]+str[0]+prev_list[i][j: len(str)-1] 
            if new_str not in next_list: 
                next_list.append(new_str) 
    return next_list

# Test
str = 'CAT'
perm = permutation(str)

# Output
print(perm)
# ['CAT', 'CTA', 'ACT', 'ATC', 'TCA', 'TAC']"
"What do the following two lines of code do?string.replace('old', 'new')
string.rstrip()","The first line of code is used to replace all occurrences of ""old"" with ""new"" in string. The second line of code is used to strip all trailing whitespace from the string."
Implement the Levenshtein distance algorithm in Python.,"""""""
Implementing the Levenshtein distance algorithm in Python
""""""

def levenshtein(word1, word2):
    """"""Calculate the Levenshtein distance between two words""""""
    size_x = len(word1) + 1
    size_y = len(word2) + 1
    matrix = [[0 for i in range(size_x)] for j in range(size_y)] 
    for x in range(size_x):
        matrix[0][x] = x
    for y in range(size_y):
        matrix[y][0] = y

    for x in range(1, size_x):
        for y in range(1, size_y):
            if word1[x-1] == word2[y-1]:
                matrix[y][x] = min(
                    matrix[y-1][x] + 1,
                    matrix[y-1][x-1],
                    matrix[y][x-1] + 1
                )
            else:
                matrix[y][x] = min(
                    matrix[y-1][x] + 1,
                    matrix[y-1][x-1] + 1,
                    matrix[y][x-1] + 1
                )

    return matrix[size_y-1][size_x-1]"
"given a sentence, classify it into positive or negative sentiment.I can't wait to get home and relax.",positive
Write code to check if a given string contains only alpha-numeric characters.Hello World!,"""""""
Write code to check if a given string contains only alpha-numeric characters.
""""""

def is_alnum(string):
    return string.isalnum()

if __name__ == '__main__': 
    string = 'Hello World!'
    print(is_alnum(string))"
"Edit the following code to make it terminate in a finite number of stepsdef foo():
    while True:
        print(""Hello"")","""""""
Edit the following code to make it terminate in a finite number of steps.
""""""

def foo():
    for _ in range(10):
        print(""Hello"")"
"Given an array of English words, find any word which is an anagram of another word in the same array.[""listen"", ""pot"", ""part"", ""opt"", ""trap"", ""silent"", ""top""]","""""""
Given an array of English words, find any word which is an anagram of another word in the same array.
""""""

def find_anagrams(words):
    anagrams = [] 
    for i in range(len(words)): 
        for j in range(i+1, len(words)): 
            if (sorted(words[i]) == sorted(words[j])): 
                anagrams.append((words[i],words[j])) 
    return anagrams

if __name__ == '__main__':
    words = [""listen"", ""pot"", ""part"", ""opt"", ""trap"", ""silent"", ""top""]
    print(find_anagrams(words))"
"Given an array containing words and a string, find the shortest word in the array that is a substring of the stringwords = [""apple"", ""banana"", ""cat"", ""dog""], string = ""aquickbrownfoxjumpsoverthelazydog""","""""""
Given an array containing words and a string, find the shortest word in the array that is a substring of the string.
""""""

def find_shortest_substring(words, string): 
    min_length = float(""inf"")
    min_word = None
    for word in words:
        j = string.find(word)
        if j>-1 and len(word)<min_length:
            min_length = len(word)
            min_word = word
    return min_word

if __name__ == '__main__': 
    words = [""apple"", ""banana"", ""cat"", ""dog""]
    string = ""aquickbrownfoxjumpsoverthelazydog""
    print(find_shortest_substring(words, string))"
"Replance the character on odd index positions with '#'.""Hello World!""","""""""
Replace the character on odd index positions with '#'.
""""""

def add_pound_signs(string):
    result_string = """"
    for i in range(len(string)):
        if i % 2 == 1:
            result_string += ""#""
        else:
            result_string += string[i]
    return result_string

if __name__ == '__main__': 
    string = ""Hello World!""
    print(add_pound_signs(string))"
"Using the given code snippet, reverse the words of the string.string = ""this is a string""","words = string.split(' ')
reversed_words = words[::-1]
reversed_string = ' '.join(reversed_words)"
"Identify the salient feature in the given piece of code.def func(x, y):
    z = x + y
    print(z)
    return x - y",The salient feature of the given code is that it both prints a result and returns a value.
"Use set operations to obtain the intersection of two given sets.SetA = {1, 2, 3, 4}
SetB = {2, 4, 6, 8}","intSetA = new HashSet<Integer>();
intSetA.addAll(Arrays.asList(1, 2, 3, 4));

intSetB = new HashSet<Integer>();
intSetB.addAll(Arrays.asList(2, 4, 6, 8));

intSetA.retainAll(intSetB);

System.out.println(""Intersection of SetA and SetB is "" + intSetA);

// Output: Intersection of SetA and SetB is [2, 4]"
Write a R code to create a vector with a sequence of 15 numbers starting at 4 and ending at 24.,x <- 4:24
"Write a code snippet to print out ""Hello World"" ten times.","for(var i = 0; i < 10; i++) {
    console.log(""Hello World"");
}"
"Write a code snippet to print out the elements of an array of integers, separated by a comma.array = [2, 4, 6, 8]","for (let i=0; i<array.length; i++) {
    if (i < array.length-1) {
        console.log(array[i] + "","");
    } else {
        console.log(array[i]);
    }
 }"
What is a 2D array?,"A 2D array (or two-dimensional array) is an array of arrays, meaning it is a collection of elements which are themselves arrays. Each element in the 2D array can be thought of as a row, and the elements inside that row can be thought of as columns. The elements all have the same data type."
Write an R script to generate a random number sequence between 1 and 10.,"result <- sample(1:10, 10, replace = TRUE)
 print(result)"
"Change the following code to make the ""Hello World"" message appear in bold.<p>Hello World</p>",<p><bold>Hello World</bold></p>
"Rewrite the following function to use a ternary operator instead.function calculateTip(bill) {
  if (bill < 50) {
    return bill * 0.2;
  } else {
    return bill * 0.15;
  }
}","function calculateTip(bill) {
  return (bill < 50 ? bill * 0.2 : bill * 0.15);
}"
Compute 2 to the 3rd power using Python.,"result = 2 ** 3
print(result)  # Outputs 8"
"Construct a code to find the sum of all elements in a given 2D matrixmatrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]","def sum_elements(matrix):
    result = 0
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            result = result + matrix[i][j]
    return result

print(sum_elements(matrix))"
Perform sentiment analysis on the given sentence.Sentence: She shoved the latest game console into her shopping cart.,The sentiment in the sentence is positive.
Quantify sentiment for the following sentence.Sentence: She was content with the results.,The sentiment for the sentence is positive with an accuracy of 70%.
Create a simple Python script to print the first 10 prime numbers.,"prime_numbers = [] 
for num in range(1, 11):   
   if num > 1:  
       for i in range(2, num):  
           if (num % i) == 0:  
               break  
       else:  
           prime_numbers.append(num)
  
print(prime_numbers)"
Create a Mastermind game in any language of your choice.,"#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
int main() {
 
srand(time(0));
 
//define random numbers to be guessed
int max_limit = 6;
vector<int> ans;
for (int i = 0; i < 4; i++) {
 ans.push_back((rand() % max_limit) + 1);
}
 
int attempts = 0;
while (true) {
 //Take input from user
 int num;
 int i = 0;
 cout << ""Guess a 4 digit number: "";
 while (i < 4) {
  cin >> num;
  ans[i] = num;
  i++;
 }
 
 //Check input against random answer
 int correctplace = 0;
 int wrongplace = 0;
 for (i = 0; i < 4; i++) {
  int j = 0;
  while (j < 4) {
   if (ans[i] == ans[j] && i == j)
    correctplace++;
   else if (ans[i] == ans[j])
    wrongplace++;
   j++;
  }
 }
 
 attempts++;
 
 if (correctplace == 4) {
  cout << ""You win in "" << attempts << "" attempts."";
  break;
 }
 else
  cout << ""Wrong place: "" << wrongplace << ""    Correct place: "" << correctplace << endl;
}
return 0;
}"
"Create an Angular component named ""FormInput"" with a text field and a submit button.","import { Component } from '@angular/core';

@Component({
 selector: 'form-input',
 template: `
 <form>
  <input type=""text"" id=""textInput"" />
  <button type=""submit"">Submit</button>
 </form>
 `
})
export class FormInput {

}"
"Create a machine learning model to predict the probability of a patient having a certain type of cancer.features = [Height, Weight, Age, Gender]","import numpy as np
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# read in the data
df = pd.read_csv('data.csv')

# separate the features and labels
X = df.drop('cancer', axis=1)
y = df['cancer']

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# create a support vector machine model
model = SVC()

# fit the model on the data
model.fit(X_train, y_train)

# make predictions
predictions = model.predict(X_test)

# measure the accuracy of the model
score = accuracy_score(y_test, predictions)
print(score)"
"Explore the data_df dataframe and build a visualization that answers the following question: what is the correlation between number of tweets sent and positive sentiment?data_df: DataFrame containing columns such as n_tweets,pos_sentiment","import matplotlib.pyplot as plt
import seaborn as sns

# Explore data
sns.pairplot(data_df, hue='pos_sentiment')
plt.show()

# Fit a regression line
sns.regplot(x=""n_tweets"", y=""pos_sentiment"", data=data_df)
plt.xlabel('Number of Tweets')
plt.ylabel('Positive Sentiment')
plt.show()"
Create a regex string to find all words that contain the letters 'a' and 'z' in them.,"import re

pattern = r'\b[a-zA-Z]*a[a-zA-Z]*z[a-zA-Z]*\b'

words = re.findall(pattern, ""The quick brown fox jumped over the lazy dog"")

for word in words:
    print(word)"
"Given a large string S, find the total number of occurrences of a pattern p in S.S = “Mississippi”, p = “si”","//Function to find the total number of occurrences of a pattern p in a large string S
function findOccurrences(S, p) { 
    let count = 0;
    let initialIndex = 0;
    while (S.indexOf(p, initialIndex) !== -1) {
        initialIndex = S.indexOf(p, initialIndex) + 1;
        count++;
    }
    console.log(count);
} 

findOccurrences('Mississippi', 'si'); 
//Output: 2"
Design a data structure for efficiently finding the closest input to a given input in a set of inputs.,"An efficient data structure for finding the closest element to a given element in a set of elements is the KD Tree. The KD Tree is a space-partitioning data structure for organizing points in a k-dimensional space and taking advantage of their spacial locality. A KD Tree is a binary tree with each node containing a set of coordinates, or an element, and the corresponding subtree referring to elements closer to the coordinates of the current node in the tree. By recursively dividing the space into smaller parts, the search time for a specific element or coordinates can be significantly reduced, making finding the closest element a much faster process."
Write a Python function that prints out a staircase pattern.,"def staircase(n): 
    for i in range(1, n + 1): 
        for j in range(1, n + 1): 
            if (j <= (n - i)):   
                print(end=""\t"") 
            else: 
                print(""#\t"", end="""") 
        print()"
Implement an algorithm in Python to find the size of a Binary tree.,"def size(node): 
    if node is None: 
        return 0
    else: 
        return (size(node.left) + 1 + size(node.right))"
"Write a code to convert all the letters of a string to lowercase.Input string: ""HELLO WORLD""","def lowercase_string(input_str):
    output_str = """"
    
    for char in input_str:
        output_str += char.lower()
    return output_str

if __name__ == '__main__':
    print(lowercase_string(""HELLO WORLD""))"
Output all numbers between 1 to 5 except for 3 using Python.,"for x in range(1, 6):
    if x != 3:
        print(x)"
Print all powers of 2 less than or equal to n.n = 10,"def power_of_2(n): 
    res = []
    for i in range(n+1):
        if i & (i-1) == 0:
            res.append(i)
        
    return res"
Compute the n-th Fibonacci number.,"def fibonacci(n): 
    a = 0
    b = 1
    
    if n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n+1): 
            c = a + b 
            a = b 
            b = c 
        return b"
"Given two arrays of integers, find the common elements.arr1 = [1, 2, 3, 4, 5]; arr2 = [4, 5, 6, 7, 8]","def common_elements(arr1, arr2):
    common = []
    for item in arr1:
        if item in arr2:
            common.append(item)

    return common"
How can you check if a string is a substring of another string in Python?,"You can check if a string is a substring of another string in Python by using the ""in"" operator. For example, if you want to check if the string ""hello"" is a substring of a variable called ""my_string"", you can do:

if 'hello' in my_string:
    # do something"
"Reverse a given list of strings.['first', 'second', 'third']","['third', 'second', 'first']"
"Generate a substring from the given string?String: “Welcome to this program” 
Requirement: Substring from index 4 to 9","""o to th"""
"Given an integer array, classify all the elements as even and odd.[1, 2, 3, 4, 5, 6]","['odd', 'even', 'odd', 'even', 'odd', 'even']"
Write a function to check whether a given number can be expressed as the power of some other numberNumber: 8,"""""""
def is_power_of(x):
    # Initializing the counter
    i = 0
  
    # Iterating through possible exponents
    while (x > 1):
        if (x % 2 == 0): 
            x /= 2
        else: 
            return False
        i += 1
        
    return True

# Function call
print(is_power_of(8))
""""""

Output: True"
Develop a code to check whether a number is a palindrome.Number: 1234321,"""""""
def is_palindrome(num):
    # Initializing variables
    n = num
    rev = 0
    while (n > 0):
        # Storing the remainder
        rev = (rev * 10) + n % 10

        # Updating n
        n //= 10

    # Checking if the reversed number is equal to the given number
    if (num == rev):
        return True

    return False

# Function call
print(is_palindrome(1234321))
""""""

Output: True"
"Given a string, identify the count of each letter in the string.String: ""apple""","{'a': 1, 'p': 2, 'l': 1, 'e': 1}"
"Given a list of numbers, determine whether they are a perfect square or not.[1, 2, 3, 4]","[True, False, False, True]"
"Perform linear search on a given list of numbers to check if a given number is present in the list.List: [1, 2, 3, 4]
Number: 2","""""""
def linear_search(arr, n):
    # Iterate through the array
    for i in range(len(arr)):
        # If the given number is found
        if arr[i] == n:
            return True
    
    # Return False if the given number is not present
    return False

# Function call
print(linear_search([1, 2, 3, 4], 2))
""""""

Output: True"
"Given a string of words, generate the n-grams of the string.String: ""Dogs are the best pet""
Gram size: 2","['Dogs are', 'are the', 'the best', 'best pet']"
"Given a string, write a Python program to remove all special characters from it.","def remove_special_characters(string): 
    final_string = """" 
    for character in string: 
        if character.isalnum(): 
            final_string += character 
    return final_string"
Design a data structure to store information about a student.,"class Student {
    String name;
    String studentId;
    String course;
    String[] subjects;
    int age;
    String email;
    Float averageScore;
    Map<String, Float> scoresBySubject;
}"
"Respond with a query using the following inputs.TableName: Employees, 
ColumnNames: FirstName, LastName","SELECT FirstName, LastName 
FROM Employees;"
"Create a dictionary that stores the number of occurrences of each character in a given string.string = ""Hello World!""","char_frequency_dict = {}

for char in string:
    if char in char_frequency_dict:
        char_frequency_dict[char] += 1
    else:
        char_frequency_dict[char] = 1"
"Write a code to print the even numbers in the range of a given two numbers.start = 10
end = 20","for num in range(start, end+1):
    if num % 2 == 0:
        print(num)"
"Create a function that takes a list of strings and a string as inputs and finds all the strings in the list which contain the given string.string_list = [""hello"", ""world"", ""google"", ""apple""]
sub_string = “oo”","def find_strings(string_list, sub_string):
    results = []
    for string in string_list:
        if sub_string in string:
            results.append(string)
    return results"
Generate a dataframe with 5 rows and 3 columns.,"import pandas as pd 

data = {'Column1': [1, 2, 3, 4, 5], 
        'Column2': [5, 4, 3, 2, 1],
        'Column3': [1, 2, 3, 4, 5]
        }

df = pd.DataFrame(data)"
"Edit the given code to calculate the sum of given numbers using a for loop.numbers = [2, 4, 6, 8]
sum = 0","""""""
Edit the given code to calculate the sum of given numbers using a for loop
""""""

numbers = [2, 4, 6, 8]
sum = 0

for number in numbers:
    sum += number

print(sum)"
"Write a function in the Python language to convert a string to a list.my_string = ""Welcome to the world of GPT models""","def string_to_list(my_string):
    return my_string.split()"
Write a Python program that generates a random integer between 1 and 5 and prints it out.,"import random

random_integer = random.randint(1, 5)

print(random_integer)"
"Create a regex expression to extract names from the following sentence: ""John, Jessica and David went to the store.""","\b[A-Z][a-z]+(?:,[\sA-Z][a-z]+)*"
How would you find the area of a rectangle in Python?,"""""""
Find the area of a rectangle in Python
""""""

def area_of_rectangle(width, height):
    """"""
    Returns the area of a rectangle given its width and height.
    """"""
    return width * height

if __name__ == ""__main__"":
   print(area_of_rectangle(2, 4))"
"Find the greatest common divisor for two integer inputs using the Euclidean Algorithm.30, 60","""""""
Find the greatest common divisor for two integer inputs using the Euclidean Algorithm
""""""

def greatest_common_divisor(int1, int2):
  if int1 == 0:
    return int2
  elif int2 == 0:
    return int1
  elif int1 == int2:
    return int1
  else:
    if int1 > int2:
      return greatest_common_divisor(int2, int1 % int2)
    else:
      return greatest_common_divisor(int1, int2 % int1)

if __name__ == ""__main__"":
   print(greatest_common_divisor(30, 60))"
"Calculate the linear regression line for the following data.X: [1, 2, 3, 4, 5]
Y: [6, 8, 10, 11, 12]","""""""
Calculate the linear regression line for the given data
""""""
import numpy as np

def linear_regression_line(X, Y):
    mean_x = np.mean(X)
    mean_y = np.mean(Y) 
    stdev_x = np.std(X)
    stdev_y = np.std(Y)

    numerator = 0
    for x, y in zip(X, Y):
        numerator += (x - mean_x) * (y - mean_y) 
    beta_1 = numerator/ (stdev_x * stdev_y)

    beta_0 = mean_y - (beta_1 * mean_x)
    
    return (beta_1, beta_0)

if __name__ == ""__main__"":
   X = [1, 2, 3, 4, 5]
   Y = [6, 8, 10, 11, 12]
   print(""Linear Regression Line: {}"".format(linear_regression_line(X, Y)))"
Find the sum of the series n3/(3n+1).14,"def sum_series(n):
    result = 0
    for x in range(1, n+1):
        result += (x**3) / (3*x+1)
    return result

print(sum_series(14))"
"Create a function to convert a given string to its lowercase equivalent, disregarding any non-alphabetical characters.","def to_lowercase(string):
    new_string = """"
    for char in string:
        if char.isalpha():
            new_string += char.lower()
        else:
            new_string += char
    return new_string"
"How would you find the maximum 3 elements from a list of numbers?[20, -50, 15, 55, 0 , 40]","def find_max_three(nums):
    max1 = - float('inf')
    max2 = - float('inf')
    max3 = - float('inf')

    for num in nums:
        if num > max1:
            max3 = max2
            max2 = max1
            max1 = num
        elif num > max2:
            max3 = max2
            max2 = num
        elif num > max3:
            max3 = num
            
    return max1, max2, max3

print(find_max_three([20, -50, 15, 55, 0, 40]))"
Compare and contrast the differences between sets and lists in Python.,"A set is an unordered collection of items while a list is an ordered collection of items. Sets have no duplicate elements so all the elements in a set must be unique. The elements inside a list may or may not be unique. Sets are faster when compared to lists for retrieving elements since lookups of items don't require continuous search whereas lists need linear search. The sets built-in functions such as union, intersection give us a quick way of performing mathematical set operations. The elements of set are unchangeable and once you create a set the element in the set remain the same. But, items in a list can be modified."
"Given a list of strings, create a function that returns a list of only the unique strings.[""this"", ""is"", ""a"", ""list"", ""of"", ""strings"", ""this"", ""list"", ""has"", ""some"",  ""duplicates""]","def unique_strings(string_list): 
  return list(set(string_list))"
"Return a dictionary containing the number of occurrences of each word in the string.s = ""this string should contain 4 occurrences of the word should""","def count_words(s): 
    words = s.split() 
    returnCounter = dict.fromkeys(words, 0) 
    for word in words: 
        returnCounter[word] += 1
    return returnCounter"
Write a function that takes an integer n and prints the n x n grid with stars.3,"def print_grid(n): 
    for r in range(n):
        print(""* ""*n)"
"Create a function that takes two strings and returns true if both strings have the same length and false otherwise.string1 = ""hello""
string2 = ""world""","def same_length(string1, string2):
  return len(string1) == len(string2)"
"Given a list of numbers, create a function that prints the elements of the list that are divisible by 5.[1, 20, 30, 15, 60]","def print_divisible_by_5(input_list):
    for num in input_list:
        if num % 5 == 0:
            print(num)"
"Create a function that takes a list of numbers and returns True if the sum of the numbers is even and False otherwise.[2, 4, 6, 8]","def sum_is_even(input_list): 
    return sum(input_list) % 2 == 0"
How to install the Python package called Pillow?,"The easiest way to install the Pillow package is through pip, the official package manager for Python. To install Pillow using pip, open the command line interface and type ""pip install Pillow""."
"Implement a main method for the following abstract class.abstract class AbstractClass {

    abstract void funOne();

    abstract void funTwo();

}","abstract class AbstractClass {

    abstract void funOne();

    abstract void funTwo();

    public static void main(String[] args) {
        // Code goes here
    }
}"
"What is the result of the following operation in Python?x = 1
y = 3
z = 4

x = y - z",x = -3
Design an algorithm to find the median of two sorted arrays.,"The algorithm would first compare the two arrays and select the lower value for the first element of the median. Then it would proceed to select the higher value for the second element of the median, and then average the two elements to obtain the median of the two sorted arrays."
How to create a dictionary of length four in Python?,"The simplest way to create a dictionary of length four in Python is by using the built-in dict() function. For example:

myDict = dict(key1 = ""value1"", key2 = ""value2"", key3 = ""value3"", key4 = ""value4"")"
"Given a linked list, design an algorithm to reverse it.","The algorithm must traverse the list and keep track of the nodes as it moves through it. The algorithm should create a new linked list with the elements in reverse order. To do this, the algorithm should traverse the original linked list and push every element onto a stack. Then, the algorithm should pop each element off the stack and insert it as the head of the new linked list. This process is iterative until the stack is empty."
"Implement the following function using a stack.def isPalindrome(string):
    '''This function will return whether or not a string is a palindrome.'''","def isPalindrome(string):
    '''This function will return whether or not a string is a palindrome.'''
    stack = [] 
    for letter in string:
        stack.append(letter)

    reverse = ''
    while stack:
        reverse += stack.pop()

    if reverse == string:
        return True
    return False"
"Create a for loop in Python to print all elements in a given numpy array.import numpy as np 
myArray = np.array([1, 2, 3, 4])","for element in myArray:
 print(element)"
"How could you tokenize a sentence ""Jack and Jill went up the hill.""","The sentence ""Jack and Jill went up the hill"" can be tokenized into the following four tokens: 
[""Jack"", ""and"", ""Jill"", ""went"", ""up"", ""the"", ""hill""]."
"Generate a list of 4 random numbers between 0 and 10, without duplicates.","[6, 0, 9, 5]"
"Create a program to list the 3 most frequent words in a string.string = ""I am learning Python programming language""","def top_three_words(string):
    words = string.split()
    word_dict = {}
    for word in words:
        if word in word_dict:
            word_dict[word] +=1
        else:
            word_dict[word] = 1
    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)
    top_three = [word[0] for word in sorted_dict[:3]]
    return top_three"
"Edit the following code and make sure it prints out the sorted list instead of the unsorted list.list_of_numbers = [30, 10, 20, 40, 50]","list_of_numbers = [30, 10, 20, 40, 50]

list_of_numbers.sort()

print(list_of_numbers)"
Output a random sentence based on the given grammar.<Noun> asked <Pronoun> to <Verb> the <Object>.,The cat asked him to build the house.
"Output the number of ""a""s in the following sentence.The quick brown fox jumps over the lazy dog.","There are 3 ""a""s in the sentence."
"Create a program to find the closest string to the given string from a list of strings.string = ""text""
strings = [""tens"", ""tent"", ""teach"", ""tewksbury""]","def closest_string_match(string, strings):
    min_distance = float(""inf"")
    min_string = """"
    for s in strings:
        distance = levenshtein_distance(string, s)
        if distance < min_distance:
            min_distance = distance 
            min_string = s
    return min_string

def levenshtein_distance(s1, s2):
    if len(s1) > len(s2):
        s1, s2 = s2, s1

    distances = range(len(s1) + 1)
    for i2, c2 in enumerate(s2):
        distances_ = [i2+1]
        for i1, c1 in enumerate(s1):
            if c1 == c2:
                distances_.append(distances[i1])
            else:
                distances_.append(
                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))
        distances = distances_
    return distances[-1]"
"Create a function that checks if a given string is a palindrome (a string which reads the same forward and backward).string = ""racecar""","def isPalindrome(string): 
    rev_string = string[::-1] 
    if (string == rev_string): 
        return True 
    return False"
"Create a program that takes a list of numbers and prints out the sum of those numbers.list_of_numbers = [4, 8, 15, 16, 23, 42]","total = 108

# Program
list_of_numbers = [4, 8, 15, 16, 23, 42]

total = sum(list_of_numbers)
print(total)"
"Generate a customized welcome message that welcomes a given customer by name.customer_name = ""John Doe""","Welcome, John Doe! We are so glad that you are here."
"Write a code snippet that adds two matrices of equal sizes.matrix1 = [[1, 2],
		   [3, 4]]

matrix2 = [[5, 6],
		   [7, 8]]","def add_matrices(matrix1, matrix2):
    # assert that the matrices are of equal size
    assert len(matrix1) == len(matrix2), ""Matrices should have the same size""
    assert len(matrix1[0]) == len(matrix2[0]), ""Matrices should have the same size""

    # add the elements
    for i in range(len(matrix1)):
        for j in range(len(matrix2[0])):
            matrix1[i][j] += matrix2[i][j]

    return matrix1"
Create a code snippet that solves the following equation: 4x + 5y = 20,"# Solve the equation
def solve(x, y):
    return (20 - 5 * y) / 4

x = solve(4, 5)
y = solve(5, 4)

print(x, y) # Outputs: 3, 4"
"Using the comment as a guide, implement the missing line of code necessary to print out the number 9.x = 3 
y = 3
# Print the value of x multiplied by y","x = 3 
y = 3
# Print the value of x multiplied by y
print(x * y) # Outputs: 9"
"Write a code snippet to convert the following list of dictionaries into a pandas dataframe.students = [{""name"":""John"", ""age"": 18, ""grade"": 85},
            {""name"":""James"", ""age"": 16, ""grade"": 82},
            {""name"":""Jill"", ""age"": 17, ""grade"": 89}]","# Convert the list of dictionaries to pandas dataframe
import pandas as pd
df = pd.DataFrame(students)

# Print the dataframe
print(df)
# Outputs:
   name  age  grade
0  John   18     85
1  James  16     82
2  Jill   17     89"
Write a Python script to detect if a given text contains any URL.,"import re

def has_url(text):
  pattern = r""(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?""
  matches = re.findall(pattern, text) 
  if matches:
    return True
  return False"
"Generate a program to sort the list.unsorted_list = [3, 5, 1, 0, 9]","unsorted_list = [3, 5, 1, 0, 9]

def sort_list(unsorted_list):
    sorted_list = sorted(unsorted_list)
    return sorted_list

print(sort_list(unsorted_list))"
Generate a program to flip a coin.,"from random import choice 

def flip_coin(): 
	result = choice(['Heads', 'Tails']) 

	print(result) 

if __name__ == ""__main__"": 
	flip_coin()"
"Generate a code to transform the list of strings into the upper case.list = ['apple', 'banana', 'cherry']","list = ['apple', 'banana', 'cherry']

def transform_list(list):
    upper_list = [i.upper() for i in list]
    return upper_list

print(transform_list(list))"
"Create a Python program that'll take two lists and return a combined list.list_1 = [2, 4, 6]
list_2 = [3, 5, 7]","def combine_lists(list_1, list_2):
    return list_1 + list_2

list_1 = [2, 4, 6]
list_2 = [3, 5, 7]

print(combine_lists(list_1, list_2))"
"Construct a sorting algorithm to sort an array in increasing order.array = [4,7,1,3,9]","def bubble_sort(arr): 
    arr_length = len(arr)
    # Iterate through entire array 
    for i in range(arr_length): 
        # Iterate through unsorted subarray 
        for j in range(0, arr_length-i-1): 
            # Swap items if needed
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Test our Bubble sort implementation
arr = [4,7,1,3,9] 
bubble_sort(arr) 
  
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""%d"" %arr[i])"
Create a function that generates a random string of length n using alphabet characters.,"import string
import random
def random_string_generator(n):
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(n))"
Create an object oriented program to print the Fibonacci sequence.,"class Fibonacci:
    def __init__(self, num):
        self.num = num
 
    def fibo(self):
        prev = 0
        current = 1
        next = 0
        print(prev)
        print(current)
        for i in range(2,self.num):
            next=prev+current
            print(next)
            prev=current
            current=next
 
# main program starts from here
n= int(input(""how many numbers to print: ""))
fibo_obj=Fibonacci(n)
fibo_obj.fibo()"
Print out the first 10 elements in the sequence interpreted by the rule F(n) = F(n-1) + F(n-2).,"def fibonacci(n): 
    
    # Creating an array to store the sequence 
    f = [0] * (n + 2) 
      
    # Initial values   
    f[1] = 1
      
    # Calculating the terms 
    for i in range(2, n + 2): 
        f[i] = f[i - 1] + f[i - 2] 
    return f[1:n+1]
  
n = 10
print(fibonacci(n))"
Design a class in python to find the reverse of a number.,"class ReverseNumber(): 
    def __init__(self): 
        pass
    
    def reverse_number(self, num): 
      
        reverse = 0
  
        # Iterate over the given number 
        while(num > 0): 
            reminder = num % 10
  
            # Constructing the reverse number
            reverse = (reverse * 10) + reminder 
  
            # Floor division
            num = num // 10
  
        return reverse 
  
# Driver Code 
if __name__ == '__main__': 
    rev = ReverseNumber()
    print(rev.reverse_number(123))"
Generate a syntax-correct program to calculate the sum of the elements in a given 2D array,"def sum_elements(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(len(arr[i])):
            sum += arr[i][j]
    return sum"
Generate a syntax correct program which reverses a given linked list,"def reverse_list(head): 
    curr = head 
    prev = None

    while curr is not None: 
        next_ = curr.next
        curr.next = prev 
        prev = curr 
        curr = next_

    head = prev 
    return head"
Write a code to create an array of 10 random numbers between 0 and 1.,"import java.util.Random; 

public class RandomArray {
    public static void main(String[] args) {
        Random rand = new Random(); 
  
        float array[] = new float[10];  
  
        for(int i = 0; i < 10; i++) { 
            array[i] = rand.nextFloat(); 
        }
  
        System.out.println(""Array of 10 random numbers between 0 and 1: "");
        for (int i = 0; i < 10; i++) { 
            System.out.println(array[i]); 
        } 
    }
}"
"Arrange the following data for sorting operation.[4, 19, 10, 7, 1, 3]","[1, 3, 4, 7, 10, 19]"
Create a class in Python thattracks the number of objects created.,"class CountObjects:
  count = 0
  def __init__(self):
    CountObjects.count += 1
 
  @classmethod
  def get_count(cls):
    return cls.count"
What operator should be used to compare two strings in a programming language?,The operator to compare two strings in a programming language is '===' (strict equality operator).
Create a switch statement to display the corresponding number in words.6,"switch (num) {
  case 1:
    console.log('one');
    break;
  case 2:
    console.log('two');
    break;
  case 3:
    console.log('three');
    break;
  case 4:
    console.log('four');
    break;
  case 5:
    console.log('five');
    break;
  case 6:
    console.log('six');
    break;
  case 7:
    console.log('seven');
    break;
  case 8:
    console.log('eight');
    break;
  case 9:
    console.log('nine');
    break;
  default:
    console.log('Please enter a number from 1 to 9.');
}"
Edit the sentence using the correct punctuation.The apple is red,The apple is red.
Write a code snippet to convert the text to lowercase.LOWERCASING,"let lowerCaseText = text.toLowerCase();
console.log(lowerCaseText); // lowercasing"
Calculate the area of a parallelogram with base lengths 5m and 8m and height of 4m.,Area of the parallelogram = 40 m2
Refactor this line of code to make it more concise.tasks = [t for t in tasks if t.completed == False],tasks = [t for t in tasks if not t.completed]
"Implement a code to print the indices of all occurrences of a number x in an array arr.x = 5
arr = [1, 5, 2, 8, 5, 10]","def print_indices(x, arr):
    indices = []
    for i in range(len(arr)):
        if arr[i] == x:
            indices.append(i)
    return indices

print(print_indices(x, arr))  # [1, 4]"
"Write code to create a list of tuples that contains all the possible combinations of two elements taken from two different lists.list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]","def combo(list1, list2):
    result = []
    for i in list1:
        for j in list2:
            result.append((i, j))
    return result

combos = combo(list1, list2) # [(1, 5), (1, 6), (1, 7), (1, 8), (2, 5), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8)]"
"Edit this piece of code to work with negative numbersdef sum_positive(arr): 
    result = 0
    for num in arr:
        if num >= 0:
            result += num
    return result","def sum_positive(arr): 
    result = 0
    for num in arr:
        if num != 0:
            result += abs(num)
    return result"
Classify this problem as either a classification or a regression problem.Predict the future value of a stock based on past data.,"This is a regression problem because it is trying to predict a continuous, numerical value (the future value of a stock)."
"Add a class attribute to the given Python class.class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age","class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.grade = None"
"Generate a matrix with specific number of row and columnsNumber of rows = 3, number of columns = 2","[[0, 0], [0, 0], [0, 0]]"
Create an empty function that takes input as a string,"def empty_func(x):
    pass"
"Using a given dataframe, find out the largest value in the column 'A'A B
3.2 4.9
7.5 1.0
0.2 0.5",7.5
"Replace the placeholder text with a valid statement that sets the default value for the 'count' parameter of the functiondef prints(word, count=TODO):
    for i in range(count):
        print(word)","def prints(word, count=0):
    for i in range(count):
        print(word)"
"Create a loop to print ""I love Python"" five times","for i in range(5):
    print(""I love Python"")"
"Take in a list and output the last elementmy_list = [1, 2, 3, 4]",my_list[-1]
Write code to encrypt a string,"def encrypt_string(string):
    encrypted_string = """" 

    for char in string:
        encrypted_string += chr(ord(char) + 5)

    return encrypted_string"
"Sort a given list by the second element of each pairmy_list = [(2, 9), (1, 4), (3, 5)]","sorted_list = sorted(my_list, key=lambda x: x[1])"
"Create a while loop to iterate over the elements in the given listmy_list = [1, 2, 3, 4]","i = 0 
while i < len(my_list): 
    print(my_list[i]) 
    i += 1"
"Find the minimum among a list of integers.[1, 15, 22, -5, 87]","def find_min(numbers):
  min_value = numbers[0]
  for n in numbers:
    if n < min_value:
      min_value = n
  
  return min_value
  
if __name__ == '__main__':
  numbers = [1, 15, 22, -5, 87]
  print(find_min(numbers))"
"How many km are in 2,000 meters?","2,000 meters is equal to 2 kilometers."
"Using an If statement, output whether a given number is positive or negative.int num = -25","if (num > 0) {
  System.out.println(num + "" is a positive number"");
} else {
  System.out.println(num + "" is a negative number"");
}"
Generate a random DNA sequence of length 50.,"""""""
Generate a random DNA sequence of length 50
""""""

import random

def random_dna_sequence(length):
    bases = [""A"",""T"",""G"",""C""]
    sequence = """".join([random.choice(bases) for _ in range(length)])
    return sequence

if __name__ == '__main__':
  print(random_dna_sequence(50))"
"You need to check a given list of strings to determine it contains all valid English words. Output true if so, output false otherwise.list = [""hello"", ""world"", ""fksgks""]","import requests 
  
# Creating list of words 
list = [""hello"", ""world"", ""fksgks""] 
  
# Iterating in the list of words 
for i in list: 
    url = ""https://www.dictionary.com/browse/""+i 
    try: 
        webpage = requests.get(url) 
  
        # Valid word if request status  
        # code is 200 
        if webpage.status_code == 200: 
            valid = True
        else: 
            valid = False
    except: 
        valid = False
              
if valid == False: 
    print(""False"")
else:
    print(""True"")"
"Given a matrix, write a program to rotate it by 90 degrees clockwise.matrix = [[1,2,3], 
          [4,5,6], 
          [7,8,9]]","def rotateMatrix(matrix):
    N = len(matrix[0])
    for i in range(N // 2):
        for j in range(i, N - i - 1):
            temp = matrix[i][j]
            matrix[i][j] = matrix[N - 1 - j][i]
            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]
            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i]
            matrix[j][N - 1 - i] = temp

rotateMatrix(matrix)"
"Given a dictionary, write a program to create a new dictionary where the values are the keys and the keys are the values.{""apple"": 1, ""banana"": 2, ""carrot"": 3}","def reverse_dict(d):
    new_d = {v:k for k, v in d.items()}
    return new_d

d = {""apple"": 1, ""banana"": 2, ""carrot"": 3}
print(reverse_dict(d))"
"Create a program to group the numbers in the given list into odd and even groups.[1,2,3,4,5,6]","nums = [1,2,3,4,5,6]

odd_nums = []
even_nums = []

for num in nums:
    if num % 2 == 0:
        even_nums.append(num)
    else:
        odd_nums.append(num)

print('Odd numbers:', odd_nums)
print('Even numbers:', even_nums)"
Design a function to take a URL and return the content of the URL.,"import requests

def get_content(url):
    response = requests.get(url)
    html = response.content
    return html"
Create a function to check the validity of an email address.,"def validate_email(email):
    regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    if re.search(regex,email):
        return True
    else:
        return False"
"Find the maximum sum of a subarray of size 'k' in a given array.arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]
k = 4","def max_sum_subarray(arr, k):
    max_sum = 0
    for i in range(len(arr) - k + 1):
        curr_sum = 0
        for j in range(i, i + k):
            curr_sum += arr[j]
        max_sum = max(max_sum, curr_sum)
    return max_sum"
"Use the given dictionary to find the value for the key ""city"".{""name"": ""John Smith"",
 ""age"": 42,
 ""city"": ""Los Angeles""}","#Use the given dictionary to find the value for the key ""city""

dictionary = {""name"": ""John Smith"", ""age"": 42, ""city"": ""Los Angeles""}

city = dictionary[""city""]

print(""The value for the key city is: "" + city)"
"Implement a function that takes in 2 strings and returns a new string consisting of alternating characters from the strings passed in.""hello""
""world""","#Implement a function that takes in 2 strings and returns a new string consisting of alternating characters
def alt_string(str1, str2):
    alt_str = """" 
    length = len(str1) if len(str1) <= len(str2) else len(str2)
    
    for i in range(length):
        alt_str += str1[i] + str2[i]
    
    if len(str1) > len(str2):
        alt_str += str1[length:]
    elif len(str2) > len(str1):
        alt_str += str2[length:]
    
    return alt_str"
"Change the given code so that it prints the sentence ""Hello, World!""print(""Goodbye, World!"")","#Change the given code so that it prints the sentence ""Hello, World!""

print(""Hello, World!"")"
"Write a function that takes two parameters, a list and a number. If a number is found in the list, the function should return its index, else it should return -1.[1, 2, 3, 4, 9], 2","#Write a function that takes two parameters, a list and a number.
def find_number(list_num, num):
    '''This function takes in a list of numbers and 
a number and returns the index of the number if it is found, 
else return -1.'''
    
    # Traverse through the list
    for i in range(len(list_num)):
        # If the number is found
        if list_num[i] == num:
            # return its index
            return i
    # Number not found
    return -1"
"Summarize the given text in 3-5 sentences.REST is an architectural style that defines a set of constraints and properties based on HTTP. It basically uses HTTP for communication between services. It stands for Representational State Transfer, and defines the various ways by which services can provide data and be interacted with.","#Summarize the given text in 3-5 sentences

REST (Representational State Transfer) is an architecture style used to communicate between services over HTTP. It is composed of a set of constraints and properties that define how the services communicate and exchange data. REST is useful in implementing a distributed system, as it follows client-server model of communication and thus, simplifies the interaction between different services. Furthermore, REST is a stateless protocol, meaning that the server does not store any state about the client session. Instead, each request and responses are self-contained, eliminating the need to maintain any client-specific state."
Implement an algorithm to print the steps of the Tower of Hanoi problem.,"def hanoi(num_disks, from_peg, to_peg, aux_peg):
    if num_disks == 1:
        print(""Move disk 1 from peg"", from_peg,""to peg"", to_peg)
        return

    hanoi(num_disks-1, from_peg, aux_peg, to_peg)
    print(""Move disk"",num_disks,""from peg"",from_peg,""to peg"",to_peg)
    hanoi(num_disks-1, aux_peg, to_peg, from_peg)"
Calculate the factorial of an integer using recursion.,"def factorial(n):
  if n == 0:
    return 1
  else :
    return n*factorial(n-1)"
"Write a function to create a new nested list with twice the length of the original.original_list = [1, 2, [3, 4], 5]","def nested_list_doubled(original_list):
  new_list = []
  for item in original_list:
    if isinstance(item, list):
      new_list.append(nested_list_doubled(item))
    else:
      new_list.append(item)
    new_list.append(item)
  return new_list"
Write code to walk through a BST and print out all the elements in order.,"def in_order_traversal(tree):
  if tree != None:
    in_order_traversal(tree.left)
    print(tree.data,end="" "")
    in_order_traversal(tree.right)"
Find all the multiples of a number in between two given numbers.,"def find_multiples(base, lower, upper):
    output = []
    for i in range(lower, upper+1):
        if i % base == 0:
            output.append(i)
    return output"
"Write a function that takes a string and replaces all non-alphanumeric characters with the # symbol.let str = ""Hello* World!""","function replaceNonAlphaNumCharacters(str) {
    let result = str.replace(/[^a-zA-Z0-9]/g, '#');
    return result;
}

let str = ""Hello* World!"";
replaceNonAlphaNumCharacters(str);"
Output the current date in YYYYMMDD format.,"let today= new Date();
let dd = String(today.getDate()).padStart(2, '0');
let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
let yyyy = today.getFullYear();

console.log(yyyy+mm+dd);"
"Replace the commented out code with a single line of code that calcultes the product of all elements in the array.let my_array = [4, 5, 6];
// let product = 1;
// for (let i = 0; i < my_array.length; i ++ ){
//     product *= my_array[i];
// }","let my_array = [4, 5, 6];
let product = my_array.reduce((acc, cur) => acc * cur);"
"Determine the maximum sum of a subarray within the given array.[-2, 1, -3, 4, -1, 2, 1, -5, 4].","let max_sum = 0;
let current_sum = 0;

for (let i=0; i < arr.length; i++)
{
    current_sum += arr[i];
    
    if (current_sum < 0)
        current_sum = 0;
        
    max_sum = Math.max(current_sum, max_sum);
}

console.log(max_sum);"
"Using a loop and a conditional statement in Python, check if the number is a prime number.let number = 13;","def is_prime(number):
    if (number <= 1):
        return False
    if (number <= 3):
        return True

    if (number % 2 == 0 or number % 3 == 0):
        return False

    i = 5
    while (i * i <= number):
        if (number % i == 0 or number % (i + 2) == 0):
            return False
        i +=6

    return True"
"Create a for loop which iterates through the given list and prints the value of each item.let myList = [3, 5, 7, 9];","for (let item of myList) {
    console.log(item);
}"
"Using the given data, calculate and output the maximum values of each row.let my_data = [[1, 10, 2], [12, 4, 9], [5, 3, 7]];","let result = [];

for (let i = 0; i < my_data.length; i++) {
    let max_val = 0;
    for (let j = 0; j < my_data[i].length; j++) {
        if (my_data[i][j] > max_val) {
            max_val = my_data[i][j];
        }
    }
    result.push(max_val);
}

console.log(result);"
"Determine and output the last occurence of the given number in an array.let my_array = [2, 4, 8, 6, 2];
let my_number = 2;","let index = my_array.lastIndexOf(my_number);
console.log(index);"
"Print the second half of the given string.let my_string = ""How are you doing today?""","let second_half = my_string.substring(my_string.length / 2);
console.log(second_half);"
"Implement a function that takes two parameters, an array and a value, and returns true if the array contains the value and false if it does not.let myArray = [1, 2, 3, 4, 5];
let myValue = 3;","def containsValue(arr, value):
    for item in arr:
        if item == value:
            return True
    return False

print(containsValue(myArray, myValue))"
Create an algorithm to find the longest continuous increasing subarray.,"def longestIncreasingSubarray(arr):
    n = len(arr)
    max_len = 1
    curr_len = 1
    for i in range(1, n): 
     
        #if current element is greater than its previous element 
        if (arr[i] > arr[i-1]):
            curr_len += 1
        else:
            if (curr_len > max_len):
                max_len = curr_len
            curr_len = 1
    #Compare the length of the last 
    #subarray with max_len and 
    #update max_len if needed 
    if (curr_len > max_len):
        max_len = curr_len 
    
    return max_len"
Implement an algorithm to select k elements from an array such that the sum of those elements is maximized,"def maximize_sum(arr, k):
    arr.sort()
    result = 0
    for i in range(len(arr)-1, len(arr)-k-1, -1):
        result += arr[i]
    return result"
"Categorize the words from the list [""Apple"", ""Carrot"", ""Banana"", ""Tomato"", ""Lemon""]","Fruits: Apple, Banana, Lemon
Vegetables: Carrot, Tomato"
Generate a random sample of size 10 using numpy,"import numpy as np

rand_sample = np.random.randint(low=0, high=100, size=10)"
Construct an API using Flask that returns an array of integers in response to a request,"from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/v1/get_data', methods=['GET'])
def get_data():
    data = [1, 2, 3, 4, 5]
    return jsonify(data)

if __name__ == '__main__':
    app.run()"
Design a data visualization to show the average salary per gender,"import matplotlib.pyplot as plt
  
male_salaries = [3000, 3500, 3000, 3500, 4000] 
female_salaries = [2500, 3000, 2500, 3000, 3500] 
  
plt.bar(range(len(male_salaries)), male_salaries, width=0.35, 
            label='Male Salaries') 
  
plt.bar([x+0.35 for x in range(len(female_salaries))], 
            female_salaries, width=0.35, 
            label='Female Salaries') 
  
plt.xlabel('Employee') 
plt.ylabel('Salaries') 
plt.title('Salaries per Gender') 
plt.legend(loc=""upper right"") 
plt.show()"
Design a Python class structure for playing cards with two classes: Deck and Card.,"class Deck: 
    def __init__(self):
        self.cards = []
    
    def populate(self):
        suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']
        numbers = [2,3,4,5,6,7,8,9,10,'Jack','Queen','King','Ace']

        for suit in suits:
            for number in numbers:
                self.cards.append(Card(suit, number))

    def shuffle(self):
        random.shuffle(self.cards)
        
    def deal(self):
        card = self.cards.pop()
        return card
 
class Card:
    def __init__(self, suit, number):
        self.suit = suit
        self.number = number"
"Write a Python script to compare two lists and print out missing and same elements.list1 = [1, 2, 3, 4]
list2 = [2, 3, 4, 5]","same_elements = []
missing_elements = []

for i in list1:
  if i in list2:
   same_elements.append(i)
  else:
    missing_elements.append(i)

for i in list2:
  if i not in list1:
    missing_elements.append(i)

print(""Same elements:"",same_elements)
print(""Missing elements:"",missing_elements)
# Output: Same elements: [2, 3, 4] 
#        Missing elements: [1, 5]"
Write a Python script that prints out all of the letters of the alphabet one per line.,"for letter in 'abcdefghijklmnopqrstuvwxyz':
    print(letter)"
"Convert a string into list of characters.string = ""Hello World!""","char_list = list(string)
print(char_list) # Output: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']"
"Write code to replace the first letter of a string with an underscore (_).string = ""Hello World!""","string = list(string)
string[0] = '_'
string = ''.join(string)
print(string) # Output: _ello World!"
"Detect if a particular character is included in a string or not.string = ""Hello World!""
character = '!'","def character_check(string, character):
    if character in string:
        return True
    else:
        return False

check = character_check(string, character)
print(check) # Output: True"
"Calculate the frequency of occurrence of each letter in a word.word = ""programming""","def frequency_count(word):
    # dictionary to store the frequency of occurrence
    frequency = {}

    # iterate through each character
    for char in word:
        # if the character is present in the frequency dictionary
        if char in frequency:
            # increase the count of the character
            frequency[char] += 1
        else:
            # add the character to the dictionary and set its count to 1
            frequency[char] = 1

    return frequency

# Calculate the frequency of occurrence
frequencies = frequency_count(word)
print(frequencies) # Output: {'p': 1, 'r': 2, 'o': 2, 'g': 2, 'a': 1, 'm': 1, 'i': 1, 'n': 1}"
"Using Perl, use a regular expression to search for any email addresses in a given line of text.Please contact info@example.com for more information.",/(\S+)@(\S+)/
Find the Locality from an Indian Pin Code.Pin Code: 400615,"The locality for Pin Code 400615 is Vashi, Navi Mumbai, Maharashtra."
Make an array with 10 integers between 0 and 100.,"my_array = [23, 60, 12, 44, 97, 72, 4, 39, 66, 84]"
Calculate the GCD of numbers 8 and 12.,The GCD of numbers 8 and 12 is 4.
"Write a function to convert the given list of integers into a dictionary of lists.my_list = [1, 2, 3, 4]","def list_to_dict(lst):
    my_dict = {}
    for i in lst:
        my_dict[str(i)] = [i]
    return my_dict

if __name__ == '__main__':
    my_list = [1, 2, 3, 4]
    print(list_to_dict(my_list))"
Create a 4x4 matrix filled with random numbers between 0 and 9.,"import random

def generate_random_matrix(rows, cols):
    matrix = []
    for i in range(rows):
        matrix.append([])
        for j in range(cols):
            matrix[i].append(random.randint(0, 9))
    return matrix

if __name__ == '__main__':
    rows = 4
    cols = 4
    print(generate_random_matrix(rows, cols))"
"Amend the following Python function to calculate the sum of all even numbers in the given range.def sum_even_numbers(n):
    '''This function will calculate the sum of all numbers in the given range.'''
    total = 0
    for i in range(n):
        total += i
    return total","def sum_even_numbers(n):
    '''This function will calculate the sum of all even numbers in the given range.'''
    total = 0
    for i in range(n):
        if i%2==0:
            total += i
    return total"
"Add a method called ""printTitle"" to the “Book” class defined above.","class Book():
  def __init__(self, name, author):
    self.name = name
    self.author = author
  
  def printTitle(self):
      print(""The book title is: ""+ self.name)"
"Amend the following Python code to add error handling to the function print_score.def print_score(score):
    print(f'The score is {score}')","def print_score(score):
    try:
        score = int(score)
        print(f'The score is {score}')
    except ValueError:
        print(""The score must be an integer."")"
"Create a function to calculate the compound interest rate given the initial principal amount P, the annual interest rate r and the number of times compounding occurs in a year n.","def compound_interest(P, r, n):
    return P * (1 + (r/n))**(n*t)"
"Add a method called “isEmpty” to the following Python class to check if the list is empty or not.class List:
    def __init__(self, data):
        self.data = data","class List:
    def __init__(self, data):
        self.data = data
    
    def isEmpty(self):
        return not self.data"
"Move the element of the list at index 0 to the end of the list.[1, 2, 3, 4, 5]","[2, 3, 4, 5, 1]"
Write a Python function to find the maximum and minimum numbers from a sequence of numbers.,"def min_max(data):
    min_value = min(data)
    max_value = max(data)
    return min_value, max_value"
How does dynamic programming work?,"Dynamic programming is a way of solving problems by breaking them down into a collection of smaller subproblems. It works by storing solutions to subproblems so that each subproblem is only solved once. This allows for faster computation and efficient memory usage, as solutions are stored and reused instead of having to be recalculated every time they are needed. This approach is useful in situations where a given problem can be divided into multiple, overlapping subproblems, such as in optimization problems."
"Construct a query using MongoDB to find all the documents with a ""city"" field that equals ""New York"".","db.collection.find({city: ""New York""})"
"Construct a query using MongoDB to find documents where the ""user_id"" field contains any number greater than 5.",db.collection.find({user_id: {$gt: 5}})
Write an Apache Spark program to count the occurrence of each word in the given dataset.,"val wordCounts = df.flatMap(line => line.split("" ""))
       .map(word => (word, 1))
       .reduceByKey(_ + _)
       .sort($""count"".desc)"
"Write a script to display ""Hello World"" in the console twenty times","for i in range(20):
    print(""Hello World"")"
"Move the parentheses to make the expression give the correct answer.Expression: 8 / 2 * (2 + 2)
Answer: 16",8 / (2 * (2 + 2))   // parentheses moved to form the correct expression which yields the correct answer (16).
Analyze the given statement for any syntax errors.Statement: The user entered his name James and password1234,No syntax errors were detected in the given statement.
Write a function to generate Fibonacci numbers in Python.,"def fibonacci(num):
  fib_list = [0, 1]
  if num == 0:
    return []
  elif num == 1:
    return [0]
  else:
    for _ in range(2, num):
      nxt_num = fib_list[-1] + fib_list[-2]
      fib_list.append(nxt_num)
    return fib_list"
List the advantages and disadvantages of using a FOR loop.,"Advantages of FOR loop: 
- It provides a simple, efficient way to write the loop and is easy to read. 
- It is useful in certain scenarios where you need to control the number of iterations. 

Disadvantages of FOR loop: 
- It requires you to specify the number of iterations at the start of the loop. 
- If the range of iterations is large, it can lead to an inefficient program. 
- If the loop's iteration statement contains a break statement, it can lead to an unexpected result."
Construct a regex to check if a provided string is phone number or not,Regex: ^\d{10}$
"Write code for reversing a list in Python[1,2,3,4]","def reverse_list(l):
    return l[::-1]"
"Create a spreadsheet and enter the following dataStudent Name  Math  English  Physics  Chemistry
John          70    80       87       85
Mary          90    65       70       79","Student Name | Math | English | Physics | Chemistry
-------------|------|---------|---------|-----------
John         | 70   | 80      | 87      | 85
Mary         | 90   | 65      | 70      | 79"
Create a function to calculate the number of different ways to climb n stairs,"def count_ways(n): 
    if n==1 or n==0: 
        return 1
    elif n==2: 
        return 2
    else: 
        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)"
Convert the following string from lower case to upper casehello world,HELLO WORLD
"Create an algorithm to determine the most common element in an array[2, 3, 5, 3, 7, 2, 8, 1, 3]","def most_common(arr):
    counts = {}
    for i in arr:
        if i in counts:
            counts[i] += 1
        else:
            counts[i] = 1
    
    max_count = 0
    max_item = None
    for item, count in counts.items():
        if count > max_count:
            max_count = count
            max_item = item

    return max_item"
Describe the basic structure of an XML document,"An XML document has a basic structure of a root element, which may contain other elements. Elements in an XML document are defined by start tags and end tags and can have attributes, text and other kinds of content. In addition, there are rules regarding the order of nested elements, the type of elements and their content, as well as the use of whitespace. XML documents are self-describing because all their elements are labeled."
How would you add elements from one list to another list in Python?,"You can add elements from one list to another list in Python using the extend() method, which adds all elements of one list to another list.

For example, if you have the lists list1 and list2, you can add all elements of list2 to list1 with the following code:

list1.extend(list2)

Alternatively, you can use the list.append() method to add each element of list2 to list1 one-by-one. For example:

for element in list2:
    list1.append(element)"
Create a loop in Python to print the fibonacci sequence of the given number.n = 10,"def fibonacci(n): 
    a = 0
    b = 1
    print(""Fibonacci Series:"")
    for i in range(n): 
        print(a, end = "" "")
        c = a + b 
        a = b 
        b = c

fibonacci(n)"
"Insert a line of code to change the value of the string ""text"" to ""Hello World"".String text = """";","String text = """";
text = ""Hello World"";"
"Classify the following code as either a single statement, multiple statement, or a control flow statement.if(x > 5):
  print(""x is greater than five"")",Control flow statement
"Update the code to add a class attribute ""var"" with the value ""value"".class MyClass():
    def __init__(self):
        pass","class MyClass():
    var = ""value"" 
    def __init__(self):
        pass"
"Using a try-except statement, write a program to check whether the input is an integer or not.","try: 
    input_val = int(input(""Please enter an integer: ""))
except ValueError:
    print(""The input provided is not an integer."")"
"Write a regular expression that matches all strings that have the letter ""a"" in them.",^.*a.*$
Use the OpenGL API to create a vertex buffer object (VBO).,"GLuint vbo;
glGenBuffers(1, &vbo);
glBindBuffer(GL_ARRAY_BUFFER, vbo);"
"Calculate the sum of the following list of numbers: 10, 12, 14, 16, 18.",The sum of the numbers is 70.
"Create a TypeScript function to find a maximum value from a given array.n: 5, arr: 8, 2, 10, 12, 16","function maxValue(n: number, arr: number[]): number {
 let max = arr[0];
 for (let i = 1; i < n; i++) {
  if (arr[i] > max) max = arr[i];
 }
 return max;
}

// Call the function
let max = maxValue(5, [8,2,10,12,16]);

// Output the result
console.log(""The maximum value is "" + max);"
"Mix the given list of numbers in a random order[5, 1, 7, 3, 2]","import random

my_list = [5, 1, 7, 3, 2]
random.shuffle(my_list)
print(my_list)  #Output: [7, 2, 5, 1, 3]"
"Create a sorting algorithm that sorts an array from lowest to highest numbers using the bubble sort approach.[5, 1, 7, 3, 2]","def bubblesort(arr):
    for i in range(len(arr)-1, 0, -1): 
        for j in range(i):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

my_list = [5, 1, 7, 3, 2]  
bubblesort(my_list) 
print(my_list)
# Output: [1, 2, 3, 5, 7]"
"Create a program that takes in an array of integers as input and returns a sorted array in ascending order.[7, 3, 5, 9, 11, 10]","def sort_ints(arr):
    return sorted(arr)

my_list = [7, 3, 5, 9, 11, 10]
print(sort_ints(my_list))  #Output: [3, 5, 7, 9, 10, 11]"
"Create a function to take in a given array, rotate it by one, so that the last element of the array is now the first element.[1, 2, 3, 4, 5]","def rotate_list(arr):
     length = len(arr) 
     temp = arr[length - 1] 

     for i in range(length-1, 0, -1):
        arr[i] = arr[i-1] 
     arr[0] = temp 
      
     return arr
 
my_list = [1, 2, 3, 4, 5]
print(rotate_list(my_list))  #Output: [5, 1, 2, 3, 4]"
"Create a program which takes a given list and returns a list with only the unique elements.[3, 5, 7, 9, 5, 3, 7]","my_list = [3, 5, 7, 9, 5, 3, 7]
unique_list = list(set(my_list))

print(unique_list)  #Output: [3, 5, 7, 9]"
Design an algorithm in Python for reversing a linked list.,"def reverse(head): 
    prev = None
    curr = head 
    while(curr is not None): 
        next = curr.next
        curr.next = prev 
        prev = curr 
        curr = next
    head = prev 
    return head"
"Create a function that finds the highest peak in an array of elevation data.[9, 10, 12, 15, 7, 8, 11]","def find_peak(arr):
    max_h = arr[0]
    max_i = 0
    # traverse the array
    for i in range(len(arr)):
        if arr[i] > max_h:
            max_h = arr[i]
            max_i = i 
    return max_h, max_i"
"Using the dictionary provided, write a code to print out the values in the dictionary.dict1 = {""A"":""Apple"",""B"":""Banana"",""C"":""Cherry""}","dict1 = {""A"":""Apple"",""B"":""Banana"",""C"":""Cherry""}

for key in dict1:
  print(dict1[key])

# Output 
Apple
Banana
Cherry"
"Write a code to calculate the mean of the list of integers provided.nums = [10, 20, 30, 40, 50]","def calc_mean(nums):
    """"""
    Calculate the mean of a list of integers
    """"""
    if len(nums) == 0:
        return 0
    else:
        sum_of_nums = sum(nums)
        mean = sum_of_nums/len(nums)
        return mean

nums = [10, 20, 30, 40, 50]
mean = calc_mean(nums)
print(mean) # 30"
"Write a code to check whether two numbers are divisible by each other.num1 = 8
num2 = 4","def divisible_by_each_other(num1, num2):
    """"""
    A function to check whether two numbers are divisible by each other
    """"""
    if num1 % num2 == 0 or num2 % num1 == 0:
        return True
    else:
        return False

num1 = 8
num2 = 4

result = divisible_by_each_other(num1, num2)
print(result) # True"
"Create a code to find all common elements in two list and store it in a new list.list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]","def find_common(list1, list2):
    """"""
    Find all common elements in two list and store it in a new list
    """"""
    new_list = []
    for item1 in list1:
        for item2 in list2:
            if item1 == item2:
                new_list.append(item1)
                
    return new_list

list1 = [1, 2, 3, 4, 5]
list2 = [3, 4, 5, 6, 7]

result = find_common(list1, list2)
print(result) # [3, 4, 5]"
"For the given string, write a code to print out the longest word in the string.test_string = ""This is an example sentence.""","def longest_word_in_string(string):
    """"""
    A function to print out the longest word in a given string
    """"""
    words = string.split("" "")
    longest_word =  max(words, key=len)
    return longest_word

test_string = ""This is an example sentence.""

longest = longest_word_in_string(test_string)
print(longest) # example"
"Create a code to generate a list of all numbers between a given start and end number.start = 10
end = 20","def create_list(start, end):
    """"""
    Create a code to generate a list of all numbers between a given start and end number
    """"""
    number_list = []
    for num in range(start, end+1):
        number_list.append(num)
    return number_list

start = 10
end = 20

result = create_list(start, end)
print(result) #[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
Write a function to generate a list of integers from 0 to 10.,"def generate_list():
    return list(range(11))"
"Reimplement the function below, so that it takes in two int arguments and returns their sum instead of using the existing global variable x.x = 4

def add_x(y):
  return x + y","def add_x(x, y):
  return x + y"
"Given a list of integers, write a function that takes the list and returns only the odd numbers in the list.","def extract_odd_numbers(numbers):
    return [x for x in numbers if x % 2 != 0]"
"Rewrite the following function so that it takes in an int argument and returns the factorial of that number.def calc_factorial(x):
    total = 1
    if x == 0:
        return 1
    for num in range(1, x+1):
        total *= num 
    return total","def calc_factorial(x):
    if x == 0:
        return 1
    else: 
        return x * calc_factorial(x - 1)"
Generate a python code program that removes punctuation from a given string.,"def remove_punctuation(s):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    s_without_punct = """"
    for char in s:
        if char not in punctuations:
            s_without_punct = s_without_punct + char
    return s_without_punct"
Generate a program that accepts an integer array and returns its median value,"def median(arr):
    arr.sort()
    if len(arr)%2 != 0:
        return arr[len(arr)//2]
    else:
        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2"
Generate a code that prints out all the perfect squares between 1 and 500.,"for i in range(1,501):
    num = i**2
    if num < 501:
        print(num)"
"Create a function ""distance"" that takes two sets of coordinates in the form of [x1, y1] and [x2, y2] and computes the Euclidean distance between them.","def distance(c1, c2):
    """"""Function to calculate Euclidean distance between two sets of coordinates""""""
    x1, y1 = c1
    x2, y2 = c2
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)"
"Create a function ""getGrade"" to get a grade based on a numeric score.","def getGrade(score):
    if score >= 90:
        return ""A""
    elif score >= 80:
        return ""B""
    elif score >= 70:
        return ""C""
    elif score >= 60:
        return ""D""
    else:
        return ""F"""
"You need to build an API endpoint to support role-based authentication.User roles: 'admin', 'manager', 'employee'","def authentication(role):
    if role == 'admin':
        return 'Admin privileges granted.'
    elif role == 'manager':
        return 'Manager privileges granted.'
    elif role == 'employee':
        return 'Employee privileges granted.'
    else:
        return 'Login failed. Invalid role.'"
"You need to modify an array to delete the third element of the array.array = [1, 2, 3, 4, 5]",del array[2]
You need to complete the following code snippet to display 'hello world' on the console.,"print(""Hello world"")"
"Write code to merge two data dictionaries into one new dictionary.dic1 = {""a"":1, ""b"":2}
dic2 = {""c"":3, ""d"":4}","new_dict = {**dic1, **dic2}"
"Write a function to parse a string and return a set of unique words.string = ""Hello world this is a test string""","def parse(string):
    words = set()
    for word in string.split("" ""):
        words.add(word)
    return words"
You need to collect user input to get the total sum of numbers.,"total = 0
while True:
    num = input(""Please enter a number (enter '0' to finish): "")
    if num == '0':
        break
    total += int(num)

print(""The total sum of numbers is:"", total)"
You need to implement a depth-first search algorithm to search for a value in a given tree.,"def dfs(root, value):
    if root is None:
        return False
    if root.val == value:
        return True

    left = dfs(root.left, value)
    right = dfs(root.right, value)
    return left or right"
"You need to sort the given array in descending order.array = [23, 16, 11, 45, 32]","sorted_array = sorted(array, reverse=True)"
"Generate code to rearrange a given array of integers.[2, 4, 6, 8]","def rearrange_array(arr):
  arr.sort()
  return arr"
Create a unit test for a given function to reverse a list of strings.,"import unittest 

def reverse_strings_list(lst):
  return lst[::-1]

class TestReverseStrings(unittest.TestCase):
  def test_reverse_strings_list(self):
    self.assertEqual(reverse_strings_list([""one"",""two"",""three""]), 
      [""three"", ""two"", ""one""])"
"Compute the sum of 2 numbers using Python code.a = 10
b = 5",a + b = 15
Print a right angled triangle with stars.,"*
**
***"
"You need to make a function that takes in a number and its reverse and checks whether the two numbers are equal or not.x = 65
y = 56","def check_equal(x, y)
{
    if (x == (y * -1)) 
    {
        return true;
    } 
    else 
    {
        return false;
    }
}"
"Combine the two given strings into one string in the given order.string1 = ""hello""
string2 = ""world""","string1 + string2 = ""helloworld"""
Output the first 20 prime numbers,"The first 20 prime numbers are: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71."
"Given a string, write a Python function that will remove all the vowels from it.","def remove_vowels(string):
    vowels = {'a', 'e', 'i', 'o', 'u'}  
    return ''.join(c for c in string if c not in vowels)"
"Create a Python function that takes two arguments, a positive integer and a boolean, and return the word ""yes"" if the boolean is true and the number is even, else it should return the word ""no"".","def check_number(number, condition):
    if condition and number % 2 == 0:
        return ""yes""
    else:
        return ""no"""
Output the factorial of 7,The factorial of 7 is 5040.
"Create a Python function to find the pair of numbers that have the highest product in an array of numbers[1, 2, 4, 8, 10]","def find_max_product(nums):
  max_product = 0
  for i in range(len(nums)):
    for j in range(i+1, len(nums)):
      product = nums[i] * nums[j]
      if product > max_product:
        max_product = product
  return max_product"
Write a scanf for an integer array of size 10.,"#include<stdio.h>
int main()
{
    int a[10];
    for (int i = 0; i < 10; i++) 
        scanf(""%d"", &a[i]);
    return 0;
}"
How would you create a function that takes a list of strings as an argument and returns the total number of characters in all the strings together?,"def count_characters(stringList):
    count = 0
    for string in stringList: 
        count += len(string)
    return count"
"Rewrite the following code to use the ternary operator in Python:

if x > 0:
    result = ""positive""
else:
    result = ""negative""","result = ""positive"" if x > 0 else ""negative"""
"Convert the following deep learning model definition code to use the Keras API.

model = Sequential() 
model.add(Dense(256, activation=""relu"", input_dim=20)) 
model.add(Dense(128, activation=""sigmoid"")) 
model.add(Dense(64, activation=""softmax"")) 
model.add(Dense(1, activation=""linear""))","import keras 

model = keras.Sequential()
model.add(keras.layers.Dense(256, activation=""relu"", input_dim=20))
model.add(keras.layers.Dense(128, activation=""sigmoid""))
model.add(keras.layers.Dense(64, activation=""softmax""))
model.add(keras.layers.Dense(1, activation=""linear""))"
Write a code to perform linear search in an array of integers.,"def linear_search(arr, x):
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1"
"Design a data structure that can be used to store student records with the fields 'name', 'age', 'major', and 'graduation_year'.","A dictionary can be used to store student records. The keys in this dictionary will correspond to the student name and the values will be another dictionary that contains the other fields such as 'age', 'major', and 'graduation_year'."
What type of search algorithm is used to find the shortest path between two points?,The type of search algorithm used to find the shortest path from two points is called Dijkstra's Algorithm.
"Extend the following python code to include a new field 'type' with the value 'dog'.animal = {
 'name': 'Rex',
 'age': 10
}","animal = {
 'name': 'Rex',
 'age': 10,
 'type': 'dog'
}"
"Describe a method for sorting a list of integers using selection sort.list = [3, 6, 8, 9, 5]","def selection_sort(list):
    # Traverse through all array elements 
    for i in range(len(list)): 
      
        # Find the minimum element in remaining  
        # unsorted array 
        min_idx = i 
        for j in range(i+1, len(list)): 
            if list[min_idx] > list[j]: 
                min_idx = j 
          
        # Swap the found minimum element with  
        # the first element         
        list[i], list[min_idx] = list[min_idx], list[i] 
  
# Driver code to test above 
list = [3, 6, 8, 9, 5] 
selection_sort(list) 
print (""Sorted array"") 
for i in range(len(list)): 
    print(""%d"" %list[i])"
"Develop a function in Python which prints the name of the day (eg. ""Monday"") given any date as an argument.Date: October 13th, 2020","def get_day(date):
    days = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]
    day_index = date.weekday()
    return days[day_index]

print(get_day(date(2020, 10, 13)))"
"Modify the existing code to enable user input so the user can enter their own number and have the average of those two numbers returned.def find_average(a, b):
    return (a + b) / 2","def find_average():
    a = int(input(""Enter first number: ""))
    b = int(input(""Enter second number: ""))
    return (a + b) / 2"
Develop an R script to print the squares of the first 10 natural numbers.,"list=1:10
list_squared = list^2
print(list_squared)"
"Write a code to add two matrices of any size.[[1, 2, 3],
 [4, 5, 6]]
+
[[7, 8, 9],
 [10, 11, 12]]","def matrix_addition(mat1, mat2):
    # check whether two matrices are of same size
    if(len(mat1) != len(mat2)):
        return 'Not possible to add matrices'
    else: 
        # adding elements of mat1 and mat2
        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]
        for i in range(len(mat1)):
            for j in range(len(mat1[0])):
                result[i][j] = mat1[i][j] + mat2[i][j]
    return result

# initializing two matrices
mat1 = [[1, 2, 3], [4, 5, 6]]
mat2 = [[7, 8, 9], [10, 11, 12]]

print(matrix_addition(mat1, mat2))"
Create a function to find the area of a circle by taking the radius as an argument.,"def area_of_circle(radius):
    """"""
    This function takes a radius as input and returns the area of the circle.

    Parameters:
    radius (float): The radius of the circle.

    Returns:
    float: The area of the circle.
    """"""
    return 3.14 * (radius ** 2)"
Write a code to train a sentiment classification model on the IMDB sentiment analysis dataset.,"# import libraries 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# load the data
imdb = pd.read_csv('imdb.csv')

# Create feature vectors for training
vectorizer = CountVectorizer() 
X = vectorizer.fit_transform(imdb.TEXT)
y = imdb.SENTIMENT

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)
 
# Train a logistic regression classifier
lr = LogisticRegression(solver='lbfgs').fit(X_train, y_train)

# Evaluate the model performance
accuracy = lr.score(X_test, y_test)
print('Accuracy of sentiment classification model:', accuracy)"
Write a code to print out all numbers between 1 and n divisible by 3 and 5 without using a loop.,"def print_numbers(n): 
    x = list(range(1,n+1)) 
    print([i for i in x if i % 3 == 0 and i % 5 == 0]) 
 
# Driver code 
n = 15
print_numbers(n)"
Create a function that takes a string and an integer as input and returns the string repeated n times.,"def repeat_string(string, n):
    """"""
    This function takes a string and an integer as input and returns the 
    string repeated n times.

    Parameters:
    string (string): The string that needs to be repeated.
    n (int): The number of times the string needs to be repeated.

    Returns:
    string: The repeated string
    """"""
    return string * n"
"Add the following line to the top of this Python code to make it syntactically correct.begin
def test_it();
    print(""This is a test"")","# Add the following line to the top of this Python code to make it syntactically correct.
def test_it():
    print(""This is a test"")"
"Create a function that shifts an array by k positions to the right.arr = [1, 2, 3, 4, 5]
k = 3","def shift_array(arr, k): 
    k %= len(arr)
    return arr[-k:] + arr[:-k]"
"Create a function that takes three parameters, a start number, an end number, and a step. It should return a list containing all the numbers between the start and end numbers in steps of the given size.start = 0
end = 10
step = 2","def create_list(start, end, step): 
    list = [] 
    while start < end: 
        list.append(start) 
        start += step 
    return list"
"Write a function to add one to every element in an array of integers.arr = [1,3,5,7]","def add_one(arr): 
    for i in range(len(arr)): 
        arr[i] += 1 
    return arr"
"You are requested to implement a function that takes an array of integers and returns the sum of the array.int[] array = {1, 2, 3, 4, 5};","public static int getArraySum(int[] array) {
    int total = 0;
    for (int element : array) {
        total += element;
    }
    return total;
}"
"Create a function to split a string into substrings based on a given separator.string = ""apple,banana,cherry""","def split_string(string, separator):
    return string.split(separator)"
Suggest a way to format a date string in Lua.,"In Lua, date strings can be formatted using os.date(). For example, the following code will give the date string in the format ""YYYY-MM-DD"":

dateString = os.date(""%Y-%m-%d"")"
"Create an array of 5 Strings: ""Apple"", ""Banana"", ""Orange"", ""Lemon"" and ""Grape"".","my_array = [""Apple"", ""Banana"", ""Orange"", ""Lemon"", ""Grape""]"
"Convert the following character stream into a number.char_stream = “8kk573""",num = 8573
Write a Python function to create a matrix of given size filled with zeros.3,"def create_matrix(size):
    matrix = []
    for i in range(size):
        row = []
        for j in range(size):
            row.append(0)
        matrix.append(row)
    return matrix"
Write a function that expects a string as a parameter and returns all the words in the string with the length greater than threeThis is a test string,"def greater_than_three(string):
    words = string.split("" "")
    result = []
    for word in words:
        if len(word) > 3:
            result.append(word)
    return result"
"Write a code to get the current weather information for a given city.city = ""New York""","import requests
import json

def get_weather_information(city):
    url = 'http://api.openweathermap.org/data/2.5/weather?q={},<APIKEY>'.format(city)

    response = requests.get(url)
    data = json.loads(response.text)
    return data

if __name__ == '__main__':
    print(get_weather_information(""New York""))"
"Write a Python program to find the group of three numbers in a list that has the greatest product.list = [2, 3, -2, -3, 4, -5]","def find_greatest_product(lst):
    products = []
    for i in range(len(lst)-2):
        for j in range(i+1, len(lst)-1):
            for k in range(j+1, len(lst)):
                products.append(lst[i] * lst[j] * lst[k])
    return max(products)"
"Edit the following code to generate a boolean array with True for odd numbers and False for even numbersa = [1, 2, 3, 4, 5]","import numpy as np

a = [1, 2, 3, 4, 5]
b = np.array([i % 2 for i in a])"
"Write a code to generate a random password containing at least one symbol, one number, one lowercase letter and one uppercase letter","import string
import random

def generate_password(length):
    symbols = string.punctuation
    numbers = string.digits
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    
    characters = symbols + numbers + lowercase + uppercase
    password = random.choice(symbols) + random.choice(numbers) + random.choice(lowercase) + random.choice(uppercase)
    
    for _ in range(length-4):
        password += random.choice(characters)
        
    return password"
"Suggest a code to do the following task: Input a string and output the count of all the characters occuring in the string.String: ""Hello World""","string = ""Hello World""

def count_characters(string):
    count_dict = {}
    for char in string:
        if char not in count_dict:
            count_dict[char] = 1
        else:
            count_dict[char] += 1
    return count_dict

print(count_characters(string))"
"Suggest a code to extract the first and last occuring characters from a string.String: ""Hello World!""","string = ""Hello World!""

first_char = string[0]
last_char = string[-1]

print(first_char, last_char)"
"Suggest a code to print the first three positions in an array.Array = [1,2,3,4,5]","arr = [1,2,3,4,5]

print(arr[0:3])"
"Create a loop to iterate through all the values in the following list.List: [2,7,16,2,9]","list = [2,7,16,2,9]

for val in list:
    print(val)"
"Implement a function to concatenate two arrays.Array 1: [1,2,3] 
Array 2: [5,6]","def concatenate_arrays(arr1, arr2):
    new_array = arr1 + arr2
    return new_array

arr1 = [1,2,3]
arr2 = [5,6]
print(concatenate_arrays(arr1, arr2))"
Output the following string after applying a base64 encoding.String: Hello World!,SGVsbG8gV29ybGQh
Check if the following string contains any uppercase characters and output the result.String: hello world!,False
Output the name of the variable type in the following expression.Expression: 5 + 6j,complex
"Output the output of the following python script.Python Script:

x = 5
y = 7

def add(x, y):
    return x + y

add(x, y)",12
Write a code to calculate the gravitational force between two objectsTwo objects with a mass of 3kg and 10kg are separated by 10m.,"def gravitational_force(m1, m2, r):
    G = 6.67 * 10**-11
    f = G*(m1*m2/r**2)
    return f
    
if __name__ == '__main__':
    m1 = 3
    m2 = 10
    r = 10
    force = gravitational_force(m1, m2, r)
    print(force)"
Generate an algorithm that creates a Fibonacci sequence,"def Fibonacci_sequence(length): 
    fib_seq = [0, 1]
    if length == 1:
        return [0]
    elif length == 2:
        return fib_seq
    else:
        for i in range(2, length):
            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])
        return fib_seq

if __name__ == '__main__':
    length = 7
    print(Fibonacci_sequence(length))"
Generate a code to identify duplicate elements in a list,"def find_duplicates(lst):
    duplicate_elements = []
    for element in lst:
        if lst.count(element) > 1 and element not in duplicate_elements:
            duplicate_elements.append(element)
    return duplicate_elements

if __name__ == '__main__':
    lst = [1, 2, 3, 4, 5, 6, 1]
    print(find_duplicates(lst))"
"Write an Angular directive to make a text field required.<input type=""text"" name=""name"">","<input type=""text"" name=""name"" required>"
"Add a tag 'img' in the following xml document.<?xml version=""1.0"" encoding=""UTF-8""?>
<information>
	<property>
		<name>Adobe</name>
		<type>Software</type>
	</property>
</information>","<?xml version=""1.0"" encoding=""UTF-8""?>
<information>
    <img />
	<property>
		<name>Adobe</name>
		<type>Software</type>
	</property>
</information>"
"Format the following string according to the specified condition.String: ""first_name,last_name,age""
Condition: each word should have its first letter capitalized","""First_Name,Last_Name,Age"""
Design a data structure to store a list of numbers and the corresponding and their frequencies.,"A HashMap can be used to store the data structure. It uses the numbers as the key, and their frequency could be the value associated with the key."
"Insert a code line in the existing program to fix a syntax error.int main() 
{
    printf(""Hello World!);
}","int main() 
{
    printf(""Hello World!""); // added missing closing quotation mark
}"
Generate a regex for email validation,^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
"Add a blank line between the two following lines of code.printf(""Hello World!"");
printf(""Hello Python!"");","printf(""Hello World!"");

printf(""Hello Python!"");"
Create a class called 'Person' which has a constructor which creates a person with given name and age.,"class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
Produce a program to print out the frequency of characters in a word.Python,"def character_frequency(word):
    freq_dict = {}
    for char in word:
        if char in freq_dict:
            freq_dict[char] += 1
        else:
            freq_dict[char] = 1
    return freq_dict

word = 'Python'
print(character_frequency(word))
# {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}"
Form a regex expression which determines if a binary number is valid.,"import re

binary_regex = r'^[01]+$'"
"Re-write the following method to use a single loop instead of two.def sum_special(arr):
    temp = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            temp += arr[i] * arr[j]
    return temp","def sum_special(arr):
    temp = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            temp += arr[i] * arr[j]
    return temp"
Suggest a Python code to create a list containing the first five positive numbers.,"numbers = []
for i in range(1, 6):
 numbers.append(i)
print(numbers)"
Suggest a Python code to filter a list of numbers so that all even numbers are removed.,"numbers = [1, 2, 3, 4, 5, 6, 7, 8]
new_list = [num for num in numbers if num % 2 != 0]
print(new_list)"
"Suggest a Python code to match the substring ""is"" in the given string ""This is a programming task"".","import re

string = ""This is a programming task""

pattern = r""is""

if re.search(pattern, string):
  print(""Match found"")
else:
  print(""No match found"")"
Generate an array of random integers between 1 and 50 inclusive.,"let randomIntegersArray = [];
for (let i = 0; i < 50; i++) {
    randomIntegersArray.push(Math.floor(Math.random() * (50 - 1 + 1)) + 1);
}"
"Create a function that takes in a string and returns the string without its last two letters.""Hello World!""","def remove_last_two(s):
    return s[:-2]"
"Write a code to find the longest consecutive sequence inside of a given list of numbers.[1, 3, 5, 7, 8, 2, 4, 9]","def find_longest_seq(arr):
    max_len = 0
    curr_seq = []
    for num in arr:
        if not curr_seq or num == curr_seq[-1] + 1:
            curr_seq.append(num)
            max_len = max(max_len, len(curr_seq))
        else: 
            curr_seq = [num]
    return max_len"
"Write a Python class for a Rectangle object with two instance attributes, length and width.","class Rectangle:
    def __init__(self, length, width):
        self.length = length 
        self.width = width"
Generate a random list containing 10 elements in the range of 0-20,"import random 

def generate_list(): 
    random_list = []
    for i in range(10): 
        random_list.append(random.randint(0, 20)) 
  
    return random_list"
"Create a sorting algorithm to sort a given list of numbers from lowest to highest.[1, 4, 3, 7, 8, 10]","def sort_list(arr):
    for i in range(len(arr) - 1):
        min_index = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        if min_index != i:
            arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr"
Check if a given string contains all the alphabets.A quick brown fox jumps over the lazy dog,"bool check = true;
string s = ""A quick brown fox jumps over the lazy dog"";
string alphabet = ""abcdefghijklmnopqrstuvwxyz"";

for (int i = 0; i < alphabet.length(); i++) {
    if (!s.contains(alphabet.charAt(i)+"""")) {
        check = false;
        break;
    }
}

if (check) {
    System.out.println(""The given string contains all alphabets."");
} else {
    System.out.println(""The given string does not contain all alphabets."");
}"
"Design a query in MongoDB to select documents based on a particular value in an array.DB student {
    id INT,
    name VARCHAR(100),
    marks_arr INT[],
    total INT
}","db.students.find({
    marks_arr : { $in : [100] }
})"
Find a tree traversal algorithm in Python.,"def tree_traversal(root): 
    if root is None: 
        return
  
    # First print the data of node 
    print(root.data) 
  
    # Then recur on left child 
    tree_traversal(root.left) 
  
    # Finally recur on right child 
    tree_traversal(root.right)"
"Construct an if/else statement in Python to print ""Welcome new user"" if the value of variable ""userID"" is greater than 0.userID = 5","if userID > 0:
    print(""Welcome new user"")
else:
    print(""User ID is invalid"")"
How does Python handle data types?,"Python uses dynamic typing, meaning that the type of data in a variable is not explicitly declared, instead it is automatically determined by the interpreter when a value is assigned to a variable. This allows for data types to be changed throughout the course of a program."
"Design a function to calculate the standard deviation of a set of data[2, 4, 1, 6, 8]","public static double calculateStandardDeviation(List<Integer> list) {
    double mean = computeMean(list);
    double temp = 0; 
    for(double num: list) 
        temp += (num-mean)*(num-mean); 
    double variance = temp/list.size();
    double standardDeviation = Math.sqrt(variance); 
    return standardDeviation; 
}"
Write a function in Python that takes a number n as its parameter and returns the sum of the squares of the first n natural numbers,"def sum_of_squares(n):
    result = 0
    for i in range(1, n + 1):
        result += i**2
    return result"
Construct a regex expression to capture words starting with 'cat',/^cat\w+/
"Write a function that takes an array of numbers and returns an array whose elements are the product of all the elements except the element at the current index.arr = [2, 3, 4, 5]","def get_products(arr):
    left = [1]
    right = [1]
    ans = []

    # Traverse from left to right
    for i in range(1, len(arr)):
        left.append(arr[i-1] * left[i-1])

    # Traverse from right to left
    for i in reversed(range(len(arr)-1)):
        right.insert(0, arr[i+1] * right[0])

    # Compute the product of all elements except itself
    for i in range(len(arr)):
        ans.append(left[i] * right[i])

    return ans

get_products(arr) # returns [20, 15, 12, 10]"
"You are given a string and you need to write a function that splits the string at the mid point and switch the order of the two parts.str = ""Hello World!""","function splitAndSwitch(str) {
    let mid = Math.floor(str.length / 2);
    let firstHalf = str.substr(0, mid);
    let secondHalf = str.substr(mid);
    
    return secondHalf + firstHalf;
}

console.log(splitAndSwitch(str)); // returns ""World!Hello"""
"Extract the extension from a given filename string.filename = ""input.txt""","filename = ""input.txt""
ext = filename.split('.')[-1]
print(ext)
#output: 'txt'"
"Print the running total of numbers in the following list.numbers = [2, 3, 4, 7]","numbers = [2, 3, 4, 7]

total = 0
for n in numbers:
    total += n
    print(total)
    
#output:
2
5
9
16"
List the type of loops in Python.,"In Python, there are two types of loops - for loop and while loop. A for loop is used to iterate over a sequence (list, tuple, string). A while loop is used to iterate until a condition is met."
"Given a sentence, write the code to extract the third word from the sentence.sentence = ""I am a coder""","sentence = ""I am a coder""

words = sentence.split(' ')
third_word = words[2]
print(third_word)
#output: 'a'"
"Write the code to sort a dictionary by values in Python.my_dict = {
    ""a"": 10,
    ""b"": 5,
    ""c"": 15
}","my_dict = {
    ""a"": 10,
    ""b"": 5,
    ""c"": 15
}

sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}

print(sorted_dict)
#output: {""b"": 5, ""a"": 10, ""c"": 15}"
"Use a for loop to sum the numbers in the list [4, 6, 5, 8].","sum = 0
for num in [4,6,5,8]: 
sum = sum + num 
  
print(""The sum is:"",sum)"
"Modify the given dictionary such that any keys that start with the letter 'b' are removed.my_dict = {
 ""ant"": ""animals"",
 ""ball"": ""toy"",
 ""cat"": ""pets""
}","my_dict = {
 ""ant"": ""animals"",
 ""cat"": ""pets""
}"
"Given an array of numbers, provide a nested for loop to calculate the sum of elements in the array.","sum = 0
for row in arr:
 for el in row: 
  sum += el 

print(""The sum of elements in the array is:"",sum)"
"Delete the element from the given array at index 4.arr = [1, 2, 3, 4, 5, 6]","arr = [1, 2, 3, 4, 5, 6]

# delete the element at index 4 
del arr[4]

# print the array
print(arr)"
Develop a program that prints all the prime numbers between 0 and n.,"def prime_numbers(n): 
    primes = [] 
    for num in range(2, n+1): 
        is_prime = True
        for i in range(2, num): 
            if (num % i == 0): 
                is_prime = False
        if is_prime: 
            primes.append(num) 
    return primes"
Generate code to create a Numpy array with 3 rows and 4 columns.,"import numpy as np 
arr = np.array([[0, 1, 2, 3], 
                [4, 5, 6, 7],
                [8, 9, 10, 11]])"
Create a function in Python which takes a string and reverses it.,"def reverse_string(my_string):
    return my_string[::-1]"
"Calculate the result of XORing two binary numbers.1010, 0101",The result of XORing 1010 and 0101 is 1111.
Construct a while loop in Python which runs until user input is equal to 5.,"userInput = 0
while userInput != 5:
    userInput = int(input('Enter a number: '))"
Write a Python script to send an email using the smtplib module.,"import smtplib

sender = 'from@example.com'
recipients = ['to@example.com']

message = """"""Subject: Test Email

This is a test email message.
""""""

with smtplib.SMTP('localhost') as server:
  server.sendmail(sender, recipients, message)"
Write a Python function that takes in one argument and prints out the Fibonacci number for that argument.,"def Fibonacci(x): 
    if x == 0: 
        return 0
    elif x == 1: 
        return 1
    else: 
        return Fibonacci(x-1)+Fibonacci(x-2) 

if __name__ == '__main__':
    print(Fibonacci(5))  # Output: 5"
What is the correct syntax to create a dictionary in Python?,"my_dict = {'key1':'value1','key2':'value2'}"
Create a basic GUI with a button in Python.,"from tkinter import *

# create GUI window
root = Tk()

# create the button
btn = Button(root,text=""Click me!"",width=10)

# add the button to the window
btn.pack()

# enter the mainloop
root.mainloop()"
"Modify the code to account for a list containing only one item.def sum_list(list):
    result=0
    for number in list:
        result+=number
    return result","def sum_list(list):
    if len(list) == 0:
        return 0
    elif len(list) == 1:
        return list[0]
    else:
        result=0
        for number in list:
            result+=number
        return result"
"Identify the vulnerabilities in the given programdef transferMoney(username,amount):
    #read from db their current balance
    curBalance=readDB(""SELECT bankBalance from users where username="" + username)
    #update the current balance
    curBalance+=amount
    #write to the db with the new balance
    writeDB(""UPDATE users SET bankBalance = "" + curBalance + "" where username="" + username)",The code is vulnerable to SQL injection when inserting username into the database queries as the parameter is not sanitized properly. It is also vulnerable to Race Condition attack if two threads try to update the same user's balance simultaneously. It is also vulnerable to Integer Overflow attack if the amount is greater than the maximum value allowed.
Output the 5th Fibonacci number.,5
"Write a Python code that turns the given input into a list of dictionaries.['John,21', 'Jane,27', 'Jack,38']","[{'name': 'John', 'age': '21'},
 {'name': 'Jane', 'age': '27'},
 {'name': 'Jack', 'age': '38'}]"
"Using the given Python class, write a constructor and a method to display the details.class Customer:","class Customer:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address
   
    def display_details(self):
        print(f""Name: {self.name}\nAge: {self.age}\nAddress: {self.address}"")"
Write a Haskell code that calculates the sum of all the integers between two numbers.,"sumInts :: Int -> Int -> Int
sumInts a b 
  | a == b = b
  | otherwise = a + sumInts (a+1) b"
"Write an algorithm that prints out all elements of an array in reverse order.[1,2,3,4,5]","// Algorithm to print elements of array in reverse order

void reverseArray(int arr[], int n) 
{ 
	for (int i = n - 1; i >= 0; i--) 
		System.out.print(arr[i] + "" ""); 
}"
"Write a function that, given a binary tree, prints all of its element ""level by level"".1
    /   \
   2     3
  /  \  /  \
 4    5 6   7","// Code to print elements of a binary tree by level

// A utility function to print all nodes at a given level 
void printGivenLevel (struct node* root , int level) 
{ 
	if (root == NULL) 
		return; 
	if (level == 1) 
		printf(""%d "", root->data); 
	else if (level > 1) 
	{ 
		printGivenLevel(root->left, level-1); 
		printGivenLevel(root->right, level-1); 
	} 
} 
  
// A function to do level order traversal of a tree 
void printLevelOrder(struct node* root) 
{ 
	int h = height(root); 
	int i; 
	for (i=1; i<=h; i++) 
		printGivenLevel(root, i); 
}"
"Write an algorithm that finds the longest palindromic substring of a given input string.""forgeeksskeegfor""","// Algorithm to find the longest palindromic substring

int longestPalindromicSubstr(char* str) 
{
	// Variables to store the start and the end of the palindromic substring
	int maxLen = 1;
	int start = 0;
	int len = strlen(str);
	// Table to store boolean value at the index
	// dp[i][j] stores whether the substring str[i..j] is palindrome or not
	int dp[len][len];
	
	// Initialize all entries to False
	memset(dp, 0, sizeof(dp));
	
	// All characters of length 1 are palindrome
	for (int i = 0; i < len; i++) 
		dp[i][i] = true;
	
	// Check for substring of length 2
	for (int i = 0; i < len-1; i++) 
	{
		if (str[i] == str[i+1]) 
		{
			dp[i][i+1] = true;
			start = i;
			maxLen = 2;
		}
	}
	
	// Check for lengths greater than 2 
	for (int k = 3; k <= len; k++) 
	{ 
		// looping until len-k+1, so that you can get ith character
		for (int i = 0; i < len-k+1; i++) 
		{ 
			int j = i + k - 1; 
			if (dp[i+1][j-1] && str[i] == str[j]) 
			{ 
				dp[i][j] = true; 

				if (k > maxLen) 
				{ 
					start = i; 
					maxLen = k; 
				} 
			} 
		} 
	} 
	
	return maxLen; 
}"
"Create a constructor for the following class in Python.class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age","class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age"
"Identify the bugs in the following python code and fix them.def multiply_dicts(d1, d2):
    for key in d1:
        d1[key] = d2[d1[key]]","def multiply_dicts(d1, d2):
    for key in d1:
        if key in d2:
            d1[key] = d2[key]"
Provide a solution for a ``while`` loop that runs for 10 iterations and prints out its current counter at each iteration.,"counter = 0
while counter < 10:
    print(""Current counter is: "" + str(counter))
    counter += 1"
"How would you modify the following code to add a time delay of 1 second between each iteration of the loop?for i in range(10):
    print(i)","import time

for i in range(10):
    print(i)
    time.sleep(1)"
"In the following code, identify the bug and suggest a fix.def add_two_strings(string1, string2):
    return string1 + string2","def add_two_strings(string1, string2):
    """"""A function to add two strings together and return the concatenated result.""""""
    if isinstance(string1, str) and isinstance(string2, str):
        return string1 + string2
    else:
        raise TypeError(""Both arguments must be strings"")"
Create a class in Python for performing basic math calculations,"class MathCalculations:
    """"""
    Class to perform math calculations 
    """"""

    def __init__(self):
        pass

    def add(self, num1, num2):
        """"""
        Add two numbers
        """"""
        return num1 + num2

    def subtract(self, num1, num2):
        """"""
        Subtract two numbers
        """"""
        return num1 - num2

    def multiply(self, num1, num2):
        """"""
        Multiply two numbers
        """"""
        return num1 * num2

    def divide(self, num1, num2):
        """"""
        Divide two numbers
        """"""
        return num1 / num2"
How to create a loop in Python which will iterate over a list?,"#Iterate over a list 
list = [1, 2, 3, 4, 5]

for item in list:
    print(item)"
How to compare two lists in Python?,"def compare_lists(l1, l2):
    if len(l1) != len(l2):
        return False

    for i in range(len(l1)):
        if l1[i] != l2[i]:
            return False

    return True"
Design a function in Python to calculate the area of an equilateral triangle.,"def triangle_area(side):
 return side * (side ** 0.5) / 2"
"Create an array with elements {4, 78, 32, 6}.","int arr[] = {4, 78, 32, 6};"
What do you need to do in order to make an HTTP request using cURL?,"To make an HTTP request using cURL, you need to install and set up cURL, select the correct HTTP method, provide a URL, and set any necessary options. You can then execute the cURL request by calling curl_exec() and get the response via curl_getinfo() and curl_exec()."
"Break the following string into two pieces.""HelloWorld""","String s1 = ""Hello"";
String s2 = ""World"";"
Which type of loops can be used in Python?,"Python supports for loops, while loops, and nested loops. Additionally, the loop statement can be used to construct an infinite loop."
"Edit the following code to add an item to the 'fruits' list.fruits = [""apple"", ""banana"", ""orange""]","fruits = [""apple"", ""banana"", ""orange""]
fruits.push(""mango"");"
Create a class named ‘Vehicles’ with attributes color and price.,"class Vehicles:
   def __init__(self, color, price):
        self.color = color
        self.price = price"
Create a for loop that prints the numbers in the range of 9 to 25,"for i in range(9, 26):
    print(i)"
Create a function ‘fibonacci’ which takes an argument ‘n’ and prints the Fibonacci series up to the nth term.,"def fibonacci(n):
  a = 0
  b = 1
  if n < 0:
    print(""Incorrect input"")
  elif n == 0:
    return a
  elif n == 1:
    return b
  else:
     for i in range(2,n):
       c = a + b
       a = b
       b = c
     return b"
"Implement an efficient algorithm for reversing a sentence in C.""This is a sentence.""","#include<stdio.h>
#include<string.h>

void reverse_sentence(char *word) 
{ 
    int k; 
    char *c, s[100]; 
    c = word; 
    k = strlen(word); 
  
    int i = k - 1, j = 0; 
    while (i >= 0) { 
        while (i >= 0 && c[i] != ' ') { 
           s[j++] = c[i--]; 
        } 
        s[j++] = ' '; 
  
        while (i >= 0 && c[i] == ' ') 
            i--; 
    } 
  
    s[j] = '\0'; 
    printf(""%s\n"", s); 
} 

int main() 
{ 
   char str[] = ""This is a sentence.""; 
   reverse_sentence(str); 
   return 0; 
}"
"Find the maximum pair sum of four integers in an array.[2, 10, -4, 3, 14, 8]","public class MaximumPairSum { 

    static int findMaximumPairSum(int arr[]) { 
        int max1 = Integer.MIN_VALUE; 
        int max2 = Integer.MIN_VALUE; 
        int max3 = Integer.MIN_VALUE; 
        int max4 = Integer.MIN_VALUE; 

        for (int i = 0; i < arr.length; i++) { 
 
            if (arr[i] > max1) { 
 
                max4 = max3; 
                max3 = max2; 
                max2 = max1; 
                max1 = arr[i]; 
            } 

            else if (arr[i] > max2) { 
                max4 = max3; 
                max3 = max2; 
                max2 = arr[i]; 
            } 

            else if (arr[i] > max3) { 
                max4 = max3; 
                max3 = arr[i]; 
            } 

            else if (arr[i] > max4) 
                max4 = arr[i]; 
        } 
        return max1 + max2 + max3 + max4; 
    } 
 
    public static void main(String[] args) 
    { 
        int arr[] = { 2, 10, -4, 3, 14, 8 }; 
        System.out.println(findMaximumPairSum(arr)); 
    } 
}"
"Given a list of numbers, write a function to return a list containing the cumulative sum of all elements in the input list.[1, 2, 3, 4]","def cumulative_sum(lst):
    res = []
    sums = 0
    for num in lst:
        sums += num
        res.append(sums)
    return res

# Example
cumulative_sum([1, 2, 3, 4]) # Output: [1, 3, 6, 10]"
"Given a linked list, write a function to reverse it.","def reverse_linked_list(head):
    if head is None or head.next is None:
        return head

    # Get second node
    current = head.next
    # Set first node as tail
    head.next = None
    # Set next of second node as third node
    next = current.next

    while(next):
        # reverse pointer
        current.next = head
        # Move head pointer one position forward
        head = current
        # Move current pointer one position forward
        current = next
        # Move next pointer one position forward
        next = current.next
    # Append last node
    current.next = head
    return current"
"Compile and Run this program in Python.a = 10
b = 5

print(""The sum of a and b is "", a + b)",The sum of a and b is 15
"Change this program to print the difference of a and ba = 10
b = 5

print(""The sum of a and b is "", a + b)","print(""The difference of a and b is "", a - b)"
Segregate the negative numbers to the left side and positive numbers to the right side of an array.,"def segregate_numbers(array): 
    j = 0
    for i in range(len(array)): 
        if (array[i] <= 0): 
            array[i], array[j] = array[j], array[i] 
            j+=1
    return array"
"Edit this program to print the product of two numbers.a = 10
b = 5

print(""The sum of a and b is "", a + b)","a = 10
b = 5

print(""The product of a and b is "", a * b)"
Identify the wrong statement.,Python is a compiled language.  //Wrong statement. Python is an interpreted language.
"Given a pair of same-length strings, identify character matches in the same position.str1 = 'Hello'
str2 = 'World'","def character_match(str1, str2):
  match_list = []
  for i in range(len(str1)):
    if str1[i] == str2[i]:
      match_list.append(str1[i])
  return match_list"
Write a function to traverse a dictionary recursively and print all the keys.,"def printAllKeys(dictionary): 
    if type(dictionary) == dict: 
        for key in dictionary: 
            print(key) 
            printAllKeys(dictionary[key])"
Write a function to compress a string by counting the characters.,"def compressString(s): 
	comp_string = """"
	count = 1
	for i in range(len(s) - 1): 
		if(s[i] == s[i+1]): 
			count+= 1
		else: 
			comp_string += s[i] + str(count) 
			count = 1
	comp_string += s[i] + str(count) 
	return comp_string"
"Write a regex expression to validate a username containing only letters, numbers, underscores, and hyphens.",/^[a-zA-Z0-9_\-]+$/
"Change the following program so that it prints the squares of numbers from 0 to 10.for i in range(10):
 print(i)","for i in range(11):
 print(i*i)"
Create a linear regression model using TensorFlow.,"import tensorflow as tf

# Create array of feature vectors
X = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])

# Create array of labels
y = tf.constant([[10.0], ["
Create a string of length 100 using a Python loop and save it into a variable named 'string_100'.,"string_100 = ''
for i in range(100):
 string_100 += 'x'"
Describe an algorithm for finding the maximum value in a given list of integers.,"A simple algorithm to find the maximum value in a given list of integers is to start with the first element and compare it with the subsequent elements. If a larger element is found, update the maximum value and continue comparing. At the end of the loop, the maximum value will hold the maximum value from the given list."
"Using the given snippet of code, create a compiler to check if a given string is valid Python code.","import ast 
def check_syntax(code): 
  try: 
    ast.parse(code) 
  except SyntaxError: 
    return False
  else: 
    return True"
Generate a pandas DataFrame with three columns containing random integer numbers between 0 and 10.,"import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, 11, size=(3, 3)), 
                  columns=['Column1', 'Column2', 'Column3'])"
Write an algorithm in pseudocode to reverse the order of numbers in a given array.,"Function ReverseOrder(A):
  n = A.length
  For i = 1 to n/2:
    temp = A[i]
    A[i] = A[n - i]
    A[n - i] = temp
  End
End"
Construct a matrix in Python containing 5 rows and 4 columns of random floating point numbers between 0 and 1.,"import numpy as np

matrix = np.random.uniform(0,1, (5,4))"
"Given a list of strings and an input string, find the index of the input string in the list.list = [""red"", ""blue"", ""green"", ""yellow""]
string = ""green""","def find_string(list, target):
    for index, value in enumerate(list):
        if value == target:
            return index

list = [""red"", ""blue"", ""green"", ""yellow""]
string = ""green""
print(find_string(list, string)) # Output 2"
"Modify the given Python code to remove any punctuations from the given string.string = ""Hello, how are you?""","import string

def remove_punctuation(string):
    for punct in string.punctuation:
        string = string.replace(punct, '')
    return string

string = ""Hello, how are you?""
print(remove_punctuation(string)) # output 'Hello how are you'"
"Edit the given Python code to remove duplicate items from the given list.my_list = [1, 2, 2, 3, 4, 5, 4]","def remove_duplicate(my_list):
    return list(set(my_list))

my_list = [1, 2, 2, 3, 4, 5, 4]
print(remove_duplicate(my_list)) # Output [1, 2, 3, 4, 5]"
Evaluate the following expression: 11 + 3 / 4.,11.75
Compute the modulus of 3 and 4.,3
"Calculate the average score of the following list of numbers.[2, 4, 6, 8, 10]",Average score: 6.
Re-write the following sentence by changing the verb tense to future simple.She wrote a poem.,She will write a poem.
Create a list of five randomly generated integers from 1 to 10 in Python.,"import random

random_list = [random.randint(1, 10) for int_num in range(5)]

print(random_list)"
"Define a function to remove all the even numbers from a list in Python.sample_list = [1,2,3,4,5,6,7,8]","sample_list = [1,2,3,4,5,6,7,8]

def remove_even_numbers(lst):
    for num in lst:
        if num % 2 == 0:
            lst.remove(num)
    return lst

print(remove_even_numbers(sample_list))"
Describe the Dynamic Programming approach used to solve the Knapsack problem.,"Dynamic Programming (DP) is an algorithmic technique used to solve optimization problems. Specifically, the Knapsack problem is a popular problem which is solved using the DP approach. The idea is to solve the problem by breaking it into smaller sub-problems and storing the results of each subproblem in a table. This table is referred to as the DP table, and is used to solve larger problems more efficiently. The DP approach is also used to optimally solve problems that have overlapping subproblems; this technique is known as memoization. This method of solving the Knapsack problem involves constructing a two dimensional array of items and weights, and then iterating through each row and column in the table to find the optimal solution."
Write a function which takes a string as an argument and returns the same string with the first letter capitalized.'hello world',"def capitalize_string(string):
  return string[0].upper() + string[1:]"
"Design an algorithm to find the two numbers in an array that have the largest sum.[1,3,4,6,7]","# Finds two numbers in an array that have the largest sum
def getMaxSum(arr):
    # Initialize the sum to the maximum possible value
	maxSum = -float('inf')
	
	# Iterate over all elements of the array
	for i in range(len(arr)):
		for j in range(i+1, len(arr)):
			# Compare the current sum to the maximum sum
			maxSum = max(maxSum, arr[i] + arr[j])

    # Return the largest sum
	return maxSum"
"Generate a function which takes a two-dimensional array of integers as an argument and prints out the elements in spiral order.[[1,2,3],
[4,5,6],
[7,8,9]]","def printSpiral(arr):
    # track the current row and columns
    cur_row = 0
    cur_col = 0
    
    # track the starting and ending columns of the row and rows of the column
    start_col = 0
    end_col = len(arr[0]) - 1
    start_row = 0
    end_row = len(arr) - 1
    
    while start_col <= end_col and start_row <= end_row:
        # move right
        for i in range(start_col, end_col + 1):
            print(arr[cur_row][i])
        start_row += 1
        cur_row = start_row
        
        # move down
        for i in range(start_row, end_row + 1):
            print(arr[i][end_col])
        end_col -= 1
        cur_col = end_col
        
        # move left
        for i in range(end_col, start_col - 1, -1):
            print(arr[end_row][i])
        end_row -= 1
        cur_row = end_row
        
        # move up
        for i in range(end_row, start_row - 1, -1):
            print(arr[i][start_col])
        start_col += 1
        cur_col = start_col"
Modify the code in Python to convert a lower case string to an upper case string.'hello world',"string = 'hello world'
string = string.upper()
print(string)"
Design an algorithm to delete all occurrences of a given key k in a singly linked list.,"//recursive approach
Node *deleteKey(Node *head, int k) 
{ 
    Node *curr = head; 
    if (curr == NULL) 
        return NULL; 

    // check for head node 
    if (curr->key == k) { 
        Node *temp = curr; 
        head = curr->next; 
        free(temp); 
        return deleteKey(head, k); 
    } 

    // check for other nodes 
    while (curr->next != NULL) { 
        if (curr->next->key == k) { 
            Node *temp = curr->next; 
            curr->next = curr->next->next; 
            free(temp); 
        } 
        curr = curr->next; 
    } 
    return head; 
}"
Generate a general shopping list using Python.,"def generate_shopping_list():
    list_items = ['Bread', 'Milk', 'Butter', 'Eggs', 'Cereal', 'Fruits', 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat', 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper']
    return list_items"
"Create a calculator program using Python to do the following calculations.A = 30;
B = 15;
C = 4;","def calculator(A, B, C):
    add = A + B
    subtract = A - B
    multiply = A * C
    divide = A / B
    remainder = A % B
    return add, subtract, multiply, divide, remainder"
"Create a for loop to print every other letter in a given string.string = ""Logic speaks to reason, not to the imagination""","for i in range (0, len(string), 2):
    print(string[i], end = '')"
Generate a function to create a list of factors for a given integer.,"def factor_list(number):    
    factors = []
 
    i = 2
    while i * i <= number:
        if number % i:
            i += 1
        else:
            number //= i
            factors.append(i)
    if number > 1:
        factors.append(number)
 
    return factors"
"Create a function to check if an input string has unique characters or not.string = ""unique""","def has_unique_characters(string):
    return len(string) == len(set(string))"
"Generate a python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise.list_of_numbers = [5, 7, 10, 2]","def boolean_search(list_of_numbers):
    result_array = []
    for elem in list_of_numbers:
        result_array.append(elem in list_of_numbers)
    return result_array"
"Implement a Python code that takes a string and reverses the characters in place.string = ""This is easy""","def reverse_in_place(string):
    return string[::-1]"
"Modify the program to take a given list of integers and returns the maximum and minimum values.list_of_numbers = [3, 8, -1, 5]","def min_max(list_of_numbers):
    min = list_of_numbers[0]
    max = list_of_numbers[0]
    for number in list_of_numbers:
        if number > max:
            max = number
        elif number < min:
            min = number
    return min, max"
"Categorize each of the following strings as a floating-point number, integer, or string.59689.14",floating-point number
"Test the following Python code for any errors.def calculate_mean(numbers):
    total_sum = 0;
    for n in numbers:
        total_sum += n
    mean = total_sum / 10   # length of numbers",No errors have been found in the code.
Develop a regex pattern to match any valid phone number.,^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
"Develop a Python program to remove elements from a dictionary.my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}","my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}

# remove element 'd'
my_dict.pop('d', None)

# print resulting dictionary
print(my_dict)

# Output: {'a': 1, 'b': 2, 'c': 3}"
Write a code to change a string to have its first letter capitalized and the remaining characters in lower case.mySTRING,"""""""
Change a string to have its first letter capitalized and the remaining characters in lower case
""""""

def capitalize_string(s):
  return s[0].upper() + s[1:].lower()
  
if __name__ == '__main__':
    print(capitalize_string('mySTRING'))"
Create a script that can predict the next letter in a given string of text.Hello,"""""""
Create a script that can predict the next letter in a given string of text
""""""
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences

def predict_next_letter(text):
  data = [ord(char) for char in text]
  data = pad_sequences([data], maxlen=10, truncating='post')
  prediction = model.predict(data)
  index = tf.argmax(prediction[0]).numpy()
  
  return chr(index)

if __name__ == '__main__':
    print(predict_next_letter('Hello'))"
Create a deep learning model to output a sentence in French when given an English sentence as input.I like to eat apples.,"""""""
Create a deep learning model to output a sentence in French when given an English sentence as input
""""""
import tensorflow as tf
import numpy as np

# Input and output languages
input_lang = 'EN'
output_lang = 'FR'

# Define the model
model = tf.keras.Sequential([
  tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=10),
  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
  tf.keras.layers.Dense(vocab_size, activation='softmax')
])

# Compile and train the model
model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              optimizer=tf.keras.optimizers.Adam())
model.fit(input_tensor, output_tensor, epochs=100) 

# Make a prediction
sentence = 'I like to eat apples.'
predicted_sentence = translate(sentence, input_lang, output_lang, model) 

print(predicted_sentence) # J'aime manger des pommes."
Sort a list of words by the frequency of their occurrence.dog cat bed dog mouse rat,"""""""
Sort a list of words by the frequency of their occurrence
""""""

def sort_words_by_frequency(words):
    frequency_dict = {}
    for word in words:
        if word in frequency_dict:
            frequency_dict[word] += 1
        else:
            frequency_dict[word] = 1

    sorted_words = sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True)
    return [word for word, _ in sorted_words]

if __name__ == '__main__':
    print(sort_words_by_frequency(['dog', 'cat', 'bed', 'dog', 'mouse', 'rat']))"
Generate a random password of length 16 using the letters a-z.,"""""""
Generate a random password of length 16 using the letters a-z
""""""
import random

def generate_password():
  letters = 'abcdefghijklmnopqrstuvwxyz'
  return ''.join(random.choice(letters) for i in range(16))

if __name__ == '__main__':
    print(generate_password())"
"Create a function that can concatenate two lists into a string separated by comma.[1, 2, 3] [4, 5, 6]","""""""
Create a function that can concatenate two lists into a string separated by comma
""""""
def concat_lists(list1, list2):
  return ','.join([str(i) for i in list1 + list2]) 
  
if __name__ == '__main__':
    print(concat_lists([1, 2, 3], [4, 5, 6]))"
Create a class that can represent a 2D coordinate system.,"""""""
Create a class that can represent a 2D coordinate system
""""""
class CoordinateSystem:
  def __init__(self,x,y):
    self.x = x
    self.y = y
  
  def add(self,other):
    x = self.x + other.x
    y = self.y + other.y
    return CoordinateSystem(x,y)

if __name__ == '__main__':
    a = CoordinateSystem(1,2)
    b = CoordinateSystem(3,4)
    print(a.add(b)) # <__main__.CoordinateSystem object at 0x000002B50FE37B70>"
"Given a set of points and an origin point, calculate the distance between the origin point and each point in the set.[(1,1),(4,4),(3,3)] (0,0)","""""""
Given a set of points and an origin point, calculate the distance between the origin point and each point in the set
""""""
import math 

def points_distance(points, origin):
    distances = []
    for point in points:
        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))
    return distances

if __name__ == '__main__':
    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]"
Create a function that can transform a string of text into an object containing the number of occurrences of each letter in the string.Hello World,"""""""
Create a function that can tranform a string of text into an object containing the number of occurrences of each letter in the string
""""""
def count_letters(s):
  letter_dict = {}
  for letter in s:
    if letter in letter_dict:
      letter_dict[letter] += 1
    else:
      letter_dict[letter] = 1
  
  return letter_dict

if __name__ == '__main__':
    print(count_letters('Hello World')) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}"
Create a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string.mystring isthis,"""""""
Create a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string
""""""
def is_substring(str1, str2):
  i = 0
  for char in str2:
    if char == str1[i]:
      i += 1
    if i == len(str1):
      return True
  return False

if __name__ == '__main__':
    print(is_substring('mystring', 'isthis')) # True"
"Create a function which takes a list of integers as input, and returns the max value of the list.[7, 9, 5]","def get_max(int_list):
  return max(int_list)"
"Implement a function that takes a 2D matrix and rotates the matrix 90 degrees clockwise.[[1,2,3],
 [4,5,6],
 [7,8,9]]","def rotate_2d_matrix(matrix):
    n = len(matrix[0])
    m = [[0] * n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            m[i][j] = matrix[n-j-1][i]
    return m"
"Write a function that takes a string and returns the number of substrings with at least k different characters""abacdc""","def num_distinct_substrings(S, k):
   n = len(S)
   distinct_substrings = set()
   for i in range(n):
      for j in range(i+k, n+1):
         distinct_substring = """".join(sorted(list(set(S[i:j]))))
         distinct_substrings.add(distinct_substring)
   return len(distinct_substrings)"
"Write a function that takes a list of integers and returns the shortest continuous increasing subarray in the list.[2,3,3,4,3,4,5,6,7]","def shortest_increasing_subarray(nums):
    res, curr = float('inf'), 0
    for i in range(len(nums)-1):
        if nums[i] < nums[i+1]: 
            curr += 1
        else:
            res = min(res, curr)
            curr = 0
    return max(res, curr) + 1"
"Write a Python function to check whether a string is a palindrome or not, ignoring spaces and special characters.","def is_palindrome_ignore_space(word):
    filtered_word = [i.lower() for i in word if i.isalpha()] 
    return filtered_word == filtered_word[::-1]"
"Given a 2D matrix of integers, find a path from the leftmost column to the right-most column that maximises the sum of numbers.[[3,4,7,2],
[2,7,4,1],
[7,1,2,4],
[8,2,2,7]]","def max_sum_path(matrix):
    rows, columns = len(matrix), len(matrix[0])
    dp = [[float(""-inf"") for i in range(columns)] for j in range(rows)]
    dp[0][0] = matrix[0][0]
    for i in range(rows):
        for j in range(columns):
            if i > 0:
                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])
            if j > 0:
                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])
    return dp[-1][-1]"
"Given a 2D matrix of integers, retrive the maximum sum submatrix.[[2,-2,3,4],[-4,-3,1,1],[-1,5,5,-3]]","def max_sum_submatrix(matrix):
    rows, columns = len(matrix), len(matrix[0])
    dp = [[0] * columns for _ in range(rows)]
    for i in range(rows):
        for j in range(columns):
            dp[i][j] = matrix[i][j]
            if i > 0:
                dp[i][j] += dp[i-1][j]
            if j > 0:
                dp[i][j] += dp[i][j-1]
            if i > 0 and j > 0:
                dp[i][j] -= dp[i-1][j-1]
                
    max_sum = float('-inf')
    for r1 in range(rows):
        for r2 in range(r1, rows):
            for c1 in range(columns):
                for c2 in range(c1, columns):
                    current_sum = dp[r2][c2]
                    if r1 > 0:
                        current_sum -= dp[r1-1][c2]
                    
                    if c1 > 0:
                        current_sum -= dp[r2][c1-1]
                    
                    if r1 > 0 and c1 > 0:
                        current_sum += dp[r1-1][c1-1]
                    
                    max_sum = max(max_sum, current_sum)
    return max_sum"
Write a function that checks if a given list of integers is sorted in ascending order.,"def is_ascending_order(nums):
    if len(nums) == 0 or len(nums) == 1:
        return True
    if nums[0] < nums[1]:
        return is_ascending_order(nums[1:])
    return False"
"Given a 2D array of binary values and another 2D array, find the indices of the first array where the values of both arrays are equivalent.array1 = [[1, 0, 0, 1],[1, 0, 1, 0],[0, 0, 0, 1],[1, 0, 1, 0]]
array2 = [[1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1]]","def find_empty_position(array1, array2):
    results = []
    for i in range(len(array1)):
        for j in range(len(array1[0])):
            if array1[i][j] == array2[i][j] and array1[i][j] == 0:
                results.append((i, j))
    return results"
Create a text-based game in Python.,"print(""Welcome to the Text-Based Adventure Game!"") 
    
player_name = input(""What is your name? "") 
    
print(""Hello "" + player_name + "", let's begin!"") 
    
print(""You are walking through a dark forest, it is very quiet and there is a strange feeling of unease"") 

while True: 
    print(""What do you want to do? (Enter 'help' for a list of commands)"") 

    player_action = input() 

    if player_action == 'help': 
        print(""Here are the commands you can use: move, search, look, take, inventory"") 
    elif player_action == 'move': 
        print(""Which direction do you want to move? Enter 'north', 'south', 'east' or 'west'"") 
    elif player_action == 'search':
        print(""You search the area and find a mysterious-looking object"") 
    elif player_action == 'look': 
        print(""You look around and see nothing special"") 
    elif player_action == 'take': 
        print(""You take the item and add it to your inventory"") 
    elif player_action == 'inventory': 
        print(""You check your inventory and see the mysterious-looking object"") 
    else: 
        print(""That command does not exist. Please enter 'help' for a list of commands"")"
"Write a code to find the two largest numbers in an array and return them in reverse order.array = [7,2,9,3,1,5]","""""""
Find the two largest numbers in an array and return them in reverse order
"""""" 

array = [7,2,9,3,1,5]

def largest_numbers(array):
    largest = 0
    second_largest = 0
    for i in array:
        if i > largest:
            second_largest = largest
            largest = i
        elif i > second_largest:
            second_largest = i
    return [largest, second_largest]
 
if __name__ == '__main__':
    print(largest_numbers(array))"
"Output true if a given expression evaluates to true and false if it doesn't.expression = ""2 + 2 == 4""","""""""
Output true if a given expression evaluates to true and false if it doesn't
""""""

expression = ""2 + 2 == 4""

def evaluate_expression(expression):
    return eval(expression)

if __name__ == '__main__': 
    print(evaluate_expression(expression))"
Describe how to use the reduce() function in Python.,"The reduce() function in Python is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the “functools” module. It applies the function in a manner that the resultant of the function of the current element and the next element is the new element, and so the process continues until the end of the list is reached. For example, to find the sum of all elements in a list:

list_nums = [2, 3, 4]

def list_sum(x, y):
     return x + y

list_sum = reduce(list_sum, list_nums)

print(""Output:"", list_sum)"
How would you check if a list of integers contains only even numbers?,"The easiest way to check if a list of integers contains only even numbers is to iterate over the list and check if each element is divisible by 2. If all elements are divisible by 2, then the list contains only even numbers.


def check_even(nums):
    for num in nums:
        if num % 2 != 0:
            return False 
    return True
        

list_of_nums = [2, 4, 6]

result = check_even(list_of_nums)
print(result) # Output: True"
"Rewrite this function to use a binary search instead.def linear_search(arr, x): 
    for i in range (len(arr)): 
        if arr[i] == x: 
            return i 
    return -1","def binary_search(arr, x): 
    start = 0
    end = len(arr) - 1
  
    while start <= end: 
        mid = start + (end - start) // 2 
        if arr[mid] == x: 
            return mid 
        elif arr[mid] < x: 
            start = mid + 1
        else: 
            end = mid - 1  
    return -1"
"Normalize a string by replacing all sequence of whitespaces with a single space.var myString = "" Hello    World  ""","function normalizeString(str) {
    return str.replace(/  +/g, ' ').trim();
}
normalizeString(myString);
// Returns ""Hello World"""
"Write a script to iterate over all elements in a list, and sum up all integers greater than 5.var myList = [3, 7, 5, 6, 1]","function sumOfInt(arr) {
    var sum = 0;
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] > 5) {
            sum += arr[i];
        }
    }
    return sum;
}
sumOfInt(myList);
// Returns 13"
Implement a class which stores a list of strings and provides a method to filter out the items containing an 'a' character.,"class StringList {
    constructor(arr) {
        this.list = arr;
    }

    filterA() {
        return this.list.filter(val => !val.includes('a'))
    }
}"
"Pack a string of characters into an array of length 8var myString = ""abcdefgh""","function packChars(str) {
    var arr = [];
    for (var i = 0; i < 8; i++) {
        arr.push(str[i] || "" "");
    }
    return arr;
}
packChars(myString);
// Returns [""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h""]"
"Compare the given strings to check if they are equal.string1 = ""hello world"" 
string2 = ""hello world""","if (string1 == string2) 
    cout << ""Strings are equal""; 
else 
    cout << ""Strings are not equal"";"
"Find the first occurrence of substring ""data"" in the given string.String: ""Data Science is a field of study""","The first occurrence of substring ""data"" can be found at position 0 in the given string."
"Create a function that searches for elements in an array and returns the index position of the element.array = [3, 7, 11, 14, 19]
element = 11","def search_for_element(array, element):
    """"""Search array for element and return index position.""""""

    for i in range (0, len(array)): #loop through array
        if array[i] == element: #check if element is equal to the value in the array
            return i #return index position

    return -1 #if element is not found, return -1"
"Create a function that takes in three parameters, a main string, searching substring, and a replacement string, and returns the main string with all occurrences of the searching substring replaced by the replacement string.main_string = ""Helllllllllllo World""
searching_substring = ""lllllllll""
replacement_string = ""y""","def replace_string(main_string, searching_substring, replacement_string):
    """"""Replace all occurrences of the searching substring in the main string with the replacement string.""""""
    
    # replace all occurrences of the searching substring with the replacement string
    replaced_string = main_string.replace(searching_substring, replacement_string)

    return replaced_string"
Make a script that checks if a given integer value is divisible by 3 and 5 both.value = 10,"def check_divisible(value):
    """"""Check if value is divisible by 3 and 5.""""""
    # check if value is divisible by 3 and 5
    if value % 3 == 0 and value % 5 == 0:
        return True
    else:
        return False"
"Modify the given code to find the factorial of a specified number.def factorial_(num):
    """"""Find the factorial of a given number""""""
    # TODO
    return 1","def factorial_(num):
    """"""Find the factorial of a given number""""""

    # initialize the value of factorial
    factorial = 1

    # multiply the number with the numbers 
    # below its value to get the factorial
    for i in range(1, num+1):
        factorial *= i
    
    return factorial"
"Create a function that takes in two parameters―a main word and a searching word―and checks if the searching word is present in the main word.main_word = ""Hello""
searching_word = ""el""","def search_word(main_word, searching_word):
    """"""Check if the searching word is present in the main word.""""""

    # iterate over the main word, and check if 
    # any substring is equal to the searching word
    for i in range(0, len(main_word)):
        if main_word[i:(i + len(searching_word))] == searching_word:
            return True

    return False"
Describe a boolean condition that checks whether a name is 5 letters long.,name.length == 5
"Write a Python function that calculates the cosine distance between two vectors.vector1 = [1, 2, 3]
vector2 = [4, 5, 6]","def cosine_distance(a, b):
  numerator = 0 
  sum_a_sq = 0 
  sum_b_sq = 0
  for (x, y) in zip(a, b):
    numerator += x*y
    sum_a_sq += x**2
    sum_b_sq += y**2
  
  denominator = (sum_a_sq * sum_b_sq)**.5
  return numerator/denominator

cosine_distance(vector1, vector2)"
Create a function that evaluates the quadratic equation.,"def quadratic_equation(a,b,c):
   discriminant = pow(b,2)-4*a*c
   if(discriminant < 0):
      return ""No real solutions""
   elif(discriminant == 0):
      return (-b + pow(discriminant, 0.5))/(2*a)
   else:
      return ((-b + pow(discriminant, 0.5))/(2*a), (-b - pow(discriminant, 0.5))/(2*a))"
Create a boolean condition to check if the value is a real number.,typeof value == 'number' && isFinite(value)
Create an object of key-value pairs that contains 5 programming languages.,"const languages = {
  'Java': 'Object-oriented, high-level language',
  'Python': 'Interpreted, scripted, high-level language',
  'C++': 'Object-oriented, compiled, low-level language',
  'JavaScript': 'Interpreted, scripted, high-level language',
  'C': 'Compiled, low-level language'
};"
"Create a while loop using the given conditions.counter = 0
max_count = 5","while counter < max_count:
    counter += 1"
"Make a function that adds two lists of numbers together element-wise.list1 = [1, 2, 3]
list2 = [4, 5, 6]","def add_lists(list1, list2): 
    res = [] 
    for i in range(0, len(list1)): 
        res.append(list1[i] + list2[i]) 
    return res"
"Using the given input, output the longest word in the array.words = [""water"", ""grand"", ""piano"", ""mountain""]","def longest(words): 
    max_len = 0
    
    for i in range(0, len(words)): 
        if (len(words[i]) > max_len): 
            max_len = len(words[i])
            longest = words[i] 
  
    return longest"
"Write a loop to iterate over a string and print each character on a new line.text = ""Hello world!""","for char in text: 
    print(char)"
"Implement a text classifier for recognizing phrases that are indicative of anger in a sentence.He threw the ball so hard, his anger couldn't be concealed.","def is_angry(sentence): 
    angry_phrases = [""angry"", ""enraged"", ""aggrieved"", ""ineluctably"", ""ireful"", 
                    ""lusty"", ""tedious"", ""vexed"", ""irked"", ""wrath""] 
    words_in_sentence = sentence.lower().split("" "")

    for phrase in angry_phrases: 
        if phrase in words_in_sentence: 
            return True 
    return False"
Generate a random password consisting of alphanumeric characters and special characters.,"import string 
import random 
  
def randomPassword(): 
    password_characters = string.ascii_letters +  string.digits + '!@#$%^&*()'
    password = random.choice(string.ascii_lowercase) #Include atleast one lowercase
    password += random.choice(string.ascii_uppercase) #Include atleast one uppercase
    password += random.choice(string.digits) #Include atleast one number
    password += random.choice(string.punctuation) #Include atleast one special character

    for i in range(8):
        password += random.choice(password_characters)

    return password"
"Convert a given 2D point to the polar representation.Point: (1,1)","def polar_rep(point):
    x, y = point
    r = math.sqrt(x**2 + y**2) 
    theta = math.atan2(y, x)
    return (r, theta)"
Create an array with 10 random elements.,"[24, 18, 13, 37, 11, 87, 71, 6, 45, 97]"
"Modify the following code to display alter the existing function to accept an additional parameter.def foo(a, b):
    return a + b","def foo(a, b, c):
    return a + b + c"
"Parse a list of numbers from a string in Python.s = ""1, 2, 3, 4, 5, 6""","import re
list = re.findall(r'\d+', s)"
"You need to trim a string by removing leading and trailing whitespace characters.string = ""    hello    """,string.trim();
"Modify the given program to print ""Hello, foo"" where ""foo"" is user input.System.out.println(""Hello, World!"");","import java.util.Scanner;
public class Test {
    public static void main(String args[]){
        Scanner scanner = new Scanner(System.in);
        System.out.print(""Enter in a name: "");
        String name = scanner.nextLine(); 
        System.out.println(""Hello, "" + name + ""!"");
    }
}"
Create a Python program to define a factorial of a given number.,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)"
Define a function to print out the elements in a list without using a loop.,"def print_elements(my_list):
    if not my_list: 
        return
    print(my_list[0])
    print_elements(my_list[1:])"
"Edit the code to display the output “Welcome to coding!”print(""Welcome to code"")","print(""Welcome to coding!"")"
Convert the following text from a camel case string to a space-separated one.camelCaseString,camel Case String
"Make an algorithm to rotate a matrix by 90 degrees.[[1,2,3], 
[4,5,6], 
[7,8,9]]","def rotate_90_degrees(matrix):
    n = len(matrix[0]) 
    result = [[0 for x in range(n)] for y in range(n)]  
    for i in range(n): 
        for j in range(n): 
            result[j][n-i-1] = matrix[i][j] 
    return result"
Design a recursive algorithm to generate the Fibonacci sequence.,"def Fibonacci(n): 
   if n<0: 
      print(""Incorrect input"") 
   # First Fibonacci number is 0 
   elif n==0: 
      return 0
   # Second Fibonacci number is 1 
   elif n==1: 
      return 1
   else: 
      return Fibonacci(n-1)+Fibonacci(n-2)"
"Write a stack-based language for a simple calculator that can perform the following tasks: Add, subtract, multiply, and divide integers.","//Reusable ""push"" and ""pop"" functions

void push(Stack *st, int val) {
    st->arr[st->top] = val;
    st->top++;
}

int pop(Stack *st) {
    return st->arr[--(st->top)];
}

//Functions for performing operations

int add(Stack *st) {
    int x = pop(st);
    int y = pop(st);
    return x + y;
}

int subtract(Stack *st) {
    int x = pop(st);
    int y = pop(st);
    return x - y;
}

int multiply(Stack *st) {
    int x = pop(st);
    int y = pop(st);
    return x * y;
}

int divide(Stack *st) {
    int x = pop(st);
    int y = pop(st);
    return x / y;
}"
Use Polyglot to detect the language of the following sentenceDies ist ein Satz.,"from polyglot.detect import Detector

sentence = ""Dies ist ein Satz.""

detector = Detector(sentence)
print(detector.language.name)

# Output: German"
"Write Pseudocode for a simple sorting algorithm that sorts an input array.[3, 5, 8, 2, 7]","FUNCTION Sort(input)
  SET i to 0
  WHILE i < LENGTH OF input
    SET max to i
    SET j to i + 1
    WHILE j < LENGTH OF input
      IF input[j] > input[max] THEN
        SET max to j
      END IF
      SET j to j + 1
    END WHILE
    IF max != i THEN
      SWAP input[i] with input[max]
    END IF
    SET i to i + 1
  END WHILE 
RETURN input
END FUNCTION"
"Use regex to extract specific words between two delimiters in a sentence.string = ""This is a string with multiple words and special characters !@#""","import re

string = ""This is a string with multiple words and special characters !@#""
matches = re.findall(r'(?<= ).*?(?= )', string)
print(matches)

# Output: ['is', 'a', 'string', 'with', 'multiple', 'words', 'and', 'special']"
"Evaluate this code and output the result.x = 5
y = 7
z = 8","x = 5
y = 7
z = 8

result = (x + y) * z
print(result)

# Output: 75"
Create a Tkinter app with a label and a button.,"import tkinter as tk

root = tk.Tk()
frame = tk.Frame(root)
frame.pack()

label = tk.Label(frame, text=""Hello World!"")
label.pack()

button = tk.Button(frame, text=""Exit"", command=frame.quit)
button.pack()

root.mainloop()"
Create a function that returns the product of two integers.,"def multiply_int(x, y):
    return x * y"
Build a convolution neural network using tensorflow that takes a single input and classify it into one of three categories.,"import tensorflow as tf

model = tf.keras.Sequential()
model.add(tf.keras.layers.Conv2D(32, 3, activation=""relu"", input_shape=(28, 28, 1)))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(64, activation=""relu""))
model.add(tf.keras.layers.Dense(3, activation=""softmax""))

model.compile(optimizer=""adam"",
              loss=""categorical_crossentropy"",
              metrics=[""accuracy""])"
Create a function that filters an array for all numbers greater than the given number.,"def filter_array(arr, num):
    return [x for x in arr if x > num]"
Use openssl to generate a RSA public/private key pair.,openssl genpkey -algorithm RSA -out rsa_key.pem -pkeyopt rsa_keygen_bits:2048
Write an algorithm that verifies whether an integer is a prime number,"def prime_check(n):
    if n < 2: 
        return False
    if n == 2: 
        return True
    if not n & 1: 
        return False
    for x in range(3, int(n**0.5) + 1, 2):
        if n % x == 0:
            return False
    return True"
give an example of a natural language processing task solved using supervised learning.,"One example of a natural language processing task solved using supervised learning is sentiment analysis. Through supervised learning, sentiment analysis models classify text as sentimentally positive or negative, with inputs such as words, phrases, and conversations. Supervised learning algorithms are often used to train the model by using labeled data, such as customer reviews that have been labeled as positive or negative. With enough data, supervised learning algorithms learn to determine the sentiment associated with given text."
"Write a function to check for palindromestr = ""abcba""","def is_palindrome(str): 
    # First convert all to the same case
    str = str.lower()
    return str == str[::-1]"
"From a given list, remove all elements that have a prime index.list = [4, 7, 10, 11, 14]","def remove_primes(list):
   modified_list = []
   for idx, num in enumerate(list):
       if is_prime(idx) == False:
           modified_list.append(num)
   return modified_list"
Create 4 variables with the following data types with appropriate values:,"a = 10  # integer
b = ""Hello""  # string
c = [1,2,3]  # list
d = { ""name"": ""John"", ""age"": 30 }  # dictionary"
"Classify the given article into its corresponding category.Article: 

The 2020 Tokyo Olympics is postponed until 2021 due to the ongoing pandemic.",Sports
"Convert this string from uppercase to lowercase.my_string = ""HELLO WORLD""",my_string = my_string.lower()
"Create a function to filter out positive numbers from a given array.numbers = [-5, 3, 7, -2, 4, 9]","def filter_positives(numbers):
    result_list = []
    for element in numbers:
        if element >= 0:
            result_list.append(element)
    return result_list"
"Convert this function from a for loop to a while loop.def cumsum(lst):
    sum = 0
    new_lst = []
    for n in lst:
        sum += n
        new_lst.append(sum)
    return new_lst","def cumsum(lst):
    sum = 0
    new_lst = []
    i = 0
    while i < len(lst):
        sum += lst[i]
        new_lst.append(sum)
        i += 1
    return new_lst"
Write a short class in Python that will print a custom message when created.,"class CustomMessage:
    def __init__(self):
        print(""This is a custom message!"")"
"Given a list of strings, how can we print each string on a new line in C?[""Hello"", ""world""]","for (int i = 0; i < 2; i++) {
    printf(""%s\n"", list[i]);
}"
"You are given a 2D array and you need to rotate it 90 degrees clockwise.array = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
    [13, 14, 15, 16],
  ]","def rotate90(arr):
    new_arr = [[row[i] for row in arr[::-1]] for i in range(len(arr[0]))]
    return new_arr"
"Given a string, convert all lowercase characters to uppercase.str = 'hello World'",str.upper()
Build a Python program to generate a prime numbers list in a given range.,"def prime_numbers(start_num, end_num):
    prime_nums_list = []
    for num in range(start_num, end_num + 1):  
        # all prime numbers are greater than 1  
        if num > 1:  
            for i in range(2,num):  
                if (num % i) == 0:  
                    break  
            else:  
                prime_nums_list.append(num)

    return prime_nums_list"
"From a given string, remove all the punctuations.This is a string with puncutation, and it is not good.",This is a string with puncutation and it is not good
"Read the following code and identify the name of the function.x = 4
def test():
    return x",test
Calculate the nth fibonacci number in the series.n = 10,55
"To an integer array, apply a modulo operation.arr = [3, 4, 5, 6]
m = 2","[1, 0, 1, 0]"
"Given two numbers, find their LCM.a = 15
b = 10",30
"Create a function that rotates a given array by one element to the right.arr = [1, 2, 3, 4, 5]","def rotate_arr(arr):
    return arr[-1:] + arr[:-1]"
"Write a code to check if two rectangles overlap with each other.rect1 = (0,0,10,10)
rect2 = (8,8,12,12)","def check_overlap(rect1, rect2):
    x1, y1, w1, h1 = rect1
    x2, y2, w2, h2 = rect2
    
    x_overlap = max(0, min(x1 + w1, x2 + w2) - max(x1, x2))
    y_overlap = max(0, min(y1 + h1, y2 + h2) - max(y1, y2))
    overlap_area = x_overlap * y_overlap
    
    return (overlap_area > 0)"
"Given the following list, write a program to sort it in ascending order.[3, 4, -5, 6, 1, -2]","def bubbleSort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
                
    return arr 

arr = [3, 4, -5, 6, 1, -2]
print(bubbleSort(arr))"
"Create a program that prints ""Hello World"" on the screen.",print('Hello World')
"Write a function that transposes a 2D array from column-major format to row-major format.The array is [[1,2,3],[4,5,6],[7,8,9]]","def transpose(matrix):
    row_major = []
    row, col = len(matrix), len(matrix[0])
    for i in range(col):
        row_major.append([])
        for j in range(row):
            row_major[i].append(matrix[j][i])

    return row_major"
"Create a GraphQL query to get the data from the given API.{
  users {
    id
    name
    email
  }
}","query getData {
  users {
    id
    name
    email
  }
}"
"Take the following matrix and transpose it.matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
]","transposed_matrix = [
  [1, 4, 7],
  [2, 5, 8],
  [3, 6, 9]
]"
"Create a function to filter out all numbers evenly divisible by 5.numbers = [10, 30, 45, 50, 16, 41]","def divisible_by_five(numbers):
  new_list = []
  for num in numbers:
    if num % 5 == 0:
      new_list.append(num)
  return new_list"
"Given a binary tree, write a function to print out the elements in level order.","def levelOrder(root): 
    if root is None: 
        return
    queue = [] 
    queue.append(root)  
    while(len(queue) > 0): 
        print (queue[0].data), 
        node = queue.pop(0)  
        if node.left is not None: 
            queue.append(node.left) 
        if node.right is not None: 
            queue.append(node.right)"
"Create a list comprehension to convert each element to its square root.my_list = [1, 4, 9, 16, 25]",squared_list = [x**0.5 for x in my_list]
Write a RegEx expression to find substrings of length 5 that are lowercase.,"import re

pattern = r""[a-z]{5}""

re.findall(pattern, string)"
"Design an algorithm to rotate a given array in clockwise direction by a given index.array = [1, 2, 3, 4, 5] index = 2","def rotateArray(arr, index):
    n = len(arr)
    temp = []

    for i in range(n):
        temp.append(arr[(i + index) % n])
    
    for i in range(n):
        arr[i] = temp[i]
        
    return arr

# Test
arr = [1, 2, 3, 4, 5] 
index = 2
rotated = rotateArray(arr, index)

# Output  
print(rotated)
# [3, 4, 5, 1, 2]"
Create an algorithm in Python to print the string “welcome” n times.,"def print_welcome(n):
    for i in range(n):
        print(""Welcome"")"
"Modify a given program to replace each element in an array with the sum of all elements before it.[1,2,3,4]","def pref_sum(a):
    output = [a[0]]
    for i in range(1, len(a)):
        output.append(a[i] + output[i-1])
    return output"
"Create a function 'removeLetters' that takes a string and removes all instances of a given letter from it.String = ""This string contains multiple letter t's.""
Letter = 't'","def removeLetters(inputString, letter):
    outputString = """"
    for c in inputString:
        if c != letter:
            outputString = outputString + c
    return outputString

print(removeLetters(""This string contains multiple letter t's."", 't'))

OUTPUT:
""This string contains multiple letter s."""
"Determine the output of the following function.

def getSum(arr):
    total = 0
    for i in arr:
        total += i
    return total

arr = [2, 4, 6]",12
"What is the output of the following Python code?

string = ""Hello World""
string = string[::-1]",dlroW olleH
"Write a function 'combineStrings' which takes two strings and returns the combined string.string1 = ""Hello""
string2 = ""World""","def combineStrings(string1, string2):
    return string1 + string2

print(combineStrings('Hello', 'World'))

OUTPUT:
HelloWorld"
"Create a Python function 'checkInteger' that takes a number and returns true if the number is an integer, false otherwise.number = 3.2","def checkInteger(number):
    if number == int(number):
        return True
    else:
        return False

print(checkInteger(3.2))

OUTPUT:
False"
Define a function that takes three numbers and returns the average of them.,"def average(a, b, c):
    return (a + b + c) / 3"
"Design a function 'sortString' which takes a string of words and sorts each word alphabetically.string = ""zebra cat dog""","def sortString(string):
    words = string.split("" "")
    sortedWords = [word for word in words]
    for i in range(len(sortedWords)):
        sortedWords[i] = """".join(sorted(sortedWords[i]))
    return "" "".join(sortedWords)

print(sortString(""zebra cat dog""))

OUTPUT:
 abcerz cdgot"
"Write a function 'divideList' which takes a list and an integer, and divides the list into n groups.list = [1, 2, 3, 4, 5]
n = 2","def divideList(list, n):
    nList = [[] for _ in range(n)]
    for item in list:
        nList[item % n].append(item)
    return nList

print(divideList([1, 2, 3, 4, 5], 2))

OUTPUT:
[[1, 3, 5], [2, 4]]"
"Write a function 'hasRepeats' that checks if a list has two of the same elements.list = [1, 3, 9, 5, 3]","def hasRepeats(list):
    for i in range(len(list)):
        for j in range(i+1, len(list)):
            if list[i] == list[j]:
                return True
    return False

print(hasRepeats([1, 3, 9, 5, 3]))

OUTPUT:
True"
Create two variables x and y with values 0 and 1 respectively and assign x to y using the arithmetic operators.,"x = 0
y = 1
y = x"
"Create a Python dictionary with the student's name as the key and marks as the value.data = {
    ""Ann"": 78, 
    ""John"": 92,
    ""Bob"": 67
}","student_marks = {
    ""Ann"": 78, 
    ""John"": 92,
    ""Bob"": 67
}"
"Write an operation that adds all the numbers in a given list.[32, 15, 45, 56, 16]",sum = 164
Implement a function that can convert a number from one number system to another.Input: The number 60 in binary to be converted to decimal.,"def binary_to_decimal(binary):
    decimal = 0 
    length = len(binary) 
    for digit in range(0, length): 
        decimal += int(binary[digit]) * pow(2, length - digit - 1) 
    return decimal 

print(binary_to_decimal(""60""))
Output: 24"
Initialize a variable with a list containing numbers from 1-100.,"list_numbers = [i for i in range(1,101)]"
Write a code to calculate how many seconds are in 14 hours.,"seconds = 14 * 60 * 60
print(seconds)
Output: 50400 seconds"
Design an algorithm to summarize a long text.,"def summarize_text(text): 
    # Split the text into sentences 
    sentences = text.split('.') 
    # Compute the frequency of each sentence 
    sentence_frequencies = {} 
    for sent in sentences: 
        # Clean the sentences 
        clean_sent = sent.strip().lower() 
        # Count the frequency of the sentence 
        if clean_sent in sentence_frequencies: 
            sentence_frequencies[clean_sent] += 1
        else: 
            sentence_frequencies[clean_sent] = 1
  
    # Rank the sentences based on frequency 
    ranked_sentences = sorted(sentence_frequencies.items(), key=lambda x: x[1], reverse=True) 
  
    # Return the top 3 sentences as the summary 
    summary = [] 
    for sent in ranked_sentences[:3]: 
        summary.append(sent[0]) 
  
    return ""."".join(summary)"
"Design a binary search tree that has the following values in the given order - 5, 4, 11, 6, 10, 8.","5
      /   \
     4     11
    / \    / \  
   N   6  10  8"
"Given a string, create a method to remove all empty spaces and punctuation from the string.""Hello, world !""","def remove_punctuation(string):
    return string.replace(' ', '').replace(',', '').replace('!', '')"
Create a method to find the shortest word in a given array of strings.,"def shortest_word(arr):
    shortest_word = arr[0]
    for word in arr[1:]:
        if len(word) < len(shortest_word):
            shortest_word = word
    return shortest_word"
"Given a sentence, create a method to capitalize every word in the sentence.hello world","def capitalize_words(string):
    return ' '.join(word.capitalize() for word in string.split())"
"Write a function to output ""Thank you"" three times.","def say_thanks():
	for i in range(3):
		print(""Thank you"")"
"What is the minimum number of arguments needed to call the function ""foo"".","The minimum number of arguments needed to call the function ""foo"" is 0."
Install Numpy in Python using pip.,pip install numpy
Describe the purpose of an API.,"An API (Application Programming Interface) is a set of programming instructions and standards used for interacting with a software application or web service. It generally enables a developer to access specific features of an application or web service, such as data or functionality, to build integrated applications. APIs provide a way to write code which interacts with other external services in a secure and efficient manner."
"Write a lambda expression to select all the strings from a given array whose length is less than 5.arr = [""Hello"", ""Bye"", ""Morning"", ""Evening"", ""Hi"", ""Bye Bye""]","filtered = list(filter(lambda x : len(x) < 5, arr))"
Identify the type of operator in the expression.Expression: 7 > 5,Relational Operator.
"Write a function to compare two strings and return the number of character positions at which the strings in the two strings differ from each other.str1 = ""apple""
str2 = ""animal""","def compare_strings(s1, s2):
    count = 0
    for i in range(min(len(s1), len(s2))):
        if s1[i] != s2[i]:
            count += 1
    return count"
"Write a Python program for calculating the sum of a given array of numbers.[2, 3, 4, 5]","def calculateSum(arr): 
   sum = 0
   for num in arr: 
      sum += num  
   return sum 

print(calculateSum([2, 3, 4, 5]))"
"Given two strings, find and replace the first instance of the string1 with string2.string1 = ""apple"";
string2 = ""apricot"";
string3 = ""One apple a day keeps the doctor away""","string output = string3.Replace(string1, string2);
// Output: One apricot a day keeps the doctor away"
Define a function in Python that takes a number as an argument and returns its cube.,"def cube(number):
    return number**3"
Create a program to encrypt a given text using any encryption technique.Hello,"# Using Python:
 
plain_text = ""Hello""

# Simple substitution encryption
alphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')
encrypted_text = """"

for plain_letter in plain_text:
    if plain_letter in alphabet:
        encrypted_letter = alphabet[(alphabet.index(plain_letter) + 3) % 26]
    else:
        encrypted_letter = plain_letter
    encrypted_text += encrypted_letter
    
print(""Encrypted Text:"", encrypted_text) # Output: Khoor"
Populate an array with numbers from 1 to 10 in Python.,"arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Construct a bubblesort algorithm in Python.,"def bubbleSort(array): 
	n = len(array) 
	for i in range (n): 
		for j in range(0, n-i-1): 
			if array[j] > array[j+1] : 
				array[j], array[j+1] = array[j+1], array[j] 

arr = [64, 34, 25, 12, 22, 11, 90] 
bubbleSort(arr) 

print (""Sorted array is:"") 
for i in range(n): 
	print (""%d"" %arr[i]),"
Generate a valid XML tag to represent the following:Name: User; Attribute: id; Attribute Value: 47,"<User id=""47"" />"
"How would you modify the query to print the average grade of the students?SELECT name, grade FROM Students;","SELECT AVG(grade) FROM Students; 

This query will return the average grade of all students from the Students table."
Suggest a data structure in Python to represent a binary search tree.,"A Binary Search Tree (BST) can be represented using the dictionary data structure in Python. Each node in the tree will be represented by a dictionary containing the keys: ‘value’, ‘left’, and ‘right’. ‘value’ refers to the numeric or string value of the node, ‘left’ refers to the dictionary representation of the left child and ‘right’ refers to the dictionary representation of the right child."
Create a text box containing the given textTextbox Text: Welcome,"<input type=""text"" value=""Welcome"" />"
Identify the type of error in the below given syntaxa < 45,"Syntax Error. The correct syntax should be ""a < 45""."
"Create a MongoDB document containing the following dataName: John
Age: 32
Occupation: Engineer","{
  name: ""John"",
  age: 32,
  occupation: ""Engineer""
}"
"Convert a list to a string.my_list = [""a"", ""b"", ""c"", ""d""]","my_list = [""a"", ""b"", ""c"", ""d""]

# Convert the list to a string 
my_string = ''.join(my_list)

print(my_string) # Output: abcd"
Create a function that takes as input a string and evaluates its quantity to true or false.,"def is_empty(str):
  ''' This function takes as input a string and evaluates its 
      quantity to true or false.
  '''
  if len(str.strip()) == 0:
    return True
  else:
    return False"
"Write a regular expression to check if a string ends with ""py"".","import re

pattern = r""py$""

# Check if a string ends with ""py""
if re.search(pattern, ""test.py""):
  print(""String ends with 'py'."") # Output: String ends with 'py'."
Train a machine learning model to predict whether a customer is likely to purchase a product.,"import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

# Read data and split into training and test sets
data = pd.read_csv(""customer_data.csv"")
X = data.drop(""target"", axis=1)
y = data.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train the model
clf = RandomForestClassifier()
clf.fit(X_train, y_train)

# Evaluate the model
score = clf.score(X_test, y_test)
print(""Model accuracy:"", score)"
"Write a function that takes an array of integers and returns an array of the same length with each element multiplied by 2.[1, 2, 3]","def multiplyByTwo(arr):
    multipliedArr = []
    for i in arr:
        multipliedArr.append(i*2)
    return multipliedArr"
"Find a way to solve this particular problem using regex.Given a string ""A-C-E-G-I"", create a new string ""ACE-GI"".","The following regex expression can be used to solve this problem: 
(?<=.)(?=-.)|(?<!-.)"
Construct a machine learning model to classify a given dataset into two class labels.Dataset,"Using a dataset with two class labels (e.g., yes/no, 0/1, etc.), a machine learning model can be constructed, for example, by using a Support Vector Machine (SVM) method with a suitable kernel. The inputs to the model would be the features from the dataset and the output would be the predicted class labels. The SVM algorithm would be trained with the input dataset and the class labels, and then tested with a test dataset to measure the accuracy of the model."
Create a tensorflow model to predict the probability of rain given an input dataset.Weather dataset,"The following steps can be taken to create a tensorflow model to predict the probability of rain given an input dataset:

1. Preprocess and clean the input data.
2. Split the data into training and testing datasets.
3. Build a neural network model with the input dataset.
4. Compile the model with a suitable loss function, optimizer, and metrics.
5. Train the model and evaluate the performance.
6. Predictions can be made by passing a new input into the model."
"Convert the following list into a dictionary in Python: [1, 2, 3, 4, 5].","my_dict = {1:1, 2:2, 3:3, 4:4, 5:5}"
Generate code for a function that takes a string and returns its reverse.,"def reverseStr(string): 
    reversedString = """" 
    for i in range(len(string) -1, -1, -1): 
        reversedString += string[i] 
    return reversedString"
Generate a random string of length 5 with only lowercase alphabetic characters.,"import string
import random

def generate_random_string(length):
    allowed_characters = string.ascii_lowercase
    return ''.join(random.choices(allowed_characters, k=length))

random_string = generate_random_string(5)
print(random_string)"
Write a lambda expression to show the first character of a string.,"x = lambda a : a[0]
print(x(""Hello""))"
Write a Python program to find the sum of Fibonacci numbers till the number 7.,"def fibonacci(n): 
    f1 = 0
    f2 = 1
    sum_fib = 0
    for i in range(2, n + 1): 
        next_term = f1 + f2 
        sum_fib += next_term
        f1 = f2
        f2 = next_term 
    return sum_fib

print(fibonacci(7))"
Implement a comparison operator that takes two strings as arguments and returns true if the strings are equal and false otherwise.,"def equals(str1, str2):
    """"""Compares two strings to see if they are equal.""""""
    return str1 == str2"
"Write a Python program that uses the function ""get_name"" to ask the user for their full name and then prints it back to them.","def get_name():
    """"""Gets a user's full name .""""""
    first_name = input(""What is your first name? "")
    last_name = input(""What is your last name? "")
    return first_name + "" "" + last_name

if __name__ == '__main__':
    name = get_name()
    print(""Your name is"", name)"
"Manipulate the string ""Hello, World!"" using the correct Python function that will replace the word ""Hello"" with ""Goodbye"".","def goodbye_world(string):
    """"""Replaces the word Hello with Goodbye in the string.""""""
    return string.replace(""Hello"", ""Goodbye"")"
"Write code to take two numbers and determine if their product is even.8, 12","def is_sum_even(num1, num2):
    """"""Checks if the product of two numbers is even or odd.""""""
    sum = num1 * num2
    return sum % 2 == 0

if __name__ == ""__main__"":
    is_even = is_sum_even(8, 12)
    print(""Is the sum even? "", is_even)"
Take a string and remove all the duplicated words within it.,"def remove_duplicates(string):
    """"""Removes all repeated words from a string.""""""
    words = string.split()
    seen = set()
    result = []
    for word in words:
        if word not in seen:
            seen.add(word)
            result.append(word)
    return "" "".join(result)"
Write a function that returns the day of the week given a date.date = '2020-12-30',"date = '2020-12-30'

import datetime

def getDayofWeek(date):
    # Convert the string to datetime
    d = datetime.datetime.strptime(date, ""%Y-%m-%d"")
    # Return the day of the week
    return d.strftime(""%A"")

print(f""The day of the week for {date} is {getDayofWeek(date)}."")"
"Given three numbers, write a code to find the maximum among them.x = 10
y = 15
z = 5","x = 10
y = 15
z = 5

# Find the maximum
max_val = max(x, y, z)

print(f""The maximum among {x}, {y}, and {z} is {max_val}."")"
"Given a sequence of strings, write a code to check if all the strings in the sequence are unique.arr = [""cat"",""dog"",""mouse""]","arr = [""cat"",""dog"",""mouse""]

# Check if the strings are unique
def is_unique(arr):
    seen = set()
    for item in arr:
        if item in seen:
            return False
        seen.add(item)
    return True

if is_unique(arr):
    print(""All the strings in the sequence are unique."")
else:
    print(""Some of the strings in the sequence are not unique."")"
Write a Python program to create a Caesar Cipher encryption algorithm.,"def cipher(input_str, key):
  output_str = """"

  for char in input_str:
    if char.isalpha():
      # Encrypt each character
      ascii_value = ord(char)
      ascii_value = ascii_value + (key % 26)
      if char.isupper():
        if ascii_value > ord(""Z""):
          ascii_value -= 26
      elif char.islower():
        if ascii_value > ord(""z""):
          ascii_value -= 26  
      output_str += chr(ascii_value)
    else:
      output_str += char

  return output_str

if __name__ == '__main__':
  # Sample input
  input_str = 'Hello World!'
  key = 5
  print('Original input: {}'.format(input_str))

  # Encryting the string
  cipher_str = cipher(input_str, key)
  print('Encrypted input: {}'.format(cipher_str))

  # Decrypting the string
  plain_text = cipher(cipher_str, -key)
  print('Decrypted input: {}'.format(plain_text))"
Create a HQL query to sort records by descending order.,"SELECT *
FROM table
ORDER BY column DESC"
"Given a collection of integers, write a code to sort the integers in ascending order.arr = [5, 7, 3, 8, 10]","arr = [5, 7, 3, 8, 10]

# Sort the array
arr.sort()

print(f""Sorted list: {arr}"")"
Write an R statement to calculate the probability of getting a number greater than 5 from a range of 1 to 10.,"# Calculate the probability
probability = mean(x > 5)

print(f""Probability of getting a number greater than 5 from a range of 1 to 10 is {probability}."")"
"Write a code to convert a list of comma or semicolon separated strings into a single string.list = ['apple', 'orange', 'banana']","def convert_list_to_str(list):
    return "";"".join(list) 

print(convert_list_to_str(list))"
"Write a code to filter out numbers which are divisible by 3 and 5 from a given list.list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","def filter_3_5(nums): 
    return [num for num in nums if num % 3 == 0 and num % 5 == 0]

print(filter_3_5(list))"
"Create a class named 'Car' with the given properties.class Car: Make, Model, Year","class Car:
  def __init__(self, make, model, year):
    self.make = make
    self.model = model
    self.year = year"
"Create a method named 'combine' to combine two strings.String str1 = ""Hello"";
String str2 = ""World"";","public String combine(String str1, String str2) {
    return str1+str2;
}"
Output a Regex expression to match all dates in the following format dd/mm/yyyy,^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/[0-9]{4}$
Convert the following hexadecimal number FA to its binary form.FA,11111010
Calculate the area of a triangle with base b=4 and height h = 5.,The area of the triangle is 10 square units.
Write a Mongoose query to remove a document with a date field that has a value of 2021-01-05.,Model.remove({date: '2021-01-05'});
Calculate 3 to the 5th power.,243
Parse a given XML element.<root><book>Python for Dummies</book></root>,"def parse_xml(element):
    root = element.find('root')
    book = root.find('book').text
    return book"
"Generate an array with the following pattern [2, 4, 8, 16, ....1024]","def generate_pattern(x):
    arr = []
    for i in range(11):
        arr.append(x**i)
    return arr"
Classify text whether it is opinionated or objective.Today's climate is the warmest it has ever been.,Opinionated
"Fix the code so that it increments the number by 10 each time.num = 0
while num <= 10:
    num += 1","num = 0
while num <= 10:
    num += 10"
"Write a function that receives an array and removes every odd element from it.[1, 2, 3, 4, 5, 6, 7, 8]","def remove_odd(arr):
    return [i for i in arr if i % 2 == 0]"
What are the features of the Cython coding language?,"Cython is a programming language that combines the speed and flexibility of Python with the static typing system of C and C++. Features of Cython include type inference, function overloading, optional static type declarations, operator and operator overloading, fast C data types, integration with C/C++ libraries, and performance enhancements through code such as Just In Time (JIT) compilation and optimization."
Write a code for creating multiple variables with a single statement in Python.,"x, y, z = 1, 2, 3"
What is the difference between deep learning and traditional AI?,"The primary difference between deep learning and traditional AI is the way they process and interpret data. Deep learning uses a multi-layered artificial neural network in order to learn the patterns and features in data, while traditional AI uses symbolic reasoning and rule-based algorithms to process data. Deep learning is capable of learning complex patterns and features, often outperforming traditional AI methods, while traditional AI is limited to processing pre-defined and structured data."
"Write code in Python to extract all the words from a sentence and store them in an array.""Hello World!""","words = sentence.split("" "")"
Create an algorithm to traverse a binary tree in pre-order in Python.,"# A function to do preorder tree traversal
def preOrder(root):
  
    # Base Case
    if root is None:
        return
 
    # First print the data of node
    print(root.data),
 
    # Then recur on left child
    preOrder(root.left)
 
    # Finally recur on right child
    preOrder(root.right)"
"Given two strings, sort them in alphabetically ascending order.""javascript""
""python""","def sort_str(str1, str2): 
    # extract the words from the strings 
    str1_list = list (map (str, str1)) 
    str2_list = list (map (str, str2)) 
  
    # sort the strings 
    str1_list.sort() 
    str2_list.sort() 
  
    # join the chars of the strings 
    sorted_str1 = ''.join(str1_list) 
    sorted_str2 = ''.join(str2_list) 
  
    # check if the words are the same 
    if (sorted_str1 == sorted_str2): 
        return True
    else: 
        return False
            
print(sort_str(""javascript"", ""python""))"
Write a Python program to determine if an input string is a valid IP address.,"import re
def isValidIP(ip): 
    # check if the string is a valid IP address
    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''
    # compile the regex 
    pattern = re.compile(regex) 
    
    # Pass the string in search() method
    if(pattern.search(ip)):  
        return True
    else:  
        return False
    
# Driver Code
print(isValidIP(""192.168.0.1""))"
"Write a function to print the spiral ordering of an input matrix.[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]","def spiralPrint(m, n, a) : 
    k = 0; l = 0
  
    ''' k - starting row index 
        m - ending row index 
        l - starting column index 
        n - ending column index 
        i - iterator '''
  
  
    while (k < m and l < n) : 
          
        # Print the first row from the remaining rows  
        for i in range(l, n) : 
            print(a[k][i], end = "" "") 
              
        k += 1
  
        # Print the last column from the remaining columns  
        for i in range(k, m) : 
            print(a[i][n - 1], end = "" "") 
              
        n -= 1
  
        # Print the last row from the remaining rows  
        if ( k < m) : 
              
            for i in range(n - 1, (l - 1), -1) : 
                print(a[m - 1][i], end = "" "") 
              
            m -= 1
          
        # Print the first column from the remaining columns  
        if (l < n) : 
            for i in range(m - 1, k - 1, -1) : 
                print(a[i][l], end = "" "") 
              
            l += 1
  
a = [ [1, 2, 3, 4, 5, 6], 
      [7, 8, 9, 10, 11, 12],  
      [13, 14, 15, 16, 17, 18] ] 
        
spiralPrint(3, 6, a)"
"Write a regular expression to match the phrase ""hello people""",/hello\s+people/
Create a Python loop that iterates for 10 times.,"for i in range(10):
    ..."
Create a regex to extract links from a block of textText: The website www.example.com has great resources,Regex: https?://[\w\d./]+
Write an XPATH expression to select an element with a specific id,"//*[@id=""myElement""]"
Write a python script that takes user input and prints out the squares of the numbers,"# Take input from user
numbers = input(""Enter numbers: "") 
  
# split the string 
numbers = list(map(int, numbers.split(' '))) 
  
# Loop to print the squares of numbers
for number in numbers:
    print(number*number)"
"Extract the values of the keys of a given dictionary.Dictionary = {'name': 'John', 'age': 35, 'job': 'teacher'}","name - John
age - 35
job - teacher"
"Output the size of the below list.list_a = [1, 2, 3, 4]",4
"Create and fill a 2-dimensional list with the dimensions n and m.n = 3, m = 5",list_2d = [[0 for i in range(m)] for j in range(n)]
"Divide the list into two equal halves and output them.list_c = [1,2,3,4,5,6]","list1 = [1,2,3]
list2 = [4,5,6]"
"Annotate the given code with its functiondef foo(a, b): 
    c = a + b 
    return c","def foo(a, b): 
# This function adds two numbers and returns the sum
    c = a + b
    return c"
"Create a dictionary comprehension for the given data.{""A"":1, ""B"":2, ""C"":3, ""D"":4}","Dict = {key: value for key, value in {""A"":1, ""B"":2, ""C"":3, ""D"":4}.items()}"
"Generate a Jupyter notebook to display a scatterplot of a given dataset.Data: [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]","#Import relevant packages 
import pandas as pd 
import matplotlib.pyplot as plt

#Create dataframe
data = [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]
df = pd.DataFrame(data, columns = ['x','y']) 
  
#Create scatterplot
plt.scatter(x=df[""x""], y=df[""y""])

#Name axes
plt.xlabel('x')
plt.ylabel('y')

#Show figure
plt.show()"
Construct a while loop in Python to print all numbers less or equal to 10.,"i = 1

while(i <= 10):
  print(i)
  i += 1"
"Split a given string on the separator “:”.sentence = ""This:is:a:string""","sentence.split(':') 
# Output: ['This', 'is', 'a', 'string']"
"Write a function in Python to iterate over the items in a dictionary.dict = {'Apple':1, 'Orange':2, 'Mango':3}","def iterate_dictionary(dict): 
  for key in dict: 
    print(key, ':', dict[key]) 

iterate_dictionary(dict)"
"Given a string, write a code to print the length of the string.string = ""Hello world!""","print(len(string))
12"
"Based on the following input array, return the largest two numbers in the array.numbers = [10, 9, 8, 7, 6, 5]","# return the two largest numbers in the array
largestOne = max(numbers)
numbers.remove(largestOne)
largestTwo = max(numbers)
 
print(largestOne, largestTwo)
10 9"
"Under the given dictionary, write a code to replace the value at a given key.dictionary = {
    'name': 'David',
    'age': 20
}
key = 'name'
value = 'Eddie'",dictionary[key] = value
Change the capitalization of the a text string.Hello World,hello world
"Print the length and the middle element of the given array.arr = [1, 2, 3, 4, 5]","# print the length of array
print(len(arr))
5
 
# print the middle element of array
midIndex = len(arr) // 2
print(arr[midIndex])
3"
"Given an integer, calculate the sum of the numbers till that number.num = 7","# set the sum to 0
sum = 0

# loop from 1 to 7
for i in range(1, num+1):
   # add each number to ""sum""
   sum += i

# print the sum
print(sum)
28"
Provide an example of using Python's range() function to generate a range of numbers.,"# Print numbers from 0 to 9
for x in range(10):
  print(x)

# Print numbers from 3 to 8
for x in range(3, 9):
  print(x)

# Print numbers from 3 to 8 incrementing by 2
for x in range(3, 9, 2):
  print(x)"
"Generate a data frame with two columns: 'product' and 'price'product1: Burger
price1: $6
product2: Fries
price2: $2","import pandas as pd

data = {'product':['Burger', 'Fries'], 'price':[6, 2]}

df = pd.DataFrame(data)

print(df)"
Identify the dependent and independent variables in the following equationy=x^2+5,"Independent variable: x 
Dependent variable: y"
Calculate the greatest common divisor of 36 and 24,The greatest common divisor of 36 and 24 is 12.
Design a stack class for a language of your choice,"class Stack:
    def __init__(self):
        self.stack = []

    def push(self, item):
        self.stack.append(item)

    def pop(self):
        self.stack.pop()

    def peek(self):
        return self.stack[-1]

    def is_empty(self):
        return not self.stack"
"Create a new list of strings of length greater than 5 from another list[""apple"", ""banana"", ""carrot""]","long_words = [word for word in [""apple"", ""banana"", ""carrot""] if len(word) > 5]"
"Output the letter frequency from a textLorem ipsum dolor sit amet, consectetur adipiscing elit.","Letter frequency: 

L: 1
O: 2
R: 2
E: 2
M: 2
I: 2
P: 2
S: 2
U: 2
D: 1
A: 2
C: 2
T: 2
G: 1"
"Take the following pandas DataFrame, and convert it to a NumPy array.import pandas as pd

df = pd.DataFrame([[1,2,3], [4,5,6], [7,8,9]])","import numpy as np

df_array = np.array(df)"
"Find the value of a variable in a given environment.env={'key1': 1, 'key2': 2}
variable=""key2""",value = env[variable]
Implement a quick sort algorithm for a given array list.,"def quick_sort(A):
    quick_sort_helper(A, 0, len(A) - 1)

def quick_sort_helper(A, start, end):
    if start < end:
        p_index = partition_list(A, start, end)
        quick_sort_helper(A, start, p_index - 1)
        quick_sort_helper(A, p_index + 1, end)

def partition_list(A, start, end):
    pivot = A[end]
    p_index = start
    for i in range(start, end):
        if A[i] <= pivot:
            A[i], A[p_index] = A[p_index], A[i]
            p_index += 1
    A[p_index], A[end] = A[end] , A[p_index]
    return p_index"
Generate a list of all the divisors of a given number.,"def generateDivisors(n): 
    divisors = [] 
    for i in range(1, n + 1): 
        if n % i == 0: 
            divisors.append(i) 
              
    return divisors"
"Given a list of numbers and a target, write an algorithm to determine if the list contains a subset that sums up to the target.","def subsetsum(arr, target):
    n = len(arr)
    dp = [[False for x in range(target + 1)] for y in range(n + 1)]
    dp[0][0] = True

    for i in range(1, n+1):
        for j in range(target + 1):
            dp[i][j] = dp[i-1][j] or (arr[i-1] <= j and dp[i-1][j - arr[i-1]])
    return dp[n][target]"
Formulate a MATLAB expression for calculating the sum of the first 10 natural numbers.,answer = sum(1:10)
Write an Objective-C program for printing the factorial of a number 5.Integer number: 5,"#include <stdio.h>

int factorial(int n)
{
    int result = 1;
    for (int i = 1; i <= n; i++) {
        result *= i;
    }
    return result;
}

int main()
{
    int input = 5;
    int result = factorial(input);
    printf(""The factorial of %d is %d"", input, result);
    return 0;
}"
Create a function in Python that will return the maximum difference between any two numbers present in an array.,"def max_difference(arr):
    difference = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[j] - arr[i] > difference:
                difference = arr[j] - arr[i]
    return difference"
"An array of integers is given, write a function to print the second largest element of the array.","def secondLargest(arr):
    first = 0
    second = 0
    for i in range(len(arr)):
        if arr[i] > first:
            second, first = first, arr[i]
        elif (arr[i] > second and arr[i] < first):
            second = arr[i]
    return second"
"Create a Regex expression that will match strings that contain the word ""hello"".",\bhello\b
"Given the following string, provide a function to reverse it.""Hello World!""","def reverseString(s):
    return s[::-1]"
Write a code in Python that will take a string as input and return it with the words in reverse order.,"def reverseWords(s):
    words = s.split("" "")
    words.reverse()
    return "" "".join(words)"
"Construct a loop through this string of characters to check for the letter ‘x’. Report what the loop index was when the letter ‘x’ was found.string = ""abcedfghijx""","string = ""abcedfghijx""

for idx, char in enumerate(string):
    if char == 'x':
        print(f""The loop index was {idx} when the letter 'x' was found."")
        break"
Write a code to generate a list of numbers from 10 to 20 (inclusive).,"list_nums = [i for i in range(10, 21)]"
Suggest a function to convert a given tuple of strings into a dictionary.,"def tuple_to_dict(tup):
    return {tup[i] : tup[i+1] for i in range(0, len(tup), 2)}"
Suggest a data structure to store the student details for a school.,"A dictionary could be used to store the student details. Each key could be the student's name, and each value could be a tuple containing the student's age, grade and classes.

student_data = {
    'John' : (15, 8, ['Math', 'English']),
    'Mary' : (14, 7, ['Science', 'History'])
}"
"Create a program that takes two inputs, an array of strings and an array of integers. Output an array with the strings at the same indices as the integers.String[] strings = {""cat"", ""dog"", ""bird"", ""fish""};
    int[] indices = {1, 0, 3, 2};","String[] output = new String[4];
for(int i = 0; i < strings.length; i++) {
 output[indices[i]] = strings[i];
}
System.out.println(Arrays.toString(output));"
"Recreate a function that sorts the elements of an array using bubble sort.int[] array = {4, 3, 6, 5, 1, 2};","void bubbleSort(int array[]) {
 int temp;
 for(int i = 0; i < array.length; i++) {
  for(int j = 0; j < array.length - 1; j++) {
   if(array[j] > array[j+1]) {
    temp = array[j];
    array[j] = array[j+1];
    array[j+1] = temp;
   }
  }
 }
}"
"Given an array with negative and positive numbers, create a function to find the smallest positive number inside the array.int[] array = {-3, -2, -1, 1, 2, 3, 4};","int smallestPositive = Integer.MAX_VALUE;
for (int i = 0; i < array.length; i++) {
 if (array[i] > 0 && array[i] < smallestPositive) {
  smallestPositive = array[i];
 }
}
System.out.println(smallestPositive);"
Create a machine learning model in Python to predict the total surface area of a cube given its side lengthside_length = 3,"import numpy as np
from sklearn.linear_model import LinearRegression 

# Data
X_train = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)
y_train = np.array([6, 12, 18, 24, 30])

# Model 
model = LinearRegression()
model.fit(X_train, y_train)

# Prediction
side_length = 3 
pred = model.predict([[side_length]])
print('The surface area for a cube with side length %.2f is %.2f' % (side_length, pred[0]))"
Produce a regex pattern to validate a US phone number format,"^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$"
Compose an R expression to determine the median of a vector,median(x)
"Edit this code to fix the bug in the programdef print_longest_word(words):
 longest_word = """"
 for word in words:
 if len(word) > len(longest_word):
 longest_word = word
 print(longest_word)
words = [""hello"", ""cat""]
print_longest_word(words)","def print_longest_word(words):
 longest_word = """"
 for word in words:
 if len(word) > len(longest_word):
 longest_word = word
 print(longest_word)
words = [""hello"", ""cat""]
print_longest_word(words)

if len(words) > 0:
 longest_word = words[0]
 for word in words:
 if len(word) > len(longest_word):
 longest_word = word
 print(longest_word)"
"Print the character at the specified index in a given string.s = ""Hello World!""
index = 5","s = ""Hello World!""
index = 5

print(""Character at index"", index, ""is:"", s[index])

Output: Character at index 5 is: W"
"Create a function to classify the following sentence into ""positive"" or ""negative"".The movie was bad","def classify_sentence(sentence):
  if ""bad"" in sentence:
    return ""negative""
  else:
    return ""positive""

# Driver code
sentence = ""The movie was bad""
print(""Sentence is classified as:"", classify_sentence(sentence))

Output: Sentence is classified as: negative"
"Create a function in Python that takes one parameter, a list, and outputs the list in reverse.myList = [1, 2, 3, 4]","def reverseList (list): 
  list.reverse() 
  return list
  
reverseList(myList) # Returns [4, 3, 2, 1]"
"You are given a list of numbers. Construct a for loop to filter out the odd numbers from the list.arr = [1,2,3,4,5]","odds = []
for num in arr:
  if num % 2 == 1:
    odds.append(num)
print(odds)"
Generate a random password that complies with certain conditions.,"import random
import string

def generate_password(length):
    password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))
    if any(char.islower() for char in password) and any(char.isupper() for char in password) and any(char.isdigit() for char in password):
        return password

generated_password = generate_password(8)
print(generated_password)"
"Create a script to transpose a matrix.matrix = [[1,2,3],[4,5,6],[7,8,9]]","def transpose_matrix(matrix):
    transposedMatrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0])) ]
    return transposedMatrix

transposedMatrix = transpose_matrix(matrix)
print(transposedMatrix)"
Initialize a list of length n using an input n.n = 10,"my_list = [0] * n
print(my_list)"
Write a RegEx to match all numeric strings that start with 6 and contain 4 characters.,^6\d{3}$
Create a function to convert a given word to title case.,"def to_title_case(word):
    return word[0].upper() + word[1:].lower()"
"You are given a matrix. Construct a for loop to check if any of the elements in the matrix is 0.matrix = [[1,2,3],[4,0,6],[7,8,9]]","def check_zero(matrix):
    for row in matrix:
        for num in row:
            if num == 0:
                return True
    return False

print(check_zero(matrix))"
Reverse the words of a given sentence but keep the order of the words intact.I am a programmer,"def reverse_words(sentence):
    words = sentence.split(' ')
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)

print(reverse_words('I am a programmer')) # Outputs: ""I ma a remmargorp"""
"Create a program to convert a bi-dimensional array into a single array.[[1, 2], [3, 4]]","def flatten_array(array):
result = []
for sub_array in array:
    result.extend(sub_array)
return result

print(flatten_array([[1, 2], [3, 4]])) # Outputs: [1,2,3,4]"
"Find the two elements in a given array that sums up to the target number.[1, 8, 10, 12], target = 18","def two_sum_elements(arr, target):
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == target:
                return [arr[i], arr[j]]
    return None

print(two_sum_elements([1, 8, 10, 12], 18)) # Outputs: [8, 10]"
Output the word which has maximum frequency in a given string.The sun has set and the moon has risen.,the
"Given an array, reverse the elements inside it so that the first element becomes the last and vice versa.[1, 2, 3, 4]","[4, 3, 2, 1]"
"Parse a string of words and output an array containing only the uppercase words.""I Love Coding""","['I', 'LOVE', 'CODING']"
"Given an array containing integers, calculate the sum of the elements in each row and print the result.[[1, 2, 3], [4, 5, 6]]","[6, 15]"
"Automatically reformat the following code to be more readable:for (int i=0;i<n;i++){int j=0;System.out.println(""The value of j is: ""+j);","for (int i = 0; i < n; i++) {
    int j = 0;
    System.out.println(""The value of j is: "" + j);
}"
"Write a function that given a list of unique integers, returns the sum of the non-duplicated integer elements.[1, 2, 2, 3, 4, 5, 6]","def sumNonDuplicates(arr):
    sum = 0
    for num in arr:
        if arr.count(num) == 1:
            sum += num
    return sum"
Output an array with all the prime numbers between 2 and n.6,"[2, 3, 5]"
"Create an algorithm that takes two numbers a and b and returns the largest number.a = 5, b = 6","""""""
An algorithm that takes two numbers a and b and returns the largest number
""""""

def get_largest_number(a, b):
    if (a > b):
        return a
    else:
        return b
    
if __name__ == ""__main__"":
    print (get_largest_number(5, 6))"
"Given a string, print all its permutations.british","""""""
Given a string, print all its permutations
""""""
def permute(string):
    if len(string) == 1:
        return string
    permutations = []
    for i,c in enumerate(string):
        for perm in permute(string[:i]+string[i+1:]):
            permutations.append(c+perm)
    return permutations

if __name__ == ""__main__"":
    print (permute(""british""))"
"Create a class called ""Vector"" with x and y coordinates.","""""""
Create a class called ""Vector"" with x and y coordinates
""""""
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

if __name__ == ""__main__"":
    v = Vector(2, 3)
    print (v.x, v.y)"
"Write a function that takes a sentence and returns the reversed version of that sentence.Hello, world!","""""""
Write a function that takes a sentence and returns the reversed version of that sentence
""""""

def reverse_sentence(sentence):
    word_list = sentence.split()
    reversed_str = "" "".join(word_list[::-1])
    return reversed_str

if __name__ == ""__main__"":
    print(reverse_sentence(""Hello, world!""))"
Design a simple calculator program using a switch statement.,"""""""
Design a simple calculator program using a switch statement
""""""

def calculator(operator, x, y):
    switch = {
        '+': x + y,
        '-': x - y,
        '*': x * y,
        '/': x / y
    }
    return switch.get(operator, ""Invalid operator"")

if __name__ == ""__main__"":
    print(calculator('+', 2, 3))
    print(calculator('*', 4, 2))
    print(calculator('/', 6, 3))
    print(calculator('&', 8, 2))"
"Implement a sorting algorithm to sort a given array of size 10.array: [2, 3, 5, 7, 1, 4, 6, 9, 8, 0]","void sort(int array[], int arraySize) { 
    for (int i = 0; i < arraySize-1; i++)   
        for (int j = 0; j < arraySize-i-1; j++)  
            if (array[j] > array[j+1])  
            { 
                int temp = array[j]; 
                array[j] = array[j+1]; 
                array[j+1] = temp; 
            } 
}"
"Format this list such that each element is in a new line.list_of_numbers = [1,2, 3, 4, 5]","""""""
Format this list such that each element is in a new line
""""""

list_of_numbers = [1,2, 3, 4, 5]

# Format the list such that each element is in a new line
for num in list_of_numbers:
    print(num)"
"Create a code to sort this list in a descending ordermy_list = [1,9,3,5,7]","""""""
Sort this list in a descending order
""""""

my_list = [1,9,3,5,7]

# Sort the list in a descending order
my_list.sort(reverse=True)
print(my_list)"
"Calculate the sum of the elements in this list.my_list = [2,5,4,7,5]","""""""
Calculate the sum of the elements in this list
""""""

my_list = [2,5,4,7,5]

# Calculate the sum of the elements in this list
total = 0
for num in my_list:
    total += num

print(total)"
"Add 'excellent' as the last element in this list.sports_list = ['soccer', 'rugby', 'hockey']","""""""
Add 'excellent' as the last element in this list
""""""

sports_list = ['soccer', 'rugby', 'hockey']

# Add 'excellent' as the last element in this list
sports_list.append('excellent')
print(sports_list)"
"Change the value of the second element of this list to 'cricket'.sports_list = ['soccer', 'rugby', 'hockey']","""""""
Change the value of the second element of this list to 'cricket'
""""""

sports_list = ['soccer', 'rugby', 'hockey']

# Change the value of the second element of this list to 'cricket'
sports_list[1] = 'cricket'
print(sports_list)"
Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages.,"""""""
Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages
""""""

dwarfs = {""Doc"": 84, 
          ""Grumpy"": 67,
          ""Happy"": 76,
          ""Sleepy"": 75,
          ""Sneezy"": 71,
          ""Dopey"": 76,
          ""Bashful"": 70}
print(dwarfs)"
Extend the range from 25 to 35.my_list = list(range(25)),"""""""
Extend the range from 25 to 35
""""""

my_list = list(range(25, 36))
print(my_list)"
"Delete the last three elements from this list.my_list = [1, 4, 6, 7, 6, 8, 9]","""""""
Delete the last three elements from this list
""""""

my_list = [1, 4, 6, 7, 6, 8, 9]

# Delete the last three elements from this list
my_list = my_list[:-3]
print(my_list)"
Count the length of this string.my_string = 'Hello World!',"""""""
Count the length of this string
""""""

my_string = 'Hello World!'

# Count the length of this string
length = len(my_string)
print(length)"
"Classify the following statement as an example of a Boolean expression: ""2 * 3 - 5 > 11"".2 * 3 - 5 > 11",True
Create a lambda function in Python that collects all the numbers between 0 and 10 that are divisible by 3.,"lambda x: [x for x in range(0, 11) if x % 3 == 0]"
"Compute the average of the following numbers: 45, 20, 15, 100, 75.",54
Write a Python code snippet to generate a list of the first five powers of the number 2.,"[2**0, 2**1, 2**2, 2**3, 2**4]"
"Write a regular expression to match the following sentence: ""Mary had a little lamb"".",/Mary\s+had\s+a\s+little\s+lamb/
"Modify the following Keras model to add one 1D convolutional layer before the last layer.model = Sequential()
model.add(Dense(64, activation='relu', input_dim=100))
model.add(Dense(1, activation='sigmoid'))","model = Sequential()
model.add(Dense(64, activation='relu', input_dim=100))
model.add(Conv1D(32, 3))
model.add(Dense(1, activation='sigmoid'))"
"Write a regular expression to match a string that contains the word ""Hello"" at the start of the string.",^Hello.*
Create a function to take two integers and return the larger one.,"def larger(num1, num2):
    """"""Takes two integers and returns the larger one.

    Args:
        num1 (int): The first integer.
        num2 (int): The second integer.

    Returns:
        int: The larger of the two given integers.
    """"""
    return max(num1, num2)"
"Using GraphQL, write a query to get name, age and address of all instructors in a training center.","query {
  instructors {
    name
    age
    address
  }
}"
"Implement a function, sumOfSquares, that takes two integers and calculates the sum of their squares.","def sumOfSquares(num1, num2):
    return num1**2 + num2**2"
Automate calculations in Excel by writing a VBA program to calculate the sum of two columns.,"Sub columns_sum()
  Dim cell As Range
  Dim first_sum As Integer, second_sum As Integer
 
  For Each cell In Range(""A1:A5"")
    first_sum = first_sum + cell.Value
  Next cell
 
  For Each cell In Range(""B1:B5"")
    second_sum = second_sum + cell.Value
  Next cell
 
  Range(""D3"").Value = first_sum + second_sum
 
End Sub"
What is the maximum length of a URL as defined in RFC 2396?,"According to RFC 2396, the maximum length of a URL is 2048 characters."
"Using MapReduce, calculate the average age of the users in a given dataset.","map(key, value)
{
  age = value.age
  emit(null, age)
}

reduce(key, values)
{
  total = 0
  count = 0
  foreach (value in values)
  {
    total = total + value
    count = count + 1
  }
  avg_age = total/count
  emit(null, avg_age)
}"
Generate pseudocode for a program that takes in an integer and prints out all the factors of the given integer.int num = 18,"//Pseudocode 
 
//Function to obtain the factors of given input
function obtainFactors(int num){ 

 //Variable to store the factors 
 List factors = [] 

 //Loop through all number less than the given input 
 for i = 1 to num { 

    //Check if a particular number is a factor of the given input 
    if num % i == 0 { 

       //Add the number to the list of factors 
       factors.add(i) 
    } 
 } 
 
 //Print out the list of factors 
 print(factors) 
}"
"Create an algorithm for counting the occurences of a specific character in a string.String: ""GPT Learning""
Character: ""t""","//Declare a variable to store the count 
int count = 0

//Loop through the string
for i = 0 to (string length) { 

   //Check if the character matches the given one 
   if string[i] == character{ 
       //Increment the count 
       count++ 
   } 

} 

//Print out the count 
print(count)"
"Generate a Python code to calculate the compound interest.Principal = 2000 
Rate of Interest = 0.09 
Time = 5","# Python program to calculate compound interest 

def compound_interest(principal, rate, time): 

    # Calculates compound interest 
    CI = principal * (pow((1 + rate / 100), time)) 

    print(""Compound interest is"", CI) 

# Driver Code 
compound_interest(2000, 0.09, 5)"
"Develop an algorithm for bubble sorting.[5, 2, 1, 8, 0, 9, 4]","#Function to sort an array using bubble sort
def bubbleSort(arr):
  #Loop through all elements in the array
  for i in range(len(arr)):
    #Loop through all elements up to the one larger than the one at the current position
    for j in range(0, len(arr)-i-1):
      #Swap elements if necessary
      if arr[j] > arr[j+1] :
        arr[j], arr[j+1] = arr[j+1], arr[j]

#Driver code
arr = [5,2,1,8,0,9,4]
bubbleSort(arr)"
Write a function that takes two parameters called firstName and lastName and prints them in the format of firstName + lastName.,"def printFullName(firstName, lastName):
  print(firstName + "" "" + lastName)"
Create a program that creates a dictionary containing only the squares of numbers up to nn = 10,"# Create a program that creates a dictionary containing only the squares of numbers up to n

n = 10
dict_squares = {x: x*x for x in range(1, n+1)}
print(dict_squares) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}"
Format a given number to a specified number of decimal placesnum = 12.34567,"# Format a given number to a specified number of decimal places

num = 12.34567
formatted_num = ""{:.2f}"".format(num)
print(formatted_num) # 12.35"
"Print all unique combinations of an array of integersnums = [1,2,3]","# Print all unique combinations of an array of integers

def all_combinations(nums):
  result = [[]]
  for num in nums:
    temp_result = []
    for res in result:
      temp_result.append(res + [num])
    result.extend(temp_result)
  return result

print(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]"
"Create a function to allocate resources to partiesdata = [[""Joe"",5],[""John"",3],[""Mary"",2]]","# Create a function to allocate resources to parties

def allocate(data):
    total = 0
    for item in data: 
        total += item[1] 
    allocation = [i[1]/total for i in data] 
    return allocation

print(allocate(data)) # [0.5, 0.3, 0.2]"
"Replace every character in a given string with its corresponding ASCII codestring = ""Hello""","# Replace every character in a given string with its corresponding ASCII code

def encode_string(string):
    result = """"
    for char in string:
        result += str(ord(char))
    return result

print(encode_string(string)) # ""72 101 108 108 111"""
Generate CNN-LSTM model in Keras.,"# define CNN model
model_cnn = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPool2D(),
    Flatten(),
    Dense(100, activation='relu'),
    Dense(10, activation='softmax')
])

# define RNN model
model_lstm = Sequential()
model_lstm.add(LSTM(128, input_shape=(28, 28, 32)))
model_lstm.add(Dense(100, activation='relu'))
model_lstm.add(Dense(10, activation='softmax'))

# define the model
model = Sequential()
model.add(Convolution2D(32, 3, 3, input_shape=(28, 28, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(LSTM(128))
model.add(Dense(100, activation='relu'))
model.add(Dropout(.2))
model.add(Dense(10, activation='softmax'))"
"Create a function to convert a given quantiy of money from one currency to another.amount: 10
from_currency: USD
to_currency: GBP","def convert_currency(amount, from_currency, to_currency):
    # use a free online currency conversion API like Fixer
    # to convert an amount from one currency to another
    response = requests.get(f""http://data.fixer.io/api/convert?access_key=<your_key>&from={from_currency}&to={to_currency}&amount={amount}"")
    return response.json()[""result""]"
"Edit this code to add a try-except block to catch any errors.def repeat(string, repeats): 
    for i in range(repeats): 
        print(string) 
 
repeat(""Hello World!"", 5)","def repeat(string, repeats): 
    try:
        for i in range(repeats): 
            print(string)
    except:
        print(""Error occured"")
 
repeat(""Hello World!"", 5)"
Design an API to pull company data from an external source.,"""""""
API to pull company data from an external source.

Parameters:
1. company_id: Unique id of the company
2. fields: List of strings of fields to include in the response

Returns:
A JSON containing the specified fields from the external source.
""""""

def get_company_data(company_id, fields):
    # use an external API to fetch the data
    response = requests.get(f""http://example.com/api/company?id={company_id}"")
    data = response.json()
    response_data = {}
    for field in fields:
        response_data[field] = data[field]
    return response_data"
"Given a list of words, write a Python function to print the frequency of occurrence of each word in the list.['foo', 'bar', 'foo', 'baz', 'bar']","def word_frequency(words):
    freq = {}
    for word in words:
        if word not in freq:
            freq[word] = 0
        freq[word] += 1    
    for word, count in freq.items():
        print('{}: {}'.format(word, count))
        
word_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])"
"Implement a function in Python that calculates the median of a given input array.[5, 2, 6, 8, 10]","def calculateMedian(arr):
    n = len(arr)
    arr.sort()
 
    if n % 2 == 0:
        median1 = arr[n//2]
        median2 = arr[n//2 - 1]
        median = (median1 + median2) / 2
    else:
        median = arr[n // 2]
 
    return median
 
print(""Median is: "" + str(calculateMedian([5, 2, 6, 8, 10])))"
"Extract the first 3 characters of an input string using Python.String = ""Hello World!""","string = ""Hello World!""

#Extract first 3 characters 
first_3_characters = string[0:3]

print(first_3_characters)"
Use Tensorflow to classify a given input dataset of animals as cats or dogs.Input dataset contains images of cats and dogs.,"import tensorflow as tf 
#get the dataset
dataset = load_dataset()

# create the input pipeline
iterator = dataset.make_initializable_iterator()
next_element = iterator.get_next()

#build the model
model=Sequential()
#input layer
model.add(Conv2D(32,(3,3), activation='relu',input_shape=(input_width,input_height,input_channels)))
#max pooling
model.add(MaxPooling2D(pool_size=(2,2)))
#flatten
model.add(Flatten)
#hidden layer
model.add(Dense(64,activation='relu'))
#output layer
model.add(Dense(2,activation='sigmoid'))

#train model
model.compile(optimizer='SGD', Loss=""binary_crossentropy"",metrics=['accuracy'])
model.fit(dataset,epochs=5)"
How would you define a class in Python to represent a college student?,"class CollegeStudent:
    def __init__(self, name, year, major):
        self.name=name
        self.year=year
        self.major=major
        
    def get_name(self): 
       return self.name 
   
    def get_year(self): 
       return self.year 
       
    def get_major(self): 
       return self.major"
"Update the following code so that it prints the numbers from 0-9 instead of 0-8.for i in range(8):
    print(i)","for i in range(10):
    print(i)"
Develop a Python function to calculate a Fibonacci number based on a given index.,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"") 
        
    elif n==1: 
        return 0
    
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)"
"Suppose you have a dictionary containing the records of some student marks. Write a Python program to calculate the average marks of all the students.student_mark_dict = {
    'John': [50, 70, 60],
    'Harry': [20, 60, 80],
    'Tom': [90, 70, 80] 
}","def averageMarks(student_mark_dict):
    total = 0
    total_marks = 0
    for key, value in student_mark_dict.items():
        total += sum(value)
        total_marks += len(value)
        
    return total/total_marks"
Develop a function in Python to delete the duplicates of a given string.string = 'Hello World!',"def deleteDuplicates(string):
    unique_string = ''
    for i in string:
        if i not in unique_string:
            unique_string += i
    return unique_string"
What data type does the following variable belong to: 500?,integer
"A given array contains the numbers 1, 5, 9 and 13. Write a function to find out if 15 is present in the array or not.array = [1, 5, 9, 13]","def findNumber(array):
    return 15 in array"
"Given a string, develop a function to find out how many words are present in it.string = 'Hello world!'","def countWords(string):
    return len(string.split())"
"Rewrite the following function as a lambda function.def fahrenheit(T):
    return ((float(9)/5)*T + 32)",fahrenheit = lambda T : ( ( float(9) / 5 )*T + 32 )
"Convert the following code from imperative style to functional style.list = [1,2,3,4,5]
for x in list:
    if x % 2 == 0:
        print(x)","list = [1,2,3,4,5]
evens = list(filter(lambda x: x % 2 == 0, list))
print(evens)"
"Add the missing parentheses and brackets for the for loop.for x range(0, 5):
print(x)","for x in range(0, 5):
    print(x)"
"Parse the following list of names into separate strings.names = [""John Smith"", ""Alice Bryant"", ""Bob Johnson"", ""Harry Evans""]","for name in names:
    first_name, last_name = name.split(' ')
    print('First name: {} ; Last name: {}'.format(first_name, last_name))

# Output
First name: John ; Last name: Smith
First name: Alice ; Last name: Bryant
First name: Bob ; Last name: Johnson
First name: Harry ; Last name: Evans"
What language is the following code written in?for (i=0; i<n; i++),C or C++
"Update the following code to sum the elements in a given listlist = [1,3,4,5]","sum = 0
for elem in list:
    sum += elem"
"Create a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values.list1 = ['a', 'b', 'c']
list2 = [1, 2, 3]","def zip_lists(list1, list2):
  zipped_dict = {}
  for k, v in zip(list1, list2):
    zipped_dict[k] = v
  return zipped_dict

print(zip_lists(list1, list2))"
"Inspect the given code and find any possible bugs.def find_sum(lst):
    """"""Return the sum of a given list of numbers.""""""
    res = 0
    for x in list:
        res += x
    return res","def find_sum(lst):
    """"""Return the sum of a given list of numbers.""""""
    res = 0
    for x in lst:
        res += x
    return res # was missing, was iterating over list instead of lst."
Create a machine learning model to predict a binary class.,"# import the necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# preprocess the data
df = pd.read_csv('data.csv')
X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# train the model
lr = LogisticRegression().fit(X_train, y_train)

# evaluate the model
train_score = lr.score(X_train, y_train)
test_score = lr.score(X_test, y_test)
print(f""Train score: {train_score}"")
print(f""Test score: {test_score}"")"
Construct a regular expression to match strings containing only alphabets.,/^[a-zA-Z]+$/
Develop an algorithm to calculate the circumference of a circle provided the radius.radius = 5,"def calculate_circumference(radius):
  circumference = 2*3.14*radius
  return circumference"
"Create a program in Python that sorts the following list and prints the sorted version of the list.mylist = [1, 5, 9, 2, 6, 8]","mylist = [1, 5, 9, 2, 6, 8]
mylist.sort()
print(mylist)"
"Add code to this function to return the square of the input number.def square_number(number):
1","def square_number(number):
   return number*number"
"Write a function to compare two strings. The function should return true if the strings are equal and false if the strings are not equal.string_1 = ""Hello""
string_2 = ""World""","def compare_strings(string_1, string_2):
 if string_1 == string_2:
    return True
 else:
    return False"
Write a query to find the author with the highest number of books in each year.,"SELECT year, author, MAX(books) AS most_books
FROM authors
GROUP BY year;"
"Find the position of the substring ""is"" in the string.string = ""This is an example""","string = ""This is an example""
print(string.find(""is""))"
"Create a program in Python that takes two numbers as input and prints the result of the multiplication of those numbers.num_1 = 10
num_2 = 15","num_1 = 10
num_2 = 15
print(num_1 * num_2)"
"Suppose you are given a array of 0s,1s and 2s . Write a program to sort the given input array.","def sortArray(arr): 
      
    # loop to run for every element in the array 
    for i in range(len(arr)): 
          
        # loop to run for elements till the sorted part 
        for j in range(0, len(arr)-i-1): 
  
            # If a element is found to be greater than its next element then swap them 
            if arr[j] == 2 and arr[j+1] in [0,1]: 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
            elif arr[j] == 1 and arr[j+1] == 0: 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
                  
    return arr"
"Offer a solution for converting a bank of binary strings, represented as an array, to Decimal numbers.","def binaryToDecimal(binary): 
    # to store decimal number 
    decimal, i = 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i = i + 1
    return decimal"
Design a program to solve a 3x3 Sudoku puzzle.,"# A Backtracking program  
# in Python to solve Sudoku problem  
  
# A Utility Function to print the Grid  
def print_grid(arr): 
    for i in range(9): 
        for j in range(9): 
            print(arr[i][j]), 
        print ('n') 
  
# Function to Find the entry in the Grid that is still  not used 
# Searches the grid to find an entry that is still unassigned. If 
# found, the reference parameters row, col will be set the location 
# that is unassigned, and true is returned. If no unassigned entries 
# remain, false is returned. 
# 'l' is a list  variable that has been passed from the solve_sudoku function 
# to keep track of incrementation of Rows and Columns 
def find_empty_location(arr,l): 
    for row in range(9): 
        for col in range(9): 
            if(arr[row][col]==0): 
                l[0]=row 
                l[1]=col 
                return True
    return False
  
# Returns a boolean which indicates whether any assigned entry 
# in the specified row matches the given number. 
def used_in_row(arr,row,num): 
    for i in range(9): 
        if(arr[row][i] == num): 
            return True
    return False
  
# Returns a boolean which indicates whether any assigned entry 
# in the specified column matches the given number. 
def used_in_col(arr,col,num): 
    for i in range(9): 
        if(arr[i][col] == num): 
            return True
    return False
  
# Returns a boolean which indicates whether any assigned entry 
# within the specified 3x3 box matches the given number 
def used_in_box(arr,row,col,num): 
    for i in range(3): 
        for j in range(3): 
            if(arr[i+row][j+col] == num): 
                return True
    return False
  
# Checks whether it will be legal to assign num to the given row,col 
# Returns a boolean which indicates whether it will be legal to assign 
# num to the given row,col location. 
def check_location_is_safe(arr,row,col,num): 
      
    # Check if 'num' is not already placed in current row, 
    # current column and current 3x3 box 
    return not used_in_row(arr,row,num) and not used_in_col(arr,col,num) and not used_in_box(arr,row - row%3,col - col%3,num) 
  
# Takes a partially filled-in grid and attempts to assign values to 
# all unassigned locations in such a way to meet the requirements 
# for Sudoku solution (non-duplication across rows, columns, and boxes) 
def solve_sudoku(arr): 
      
    # 'l' is a list variable that keeps the record of row and col in find_empty_location Function     
    l=[0,0] 
      
    # If there is no unassigned location, we are done     
    if(not find_empty_location(arr,l)): 
        return True
      
    # Assigning list values to row and col that we got from the above Function  
    row=l[0] 
    col=l[1] 
      
    # consider digits 1 to 9 
    for num in range(1,10): 
          
        # if looks promising 
        if(check_location_is_safe(arr,row,col,num)): 
              
            # make tentative assignment 
            arr[row][col]=num 
  
            # return, if success, ya! 
            if(solve_sudoku(arr)): 
                return True
  
            # failure, unmake & try again 
            arr[row][col] = 0
              
    # this triggers backtracking         
    return False 
  
# Driver main function to test above functions 
if __name__==""__main__"": 
      
    # creating a 2D array for the grid 
    grid=[[0 for x in range(9)]for y in range(9)] 
      
    # assigning values to the grid 
    grid=[[3,0,6,5,0,8,4,0,0], 
          [5,2,0,0,0,0,0,0,0], 
          [0,8,7,0,0,0,0,3,1], 
          [0,0,3,0,1,0,0,8,0], 
          [9,0,0,8,6,3,0,0,5], 
          [0,5,0,0,9,0,6,0,0], 
          [1,3,0,0,0,0,2,5,0], 
          [0,0,0,0,0,0,0,7,4], 
          [0,0,5,2,0,6,3,0,0]] 
      
    # if sucess print the grid 
    if(solve_sudoku(grid)): 
        print_grid(grid)
    else: 
        print ""No solution exists"""
"Create a function that takes a String and adds a period punctuation mark at the end.phrase = ""I am having a good day""","def add_period(phrase):
    if not isinstance(phrase, str):
        raise ValueError(""phrase should be a String"")
    return phrase + ""."""
Update the code to sum the numbers from 0 to 10 and store the result in the 'total' variable.total = 0,"total = 0
for i in range(11):
    total += i"
"Construct a program to compute the sum of two numbers and display the result.number1 = 5
number2 = 10","total = number1 + number2
print(""The total is"", total)"
Compute the square root of the number 25 and store the output in a variable called 'output'.,"import math
output = math.sqrt(25)"
"Create a variable in R and assign it with a string value of ""Hello World"".","my_string <- ""Hello World"""
"Compile the given piece of code and identify any errors.int main() 
{
 cout << ""Hello World!"";
  return 0;
 }",No errors present.
"Formulate an algorithm that helps you arrange a given set of numbers in ascending order.[7, 4, 8, 9, 11]","1. Take two variables, say x and y. 
2. Assign x the value of the first element in the list and y the value of the second element.
3. Compare x and y. 
4. If x > y, swap them.
5. Now x is the smallest and move to the next element in the list. Repeat from step 2 with y and new element.
6. At the end of the array, the list is sorted."
Design a program to generate prime numbers between 1 and 50.,"# Program to print the prime numbers between 1 and 50
 
for num in range(1, 51):

   # prime numbers are greater than 1
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:  
           print(num)"
"Design a function in Python for computing the multiplication of 3 numbers.4, 5, 6","def multiply_three(a, b, c):
    return a * b * c

multiply_three(4, 5, 6) # returns 120"
"Write code in Python to calculate the area of a triangle given 3 sides.side1 = 12
side2 = 15
side3 = 10","def areaTriangle( side1, side2, side3): 
    # calculate the semi-perimeter 
    s = (side1 + side2 + side3) / 2
    
    # calculate the area 
    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5
    return area 

# Driver code 
side1 = 12
side2 = 15
side3 = 10

# calculate area 
area = areaTriangle(side1, side2, side3) 

# print
print(""Area of a triangle is :{0:0.2f}"".format(area))"
Write a script in Python that can classify a sentence as positive or negative.The movie was terrible and boring.,"import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

sentence = ""The movie was terrible and boring.""
analysis = SentimentIntensityAnalyzer()
score = analysis.polarity_scores(sentence)
if score[""compound""] >= 0.5:
    output = ""positive""
else:
    output = ""negative""

print(""The sentiment of the sentence is:"", output)"
"Design a program to search for a given string within an array of strings.arr = ['hello', 'world', 'how', 'are', 'you']
given_str = 'how'","def search(arr, given_str):
    for item in arr:
        if item == given_str:
            return True
    return False"
"Write a function to remove a given element from an array of integers.arr = [2, 3, 4, 5, 6]
remove_element = 4","def remove_element(arr, remove_element):
    new_arr = []
    for item in arr:
        if item != remove_element: 
            new_arr.append(item)
    return new_arr"
What is the cosine similarity between two vectors?,"Cosine similarity is a measure of similarity between two non-zero vectors of an inner product space that measures the cosine of the angle between them. It is a normalized measure of similarity, ranging from -1 (completely different) to 1 (exactly similar). The cosine similarity is given by the dot product of the two vectors divided by their magnitudes."
"Write Python code to group list elements into sublists of particular length.[1,2,3,4,5,6,7,8]","def group_by_length(arr, k): 
	n = len(arr)
	groups = [arr[i:i+k] for i in range(0, n, k)] 
	return groups

a = [1,2,3,4,5,6,7,8] 
k = 3
print(group_by_length(a, k))"
Draft a pseudo-code to implement a linear search algorithm in an array.,"ALGORITHM LinearSearch(arr, value)
    SET i = 0
    WHILE i < arr.length
        IF arr[i] == value
            RETURN i
        ELSE 
            SET i = i + 1
    RETURN -1"
Write an outbound rule in Firewall to block traffic from a certain IP address.IP address: 123.123.123.123,sudo iptables -A OUTPUT -s 123.123.123.123 -j DROP
"Determine the angle of the triangle given its three sides.a = 5, b = 6, c = 7",The angle between side a and b is 53.13°.
Create a function that returns the evaluation metric of a model.,"def Evaluate(model):
    metrics = model.evaluate()
    return metrics"
"Replace all occurrences of one character with another in a given string.string: Hello there
characters: 'o' and 'a'",Hella there
Convert a number from decimal to octal in Python.number = 109,"decimal  = 109    
octal = format(decimal, 'o')  

print(""Decimal:"", decimal)
print(""Octal:"", octal)"
"Create a list comprehension that finds all elements that are divisible by 3 in a given list.numbers =[1, 5, 8, 10, 15, 20]","def divisible_by_three(numbers):
    res = [num for num in numbers if num % 3 == 0]
    return res"
"Modify the code so that it checks if the number input is an integer or a decimal.number = input(""Please input a number: "")","number = input(""Please input a number: "")

if type(number) == int:
    print(""Input is an integer"")
else:
    print(""Input is a decimal"")"
"Create a function that creates a tuple of the given arguments and returns the tuple.a=""A""
b=""B""","def create_tuple(a, b):
    return (a, b)"
"Create a loop that prints out the numbers from 30 to 0, going in reverse.","for i in range(30, -1, -1):
    print(i)"
"Write a function that takes two strings as parameters and returns whether they are an anagram of each other or not.string1 = ""abcde""

string2 = ""edcba""","def is_anagram(string1, string2):
    if sorted(string1) == sorted(string2):
        return True
    else:
        return False


if __name__ == '__main__':
    string1 = ""abcde""
    string2 = ""edcba""

    result = is_anagram(string1, string2)
    print(result)"
"Modify the following function to only take numbers greater than 10.def filter(numbers):
    return [n for n in numbers if n % 2 == 0]

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","def filter(numbers):
    return [n for n in numbers if n > 10 and n % 2 == 0]

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
Write a function that takes a numerical parameter and returns True if it is positive and False if it is negative.,"def is_positive(num):
    if num > 0:
        return True
    else:
        return False

if __name__ == '__main__':
    num = 5
    result = is_positive(num)
    print(result)"
"Edit the following code to make it generate a random number between 1 and 10.import random

def generate_random_number():
    return random.randint(0, 11)","import random

def generate_random_number():
    return random.randint(1, 10)"
"Write a function that takes a list of strings and counts the number of each string that contains the letter ""a"".['foo', 'bar', 'baz']","def count_words_with_letter_a(arr):
    count = 0
    for s in arr:
        if 'a' in s:
            count += 1
    return count

if __name__ == '__main__':
    words = ['foo', 'bar', 'baz']
    count = count_words_with_letter_a(words)
    print(count)"
"Reverse the following list of numbers.[1, 2, 3, 4]","def reverse_list(nums):
    return nums[::-1]

if __name__ == '__main__':
    numbers = [1, 2, 3, 4]
    reversed_list = reverse_list(numbers)
    print(reversed_list)"
Construct a function to convert currency amount from USD to INR.Current USD to INR ratio: 1 USD = 73.20 INR,"def currency_convert(amount):
   
    #Convert amount from USD to INR
    inr = amount * 73.20 
    
    #return the converted currency
    return inr
  
#Test
amount = int(input(""Enter amount of currency in USD:"")) 
  
print(""The amount in INR:"",currency_convert(amount))"
"Update the given Python program to reverse a string.def reverse_string(s): 
    #insert code here
    return s","def reverse_string(s):
    return s[::-1]"
Construct a function to check for an anagram in Python.,"def anagram_check(s1, s2):
    s1 = s1.replace(' ','').lower()
    s2 = s2.replace(' ','').lower()
    
    if(sort(s1) == sort(s2)):
        return True
    
    return False
    
def sort(s):
    return sorted(s)"
Build a CNN model in Keras to detect cancer from a provided dataset.,"# Importing the libraries
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# Initialising the CNN
classifier = Sequential()

# Step 1 - Convolution
classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))

# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Adding a second convolutional layer
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 1, activation = 'sigmoid'))

# Compiling the CNN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Part 2 - Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('dataset/training_set',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

classifier.fit_generator(training_set,
                         samples_per_epoch = 8000,
                         nb_epoch = 25,
                         validation_data = test_set,
                         nb_val_samples = 2000)"
Develop a code in R that returns the maximum from a list.,"#function to return maximum
max <- function(x)
{
  max_num <- 0 #Initialize maximum number
  for (i in x)
  {
    if (i > max_num)
    {
      max_num <- i
    }
  }
  return (max_num)
}
 
#Test
list <- c(10, 30, 20, 5, 100)
maximum <- max(list)
print(maximum)"
Create an example of a deep learning neural network in Keras.,"""""""
Example of a deep learning neural network in Keras
""""""

import keras
from keras.models import Sequential
from keras.layers import Dense

#Create a Sequential model
model = Sequential()

#Add a Dense layer with 32 neurons and an input shape of 10
model.add(Dense(32, activation='relu', input_shape=(10,)))

#Add a second Dense layer with 16 neurons
model.add(Dense(16, activation='relu'))

#Add an output layer with 1 neuron
model.add(Dense(1, activation='sigmoid'))"
Create an example of data visualization using Python's matplotlib library.,"""""""
Example of data visualization using Python's matplotlib library
""""""  
import matplotlib.pyplot as plt

#Create two datasets
x_values = [1, 2, 3, 4, 5]
y_values = [1, 4, 9, 16, 25]

#Plot the data
plt.plot(x_values, y_values)

#Label the axes
plt.xlabel('x values')
plt.ylabel('y values')

#Show the plot
plt.show()"
Create a code to validate an email address using Regular Expressions.,"```
import re

#Function to validate an email
def is_valid_email(email):
    regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
    if (re.search(regex, email)):  
        return True  
    else:  
        return False

#Test the function
if(is_valid_email(""abc@gmail.com"")): 
    print(""Valid Email"")  
else : 
    print(""Invalid Email"") 
#Output: Valid Email
```"
Create a pseudocode to solve the FizzBuzz problem.,"```
#For numbers from 1 through 100
for i from 1 to 100:
    #If the number is divisible by both 3 and 5
    if i is divisible by 3 and 5:
        #Print FizzBuzz
        print ""FizzBuzz""
    #If the number is divisible only by 3
    elif i is divisible by 3:
        #Print Fizz
        print ""Fizz""
    #If the number is divisible only by 5
    elif i is divisible by 5:
        #Print Buzz
        print ""Buzz""
    #Otherwise
    else: 
        #Print the number
        print i
```"
"Solve this regular expression problem.A string should start with a letter, contain only letters and numbers, and should be at least 8 characters in length.","/^[A-Za-z][A-Za-z0-9]{7,}$/"
Create a new class in Python that extends the existing class named 'Base'.,"Class NewClass (Base):
  def __init__(self):
    super().__init__()"
Create an Angular project and include the necessary dependencies for routing.,"ng new angular-project
cd angular-project
npm install --save @angular/router"
"Parse and extract the dates from a given text.The conference will be held on Wednesday, June 16th, 2021","import re

text = ""The conference will be held on Wednesday, June 16th, 2021""

# Extract dates
dates = re.findall(r'\d{1,2}[-/.]\d{1,2}[-/.]\d{2,4}',text) 

# Print the dates
for date in dates:
    print(date)
    
# Output
# 06/16/2021"
"Write a code to find elements in an array that is divisible by a given number.arr = [5, 15, 20, 25, 30]","# Function to find elements in an array that is 
# divisible by a given number 
def isDivisible(arr, num): 
  
    # Stores result 
    res = [] 
  
    # Iterate over all elements 
    for i in range(0,len(arr)): 
  
        # If remainder is 0 then add elements 
        # to result 
        if (arr[i] % num == 0): 
            res.append(arr[i]) 
  
    return res 
  
# Driver code 
arr = [5, 15, 20, 25, 30] 
num = 5
  
# Print result 
print(isDivisible(arr,num))"
"Write a code snippet to find the most frequent number greater than 100 from a list of numbers.[102, 130, 102, 140, 150, 60, 70, 102, 140]","def most_frequent(nums):
    # Initialize a dictionary to count the frequency 
    # of each number in the list
    count = {}

    # Iterate through the list and increase the 
    # count of each number in the dictionary
    for num in nums:
        if num> 100:
            if num not in count:
                count[num] = 1
            else:
                count[num] += 1
    
    # Find the most frequent number
    max_count = 0
    most_frequent_num = 0
    for k,v in count.items():
        if v> max_count:
            most_frequent_num = k
            max_count = v
    return most_frequent_num"
"Create a code to update the values of an array elements with their cube.[1, 2, 3, 4, 5]","def cubeArrayElements(arr): 
  
    for i in range(0, len(arr)): 
        arr[i] = arr[i]*arr[i]*arr[i] 
    
    return arr"
Write a MongoDB query to select all documents in a collection where the field 'category' is 'clothes'.,"db.collection.find({ ""category"": ""clothes"" })"
Calculate the hypotenuse of a right triangle when the other two sides are 4 and 5.,The hypotenuse of a right triangle with sides 4 and 5 is 6.40312.
"Edit the code given below so it can compute the sum of two numeric inputs.def add_two_numbers(x, y):
	# TODO: Write code that computes and returns the sum of two numeric inputs","def add_two_numbers(x, y):
  # Compute and return the sum of two numeric inputs
  return x + y"
"Using the given datasets and Scikit-Learn, develop a K Nearest Neighbors (KNN) classifier.import pandas as pd
df = pd.read_csv(""data.csv"")","from sklearn.neighbors import KNeighborsClassifier 
X = df.iloc[:,:-1].values 
y = df.iloc[:,-1].values 
knn = KNeighborsClassifier(n_neighbors=3) 
knn.fit(X, y)"
Generate a list of 10 numbers in Python where each number is a multiple of 7 and greater than 40,"[x for x in range(41, 100) if x % 7 == 0]
# Output: [42, 49, 56, 63, 70, 77, 84, 91, 98]"
"Classify the given text as ""positive"" or ""negative"" using Natural Language Processing.This movie is terrible.",negative
"Sum up the values in the given list using a for loop.List: [2, 3, 6, 4, 8]","total = 0
for number in [2, 3, 6, 4, 8]:
    total += number
print(""Total: "", total) # Output: Total: 23"
"Perform an insertion sort on the given list.List: [9, 5, 4, 8, 6]","def insertionSort(arr):
   # Traverse through 1 to len(arr) 
   for i in range(1, len(arr)): 
  
     key = arr[i] 
  
     # Move elements of arr[0..i-1], that are 
     # greater than key, to one position ahead 
     # of their current position
     j = i-1
     while j >= 0 and key < arr[j] : 
             arr[j + 1] = arr[j] 
             j -= 1
     arr[j + 1] = key 
  
  
# Driver code
arr = [9, 5, 4, 8, 6]
insertionSort(arr) 
print (""Sorted array is:"") 
for i in range(len(arr)): 
    print (""% d"" % arr[i])
# Output: Sorted array is: 4 5 6 8 9"
"Given a list of integers, find the smallest and the largest of the set.[1, 9, 45, -5, 23, 18]","let list = [1, 9, 45, -5, 23, 18];
let smallest = Math.min(...list);
let largest = Math.max(...list);

console.log(""Smallest: "" + smallest + "", Largest: "" + largest);"
"Create a regular expression that matches strings starting with ""Hello"".",let regex = /^Hello/;
"Implement a Python class that prints a given given text when a certain condition is satisfied.Print a text ""Endless fun"" when the numbers given in a list equals to 10","class MyClass:
    def __init__(self, given_list):
        self.given_list = given_list
    
    def check_equal_to_10(self):
        if len(self.given_list) == 0:
            return False
        for num in self.given_list:
            if num != 10:
                return False
        print(""Endless fun"")
        return True"
"Create a basic Python script to accept two numbers from the user and 
print out the sum.","num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

# add two numbers
sum = num1 + num2

# display the sum
print(""The sum of {0} and {1} is {2}"".format(num1, num2, sum))"
Create a Python program to accept a string from the user and print out the number of vowels in the string.Hello World,"def countVowels(str): 
	vowel = 0
	for i in str: 
		if i.lower() in ['a', 'e', 'i', 'o', 'u']: 
			vowel += 1
	return vowel 

# Driver code 
str = ""Hello World""
print(""Number of vowels are:"", countVowels(str))"
How to convert a list of multiple integers into a single integer?,"sum(d * 10 ** i for i, d in enumerate(x[::-1]))"
How to convert a list of multiple integers into a single integer?,"r = int(''.join(map(str, x)))"
how to convert a datetime string back to datetime object?,"datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')"
Averaging the values in a dictionary based on the key,"[(i, sum(j) / len(j)) for i, j in list(d.items())]"
zip lists in python,"zip([1, 2], [3, 4])"
Prepend the same string to all items in a list,"['hello{0},'.format(i) for i in a]"
regex for repeating words in a string in Python,"re.sub('(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)', '\\1', s)"
Normalizing a pandas DataFrame by row,"df.div(df.sum(axis=1), axis=0)"
swap values in a tuple/list inside a list in python?,"map(lambda t: (t[1], t[0]), mylist)"
swap values in a tuple/list inside a list in python?,"[(t[1], t[0]) for t in mylist]"
Find next sibling element in Python Selenium?,"driver.find_element_by_xpath(""//p[@id, 'one']/following-sibling::p"")"
Python splitting string by parentheses,"re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|""[^""]*""|\\S+', strs)"
What's the most memory efficient way to generate the combinations of a set in python?,"print(list(itertools.combinations({1, 2, 3, 4},, 3)))"
Add Multiple Columns to Pandas Dataframe from Function,"df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)"
BeautifulSoup - search by text inside a tag,"soup.find_all('a', string='Elsie')"
"How do I turn a python datetime into a string, with readable format date?","my_datetime.strftime('%B %d, %Y')"
Parse string to int when string contains a number + extra characters,int(''.join(c for c in s if c.isdigit()))
adding new key inside a new key and assigning value in python dictionary,"dic['Test'].update({'class': {'section': 5},},)"
Transforming the string representation of a dictionary into a real dictionary,"dict(map(int, x.split(':')) for x in s.split(','))"
How to select element with Selenium Python xpath,"driver.find_element_by_xpath(""//div[@id='a']//a[@class='click']"")"
Find matching rows in 2 dimensional numpy array,"np.where((vals == (0, 1)).all(axis=1))"
How to delete a record in Django models?,SomeModel.objects.filter(id=id).delete()
python convert list to dictionary,"dict([['two', 2], ['one', 1]])"
python convert list to dictionary,"dict(zip(l[::2], l[1::2]))"
how to set global const variables in python,GRAVITY = 9.8
"How to use regular expression to separate numbers and characters in strings like ""30M1000N20M""","re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')"
"How to use regular expression to separate numbers and characters in strings like ""30M1000N20M""","re.findall('([0-9]+|[A-Z])', '20M10000N80M')"
"How to use regular expression to separate numbers and characters in strings like ""30M1000N20M""","re.findall('([0-9]+)([A-Z])', '20M10000N80M')"
"Extracting words from a string, removing punctuation and returning a list with separated words in Python","re.compile('\\w+').findall('Hello world, my name is...James the 2nd!')"
Convert string into datetime.time object,"datetime.datetime.strptime('03:55', '%H:%M').time()"
Python Requests getting SSLerror,"requests.get('https://www.reporo.com/', verify=False)"
removing data from a numpy.array,a[a != 0]
Map two lists into a dictionary in Python,"new_dict = {k: v for k, v in zip(keys, values)},"
Map two lists into a dictionary in Python,"dict((k, v) for k, v in zip(keys, values))"
Map two lists into a dictionary in Python,"dict([(k, v) for k, v in zip(keys, values)])"
Get the string within brackets in Python,"m = re.search('\\[(\\w+)\\]', s)"
"Python server ""Only one usage of each socket address is normally permitted""","s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"
How do i add two lists' elements into one list?,"list3 = [(a + b) for a, b in zip(list1, list2)]"
Python - Converting Hex to INT/CHAR,[ord(c) for c in s.decode('hex')]
How to sort in decreasing value first then increasing in second value,"print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))"
Repeating elements in list comprehension,"[y for x in range(3) for y in [x, x]]"
"Doc, rtf and txt reader in python",txt = open('file.txt').read()
How do you divide each element in a list by an int?,myList[:] = [(x / myInt) for x in myList]
python: dots in the name of variable in a format string,"""""""Name: {0[person.name]},"""""".format({'person.name': 'Joe'},)"
How to replace the white space in a string in a pandas dataframe?,"df.replace(' ', '_', regex=True)"
Python: most efficient way to convert date to datetime,"datetime.datetime.combine(my_date, datetime.time.min)"
Tuple to string,tst2 = str(tst)
get file creation & modification date/times in,time.ctime(os.path.getmtime(file))
get file creation & modification date/times in,time.ctime(os.path.getctime(file))
get file creation & modification date/times in,t = os.path.getmtime(filename)
get file creation & modification date/times in,os.path.getmtime(path)
get file creation & modification date/times in,print(('last modified: %s' % time.ctime(os.path.getmtime(file))))
get file creation & modification date/times in,print(('created: %s' % time.ctime(os.path.getctime(file))))
get file creation & modification date/times in,return os.path.getctime(path_to_file)
How to Close a program using python?,os.system('TASKKILL /F /IM firefox.exe')
Is there a generator version of `string.split()` in Python?,"return (x.group(0) for x in re.finditer(""[A-Za-z']+"", string))"
Using Python String Formatting with Lists,""""""", """""".join(['%.2f'] * len(x))"
How to use regex with optional characters in python?,"print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))"
How to remove parentheses and all data within using Pandas/Python?,"df['name'].str.replace('\\(.*\\)', '')"
Python: filter list of list with another list,result = [x for x in list_a if x[0] in list_b]
Generate all possible strings from a list of token,"print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])"
python how to search an item in a nested list,[x for x in li if 'ar' in x[2]]
Python - How to sort a list of lists by the fourth element in each list?,unsorted_list.sort(key=lambda x: x[3])
Python logging typeerror,logging.info('test')
How to make several plots on a single page using matplotlib?,"fig.add_subplot(1, 1, 1)"
Sort a Python dictionary by value,"sorted(list(x.items()), key=operator.itemgetter(1))"
Sort a Python dictionary by value,"sorted(dict1, key=dict1.get)"
Sort a Python dictionary by value,"sorted(d, key=d.get, reverse=True)"
Sort a Python dictionary by value,"sorted(list(d.items()), key=(lambda x: x[1]))"
Numpy elementwise product of 3d array,"np.einsum('ijk,ikl->ijl', A, B)"
print variable and a string in python,"print('I have: {0.price},'.format(card))"
How can I add a comment to a YAML file in Python,f.write('# Data for Class A\n')
How do I move the last item in a list to the front in python?,a = a[-1:] + a[:-1]
python - convert datetime to varchar/string,datetimevariable.strftime('%Y-%m-%d')
What's the most pythonic way of normalizing lineends in a string?,"mixed.replace('\r\n', '\n').replace('\r', '\n')"
How to find the real user home directory using python?,os.path.expanduser('~user')
"In Python, how do I index a list with another list?",T = [L[i] for i in Idx]
Iterate through words of a file in Python,words = open('myfile').read().split()
Summing 2nd list items in a list of lists of lists,[[sum([x[1] for x in i])] for i in data]
Summing 2nd list items in a list of lists of lists,[sum([x[1] for x in i]) for i in data]
Django order by highest number of likes,Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')
How to convert datetime.date.today() to UTC time?,today = datetime.datetime.utcnow().date()
How to perform element-wise multiplication of two lists in Python?,"[(a * b) for a, b in zip(lista, listb)]"
Capturing emoticons using regular expression in python,"re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)"
Capturing emoticons using regular expression in python,"re.match('[:;][)(](?![)(])', str)"
List of objects to JSON with Python,json_string = json.dumps([ob.__dict__ for ob in list_name])
List of zeros in python,listofzeros = [0] * n
python: how to convert a string to utf-8,"stringnamehere.decode('utf-8', 'ignore')"
Python regex - Ignore parenthesis as indexing?,"re.findall('((?:A|B|C)D)', 'BDE')"
Python dict how to create key or append an element to key?,"dic.setdefault(key, []).append(value)"
Finding the minimum value in a numpy array and the corresponding values for the rest of that array's row,"a[np.argmin(a[:, (1)])]"
"Python ""extend"" for a dictionary",a.update(b)
Removing key values pairs from a list of dictionaries,"[{k: v for k, v in d.items() if k != 'mykey1'}, for d in mylist]"
Removing key values pairs from a list of dictionaries,"[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]"
Simple way to create matrix of random numbers,"numpy.random.random((3, 3))"
Make new column in Panda dataframe by adding values from other columns,df['C'] = df['A'] + df['B']
Find dictionary items whose key matches a substring,"[value for key, value in list(programs.items()) if 'new york' in key.lower()]"
"Import module in another directory from a ""parallel"" sub-directory",sys.path.append('/path/to/main_folder')
Regex for getting all digits in a string after a character,"re.findall('\\d+(?=[^[]+$)', s)"
Python pickle/unpickle a list to/from a file,"pickle.load(open('afile', 'rb'))"
Clicking a link using selenium using python,driver.find_element_by_xpath('xpath').click()
Counting unique index values in Pandas groupby,ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())
Dict of dicts of dicts to DataFrame,"pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"
"In Python, find out number of differences between two ordered lists","sum(1 for i, j in zip(a, b) if i != j)"
When the key is a tuple in dictionary in Python,"d = {(a.lower(), b): v for (a, b), v in list(d.items())},"
Sorting a list of tuples with multiple conditions,"list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])"
trim whitespace,s.strip()
trim whitespace (including tabs),s = s.lstrip()
trim whitespace (including tabs),s = s.rstrip()
trim whitespace (including tabs),s = s.strip(' \t\n\r')
trim whitespace (including tabs),"print(re.sub('[\\s+]', '', s))"
"In Django, how do I filter based on all entities in a many-to-many relation instead of any?","Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])"
Background color for Tk in Python,root.configure(background='black')
python dict to numpy structured array,"numpy.array([(key, val) for key, val in result.items()], dtype)"
Pandas - Sorting By Column,"pd.concat([df_1, df_2.sort_values('y')])"
rreplace - How to replace the last occurence of an expression in a string?,"re.sub('(.*)</div>', '\\1</bad>', s)"
How do I compare values in a dictionary?,"print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))"
How to do many-to-many Django query to find book with 2 given authors?,Book.objects.filter(author__id=1).filter(author__id=2)
Python regex split case insensitive in 2.6,"re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')"
"List comprehension - converting strings in one list, to integers in another","[sum(map(int, s)) for s in example.split()]"
How to find duplicate elements in array using for loop in Python?,[i for i in y if y[i] == 1]
Converting byte string in unicode string,c.decode('unicode_escape')
"How can I ""unpivot"" specific columns from a pandas DataFrame?","pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')"
add new item to dictionary,default_data['item3'] = 3
add new item to dictionary,"default_data.update({'item3': 3, },)"
add new item to dictionary,"default_data.update({'item4': 4, 'item5': 5, },)"
Index the first and the last n elements of a list,l[:3] + l[-3:]
How to reset index in a pandas data frame?,df = df.reset_index(drop=True)
Merging a list with a list of lists,[a[x].append(b[x]) for x in range(3)]
how to find the target file's full(absolute path) of the symbolic link or soft link in python,os.path.realpath(path)
How to check if a dictionary is in another dictionary in python,set(L[0].f.items()).issubset(set(a3.f.items()))
How to find the index of a value in 2d array in Python?,zip(*np.where(a == 1))
How to find the index of a value in 2d array in Python?,np.where(a == 1)
Python Pandas - How to flatten a hierarchical index in columns,df.columns = df.columns.get_level_values(0)
Creating a list from a Scipy matrix,"x = scipy.matrix([1, 2, 3]).transpose()"
Regex Python adding characters after a certain word,"text = re.sub('(\\bget\\b)', '\\1@', text)"
Element-wise minimum of multiple vectors in numpy,"np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"
Pandas (python): How to add column to dataframe for index?,"df['new_col'] = list(range(1, len(df) + 1))"
How to set environment variables in Python,os.environ['DEBUSSY'] = '1'
How to set environment variables in Python,print(os.environ['DEBUSSY'])
How to set environment variables in Python,os.environ['DEBUSSY'] = '1'
Python: updating a large dictionary using another large dictionary,b.update(d)
How to get column by number in Pandas?,df['b']
How can I get the color of the last figure in matplotlib?,"ebar = plt.errorbar(x, y, yerr=err, ecolor='y')"
Python: How can I find all files with a particular extension?,results += [each for each in os.listdir(folder) if each.endswith('.c')]
"Concatenating Unicode with string: print '£' + '1' works, but print '£' + u'1' throws UnicodeDecodeError",print('\xc2\xa3'.decode('utf8') + '1')
How to convert the following string in python?,"re.sub('(?<=[a-z])([A-Z])', '-\\1', s).lower()"
Setting stacksize in a python script,os.system('ulimit -s unlimited; some_executable')
Python Decimals format,"""""""{0:.3g},"""""".format(num)"
Add single element to array in numpy,"numpy.append(a, a[0])"
Return the column name(s) for a specific value in a pandas dataframe,"df.ix[:, (df.loc[0] == 38.15)].columns"
Merge 2 dataframes with same values in a column,df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])
How To Format a JSON Text In Python?,json_data = json.loads(json_string)
Python: converting radians to degrees,math.cos(math.radians(1))
count how many of an object type there are in a list Python,"sum(isinstance(x, int) for x in a)"
Python: Getting rid of \u200b from a string using regular expressions,"'used\u200b'.replace('\u200b', '*')"
How to run two functions simultaneously,threading.Thread(target=SudsMove).start()
sum of squares in a list in one line?,sum(i * i for i in l)
sum of squares in a list in one line?,"sum(map(lambda x: x * x, l))"
Create a dictionary with list comprehension,"d = dict(((key, value) for (key, value) in iterable))"
Create a dictionary with list comprehension,"d = {key: value for (key, value) in iterable},"
Create a dictionary with list comprehension,"d = {k: v for (k, v) in iterable},"
Rounding entries in a Pandas DafaFrame,"df.round({'Alabama_exp': 2, 'Credit_exp': 3},)"
Pycurl keeps printing in terminal,"p.setopt(pycurl.WRITEFUNCTION, lambda x: None)"
Return a random word from a word list in python,print(random.choice(words))
Find Max in Nested Dictionary,"max(d, key=lambda x: d[x]['count'])"
How to replace empty string with zero in comma-separated string?,"[(int(x) if x else 0) for x in data.split(',')]"
How to replace empty string with zero in comma-separated string?,""""""","""""".join(x or '0' for x in s.split(','))"
"Regular expression syntax for ""match nothing""?",re.compile('$^')
"Regular expression syntax for ""match nothing""?",re.compile('.\\A|.\\A*|.\\A+')
"Regular expression syntax for ""match nothing""?",re.compile('a^')
Python Pandas drop columns based on max value of column,df.columns[df.max() > 0]
How can I check if a date is the same day as datetime.today()?,yourdatetime.date() == datetime.today().date()
How do I print bold text in Python?,print('\x1b[1m' + 'Hello')
Renaming multiple files in python,"re.sub('.{20},(.mkv)', '\\1', 'unique12345678901234567890.mkv')"
Can I get a list of the variables that reference an other in Python 2.7?,"['a', 'c', 'b', 'obj']"
Substitute multiple whitespace with single whitespace in Python,""""""" """""".join(mystring.split())"
How to print floating point numbers as it is without any truncation in python?,"print('{:.100f},'.format(2.345e-67))"
Check if a given key already exists in a dictionary,('key1' in dict)
Check if a given key already exists in a dictionary,('a' in d)
Check if a given key already exists in a dictionary,('c' in d)
Check if a given key already exists in a dictionary,if ('key1' in dict):
pass,
Check if a given key already exists in a dictionary,if (key in d):
pass,
django filter with list of values,"Blog.objects.filter(pk__in=[1, 4, 7])"
read a binary file (python),"f = open('test/test.pdf', 'rb')"
Format string - spaces between every three digit,"format(12345678.46, ',').replace(',', ' ').replace('.', ',')"
Joining pandas dataframes by column names,"pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')"
How to calculate percentage of sparsity for a numpy array/matrix?,np.isnan(a).sum() / np.prod(a.shape)
Sorting a defaultdict by value in python,"sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"
Sorting a defaultdict by value in python,"sorted(list(u.items()), key=lambda v: v[1])"
Sorting a defaultdict by value in python,"sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"
Sorting a defaultdict by value in python,"sorted(list(d.items()), key=lambda k_v: k_v[1])"
How to reliably open a file in the same directory as a Python script,"f = open(os.path.join(__location__, 'bundled-resource.jpg'))"
How do I convert LF to CRLF?,"f = open('words.txt', 'rU')"
Divide the values of two dictionaries in python,"{k: (float(d2[k]) / d1[k]) for k in d2},"
Divide the values of two dictionaries in python,"{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2},"
Divide the values of two dictionaries in python,"dict((k, float(d2[k]) / d1[k]) for k in d2)"
How to specify date format when using pandas.to_csv?,"df.to_csv(filename, date_format='%Y%m%d')"
How to remove a key from a python dictionary?,"my_dict.pop('key', None)"
replace values in an array,"b = np.where(np.isnan(a), 0, a)"
"Python, running command line tools in parallel","subprocess.call('start command -flags arguments', shell=True)"
"Python, running command line tools in parallel","subprocess.call('command -flags arguments &', shell=True)"
Passing the '+' character in a POST request in Python,"f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))"
How do I remove whitespace from the end of a string in Python?,"""""""    xyz     """""".rstrip()"
URL encoding in python,urllib.parse.quote(s.encode('utf-8'))
URL encoding in python,urllib.parse.quote_plus('a b')
Convert string to numpy array,"np.array(map(int, '100110'))"
Convert string to numpy array,"print(np.array(list(mystr), dtype=int))"
How can I convert an RGB image into grayscale in Python?,"img = cv2.imread('messi5.jpg', 0)"
sorting a graph by its edge weight. python,"lst.sort(key=lambda x: x[2], reverse=True)"
How to find all occurrences of an element in a list?,"indices = [i for i, x in enumerate(my_list) if x == 'whatever']"
How can I execute shell command with a | pipe in it,"subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)"
How to count the number of a specific character at the end of a string ignoring duplicates?,len(my_text) - len(my_text.rstrip('?'))
converting currency with $ to numbers in Python pandas,"df[df.columns[1:]].replace('[\\$,]', '', regex=True).astype(float)"
Conditionally fill a column of a pandas df with values of a different df,"df1.merge(df2, how='left', on='word')"
Switch every pair of characters in a string,"print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')"
How to make a window jump to the front?,"root.attributes('-topmost', True)"
How to make a window jump to the front?,root.lift()
Elegant way to convert list to hex string,"hex(int(''.join([str(int(b)) for b in walls]), 2))"
Elegant way to convert list to hex string,"hex(sum(b << i for i, b in enumerate(reversed(walls))))"
Print multiple arguments in python,"print(('Total score for', name, 'is', score))"
Print multiple arguments in python,"print('Total score for {}, is {},'.format(name, score))"
Print multiple arguments in python,"print('Total score for %s is %s  ' % (name, score))"
Print multiple arguments in python,"print(('Total score for', name, 'is', score))"
Is it possible to serve a static html page at the root of a django project?,"url('^$', TemplateView.as_view(template_name='your_template.html'))"
use a list of values to select rows from a pandas dataframe,"df[df['A'].isin([3, 6])]"
How to get the concrete class name as a string?,instance.__class__.__name__
How can I execute Python code in a virtualenv from Matlab,system('/path/to/my/venv/bin/python myscript.py')
django models selecting single field,"Employees.objects.values_list('eng_name', flat=True)"
Python regex findall alternation behavior,"re.findall('\\d|\\d,\\d\\)', '6,7)')"
How do I make python to wait for a pressed key,input('Press Enter to continue...')
Print string as hex literal python,"""""""ABC"""""".encode('hex')"
python + pymongo: how to insert a new field on an existing document in mongo from a for loop,"db.Doc.update({'_id': b['_id']},, {'$set': {'geolocCountry': myGeolocCountry},},)"
"Regex to match 'lol' to 'lolllll' and 'omg' to 'omggg', etc","re.sub('l+', 'l', 'lollll')"
Getting the nth element using BeautifulSoup,rows = soup.findAll('tr')[4::5]
Reverse Y-Axis in PyPlot,plt.gca().invert_xaxis()
Reverse Y-Axis in PyPlot,plt.gca().invert_yaxis()
How do I stack two DataFrames next to each other in Pandas?,"pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)"
Creating a JSON response using Django and Python,"return HttpResponse(json.dumps(response_data), content_type='application/json')"
Process escape sequences in a string,myString.decode('string_escape')
How do I calculate the md5 checksum of a file in Python?,"hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()"
Finding key from value in Python dictionary:,"[k for k, v in d.items() if v == desired_value]"
Extract all keys from a list of dictionaries,"{k for d in LoD for k in list(d.keys())},"
Extract all keys from a list of dictionaries,set([i for s in [list(d.keys()) for d in LoD] for i in s])
Extract all keys from a list of dictionaries,[i for s in [list(d.keys()) for d in LoD] for i in s]
"Is there a more elegant way for unpacking keys and values of a dictionary into two lists, without losing consistence?","keys, values = zip(*list(d.items()))"
Convert a string to integer with decimal in Python,int(Decimal(s))
Convert a string to integer with decimal in Python,int(s.split('.')[0])
Numpy: How to check if array contains certain numbers?,"numpy.in1d(b, a).all()"
Numpy: How to check if array contains certain numbers?,numpy.array([(x in a) for x in b])
Node labels using networkx,"networkx.draw_networkx_labels(G, pos, labels)"
How to make a copy of a 2D array in Python?,y = [row[:] for row in x]
Pythonic way to populate numpy array,"X = numpy.loadtxt('somefile.csv', delimiter=',')"
Check if a Python list item contains a string inside another string,matching = [s for s in some_list if 'abc' in s]
How to write/read a Pandas DataFrame with MultiIndex from/to an ASCII file?,"df.to_csv('mydf.tsv', sep='\t')"
How do I create a LIST of unique random numbers?,"random.sample(list(range(100)), 10)"
Splitting on last delimiter in Python string?,"s.rsplit(',', 1)"
Python check if all elements of a list are the same type,"all(isinstance(x, int) for x in lst)"
Python check if all elements of a list are the same type,"all(isinstance(x, int) for x in lst)"
Python . How to get rid of '\r' in string?,line.strip()
How can I scroll a web page using selenium webdriver in python?,"driver.execute_script('window.scrollTo(0, Y)')"
How can I scroll a web page using selenium webdriver in python?,"driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')"
How do I convert a datetime.date object into datetime.datetime in python?,"datetime.datetime.combine(dateobject, datetime.time())"
How to check if one of the following items is in a list?,print(any(x in a for x in b))
Saving a Numpy array as an image,"scipy.misc.imsave('outfile.jpg', image_array)"
Regex for removing data in parenthesis,"item = re.sub(' ?\\([^)]+\\)', '', item)"
Regex for removing data in parenthesis,"item = re.sub(' ?\\(\\w+\\)', '', item)"
Regex for removing data in parenthesis,"item = re.sub(' \\(\\w+\\)', '', item)"
Checking if any elements in one list are in another,len(set(list1).intersection(list2)) > 0
convert hex to decimal,"i = int(s, 16)"
convert hex to decimal,"int('0xff', 16)"
convert hex to decimal,"int('FFFF', 16)"
convert hex to decimal,ast.literal_eval('0xdeadbeef')
convert hex to decimal,"int('deadbeef', 16)"
Take screenshot in Python on Mac OS X,os.system('screencapture screen.png')
How to set window size using phantomjs and selenium webdriver in python,"driver.set_window_size(1400, 1000)"
Replace non-ascii chars from a unicode string in Python,"unicodedata.normalize('NFKD', 'm\xfasica').encode('ascii', 'ignore')"
Pandas/Python: How to concatenate two dataframes without duplicates?,"pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)"
numpy: efficiently reading a large array,"a = numpy.fromfile('filename', dtype=numpy.float32)"
How to use the mv command in Python with subprocess,"subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"
How to use the mv command in Python with subprocess,"subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"
How to use Unicode characters in a python string,print('\u25b2'.encode('utf-8'))
Comparing two .txt files using difflib in Python,"difflib.SequenceMatcher(None, file1.read(), file2.read())"
Creating a dictionary from a string,"dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))"
How to check if all elements in a tuple or list are in another?,"all(i in (1, 2, 3, 4, 5) for i in (1, 6))"
python pandas extract unique dates from time series,df['Date'].map(lambda t: t.date()).unique()
Formatting text to be justified in Python 3.3 with .format() method,"""""""{:>7s},"""""".format(mystring)"
How do I read an Excel file into Python using xlrd? Can it read newer Office formats?,"open('ComponentReport-DJI.xls', 'rb').read(200)"
How to sort a dataFrame in python pandas by two or more columns?,"df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)"
How to sort a dataFrame in python pandas by two or more columns?,"df.sort_values(['a', 'b'], ascending=[True, False])"
How to sort a dataFrame in python pandas by two or more columns?,"df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"
How to sort a dataFrame in python pandas by two or more columns?,"df.sort(['a', 'b'], ascending=[True, False])"
Django redirect to root from a view,redirect('Home.views.index')
Remove all values within one list from another list in python,"[x for x in a if x not in [2, 3, 7]]"
How to remove all the punctuation in a string? (Python),"out = ''.join(c for c in asking if c not in ('!', '.', ':'))"
Python: BeautifulSoup - get an attribute value based on the name attribute,"soup.find('meta', {'name': 'City'},)['content']"
How to unquote a urlencoded unicode string in python?,urllib.parse.unquote('%0a')
How to unquote a urlencoded unicode string in python?,urllib.parse.unquote(url).decode('utf8')
empty a list,del lst[:]
empty a list,del lst1[:]
empty a list,lst[:] = []
empty a list,alist[:] = []
Pandas reset index on series to remove multiindex,s.reset_index(0).reset_index(drop=True)
How to convert unicode text to normal text,elems[0].getText().encode('utf-8')
Subtracting the current and previous item in a list,"[(y - x) for x, y in zip(L, L[1:])]"
Cleanest way to get a value from a list element,"print(re.search('\\bLOG_ADDR\\s+(\\S+)', line).group(1))"
Importing everything ( * ) dynamically from a module,globals().update(importlib.import_module('some.package').__dict__)
Convert a list of characters into a string,""""""""""""".join(['a', 'b', 'c', 'd'])"
Slicing URL with Python,url.split('&')
sort a dictionary by key,od = collections.OrderedDict(sorted(d.items()))
sort a dictionary by key,"OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))"
PUT Request to REST API using Python,"response = requests.put(url, data=json.dumps(data), headers=headers)"
Python remove anything that is not a letter or number,"re.sub('[\\W_]+', '', s)"
Python Nested List Comprehension with two Lists,[(x + y) for x in l2 for y in l1]
convert string to dict using list comprehension in python,dict([x.split('=') for x in s.split()])
Remove object from a list of objects in python,my_list.pop(2)
How to delete a character from a string using python?,"s = s.replace('M', '')"
How to delete a character from a string using python?,"newstr = oldstr.replace('M', '')"
How can I sum the product of two list items using for loop in python?,"sum(x * y for x, y in zip(a, b))"
How can I sum the product of two list items using for loop in python?,"list(x * y for x, y in list(zip(a, b)))"
How can I sum the product of two list items using for loop in python?,"sum(i * j for i, j in zip(a, b))"
How can I sum the product of two list items using for loop in python?,"sum(x * y for x, y in list(zip(a, b)))"
Can I read and write file in one line with Python?,"f.write(open('xxx.mp4', 'rb').read())"
How to add an integer to each element in a list?,new_list = [(x + 1) for x in my_list]
Return list of items in list greater than some value,[x for x in j if x >= 5]
matplotlib: Set markers for individual points on a line,"plt.plot(list(range(10)), '--bo')"
matplotlib: Set markers for individual points on a line,"plt.plot(list(range(10)), linestyle='--', marker='o', color='b')"
split elements of a list in python,"[i.split('\t', 1)[0] for i in l]"
split elements of a list in python,myList = [i.split('\t')[0] for i in myList]
Summing elements in a list,sum(your_list)
How to attach debugger to a python subproccess?,ForkedPdb().set_trace()
Python: comprehension to compose two dictionaries,"result = {k: d2.get(v) for k, v in list(d1.items())},"
datetime.datetime.now() + 1,"datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
Convert binary string to list of integers using Python,"[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]"
switching keys and values in a dictionary in python,"dict((v, k) for k, v in my_dict.items())"
Specific sort a list of numbers separated by dots,"print(sorted(L, key=lambda x: int(x.split('.')[2])))"
How to find a value in a list of python dictionaries?,any(d['name'] == 'Test' for d in label)
How can I remove all instances of an element from a list in Python?,"a[:] = [x for x in a if x != [1, 1]]"
How can I remove all instances of an element from a list in Python?,"[x for x in a if x != [1, 1]]"
Convert a list to a dictionary in Python,"b = {a[i]: a[i + 1] for i in range(0, len(a), 2)},"
How to check whether elements appears in the list only once in python?,len(set(a)) == len(a)
Generating an MD5 checksum of a file,"print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())"
How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list,"sorted(list(data.items()), key=lambda x: x[1][0])"
Pythons fastest way of randomising case of a string,""""""""""""".join(x.upper() if random.randint(0, 1) else x for x in s)"
How to force os.system() to use bash instead of shell,"os.system('GREPDB=""echo 123""; /bin/bash -c ""$GREPDB""')"
How to force os.system() to use bash instead of shell,"os.system('/bin/bash -c ""echo hello world""')"
how to access the class variable by string in Python?,"getattr(test, a_string)"
How to display a jpg file in Python?,Image.open('pathToFile').show()
Replace the single quote (') character from a string,"""""""didn't"""""".replace(""'"", '')"
Sorting files in a list,files.sort(key=file_number)
remove all whitespace in a string,"sentence.replace(' ', '')"
remove all whitespace in a string,pattern = re.compile('\\s+')
"sentence = re.sub(pattern, '', sentence)",
remove all whitespace in a string,sentence.strip()
remove all whitespace in a string,"sentence = re.sub('\\s+', '', sentence, flags=re.UNICODE)"
remove all whitespace in a string,sentence = ''.join(sentence.split())
Sum all values of a counter in Python,sum(my_counter.values())
Numpy: find the euclidean distance between two 3-D arrays,np.sqrt(((A - B) ** 2).sum(-1))
Python: define multiple variables of same type?,"levels = [{},, {},, {},]"
Find the sum of subsets of a list in python,"weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]"
Delete an element from a dictionary,del d[key]
Delete an element from a dictionary,"{i: a[i] for i in a if (i != 0)},"
Delete an element from a dictionary,lol.pop('hello')
Delete an element from a dictionary,del r[key]
Efficient computation of the least-squares algorithm in NumPy,"np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))"
Splitting dictionary/list inside a Pandas Column into Separate Columns,"pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"
loop through a Python list by twos,"for i in range(0, 10, 2):"
pass,
loop through a Python list by twos,for i in mylist[::2]:
pass,
How to use map to lowercase strings in a dictionary?,"[{'content': x['content'].lower()}, for x in messages]"
convert list into string with spaces in python,""""""" """""".join(my_list)"
Regex. Match words that contain special characters or 'http://',"re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)"
How to check for palindrome using Python logic,str(n) == str(n)[::-1]
How to upload binary file with ftplib in Python?,"ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"
How to remove all characters before a specific character in Python?,"re.sub('.*I', 'I', stri)"
Python parse comma-separated number into int,"int('1,000,000'.replace(',', ''))"
Combine two Pandas dataframes with the same index,"pd.merge(df1, df2, left_index=True, right_index=True, how='outer')"
Combine two Pandas dataframes with the same index,"pandas.concat([df1, df2], axis=1)"
What's the best way to aggregate the boolean values of a Python dictionary?,all(dict.values())
How to extract first two characters from string using regex,"df.c_contofficeID.str.replace('^12(?=.{4},$)', '')"
reverse a list,L[::(-1)]
reverse a list,reversed(array)
reverse a list,L.reverse()
reverse a list,list(reversed(array))
How to index nested lists in Python?,[tup[0] for tup in A]
Replacing characters in a file,"newcontents = contents.replace('a', 'e').replace('s', '3')"
How to serialize SqlAlchemy result to JSON?,json.dumps([dict(list(row.items())) for row in rs])
Cross-platform addressing of the config file,config_file = os.path.expanduser('~/foo.ini')
How to get multiple parameters with same name from a URL in Pylons?,request.params.getall('c')
how to create similarity matrix in numpy python?,np.corrcoef(x)
Python - Find the greatest number in a set of numbers,"print(max(1, 2, 3))"
Google App Engine - Request class query_string,self.request.get('var_name')
python pandas: apply a function with arguments to a series. Update,"a['x'].apply(lambda x, y: x + y, args=(100,))"
Get models ordered by an attribute that belongs to its OneToOne model,User.objects.order_by('-pet__age')[:10]
make a time delay,time.sleep(5)
make a time delay,time.sleep(60)
make a time delay,sleep(0.1)
make a time delay,time.sleep(60)
make a time delay,time.sleep(0.1)
Remove strings from a list that contains numbers in python,[x for x in my_list if not any(c.isdigit() for c in x)]
"how to do a left,right and mid of a string in a pandas dataframe",df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])
How do I draw a grid onto a plot in Python?,plt.grid(True)
python How do you sort list by occurrence with out removing elements from the list?,"sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))"
Find max length of each column in a list of lists,[max(len(str(x)) for x in line) for line in zip(*foo)]
Count the number of Occurrence of Values based on another column,df.Country.value_counts().reset_index(name='Sum of Accidents')
Calculating difference between two rows in Python / Pandas,data.set_index('Date').diff()
python: append values to a set,"a.update([3, 4])"
How can I get an array of alternating values in python?,a[1::2] = -1
Faster way to rank rows in subgroups in pandas dataframe,df.groupby('group')['value'].rank(ascending=False)
Js Date object to python datetime,"datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')"
Python: Converting from binary to String,"struct.pack('<I', 1633837924)"
Inserting a string into a list without getting split into characters,list.append('foo')
Inserting a string into a list without getting split into characters,"list.insert(0, 'foo')"
Case insensitive dictionary search with Python,theset = set(k.lower() for k in thedict)
How to pad with n characters in Python,"""""""{s:{c},^{n},},"""""".format(s='dog', n=5, c='x')"
How to check if type of a variable is string?,"isinstance(s, str)"
How to check if type of a variable is string?,"isinstance(s, str)"
How do I merge a list of dicts into a single dict?,dict(pair for d in L for pair in list(d.items()))
How do I merge a list of dicts into a single dict?,"{k: v for d in L for k, v in list(d.items())},"
How to sort a Pandas DataFrame according to multiple criteria?,"df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"
How to sort a Pandas DataFrame according to multiple criteria?,"df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"
Running Python code contained in a string,"eval(""print('Hello')"")"
Creating a list of dictionaries in python,"[{'A': 1, 'C': 4, 'B': 2, 'D': 4},, {'A': 1, 'C': 4, 'B': 1, 'D': 5},]"
Creating a list of dictionaries in python,"[{'A': 1, 'C': 4, 'B': 2, 'D': 4},, {'A': 1, 'C': 4, 'B': 1, 'D': 5},]"
how to get all possible combination of items from 2-dimensional list in python?,list(itertools.product(*a))
"Pandas sum by groupby, but exclude certain columns","df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"
Python turning a list into a list of tuples,"done = [(el, x) for el in [a, b, c, d]]"
Removing nan values from an array,x = x[numpy.logical_not(numpy.isnan(x))]
Removing the first folder in a path,os.path.join(*x.split(os.path.sep)[2:])
Replacing instances of a character in a string,"line = line.replace(';', ':')"
Python - How to call bash commands with pipe?,"subprocess.call('tar c my_dir | md5sum', shell=True)"
hex string to character in python,"""""""437c2123"""""".decode('hex')"
Get required fields from Document in mongoengine?,"[k for k, v in User._fields.items() if v.required]"
Pandas remove column by index,"df = df.ix[:, 0:2]"
Change a string of integers separated by spaces to a list of int,"x = map(int, x.split())"
Change a string of integers separated by spaces to a list of int,x = [int(i) for i in x.split()]
Find and click an item from 'onclick' partial value,"driver.find_element_by_css_selector(""input[onclick*='1 Bedroom Deluxe']"")"
Python / Remove special character from string,"re.sub('[^a-zA-Z0-9-_*.]', '', my_string)"
How to display a pdf that has been downloaded in python,webbrowser.open('file:///my_pdf.pdf')
Removing backslashes from a string in Python,"result = result.replace('\\', '')"
Removing backslashes from a string in Python,"result.replace('\\', '')"
Replace value in any column in pandas dataframe,"df.replace('-', 'NaN')"
How do I convert datetime to date (in Python)?,datetime.datetime.now().date()
How do I convert datetime to date (in Python)?,datetime.datetime.now().date()
How to get all sub-elements of an element tree with Python ElementTree?,[elem.tag for elem in a.iter()]
How to get all sub-elements of an element tree with Python ElementTree?,[elem.tag for elem in a.iter() if elem is not a]
How can I split and parse a string in Python?,"""""""2.7.0_bf4fda703454"""""".split('_')"
Python - Move elements in a list of dictionaries to the end of the list,"sorted(lst, key=lambda x: x['language'] != 'en')"
"How to check if all values of a dictionary are 0, in Python?",all(value == 0 for value in list(your_dict.values()))
Python Pandas Pivot Table,"df.pivot_table('Y', rows='X', cols='X2')"
do a try-except without handling the exception,try:
doSomething(),
except:,
pass,
do a try-except without handling the exception,try:
doSomething(),
except Exception:,
pass,
Python - Sum 4D Array,M.sum(axis=0).sum(axis=0)
Python datetime to microtime,time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0
How to check if any value of a column is in a range in Pandas?,df[(x <= df['columnX']) & (df['columnX'] <= y)]
sort a list of lists by a specific index of the inner list,"sorted(L, key=itemgetter(2))"
sort a list of lists by a specific index of the inner list,l.sort(key=(lambda x: x[2]))
sort a list of lists by a specific index,"sorted(l, key=(lambda x: x[2]))"
sort a list of lists by a specific index,"sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))"
How to find row of 2d array in 3d numpy array,"np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))"
How to select only specific columns from a DataFrame with MultiIndex columns?,"data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"
How to select only specific columns from a DataFrame with MultiIndex columns?,"data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"
How to account for accent characters for regex in Python?,"hashtags = re.findall('#(\\w+)', str1, re.UNICODE)"
Rename Files,"os.rename(src, dst)"
How to get text for a root element using lxml?,print(etree.tostring(some_tag.find('strong')))
"Saving dictionary whose keys are tuples with json, python","json.dumps({str(k): v for k, v in data.items()},)"
How to correctly parse UTF-8 encoded HTML to Unicode strings with BeautifulSoup?,soup = BeautifulSoup(response.read().decode('utf-8'))
How to delete a file without an extension?,os.remove(filename)
Get the immediate minimum among a list of numbers in python,min([x for x in num_list if x > 2])
pandas: replace string with another string,df['prod_type'] = 'responsive'
How do I sort a list with positives coming before negatives with values sorted respectively?,"sorted(lst, key=lambda x: (x < 0, x))"
How do I calculate the date six months from the current date,six_months = (date.today() + relativedelta(months=(+ 6)))
How do I calculate the date six months from the current date,"(date(2010, 12, 31) + relativedelta(months=(+ 1)))"
How do I calculate the date six months from the current date,"(date(2010, 12, 31) + relativedelta(months=(+ 2)))"
calculate the date six months from the current date,print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())
Finding The Biggest Key In A Python Dictionary,"sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"
how to get all the values from a numpy array excluding a certain index?,a[np.arange(len(a)) != 3]
what is a quick way to delete all elements from a list that do not satisfy a constraint?,[x for x in lst if fn(x) != 0]
Python Pandas - Date Column to Column index,df.set_index('month')
How to read lines from a file into a multidimensional array (or an array of lists) in python,"arr = [line.split(',') for line in open('./urls-eu.csv')]"
python list comprehension with multiple 'if's,[i for i in range(100) if i > 10 if i < 20]
Removing letters from a list of both numbers and letters,""""""""""""".join([c for c in strs if c.isdigit()])"
splitting a string based on tab in the file,"re.split('\\t+', yas.rstrip('\t'))"
numpy matrix multiplication,(a.T * b).T
remove (chomp) a newline,'test string\n'.rstrip()
remove (chomp) a newline,'test string \n\n'.rstrip('\n')
remove (chomp) a newline,s.strip()
remove (chomp) a newline,s.rstrip()
remove (chomp) a newline,s.lstrip()
remove (chomp) a newline,'Mac EOL\r'.rstrip('\r\n')
remove (chomp) a newline,'Windows EOL\r\n'.rstrip('\r\n')
remove (chomp) a newline,'Unix EOL\n'.rstrip('\r\n')
remove (chomp) a newline,'Hello\n\n\n'.rstrip('\n')
Python - split sentence after words but with maximum of n characters in result,"re.findall('.{,16},\\b', text)"
NumPy List Comprehension Syntax,[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]
Convert unicode string to byte string,'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'.encode('latin-1')
Best way to split a DataFrame given an edge,df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())
Save JSON outputed from a URL to a file,"urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')"
Find indices of elements equal to zero from numpy array,numpy.where((x == 0))[0]
"python, subprocess: reading output from subprocess",sys.stdout.flush()
Converting integer to string,str(i)
Converting integer to string,a.__str__()
Converting integer to string,str(a)
Method to sort a list of lists?,L.sort(key=operator.itemgetter(1))
How do I add space between two variables after a print in Python,print(str(count) + '    ' + str(conv))
Pandas changing cell values based on another cell,"df.fillna(method='ffill', inplace=True)"
Is there a way to make the Tkinter text widget read only?,text.config(state=DISABLED)
Python sum of ASCII values of all characters in a string,"sum(map(ord, string))"
How to apply itertools.product to elements of a list of lists?,list(itertools.product(*arrays))
print number with commas as thousands separators,"'{:,},'.format(value)"
print number with commas as thousands separators,"locale.setlocale(locale.LC_ALL, 'en_US')"
"locale.format('%d', 1255000, grouping=True)",
"How to pass through a list of queries to a pandas dataframe, and output the list of results?","df[df.Col1.isin(['men', 'rocks', 'mountains'])]"
Accessing a value in a tuple that is in a list,[x[1] for x in L]
splitting unicode string into words,'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'.split()
Django - How to sort queryset by number of character in a field,"MyModel.objects.extra(select={'length': 'Length(name)'},).order_by('length')"
Python - Choose a dictionary in list which key is closer to a global value,"min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))"
Finding missing values in a numpy array,m[~m.mask]
Use of findall and parenthesis in Python,"re.findall('\\b[A-Z]', formula)"
How to define two-dimensional array in python,matrix = [([0] * 5) for i in range(5)]
Creating a numpy array of 3D coordinates from three 1D arrays,"np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T"
How to find the minimum value in a numpy matrix?,arr[arr != 0].min()
Python Selenium: Find object attributes using xpath,"browser.find_elements_by_xpath(""//*[@type='submit']/@value"").text"
Python Selenium: Find object attributes using xpath,"browser.find_elements_by_xpath(""//*[@type='submit']"").get_attribute('value')"
parse a YAML file,"with open('example.yaml', 'r') as stream:"
try:,
print((yaml.load(stream))),
except yaml.YAMLError as exc:,
print(exc),
parse a YAML file,with open('example.yaml') as stream:
try:,
print((yaml.load(stream))),
except yaml.YAMLError as exc:,
print(exc),
How to swap a group of column headings with their values in Pandas,"pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"
Getting today's date in YYYY-MM-DD in Python?,datetime.datetime.today().strftime('%Y-%m-%d')
How to urlencode a querystring in Python?,urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')
python sorting dictionary by length of values,"print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))"
convert list of tuples to multiple lists in Python,"map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"
convert list of tuples to multiple lists in Python,"map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"
convert list of tuples to multiple lists in Python,"zip(*[(1, 2), (3, 4), (5, 6)])"
Create a list of tuples with adjacent list elements if a condition is true,"[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]"
How can i set proxy with authentication in selenium chrome web driver using python,driver.get('http://www.google.com.br')
Python reversing an UTF-8 string,b = a.decode('utf8')[::-1].encode('utf8')
Extracting date from a string in Python,"dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)"
Extracting date from a string in Python,"dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)"
Extracting date from a string in Python,"dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)"
Efficient way to convert a list to dictionary,"dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))"
How can I check if a string contains ANY letters from the alphabet?,"re.search('[a-zA-Z]', the_string)"
Converting a Pandas GroupBy object to DataFrame,"DataFrame({'count': df1.groupby(['Name', 'City']).size()},).reset_index()"
Removing all non-numeric characters from string in Python,"re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')"
List comprehension with if statement,[y for y in a if y not in b]
How to subset a dataset in pandas dataframe?,df.groupby('ID').head(4)
How to unzip a list of tuples into individual lists?,zip(*l)
How do I combine two lists into a dictionary in Python?,"dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"
How do I combine two lists into a dictionary in Python?,"dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"
How do I get the different parts of a Flask request's url?,request.url
How to remove ^M from a text file and replace it with the next line,"somestring.replace('\\r', '')"
Best way to encode tuples with json,"simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))"
Converting string into datetime,"datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
Converting string into datetime,parser.parse('Aug 28 1999 12:00AM')
Python - Extract folder path from file path,os.path.split(os.path.abspath(existGDBPath))
Python - Extract folder path from file path,os.path.dirname(os.path.abspath(existGDBPath))
Post JSON using Python Requests,"requests.post('http://httpbin.org/post', json={'test': 'cheers'},)"
Python - Remove dictionary from list if key is equal to value,a = [x for x in a if x['link'] not in b]
Getting a request parameter in Jinja2,"{{request.args.get('a')},},"
Python - Create list with numbers between 2 values?,"list(range(11, 17))"
type conversion in python from int to float,data_df['grade'] = data_df['grade'].astype(float).astype(int)
Sorting or Finding Max Value by the second element in a nested list. Python,"max(alkaline_earth_values, key=lambda x: x[1])"
How to remove leading and trailing zeros in a string? Python,your_string.strip('0')
Generating all unique pair permutations,"list(permutations(list(range(9)), 2))"
Python regular expression matching a multiline block of text,"re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)"
Python regular expression matching a multiline block of text,"re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)"
How do you call a python file that requires a command line argument from within another python file?,"call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])"
Sort a multidimensional list by a variable number of keys,"a.sort(key=operator.itemgetter(2, 3))"
Add another tuple to a tuple,"final_choices = ((another_choice,) + my_choices)"
Add another tuple to a tuple,"final_choices = ((another_choice,) + my_choices)"
Find current directory and file's directory,os.getcwd()
Find current directory and file's directory,os.path.realpath(__file__)
Find current directory and file's directory,os.path.dirname(path)
Find current directory and file's directory,os.path.realpath(path)
Find current directory,dir_path = os.path.dirname(os.path.realpath(__file__))
Find current directory,cwd = os.getcwd()
Find current directory,full_path = os.path.realpath(__file__)
Sort numpy matrix row values in ascending order,"arr[arr[:, (2)].argsort()]"
Sort numpy matrix row values in ascending order,"numpy.sort(arr, axis=0)"
split string on a number of different characters,"re.split('[ .]', 'a b.c')"
copying one file's contents to another in python,"shutil.copy('file.txt', 'file2.txt')"
What's the best way to generate random strings of a specific length in Python?,print(''.join(choice(ascii_uppercase) for i in range(12)))
How to merge the elements in a list sequentially in python,"[''.join(seq) for seq in zip(lst, lst[1:])]"
python: rename single column header in pandas dataframe,"data.rename(columns={'gdp': 'log(gdp)'},, inplace=True)"
Converting html to text with Python,print(soup.get_text())
python: sort a list of lists by an item in the sublist,"sorted(li, key=operator.itemgetter(1), reverse=True)"
Pandas - replacing column values,"data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)"
Regex punctuation split [Python],"re.split('\\W+', 'Words, words, words.')"
Limit the number of sentences in a string,"re.match('(.*?[.?!](?:\\s+.*?[.?!]){0,1},)', phrase).group(1)"
Split string into strings of repeating elements,"print([a for a, b in re.findall('((\\w)\\2*)', s)])"
How does this function to remove duplicate characters from a string in python work?,print(' '.join(OrderedDict.fromkeys(s)))
How does this function to remove duplicate characters from a string in python work?,print(' '.join(set(s)))
How can i list only the folders in zip archive in Python?,[x for x in file.namelist() if x.endswith('/')]
How to find the count of a word in a string?,input_string.count('Hello')
Python: reduce (list of strings) -> string,print('.'.join([item[0] for item in data]))
Dumping subprcess output in a file in append mode,fh1.seek(2)
list of ints into a list of tuples python,"print(zip(my_list[0::2], my_list[1::2]))"
list of ints into a list of tuples python,"my_new_list = zip(my_list[0::2], my_list[1::2])"
"How to fix: ""UnicodeDecodeError: 'ascii' codec can't decode byte""",sys.setdefaultencoding('utf8')
Python datetime to string without microsecond component,datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
How to retrieve only arabic texts from a string using regular expression?,"print(re.findall('[\\u0600-\\u06FF]+', my_string))"
How to group DataFrame by a period of time?,df.groupby(df.index.map(lambda t: t.minute))
Accessing elements of python dictionary,dict['Apple']['American']
How to remove rows with null values from kth column onward in python,"df2.dropna(subset=['three', 'four', 'five'], how='all')"
How do I insert a list at the front of another list?,"a.insert(0, k)"
How do I insert a list at the front of another list?,a = a[:n] + k + a[n:]
Pyhon - Best way to find the 1d center of mass in a binary numpy array,np.flatnonzero(x).mean()
Keep only date part when using pandas.to_datetime,df['just_date'] = df['dates'].dt.date
Removing one list from another,[x for x in a if x not in b]
How do I transform a multi-level list into a list of strings in Python?,[''.join(x) for x in a]
How do I transform a multi-level list into a list of strings in Python?,"list(map(''.join, a))"
Matching blank lines with regular expressions,"re.split('\n\\s*\n', s)"
Merging items in a list - Python,from functools import reduce
"reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])",
Convert float to comma-separated string,"""""""{0:,.2f},"""""".format(24322.34)"
How to pass dictionary items as function arguments in python?,my_function(**data)
get line count,sum((1 for line in open('myfile.txt')))
get line count,def bufcount(filename):
f = open(filename),
lines = 0,
buf_size = (1024 * 1024),
read_f = f.read,
buf = read_f(buf_size),
while buf:,
lines += buf.count('\n'),
buf = read_f(buf_size),
return lines,
How to round integers in python,"print(round(1123.456789, -1))"
Sorting list based on values from another list?,"[x for y, x in sorted(zip(Y, X))]"
Sorting list based on values from another list?,"[x for y, x in sorted(zip(Y, X))]"
How to get week number in Python?,"datetime.date(2010, 6, 16).isocalendar()[1]"
Select multiple ranges of columns in Pandas DataFrame,"df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]"
Python Pandas: Multiple aggregations of the same column,"df.groupby('dummy').agg({'returns': [np.mean, np.sum]},)"
convert string to lowercase,s.lower()
convert string to lowercase,s.decode('utf-8').lower()
How to download a file via FTP with Python ftplib,"ftp.retrbinary('RETR %s' % filename, file.write)"
How do I increase the timeout for imaplib requests?,"urlfetch.fetch(url, deadline=10 * 60)"
Output first 100 characters in a string,print(my_string[0:100])
matplotlib Legend Markers Only Once,legend(numpoints=1)
Python - How to calculate equal parts of two dictionaries?,"dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"
load csv into 2D matrix with numpy for plotting,"numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)"
Django database query: How to filter objects by date range?,"Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"
Django database query: How to filter objects by date range?,"Sample.objects.filter(date__year='2011', date__month='01')"
syntax for creating a dictionary into another dictionary in python,"d['dict3'] = {'spam': 5, 'ham': 6},"
How to apply numpy.linalg.norm to each row of a matrix?,"numpy.apply_along_axis(numpy.linalg.norm, 1, a)"
How to merge two Python dictionaries in a single expression?,"dict((k, v) for d in dicts for k, v in list(d.items()))"
Python. Convert escaped utf string to utf-string,print('your string'.decode('string_escape'))
Counting the number of True Booleans in a Python List,"sum([True, True, False, False, False, True])"
Matplotlib.animation: how to remove white margin,"fig.set_size_inches(w, h, forward=True)"
python string format() with dict with integer keys,"'hello there %(5)s' % {'5': 'you'},"
Python - converting a string of numbers into a list of int,"map(int, example_string.split(','))"
Python - converting a string of numbers into a list of int,"[int(s) for s in example_string.split(',')]"
Python list of tuples to list of int,x = [i[0] for i in x]
Python list of tuples to list of int,"y = map(operator.itemgetter(0), x)"
Python list of tuples to list of int,y = [i[0] for i in x]
How do I extract all the values of a specific key from a list of dictionaries?,results = [item['value'] for item in test_data]
ISO Time (ISO 8601) in Python,datetime.datetime.now().isoformat()
ISO Time (ISO 8601) in Python,datetime.datetime.utcnow().isoformat()
Merging data frame columns of strings into one single column in Pandas,"df.apply(' '.join, axis=0)"
pandas Subtract Dataframe with a row from another dataframe,"pd.DataFrame(df.values - df2.values, columns=df.columns)"
How can I detect DOS line breaks in a file?,"print(open('myfile.txt', 'U').read())"
Python - read text file with weird utf-16 format,print(line.decode('utf-16-le').split())
Python - read text file with weird utf-16 format,"file = io.open('data.txt', 'r', encoding='utf-16-le')"
Finding common rows (intersection) in two Pandas dataframes,"s1 = pd.merge(df1, df2, how='inner', on=['user_id'])"
How can I check a Python unicode string to see that it *actually* is proper Unicode?,foo.decode('utf8').encode('utf8')
Numpy array dimensions,a.shape
Numpy array dimensions,N.shape(a)
Numpy array dimensions,N.shape(a)
Numpy array dimensions,a.shape
How to search a list of tuples in Python,"[i for i, v in enumerate(L) if v[0] == 53]"
convert a string of bytes into an int (python),"struct.unpack('<L', 'y\xcc\xa6\xbb')[0]"
How to get the values from a NumPy array using multiple indices,"arr[[0, 1, 1], [1, 0, 2]]"
what's a good way to combinate through a set?,list(powerset('abcd'))
Converting from a string to boolean in Python?,"s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']"
How do I url encode in Python?,urllib.parse.quote('http://spam.com/go/')
How can I get the output of a matplotlib plot as an SVG?,plt.savefig('test.svg')
Counting array elements in Python,len(myArray)
Python Embedding in C++ : ImportError: No module named pyfunction,"sys.path.insert(0, './path/to/your/modules/')"
How to plot with x-axis at the top of the figure?,ax.xaxis.set_ticks_position('top')
Python - Bulk Select then Insert from one DB to another,cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')
How do I use a regular expression to match a name?,"re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')"
How do I use a regular expression to match a name?,"re.match('[a-zA-Z][\\w-]*$', '!A_B')"
Convert hex string to int,"int('deadbeef', 16)"
Convert hex string to int,"int('a', 16)"
Convert hex string to int,"int('0xa', 16)"
Convert hex string to int,"int(s, 16)"
Convert hex string to int,"int(hexString, 16)"
How to print variables without spaces between values,"print('Value is ""' + str(value) + '""')"
How to print variables without spaces between values,"print('Value is ""{},""'.format(value))"
How do I convert an array to string using the jinja template engine?,"{{tags | join(' ')},},"
get a list of locally installed Python modules,help('modules')
Slicing a multidimensional list,[[[x[0]] for x in listD[i]] for i in range(len(listD))]
Sort a string in lexicographic order python,"sorted(s, key=str.upper)"
Sort a string in lexicographic order python,"sorted(sorted(s), key=str.upper)"
Sort a string in lexicographic order python,"sorted(s, key=str.lower)"
Compare Python Pandas DataFrames for matching rows,"pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')"
get keys correspond to a value in dictionary,"dict((v, k) for k, v in map.items())"
How to decode unicode raw literals to readable string?,s.decode('unicode_escape')
What is the easiest way to convert list with str into list with int?,[int(i) for i in str_list]
What is the easiest way to convert list with str into list with int?,"map(int, ['1', '2', '3'])"
What is the easiest way to convert list with str into list with int?,"list(map(int, ['1', '2', '3']))"
Python BeautifulSoup Extract specific URLs,"soup.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))"
Python BeautifulSoup Extract specific URLs,"soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"
Python: How can I execute a jar file through a python script,"subprocess.call(['java', '-jar', 'Blender.jar'])"
How can I insert NULL data into MySQL database with Python?,"cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))"
remove a substring from the end of a string,if url.endswith('.com'):
url = url[:(-4)],
remove a substring from the end of a string,"url = re.sub('\\.com$', '', url)"
remove a substring from the end of a string,"print(url.replace('.com', ''))"
remove a substring from the end of a string,if (not text.endswith(suffix)):
return text,
return text[:(len(text) - len(suffix))],
Python - print tuple elements with no brackets,"print(', ,'.join([str(i[0]) for i in mytuple]))"
Clamping floating numbers in Python?,"max(min(my_value, max_value), min_value)"
Splitting a string into words and punctuation,"re.findall('\\w+|[^\\w\\s]', text, re.UNICODE)"
How to execute raw SQL in SQLAlchemy-flask app,result = db.engine.execute('<sql here>')
Is there a method that tells my program to quit?,sys.exit(0)
Python - find digits in a string,""""""""""""".join(c for c in my_string if c.isdigit())"
python split string based on regular expression,"re.split(' +', str1)"
python split string based on regular expression,"re.findall('\\S+', str1)"
Python: How to get attribute of attribute of an object with getattr?,"getattr(getattr(myobject, 'id', None), 'number', None)"
Convert generator object to a dictionary,"{i: (i * 2) for i in range(10)},"
Convert generator object to a dictionary,"dict((i, i * 2) for i in range(10))"
How do I tell matplotlib that I am done with a plot?,plt.cla()
Python Convert String Literal to Float,"total = sum(float(item) for item in s.split(','))"
Python ASCII to binary,bin(ord('P'))
Get a string after a specific substring,"print(my_string.split(', ', 1)[1])"
Python Accessing Nested JSON Data,print(data['places'][0]['post code'])
Python RegEx using re.sub with multiple patterns,"word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3},)$', '\\1\\2', word)"
How to extract data from JSON Object in Python?,"json.loads('{""foo"": 42, ""bar"": ""baz""},')['bar']"
Convert JSON array to Python list,data = json.loads(array)
Convert JSON array to Python list,data = json.loads(array)
Parsing a tweet to extract hashtags into an array in Python,"re.findall('#(\\w+)', 'http://example.org/#comments')"
Python - Fastest way to check if a string contains specific characters in any of the items in a list,any(e in lestring for e in lelist)
How to plot two columns of a pandas data frame using points?,"df.plot(x='col_name_1', y='col_name_2', style='o')"
Parsing HTML,parsed_html = BeautifulSoup(html)
"print(parsed_html.body.find('div', attrs={'class': 'container', },).text)",
Parsing HTML,page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page),
change figure size and figure format in matplotlib,"plt.figure(figsize=(3, 4))"
Best way to strip punctuation from a string in Python,"s.translate(None, string.punctuation)"
Django urlsafe base64 decoding with decryption,base64.urlsafe_b64decode(uenc.encode('ascii'))
Get the number of all keys in a dictionary of dictionaries in Python,len(dict_test) + sum(len(v) for v in dict_test.values())
Python convert decimal to hex,hex(d).split('x')[1]
converting integer to list in python,list(str(123))
converting integer to list in python,[int(x) for x in str(num)]
Python Mechanize select a form with no name,br.select_form(nr=0)
Python load json file with UTF-8 BOM header,"json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"
Python load json file with UTF-8 BOM header,json.loads(open('sample.json').read().decode('utf-8-sig'))
Issue sending email with python?,"server = smtplib.SMTP('smtp.gmail.com', 587)"
Reversing bits of Python integer,"int('{:08b},'.format(n)[::-1], 2)"
Pandas DataFrame Add column to index without resetting,"df.set_index(['d'], append=True)"
Iterating over dictionaries using for loops,"for (key, value) in d.items():"
pass,
Iterating over dictionaries using for loops,"for (key, value) in list(d.items()):"
pass,
Iterating over dictionaries using for loops,"for (letter, number) in list(d.items()):"
pass,
Iterating over dictionaries using for loops,"for (k, v) in list(d.items()):"
pass,
Iterating over dictionaries using for loops,list(d.items())
Iterating over dictionaries using for loops,list(d.items())
Iterating over dictionaries using for loops,"for (k, v) in list(d.items()):"
pass,
Iterating over dictionaries using for loops,"for (letter, number) in list(d.items()):"
pass,
Iterating over dictionaries using for loops,"for (letter, number) in list(d.items()):"
pass,
How do I implement a null coalescing operator in SQLAlchemy?,session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()
How do I compile a Visual Studio project from the command-line?,os.system('msbuild project.sln /p:Configuration=Debug')
Get max key in dictionary,"max(list(MyCount.keys()), key=int)"
Can I use an alias to execute a program from a python script,os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')
How to get a function name as a string in Python?,my_function.__name__
How to get a function name as a string in Python?,my_function.__name__
How to check if all values in the columns of a numpy matrix are the same?,"np.all(a == a[(0), :], axis=0)"
Sorting a list of tuples by the addition of second and third element of the tuple,"sorted(a, key=lambda x: (sum(x[1:3]), x[0]))"
Sorting a list of tuples by the addition of second and third element of the tuple,"sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)"
Sorting a list of tuples by the addition of second and third element of the tuple,"sorted(lst, key=lambda x: (sum(x[1:]), x[0]))"
Sorting a list of tuples by the addition of second and third element of the tuple,"sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)"
Add headers in a Flask app with unicode_literals,"response.headers['WWW-Authenticate'] = 'Basic realm=""test""'"
"In Django, how do I clear a sessionkey?",del request.session['mykey']
Python date string to date object,"datetime.datetime.strptime('24052010', '%d%m%Y').date()"
Replace non-ASCII characters with a single space,"re.sub('[^\\x00-\\x7F]+', ' ', text)"
List of lists into numpy array,"numpy.array([[1, 2], [3, 4]])"
What does a for loop within a list do in Python?,myList = [i for i in range(10)]
using regular expression to split string in python,[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]
using regular expression to split string in python,"[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]"
How to remove the space between subplots in matplotlib.pyplot?,"fig.subplots_adjust(wspace=0, hspace=0)"
How to reverse tuples in Python?,x[::-1]
Python JSON encoding,"json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'},)"
Writing List of Strings to Excel CSV File in Python,csvwriter.writerow(row)
How to convert datetime to string in python in django,"{{(item.date | date): 'Y M d'},},"
Non-consuming regular expression split in Python,"re.split('(?<=[\\.\\?!]) ', text)"
UTF in Python Regex,re.compile('\xe2\x80\x93')
declare an array,variable = []
declare an array,intarray = array('i')
How to reverse the elements in a sublist?,[sublist[::-1] for sublist in to_reverse[::-1]]
Replace all non-alphanumeric characters in a string,"re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')"
Python: unescape special characters without splitting data,""""""""""""".join(['I ', '<', '3s U ', '&', ' you luvz me'])"
How can I disable logging while running unit tests in Python Django?,logging.disable(logging.CRITICAL)
Adding url to mysql row in python,"cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))"
Convert column of date objects in Pandas DataFrame to strings,df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')
python regex get first part of an email address,s.split('@')[0]
Python Pandas: drop rows of a timeserie based on time range,df.query('index < @start_remove or index > @end_remove')
Python Pandas: drop rows of a timeserie based on time range,df.loc[(df.index < start_remove) | (df.index > end_remove)]
How to count the Nan values in the column in Panda Data frame,df.isnull().sum()
Turn Pandas Multi-Index into column,df.reset_index(inplace=True)
python getting a list of value from list of dict,[x['value'] for x in list_of_dicts]
python getting a list of value from list of dict,[d['value'] for d in l]
python getting a list of value from list of dict,[d['value'] for d in l if 'value' in d]
Converting NumPy array into Python List structure?,"np.array([[1, 2, 3], [4, 5, 6]]).tolist()"
Converting string to tuple and adding to tuple,"ast.literal_eval('(1,2,3,4)')"
How to keep a list of lists sorted as it is created,dataList.sort(key=lambda x: x[1])
Python: Uniqueness for list of lists,"list(map(list, set(map(lambda i: tuple(i), testdata))))"
Python: Uniqueness for list of lists,[list(i) for i in set(tuple(i) for i in testdata)]
"In Django, how do I check if a user is in a certain group?",return user.groups.filter(name='Member').exists()
"In Django, how do I check if a user is in a certain group?","return user.groups.filter(name__in=['group1', 'group2']).exists()"
Dynamically changing log level in python without restarting the application,logging.getLogger().setLevel(logging.DEBUG)
How to transform a tuple to a string of values without comma and parentheses,""""""""""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))"
What is the simplest way to swap char in a string with Python?,""""""""""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])"
Drawing a huge graph with networkX and matplotlib,"plt.savefig('graph.png', dpi=1000)"
delete items from list of list: pythonic way,my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]
Find an element in a list of tuples,[item for item in a if 1 in item]
Find an element in a list of tuples,[item for item in a if item[0] == 1]
How can I get the index value of a list comprehension?,"{p.id: {'id': p.id, 'position': ind}, for ind, p in enumerate(p_list)},"
how to uniqify a list of dict in python,[dict(y) for y in set(tuple(x.items()) for x in d)]
How do I load a file into the python console?,"exec(compile(open('file.py').read(), 'file.py', 'exec'))"
Get the number of rows in table using SQLAlchemy,rows = session.query(Congress).count()
Execute Shell Script from python with variable,"subprocess.call(['test.sh', str(domid)])"
How to read a .xlsx file using the pandas Library in iPython?,"dfs = pd.read_excel(file_name, sheetname=None)"
Reading hex to double-precision float python,"struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"
Indexing numpy array with another numpy array,a[tuple(b)]
How to find all possible sequences of elements in a list?,"map(list, permutations([2, 3, 4]))"
Sort a list in python based on another sorted list,"sorted(unsorted_list, key=presorted_list.index)"
How to get yesterday in python,datetime.datetime.now() - datetime.timedelta(days=1)
Creating a zero-filled pandas data frame,"d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)"
string find,x.find('World')
string find,x.find('Aloha')
string find,'sdfasdf'.index('cc')
string find,'sdfasdf'.index('df')
string find,str.find('a')
string find,str.find('g')
string find,"str.find('s', 11)"
string find,"str.find('s', 15)"
string find,"str.find('s', 16)"
string find,"str.find('s', 11, 14)"
Sort list of date strings,"sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"
Regular expression in Python sentence extractor,"re.split('\\.\\s', text)"
Regular expression in Python sentence extractor,"re.split('\\.\\s', re.sub('\\.\\s*$', '', text))"
Python - How to cut a string in Python?,"""""""foobar""""""[:4]"
Python - How to cut a string in Python?,s.rfind('&')
Python - How to cut a string in Python?,s[:s.rfind('&')]
Using a variable in xpath in Python Selenium,"driver.find_element_by_xpath(""//option[@value='"" + state + ""']"").click()"
append to a file,"with open('test.txt', 'a') as myfile:"
myfile.write('appended text'),
append to a file,"with open('foo', 'a') as f:"
f.write('cool beans...'),
append to a file,"with open('test1', 'ab') as f:"
pass,
append to a file,"open('test', 'a+b').write('koko')"
How can I split a string into tokens?,"print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])"
Python: Check if a string contains chinese character?,"re.findall('[\u4e00-\u9fff]+', ipath)"
String splitting in Python,s.split('s')
How to start a background process in Python?,"subprocess.Popen(['rm', '-r', 'some.file'])"
Elegant way to transform a list of dict into a dict of dicts,"dict((d['name'], d) for d in listofdict)"
print date in a regular format,datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
print date in a regular format,time.strftime('%Y-%m-%d %H:%M')
Finding consecutive consonants in a word,"re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)"
How do I get a list of indices of non zero elements in a list?,"[i for i, e in enumerate(a) if e != 0]"
How to get integer values from a string in Python?,"map(int, re.findall('\\d+', string1))"
How can I know python's path under windows?,os.path.dirname(sys.executable)
Moving x-axis to the top of a plot in matplotlib,ax.xaxis.set_label_position('top')
Moving x-axis to the top of a plot in matplotlib,ax.xaxis.tick_top()
Moving x-axis to the top of a plot in matplotlib,ax.xaxis.set_ticks_position('top')
Parsing non-zero padded timestamps in Python,"datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"
Open images,img = Image.open('picture.jpg')
img.show(),
Open images,img = Image.open('picture.jpg')
Img.show,
How do I abort the execution of a Python script?,sys.exit(0)
How do I abort the execution of a Python script?,sys.exit('aa! errors!')
How do I abort the execution of a Python script?,sys.exit()
Find maximum with limited length in a list,"[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]"
How to set the current working directory in Python?,os.chdir('c:\\Users\\uname\\desktop\\python')
How to set the current working directory in Python?,os.chdir(path)
How to remove all integer values from a list in python,"no_integers = [x for x in mylist if not isinstance(x, int)]"
How do I match contents of an element in XPath (lxml)?,"tree.xpath("".//a[text()='Example']"")[0].tag"
convert dictionaries into string python,""""""", """""".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])"
Detecting non-ascii characters in unicode string,"print(set(re.sub('[\x00-\x7f]', '', '\xa3\u20ac\xa3\u20ac')))"
Detecting non-ascii characters in unicode string,"print(re.sub('[\x00-\x7f]', '', '\xa3100 is worth more than \u20ac100'))"
Convert a String representation of a Dictionary to a dictionary?,"ast.literal_eval(""{'muffin' : 'lolz', 'foo' : 'kitty'},"")"
Easiest way to remove unicode representations from a string in python 3?,print(t.decode('unicode_escape'))
String encoding and decoding from possibly latin1 and utf8,print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))
merge lists into a list of tuples,"zip(list_a, list_b)"
merge lists into a list of tuples,"list(zip(a, b))"
python pandas dataframe to dictionary,df.set_index('id').to_dict()
python pandas dataframe to dictionary,df.set_index('id')['value'].to_dict()
Can I sort text by its numeric value in Python?,"sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))"
How can I remove text within parentheses with a regex?,"re.sub('\\([^)]*\\)', '', filename)"
How can I tell if a string only contains letter AND spaces,"""""""a b"""""".replace(' ', '').isalpha()"
Add SUM of values of two LISTS into new LIST,"[(x + y) for x, y in zip(first, second)]"
How to sort a Python dictionary by value?,"sorted(list(a_dict.items()), key=lambda item: item[1][1])"
How to exclude a character from a regex group?,re.compile('[^a-zA-Z0-9-]+')
Get index of the top n values of a list in python,"sorted(list(range(len(a))), key=lambda i: a[i])[-2:]"
Get index of the top n values of a list in python,"zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]"
Get index of the top n values of a list in python,"sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]"
How to get the index with the key in Python dictionary?,list(x.keys()).index('c')
"How to print +1 in Python, as +1 (with plus sign) instead of 1?","print('{0:+d},'.format(score))"
Remove adjacent duplicate elements from a list,"[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]"
Converting a String to List in Python,"""""""0,1,2"""""".split(',')"
Converting a String to List in Python,"[int(x) for x in '0,1,2'.split(',')]"
Python: Convert list of key-value tuples into dictionary?,"dict([('A', 1), ('B', 2), ('C', 3)])"
How to write a multidimensional array to a text file?,"np.savetxt('test.txt', x)"
How to store os.system() output in a variable or a list in python,"direct_output = subprocess.check_output('ls', shell=True)"
Select everything but a list of columns from pandas dataframe,df[df.columns - ['T1_V6']]
How to count values in a certain range in a Numpy array?,((25 < a) & (a < 100)).sum()
how to get day name in datetime in python,date.today().strftime('%A')
Python regular expression match whole word,"re.search('\\bis\\b', your_string)"
Python: How do I format a date in Jinja2?,"{{car.date_of_manufacture | datetime},},"
Python: How do I format a date in Jinja2?,"{{car.date_of_manufacture.strftime('%Y-%m-%d')},},"
Making a flat list out of list of lists,[item for sublist in l for item in sublist]
Making a flat list out of list of lists,list(itertools.chain(*list2d))
Making a flat list out of list of lists,list(itertools.chain.from_iterable(list2d))
Convert int to ASCII and back in Python,ord('a')
Python: use regular expression to remove the white space from all lines,"re.sub('(?m)^[^\\S\\n]+', '', '  a\n b\n c\nd  e')"
Python: use regular expression to remove the white space from all lines,"re.sub('(?m)^\\s+', '', 'a\n b\n c')"
Python: Assign each element of a List to a separate Variable,"a, b, c = [1, 2, 3]"
Python split a list into subsets based on pattern,"[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]"
Regular expression substitution in Python,"line = re.sub('\\(+as .*?\\) ', '', line)"
How to skip the extra newline while printing lines read from a file?,print(line.rstrip('\n'))
Get index values of Pandas DataFrame as list?,df.index.values.tolist()
check if a list is empty,if (not a):
pass,
check if a list is empty,if (not seq):
pass,
check if a list is empty,if (len(li) == 0):
pass,
Find the indices of elements greater than x,"[i for i, v in enumerate(a) if v > 4]"
sorting list of nested dictionaries in python,"sorted(yourdata, reverse=True)"
sorting list of nested dictionaries in python,"sorted(yourdata, key=lambda d: d.get('key', {},).get('subkey'), reverse=True)"
sorting list of nested dictionaries in python,"yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"
How to remove decimal points in pandas,df.round()
How to extract data from matplotlib plot,gca().get_lines()[n].get_xydata()
How to get the N maximum values per row in a numpy ndarray?,"A[:, -2:]"
MultiValueDictKeyError in Django,"request.GET.get('username', '')"
Any way to properly pretty-print ordered dictionaries in Python?,pprint(dict(list(o.items())))
Django can't find URL pattern,"url('^$', include('sms.urls')),"
Django can't find URL pattern,"url('^', include('sms.urls')),"
Pythonic way to get the largest item in a list,"max_item = max(a_list, key=operator.itemgetter(1))"
Pythonic way to get the largest item in a list,"max(a_list, key=operator.itemgetter(1))"
How to iterate over time periods in pandas,"s.resample('3M', how='sum')"
how to extract elements from a list in python?,"[a[i] for i in (1, 2, 5)]"
Python: Filter lines from a text file which contain a particular word,[line for line in open('textfile') if 'apple' in line]
How to convert a Date string to a DateTime object?,"datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')"
"Reading tab-delimited file with Pandas - works on Windows, but not on Mac","pandas.read_csv(filename, sep='\t', lineterminator='\r')"
Replace first occurence of string,"'longlongTESTstringTEST'.replace('TEST', '?', 1)"
How can I zip file with a flattened directory structure using Zipfile in Python?,"archive.write(pdffile, os.path.basename(pdffile))"
"Elegant way to create a dictionary of pairs, from a list of tuples?",dict(x[1:] for x in reversed(myListOfTuples))
How to subtract two lists in python,"[(x1 - x2) for x1, x2 in zip(List1, List2)]"
How to tell if string starts with a number?,string[0].isdigit()
How to tell if string starts with a number?,"strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))"
How can I find script's directory with Python?,print(os.path.dirname(os.path.realpath(__file__)))
Finding the surrounding sentence of a char/word in a string,"re.split('(?<=\\?|!|\\.)\\s{0,2},(?=[A-Z]|$)', text)"
"Plotting a list of (x, y) coordinates in python matplotlib",plt.scatter(*zip(*li))
Rearrange tuple of tuples in Python,tuple(zip(*t))
Find Average of Every Three Columns in Pandas dataframe,"df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
How do I convert a list of ascii values to a string in python?,""""""""""""".join(chr(i) for i in L)"
Python 2.7 Counting number of dictionary items with given value,sum(x == chosen_value for x in list(d.values()))
Python 2.7 Counting number of dictionary items with given value,sum(1 for x in list(d.values()) if some_condition(x))
convert double to float in Python,"struct.unpack('f', struct.pack('f', 0.00582811585976))"
Converting datetime.date to UTC timestamp in Python,"timestamp = (dt - datetime(1970, 1, 1)).total_seconds()"
Custom sorting in pandas dataframe,df.sort('m')
How to sort with lambda in Python,"a = sorted(a, key=lambda x: x.modified, reverse=True)"
How can I print the Truth value of a variable?,print(bool(a))
How can I change a specific row label in a Pandas dataframe?,"df = df.rename(index={last: 'a'},)"
Scikit-learn: How to run KMeans on a one-dimensional array?,"km.fit(x.reshape(-1, 1))"
sorting a list in python,"sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)"
login to a site using python and opening the login site in the browser,webbrowser.open('http://somesite.com/adminpanel/index.php')
"Pythonic way to fetch all elements in a dictionary, falling between two keys?","dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)"
"Pythonic way to fetch all elements in a dictionary, falling between two keys?","dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)"
python sorting two lists,"[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]"
number of values in a list greater than a certain number,sum(((i > 5) for i in j))
number of values in a list greater than a certain number,len([1 for i in j if (i > 5)])
number of values in a list greater than a certain number,j = np.array(j)
sum((j > i)),
Python: elegant way of creating a list of tuples?,"[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"
Changing file permission in python,"os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"
Multiple files for one argument in argparse Python 2.7,"parser.add_argument('file', nargs='*')"
Comparing values in two lists in Python,"z = [(i == j) for i, j in zip(x, y)]"
Comparing values in two lists in Python,[(x[i] == y[i]) for i in range(len(x))]
Python: Extract numbers from a string,"[int(s) for s in re.findall('\\b\\d+\\b', ""he33llo 42 I'm a 32 string 30"")]"
Create an empty data frame with index from another data frame,df2 = pd.DataFrame(index=df1.index)
How do I convert a string 2 bytes long to an integer in python,"struct.unpack('h', pS[0:2])"
Printing lists onto tables in python,"print('\n'.join('  '.join(map(str, row)) for row in t))"
Sort Pandas Dataframe by Date,df.sort_values(by='Date')
How can I check if a checkbox is checked in Selenium Python Webdriver?,driver.find_element_by_name('<check_box_name>').is_selected()
How can I check if a checkbox is checked in Selenium Python Webdriver?,driver.find_element_by_id('<check_box_id>').is_selected()
Is it possible to use 'else' in a python list comprehension?,"[(a if a else 2) for a in [0, 1, 0, 3]]"
Parsing string containing Unicode character names,"'M\\N{AMPERSAND},M\\N{APOSTROPHE},s'.encode().decode('unicode-escape')"
Parsing string containing Unicode character names,"'M\\N{AMPERSAND},M\\N{APOSTROPHE},s'.decode('unicode-escape')"
Convert unicode codepoint to UTF8 hex in python,"chr(int('fd9b', 16)).encode('utf-8')"
How can I get Python to use upper case letters to print hex values?,print('0x%X' % value)
How to remove empty string in a list?,cleaned = [x for x in your_list if x]
Python: Want to use a string as a slice specifier,slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])
Beautiful Soup Using Regex to Find Tags?,"soup.find_all(['a', 'div'])"
Get function name as a string in python,print(func.__name__)
How to convert dictionary into string,""""""""""""".join('{},{},'.format(key, val) for key, val in sorted(adict.items()))"
How to convert dictionary into string,""""""""""""".join('{},{},'.format(key, val) for key, val in list(adict.items()))"
copy a list,new_list = old_list[:]
copy a list,new_list = list(old_list)
copy a list,new_list = copy.copy(old_list)
copy a list,new_list = copy.deepcopy(old_list)
copy a list,[i for i in old_list]
Remove or adapt border of frame of legend using matplotlib,plt.legend(frameon=False)
How to work with surrogate pairs in Python?,"""""""\\ud83d\\ude4f"""""".encode('utf-16', 'surrogatepass').decode('utf-16')"
Calling a function of a module from a string with the function's name in Python,globals()['myfunction']()
Checking if a website is up,urllib.request.urlopen('http://www.stackoverflow.com').getcode()
Checking if a website is up,conn = httplib.HTTPConnection('www.python.org')
"conn.request('HEAD', '/')",
r1 = conn.getresponse(),
"print(r1.status, r1.reason)",
Checking if a website is up,r = requests.head(url)
return (r.status_code == 200),
Checking if a website is up,print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())
Selenium open pop up window [Python],"driver.find_element_by_css_selector(""a[href^='javascript']"").click()"
"How to store data frame using PANDAS, Python",df.to_pickle(file_name)
Pandas: Mean of columns with the same names,"df.groupby(by=df.columns, axis=1).mean()"
How to perform double sort inside an array?,"bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)"
How to get alpha value of a PNG image with PIL?,alpha = img.split()[-1]
How to get the length of words in a sentence?,[len(x) for x in s.split()]
Find a specific tag with BeautifulSoup,"soup.findAll('div', style='width=300px;')"
Using a Python dict for a SQL INSERT statement,"cursor.execute(sql, list(myDict.values()))"
Preserving Column Order - Python Pandas and Column Concat,"df.to_csv('Result.csv', index=False, sep=' ')"
Python: Extract variables out of namespace,globals().update(vars(args))
Regular expression to return all characters between two special characters,"re.findall('\\[(.*?)\\]', mystring)"
"Python, print all floats to 2 decimal places in output","print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))"
The best way to filter a dictionary in Python,"d = dict((k, v) for k, v in d.items() if v > 0)"
The best way to filter a dictionary in Python,"d = {k: v for k, v in list(d.items()) if v > 0},"
In Pandas how do I convert a string of date strings to datetime objects and put them in a DataFrame?,pd.to_datetime(pd.Series(date_stngs))
Print the complete string of a pandas dataframe,"df.iloc[2, 0]"
How to change the font size on a matplotlib plot,"matplotlib.rcParams.update({'font.size': 22},)"
Convert Python dict into a dataframe,"pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"
Pandas: Elementwise multiplication of two dataframes,"pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)"
How to extract a floating number from a string,"re.findall('\\d+\\.\\d+', 'Current Level: 13.4 db.')"
How to extract a floating number from a string,"re.findall('[-+]?\\d*\\.\\d+|\\d+', 'Current Level: -13.2 db or 14.2 or 3')"
Convert List to a list of tuples python,"zip(it, it, it)"
How to lowercase a python dataframe string column if it has missing values?,df['x'].str.lower()
python append to array in json object,"jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8},)"
Most Pythonic way to concatenate strings,""""""""""""".join(lst)"
Python: Sum values in a dictionary based on condition,sum(v for v in list(d.values()) if v > 0)
Flask application traceback doesn't show up in server log,app.run(debug=True)
How to drop a list of rows from Pandas dataframe?,"df.drop(df.index[[1, 3]], inplace=True)"
pandas DataFrame: replace nan values with average of columns,"df.apply(lambda x: x.fillna(x.mean()), axis=0)"
How to extract from a list of objects a list of specific attribute?,[o.my_attr for o in my_list]
python get time stamp on file in mm/dd/yyyy format,"time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))"
Python: Check if one dictionary is a subset of another larger dictionary,all(item in list(superset.items()) for item in list(subset.items()))
Python: for loop in index assignment,[str(wi) for wi in wordids]
Indexing a pandas dataframe by integer,df2 = df.reset_index()
Convert datetime object to a String of date only in Python,dt.strftime('%m/%d/%Y')
Python Add Comma Into Number String,"print('Total cost is: ${:,.2f},'.format(TotalAmount))"
Sum of Every Two Columns in Pandas dataframe,"df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"
creating list of random numbers in python,randomList = [random.random() for _ in range(10)]
beautifulsoup can't find href in file using regular expression,"print(soup.find('a', href=re.compile('.*follow\\?page.*')))"
"In Python, why won't something print without a newline?",sys.stdout.flush()
How to get a random value in python dictionary,"country, capital = random.choice(list(d.items()))"
Is there a function in python to split a word into a list?,list('Word to Split')
Regex: How to match words without consecutive vowels?,"[w for w in open('file.txt') if not re.search('[aeiou]{2},', w)]"
Using a RegEx to match IP addresses in Python,"pat = re.compile('^\\d{1,3},\\.\\d{1,3},\\.\\d{1,3},\\.\\d{1,3},$')"
How to execute a file within the python interpreter?,"exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"
Returning distinct rows in SQLAlchemy with SQLite,session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()
Remove NULL columns in a dataframe Pandas?,"df = df.dropna(axis=1, how='all')"
Python counting elements of a list within a list,all(x.count(1) == 3 for x in L)
Comparing elements between elements in two lists of tuples,[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]
how to clear/delete the Textbox in tkinter python on Ubuntu,"tex.delete('1.0', END)"
Python convert long to date,datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')
How can I start a Python thread FROM C++?,system('python myscript.py')
sorting a list with objects of a class as its items,your_list.sort(key=operator.attrgetter('anniversary_score'))
sorting a list with objects of a class as its items,your_list.sort(key=lambda x: x.anniversary_score)
How can I convert a tensor into a numpy array in TensorFlow?,"print(type(tf.Session().run(tf.constant([1, 2, 3]))))"
"in Python, How to join a list of tuples into one list?",list(itertools.chain(*a))
How do I pythonically set a value in a dictionary if it is None?,"count.setdefault('a', 0)"
Python Pandas : group by in group by and average?,df.groupby(['cluster']).mean()
"from list of integers, get number closest to a given value","min(myList, key=lambda x: abs(x - myNumber))"
Find array item in a string,any(x in string for x in search)
Find string with regular expression in python,print(pattern.search(url).group(1))
"How do I convert all strings (like ""Fault"") and into a unique float?",(s.factorize()[0] + 1).astype('float')
Subtract values in one list from corresponding values in another list - Python,"C = [(a - b) for a, b in zip(A, B)]"
How to derive the week start for a given (iso) weeknumber / year in python,"datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')"
Python: How do I convert an array of strings to an array of numbers?,"map(int, ['1', '-1', '1'])"
"How to create datetime object from ""16SEP2012"" in python","datetime.datetime.strptime('16Sep2012', '%d%b%Y')"
How do I use a dictionary to update fields in Django models?,Book.objects.filter(pk=pk).update(**d)
How do I use a dictionary to update fields in Django models?,Book.objects.create(**d)
Precision in python,"print('{0:.2f},'.format(your_number))"
Python: How to generate a 12-digit random number?,"random.randint(100000000000, 999999999999)"
Python: How to generate a 12-digit random number?,"int(''.join(str(random.randint(0, 9)) for _ in range(12)))"
Python: How to generate a 12-digit random number?,""""""""""""".join(str(random.randint(0, 9)) for _ in range(12))"
Python: How to generate a 12-digit random number?,"'%0.12d' % random.randint(0, 999999999999)"
How to remove specific elements in a numpy array,"numpy.delete(a, index)"
Sort a list based on dictionary values in python?,"sorted(trial_list, key=lambda x: trial_dict[x])"
read a single character from the user,sys.stdin.read(1)
How to get a list of matchable characters from a regex class,"print(re.findall(pattern, x))"
how to get the context of a search in BeautifulSoup?,k = soup.find(text=re.compile('My keywords')).parent.text
Convert a row in pandas into list,"df.apply(lambda x: x.tolist(), axis=1)"
Convert a 1D array to a 2D array in numpy,"B = np.reshape(A, (-1, 2))"
Flask - How to make an app externally visible through a router?,"app.run(host='192.168.0.58', port=9000, debug=False)"
Stdout encoding in python,print('\xc5\xc4\xd6'.encode('UTF8'))
Best way to get the nth element of each tuple from a list of tuples in Python,[x[0] for x in G]
Regular expression matching all but a string,"re.findall('-(?!aa-|bb-)([^-]+)', string)"
Regular expression matching all but a string,"re.findall('-(?!aa|bb)([^-]+)', string)"
Removing entries from a dictionary based on values,"{k: v for k, v in list(hand.items()) if v},"
Removing entries from a dictionary based on values,"dict((k, v) for k, v in hand.items() if v)"
Python sorting - A list of objects,"sorted(L, key=operator.itemgetter('resultType'))"
Python sorting - A list of objects,s.sort(key=operator.attrgetter('resultType'))
Python sorting - A list of objects,somelist.sort(key=lambda x: x.resultType)
pandas joining multiple dataframes on columns,"df1.merge(df2, on='name').merge(df3, on='name')"
random Decimal in python,decimal.Decimal(random.randrange(10000)) / 100
list all files of a directory,"onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
list all files of a directory,f = []
"for (dirpath, dirnames, filenames) in walk(mypath):",
f.extend(filenames),
break,
list all files of a directory,print(glob.glob('/home/adam/*.txt'))
list all files of a directory,os.listdir('somedirectory')
psycopg2: insert multiple rows with one query,"cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)"
get key by value in dictionary with same value in python?,print([key for key in d if d[key] == 1])
get key by value in dictionary with same value in python?,"print([key for key, value in d.items() if value == 1])"
get key by value in dictionary with same value in python?,"print([key for key, value in list(d.items()) if value == 1])"
What is the best way to create a string array in python?,strs = ['' for x in range(size)]
generate pdf from markdown file,"with open(input_filename, 'r') as f:"
"html_text = markdown(f.read(), output_format='html4')",
"pdfkit.from_string(html_text, output_filename)",
Remove duplicate dict in list in Python,[dict(t) for t in set([tuple(d.items()) for d in l])]
How to set the timezone in Django?,TIME_ZONE = 'Europe/Istanbul'
Appending to list in Python dictionary,"dates_dict.setdefault(key, []).append(date)"
How to do this GROUP BY query in Django's ORM with annotate and aggregate,Article.objects.values('pub_date').annotate(article_count=Count('title'))
How to clear Tkinter Canvas?,canvas.delete('all')
How to add a specific number of characters to the end of string in Pandas?,"s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"
How do I translate a ISO 8601 datetime string into a Python datetime object?,"datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')"
How to sort a list according to another list?,a.sort(key=lambda x: b.index(x[0]))
How to sort a list according to another list?,a.sort(key=lambda x_y: b.index(x_y[0]))
Matplotlib - How to plot a high resolution graph?,plt.savefig('filename.png')
Matplotlib - How to plot a high resolution graph?,"plt.savefig('filename.png', dpi=300)"
How to get output of exe in python script?,p1.communicate()[0]
How to get output of exe in python script?,"output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"
Using BeautifulSoup to search html for string,soup.body.findAll(text='Python')
Using BeautifulSoup to search html for string,soup.body.findAll(text='Python Jobs')
Python: sorting items in a dictionary by a part of a key?,"sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))"
Find non-common elements in lists,"set([1, 2, 3]) ^ set([3, 4, 5])"
retrieving list items from request.POST in django/python,request.POST.getlist('pass_id')
How do I remove dicts from a list with duplicate fields in python?,"list(dict((x['id'], x) for x in L).values())"
Merge Columns within a DataFrame that have the Same Name,"df.groupby(df.columns, axis=1).sum()"
python dict comprehension with two ranges,"dict(zip(list(range(1, 5)), list(range(7, 11))))"
How to turn a boolean array into index array in numpy,numpy.where(mask)
case insensitive string comparison,if (string1.lower() == string2.lower()):
print('The strings are the same (case insensitive)'),
else:,
print('The strings are not the same (case insensitive)'),
case insensitive string comparison,if (string1.lower() == string2.lower()):
pass,
case insensitive string comparison,(string1.lower() == string2.lower())
case insensitive string comparison,(first.lower() == second.lower())
case insensitive string comparison,(first.upper() == second.upper())
Taking the results of a bash command and using it in python,"os.system(""awk '{print $10, $11},' test.txt > test2.txt"")"
How to remove multiple indexes from a list at the same time?,del my_list[2:6]
How to convert a string to its Base-10 representation?,"int(s.encode('hex'), 16)"
Python regular expression with codons,"re.findall('TAA(?:[ATGC]{3},)+?TAA', seq)"
Sorting a set of values,"sorted(s, key=float)"
convert an int to a hex string,hex(65)
Simple way to append a pandas series with same index,a.append(b).reset_index(drop=True)
Simple way to append a pandas series with same index,"pd.concat([a, b], ignore_index=True)"
"In Python, is there a concise way to use a list comprehension with multiple iterators?","[(i, j) for i in range(1, 3) for j in range(1, 5)]"
sorting values of python dict using sorted builtin function,"sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"
How can I select 'last business day of the month' in Pandas?,"pd.date_range('1/1/2014', periods=12, freq='BM')"
How do I disable the security certificate check in Python requests,"requests.get('https://kennethreitz.com', verify=False)"
"dropping a row in pandas with dates indexes, python",df.ix[:-1]
string contains substring,if ('blah' not in somestring):
pass,
string contains substring,if (needle in haystack):
pass,
string contains substring,string.find('substring')
string contains substring method,if (s.find('is') == (-1)):
"print(""No 'is' here!"")",
else:,
"print(""Found 'is' in the string."")",
Extract first and last row of a dataframe in pandas,"pd.concat([df.head(1), df.tail(1)])"
Django - Filter queryset by CharField value length,MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])
Django - Filter queryset by CharField value length,"MyModel.objects.filter(text__regex='^.{254},.*')"
Best way to count the number of rows with missing values in a pandas DataFrame,"sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)"
Sorting while preserving order in python,"sorted(enumerate(a), key=lambda x: x[1])"
How to set the font size of a Canvas' text item?,"canvas.create_text(x, y, font=('Purisa', 12), text=k)"
Python: How to use a list comprehension here?,[y['baz'] for x in foos for y in x['bar']]
pandas read csv with extra commas in column,"df = pd.read_csv('comma.csv', quotechar=""'"")"
avoiding regex in pandas str.replace,"df['a'] = df['a'].str.replace('in.', ' in. ')"
Finding the index of elements based on a condition using python list comprehension,[i for i in range(len(a)) if a[i] > 2]
check if a variable exists,('myVar' in locals())
check if a variable exists,('myVar' in globals())
check if a variable exists,"hasattr(obj, 'attr_name')"
check if a variable exists,if ('myVar' in locals()):
pass,
check if a variable exists,if ('myVar' in globals()):
pass,
Python lambda function,"lambda x, y: x + y"
What's the shortest way to count the number of items in a generator/iterator?,sum(1 for i in it)
how to get tuples from lists using list comprehension in python,"[(x, lst2[i]) for i, x in enumerate(lst)]"
how to get tuples from lists using list comprehension in python,"[(i, j) for i, j in zip(lst, lst2)]"
how to get tuples from lists using list comprehension in python,"[(lst[i], lst2[i]) for i in range(len(lst))]"
How do I convert a hex triplet to an RGB tuple and back?,"struct.unpack('BBB', rgbstr.decode('hex'))"
Check if something is not in a list,"(3 not in [2, 3, 4])"
Check if something is not in a list,"((2, 3) not in [(2, 3), (5, 6), (9, 1)])"
Check if something is not in a list,"((2, 3) not in [(2, 7), (7, 3), 'hi'])"
Check if something is not in a list,"(3 not in [4, 5, 6])"
"Create new list by taking first item from first list, and last item from second list","[value for pair in zip(a, b[::-1]) for value in pair]"
Remove one column for a numpy array,"b = np.delete(a, -1, 1)"
"Python mySQL Update, Working but not updating table",dbb.commit()
How do I join two dataframes based on values in selected columns?,"pd.merge(a, b, on=['A', 'B'], how='outer')"
How to change QPushButton text and background color,"setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;},')"
Finding the average of a list,sum(l) / float(len(l))
Python: Finding a (string) key in a dictionary that contains a substring,"[(k, v) for k, v in D.items() if 'Light' in k]"
How do I use a MD5 hash (or other binary data) as a key name?,k = hashlib.md5('thecakeisalie').hexdigest()
How to get only the last part of a path in Python?,os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))
Sorting datetime objects while ignoring the year?,"birthdays.sort(key=lambda d: (d.month, d.day))"
How do I extract table data in pairs using BeautifulSoup?,[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]
"python: rstrip one exact string, respecting order","""""""Boat.txt.txt"""""".replace('.txt', '')"
Python Pandas: How to get the row names from index of a dataframe?,list(df.index)
Python Pandas: How to get the row names from index of a dataframe?,df.index
List of all unique characters in a string?,""""""""""""".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"
List of all unique characters in a string?,list(set('aaabcabccd'))
List of all unique characters in a string?,""""""""""""".join(set('aaabcabccd'))"
Find rows with non zero values in a subset of columns in pandas dataframe,"df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]"
upload file with Python Mechanize,"br.form.add_file(open(filename), 'text/plain', filename)"
Multiple 'in' operators in Python?,"all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])"
How to hide output of subprocess in Python 2.7,"subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"
How to replace NaNs by preceding values in pandas DataFrame?,"df.fillna(method='ffill', inplace=True)"
How to create range of numbers in Python like in MATLAB,"print(np.linspace(1, 3, num=4, endpoint=False))"
How to create range of numbers in Python like in MATLAB,"print(np.linspace(1, 3, num=5))"
Symlinks on windows?,"kdll.CreateSymbolicLinkW('D:\\testdirLink', 'D:\\testdir', 1)"
Python: slicing a multi-dimensional array,"slice = [arr[i][0:2] for i in range(0, 2)]"
Upload files to Google cloud storage from appengine app,"upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')"
Change directory to the directory of a Python script,os.chdir(os.path.dirname(__file__))
Call a function with argument list in python,func(*args)
"Pandas DataFrame, how do i split a column into two","df['AB'].str.split(' ', 1, expand=True)"
"Pandas DataFrame, how do i split a column into two","df['A'], df['B'] = df['AB'].str.split(' ', 1).str"
Sorting Python list based on the length of the string,"print(sorted(xs, key=len))"
Sorting Python list based on the length of the string,"xs.sort(lambda x, y: cmp(len(x), len(y)))"
Sorting Python list based on the length of the string,xs.sort(key=lambda s: len(s))
how to plot arbitrary markers on a pandas data series?,ts.plot(marker='.')
get all combination of n binary value,"lst = list(itertools.product([0, 1], repeat=n))"
get all combination of n binary value,"lst = map(list, itertools.product([0, 1], repeat=n))"
get all combination of n binary value,"bin = [0, 1]"
"[(x, y, z) for x in bin for y in bin for z in bin]",
get all combination of n binary value,"lst = list(itertools.product([0, 1], repeat=3))"
Append string to the start of each value in a said column of a pandas dataframe (elegantly),df['col'] = 'str' + df['col'].astype(str)
How to get a variable name as a string in Python?,"dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])"
How to add a colorbar for a hist2d plot,"plt.colorbar(im, ax=ax)"
How to get every element in a list of list of lists?,[a for c in Cards for b in c for a in b]
Sorting dictionary keys in python,"sorted(d, key=d.get)"
How to count the number of occurences of `None` in a list?,print(len([x for x in lst if x is not None]))
Accessing dictionary by key in Django template,"{{json.key1},},"
Get unique values from a list in python,mynewlist = list(myset)
Get unique values from a list in python,"set(['a', 'b', 'c', 'd'])"
Python: A4 size for a plot,"figure(figsize=(11.69, 8.27))"
How to get everything after last slash in a URL?,"url.rsplit('/', 1)"
How to get everything after last slash in a URL?,"url.rsplit('/', 1)[-1]"
how to read a file in other directory in python,"x_file = open(os.path.join(direct, '5_1.txt'), 'r')"
How to create a list with the characters of a string?,list('5+6')
Flattening a list of NumPy arrays?,np.concatenate(input_list).ravel().tolist()
Converting a dict into a list,print([y for x in list(dict.items()) for y in x])
Converting a dict into a list,[y for x in list(dict.items()) for y in x]
How to pull a random record using Django's ORM?,MyModel.objects.order_by('?').first()
change current working directory in python,os.chdir('chapter3')
change current working directory in python,os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')
change current working directory in python,os.chdir('.\\chapter3')
How to create single Python dict from a list of dicts by summing values with common keys?,"dict((key, sum(d[key] for d in dictList)) for key in dictList[0])"
How to sort pandas data frame using values from several columns?,"df.sort(['c1', 'c2'], ascending=[True, True])"
Converting string series to float list,floats = [float(x) for x in s.split()]
Converting string series to float list,"floats = map(float, s.split())"
"How to set ""step"" on axis X in my figure in matplotlib python 2.6.6?","plt.xticks([1, 2, 3, 4, 5])"
read from stdin,for line in fileinput.input():
pass,
read from stdin,for line in sys.stdin:
pass,
How to check if a value exists in a dictionary (python),'one' in list(d.values())
How to check if a value exists in a dictionary (python),'one' in iter(d.values())
Calling a parent class constructor from a child class in python,"super(Instructor, self).__init__(name, year)"
how to create a dictionary using two lists in python?,"dict(zip(x, y))"
Sorting a list of dicts by dict values,"sorted(a, key=lambda i: list(i.values())[0], reverse=True)"
Sorting a list of dicts by dict values,"sorted(a, key=dict.values, reverse=True)"
pandas: how to do multiple groupby-apply operations,"df.groupby(level=0).agg(['sum', 'count', 'std'])"
How to add multiple values to a dictionary key in python?,"a.setdefault('somekey', []).append('bob')"
Python - sum values in dictionary,sum(item['gold'] for item in example_list)
Python - sum values in dictionary,sum([item['gold'] for item in example_list])
Python - sum values in dictionary,sum(item['gold'] for item in myLIst)
writing string to a file on a new line everytime?,f.write('text to write\n')
writing string to a file on a new line everytime?,file.write('My String\n')
Finding consecutive segments in a pandas data frame,df.reset_index().groupby('A')['index'].apply(np.array)
Python - how to refer to relative paths of resources when working with code repository,"fn = os.path.join(os.path.dirname(__file__), 'my_file')"
How to retrieve an element from a set without removing it?,e = next(iter(s))
How to execute a command prompt command from python,os.system('dir c:\\')
How to auto-scroll a gtk.scrolledwindow?,"self.treeview.connect('size-allocate', self.treeview_changed)"
Python: Find in list,"3 in [1, 2, 3]"
Convert date format python,"datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')"
python : how to convert string literal to raw string literal?,"s = s.replace('\\', '\\\\')"
Get output of python script from within python script,print(proc.communicate()[0])
Getting pandas dataframe from list of nested dictionaries,"pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"
Delete Column in Pandas based on Condition,"df.loc[:, ((df != 0).any(axis=0))]"
How to sort multidimensional array by column?,"sorted(a, key=lambda x: x[1])"
string to list conversion in python,"[x.strip() for x in s.split(',')]"
Get list item by attribute in Python,items = [item for item in container if item.attribute == value]
Python: Write a list of tuples to a file,"open('filename', 'w').write('\n'.join('%s %s' % x for x in mylist))"
Python regex to match multiple times,"pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)"
How do I read a text file into a string variable in Python,"str = open('very_Important.txt', 'r').read()"
Grouping dataframes in pandas?,"df.groupby(['A', 'B'])['C'].unique()"
read a file line by line into a list,with open(fname) as f:
content = f.readlines(),
read a file line by line into a list,with open('filename') as f:
lines = f.readlines(),
read a file line by line into a list,lines = [line.rstrip('\n') for line in open('filename')]
read a file line by line into a list,"with open('file.txt', 'r') as ins:"
array = [],
for line in ins:,
array.append(line),
Convert DataFrame column type from string to datetime,df['col'] = pd.to_datetime(df['col'])
Can a list of all member-dict keys be created from a dict of dicts using a list comprehension?,[k for d in list(foo.values()) for k in d]
Possible to get user input without inserting a new line?,"print('Hello, {0},, how do you do?'.format(input('Enter name here: ')))"
Create Pandas DataFrame from txt file with specific pattern,"df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])"
Pandas: How can I use the apply() function for a single column?,df['a'] = df['a'].apply(lambda x: x + 1)
How to check whether the system is FreeBSD in a python script?,platform.system()
How to sort python list of strings of numbers,"a = sorted(a, key=lambda x: float(x))"
Finding words after keyword in python,"re.search('name (.*)', s)"
Removing _id element from Pymongo results,"db.collection.find({},, {'_id': False},)"
How do you extract a column from a multi-dimensional array?,[row[1] for row in A]
How do you extract a column from a multi-dimensional array?,[row[0] for row in a]
Python - how to sort a list of numerical values in ascending order,"sorted(['10', '3', '2'], key=int)"
How can I tell if a file is a descendant of a given directory?,"os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"
Python: How to check a string for substrings from a list?,any(substring in string for substring in substring_list)
Construct pandas DataFrame from list of tuples,"df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
How to find and replace nth occurence of word in a sentence using python regular expression?,"re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\1Bull', s)"
How to find and replace nth occurence of word in a sentence using python regular expression?,"re.sub('^((.*?cat.*?){1},)cat', '\\1Bull', s)"
Sort list of strings by integer suffix in python,"sorted(the_list, key=lambda k: int(k.split('_')[1]))"
Sort list of strings by integer suffix in python,"sorted(the_list, key=lambda x: int(x.split('_')[1]))"
How to group similar items in a list?,"[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"
How to group similar items in a list?,"[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"
How do I use the HTMLUnit driver with Selenium from Python?,driver.get('http://www.google.com')
"Using Python's datetime module, can I get the year that UTC-11 is currently in?",(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year
How to find the difference between 3 lists that may have duplicate numbers,"Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"
How to remove tags from a string in python using regular expressions? (NOT in HTML),"re.sub('<[^>]*>', '', mystring)"
How can I unpack binary hex formatted data in Python?,data.encode('hex')
How to do a less than or equal to filter in Django queryset?,User.objects.filter(userprofile__level__gte=0)
How to use Beautiful Soup to find a tag with changing id?,soup.findAll(id=re.compile('para$'))
How to use Beautiful Soup to find a tag with changing id?,"soup.select('div[id^=""value_xxx_c_1_f_8_a_""]')"
How to delete an item in a list if it exists?,cleaned_list = [x for x in some_list if x is not thing]
user input and commandline arguments,var = input('Please enter something: ')
Add to integers in a list,foo.append(4)
Add to integers in a list,"foo.append([8, 7])"
Add to integers in a list,"x.insert(2, 77)"
Removing white space around a saved image in matplotlib,"plt.savefig('test.png', bbox_inches='tight')"
concatenate lists,(listone + listtwo)
concatenate lists,"for item in itertools.chain(listone, listtwo):"
pass,
how do you filter pandas dataframes by multiple columns,males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]
How to print backslash with Python?,print('\\')
How to replace values with None in Pandas data frame in Python?,"df.replace('-', np.nan)"
Delete column from pandas DataFrame,"df = df.drop('column_name', 1)"
Delete column from pandas DataFrame,"df.drop(df.columns[[0, 1, 3]], axis=1)"
Delete column from pandas DataFrame,"df.drop('column_name', axis=1, inplace=True)"
Disable abbreviation in argparse,parser = argparse.ArgumentParser(allow_abbrev=False)
Extract dictionary value from column in data frame,feature3 = [d.get('Feature3') for d in df.dic]
How to access pandas groupby dataframe by key,"df.loc[gb.groups['foo'], ('A', 'B')]"
String formatting in Python,"print('[%s, %s, %s]' % (1, 2, 3))"
String formatting in Python,"print('[{0},, {1},, {2},]'.format(1, 2, 3))"
Accessing Python dict values with the key start characters,"[v for k, v in list(my_dict.items()) if 'Date' in k]"
Python date string formatting,"""""""{0.month},/{0.day},/{0.year},"""""".format(my_date)"
Dropping a single (sub-) column from a MultiIndex,"df.drop(('col1', 'a'), axis=1)"
Dropping a single (sub-) column from a MultiIndex,"df.drop('a', level=1, axis=1)"
Build Dictionary in Python Loop - List and Dictionary Comprehensions,"{_key: _value(_key) for _key in _container},"
How to click on the text button using selenium python,browser.find_element_by_class_name('section-select-all').click()
"Python - Combine two dictionaries, concatenate string values?","dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)"
How to generate unique equal hash for equal dictionaries?,hash(pformat(a)) == hash(pformat(b))
How to convert nested list of lists into a list of tuples in python 3.3?,"list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))"
Summing across rows of Pandas Dataframe,"df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"
Summing across rows of Pandas Dataframe,"df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()"
change a string into uppercase,s.upper()
"Splitting a semicolon-separated string to a dictionary, in Python",dict(item.split('=') for item in s.split(';'))
how to set cookie in python mechanize,"br.addheaders = [('Cookie', 'cookiename=cookie value')]"
How to remove square bracket from pandas dataframe,df['value'] = df['value'].str[0]
How to remove square bracket from pandas dataframe,df['value'] = df['value'].str.get(0)
How to remove square bracket from pandas dataframe,df['value'] = df['value'].str.strip('[]')
Python getting a string (key + value) from Python Dictionary,""""""", """""".join(['{},_{},'.format(k, v) for k, v in d.items()])"
Easier way to add multiple list items?,sum(sum(x) for x in lists)
testing whether a Numpy array contains a given row,"any(np.equal(a, [1, 2]).all(1))"
How do I check if all elements in a list are the same?,len(set(mylist)) == 1
How to split a string at line breaks in python?,"[map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]"
Create a hierarchy from a dictionary of lists,"t = sorted(list(a.items()), key=lambda x: x[1])"
Search for string in txt file,if ('blabla' in open('example.txt').read()):
pass,
Search for string in txt file,f = open('example.txt')
"s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)",
if (s.find('blabla') != (-1)):,
pass,
Search for string in txt file,datafile = file('example.txt')
found = False,
for line in datafile:,
if (blabla in line):,
return True,
return False,
Replacing the empty strings in a string,"string2.replace('', string1)[len(string1):-len(string1)]"
getting every possible combination in a list,"list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))"
Python 3: How do I get a string literal representation of a byte string?,"""""""x = {},"""""".format(x.decode('utf8')).encode('utf8')"
Checking whether a variable is an integer,"isinstance(x, int)"
Checking whether a variable is an integer,(type(x) == int)
Play a Sound with Python,"winsound.PlaySound('sound.wav', winsound.SND_FILENAME)"
How to get the n next values of a generator in a list (python),[next(it) for _ in range(n)]
How to get the n next values of a generator in a list (python),"list(itertools.islice(it, 0, n, 1))"
How can I compare two lists in python and return matches,set(a).intersection(b)
How can I compare two lists in python and return matches,"[i for i, j in zip(a, b) if i == j]"
"How to print a list with integers without the brackets, commas and no quotes?","print(''.join(map(str, data)))"
python regex: match a string with only one instance of a character,"re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')"
How to import a module in Python with importlib.import_module,"importlib.import_module('.c', 'a.b')"
How to import a module in Python with importlib.import_module,importlib.import_module('a.b.c')
how to convert 2d list to 2d numpy array?,a = np.array(a)
Python regular expression for Beautiful Soup,"soup.find_all('div', class_=re.compile('comment-'))"
A sequence of empty lists of length n in Python?,[[] for _ in range(n)]
create dictionary from list of variables,"dict((k, globals()[k]) for k in ('foo', 'bar'))"
How to get two random records with Django,MyModel.objects.order_by('?')[:2]
How to use a dot in Python format strings?,"""""""Hello {user[name]},"""""".format(**{'user': {'name': 'Markus'},},)"
Python: using a dict to speed sorting of a list of tuples,"list_dict = {t[0]: t for t in tuple_list},"
Generate random integers between 0 and 9,"randint(0, 9)"
Generate random integers between 0 and 9,"random.randint(a, b)"
Generate random integers between 0 and 9,"print((random.randint(0, 9)))"
Reverse a string in Python two characters at a time (Network byte order),""""""""""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"
How to transform a time series pandas dataframe using the index attributes?,"pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"
How to check if all elements of a list matches a condition?,any(item[2] == 0 for item in items)
How to check if all elements of a list matches a condition?,[x for x in items if x[2] == 0]
Python: sorting dictionary of dictionaries,"sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)"
Logarithmic y-axis bins in python,"plt.yscale('log', nonposy='clip')"
extract digits in a simple way from a python string,"map(int, re.findall('\\d+', s))"
How can I list the contents of a directory in Python?,os.listdir('/home/username/www/')
How can I list the contents of a directory in Python?,os.listdir('path')
How to merge two DataFrames into single matching the column values,"pd.concat([distancesDF, datesDF.dates], axis=1)"
Python How to get every first element in 2 Dimensional List,[x[0] for x in a]
Python How to get every first element in 2 Dimensional List,[i[0] for i in a]
Regular expression to remove line breaks,"re.sub('(?<=[a-z])\\r?\\n', ' ', textblock)"
Reading utf-8 characters from a gzip file in python,"gzip.open('file.gz', 'rt', encoding='utf-8')"
Can Python test the membership of multiple values in a list?,"set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])"
Can Python test the membership of multiple values in a list?,"all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])"
Remove specific characters from a string,"line.translate(None, '!@#$')"
Remove specific characters from a string,"line = re.sub('[!@#$]', '', line)"
Remove specific characters from a string,"string.replace('1', '')"
Remove specific characters from a string,"a = a.replace(char, '')"
Remove specific characters from a string,"a = a.replace(char, '')"
Remove specific characters from a string,"line = line.translate(string.maketrans('', ''), '!@#$')"
How to binarize the values in a pandas DataFrame?,"pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]"
Storing a collection of integers in a list,"[3, 4, 1, 2]"
Is it possible to define global variables in a function in Python,globals()['something'] = 'bob'
I'm looking for a pythonic way to insert a space before capital letters,"re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\1 ', text)"
How can I convert Unicode to uppercase to print it?,print('ex\xe1mple'.upper())
Remove string from list if from substring list,[l.split('\\')[-1] for l in list_dirs]
What's the Pythonic way to combine two sequences into a dictionary?,"dict(zip(keys, values))"
How to Customize the time format for Python logging?,formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')
Python Regex replace,"new_string = re.sub('""(\\d+),(\\d+)""', '\\1.\\2', original_string)"
Can a python script execute a function inside a bash script?,subprocess.call('test.sh otherfunc')
Can a python script execute a function inside a bash script?,"subprocess.Popen(['bash', '-c', '. foo.sh; go'])"
A simple way to remove multiple spaces in a string in Python,""""""" """""".join(foo.split())"
How to convert decimal to binary list in python,"list('{0:0b},'.format(8))"
How to convert decimal to binary list in python,"[int(x) for x in list('{0:0b},'.format(8))]"
How to convert decimal to binary list in python,[int(x) for x in bin(8)[2:]]
"Is it possible to take an ordered ""slice"" of a dictionary in Python based on a list of keys?","dict(zip(my_list, map(my_dictionary.get, my_list)))"
Numpy: cartesian product of x and y array points into single array of 2D points,"numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"
Selenium Webdriver - NoSuchElementExceptions,driver.implicitly_wait(60)
Selenium Webdriver - NoSuchElementExceptions,driver.switch_to_frame('frameName')
Format time string in Python 3.3,"time.strftime('{%Y-%m-%d %H:%M:%S},')"
How do I sort a Python list of time values?,"sorted(['14:10:01', '03:12:08'])"
Regex for location matching - Python,"re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)"
Pandas: How can I remove duplicate rows from DataFrame and calculate their frequency?,"df1.groupby(['key', 'year']).size().reset_index()"
"How do I iterate over a Python dictionary, ordered by values?","sorted(list(dictionary.items()), key=operator.itemgetter(1))"
"How do I iterate over a Python dictionary, ordered by values?","sorted(iter(d.items()), key=lambda x: x[1])"
"How do I iterate over a Python dictionary, ordered by values?","sorted(list(dictionary.items()), key=lambda x: x[1])"
How to split 1D array into 2D array in NumPy by splitting the array at the last element?,"np.split(a, [-1])"
Python pandas - grouping by and summarizing on a field,"df.pivot(index='order', columns='sample')"
selecting across multiple columns with python pandas?,df[(df['A'] > 1) | (df['B'] < -1)]
Zip with list output instead of tuple,"[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]"
Select rows from a DataFrame based on values in a column in pandas,print(df.loc[df['A'] == 'foo'])
Select rows from a DataFrame based on values in a column in pandas,df.loc[df['column_name'] != some_value]
Select rows from a DataFrame based on values in a column in pandas,df.loc[~df['column_name'].isin(some_values)]
Select rows from a DataFrame based on values in a column in pandas,df.loc[df['column_name'] == some_value]
Select rows from a DataFrame based on values in a column in pandas,"print(df.loc[df['B'].isin(['one', 'three'])])"
How to repeat individual characters in strings in Python,""""""""""""".join(map(lambda x: x * 7, 'map'))"
Delete a file or folder,os.rmdir()
Delete a file or folder,"shutil.rmtree(path, ignore_errors=False, onerror=None)"
Delete a file or folder,os.removedirs(name)
How to add an extra row to a pandas dataframe,"df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']"
listing files from a directory using glob python,glob.glob('*')
listing files from a directory using glob python,glob.glob('[!hello]*.txt')
listing files from a directory using glob python,glob.glob('hello*.txt')
test a boolean expression in a Python string,eval('20<30')
Python copy a list of lists,new_list = [x[:] for x in old_list]
Convert scientific notation to decimal - python,"""""""{:.50f},"""""".format(float(a[0] / a[1]))"
How to remove 0's converting pandas dataframe to record,df.to_sparse(0)
python - readable list of objects,print([obj.attr for obj in my_list_of_objs])
get count of values associated with key in dict python,sum(1 if d['success'] else 0 for d in s)
get count of values associated with key in dict python,sum(d['success'] for d in s)
get path from a module name,imp.find_module('os')[1]
get the logical xor of two variables,(bool(a) != bool(b))
get the logical xor of two variables,((a and (not b)) or ((not a) and b))
get the logical xor of two variables,(bool(a) ^ bool(b))
get the logical xor of two variables,"xor(bool(a), bool(b))"
get the logical xor of two variables,return (bool(str1) ^ bool(str2))
How to alphabetically sort array of dictionaries on single key?,my_list.sort(key=operator.itemgetter('name'))
Python: Split string by list of separators,"re.split('\\s*,\\s*|\\s*;\\s*', 'a , b; cdf')"
Python: Split string by list of separators,"[t.strip() for s in string.split(',') for t in s.split(';')]"
lambda in python,"f = lambda x, y: x + y"
Creating a list of objects in Python,instancelist = [MyClass() for i in range(29)]
Python 2.7: making a dictionary object from a specially-formatted list object,"{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)},"
Shortest way to convert these bytes to int in python?,"struct.unpack('>q', s)[0]"
How can I concatenate a Series onto a DataFrame with Pandas?,"pd.concat([students, pd.DataFrame(marks)], axis=1)"
Custom Python list sorting,alist.sort(key=lambda x: x.foo)
How to get only div with id ending with a certain value in Beautiful Soup?,soup.select('div[id$=_answer]')
How can I solve system of linear equations in SymPy?,"linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))"
best way to extract subset of key-value pairs from python dictionary object,"{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'},},"
best way to extract subset of key-value pairs from python dictionary object,"dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"
best way to extract subset of key-value pairs from python dictionary object,"{k: bigdict.get(k, None) for k in ('l', 'm', 'n')},"
best way to extract subset of key-value pairs from python dictionary object,"{k: bigdict[k] for k in ('l', 'm', 'n')},"
Get contents of entire page using Selenium,driver.page_source
Extracting specific columns in numpy array,"data[:, ([1, 9])]"
Remove string between 2 characters from text string,"re.sub('\\[.*?\\]', '', 'abcd[e]yth[ac]ytwec')"
How can I resize the root window in Tkinter?,root.geometry('500x500')
How to capture the entire string while using 'lookaround' with chars in regex?,"re.findall('\\b(?:b+a)+b+\\b', mystring)"
"in Python, how to convert list of float numbers to string with certain format?","str_list = [tuple('{0:.8e},'.format(flt) for flt in sublist) for sublist in lst]"
"in Python, how to convert list of float numbers to string with certain format?","str_list = [['{0:.8e},'.format(flt) for flt in sublist] for sublist in lst]"
Getting the first elements per row in an array in Python?,t = tuple(x[0] for x in s)
How to obtain the day of the week in a 3 letter format from a datetime object in python?,datetime.datetime.now().strftime('%a')
"get the <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""nofollow noreferrer"">ASCII</a> value of a character as an int",ord('a')
"get the <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""nofollow noreferrer"">ASCII</a> value of a character as an int",ord('\u3042')
"get the <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""nofollow noreferrer"">ASCII</a> value of a character as an int",ord()
decode JSON,json.load(u)
Deleting mulitple columns in Pandas,"yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)"
How to read formatted input in python?,"[s.strip() for s in input().split(',')]"
Convert binary to list of digits Python,[int(d) for d in str(bin(x))[2:]]
How to get a max string length in nested lists,max(len(word) for word in i)
How to get a max string length in nested lists,"len(max(i, key=len))"
Python: How to Redirect Output with Subprocess?,os.system(my_cmd)
How do I sort a list of strings in Python?,mylist.sort(key=lambda x: x.lower())
How do I sort a list of strings in Python?,mylist.sort(key=str.lower)
How do I sort a list of strings in Python?,mylist.sort()
How do I sort a list of strings in Python?,list.sort()
set multi index of an existing data frame in pandas,"df.set_index(['Company', 'date'], inplace=True)"
How can I use a string with the same name of an object in Python to access the object itself?,"getattr(your_obj, x)"
Remove the first word in a Python string?,"s.split(' ', 1)[1]"
How to save Xlsxwriter file in certain path?,workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')
How to save Xlsxwriter file in certain path?,workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')
How to change legend size with matplotlib.pyplot,"pyplot.legend(loc=2, fontsize='x-small')"
How to change legend size with matplotlib.pyplot,"plot.legend(loc=2, prop={'size': 6},)"
How do you split a list into evenly sized chunks?,"[l[i:i + n] for i in range(0, len(l), n)]"
How do you split a list into evenly sized chunks?,"[l[i:i + n] for i in range(0, len(l), n)]"
How to check if character exists in DataFrame cell,df['a'].str.contains('-')
Python Regex - Remove special characters but preserve apostraphes,"re.sub(""[^\\w' ]"", '', ""doesn't this mean it -technically- works?"")"
find all digits between a character in python,"print(re.findall('\\d+', '\n'.join(re.findall('\xab([\\s\\S]*?)\xbb', text))))"
Use index in pandas to plot data,"monthly_mean.reset_index().plot(x='index', y='A')"
How to get data from command line from within a Python program?,"subprocess.check_output('echo ""foo""', shell=True)"
Easy way to convert a unicode list to a list containing python strings?,[x.encode('UTF8') for x in EmployeeList]
pandas: combine two columns in a DataFrame,"pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)"
How can I generate a list of consecutive numbers?,list(range(9))
"How to make a Python string out of non-ascii ""bytes""",""""""""""""".join(chr(i) for i in myintegers)"
Using inheritance in python,"super(Executive, self).__init__(*args)"
Removing items from unnamed lists in Python,[item for item in my_sequence if item != 'item']
randomly select an item from a list,random.choice(foo)
Python Check if all of the following items is in a list,"set(['a', 'b']).issubset(['a', 'b', 'c'])"
Python Check if all of the following items is in a list,"set(['a', 'b']).issubset(set(l))"
pass a string into subprocess.Popen,"p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)"
grep_stdout = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n')[0],
pass a string into subprocess.Popen,"p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)"
p.stdin.write('one\ntwo\nthree\nfour\nfive\nsix\n'),
p.communicate()[0],
p.stdin.close(),
Most pythonic way to convert a list of tuples,[list(t) for t in zip(*list_of_tuples)]
Most pythonic way to convert a list of tuples,zip(*list_of_tuples)
simple/efficient way to expand a pandas dataframe,"pd.merge(y, x, on='k')[['a', 'b', 'y']]"
Splitting string and removing whitespace Python,"[item.strip() for item in my_string.split(',')]"
Get all object attributes,print((obj.__dict__))
Get all object attributes,dir()
Get all object attributes,dir()
How to center a window with PyGObject,window.set_position(Gtk.WindowPosition.CENTER)
how to change the size of the sci notation above the y axis in matplotlib?,"plt.rc('font', **{'size': '30'},)"
Python pandas: check if any value is NaN in DataFrame,df.isnull().values.any()
Python - use list as function parameters,some_func(*params)
How to decode encodeURIComponent in GAE (python)?,urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')
Percentage match in pandas Dataframe,(trace_df['ratio'] > 0).mean()
How to convert a tuple to a string in Python?,emaillist = '\n'.join(item[0] for item in queryresult)
How to convert a tuple to a string in Python?,[item[0] for item in queryresult]
How to convert a tuple to a string in Python?,emaillist = '\n'.join([item[0] for item in queryresult])
Python get focused entry name,"print(('focus object class:', window2.focus_get().__class__))"
How to declare an array in python,a = [0] * 10000
How can I remove duplicate words in a string with Python?,"print(' '.join(sorted(set(words), key=words.index)))"
How to generate random numbers that are different?,"random.sample(range(1, 50), 6)"
How to generate random numbers that are different?,"random.sample(range(1, 50), 6)"
Dictionary to lowercase in Python,"{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'},.items())},"
Dictionary to lowercase in Python,"dict((k.lower(), v) for k, v in {'My Key': 'My Value'},.items())"
Dictionary to lowercase in Python,"dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'},.items())"
sorting list of list in python,[sorted(item) for item in data]
Is there a way to get a list of column names in sqlite?,"names = list(map(lambda x: x[0], cursor.description))"
finding out absolute path to a file from python,os.path.abspath(__file__)
how to sort 2d array by row in python?,"sorted(matrix, key=itemgetter(1))"
Finding index of the same elements in a list,"[index for index, letter in enumerate(word) if letter == 'e']"
How to print container object with unicode-containing values?,print(str(x).decode('raw_unicode_escape'))
Python regular expressions - how to capture multiple groups from a wildcard expression?,"re.findall('\\w', 'abcdefg')"
check whether a file exists,os.path.isfile(fname)
check whether a file exists,my_file = Path('/path/to/file')
if my_file.is_file():,
pass,
check whether a file exists,os.path.exists(file_path)
check whether a file exists,print(os.path.isfile('/etc/password.txt'))
check whether a file exists,print(os.path.isfile('/etc'))
check whether a file exists,print(os.path.exists('/does/not/exist'))
check whether a file exists,print(os.path.isfile('/does/not/exist'))
check whether a file exists,print(os.path.exists('/etc'))
check whether a file exists,print(os.path.exists('/etc/password.txt'))
Split Strings with Multiple Delimiters?,"""""""a;bcd,ef g"""""".replace(';', ' ').replace(',', ' ').split()"
"Why can you loop through an implicit tuple in a for loop, but not a comprehension in Python?",list(i for i in range(3))
Pythonically add header to a csv file,writer.writeheader()
How to flatten a tuple in python,"[(a, b, c) for a, (b, c) in l]"
Python - how to convert int to string represent a 32bit Hex number,"""""""0x{0:08X},"""""".format(3652458)"
How can I convert a Python dictionary to a list of tuples?,"[(v, k) for k, v in list(d.items())]"
How can I convert a Python dictionary to a list of tuples?,"[(v, k) for k, v in d.items()]"
How can I convert a Python dictionary to a list of tuples?,"[(v, k) for k, v in a.items()]"
How can I convert a Python dictionary to a list of tuples?,"[(k, v) for k, v in a.items()]"
What's the easiest way to convert a list of hex byte strings to a list of hex integers?,"[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]"
What's the easiest way to convert a list of hex byte strings to a list of hex integers?,"[int(x, 16) for x in L]"
Two values from one input in python?,"var1, var2 = input('Enter two numbers here: ').split()"
Django filter JSONField list of dicts,"Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'},])"
Is there a cleaner way to iterate through all binary 4-tuples?,"itertools.product(list(range(2)), repeat=4)"
Python - Get Yesterday's date as a string in YYYY-MM-DD format,(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')
Python 3: Multiply a vector by a matrix without NumPy,"np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])"
Parse_dates in Pandas,"df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')"
Importing files from different folder,"sys.path.insert(0, '/path/to/application/app/folder')"
import file,
How can a pandas merge preserve order?,"x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"
How can i create the empty json object in python,"json.loads(request.POST.get('mydata', '{},'))"
Slicing a list into a list of sub-lists,"list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))"
Slicing a list into a list of sub-lists,"list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"
Slicing a list into a list of sub-lists,"[input[i:i + n] for i in range(0, len(input), n)]"
Sorting numbers in string format with Python,"keys.sort(key=lambda x: map(int, x.split('.')))"
Sorting numbers in string format with Python,keys.sort(key=lambda x: [int(y) for y in x.split('.')])
numpy with python: convert 3d array to 2d,"img.transpose(2, 0, 1).reshape(3, -1)"
Replacing few values in a pandas dataframe column with another value,"df['BrandName'].replace(['ABC', 'AB'], 'A')"
Replacing few values in a pandas dataframe column with another value,"df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')"
Pandas: Subtract row mean from each element in row,"df.sub(df.mean(axis=1), axis=0)"
"Python, remove all non-alphabet chars from string",""""""""""""".join([i for i in s if i.isalpha()])"
How to split a string into integers in Python?,l = (int(x) for x in s.split())
How to split a string into integers in Python?,"""""""42 0"""""".split()"
How to split a string into integers in Python?,"map(int, '42 0'.split())"
Get the indexes of truthy elements of a boolean list as a list/tuple,"[i for i, elem in enumerate(bool_list, 1) if elem]"
How to group pandas DataFrame entries by date in a non-unique column,data.groupby(data['date'].map(lambda x: x.year))
Getting the indices of several elements in a NumPy array at once,"np.in1d(b, a).nonzero()[0]"
"In Python, how to display current time in readable format","time.strftime('%l:%M%p %z on %b %d, %Y')"
Rotate axis text in python matplotlib,"ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"
How does python do string magic?,""""""""""""".join(['x', 'x', 'x'])"
Array indexing in numpy,"x[(np.arange(x.shape[0]) != 1), :, :]"
How do I pull a recurring key from a JSON?,print(item['name'])
Read a File from redirected stdin with python,result = sys.stdin.read()
How to get the content of a Html page in Python,""""""""""""".join(soup.findAll(text=True))"
Extracting all rows from pandas Dataframe that have certain value in a specific column,data[data['Value'] == True]
Removing duplicate characters from a string,""""""""""""".join(set(foo))"
how to sort by a computed value in django,"sorted(Profile.objects.all(), key=lambda p: p.reputation)"
python pandas flatten a dataframe to a list,df.values.flatten()
how do I sort a python list of dictionaries given a list of ids with the desired order?,users.sort(key=lambda x: order.index(x['id']))
how do I sort a python list of dictionaries given a list of ids with the desired order?,users.sort(key=lambda x: order.index(x['id']))
Python requests library how to pass Authorization header with single token,"r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'},)"
How do I un-escape a backslash-escaped string in python?,"print('""Hello,\\nworld!""'.decode('string_escape'))"
Can I have a non-greedy regex with dotall?,"re.findall('a*?bc*?', 'aabcc', re.DOTALL)"
python/numpy: how to get 2D array column length?,a.shape[1]
Adding calculated column(s) to a dataframe in pandas,"d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)"
Count number of occurrences of a given substring in a string,"""""""abcdabcva"""""".count('ab')"
Get a list of values from a list of dictionaries in python,[d['key'] for d in l if 'key' in d]
Get a list of values from a list of dictionaries in python,[d['key'] for d in l]
Get a list of values from a list of dictionaries in python,[d['key'] for d in l]
How to order a list of lists by the first value,l1.sort(key=lambda x: int(x[0]))
How to order a list of lists by the first value,"sorted([[1, 'mike'], [1, 'bob']])"
case sensitive string replacement in Python,"""""""Abc"""""".translate(maketrans('abcABC', 'defDEF'))"
"python: dictionary to string, custom format?","""""""<br/>"""""".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"
how to write a unicode csv in Python 2.7,self.writer.writerow([str(s).encode('utf-8') for s in row])
how to clear the screen in python,os.system('cls')
how to clear the screen in python,os.system('clear')
"In python 2.4, how can I execute external commands with csh instead of bash?",os.system('tcsh your_own_script')
"In python 2.4, how can I execute external commands with csh instead of bash?","os.system(""zsh -c 'echo $0'"")"
"Updating a list of python dictionaries with a key, value pair from another list","[dict(d, count=n) for d, n in zip(l1, l2)]"
sum each value in a list of tuples,[sum(x) for x in zip(*l)]
sum each value in a list of tuples,"map(sum, zip(*l))"
Counting the number of non-NaN elements in a numpy ndarray matrix in Python,np.count_nonzero(~np.isnan(data))
Python: transform a list of lists of tuples,"map(list, zip(*main_list))"
Django - taking values from POST request,"request.POST.get('title', '')"
Check if string ends with one of the strings from a list,"""""""test.mp3"""""".endswith(('.mp3', '.avi'))"
Splitting strings in python,"re.findall('\\[[^\\]]*\\]|""[^""]*""|\\S+', s)"
Get top biggest values from each column of the pandas.DataFrame,"data.apply(lambda x: sorted(x, 3))"
How do I permanently set the current directory to the Desktop in Python?,os.chdir('C:/Users/Name/Desktop')
getting string between 2 characters in python,"re.findall('\\$([^$]*)\\$', string)"
getting string between 2 characters in python,"re.findall('\\$(.*?)\\$', '$sin (x)$ is an function of x')"
how to format date in ISO using python?,"datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"
Selecting specific column in each row from array,"A[[0, 1], [0, 1]]"
Selecting specific column in each row from array,"a[np.arange(3), (0, 1, 0)]"
Counting values in dictionary,"[k for k, v in dictA.items() if v.count('duck') > 1]"
Sub matrix of a list of lists (without numpy),"[[2, 3, 4], [2, 3, 4], [2, 3, 4]]"
How to call an element in an numpy array?,"print(arr[1, 1])"
Setting matplotlib colorbar range,"quadmesh.set_clim(vmin=0, vmax=15)"
read csv into record array in numpy,"my_data = genfromtxt('my_file.csv', delimiter=',')"
read csv into record array in numpy,"df = pd.read_csv('myfile.csv', sep=',', header=None)"
read csv into record array in numpy,"np.genfromtxt('myfile.csv', delimiter=',')"
read csv into record array,"np.genfromtxt('myfile.csv', delimiter=',', dtype=None)"
How do I read the first line of a string?,my_string.splitlines()[0]
How do I read the first line of a string?,"my_string.split('\n', 1)[0]"
How to generate a list from a pandas DataFrame with the column name and column values?,df.values.tolist()
How to replace repeated instances of a character with a single instance of that character in python,"re.sub('\\*\\*+', '*', text)"
How to replace repeated instances of a character with a single instance of that character in python,"re.sub('\\*+', '*', text)"
Multiplying values from two different dictionaries together in Python,"dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)"
Random strings in Python,return ''.join(random.choice(string.lowercase) for i in range(length))
How to count all elements in a nested dictionary?,sum(len(x) for x in list(food_colors.values()))
How to count all elements in a nested dictionary?,sum(len(v) for v in food_colors.values())
How to apply a logical operator to all elements in a python list,all(a_list)
Removing characters from string Python,""""""""""""".join(c for c in text if c not in 'aeiouAEIOU')"
Divide two lists in python,"[(x / y) for x, y in zip(a, b)]"
Capturing group with findall?,"re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')"
applying functions to groups in pandas dataframe,df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))
"Searching if the values on a list is in the dictionary whose format is key-string, value-list(strings)","[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]"
"Searching if the values on a list is in the dictionary whose format is key-string, value-list(strings)","[key for item in lst for key, value in list(my_dict.items()) if item in value]"
Add tuple to a list of tuples,"c = [[(i + j) for i, j in zip(e, b)] for e in a]"
Python: Get relative path from comparing two absolute paths,"os.path.commonprefix(['/usr/var', '/usr/var2/log'])"
Python: Get relative path from comparing two absolute paths,"print(os.path.relpath('/usr/var/log/', '/usr/var'))"
filtering grouped df in pandas,grouped.filter(lambda x: len(x) > 1)
Python: sorting a dictionary of lists,"sorted(list(myDict.items()), key=lambda e: e[1][2])"
What is the most pythonic way to avoid specifying the same value in a string,"""""""hello {name},, how are you {name},, welcome {name},"""""".format(name='john')"
How to reorder indexed rows based on a list in Pandas data frame,"df.reindex(['Z', 'C', 'A'])"
determine if a list contains other lists,"any(isinstance(el, list) for el in input_list)"
get the size of a list,len(items)
get the size of a list,"len([1, 2, 3])"
get the size of a list,items.__len__()
get the size of a list,len()
get the size of a list,len(s)
Fastest way to sort each row in a pandas dataframe,"df.sort(axis=1, ascending=False)"
Fastest way to sort each row in a pandas dataframe,"df.sort(df.columns, axis=1, ascending=False)"
Pandas DataFrame Groupby two columns and get counts,"df.groupby(['col5', 'col2']).size().groupby(level=1).max()"
How would I check a string for a certain letter in Python?,"'x' in ['x', 'd', 'a', 's', 'd', 's']"
Delete a dictionary item if the key exists,"mydict.pop('key', None)"
Delete a dictionary item if the key exists,del mydict[key]
Delete a dictionary item if the key exists,try:
del mydict[key],
except KeyError:,
pass,
try:,
del mydict[key],
except KeyError:,
pass,
Multiple positional arguments with Python and argparse,"parser.add_argument('input', nargs='+')"
How to avoid line color repetition in matplotlib.pyplot?,"pyplot.plot(x, y, color='#112233')"
Strip HTML from strings in Python,"re.sub('<[^<]+?>', '', text)"
Align numpy array according to another array,"a[np.in1d(a, b)]"
how to split a string on the first instance of delimiter in python,"""""""jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,"""""".split('=', 1)"
Control a print format when printing a list in Python,"print('[%s]' % ', '.join('%.3f' % val for val in list))"
Control a print format when printing a list in Python,"print('[' + ', '.join('%5.3f' % v for v in l) + ']')"
Control a print format when printing a list in Python,print([('%5.3f' % val) for val in l])
How to move to one folder back in python,os.chdir('..')
Convert Unicode to UTF-8 Python,print(text.encode('windows-1252'))
How can I convert a binary to a float number,"struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"
How can I convert a binary to a float number,"float(int('-0b1110', 0))"
How can I convert a binary to a float number,"struct.unpack('d', b8)[0]"
Plotting categorical data with pandas and matplotlib,df.colour.value_counts().plot(kind='bar')
Plotting categorical data with pandas and matplotlib,df.groupby('colour').size().plot(kind='bar')
Read lines containing integers from a file in Python?,line.strip().split(' ')
Pandas how to apply multiple functions to dataframe,"df.groupby(lambda idx: 0).agg(['mean', 'std'])"
sorting dictionary by numeric value,"sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)"
How do I find the largest integer less than x?,int(math.ceil(x)) - 1
check if the string is empty,if (not myString):
pass,
Most elegant way to check if the string is empty,if (not some_string):
pass,
Most elegant way to check if the string is empty,if (not my_string):
pass,
check if the string is empty,if some_string:
pass,
iterate over a dictionary in sorted order,it = iter(sorted(d.items()))
iterate over a dictionary in sorted order,"for (key, value) in sorted(d.items()):"
pass,
iterate over a dictionary in sorted order,return sorted(dict.items())
iterate over a dictionary in sorted order,return iter(sorted(dict.items()))
iterate over a dictionary in sorted order,"for (k, v) in sorted(foo.items()):"
pass,
iterate over a dictionary in sorted order,for k in sorted(foo.keys()):
pass,
finding the last occurrence of an item in a list python,last = len(s) - s[::-1].index(x) - 1
convert list to string,str1 = ''.join(list1)
convert list to string,' '.join((str(x) for x in L))
convert list to string,str1 = ''.join((str(e) for e in list1))
convert list to string,"makeitastring = ''.join(map(str, L))"
remove None value from a list without removing the 0 value,[x for x in L if x is not None]
How do I select a random element from an array in Python?,"random.choice([1, 2, 3])"
Creating a 2d matrix in python,x = [[None for _ in range(5)] for _ in range(6)]
Numpy: Get random set of rows from 2D array,"A[(np.random.choice(A.shape[0], 2, replace=False)), :]"
Numpy: Get random set of rows from 2D array,"A[(np.random.randint(A.shape[0], size=2)), :]"
Combining rows in pandas,df.groupby(df.index).sum()
Parsing XML with namespace in Python via 'ElementTree',"root.findall('{http://www.w3.org/2002/07/owl#},Class')"
"How do I generate a random string (of length X, a-z only) in Python?",""""""""""""".join(random.choice(string.lowercase) for x in range(X))"
Python cant find module in the same folder,sys.path.append('/path/to/2014_07_13_test')
round number to nearest integer,int(round(x))
round number to nearest integer,h = int(round(h))
round number to nearest integer,"round(32.268907563, 3)"
round number to nearest integer,"round(value, significantDigit)"
round number to nearest integer,"round(1.0005, 3)"
round number to nearest integer,"round(2.0005, 3)"
round number to nearest integer,"round(3.0005, 3)"
round number to nearest integer,"round(4.0005, 3)"
round number to nearest integer,"round(8.005, 2)"
round number to nearest integer,"round(7.005, 2)"
round number to nearest integer,"round(6.005, 2)"
round number to nearest integer,"round(1.005, 2)"
Pandas - FillNa with another column,df['Cat1'].fillna(df['Cat2'])
Python: Logging TypeError: not all arguments converted during string formatting,"logging.info('date=%s', date)"
Python: Logging TypeError: not all arguments converted during string formatting,"logging.info('date={},'.format(date))"
"In dictionary, converting the value from string to integer","{k: int(v) for k, v in d.items()},"
How can I add the corresponding elements of several lists of numbers?,"map(sum, zip(*lists))"
Python: How to convert a string containing hex bytes to a hex string,s.decode('hex')
Python: How to convert a string containing hex bytes to a hex string,binascii.a2b_hex(s)
MITM proxy over SSL hangs on wrap_socket with client,connection.send('HTTP/1.0 200 established\r\n\r\n')
MITM proxy over SSL hangs on wrap_socket with client,connection.send('HTTP/1.0 200 OK\r\n\r\n')
Set value for particular cell in pandas DataFrame,df['x']['C'] = 10
Norm along row in pandas,np.sqrt(np.square(df).sum(axis=1))
How do I remove identical items from a list and sort it in Python?,sorted(set(my_list))
Python Finding Index of Maximum in List,"max(enumerate(a), key=lambda x: x[1])[0]"
Python Accessing Values in A List of Dictionaries,[d['Name'] for d in thisismylist]
Python Accessing Values in A List of Dictionaries,"[(d['Name'], d['Age']) for d in thisismylist]"
How to grab one random item from a database in Django/postgreSQL?,model.objects.all().order_by('?')[0]
"Run a python script from another python script, passing in args",os.system('script2.py 1')
Python Regex for hyphenated words,"re.findall('\\w+(?:-\\w+)+', text)"
Create variable key/value pairs with argparse (python),"parser.add_argument('--conf', nargs=2, action='append')"
"How do you pick ""x"" number of unique numbers from a list in Python?","random.sample(list(range(1, 16)), 3)"
Sort a list of strings based on regular expression match or something similar,"strings.sort(key=lambda str: re.sub('.*%(.).*', '\\1', str))"
Sort a list of strings based on regular expression match or something similar,"strings.sort(key=lambda str: re.sub('.*%', '', str))"
Appending to 2D lists in Python,listy = [[] for i in range(3)]
Sort NumPy float array column by column,"A = np.array(sorted(A, key=tuple))"
Python list comprehension for loops,[(x + y) for x in '12345' for y in 'ab']
Trimming a string,' Hello '.strip()
Trimming a string,myString.strip()
Trimming a string,' Hello '.strip()
Trimming a string,' Hello'.strip()
Trimming a string,'Bob has a cat'.strip()
Trimming a string,'          Hello        '.strip()
Trimming a string,str.strip()
Trimming a string,myString.strip('\n')
Trimming a string,myString.lstrip('\n\r')
Trimming a string,myString.rstrip('\n\t')
Trimming a string,'  Hello\n'.strip(' ')
Sort a list of tuples depending on two elements,"sorted(unsorted, key=lambda element: (element[1], element[2]))"
"Python, Encoding output to UTF-8",print(content.decode('utf8'))
How do I vectorize this loop in numpy?,"np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)"
How to convert efficiently a dataframe column of string type into datetime in Python?,pd.to_datetime(df.ID.str[1:-3])
How to gracefully fallback to `NaN` value while reading integers from a CSV with Pandas?,"df = pd.read_csv('my.csv', dtype={'my_column': np.float64},, na_values=['n/a'])"
How to gracefully fallback to `NaN` value while reading integers from a CSV with Pandas?,"df = pd.read_csv('my.csv', na_values=['n/a'])"
All combinations of a list of lists,list(itertools.product(*a))
How to extract all UPPER from a string? Python,"re.sub('[^A-Z]', '', s)"
Get date from ISO week number in Python,"datetime.strptime('2011221', '%Y%W%w')"
"How to read a ""C source, ISO-8859 text""","codecs.open('myfile', 'r', 'iso-8859-1').read()"
List Comprehensions in Python : efficient selection in a list,[f(x) for x in list]
Regex matching 5-digit substrings not enclosed with digits,"re.findall('(?<!\\d)\\d{5},(?!\\d)', s)"
filtering elements from list of lists in Python?,[item for item in a if sum(item) > 10]
python: how to convert currency to decimal?,cents_int = int(round(float(dollars.strip('$')) * 100))
Remove final characters from string recursively - What's the best way to do this?,""""""""""""".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]"
Creating an empty list,l = []
Creating an empty list,l = list()
Creating an empty list,list()
Creating an empty list,[]
How to properly quit a program in python,sys.exit(0)
Add string in a certain position in Python,s[:4] + '-' + s[4:]
Python : how to append new elements in a list of list?,[[] for i in range(3)]
Python : how to append new elements in a list of list?,a = [[] for i in range(3)]
Changing the referrer URL in python requests,"requests.get(url, headers={'referer': my_referer},)"
"Python, Matplotlib, subplot: How to set the axis range?","pylab.ylim([0, 1000])"
Pandas convert a column of list to dummies,pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)
Finding the largest delta between two integers in a list in python,"max(abs(x - y) for x, y in zip(values[1:], values[:-1]))"
How to convert hex string to integer in Python?,"y = str(int(x, 16))"
check if a string is a number (float),a.isdigit()
check if a string is a number,isdigit()
check if a string is a number,b.isdigit()
pandas.read_csv: how to skip comment lines,"pd.read_csv(StringIO(s), sep=',', comment='#')"
Pandas: how to change all the values of a column?,df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))
sum a list of numbers in Python,sum(list_of_nums)
how to get the index of dictionary with the highest value in a list of dictionary,"max(lst, key=lambda x: x['score'])"
Get data from the meta tags using BeautifulSoup,"soup.findAll(attrs={'name': 'description'},)"
Python: how to get rid of spaces in str(dict)?,"str({'a': 1, 'b': 'as df'},).replace(': ', ':').replace(', ', ',')"
Python: how to get rid of spaces in str(dict)?,"'{' + ','.join('{0!r},:{1!r},'.format(*x) for x in list(dct.items())) + '},'"
Python- insert a character into a string,""""""""""""".join(parts[1:])"
Python- insert a character into a string,""""""",+"""""".join(c.rsplit('+', 1))"
How do I delete a row in a numpy array which contains a zero?,"a[np.all(a != 0, axis=1)]"
Extracting only characters from a string in Python,""""""" """""".join(re.split('[^a-zA-Z]*', 'your string'))"
Extracting only characters from a string in Python,"re.split('[^a-zA-Z]*', 'your string')"
Create Union of All Values Contained in Multiple Lists,results_union = set().union(*results_list)
Create Union of All Values Contained in Multiple Lists,return list(set(itertools.chain(*result_list)))
python: check if an numpy array contains any element of another array,"np.any(np.in1d(a1, a2))"
Removing control characters from a string in python,return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')
How to compare two lists in python,"all(i < j for i, j in zip(a, b))"
python selenium click on button,driver.find_element_by_css_selector('.button.c_button.s_button').click()
python selenium click on button,driver.find_element_by_css_selector('.button .c_button .s_button').click()
Is it possible to kill a process on Windows from within Python?,os.system('taskkill /im make.exe')
How to get current date and time from DB using SQLAlchemy,"print(select([my_table, func.current_date()]).execute())"
Remove duplicate chars using regex?,"re.sub('([a-z])\\1+', '\\1', 'ffffffbbbbbbbqqq')"
Regex to remove periods in acronyms?,"re.sub('(?<!\\w)([A-Z])\\.', '\\1', s)"
how to parse a list or string into chunks of fixed length,"split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]"
replacing all regex matches in single line,"re.sub('\\b(this|string)\\b', '<markup>\\1</markup>', 'this is my string')"
Output data from all columns in a dataframe in pandas,"pandas.set_option('display.max_columns', 7)"
Output data from all columns in a dataframe in pandas,"pandas.set_option('display.max_columns', None)"
Modifying a subset of rows in a pandas dataframe,"df.ix[df.A == 0, 'B'] = np.nan"
Selecting Element followed by text with Selenium WebDriver,"driver.find_element_by_xpath(""//li/label/input[contains(..,'polishpottery')]"")"
Ordering a list of dictionaries in python,"mylist.sort(key=operator.itemgetter('weight', 'factor'))"
Ordering a list of dictionaries in python,"mylist.sort(key=lambda d: (d['weight'], d['factor']))"
From a list of lists to a dictionary,"{x[1]: x for x in lol},"
Sorting dictionary keys based on their values,"sorted(d, key=lambda k: d[k][1])"
Python: How to round 123 to 100 instead of 100.0?,"int(round(123, -2))"
How do I create a file in python without overwriting an existing file,"fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)"
How to slice a list of strings with space delimiter?,new_list = [x.split()[-1] for x in Original_List]
Reverse a string,'hello world'[::(-1)]
Reverse a string,s[::(-1)]
Reverse a string,''.join(reversed('foo'))
Reverse a string,''.join(reversed(string))
Reverse a string,'foo'[::(-1)]
Reverse a string,a_string[::(-1)]
Reverse a string,def reversed_string(a_string):
return a_string[::(-1)],
Reverse a string,''.join(reversed(s))
Generate a sequence of numbers in Python,""""""","""""".join(str(i) for i in range(100) if i % 4 in (1, 2))"
How to convert this list into a dictionary,"dict([(e[0], int(e[1])) for e in lst])"
sorting a list of tuples in Python,"sorted(list_of_tuples, key=lambda tup: tup[::-1])"
sorting a list of tuples in Python,"sorted(list_of_tuples, key=lambda tup: tup[1])"
Concatenating two one-dimensional NumPy arrays,"numpy.concatenate([a, b])"
Writing a list to a file with Python,for item in thelist:
thefile.write(('%s\n' % item)),
Writing a list to a file with Python,for item in thelist:
pass,
Writing a list to a file with Python,"pickle.dump(itemlist, outfile)"
Writing a list to a file with Python,outfile.write('\n'.join(itemlist))
SQLAlchemy: a better way for update with declarative?,"session.query(User).filter_by(id=123).update({'name': 'Bob Marley'},)"
How to send cookies in a post request with the Python Requests library?,"r = requests.post('http://wikipedia.org', cookies=cookie)"
How to include third party Python libraries in Google App Engine?,"sys.path.insert(0, 'libs')"
get current time,datetime.datetime.now()
get current time,datetime.datetime.now().time()
get current time,"strftime('%Y-%m-%d %H:%M:%S', gmtime())"
get current time,str(datetime.now())
get current time,datetime.datetime.time(datetime.datetime.now())
Converting hex to int in python,ord('\xff')
Python Pandas Identify Duplicated rows with Additional Column,"df.groupby(['PplNum', 'RoomNum']).cumcount() + 1"
How to get UTC time in Python?,datetime.utcnow()
Python: Make last item of array become the first,a[-1:] + a[:-1]
pandas: how to run a pivot with a multi-index?,"df.set_index(['year', 'month', 'item']).unstack(level=-1)"
pandas: how to run a pivot with a multi-index?,"df.pivot_table(values='value', index=['year', 'month'], columns='item')"
How to print/show an expression in rational number form in python,print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')
What is the best way to sort list with custom sorting parameters in Python?,li1.sort(key=lambda x: not x.startswith('b.'))
How to loop backwards in python?,"range(10, 0, -1)"
Get Element value with minidom with Python,name[0].firstChild.nodeValue
Simple threading in Python 2.6 using thread.start_new_thread(),"thread.start_new_thread(myfunction, ('MyStringHere', 1))"
Simple threading in Python 2.6 using thread.start_new_thread(),"thread.start_new_thread(myfunction, ('MyStringHere', 1))"
How to find all positions of the maximum value in a list?,a.index(max(a))
Regex add character to matched string,"re.sub('\\.(?=[^ .])', '. ', para)"
how to turn a string of letters embedded in squared brackets into embedded lists,"[i.split() for i in re.findall('\\[([^\\[\\]]+)\\]', a)]"
extract item from list of dictionaries,[d for d in a if d['name'] == 'pluto']
extract item from list of dictionaries,[d for d in a if d['name'] == 'pluto']
Python: simplest way to get list of values from dict?,list(d.values())
String manipulation in Cython,"re.sub(' +', ' ', s)"
Set execute bit for a file using python,"os.chmod('my_script.sh', 484)"
Pandas to_csv call is prepending a comma,"df.to_csv('c:\\data\\t.csv', index=False)"
Python regex to remove all words which contains number,"re.sub('\\w*\\d\\w*', '', words).strip()"
How can I control the keyboard and mouse with Python?,"dogtail.rawinput.click(100, 100)"
How to parse dates with -0400 timezone string in python?,"datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')"
Python - Locating the position of a regex match in a string?,"re.search('\\bis\\b', String).start()"
Python - Locating the position of a regex match in a string?,"re.search('is', String).start()"
How to input an integer tuple from user?,"tuple(map(int, input().split(',')))"
How to input an integer tuple from user?,"tuple(int(x.strip()) for x in input().split(','))"
How to replace unicode characters in string with something else python?,"str.decode('utf-8').replace('\u2022', '*').encode('utf-8')"
How to replace unicode characters in string with something else python?,"str.decode('utf-8').replace('\u2022', '*')"
How to convert ndarray to array?,"np.zeros((3, 3)).ravel()"
What OS am I running on,import platform
platform.system(),
What OS am I running on,import platform
platform.release(),
What OS am I running on,print(os.name)
What is the most pythonic way to exclude elements of a list that start with a specific character?,[x for x in my_list if not x.startswith('#')]
"Python string formatting when string contains ""%s"" without escaping","""""""Day old bread, 50% sale {0},"""""".format('today')"
"List of Tuples (string, float)with NaN How to get the min value?","min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"
Python: Finding average of a nested list,a = [(sum(x) / len(x)) for x in zip(*a)]
How do I add custom field to Python log format string?,"logging.info('Log message', extra={'app_name': 'myapp'},)"
finding non-numeric rows in dataframe in pandas?,"df.applymap(lambda x: isinstance(x, (int, float)))"
Sort list of mixed strings based on digits,"sorted(l, key=lambda x: int(re.search('\\d+', x).group(0)))"
Function to close the window in Tkinter,self.root.destroy()
Calcuate mean for selected rows for selected columns in pandas data frame,"df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)"
How to filter by sub-level index in Pandas,df[df.index.map(lambda x: x[1].endswith('0630'))]
Deleting row with Flask-SQLAlchemy,db.session.delete(page)
How do I convert a unicode to a string at the Python level?,""""""""""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9')"
How do I convert a unicode to a string at the Python level?,""""""""""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9').decode('utf8')"
Directory listing,"for (dirname, dirnames, filenames) in os.walk('.'):"
for subdirname in dirnames:,
"print(os.path.join(dirname, subdirname))",
for filename in filenames:,
pass,
Directory listing,os.listdir(path)
How to rename all folders?,"os.rename(dir, dir + '!')"
Pythonic way to insert every 2 elements in a string,"""""""-"""""".join(a + b for a, b in zip(s[::2], s[1::2]))"
Printing numbers in python,print('%.3f' % 3.1415)
Add element to a json in python,data[0]['f'] = var
Retrieving python module path,print(a_module.__file__)
Retrieving python module path,print(os.getcwd())
Retrieving python module path,path = os.path.abspath(amodule.__file__)
Padding a list in python with particular value,self.myList.extend([0] * (4 - len(self.myList)))
Fastest Way to Drop Duplicated Index in a Pandas DataFrame,df[~df.index.duplicated()]
Is there a more pythonic way of exploding a list over a function's arguments?,foo(*i)
Generate list of numbers in specific format,[('%.2d' % i) for i in range(16)]
Summarizing a dictionary of arrays in Python,"sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]"
Summarizing a dictionary of arrays in Python,"heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))"
get index of character in python list,"['a', 'b'].index('b')"
How to set font size of Matplotlib axis Legend?,"plt.setp(legend.get_title(), fontsize='xx-small')"
Python: Convert a string to an integer,int('  23  ')
How to extract the n-th elements from a list of tuples in python?,[x[1] for x in elements]
getting the opposite diagonal of a numpy array,np.diag(np.rot90(array))
Convert list of tuples to list?,list(chain.from_iterable(a))
Removing white space from txt with python,"re.sub('\\s{2,},', '|', line.strip())"
Limiting floats to two decimal points,print(('%.2f' % a))
Limiting floats to two decimal points,"print(('{0:.2f},'.format(a)))"
Limiting floats to two decimal points,"print(('{0:.2f},'.format(round(a, 2))))"
Limiting floats to two decimal points,"print(('%.2f' % round(a, 2)))"
Limiting floats to two decimal points,('%.2f' % 13.9499999)
Limiting floats to two decimal points,('%.2f' % 3.14159)
Limiting floats to two decimal points,"float('{0:.2f},'.format(13.95))"
Limiting floats to two decimal points,"'{0:.2f},'.format(13.95)"
How to I load a tsv file into a Pandas DataFrame?,"DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\t')"
How to set UTC offset for datetime?,dateutil.parser.parse('2013/09/11 00:17 +0900')
Passing list of parameters to SQL in psycopg2,"cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))"
How would I sum a multi-dimensional array in the most succinct python?,"sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])"
Access an arbitrary element in a dictionary in Python,next(iter(dict.values()))
Access an arbitrary element in a dictionary in Python,next(iter(list(dict.values())))
Pandas: aggregate based on filter on another column,"df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"
sorting list of tuples by arbitrary key,"sorted(mylist, key=lambda x: order.index(x[1]))"
Python - Sort a list of dics by value of dict`s dict value,"sorted(persons, key=lambda x: x['passport']['birth_info']['date'])"
How can I remove the fragment identifier from a URL?,urlparse.urldefrag('http://www.address.com/something#something')
How to download to a specific directory with Python?,"urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')"
removing duplicates of a list of sets,list(set(frozenset(item) for item in L))
removing duplicates of a list of sets,[set(item) for item in set(frozenset(item) for item in L)]
How to terminate process from Python using pid?,p.terminate()
Delete all objects in a list,del mylist[:]
How to throw an error window in Python in Windows,"ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)"
Remove empty strings from a list of strings,str_list = list([_f for _f in str_list if _f])
How to remove whitespace in BeautifulSoup,"re.sub('[\\ \\n]{2,},', '', yourstring)"
Dot notation string manipulation,"re.sub('\\.[^.]+$', '', s)"
Removing elements from an array that are in another array,"A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"
write to csv from DataFrame python pandas,"a.to_csv('test.csv', cols=['sum'])"
call a Python script from another Python script,"exec(compile(open('test2.py').read(), 'test2.py', 'exec'))"
call a Python script from another Python script,"subprocess.call('test1.py', shell=True)"
How do I sort a zipped list in Python?,"sorted(zipped, key=lambda x: x[1])"
How do I sort a zipped list in Python?,zipped.sort(key=lambda t: t[1])
Sorting a dictionary by value then by key,"sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)"
Using BeautifulSoup to select div blocks within HTML,"soup.find_all('div', class_='crBlock ')"
Remove list of indices from a list in Python,"[element for i, element in enumerate(centroids) if i not in index]"
Comparing two lists in Python,list(set(listA) & set(listB))
http file downloading and saving,testfile = urllib.request.URLopener()
"testfile.retrieve('http://randomsite.com/file.gz', 'file.gz')",
http file downloading and saving,"urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
http file downloading and saving,file_name = wget.download(file_url)
Accented characters in Matplotlib,"ax.set_yticklabels(['\xe9', '\xe3', '\xe2'])"
How to get a list of all integer points in an n-dimensional cube using python?,"list(itertools.product(list(range(-x, y)), repeat=dim))"
How can I convert a unicode string into string literals in Python 2.7?,print(s.encode('unicode_escape'))
python - How to format variable number of arguments into a string?,"'Hello %s' % ', '.join(my_args)"
Python regex search AND split,"re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)"
Python regex search AND split,"re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)"
Convert list of dictionaries to Dataframe,pd.DataFrame(d)
How to split string into words that do not contain whitespaces in python?,"""""""This is a string"""""".split()"
How to split string into words that do not contain whitespaces in python?,"""""""This     is a     string"""""".split()"
python pandas: apply a function with arguments to a series,"my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)"
Python: How to remove all duplicate items from a list,woduplicates = list(set(lseperatedOrblist))
Sum of product of combinations in a list,"sum([(i * j) for i, j in list(itertools.combinations(l, 2))])"
Using variables in Python regular expression,"re.compile('{},-\\d*'.format(user))"
"In Python, how do I convert all of the items in a list to floats?",[float(i) for i in lst]
How can I multiply all items in a list together with Python?,from functools import reduce
"reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])",
How to write a tuple of tuples to a CSV file using Python,writer.writerow(A)
How to write a tuple of tuples to a CSV file using Python,writer.writerows(A)
"python, format string","""""""{}, %s {},"""""".format('foo', 'bar')"
Replace a string in list of lists,"example = [x.replace('\r\n', '') for x in example]"
Python: split elements of a list,[i.partition('\t')[-1] for i in l if '\t' in i]
Splitting a string by using two substrings in Python,"re.search('Test(.*)print', testStr, re.DOTALL)"
"python, locating and clicking a specific button with selenium",next = driver.find_element_by_css_selector('li.next>a')
Getting file size in Python?,os.stat('C:\\Python27\\Lib\\genericpath.py').st_size
how do i return a string from a regex match in python,"imtag = re.match('<img.*?>', line).group(0)"
How to change folder names in python?,"os.rename('Joe Blow', 'Blow, Joe')"
How to find overlapping matches with a regexp?,"re.findall('(?=(\\w\\w))', 'hello')"
express binary literals,bin(173)
express binary literals,"int('01010101111', 2)"
express binary literals,"int('010101', 2)"
express binary literals,"int('0b0010101010', 2)"
express binary literals,bin(21)
express binary literals,"int('11111111', 2)"
Delete digits in Python (Regex),"re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', s)"
Delete digits in Python (Regex),"re.sub('\\b\\d+\\b', '', s)"
Delete digits in Python (Regex),"s = re.sub('^\\d+\\s|\\s\\d+\\s|\\s\\d+$', ' ', s)"
Python Split String,"s.split(':', 1)[1]"
How can I split this comma-delimited string in Python?,"print(s.split(','))"
How can I split this comma-delimited string in Python?,"mystring.split(',')"
How to remove parentheses only around single words in a string,"re.sub('\\((\\w+)\\)', '\\1', s)"
how to open a url in python,webbrowser.open_new(url)
how to open a url in python,webbrowser.open('http://example.com')
PyQt QPushButton Background color,self.pushButton.setStyleSheet('background-color: red')
Zip and apply a list of functions over a list of values in Python,"[x(y) for x, y in zip(functions, values)]"
How do I modify the width of a TextCtrl in wxPython?,"wx.TextCtrl(self, -1, size=(300, -1))"
Displaying a grayscale Image,"imshow(imageArray, cmap='Greys_r')"
How can I replace all the NaN values with Zero's in a column of a pandas dataframe,df.fillna(0)
how to export a table dataframe in pyspark to csv?,df.toPandas().to_csv('mycsv.csv')
how to export a table dataframe in pyspark to csv?,df.write.csv('mycsv.csv')
Sum the second value of each tuple in a list,sum(x[1] for x in structure)
How to sum the nlargest() integers in groupby,df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())
what would be the python code to add time to a specific timestamp?,"datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')"
How to properly determine current script directory in Python?,os.path.dirname(os.path.abspath(__file__))
How can I do multiple substitutions using regex in python?,"re.sub('(.)', '\\1\\1', text.read(), 0, re.S)"
Python convert tuple to string,""""""""""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))"
How to get full path of current file's directory in Python?,os.path.dirname(os.path.abspath(__file__))
variable number of digit in format string,"""""""{0:.{1},%},"""""".format(value, digits)"
Get current URL in Python,self.request.url
Print a variable selected by a random number,random_choice = random.choice(choices)
Python: Sum string lengths,length = sum(len(s) for s in strings)
Sort a list by multiple attributes?,"s = sorted(s, key=lambda x: (x[1], x[2]))"
Sort a list by multiple attributes?,"s.sort(key=operator.itemgetter(1, 2))"
How to disable query cache with mysql.connector,con.commit()
Filtering a list of strings based on contents,[k for k in lst if 'ab' in k]
How do I find the first letter of each word?,output = ''.join(item[0].upper() for item in input.split())
Get name of primary field of Django model,CustomPK._meta.pk.name
How to count the number of words in a sentence?,len(s.split())
numpy matrix vector multiplication,"np.einsum('ji,i->j', a, b)"
check what version of Python is running,sys.version
check what version of Python is running,sys.version_info
Format number using LaTeX notation in Python,"print('\\num{{{0:.2g},},},'.format(1000000000.0))"
Python initializing a list of lists,x = [[] for i in range(3)]
How to apply django/jinja2 template filters 'escape' and 'linebreaks' correctly?,"{{my_variable | forceescape | linebreaks},},"
Split a list of tuples into sub-lists of the same tuple field,"zip(*[(1, 4), (2, 5), (3, 6)])"
Split a list of tuples into sub-lists of the same tuple field,"[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"
How can I turn a string into a list in Python?,list('hello')
pandas dataframe create new columns and fill with calculated values from same df,df['A_perc'] = df['A'] / df['sum']
Getting a list of all subdirectories in the current directory,os.walk(directory)
Getting a list of all subdirectories in the current directory,[x[0] for x in os.walk(directory)]
How to filter a dictionary in Python?,"{i: 'updated' for i, j in list(d.items()) if j != 'None'},"
How to filter a dictionary in Python?,"dict((k, 'updated') for k, v in d.items() if v is None)"
How to filter a dictionary in Python?,"dict((k, 'updated') for k, v in d.items() if v != 'None')"
How to count number of rows in a group in pandas group by object?,df.groupby(key_columns).size()
python sum the values of lists of list,result = [sum(b) for b in a]
What's the best way to search for a Python dictionary value in a list of dictionaries?,any(d['site'] == 'Superuser' for d in data)
2D array of objects in Python,nodes = [[Node() for j in range(cols)] for i in range(rows)]
How to replace (or strip) an extension from a filename in Python?,print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')
How to get the resolution of a monitor in Pygame?,"pygame.display.set_mode((0, 0), pygame.FULLSCREEN)"
How can I format a float using matplotlib's LaTeX formatter?,"ax.set_title('$%s \\times 10^{%s},$' % ('3.5', '+20'))"
Print file age in seconds using Python,print(os.path.getmtime('/tmp'))
(Django) how to get month name?,today.strftime('%B')
(Django) how to get month name?,today.strftime('%B')
join list of lists in python,[j for i in x for j in i]
join list of lists in python,print(list(itertools.chain.from_iterable(a)))
Convert Date String to Day of Week,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')"
Convert Date String to Day of Week,"datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')"
delete a list element by value,a.remove('b')
delete a list element by value,a.remove(c)
delete a list element by value,a.remove(6)
delete a list element by value,a.remove(6)
delete a list element by value,if (c in a):
a.remove(c),
delete a list element by value,try:
a.remove(c),
except ValueError:,
pass,
Python re.findall print all patterns,"re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')"
Outer product of each column of a 2D array to form a 3D array - NumPy,"np.einsum('ij,kj->jik', X, X)"
Getting the last element of a list,some_list[(-1)]
Getting the last element of a list,some_list[(-2)]
gets the nth-to-last element,some_list[(- n)]
Getting the last element of a list,alist[(-1)]
Getting the last element of a list,astr[(-1)]
Create a list of integers with duplicate values in Python,"print([u for v in [[i, i] for i in range(5)] for u in v])"
Create a list of integers with duplicate values in Python,"[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]"
Create a list of integers with duplicate values in Python,[(i // 2) for i in range(10)]
Fastest way to remove first and last lines from a Python string,s[s.find('\n') + 1:s.rfind('\n')]
Is there a Python dict without values?,"{(x ** 2) for x in range(100)},"
How to zip lists in a list,"zip(*[[1, 2], [3, 4], [5, 6]])"
How to zip lists in a list,"zip(*[[1, 2], [3, 4], [5, 6]])"
python http request with token,"requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"
get a new string from the 3rd character to the end of the string,x[2:]
substring a string,x[:2]
substring a string,x[:(-2)]
substring a string,x[(-2):]
substring a string,x[2:(-2)]
reversing a string,some_string[::(-1)]
selecting alternate characters,'H-e-l-l-o- -W-o-r-l-d'[::2]
substring a string,s = s[beginning:(beginning + LENGTH)]
Terminating a Python script,sys.exit()
Terminating a Python script,quit()
Terminating a Python script,sys.exit('some error message')
Transform unicode string in python,"data['City'].encode('ascii', 'ignore')"
get current CPU and RAM usage,psutil.cpu_percent()
psutil.virtual_memory(),
get current CPU and RAM usage,pid = os.getpid()
py = psutil.Process(pid),
memoryUse = (py.memory_info()[0] / (2.0 ** 30)),
get current CPU and RAM usage,print((psutil.cpu_percent()))
print((psutil.virtual_memory())),
"Pandas read_csv expects wrong number of columns, with ragged csv file","pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))"
First non-null value per row from a list of Pandas columns,df.stack().groupby(level=0).first()
format strings and named arguments in Python,"""""""{0}, {1},"""""".format(10, 20)"
format strings and named arguments in Python,"""""""{1}, {ham}, {0}, {foo}, {1},"""""".format(10, 20, foo='bar', ham='spam')"
How to convert strings numbers to integers in a list?,changed_list = [(int(f) if f.isdigit() else f) for f in original_list]
Add items to a dictionary of lists,"dict(zip(keys, zip(*data)))"
Python: Converting from ISO-8859-1/latin1 to UTF-8,apple.decode('iso-8859-1').encode('utf8')
How do you remove the column name row from a pandas DataFrame?,"df.to_csv('filename.csv', header=False)"
"how to get around ""Single '},' encountered in format string"" when using .format and formatting in printing","print('{0},:<15},},{1},:<15},},{2},:<8},},'.format('1', '2', '3'))"
"Python list of dicts, get max value index","max(ld, key=lambda d: d['size'])"
Format() in Python Regex,"""""""{0},\\w{{2},},b{1},\\w{{2},},quarter"""""".format('b', 'a')"
How to use 'User' as foreign key in Django 1.5,"user = models.ForeignKey('User', unique=True)"
Regex match even number of letters,re.compile('^([^A]*)AA([^A]|AA)*$')
Combining NumPy arrays,"b = np.concatenate((a, a), axis=0)"
How to custom sort an alphanumeric list?,"sorted(l, key=lambda x: x.replace('0', 'Z'))"
Plot logarithmic axes with matplotlib in python,ax.set_yscale('log')
Access environment variables,os.environ['HOME']
Access environment variables,os.environ['HOME']
Access environment variables,print(os.environ)
Access environment variables,os.environ
Access environment variables,print(os.environ.get('KEY_THAT_MIGHT_EXIST'))
Access environment variables,"print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"
Access environment variables,"print(os.environ.get('HOME', '/home/username/'))"
How to split a string within a list to create key-value pairs in Python,print(dict([s.split('=') for s in my_list]))
finding index of an item closest to the value in a list that's not entirely sorted,"min(enumerate(a), key=lambda x: abs(x[1] - 11.5))"
How to use lxml to find an element by text?,"e = root.xpath('.//a[contains(text(),""TEXT A"")]')"
How to use lxml to find an element by text?,"e = root.xpath('.//a[starts-with(text(),""TEXT A"")]')"
How to use lxml to find an element by text?,"e = root.xpath('.//a[text()=""TEXT A""]')"
Python: an efficient way to slice a list with a index list,c = [b[i] for i in index]
Multiplication of 1d arrays in numpy,"np.dot(a[:, (None)], b[(None), :])"
Multiplication of 1d arrays in numpy,"np.outer(a, b)"
Execute a file with arguments in Python shell,"subprocess.call(['./abc.py', arg1, arg2])"
Pandas: Fill missing values by mean in each group faster than transfrom,df[['value']].fillna(df.groupby('group').transform('mean'))
Python regex alternative for join,"re.sub('(.)(?=.)', '\\1-', s)"
Python regex alternative for join,"re.sub('(?<=.)(?=.)', '-', str)"
Index of element in Numpy array,"i, j = np.where(a == value)"
Finding the most frequent character in a string,print(collections.Counter(s).most_common(1)[0])
How to match beginning of string or character in Python,"float(re.findall('(?:^|_)' + par + '(\\d+\\.\\d*)', dir)[0])"
How to match beginning of string or character in Python,"re.findall('[^a]', 'abcd')"
How to get a list of variables in specific Python module?,print([item for item in dir(adfix) if not item.startswith('__')])
Get the first element of each tuple in a list in Python,[x[0] for x in rows]
Get the first element of each tuple in a list in Python,res_list = [x[0] for x in rows]
How to repeat Pandas data frame?,"pd.concat([x] * 5, ignore_index=True)"
How to repeat Pandas data frame?,pd.concat([x] * 5)
Sorting JSON in python by a specific value,"sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"
JSON to pandas DataFrame,pd.read_json(elevations)
Generate random numbers with a given (numerical) distribution,"numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
Find maximum value of a column and return the corresponding row values using Pandas,df.loc[df['Value'].idxmax()]
Finding recurring patterns in a string,"re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]"
convert binary string to numpy array,"np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')"
convert binary string to numpy array,"np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='>f4')"
How to use variables in SQL statement in Python?,"cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))"
How to use variables in SQL statement in Python?,"cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"
How to use variables in SQL statement in Python?,"cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"
pandas split string into columns,"df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"
pandas split string into columns,"df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"
pandas split string into columns,df['stats'].apply(pd.Series)
wait for shell command to complete,p.wait()
Unescaping escaped characters in a string using Python 3.2,s.encode('utf8')
Parse a string with a date to a datetime object,"datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')"
copy a file,"copyfile(src, dst)"
copy a file,"shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"
copy a file,"shutil.copy2('/dir/file.ext', '/new/dir')"
Joining a list that has Integer values with Python,"print(', '.join(str(x) for x in list_of_ints))"
how to multiply multiple columns by a column in Pandas,"df[['A', 'B']].multiply(df['C'], axis='index')"
convert string to hex in python,hex(ord('a'))
How to sum the values of list to the power of their indices,"sum(j ** i for i, j in enumerate(l, 1))"
Python/Django: How to remove extra white spaces & tabs from a string?,""""""" """""".join(s.split())"
How to strip comma in Python string,"s = s.replace(',', '')"
How to resample a dataframe with different functions applied to each column?,"frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean},)"
How do I get rid of Python Tkinter root window?,root.destroy()
Creating a Pandas dataframe from elements of a dictionary,"df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'},)"
How to obtain values of request variables using Python and Flask,first_name = request.args.get('firstname')
How to obtain values of request variables using Python and Flask,first_name = request.form.get('firstname')
How to read only part of a list of strings in python,[s[:5] for s in buckets]
how to sort by length of string followed by alphabetical order?,"the_list.sort(key=lambda item: (-len(item), item))"
how to slice a dataframe having date field as index?,df = df.set_index(['TRX_DATE'])
List comprehension with an accumulator,list(accumulate(list(range(10))))
How to convert a date string to different format,"datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')"
How to convert a date string to different format,"datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')"
How to remove multiple columns that end with same text in Pandas?,"df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]"
Python - How to extract the last x elements from a list,new_list = my_list[-10:]
Python - How to extract the last x elements from a list,my_list[-10:]
How to efficiently convert Matlab engine arrays to numpy ndarray?,np.array(x._data).reshape(x.size[::-1]).T
In pandas Dataframe with multiindex how can I filter by order?,"df.groupby(level=0, as_index=False).nth(0)"
How to convert list of numpy arrays into single numpy array?,"numpy.concatenate(LIST, axis=0)"
How can I convert literal escape sequences in a string to the corresponding bytes?,"""""""\\xc3\\x85あ"""""".encode('utf-8').decode('unicode_escape')"
How can I convert literal escape sequences in a string to the corresponding bytes?,"""""""\\xc3\\x85あ"""""".encode('utf-8')"
How do I merge two lists into a single list?,"[j for i in zip(a, b) for j in i]"
How do I merge two lists into a single list?,"[j for i in zip(a, b) for j in i]"
Removing character in list of strings,"print([s.replace('8', '') for s in lst])"
How to split a word into letters in Python,""""""","""""".join('Hello')"
"In Django, how do I select 100 random records from the database?",Content.objects.all().order_by('?')[:100]
Indexing one array by another in numpy,"A[np.arange(A.shape[0])[:, (None)], B]"
pandas pivot table of sales,"df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"
Confusing with the usage of regex in Python,"re.findall('([a-z]*)', 'f233op')"
Confusing with the usage of regex in Python,"re.findall('([a-z])*', 'f233op')"
Splitting a string based on a certain set of words,"re.split('_for_', 'happy_hats_for_cats')"
Splitting a string based on a certain set of words,"re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')"
Splitting a string based on a certain set of words,"[re.split('_(?:f?or|and)_', s) for s in l]"
How do I zip keys with individual values in my lists in python?,"[dict(zip(k, x)) for x in v]"
Python how to sort this list?,"sorted(lst, reverse=True)"
Sorting numpy array on multiple columns in Python,"order_array.sort(order=['year', 'month', 'day'])"
Sorting numpy array on multiple columns in Python,"df.sort(['year', 'month', 'day'])"
Python: find out whether a list of integers is coherent,"return my_list == list(range(my_list[0], my_list[-1] + 1))"
Concatenate rows of pandas DataFrame with same id,df.groupby('id').agg(lambda x: x.tolist())
Double-decoding unicode in python,'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')
Parse String to Float or Int,float(a)
Parse String to Float or Int,try:
return int(s),
except ValueError:,
return float(s),
know if an object has an attribute,"if hasattr(a, 'property'):"
pass,
know if an object has an attribute,"if hasattr(a, 'property'):"
pass,
know if an object has an attribute,"getattr(a, 'property', 'default value')"
delete every nth row or column in a matrix using Python,"np.delete(a, list(range(0, a.shape[1], 8)), axis=1)"
How do I create a datetime in Python from milliseconds?,datetime.datetime.fromtimestamp(ms / 1000.0)
fastest way to find the magnitude (length) squared of a vector field,"np.einsum('...j,...j->...', vf, vf)"
Simple URL GET/POST function,r = requests.get(url)
Simple URL GET/POST function,"r = requests.get(url, params=payload)"
Simple URL GET/POST function,"r = requests.post(url, data=payload)"
Simple URL GET/POST,"post_response = requests.post(url='http://httpbin.org/post', json=post_data)"
Slicing a list in Django template,"{{(mylist | slice): '3:8'},},"
pandas HDFStore - how to reopen?,"df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"
find last occurence of multiple characters in a string in Python,max(test_string.rfind(i) for i in '([{')
How to print Unicode character in Python?,print('here is your checkmark: ' + '\u2713')
How to print Unicode character in Python?,print('\u0420\u043e\u0441\u0441\u0438\u044f')
in python how do I convert a single digit number into a double digits string?,"print('{0},'.format('5'.zfill(2)))"
Best / most pythonic way to get an ordered list of unique items,sorted(set(itertools.chain.from_iterable(sequences)))
Pandas DataFrame to list,df['a'].values.tolist()
Pandas DataFrame to list,df['a'].tolist()
Escaping quotes in string,"replace('""', '\\""')"
How to check if a character is upper-case in Python?,print(all(word[0].isupper() for word in words))
What is the best way to remove a dictionary item by value in python?,"myDict = {key: val for key, val in list(myDict.items()) if val != 42},"
What is the best way to remove a dictionary item by value in python?,"{key: val for key, val in list(myDict.items()) if val != 42},"
How can I determine the byte length of a utf-8 encoded string in Python?,return len(s.encode('utf-8'))
"In Python 2.5, how do I kill a subprocess?","os.kill(process.pid, signal.SIGKILL)"
Python Pandas How to select rows with one or more nulls from a DataFrame without listing columns explicitly?,df[pd.isnull(df).any(axis=1)]
Strip random characters from url,"url.split('&')[-1].replace('=', '') + '.html'"
Expat parsing in python 3,"parser.ParseFile(open('sample.xml', 'rb'))"
how do I halt execution in a python script?,sys.exit()
How to dynamically assign values to class properties in Python?,"setattr(self, attr, group)"
How to decode a 'url-encoded' string in python,urllib.parse.unquote(urllib.parse.unquote(some_string))
How to decode a 'url-encoded' string in python,urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))
How to use Flask-Security register view?,app.config['SECURITY_REGISTER_URL'] = '/create_account'
IO Error while storing data in pickle,"output = open('/home/user/test/wsservice/data.pkl', 'wb')"
remove an element from a list by index,del a[(-1)]
remove an element from a list by index,a.pop(1)
remove an element from a list by index,a.pop()
remove an element from a list by index,a.pop(index)
remove an element from a list by index,del a[index]
How do I print a Celsius symbol with matplotlib?,ax.set_xlabel('Temperature (\u2103)')
How do I print a Celsius symbol with matplotlib?,ax.set_xlabel('Temperature ($^\\circ$C)')
'List of lists' to 'list' without losing empty lists from the original list of lists,[''.join(l) for l in list_of_lists]
How do I get a list of all the duplicate items using pandas in python?,"pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)"
deleting rows in numpy array,"x = numpy.delete(x, 2, axis=1)"
deleting rows in numpy array,"x = numpy.delete(x, 0, axis=0)"
Merge DataFrames in Pandas using the mean,"pd.concat((df1, df2), axis=1).mean(axis=1)"
Average values in two Numpy arrays,"np.mean(np.array([old_set, new_set]), axis=0)"
Changing marker's size in matplotlib,"scatter(x, y, s=500, color='green', marker='h')"
split items in list,"result = [item for word in words for item in word.split(',')]"
Converting JSON date string to python datetime,"datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')"
python comprehension loop for dictionary,sum(item['one'] for item in list(tadas.values()))
How to base64 encode a PDF file in Python,"a = open('pdf_reference.pdf', 'rb').read().encode('base64')"
split a string in python,a.rstrip().split('\n')
split a string in python,a.split('\n')[:-1]
How can I return HTTP status code 204 from a Django view?,return HttpResponse(status=204)
check if a value exist in a list,(7 in a)
check if a value exist in a list,('a' in a)
Sorting JSON data by keys value,"sorted(results, key=itemgetter('year'))"
How do I get current URL in Selenium Webdriver 2 Python?,print(browser.current_url)
Python: Split string with multiple delimiters,"re.split('; |, ', str)"
Unescaping Characters in a String with Python,"""""""\\u003Cp\\u003E"""""".decode('unicode-escape')"
Convert string date to timestamp in Python,"time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())"
Convert string date to timestamp in Python,"int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))"
How to get http headers in flask?,request.headers['your-header-name']
How to subset a data frame using Pandas based on a group criteria?,df.groupby('User')['X'].filter(lambda x: x.sum() == 0)
How to subset a data frame using Pandas based on a group criteria?,df.loc[df.groupby('User')['X'].transform(sum) == 0]
How to subset a data frame using Pandas based on a group criteria?,df.groupby('User')['X'].transform(sum) == 0
How do I find an element that contains specific text in Selenium Webdriver (Python)?,"driver.find_elements_by_xpath(""//*[contains(text(), 'My Button')]"")"
Convert pandas group by object to multi-indexed Dataframe,"df.set_index(['Name', 'Destination'])"
How do I coalesce a sequence of identical characters into just one?,"print(re.sub('(\\W)\\1+', '\\1', a))"
How to open a file with the standard application?,"os.system('start ""$file""')"
Convert a Unicode string to a string,"unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')"
Convert a Unicode string to a string,"a.encode('ascii', 'ignore')"
Get a filtered list of files in a directory,"files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\.jpg', f)]"
Adding a 1-D Array to a 3-D array in Numpy,"np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"
Adding a 1-D Array to a 3-D array in Numpy,"np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"
How can I launch an instance of an application using Python?,os.system('start excel.exe <path/to/file>')
What is the proper way to print a nested list with the highest value in Python,"print(max(x, key=sum))"
Functional statement in Python to return the sum of certain lists in a list of lists,sum(len(y) for y in x if len(y) > 1)
Python - Insert numbers in string between quotes,"re.sub('(\\d+)', '""\\1""', 'This is number 1 and this is number 22')"
Multiplying Rows and Columns of Python Sparse Matrix by elements in an Array,"numpy.dot(numpy.dot(a, m), a)"
How to check if something exists in a postgresql database using django?,"Entry.objects.filter(name='name', title='title').exists()"
Sort a nested list by two elements,"sorted(l, key=lambda x: (-int(x[1]), x[0]))"
Django - How to simply get domain name?,request.META['HTTP_HOST']
Python Regex Get String Between Two Substrings,"re.findall(""api\\('(.*?)'"", ""api('randomkey123xyz987', 'key', 'text')"")"
Call Perl script from Python,"subprocess.call(['/usr/bin/perl', './uireplace.pl', var])"
Pythonic way to print list items,print('\n'.join(str(p) for p in myList))
update dictionary with dynamic keys and values in python,"mydic.update({i: o['name']},)"
how to split a unicode string into list,list(stru.decode('utf-8'))
Convert UTF-8 with BOM to UTF-8 with no BOM in Python,u = s.decode('utf-8-sig')
How do I do a not equal in Django queryset filtering?,Entry.objects.filter(~Q(id=3))
How can I lookup an attribute in any scope by name?,"getattr(__builtins__, 'range')"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/r', '/t', '900'])"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/s'])"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/a '])"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/l '])"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/r'])"
How to erase the file contents of text file in Python?,"open('filename', 'w').close()"
How to erase the file contents of text file in Python?,"open('file.txt', 'w').close()"
Pandas DataFrame to List of Dictionaries,df.to_dict('index')
Pandas DataFrame to List of Dictionaries,df.to_dict('records')
pandas dataframe groupby datetime month,df.groupby(pd.TimeGrouper(freq='M'))
How do I divide the members of a list by the corresponding members of another list in Python?,"[(c / t) for c, t in zip(conversions, trials)]"
sort dict by value python,"sorted(data, key=data.get)"
sort dict by value python,sorted(data.values())
sort dict by value python,"sorted(list(data.items()), key=lambda x: x[1])"
sort dict by value python,"sorted(list(data.items()), key=lambda x: x[1])"
How do I display current time using Python + Django?,now = datetime.datetime.now().strftime('%H:%M:%S')
Find the nth occurrence of substring in a string,"""""""foo bar bar bar"""""".replace('bar', 'XXX', 1).find('bar')"
How do you check the presence of many keys in a Python dictinary?,"set(['stackoverflow', 'google']).issubset(sites)"
Replace part of a string in Python?,"stuff.replace(' and ', '/')"
How to use `numpy.savez` in a loop for save more than one array?,"np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])"
time offset,t = datetime.datetime.now()
"(t - datetime.timedelta(hours=1, minutes=10))",
time offset,"(t - datetime.timedelta(hours=1, minutes=10))"
time offset,"dt = datetime.datetime.combine(datetime.date.today(), t)"
time offset,dt -= datetime.timedelta(hours=5)
Manipulating binary data in Python,print(data.encode('hex'))
Manipulating binary data in Python,print(' '.join([str(ord(a)) for a in data]))
python - iterating over a subset of a list of tuples,[x for x in l if x[1] == 1]
How to read stdin to a 2d python array of integers?,a.fromlist([int(val) for val in stdin.read().split()])
Is there a way to refer to the entire matched expression in re.sub without the use of a group?,"print(re.sub('[_%^$]', '\\\\\\g<0>', line))"
How to use regular expression in lxml xpath?,"doc.xpath(""//a[starts-with(text(),'some text')]"")"
Compare elements of a list of lists and return a list,zip(*a)
Convert list of strings to int,"[map(int, sublist) for sublist in lst]"
Convert list of strings to int,[[int(x) for x in sublist] for sublist in lst]
Numpy: find index of elements in one array that occur in another array,"np.where(np.in1d(A, B))[0]"
Split dictionary of lists into list of dictionaries,"[{'key1': a, 'key2': b}, for a, b in zip(d['key1'], d['key2'])]"
Split dictionary of lists into list of dictionaries,"map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))"
Get Last Day of the Month,"calendar.monthrange(2002, 1)"
Get Last Day of the Month,"calendar.monthrange(2008, 2)"
Get Last Day of the Month,"calendar.monthrange(2100, 2)"
Get Last Day of the Month,"calendar.monthrange(year, month)[1]"
Get Last Day of the Month,"monthrange(2012, 2)"
Get Last Day of the Month,"(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))"
Calling an external command,from subprocess import call
Calling an external command,os.system('some_command with args')
Calling an external command,os.system('some_command < input_file | another_command > output_file')
Calling an external command,stream = os.popen('some_command with args')
Calling an external command,"print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())"
Calling an external command,print(os.popen('echo Hello World').read())
Calling an external command,"return_code = subprocess.call('echo Hello World', shell=True)"
Calling an external command,"p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)"
for line in p.stdout.readlines():,
"print(line, end=' ')",
retval = p.wait(),
Calling an external command,"call(['ls', '-l'])"
Url decode UTF-8 in Python,print(urllib.parse.unquote(url).decode('utf8'))
Url decode UTF-8 in Python,url = urllib.parse.unquote(url).decode('utf8')
Delete letters from string,""""""""""""".join(filter(str.isdigit, '12454v'))"
applying regex to a pandas dataframe,df['Season'].str.split('-').str[0].astype(int)
Sort tuples based on second parameter,my_list.sort(key=lambda x: x[1])
Find all occurrences of a substring in Python,"[m.start() for m in re.finditer('(?=tt)', 'ttt')]"
Find all occurrences of a substring in Python,"[m.start() for m in re.finditer('test', 'test test test test')]"
re.split with spaces in python,"re.findall('\\s+|\\S+', s)"
Working with set_index in Pandas DataFrame,"rdata.set_index(['race_date', 'track_code', 'race_number'])"
recursively go through all subdirectories and read files,"for (root, subFolders, files) in os.walk(rootdir):"
pass,
sorting a list of dictionary values by date in python,"list.sort(key=lambda item: item['date'], reverse=True)"
How to truncate a string using str.format in Python?,"""""""{:.5},"""""".format('aaabbbccc')"
How do I convert a string of hexadecimal values to a list of integers?,"struct.unpack('11B', s)"
Finding the index of an item given a list containing it in Python,"[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']"
How to generate all permutations of a list in Python,"print(list(itertools.product([1, 2, 3], [4, 5, 6])))"
How to generate all permutations of a list in Python,"itertools.permutations([1, 2, 3])"
Remove punctuation from Unicode formatted strings,"return re.sub('\\p{P},+', '', text)"
manually throw/raise an exception,raise ValueError('A very specific bad thing happened')
Manually raising (throwing) an exception,raise Exception('I know Python!')
Manually raising (throwing) an exception,raise Exception('I know python!')
Manually raising (throwing) an exception,"raise ValueError('represents a hidden bug, do not catch this')"
Manually raising (throwing) an exception,raise Exception('This is the exception you expect to handle')
Manually raising (throwing) an exception,raise ValueError('A very specific bad thing happened')
Manually raising (throwing) an exception,raise RuntimeError('specific message')
Manually raising (throwing) an exception,"raise AssertionError(""Unexpected value of 'distance'!"", distance)"
Clear text from textarea with selenium,driver.find_element_by_id('foo').clear()
Clear text from textarea with selenium,driver.find_element_by_id('foo').clear()
Convert an IP string to a number and vice versa,"socket.inet_ntoa(struct.pack('!L', 2130706433))"
How to rearrange Pandas column sequence?,"df = df[['x', 'y', 'a', 'b']]"
How to call Base Class's __init__ method from the child class?,"super(ChildClass, self).__init__(*args, **kwargs)"
Sum of all values in a Python dict,sum(d.values())
Sum of all values in a Python dict,sum(d.values())
Convert Python dictionary to JSON array,"json.dumps(your_data, ensure_ascii=False)"
numpy array assignment using slicing,"values = np.array([i for i in range(100)], dtype=np.float64)"
Sort a list of dictionary provided an order,"sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))"
how to change the case of first letter of a string?,return s[0].upper() + s[1:]
"how to change [1,2,3,4] to '1234' using python",""""""""""""".join([1, 2, 3, 4])"
Delete every non utf-8 symbols froms string,"line = line.decode('utf-8', 'ignore').encode('utf-8')"
How to execute a command in the terminal from a Python script?,os.system(command)
Python MySQL Parameterized Queries,"c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))"
Convert a string to datetime object in python,"dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"
